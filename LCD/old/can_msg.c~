/*********************************************************************
Product of Beyond Kinetics, Inc

This code handles can messages specific to the button board

A) Constructs a message with the current key state
B) Software Firmware Version Message
C) Board ID to the network

The complete 29 bit message consists of:	
21	MESSAGE_ID

8	INSTANCE_ID because there may be more than 1 button board put into the network
--------------
8	DEVICE_ID	identifies this board "Adrenaline Button"

DATE 	:  8/8/2013
AUTHOR	:  Stephen Tenniswood
********************************************************************/
#include <avr/sfr_defs.h>
#include "inttypes.h"
#include "interrupt.h"
#include "pin_definitions.h"
#include "../core/can.h"
#include "can_msg.h"
#include "../core/leds.h"
//#include "buttons.h"
#include "../core/can_eid.h"
#include "../core/can_id_list.h"
#include "../core/can_instance.h"
#include "LCD_Driver.h"
#include "LCD_Display.h"
#include "LCD_Text_6x8_chars.h"
#include "LCD_Text_12x16_chars.h"
#include "backlight.h"

#define DEVICE_ID	0x01000000

// FIRMWARE (Major.Minor)  (2.1)
#define MAJOR 0x01
#define MINOR 0x00
#define MANUFACTURER 0x0001				// Beyond Kinetics is Manufacturer #1!

byte SelectedFont = 1;

/************************************************************/
/* INCOMING MESSAGE RESPONSES : 
Call back function from the CAN ISR().  
Will parse the result based on the msg id.  */
/************************************************************/
void can_file_message( sCAN* mMsg )
{
	if ( id_match( mMsg->id , create_CAN_eid(ID_LCD_COMMAND, MyInstance)) )
	{
		can_proc_lcd_command_msg( mMsg );
	}
	else if ( id_match(mMsg->id , create_CAN_eid(ID_LCD_DRAW_TEXT, MyInstance)) )
	{
		//can_proc_draw_text_msg( mMsg );
	}
	else 
	{
		
	}
	/*else if ( id_match(mMsg->id , create_CAN_eid(ID_COLLECT_GRAPH_DATA, MyInstance)) )
	{
		can_proc_collect_data_msg( mMsg );
	}*/
}

/*******************************************************************/
// PROTECTED FUNCTIONS:
void can_proc_cursor_to_cmd( struct sCAN* mMsg )
{
	// MOVE CURSOR:
	byte Line	  = mMsg->data[1];
	byte StartCol = mMsg->data[2];
	GotoAddress(Line, StartCol );

	// CHANGE FONT IF REQUESTED :		
	byte NewFont  = mMsg->data[3];	
	if (NewFont)
		SelectedFont = NewFont;
}
void can_proc_clear_screen_cmd( struct sCAN* mMsg )
{	
	DD_DrawAllOff();
}
void can_proc_all_on_screen_cmd( struct sCAN* mMsg )
{	
	DD_DrawAllOn();
}
void can_proc_clear_eol_cmd( struct sCAN* mMsg )
{	
	byte Line	  = mMsg->data[1];
	byte StartCol = mMsg->data[2];
	byte EndCol	  = mMsg->data[3];
	DD_EraseLine( Line, StartCol, EndCol );
}
void can_proc_draw_graph_cmd( struct sCAN* mMsg )
{	
}
void can_proc_draw_polar_cmd( struct sCAN* mMsg )
{	// not implemented
}
void can_proc_monitor_can_cmd( struct sCAN* mMsg )
{
	// defined in can_buff.c
	/* Sender to provide either:   
	#define NO_HISTORY_OP_MODE 		0
	#define NORMAL_HISTORY_OP_MODE 	1
	#define MAILBOX_HISTORY_OP_MODE 2	*/
	OperationalMode = mMsg->data[0];
	
}
void can_proc_draw_line_cmd( struct sCAN* mMsg )
{
}
void can_proc_draw_horizontal_cmd( struct sCAN* mMsg )
{
	byte x_row	  = mMsg->data[1];		// [0..63]
	byte StartCol = mMsg->data[2];		// [0..127]
	byte EndCol   = mMsg->data[3];		// [0..127]	
	DD_DrawHorizontalLine( x_row, StartCol, EndCol );
}

void can_proc_draw_vertical_cmd( struct sCAN* mMsg )
{
	byte y_col	  = mMsg->data[1];		// [0..63]
	byte StartRow = mMsg->data[2];		// [0..127]
	byte EndRow   = mMsg->data[3];		// [0..127]	
	DD_DrawVerticalLine	( StartRow, EndRow, y_col );
}
void can_proc_draw_arc_cmd( struct sCAN* mMsg )
{
}
void can_proc_draw_circle_cmd( struct sCAN* mMsg )
{
}
void can_proc_draw_box_cmd( struct sCAN* mMsg )
{
	byte RowStart	 = mMsg->data[1];		// [0..63]
	byte RowEnd 	 = mMsg->data[2];		// [0..63]
	byte ColumnStart = mMsg->data[3];		// [0..127]	
	byte ColumnEnd   = mMsg->data[4];		// [0..127]
	DD_DrawBox( RowStart, RowEnd, ColumnStart, ColumnEnd );
}
void can_proc_invert_region_cmd( struct sCAN* mMsg )
{
}
void can_proc_set_window_cmd( struct sCAN* mMsg )
{
}
void can_proc_beep_cmd( struct sCAN* mMsg )
{
	byte On_ms	   = mMsg->data[1];		// [0..63]
	byte Off_ms    = mMsg->data[2];		// [0..63]
	byte NumBeeps  = mMsg->data[3];		// number of repeat times
	set_beep_times(On_ms, Off_ms, NumBeeps);
}
void can_proc_backlight_cmd( struct sCAN* mMsg )
{
	word tenth_percent;
	byte hi_ms	 = mMsg->data[1];		// Percent * 10  (ie 100.0 % integer representation)
	byte lo_ms   = mMsg->data[2];		// 
	tenth_percent = lo_ms;
	tenth_percent += (hi_ms<<8);
	float duty = tenth_percent / 1000.;
	set_brightness( duty );
}
// END OF PROTECTED FUNCTIONS
/*******************************************************************/
/*******************************************************************/
// CAN MESSAGE HANDLING FUNCTIONS:
void can_proc_lcd_command_msg( struct sCAN* mMsg )
{
    led_on( 4 );
	switch (mMsg->data[0])
	{
	case LCD_CMD_NO_ACTION		:		break;
	case LCD_CMD_CURSOR_TO		:	can_proc_cursor_to_cmd		(mMsg);		break;
	case LCD_CMD_CLEAR_SCREEN	:	can_proc_clear_screen_cmd	(mMsg);		break;
	case LCD_CMD_ALL_ON_SCREEN	:	can_proc_all_on_screen_cmd	(mMsg);		break;
	case LCD_CMD_CLEAR_EOL		:	can_proc_clear_eol_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_GRAPH		:	can_proc_draw_graph_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_POLAR		:	can_proc_draw_polar_cmd		(mMsg);		break;
	case LCD_CMD_MONITOR_CAN	:	can_proc_monitor_can_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_LINE		:	can_proc_draw_line_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_HORIZONTAL:	can_proc_draw_horizontal_cmd(mMsg);		break;
	case LCD_CMD_DRAW_VERTICAL	:	can_proc_draw_vertical_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_ARC		:	can_proc_draw_arc_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_CIRCLE	:	can_proc_draw_circle_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_BOX		:	can_proc_draw_box_cmd		(mMsg);		break;
	case LCD_CMD_INVERT_REGION	:	can_proc_invert_region_cmd	(mMsg);		break;
	case LCD_CMD_SET_WINDOW		:	can_proc_set_window_cmd		(mMsg);		break;
	case LCD_CMD_BEEP			:	can_proc_beep_cmd			(mMsg);		break;
	case LCD_CMD_BACKLIGHT		:	can_proc_backlight_cmd		(mMsg);		break;
	default: 		break;
	}
}

void can_proc_draw_text_msg( sCAN* mMsg )
{
	char string[8];
	for (int i=0; i<mMsg->header.DLC; i++)
		string[i] = mMsg->data[i];

	//GotoAddress( 4, 1 );
	switch(SelectedFont)
	{
	case 1	: Text_Out ( string );			break;
	case 2	: Text_Out( string );			break;
	default : Text_Out ( string );			break;
	}
}
       	
void can_proc_collect_data_msg( struct sCAN* mMsg )
{
	// Not implemented
}
		       	
void can_prep_board_id_msg( struct sCAN* mMsg )
{
	mMsg->id = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    mMsg->data[0] = (DEVICE_ID & 0xFF000000) >> 24;	// MSB first
    mMsg->data[1] = (DEVICE_ID & 0x00FF0000) >> 16;
    mMsg->data[2] = (DEVICE_ID & 0x0000FF00) >>  8;
    mMsg->data[3] = (DEVICE_ID & 0x000000FF) >>  0;	// LSB 
    
    mMsg->data[4] = MAJOR;
    mMsg->data[5] = MINOR;
    mMsg->data[6] = lo(MANUFACTURER);
    mMsg->data[7] = hi(MANUFACTURER);
    mMsg->header.DLC = 8;
    mMsg->header.rtr    = 0;
}

/************************************************************
  Operates on the currently selected CANPAGE MOB
  Adds a timestamp in addition to can_retrieve_data()
************************************************************/
void can_init_test_msg()
{
    msg1.id 	 = create_CAN_eid( 0x02, 0x0004, 0x01);
    msg1.data[0] = 0xA0;
    msg1.data[1] = 0x56;
    msg1.data[2] = 0xA1;
    msg1.data[3] = 0x57;
    
    msg1.data[4] = 0x12;
    msg1.data[5] = 0x34;
    msg1.data[6] = 0xEE;
    msg1.data[7] = 0xFF;
    msg1.header.DLC = 8;
    msg1.header.rtr = 0;
}

