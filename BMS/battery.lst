
battery.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  0000355e  000035f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000355e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  0080021c  0080021c  0000370e  2**0
                  ALLOC
  3 .stab         00000de0  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  000044f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  00004795  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000129a  00000000  00000000  00004b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000069a0  00000000  00000000  00005dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b00  00000000  00000000  0000c76f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000046ea  00000000  00000000  0000f26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b70  00000000  00000000  0001395c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f5e  00000000  00000000  000144cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b0d  00000000  00000000  0001642a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000975  00000000  00000000  00018f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001f0  00000000  00000000  000198ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <_ZL16BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e5       	ldi	r30, 0x5E	; 94
      a0:	f5 e3       	ldi	r31, 0x35	; 53
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 31       	cpi	r26, 0x1C	; 28
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	ac e1       	ldi	r26, 0x1C	; 28
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	af 31       	cpi	r26, 0x1F	; 31
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 8a 00 	call	0x114	; 0x114 <main>
      c2:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z4initv>:
bool okay_to_read_cal = false;
byte ResetReason = 0x00;

void init()
{
	ResetReason = MCUSR;		
      ca:	84 b7       	in	r24, 0x34	; 52
      cc:	80 93 1d 02 	sts	0x021D, r24
 	cli();
      d0:	f8 94       	cli
    chip_init ();    				// Chip initialization
      d2:	0e 94 76 10 	call	0x20ec	; 0x20ec <_Z9chip_initv>
	init_leds ();
      d6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_Z9init_ledsv>
	adc_init  ();
      da:	0e 94 2b 04 	call	0x856	; 0x856 <_Z8adc_initv>
	delay(1000000);					// ~ 2 sec
      de:	60 e4       	ldi	r22, 0x40	; 64
      e0:	72 e4       	ldi	r23, 0x42	; 66
      e2:	8f e0       	ldi	r24, 0x0F	; 15
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 3e 10 	call	0x207c	; 0x207c <_Z5delayl>
	read_cal();						// Read everything including motor stops.	
      ea:	0e 94 91 02 	call	0x522	; 0x522 <_Z8read_calv>
	// yes can_init() needs MyInstance to be set already for filtering!
	can_init(CAN_250K_BAUD);		/* Enables Mob0 for Reception! */
      ee:	83 e0       	ldi	r24, 0x03	; 3
      f0:	0e 94 d7 07 	call	0xfae	; 0xfae <_Z8can_inith>

    // INIT MYINSTANCE:	
	config_init();
      f4:	0e 94 75 11 	call	0x22ea	; 0x22ea <_Z11config_initv>
	can_instance_init();
      f8:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z17can_instance_initv>
	
    set_rx_callback			( can_file_message );
      fc:	86 e3       	ldi	r24, 0x36	; 54
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 b0 04 	call	0x960	; 0x960 <_Z15set_rx_callbackPFvP4sCANE>
	set_configure_callback	( config_change    );
     104:	81 eb       	ldi	r24, 0xB1	; 177
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_Z22set_configure_callbackPFvhE>
	sei();
     10c:	78 94       	sei
	
	OS_InitTask();
     10e:	0e 94 82 10 	call	0x2104	; 0x2104 <_Z11OS_InitTaskv>
	//sense_init();
}
     112:	08 95       	ret

00000114 <main>:

//********** main *****************************************************
word prevPosition = 0;
int main(void)
{
	init();
     114:	0e 94 65 00 	call	0xca	; 0xca <_Z4initv>
	System_LED_Control.systemMode = SYSTEM_LED_MODE_STROBE;
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	80 93 0c 03 	sts	0x030C, r24
	LED_1_ON();
     11e:	2b 98       	cbi	0x05, 3	; 5
	LED_2_ON();
     120:	2a 98       	cbi	0x05, 2	; 5
	LED_3_ON();
     122:	29 98       	cbi	0x05, 1	; 5
	LED_4_ON();
     124:	28 98       	cbi	0x05, 0	; 5
	
    while (1)
    {
    	// CAN Messaging will directly Start/Stop the motor.
		delay(one_second);
     126:	60 e8       	ldi	r22, 0x80	; 128
     128:	78 e3       	ldi	r23, 0x38	; 56
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 3e 10 	call	0x207c	; 0x207c <_Z5delayl>
		delay(one_second); 
     132:	60 e8       	ldi	r22, 0x80	; 128
     134:	78 e3       	ldi	r23, 0x38	; 56
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 3e 10 	call	0x207c	; 0x207c <_Z5delayl>
     13e:	f3 cf       	rjmp	.-26     	; 0x126 <main+0x12>

00000140 <_Z17extract_float_msgPh>:
/**************** VARIABLES *************************************/
uint8_t  size = sizeof(float);

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
     140:	df 93       	push	r29
     142:	cf 93       	push	r28
     144:	00 d0       	rcall	.+0      	; 0x146 <_Z17extract_float_msgPh+0x6>
     146:	00 d0       	rcall	.+0      	; 0x148 <_Z17extract_float_msgPh+0x8>
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
     14c:	a8 2f       	mov	r26, r24
     14e:	b9 2f       	mov	r27, r25
     150:	fe 01       	movw	r30, r28
     152:	31 96       	adiw	r30, 0x01	; 1

/**************** VARIABLES *************************************/
uint8_t  size = sizeof(float);

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
     154:	ce 01       	movw	r24, r28
     156:	05 96       	adiw	r24, 0x05	; 5
{
	float_array 	floater;
	for (int i=0; i<4; i++)
		floater.array[i] = mdata[i];
     158:	2d 91       	ld	r18, X+
     15a:	21 93       	st	Z+, r18

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
	float_array 	floater;
	for (int i=0; i<4; i++)
     15c:	e8 17       	cp	r30, r24
     15e:	f9 07       	cpc	r31, r25
     160:	d9 f7       	brne	.-10     	; 0x158 <_Z17extract_float_msgPh+0x18>
		floater.array[i] = mdata[i];
	return floater.value;
}
     162:	59 81       	ldd	r21, Y+1	; 0x01
     164:	4a 81       	ldd	r20, Y+2	; 0x02
     166:	3b 81       	ldd	r19, Y+3	; 0x03
     168:	2c 81       	ldd	r18, Y+4	; 0x04
     16a:	65 2f       	mov	r22, r21
     16c:	74 2f       	mov	r23, r20
     16e:	83 2f       	mov	r24, r19
     170:	92 2f       	mov	r25, r18
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	cf 91       	pop	r28
     17c:	df 91       	pop	r29
     17e:	08 95       	ret

00000180 <_Z15extract_word_bePh>:
word extract_word_be( byte* mData )
{
     180:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= (mData[0]<<8);
     182:	30 81       	ld	r19, Z
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	44 27       	eor	r20, r20
     188:	37 fd       	sbrc	r19, 7
     18a:	40 95       	com	r20
     18c:	54 2f       	mov	r21, r20
	retval |= mData[1];
     18e:	81 81       	ldd	r24, Z+1	; 0x01
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	28 2b       	or	r18, r24
     198:	39 2b       	or	r19, r25
     19a:	4a 2b       	or	r20, r26
     19c:	5b 2b       	or	r21, r27
	return retval;
}
     19e:	c9 01       	movw	r24, r18
     1a0:	08 95       	ret

000001a2 <_Z15extract_word_lePh>:
word extract_word_le( byte* mData )
{
     1a2:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     1a4:	31 81       	ldd	r19, Z+1	; 0x01
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	44 27       	eor	r20, r20
     1aa:	37 fd       	sbrc	r19, 7
     1ac:	40 95       	com	r20
     1ae:	54 2f       	mov	r21, r20
	return retval;
}
word extract_word_le( byte* mData )
{
	long int retval = 0;
	retval |= mData[0];
     1b0:	80 81       	ld	r24, Z
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
	retval |= (mData[1]<<8 );
     1b8:	28 2b       	or	r18, r24
     1ba:	39 2b       	or	r19, r25
     1bc:	4a 2b       	or	r20, r26
     1be:	5b 2b       	or	r21, r27
	return retval;
}
     1c0:	c9 01       	movw	r24, r18
     1c2:	08 95       	ret

000001c4 <_Z19extract_long_int_bePh>:

long int extract_long_int_be( byte* mData)
{
     1c4:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
	retval |= (((unsigned long)mData[2])<<8);
	retval |= (((unsigned long)mData[3]));
     1c6:	23 81       	ldd	r18, Z+3	; 0x03
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	50 e0       	ldi	r21, 0x00	; 0
}

long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
     1ce:	80 81       	ld	r24, Z
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	b8 2f       	mov	r27, r24
     1d8:	aa 27       	eor	r26, r26
     1da:	99 27       	eor	r25, r25
     1dc:	88 27       	eor	r24, r24
	retval |= (((unsigned long)mData[1])<<16);
     1de:	28 2b       	or	r18, r24
     1e0:	39 2b       	or	r19, r25
     1e2:	4a 2b       	or	r20, r26
     1e4:	5b 2b       	or	r21, r27
     1e6:	61 81       	ldd	r22, Z+1	; 0x01
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	cb 01       	movw	r24, r22
     1f0:	77 27       	eor	r23, r23
     1f2:	66 27       	eor	r22, r22
	retval |= (((unsigned long)mData[2])<<8);
     1f4:	26 2b       	or	r18, r22
     1f6:	37 2b       	or	r19, r23
     1f8:	48 2b       	or	r20, r24
     1fa:	59 2b       	or	r21, r25
     1fc:	82 81       	ldd	r24, Z+2	; 0x02
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ba 2f       	mov	r27, r26
     206:	a9 2f       	mov	r26, r25
     208:	98 2f       	mov	r25, r24
     20a:	88 27       	eor	r24, r24
	retval |= (((unsigned long)mData[3]));
     20c:	28 2b       	or	r18, r24
     20e:	39 2b       	or	r19, r25
     210:	4a 2b       	or	r20, r26
     212:	5b 2b       	or	r21, r27
	return retval;
}
     214:	b9 01       	movw	r22, r18
     216:	ca 01       	movw	r24, r20
     218:	08 95       	ret

0000021a <_Z19extract_long_int_lePh>:
long int extract_long_int_le( byte* mData)
{
     21a:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     21c:	22 81       	ldd	r18, Z+2	; 0x02
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	a9 01       	movw	r20, r18
     226:	33 27       	eor	r19, r19
     228:	22 27       	eor	r18, r18
	retval |= ((long)mData[3]<<24);
     22a:	63 81       	ldd	r22, Z+3	; 0x03
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	96 2f       	mov	r25, r22
     234:	88 27       	eor	r24, r24
     236:	77 27       	eor	r23, r23
     238:	66 27       	eor	r22, r22
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     23a:	26 2b       	or	r18, r22
     23c:	37 2b       	or	r19, r23
     23e:	48 2b       	or	r20, r24
     240:	59 2b       	or	r21, r25
	return retval;
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
     242:	60 81       	ld	r22, Z
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     24a:	26 2b       	or	r18, r22
     24c:	37 2b       	or	r19, r23
     24e:	48 2b       	or	r20, r24
     250:	59 2b       	or	r21, r25
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     252:	91 81       	ldd	r25, Z+1	; 0x01
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	aa 27       	eor	r26, r26
     258:	97 fd       	sbrc	r25, 7
     25a:	a0 95       	com	r26
     25c:	ba 2f       	mov	r27, r26
	retval |= ((long)mData[2])<<16;
	retval |= ((long)mData[3]<<24);
     25e:	28 2b       	or	r18, r24
     260:	39 2b       	or	r19, r25
     262:	4a 2b       	or	r20, r26
     264:	5b 2b       	or	r21, r27
	return retval;
}
     266:	b9 01       	movw	r22, r18
     268:	ca 01       	movw	r24, r20
     26a:	08 95       	ret

0000026c <_Z16can_file_messageP4sCAN>:

/******************************************************************************/
/************************ INCOMING MESSAGE PROCESSING *************************/
/******************************************************************************/
void can_file_message( sCAN* mMsg )
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
     272:	80 e4       	ldi	r24, 0x40	; 64
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	60 91 9d 02 	lds	r22, 0x029D
     27a:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
     27e:	9b 01       	movw	r18, r22
     280:	ac 01       	movw	r20, r24
     282:	68 81       	ld	r22, Y
     284:	79 81       	ldd	r23, Y+1	; 0x01
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	9b 81       	ldd	r25, Y+3	; 0x03
     28a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
     28e:	88 23       	and	r24, r24
     290:	21 f4       	brne	.+8      	; 0x29a <_Z16can_file_messageP4sCAN+0x2e>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     292:	80 91 1a 03 	lds	r24, 0x031A
	{
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
     296:	84 fd       	sbrc	r24, 4
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <_Z16can_file_messageP4sCAN+0x34>
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
	
	}
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret
{
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
	{
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
     2a0:	81 e7       	ldi	r24, 0x71	; 113
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
     2aa:	9b 01       	movw	r18, r22
     2ac:	ac 01       	movw	r20, r24
     2ae:	68 81       	ld	r22, Y
     2b0:	79 81       	ldd	r23, Y+1	; 0x01
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	9b 81       	ldd	r25, Y+3	; 0x03
     2b6:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z8id_match6idTypeS_>
	{
	
	}
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <_Z17can_proc_tilt_msgP4sCAN>:

/* Extract angle from the Message */
#define KConst 0.25
void can_proc_tilt_msg( sCAN* mMsg )
{
}
     2c0:	08 95       	ret

000002c2 <_Z21can_proc_set_stop_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_set_stop_msg( sCAN* mMsg )
{
}
     2c2:	08 95       	ret

000002c4 <_Z17can_prep_currentsP4sCANh>:
***********************************************************/
/* For informational purposes, send current of a power supply.
	mSupplyIndex  [0..3] which 5V supply to send status of.
*/
void can_prep_currents( sCAN* mMsg, byte mSupplyIndex )
{
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	df 93       	push	r29
     2ce:	cf 93       	push	r28
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <_Z17can_prep_currentsP4sCANh+0xe>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <_Z17can_prep_currentsP4sCANh+0x10>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	8c 01       	movw	r16, r24
	byte size = sizeof(float);
    mMsg->id = create_CAN_eid( ID_BMS_CURRENT_1+mSupplyIndex, MyInstance );
     2da:	e6 2e       	mov	r14, r22
     2dc:	ff 24       	eor	r15, r15
     2de:	c7 01       	movw	r24, r14
     2e0:	c7 96       	adiw	r24, 0x37	; 55
     2e2:	60 91 9d 02 	lds	r22, 0x029D
     2e6:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
     2ea:	f8 01       	movw	r30, r16
     2ec:	60 83       	st	Z, r22
     2ee:	71 83       	std	Z+1, r23	; 0x01
     2f0:	82 83       	std	Z+2, r24	; 0x02
     2f2:	93 83       	std	Z+3, r25	; 0x03

	// Send CURRENT :	(Fixed point)
	float_array Angle; 	
	Angle.value = CurrentSampleAvg[mSupplyIndex];
     2f4:	f7 01       	movw	r30, r14
     2f6:	ee 0f       	add	r30, r30
     2f8:	ff 1f       	adc	r31, r31
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	e4 5c       	subi	r30, 0xC4	; 196
     300:	fd 4f       	sbci	r31, 0xFD	; 253
     302:	30 81       	ld	r19, Z
     304:	21 81       	ldd	r18, Z+1	; 0x01
     306:	92 81       	ldd	r25, Z+2	; 0x02
     308:	83 81       	ldd	r24, Z+3	; 0x03
	for (int i=0; i<size; i++)
	    mMsg->data[i] = Angle.array[i];
     30a:	f8 01       	movw	r30, r16
     30c:	35 83       	std	Z+5, r19	; 0x05
     30e:	26 83       	std	Z+6, r18	; 0x06
     310:	97 83       	std	Z+7, r25	; 0x07
     312:	80 87       	std	Z+8, r24	; 0x08

	// Send Coloumbs :	(Fixed point)
	Angle.value = Cumulative[mSupplyIndex];
	for (int i=size; i<size+size; i++)
	    mMsg->data[i] = Angle.array[i];
     314:	8d 81       	ldd	r24, Y+5	; 0x05
     316:	81 87       	std	Z+9, r24	; 0x09
     318:	8e 81       	ldd	r24, Y+6	; 0x06
     31a:	82 87       	std	Z+10, r24	; 0x0a
     31c:	8f 81       	ldd	r24, Y+7	; 0x07
     31e:	83 87       	std	Z+11, r24	; 0x0b
     320:	88 85       	ldd	r24, Y+8	; 0x08
     322:	84 87       	std	Z+12, r24	; 0x0c

    mMsg->header.DLC = size+2;
     324:	84 81       	ldd	r24, Z+4	; 0x04
     326:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     328:	8c 60       	ori	r24, 0x0C	; 12
     32a:	84 83       	std	Z+4, r24	; 0x04
}
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	cf 91       	pop	r28
     336:	df 91       	pop	r29
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	08 95       	ret

00000342 <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
 ***************************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0x08;		// Free Spin.
     342:	88 e0       	ldi	r24, 0x08	; 8
     344:	80 93 1a 03 	sts	0x031A, r24
	config_byte_2 = 0;
     348:	10 92 1b 03 	sts	0x031B, r1

	
	// Default Thresholds:
	current_1_threshold = 0x7FF;
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	97 e0       	ldi	r25, 0x07	; 7
     350:	90 93 02 01 	sts	0x0102, r25
     354:	80 93 01 01 	sts	0x0101, r24
	current_2_threshold = 0x7FF;
     358:	90 93 04 01 	sts	0x0104, r25
     35c:	80 93 03 01 	sts	0x0103, r24
}
     360:	08 95       	ret

00000362 <_Z13config_changeh>:
	if (mByteChanged==1)
	{
		// Update BaseFrequency (even if not changed)

	}
}
     362:	08 95       	ret

00000364 <_Z17save_stops_eepromPh>:
Save both structures EndPoint1 & EndPoint2.
RETURN:		Last address written + 1 (ie. next available
			EEPROM address)
*******************************************************/
byte* save_stops_eeprom(byte* addr)
{
     364:	9c 01       	movw	r18, r24
	byte size = sizeof(sEndPoint);

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
     366:	e0 e2       	ldi	r30, 0x20	; 32
     368:	f2 e0       	ldi	r31, 0x02	; 2
     36a:	ac 01       	movw	r20, r24
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );
     36c:	81 91       	ld	r24, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     36e:	f9 99       	sbic	0x1f, 1	; 31
     370:	fe cf       	rjmp	.-4      	; 0x36e <_Z17save_stops_eepromPh+0xa>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     372:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     374:	52 bd       	out	0x22, r21	; 34
     376:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     378:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	fa 9a       	sbi	0x1f, 2	; 31
     380:	f9 9a       	sbi	0x1f, 1	; 31
     382:	0f be       	out	0x3f, r0	; 63
     384:	4f 5f       	subi	r20, 0xFF	; 255
     386:	5f 4f       	sbci	r21, 0xFF	; 255
{
	byte size = sizeof(sEndPoint);

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	e6 32       	cpi	r30, 0x26	; 38
     38c:	f8 07       	cpc	r31, r24
     38e:	71 f7       	brne	.-36     	; 0x36c <_Z17save_stops_eepromPh+0x8>
     390:	2a 5f       	subi	r18, 0xFA	; 250
     392:	3f 4f       	sbci	r19, 0xFF	; 255
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
     394:	e6 e2       	ldi	r30, 0x26	; 38
     396:	f2 e0       	ldi	r31, 0x02	; 2
     398:	a9 01       	movw	r20, r18
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );	
     39a:	81 91       	ld	r24, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     39c:	f9 99       	sbic	0x1f, 1	; 31
     39e:	fe cf       	rjmp	.-4      	; 0x39c <_Z17save_stops_eepromPh+0x38>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     3a0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     3a2:	52 bd       	out	0x22, r21	; 34
     3a4:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     3a6:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	fa 9a       	sbi	0x1f, 2	; 31
     3ae:	f9 9a       	sbi	0x1f, 1	; 31
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	4f 5f       	subi	r20, 0xFF	; 255
     3b4:	5f 4f       	sbci	r21, 0xFF	; 255
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	ec 32       	cpi	r30, 0x2C	; 44
     3ba:	f8 07       	cpc	r31, r24
     3bc:	71 f7       	brne	.-36     	; 0x39a <_Z17save_stops_eepromPh+0x36>
     3be:	2a 5f       	subi	r18, 0xFA	; 250
     3c0:	3f 4f       	sbci	r19, 0xFF	; 255
		eeprom_write_byte( addr++, *(ptr++) );	
	return addr;
}
     3c2:	c9 01       	movw	r24, r18
     3c4:	08 95       	ret

000003c6 <_Z17read_stops_eepromPh>:

Reads both structures EndPoint1 & EndPoint2 from EEPROM, 
and stores into the RAM.
***********************************************************/
byte* read_stops_eeprom(byte* addr)
{
     3c6:	9c 01       	movw	r18, r24
     3c8:	ac 01       	movw	r20, r24
     3ca:	e0 e2       	ldi	r30, 0x20	; 32
     3cc:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     3ce:	f9 99       	sbic	0x1f, 1	; 31
     3d0:	fe cf       	rjmp	.-4      	; 0x3ce <_Z17read_stops_eepromPh+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     3d2:	52 bd       	out	0x22, r21	; 34
     3d4:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     3d6:	f8 9a       	sbi	0x1f, 0	; 31
     3d8:	80 b5       	in	r24, 0x20	; 32
	byte size = sizeof(sEndPoint);
	
	// Read EndPoint1 & EndPoint2
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     3da:	81 93       	st	Z+, r24
     3dc:	4f 5f       	subi	r20, 0xFF	; 255
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
{
	byte size = sizeof(sEndPoint);
	
	// Read EndPoint1 & EndPoint2
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	e6 32       	cpi	r30, 0x26	; 38
     3e4:	f8 07       	cpc	r31, r24
     3e6:	99 f7       	brne	.-26     	; 0x3ce <_Z17read_stops_eepromPh+0x8>
     3e8:	2a 5f       	subi	r18, 0xFA	; 250
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	a9 01       	movw	r20, r18
     3ee:	e6 e2       	ldi	r30, 0x26	; 38
     3f0:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     3f2:	f9 99       	sbic	0x1f, 1	; 31
     3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <_Z17read_stops_eepromPh+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     3f6:	52 bd       	out	0x22, r21	; 34
     3f8:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     3fa:	f8 9a       	sbi	0x1f, 0	; 31
     3fc:	80 b5       	in	r24, 0x20	; 32
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     3fe:	81 93       	st	Z+, r24
     400:	4f 5f       	subi	r20, 0xFF	; 255
     402:	5f 4f       	sbci	r21, 0xFF	; 255
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	ec 32       	cpi	r30, 0x2C	; 44
     408:	f8 07       	cpc	r31, r24
     40a:	99 f7       	brne	.-26     	; 0x3f2 <_Z17read_stops_eepromPh+0x2c>
     40c:	2a 5f       	subi	r18, 0xFA	; 250
     40e:	3f 4f       	sbci	r19, 0xFF	; 255
		*(ptr++) = eeprom_read_byte( addr++ );
	
	return addr;
}
     410:	c9 01       	movw	r24, r18
     412:	08 95       	ret

00000414 <_Z29save_currentThresholds_eepromPh>:
****************************************************/
byte* save_currentThresholds_eeprom(byte* addr)
{
	// CURRENT THRESHOLD (for shutoff)
	// SAMPLING IS 10 BITS ONLY.
	eeprom_write_byte( addr++, lo(current_1_threshold>>2) );	
     414:	ac 01       	movw	r20, r24
     416:	4f 5f       	subi	r20, 0xFF	; 255
     418:	5f 4f       	sbci	r21, 0xFF	; 255
     41a:	20 91 01 01 	lds	r18, 0x0101
     41e:	30 91 02 01 	lds	r19, 0x0102
     422:	36 95       	lsr	r19
     424:	27 95       	ror	r18
     426:	36 95       	lsr	r19
     428:	27 95       	ror	r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     42a:	f9 99       	sbic	0x1f, 1	; 31
     42c:	fe cf       	rjmp	.-4      	; 0x42a <_Z29save_currentThresholds_eepromPh+0x16>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     42e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     430:	92 bd       	out	0x22, r25	; 34
     432:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     434:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	fa 9a       	sbi	0x1f, 2	; 31
     43c:	f9 9a       	sbi	0x1f, 1	; 31
     43e:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, lo(current_2_threshold>>2) );	
     440:	9a 01       	movw	r18, r20
     442:	2f 5f       	subi	r18, 0xFF	; 255
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	80 91 03 01 	lds	r24, 0x0103
     44a:	90 91 04 01 	lds	r25, 0x0104
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     456:	f9 99       	sbic	0x1f, 1	; 31
     458:	fe cf       	rjmp	.-4      	; 0x456 <_Z29save_currentThresholds_eepromPh+0x42>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     45a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     45c:	52 bd       	out	0x22, r21	; 34
     45e:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     460:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	fa 9a       	sbi	0x1f, 2	; 31
     468:	f9 9a       	sbi	0x1f, 1	; 31
     46a:	0f be       	out	0x3f, r0	; 63
	return addr;
}
     46c:	c9 01       	movw	r24, r18
     46e:	08 95       	ret

00000470 <_Z29read_currentThresholds_eepromPh>:

Reads from stall currents from EEPROM, and stores into RAM
***********************************************************/
byte* read_currentThresholds_eeprom(byte* addr)
{	// CURRENT THRESHOLD (for shutoff)	
	current_1_threshold = ((eeprom_read_byte( addr++ ))<<2);
     470:	ac 01       	movw	r20, r24
     472:	4f 5f       	subi	r20, 0xFF	; 255
     474:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     476:	f9 99       	sbic	0x1f, 1	; 31
     478:	fe cf       	rjmp	.-4      	; 0x476 <_Z29read_currentThresholds_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     47a:	92 bd       	out	0x22, r25	; 34
     47c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     47e:	f8 9a       	sbi	0x1f, 0	; 31
     480:	80 b5       	in	r24, 0x20	; 32
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	90 93 02 01 	sts	0x0102, r25
     490:	80 93 01 01 	sts	0x0101, r24
	current_2_threshold = ((eeprom_read_byte( addr++ ))<<2);
     494:	9a 01       	movw	r18, r20
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     49a:	f9 99       	sbic	0x1f, 1	; 31
     49c:	fe cf       	rjmp	.-4      	; 0x49a <_Z29read_currentThresholds_eepromPh+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     49e:	52 bd       	out	0x22, r21	; 34
     4a0:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     4a2:	f8 9a       	sbi	0x1f, 0	; 31
     4a4:	80 b5       	in	r24, 0x20	; 32
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	90 93 04 01 	sts	0x0104, r25
     4b4:	80 93 03 01 	sts	0x0103, r24
	return addr;
}
     4b8:	c9 01       	movw	r24, r18
     4ba:	08 95       	ret

000004bc <_Z27save_latest_position_eepromPh>:
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* save_latest_position_eeprom(byte* addr)
{
	return addr;
}
     4bc:	08 95       	ret

000004be <_Z27read_latest_position_eepromPh>:
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* read_latest_position_eeprom(byte* addr)
{
	return addr;
}
     4be:	08 95       	ret

000004c0 <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
****************************************************************/
byte getReportRate()
{
	switch ( (config_byte_2 & 0xF0) )
     4c0:	80 91 1b 03 	lds	r24, 0x031B
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	80 7f       	andi	r24, 0xF0	; 240
     4c8:	90 70       	andi	r25, 0x00	; 0
     4ca:	80 32       	cpi	r24, 0x20	; 32
     4cc:	91 05       	cpc	r25, r1
     4ce:	b1 f0       	breq	.+44     	; 0x4fc <_Z13getReportRatev+0x3c>
     4d0:	81 32       	cpi	r24, 0x21	; 33
     4d2:	91 05       	cpc	r25, r1
     4d4:	44 f0       	brlt	.+16     	; 0x4e6 <_Z13getReportRatev+0x26>
     4d6:	80 34       	cpi	r24, 0x40	; 64
     4d8:	91 05       	cpc	r25, r1
     4da:	91 f0       	breq	.+36     	; 0x500 <__stack+0x1>
     4dc:	80 38       	cpi	r24, 0x80	; 128
     4de:	91 05       	cpc	r25, r1
     4e0:	59 f0       	breq	.+22     	; 0x4f8 <_Z13getReportRatev+0x38>
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
	default: return -1;  break;
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
****************************************************************/
byte getReportRate()
{
	switch ( (config_byte_2 & 0xF0) )
     4e6:	00 97       	sbiw	r24, 0x00	; 0
     4e8:	29 f0       	breq	.+10     	; 0x4f4 <_Z13getReportRatev+0x34>
     4ea:	80 31       	cpi	r24, 0x10	; 16
     4ec:	91 05       	cpc	r25, r1
     4ee:	c9 f7       	brne	.-14     	; 0x4e2 <_Z13getReportRatev+0x22>
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
	default: return -1;  break;
	}
}
     4f2:	08 95       	ret
****************************************************************/
byte getReportRate()
{
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
     4f8:	8a e0       	ldi	r24, 0x0A	; 10
     4fa:	08 95       	ret
{
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	08 95       	ret
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
     500:	85 e0       	ldi	r24, 0x05	; 5
     502:	08 95       	ret

00000504 <_Z18isReportingEnabledv>:
	}
}

BOOL isReportingEnabled()
{
	if (getReportRate() != MODE_SEND_UPDATES_NONE)
     504:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z13getReportRatev>
		return TRUE;
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	88 23       	and	r24, r24
     50c:	09 f4       	brne	.+2      	; 0x510 <_Z18isReportingEnabledv+0xc>
     50e:	90 e0       	ldi	r25, 0x00	; 0
	else
		return FALSE;
}
     510:	89 2f       	mov	r24, r25
     512:	08 95       	ret

00000514 <_Z8save_calv>:
Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr;
	addr = save_configuration			(    );		// MyInstance & Confirmed & config bytes
     514:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z18save_configurationv>
	addr = save_stops_eeprom			(addr);
     518:	0e 94 b2 01 	call	0x364	; 0x364 <_Z17save_stops_eepromPh>
	addr = save_currentThresholds_eeprom(addr);
     51c:	0e 94 0a 02 	call	0x414	; 0x414 <_Z29save_currentThresholds_eepromPh>
	addr = save_latest_position_eeprom  (addr);
	return addr;
}
     520:	08 95       	ret

00000522 <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr;
	addr = read_configuration();		// myinstance, confirmed status, config bytes
     522:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_Z18read_configurationv>
	addr = read_stops_eeprom			(addr);
     526:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z17read_stops_eepromPh>
	addr = read_currentThresholds_eeprom(addr);
     52a:	0e 94 38 02 	call	0x470	; 0x470 <_Z29read_currentThresholds_eepromPh>
	addr = read_latest_position_eeprom	(addr);
	return addr;
}
     52e:	08 95       	ret

00000530 <_Z11OS_Dispatchv>:
	{	
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{
	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
     530:	80 91 14 03 	lds	r24, 0x0314
     534:	90 91 15 03 	lds	r25, 0x0315
     538:	64 e6       	ldi	r22, 0x64	; 100
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 aa 19 	call	0x3354	; 0x3354 <__divmodhi4>
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	09 f0       	breq	.+2      	; 0x546 <_Z11OS_Dispatchv+0x16>
     544:	08 95       	ret
	{
		led_timeslice_100ms();
     546:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_Z19led_timeslice_100msv>
     54a:	08 95       	ret

0000054c <__vector_27>:
byte next_channel = 0;
byte sample_counter = 0;
#define NUM_AVGS 10

ISR ( ADC_vect )
{
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	2f 93       	push	r18
     560:	3f 93       	push	r19
     562:	4f 93       	push	r20
     564:	5f 93       	push	r21
     566:	6f 93       	push	r22
     568:	7f 93       	push	r23
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	af 93       	push	r26
     570:	bf 93       	push	r27
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
	if (sample_counter++ > NUM_AVGS) {
     57a:	80 91 5d 02 	lds	r24, 0x025D
     57e:	98 2f       	mov	r25, r24
     580:	9f 5f       	subi	r25, 0xFF	; 255
     582:	90 93 5d 02 	sts	0x025D, r25
     586:	8b 30       	cpi	r24, 0x0B	; 11
     588:	10 f0       	brcs	.+4      	; 0x58e <__vector_27+0x42>
		sample_counter=0;
     58a:	10 92 5d 02 	sts	0x025D, r1
	}
	word result = ADCL;
     58e:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
     592:	90 91 79 00 	lds	r25, 0x0079
     596:	d9 2f       	mov	r29, r25
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	c9 2f       	mov	r28, r25
     59c:	c8 0f       	add	r28, r24
     59e:	d1 1d       	adc	r29, r1
	switch(next_channel)				// Round Robin style measurements
     5a0:	80 91 5c 02 	lds	r24, 0x025C
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	09 f4       	brne	.+2      	; 0x5aa <__vector_27+0x5e>
     5a8:	bc c0       	rjmp	.+376    	; 0x722 <__vector_27+0x1d6>
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <__vector_27+0x64>
     5ae:	65 c0       	rjmp	.+202    	; 0x67a <__vector_27+0x12e>
	{
	case 0:	CurrentSamples[0] = result;
     5b0:	d0 93 35 02 	sts	0x0235, r29
     5b4:	c0 93 34 02 	sts	0x0234, r28
			CurrentSampleAvg[0] = (gamma*CurrentSampleAvg[0]) + alpha*((float)CurrentSamples[0]);
     5b8:	60 91 3c 02 	lds	r22, 0x023C
     5bc:	70 91 3d 02 	lds	r23, 0x023D
     5c0:	80 91 3e 02 	lds	r24, 0x023E
     5c4:	90 91 3f 02 	lds	r25, 0x023F
     5c8:	2d ec       	ldi	r18, 0xCD	; 205
     5ca:	3c ec       	ldi	r19, 0xCC	; 204
     5cc:	4c e4       	ldi	r20, 0x4C	; 76
     5ce:	5f e3       	ldi	r21, 0x3F	; 63
     5d0:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     5d4:	7b 01       	movw	r14, r22
     5d6:	8c 01       	movw	r16, r24
     5d8:	be 01       	movw	r22, r28
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     5e2:	2d ec       	ldi	r18, 0xCD	; 205
     5e4:	3c ec       	ldi	r19, 0xCC	; 204
     5e6:	4c e4       	ldi	r20, 0x4C	; 76
     5e8:	5e e3       	ldi	r21, 0x3E	; 62
     5ea:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	c8 01       	movw	r24, r16
     5f4:	b7 01       	movw	r22, r14
     5f6:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     5fa:	26 2f       	mov	r18, r22
     5fc:	37 2f       	mov	r19, r23
     5fe:	48 2f       	mov	r20, r24
     600:	59 2f       	mov	r21, r25
     602:	20 93 3c 02 	sts	0x023C, r18
     606:	30 93 3d 02 	sts	0x023D, r19
     60a:	40 93 3e 02 	sts	0x023E, r20
     60e:	50 93 3f 02 	sts	0x023F, r21
			Cumulative[0] += CurrentSampleAvg[0];
     612:	20 91 4c 02 	lds	r18, 0x024C
     616:	30 91 4d 02 	lds	r19, 0x024D
     61a:	40 91 4e 02 	lds	r20, 0x024E
     61e:	50 91 4f 02 	lds	r21, 0x024F
     622:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     626:	60 93 4c 02 	sts	0x024C, r22
     62a:	70 93 4d 02 	sts	0x024D, r23
     62e:	80 93 4e 02 	sts	0x024E, r24
     632:	90 93 4f 02 	sts	0x024F, r25
			next_channel = 1;
     636:	81 e0       	ldi	r24, 0x01	; 1
			ADCSRA |= (1<<ADSC);			// Start conversion
			break;			
	case 1:	CurrentSamples[1] = result;
			CurrentSampleAvg[1] = (gamma*CurrentSampleAvg[1]) + alpha*((float)CurrentSamples[1]);
			Cumulative[1] += CurrentSampleAvg[1];
			next_channel = 2;
     638:	80 93 5c 02 	sts	0x025C, r24
			ADMUX = CURRSENSE_2_MUX;	// Select Right Current Read
     63c:	87 e4       	ldi	r24, 0x47	; 71
     63e:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
     642:	80 91 7a 00 	lds	r24, 0x007A
     646:	80 64       	ori	r24, 0x40	; 64
     648:	80 93 7a 00 	sts	0x007A, r24
			ADMUX = CURRSENSE_4_MUX;
			ADCSRA |= (1<<ADSC);		// Start conversion
			break;
	}
	// Clear IF automatically?	
}
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	bf 91       	pop	r27
     656:	af 91       	pop	r26
     658:	9f 91       	pop	r25
     65a:	8f 91       	pop	r24
     65c:	7f 91       	pop	r23
     65e:	6f 91       	pop	r22
     660:	5f 91       	pop	r21
     662:	4f 91       	pop	r20
     664:	3f 91       	pop	r19
     666:	2f 91       	pop	r18
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti
	if (sample_counter++ > NUM_AVGS) {
		sample_counter=0;
	}
	word result = ADCL;
	result      += (ADCH<<8);
	switch(next_channel)				// Round Robin style measurements
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	09 f4       	brne	.+2      	; 0x680 <__vector_27+0x134>
     67e:	96 c0       	rjmp	.+300    	; 0x7ac <__vector_27+0x260>
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	59 f0       	breq	.+22     	; 0x69a <__vector_27+0x14e>
			ADMUX = CURRSENSE_4_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);		// Start conversion
			break;

	default: 			
			next_channel = 0;
     684:	10 92 5c 02 	sts	0x025C, r1
			ADMUX = CURRSENSE_4_MUX;
     688:	89 e4       	ldi	r24, 0x49	; 73
     68a:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);		// Start conversion
     68e:	80 91 7a 00 	lds	r24, 0x007A
     692:	80 64       	ori	r24, 0x40	; 64
     694:	80 93 7a 00 	sts	0x007A, r24
     698:	d9 cf       	rjmp	.-78     	; 0x64c <__vector_27+0x100>
			Cumulative[2] += CurrentSampleAvg[2];
			next_channel = 3;
			ADMUX = CURRSENSE_3_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);		// Start conversion
			break;
	case 3:	CurrentSamples[3] = result;	
     69a:	d0 93 3b 02 	sts	0x023B, r29
     69e:	c0 93 3a 02 	sts	0x023A, r28
			CurrentSampleAvg[3] = (gamma*CurrentSampleAvg[3]) + alpha*((float)CurrentSamples[3]);
     6a2:	60 91 48 02 	lds	r22, 0x0248
     6a6:	70 91 49 02 	lds	r23, 0x0249
     6aa:	80 91 4a 02 	lds	r24, 0x024A
     6ae:	90 91 4b 02 	lds	r25, 0x024B
     6b2:	2d ec       	ldi	r18, 0xCD	; 205
     6b4:	3c ec       	ldi	r19, 0xCC	; 204
     6b6:	4c e4       	ldi	r20, 0x4C	; 76
     6b8:	5f e3       	ldi	r21, 0x3F	; 63
     6ba:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     6be:	7b 01       	movw	r14, r22
     6c0:	8c 01       	movw	r16, r24
     6c2:	be 01       	movw	r22, r28
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     6cc:	2d ec       	ldi	r18, 0xCD	; 205
     6ce:	3c ec       	ldi	r19, 0xCC	; 204
     6d0:	4c e4       	ldi	r20, 0x4C	; 76
     6d2:	5e e3       	ldi	r21, 0x3E	; 62
     6d4:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	c8 01       	movw	r24, r16
     6de:	b7 01       	movw	r22, r14
     6e0:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     6e4:	26 2f       	mov	r18, r22
     6e6:	37 2f       	mov	r19, r23
     6e8:	48 2f       	mov	r20, r24
     6ea:	59 2f       	mov	r21, r25
     6ec:	20 93 48 02 	sts	0x0248, r18
     6f0:	30 93 49 02 	sts	0x0249, r19
     6f4:	40 93 4a 02 	sts	0x024A, r20
     6f8:	50 93 4b 02 	sts	0x024B, r21
			Cumulative[3] += CurrentSampleAvg[3];
     6fc:	20 91 58 02 	lds	r18, 0x0258
     700:	30 91 59 02 	lds	r19, 0x0259
     704:	40 91 5a 02 	lds	r20, 0x025A
     708:	50 91 5b 02 	lds	r21, 0x025B
     70c:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     710:	60 93 58 02 	sts	0x0258, r22
     714:	70 93 59 02 	sts	0x0259, r23
     718:	80 93 5a 02 	sts	0x025A, r24
     71c:	90 93 5b 02 	sts	0x025B, r25
     720:	b1 cf       	rjmp	.-158    	; 0x684 <__vector_27+0x138>
			Cumulative[0] += CurrentSampleAvg[0];
			next_channel = 1;
			ADMUX = CURRSENSE_1_MUX;		// Select Left Current Read
			ADCSRA |= (1<<ADSC);			// Start conversion
			break;			
	case 1:	CurrentSamples[1] = result;
     722:	d0 93 37 02 	sts	0x0237, r29
     726:	c0 93 36 02 	sts	0x0236, r28
			CurrentSampleAvg[1] = (gamma*CurrentSampleAvg[1]) + alpha*((float)CurrentSamples[1]);
     72a:	60 91 40 02 	lds	r22, 0x0240
     72e:	70 91 41 02 	lds	r23, 0x0241
     732:	80 91 42 02 	lds	r24, 0x0242
     736:	90 91 43 02 	lds	r25, 0x0243
     73a:	2d ec       	ldi	r18, 0xCD	; 205
     73c:	3c ec       	ldi	r19, 0xCC	; 204
     73e:	4c e4       	ldi	r20, 0x4C	; 76
     740:	5f e3       	ldi	r21, 0x3F	; 63
     742:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	be 01       	movw	r22, r28
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     754:	2d ec       	ldi	r18, 0xCD	; 205
     756:	3c ec       	ldi	r19, 0xCC	; 204
     758:	4c e4       	ldi	r20, 0x4C	; 76
     75a:	5e e3       	ldi	r21, 0x3E	; 62
     75c:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c8 01       	movw	r24, r16
     766:	b7 01       	movw	r22, r14
     768:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     76c:	26 2f       	mov	r18, r22
     76e:	37 2f       	mov	r19, r23
     770:	48 2f       	mov	r20, r24
     772:	59 2f       	mov	r21, r25
     774:	20 93 40 02 	sts	0x0240, r18
     778:	30 93 41 02 	sts	0x0241, r19
     77c:	40 93 42 02 	sts	0x0242, r20
     780:	50 93 43 02 	sts	0x0243, r21
			Cumulative[1] += CurrentSampleAvg[1];
     784:	20 91 50 02 	lds	r18, 0x0250
     788:	30 91 51 02 	lds	r19, 0x0251
     78c:	40 91 52 02 	lds	r20, 0x0252
     790:	50 91 53 02 	lds	r21, 0x0253
     794:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     798:	60 93 50 02 	sts	0x0250, r22
     79c:	70 93 51 02 	sts	0x0251, r23
     7a0:	80 93 52 02 	sts	0x0252, r24
     7a4:	90 93 53 02 	sts	0x0253, r25
			next_channel = 2;
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	46 cf       	rjmp	.-372    	; 0x638 <__vector_27+0xec>
			ADMUX = CURRSENSE_2_MUX;	// Select Right Current Read
			ADCSRA |= (1<<ADSC);			// Start conversion
			break;			
	case 2:	CurrentSamples[2] = result;	
     7ac:	d0 93 39 02 	sts	0x0239, r29
     7b0:	c0 93 38 02 	sts	0x0238, r28
			CurrentSampleAvg[2] = (gamma*CurrentSampleAvg[2]) + alpha*((float)CurrentSamples[2]);
     7b4:	60 91 44 02 	lds	r22, 0x0244
     7b8:	70 91 45 02 	lds	r23, 0x0245
     7bc:	80 91 46 02 	lds	r24, 0x0246
     7c0:	90 91 47 02 	lds	r25, 0x0247
     7c4:	2d ec       	ldi	r18, 0xCD	; 205
     7c6:	3c ec       	ldi	r19, 0xCC	; 204
     7c8:	4c e4       	ldi	r20, 0x4C	; 76
     7ca:	5f e3       	ldi	r21, 0x3F	; 63
     7cc:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     7d0:	7b 01       	movw	r14, r22
     7d2:	8c 01       	movw	r16, r24
     7d4:	be 01       	movw	r22, r28
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     7de:	2d ec       	ldi	r18, 0xCD	; 205
     7e0:	3c ec       	ldi	r19, 0xCC	; 204
     7e2:	4c e4       	ldi	r20, 0x4C	; 76
     7e4:	5e e3       	ldi	r21, 0x3E	; 62
     7e6:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     7ea:	9b 01       	movw	r18, r22
     7ec:	ac 01       	movw	r20, r24
     7ee:	c8 01       	movw	r24, r16
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     7f6:	26 2f       	mov	r18, r22
     7f8:	37 2f       	mov	r19, r23
     7fa:	48 2f       	mov	r20, r24
     7fc:	59 2f       	mov	r21, r25
     7fe:	20 93 44 02 	sts	0x0244, r18
     802:	30 93 45 02 	sts	0x0245, r19
     806:	40 93 46 02 	sts	0x0246, r20
     80a:	50 93 47 02 	sts	0x0247, r21
			Cumulative[2] += CurrentSampleAvg[2];
     80e:	20 91 54 02 	lds	r18, 0x0254
     812:	30 91 55 02 	lds	r19, 0x0255
     816:	40 91 56 02 	lds	r20, 0x0256
     81a:	50 91 57 02 	lds	r21, 0x0257
     81e:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     822:	60 93 54 02 	sts	0x0254, r22
     826:	70 93 55 02 	sts	0x0255, r23
     82a:	80 93 56 02 	sts	0x0256, r24
     82e:	90 93 57 02 	sts	0x0257, r25
			next_channel = 3;
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	80 93 5c 02 	sts	0x025C, r24
			ADMUX = CURRSENSE_3_MUX;		// Select POT	
     838:	88 e4       	ldi	r24, 0x48	; 72
     83a:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);		// Start conversion
     83e:	80 91 7a 00 	lds	r24, 0x007A
     842:	80 64       	ori	r24, 0x40	; 64
     844:	80 93 7a 00 	sts	0x007A, r24
			break;
     848:	01 cf       	rjmp	.-510    	; 0x64c <__vector_27+0x100>

0000084a <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
     84a:	ea e7       	ldi	r30, 0x7A	; 122
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	88 7f       	andi	r24, 0xF8	; 248
     852:	80 83       	st	Z, r24
}
     854:	08 95       	ret

00000856 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83; 
     856:	8b e9       	ldi	r24, 0x9B	; 155
     858:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
     85c:	ee e7       	ldi	r30, 0x7E	; 126
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	84 60       	ori	r24, 0x04	; 4
     864:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
     866:	ef e7       	ldi	r30, 0x7F	; 127
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	83 60       	ori	r24, 0x03	; 3
     86e:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
     870:	80 ea       	ldi	r24, 0xA0	; 160
     872:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = CURRSENSE_4_MUX;
     876:	89 e4       	ldi	r24, 0x49	; 73
     878:	80 93 7c 00 	sts	0x007C, r24

	for (int i=0; i<4; i++)	 
	{
		CurrentSamples[i]  =0;
     87c:	10 92 35 02 	sts	0x0235, r1
     880:	10 92 34 02 	sts	0x0234, r1
		CurrentSampleAvg[i]=0;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	dc 01       	movw	r26, r24
     88a:	80 93 3c 02 	sts	0x023C, r24
     88e:	90 93 3d 02 	sts	0x023D, r25
     892:	a0 93 3e 02 	sts	0x023E, r26
     896:	b0 93 3f 02 	sts	0x023F, r27
	// SELECT THE Channel
	ADMUX = CURRSENSE_4_MUX;

	for (int i=0; i<4; i++)	 
	{
		CurrentSamples[i]  =0;
     89a:	10 92 37 02 	sts	0x0237, r1
     89e:	10 92 36 02 	sts	0x0236, r1
		CurrentSampleAvg[i]=0;
     8a2:	80 93 40 02 	sts	0x0240, r24
     8a6:	90 93 41 02 	sts	0x0241, r25
     8aa:	a0 93 42 02 	sts	0x0242, r26
     8ae:	b0 93 43 02 	sts	0x0243, r27
	// SELECT THE Channel
	ADMUX = CURRSENSE_4_MUX;

	for (int i=0; i<4; i++)	 
	{
		CurrentSamples[i]  =0;
     8b2:	10 92 39 02 	sts	0x0239, r1
     8b6:	10 92 38 02 	sts	0x0238, r1
		CurrentSampleAvg[i]=0;
     8ba:	80 93 44 02 	sts	0x0244, r24
     8be:	90 93 45 02 	sts	0x0245, r25
     8c2:	a0 93 46 02 	sts	0x0246, r26
     8c6:	b0 93 47 02 	sts	0x0247, r27
	// SELECT THE Channel
	ADMUX = CURRSENSE_4_MUX;

	for (int i=0; i<4; i++)	 
	{
		CurrentSamples[i]  =0;
     8ca:	10 92 3b 02 	sts	0x023B, r1
     8ce:	10 92 3a 02 	sts	0x023A, r1
		CurrentSampleAvg[i]=0;
     8d2:	80 93 48 02 	sts	0x0248, r24
     8d6:	90 93 49 02 	sts	0x0249, r25
     8da:	a0 93 4a 02 	sts	0x024A, r26
     8de:	b0 93 4b 02 	sts	0x024B, r27
	}
}
     8e2:	08 95       	ret

000008e4 <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX   = CURRSENSE_4_MUX;		// Select POT
     8e4:	89 e4       	ldi	r24, 0x49	; 73
     8e6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);			// Start conversion
     8ea:	ea e7       	ldi	r30, 0x7A	; 122
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	80 64       	ori	r24, 0x40	; 64
     8f2:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
     8f4:	08 95       	ret

000008f6 <_Z36calc_load_current_from_sense_currentt>:
float Ioffset = 0.0;

float calc_load_current_from_sense_current( word mIsense )
{
	// ILoad = dK_ilis(Isense - Ioffset)
	return dK * (mIsense - Ioffset);	
     8f6:	bc 01       	movw	r22, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     900:	20 91 5e 02 	lds	r18, 0x025E
     904:	30 91 5f 02 	lds	r19, 0x025F
     908:	40 91 60 02 	lds	r20, 0x0260
     90c:	50 91 61 02 	lds	r21, 0x0261
     910:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
     914:	20 91 05 01 	lds	r18, 0x0105
     918:	30 91 06 01 	lds	r19, 0x0106
     91c:	40 91 07 01 	lds	r20, 0x0107
     920:	50 91 08 01 	lds	r21, 0x0108
     924:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
}
     928:	08 95       	ret

0000092a <_Z15convert_to_ampst>:

void convert_to_amps( word mAmps )
{
	
}
     92a:	08 95       	ret

0000092c <_Z17read_current_leftv>:
	on to calculate load current.
***********************************************/
word read_current_left()
{	
	// SELECT AND START CONVERSION:
	ADMUX  = CURRSENSE_1_MUX;
     92c:	87 e4       	ldi	r24, 0x47	; 71
     92e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
     932:	80 91 7a 00 	lds	r24, 0x007A
     936:	80 64       	ori	r24, 0x40	; 64
     938:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
     93c:	80 91 7a 00 	lds	r24, 0x007A
     940:	86 fd       	sbrc	r24, 6
     942:	fc cf       	rjmp	.-8      	; 0x93c <_Z17read_current_leftv+0x10>
	
	// PICK UP RESULT:
	word result = ADCL;
     944:	80 91 78 00 	lds	r24, 0x0078
	result += (ADCH<<8);
     948:	90 91 79 00 	lds	r25, 0x0079
     94c:	39 2f       	mov	r19, r25
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	28 0f       	add	r18, r24
     952:	31 1d       	adc	r19, r1
	CurrentSamples[0] = result;
     954:	30 93 35 02 	sts	0x0235, r19
     958:	20 93 34 02 	sts	0x0234, r18
	return result;
}
     95c:	c9 01       	movw	r24, r18
     95e:	08 95       	ret

00000960 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
     960:	90 93 9a 02 	sts	0x029A, r25
     964:	80 93 99 02 	sts	0x0299, r24
}
     968:	08 95       	ret

0000096a <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
     96a:	90 93 9c 02 	sts	0x029C, r25
     96e:	80 93 9b 02 	sts	0x029B, r24
}
     972:	08 95       	ret

00000974 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
     978:	ed ee       	ldi	r30, 0xED	; 237
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     97e:	82 95       	swap	r24
     980:	80 7f       	andi	r24, 0xF0	; 240
     982:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
     984:	c1 ef       	ldi	r28, 0xF1	; 241
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	38 81       	ld	r19, Y
     98a:	cb 01       	movw	r24, r22
     98c:	80 7e       	andi	r24, 0xE0	; 224
     98e:	90 70       	andi	r25, 0x00	; 0
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	92 95       	swap	r25
     996:	82 95       	swap	r24
     998:	8f 70       	andi	r24, 0x0F	; 15
     99a:	89 27       	eor	r24, r25
     99c:	9f 70       	andi	r25, 0x0F	; 15
     99e:	89 27       	eor	r24, r25
     9a0:	38 7f       	andi	r19, 0xF8	; 248
     9a2:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
     9a4:	a0 ef       	ldi	r26, 0xF0	; 240
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	8c 91       	ld	r24, X
     9aa:	66 0f       	add	r22, r22
     9ac:	66 0f       	add	r22, r22
     9ae:	66 0f       	add	r22, r22
     9b0:	87 70       	andi	r24, 0x07	; 7
     9b2:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
     9b4:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
     9b6:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
     9b8:	a5 ef       	ldi	r26, 0xF5	; 245
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	8c 91       	ld	r24, X
     9be:	87 60       	ori	r24, 0x07	; 7
     9c0:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
     9c2:	a4 ef       	ldi	r26, 0xF4	; 244
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	8c 91       	ld	r24, X
     9c8:	88 6f       	ori	r24, 0xF8	; 248
     9ca:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     9cc:	20 83       	st	Z, r18
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     9d4:	ed ee       	ldi	r30, 0xED	; 237
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     9da:	82 95       	swap	r24
     9dc:	80 7f       	andi	r24, 0xF0	; 240
     9de:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
     9e0:	a5 ef       	ldi	r26, 0xF5	; 245
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	8c 91       	ld	r24, X
     9e6:	88 7f       	andi	r24, 0xF8	; 248
     9e8:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
     9ea:	a4 ef       	ldi	r26, 0xF4	; 244
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	8c 91       	ld	r24, X
     9f0:	87 70       	andi	r24, 0x07	; 7
     9f2:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     9f4:	90 83       	st	Z, r25
}
     9f6:	08 95       	ret

000009f8 <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
     9f8:	25 2f       	mov	r18, r21
     9fa:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     9fc:	ed ee       	ldi	r30, 0xED	; 237
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     a02:	82 95       	swap	r24
     a04:	80 7f       	andi	r24, 0xF0	; 240
     a06:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
     a08:	86 2f       	mov	r24, r22
     a0a:	82 95       	swap	r24
     a0c:	86 95       	lsr	r24
     a0e:	87 70       	andi	r24, 0x07	; 7
     a10:	44 0f       	add	r20, r20
     a12:	44 0f       	add	r20, r20
     a14:	44 0f       	add	r20, r20
     a16:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     a18:	c9 01       	movw	r24, r18
     a1a:	80 7e       	andi	r24, 0xE0	; 224
     a1c:	9f 71       	andi	r25, 0x1F	; 31
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	92 95       	swap	r25
     a24:	82 95       	swap	r24
     a26:	8f 70       	andi	r24, 0x0F	; 15
     a28:	89 27       	eor	r24, r25
     a2a:	9f 70       	andi	r25, 0x0F	; 15
     a2c:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
     a2e:	22 0f       	add	r18, r18
     a30:	22 0f       	add	r18, r18
     a32:	22 0f       	add	r18, r18
     a34:	37 2f       	mov	r19, r23
     a36:	32 95       	swap	r19
     a38:	36 95       	lsr	r19
     a3a:	37 70       	andi	r19, 0x07	; 7
     a3c:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
     a3e:	77 0f       	add	r23, r23
     a40:	77 0f       	add	r23, r23
     a42:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
     a44:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
     a48:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     a4c:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
     a50:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
     a54:	50 83       	st	Z, r21
}
     a56:	08 95       	ret

00000a58 <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	f8 2e       	mov	r15, r24
     a64:	8b 01       	movw	r16, r22
     a66:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
     a6e:	c7 2f       	mov	r28, r23
     a70:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
     a72:	c8 01       	movw	r24, r16
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
     a7a:	27 2f       	mov	r18, r23
     a7c:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     a7e:	ed ee       	ldi	r30, 0xED	; 237
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     a84:	f2 94       	swap	r15
     a86:	b0 ef       	ldi	r27, 0xF0	; 240
     a88:	fb 22       	and	r15, r27
     a8a:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
     a8c:	43 ef       	ldi	r20, 0xF3	; 243
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	da 01       	movw	r26, r20
     a92:	6c 91       	ld	r22, X
     a94:	8d 2f       	mov	r24, r29
     a96:	82 95       	swap	r24
     a98:	86 95       	lsr	r24
     a9a:	87 70       	andi	r24, 0x07	; 7
     a9c:	68 7f       	andi	r22, 0xF8	; 248
     a9e:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     aa0:	ce 01       	movw	r24, r28
     aa2:	80 7e       	andi	r24, 0xE0	; 224
     aa4:	9f 71       	andi	r25, 0x1F	; 31
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	92 95       	swap	r25
     aac:	82 95       	swap	r24
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	89 27       	eor	r24, r25
     ab2:	9f 70       	andi	r25, 0x0F	; 15
     ab4:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
     ab6:	a1 ef       	ldi	r26, 0xF1	; 241
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	7c 91       	ld	r23, X
     abc:	fc 2e       	mov	r15, r28
     abe:	ff 0c       	add	r15, r15
     ac0:	ff 0c       	add	r15, r15
     ac2:	ff 0c       	add	r15, r15
     ac4:	77 70       	andi	r23, 0x07	; 7
     ac6:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
     ac8:	ea 01       	movw	r28, r20
     aca:	68 83       	st	Y, r22
	CANIDT2 = idt2;
     acc:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     ad0:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
     ad2:	c7 ef       	ldi	r28, 0xF7	; 247
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	48 81       	ld	r20, Y
     ad8:	83 2f       	mov	r24, r19
     ada:	82 95       	swap	r24
     adc:	86 95       	lsr	r24
     ade:	87 70       	andi	r24, 0x07	; 7
     ae0:	48 7f       	andi	r20, 0xF8	; 248
     ae2:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
     ae4:	c9 01       	movw	r24, r18
     ae6:	80 7e       	andi	r24, 0xE0	; 224
     ae8:	9f 71       	andi	r25, 0x1F	; 31
     aea:	96 95       	lsr	r25
     aec:	87 95       	ror	r24
     aee:	92 95       	swap	r25
     af0:	82 95       	swap	r24
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	89 27       	eor	r24, r25
     af6:	9f 70       	andi	r25, 0x0F	; 15
     af8:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
     afa:	a5 ef       	ldi	r26, 0xF5	; 245
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	5c 91       	ld	r21, X
     b00:	22 0f       	add	r18, r18
     b02:	22 0f       	add	r18, r18
     b04:	22 0f       	add	r18, r18
     b06:	57 70       	andi	r21, 0x07	; 7
     b08:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
     b0a:	48 83       	st	Y, r20
	CANIDM2 = idm2;
     b0c:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
     b10:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
     b12:	00 83       	st	Z, r16
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	08 95       	ret

00000b20 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
     b20:	ed ee       	ldi	r30, 0xED	; 237
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b26:	82 95       	swap	r24
     b28:	80 7f       	andi	r24, 0xF0	; 240
     b2a:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
     b2c:	a7 ef       	ldi	r26, 0xF7	; 247
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	8c 91       	ld	r24, X
     b32:	88 7f       	andi	r24, 0xF8	; 248
     b34:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
     b36:	a6 ef       	ldi	r26, 0xF6	; 246
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	8c 91       	ld	r24, X
     b3c:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
     b3e:	a5 ef       	ldi	r26, 0xF5	; 245
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	8c 91       	ld	r24, X
     b44:	87 70       	andi	r24, 0x07	; 7
     b46:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     b48:	90 83       	st	Z, r25
}
     b4a:	08 95       	ret

00000b4c <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     b4c:	ed ee       	ldi	r30, 0xED	; 237
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b52:	82 95       	swap	r24
     b54:	80 7f       	andi	r24, 0xF0	; 240
     b56:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     b58:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     b5c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     b60:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     b64:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     b68:	90 83       	st	Z, r25
}
     b6a:	08 95       	ret

00000b6c <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     b6c:	ed ee       	ldi	r30, 0xED	; 237
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b72:	82 95       	swap	r24
     b74:	80 7f       	andi	r24, 0xF0	; 240
     b76:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
     b78:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
     b7c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
     b80:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
     b84:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
     b88:	90 83       	st	Z, r25
}
     b8a:	08 95       	ret

00000b8c <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
     b92:	ed ee       	ldi	r30, 0xED	; 237
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
     b98:	38 2f       	mov	r19, r24
     b9a:	32 95       	swap	r19
     b9c:	30 7f       	andi	r19, 0xF0	; 240
     b9e:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
     ba0:	ce ed       	ldi	r28, 0xDE	; 222
     ba2:	d0 e0       	ldi	r29, 0x00	; 0
     ba4:	98 81       	ld	r25, Y
     ba6:	a1 e0       	ldi	r26, 0x01	; 1
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <_Z21can_setup_receive_mobhssh+0x24>
     bac:	aa 0f       	add	r26, r26
     bae:	bb 1f       	adc	r27, r27
     bb0:	8a 95       	dec	r24
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <_Z21can_setup_receive_mobhssh+0x20>
     bb4:	9a 2b       	or	r25, r26
     bb6:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     bb8:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     bba:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     bbc:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     bc0:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     bc4:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     bc8:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     bcc:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
     bce:	20 69       	ori	r18, 0x90	; 144
     bd0:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
     bd4:	a8 ed       	ldi	r26, 0xD8	; 216
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	8c 91       	ld	r24, X
     bda:	82 60       	ori	r24, 0x02	; 2
     bdc:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
     bde:	10 83       	st	Z, r17
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	08 95       	ret

00000be8 <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	28 e0       	ldi	r18, 0x08	; 8
     c00:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
     c04:	60 91 9d 02 	lds	r22, 0x029D
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	0e 94 ba 04 	call	0x974	; 0x974 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	28 e0       	ldi	r18, 0x08	; 8
     c1c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     c20:	cd ee       	ldi	r28, 0xED	; 237
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     c26:	80 e3       	ldi	r24, 0x30	; 48
     c28:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     c2a:	05 ef       	ldi	r16, 0xF5	; 245
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	f8 01       	movw	r30, r16
     c30:	80 81       	ld	r24, Z
     c32:	88 7f       	andi	r24, 0xF8	; 248
     c34:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     c36:	84 ef       	ldi	r24, 0xF4	; 244
     c38:	e8 2e       	mov	r14, r24
     c3a:	f1 2c       	mov	r15, r1
     c3c:	f7 01       	movw	r30, r14
     c3e:	80 81       	ld	r24, Z
     c40:	87 70       	andi	r24, 0x07	; 7
     c42:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     c44:	98 83       	st	Y, r25
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	63 e2       	ldi	r22, 0x23	; 35
     c4a:	7c ef       	ldi	r23, 0xFC	; 252
     c4c:	43 e2       	ldi	r20, 0x23	; 35
     c4e:	5c ef       	ldi	r21, 0xFC	; 252
     c50:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	28 e0       	ldi	r18, 0x08	; 8
     c60:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     c64:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     c66:	80 e5       	ldi	r24, 0x50	; 80
     c68:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     c6a:	f8 01       	movw	r30, r16
     c6c:	80 81       	ld	r24, Z
     c6e:	88 7f       	andi	r24, 0xF8	; 248
     c70:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     c72:	f7 01       	movw	r30, r14
     c74:	80 81       	ld	r24, Z
     c76:	87 70       	andi	r24, 0x07	; 7
     c78:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     c7a:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
     c7c:	85 e0       	ldi	r24, 0x05	; 5
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	7c ef       	ldi	r23, 0xFC	; 252
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	5c ef       	ldi	r21, 0xFC	; 252
     c86:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z20can_add_id_to_filterhtt>
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
     c98:	ed ee       	ldi	r30, 0xED	; 237
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
     c9e:	82 95       	swap	r24
     ca0:	80 7f       	andi	r24, 0xF0	; 240
     ca2:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
     ca4:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     ca8:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
     cac:	90 83       	st	Z, r25
}
     cae:	08 95       	ret

00000cb0 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
     cb0:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
     cb2:	40 91 f3 00 	lds	r20, 0x00F3
     cb6:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
     cb8:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
     cbc:	80 91 f1 00 	lds	r24, 0x00F1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
     cc2:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
     cc6:	ba 01       	movw	r22, r20
     cc8:	76 95       	lsr	r23
     cca:	67 95       	ror	r22
     ccc:	76 95       	lsr	r23
     cce:	67 95       	ror	r22
     cd0:	76 95       	lsr	r23
     cd2:	67 95       	ror	r22
     cd4:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
     cd6:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	22 95       	swap	r18
     cde:	32 95       	swap	r19
     ce0:	30 7f       	andi	r19, 0xF0	; 240
     ce2:	32 27       	eor	r19, r18
     ce4:	20 7f       	andi	r18, 0xF0	; 240
     ce6:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
     ce8:	54 2f       	mov	r21, r20
     cea:	44 27       	eor	r20, r20
     cec:	52 95       	swap	r21
     cee:	55 0f       	add	r21, r21
     cf0:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     cf2:	24 2b       	or	r18, r20
     cf4:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
     cf6:	ac 01       	movw	r20, r24
     cf8:	56 95       	lsr	r21
     cfa:	47 95       	ror	r20
     cfc:	56 95       	lsr	r21
     cfe:	47 95       	ror	r20
     d00:	56 95       	lsr	r21
     d02:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     d04:	24 2b       	or	r18, r20
     d06:	35 2b       	or	r19, r21
     d08:	32 83       	std	Z+2, r19	; 0x02
     d0a:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
     d0c:	82 95       	swap	r24
     d0e:	88 0f       	add	r24, r24
     d10:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
     d12:	a6 95       	lsr	r26
     d14:	a6 95       	lsr	r26
     d16:	a6 95       	lsr	r26
     d18:	a8 2b       	or	r26, r24
     d1a:	a3 83       	std	Z+3, r26	; 0x03
}
     d1c:	08 95       	ret

00000d1e <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
     d24:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
     d28:	80 91 ef 00 	lds	r24, 0x00EF
     d2c:	8f 70       	andi	r24, 0x0F	; 15
     d2e:	28 2f       	mov	r18, r24
     d30:	22 0f       	add	r18, r18
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	91 7e       	andi	r25, 0xE1	; 225
     d36:	92 2b       	or	r25, r18
     d38:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
     d3a:	48 2f       	mov	r20, r24
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	41 15       	cp	r20, r1
     d40:	51 05       	cpc	r21, r1
     d42:	59 f0       	breq	.+22     	; 0xd5a <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
     d44:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
     d4a:	90 91 fa 00 	lds	r25, 0x00FA
     d4e:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     d50:	2f 5f       	subi	r18, 0xFF	; 255
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	24 17       	cp	r18, r20
     d56:	35 07       	cpc	r19, r21
     d58:	c4 f3       	brlt	.-16     	; 0xd4a <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	cf 93       	push	r28
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
     d84:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
     d88:	40 91 ec 00 	lds	r20, 0x00EC
     d8c:	42 95       	swap	r20
     d8e:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     d90:	4f 30       	cpi	r20, 0x0F	; 15
     d92:	09 f4       	brne	.+2      	; 0xd96 <__vector_18+0x36>
     d94:	87 c0       	rjmp	.+270    	; 0xea4 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
     d96:	80 91 ec 00 	lds	r24, 0x00EC
     d9a:	80 7f       	andi	r24, 0xF0	; 240
     d9c:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
     da0:	80 91 ee 00 	lds	r24, 0x00EE
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	8f 71       	andi	r24, 0x1F	; 31
     da8:	90 70       	andi	r25, 0x00	; 0
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	09 f4       	brne	.+2      	; 0xdb0 <__vector_18+0x50>
     dae:	40 c0       	rjmp	.+128    	; 0xe30 <__vector_18+0xd0>
		 byte st = CANSTMOB;
     db0:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	82 ff       	sbrs	r24, 2
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <__vector_18+0x64>
     dba:	20 91 ee 00 	lds	r18, 0x00EE
     dbe:	2f 7e       	andi	r18, 0xEF	; 239
     dc0:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
     dc4:	9c 01       	movw	r18, r24
     dc6:	23 70       	andi	r18, 0x03	; 3
     dc8:	30 70       	andi	r19, 0x00	; 0
     dca:	21 15       	cp	r18, r1
     dcc:	31 05       	cpc	r19, r1
     dce:	29 f0       	breq	.+10     	; 0xdda <__vector_18+0x7a>
     dd0:	20 91 ee 00 	lds	r18, 0x00EE
     dd4:	27 7f       	andi	r18, 0xF7	; 247
     dd6:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
     dda:	81 ff       	sbrs	r24, 1
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <__vector_18+0x88>
     dde:	20 91 ee 00 	lds	r18, 0x00EE
     de2:	2b 7f       	andi	r18, 0xFB	; 251
     de4:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
     de8:	80 ff       	sbrs	r24, 0
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <__vector_18+0x96>
     dec:	80 91 ee 00 	lds	r24, 0x00EE
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
     df6:	45 30       	cpi	r20, 0x05	; 5
     df8:	09 f4       	brne	.+2      	; 0xdfc <__vector_18+0x9c>
     dfa:	4b c0       	rjmp	.+150    	; 0xe92 <__vector_18+0x132>
     dfc:	41 30       	cpi	r20, 0x01	; 1
     dfe:	09 f4       	brne	.+2      	; 0xe02 <__vector_18+0xa2>
     e00:	48 c0       	rjmp	.+144    	; 0xe92 <__vector_18+0x132>
     e02:	43 30       	cpi	r20, 0x03	; 3
     e04:	09 f4       	brne	.+2      	; 0xe08 <__vector_18+0xa8>
     e06:	45 c0       	rjmp	.+138    	; 0xe92 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
     e08:	c0 93 ed 00 	sts	0x00ED, r28
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	cf 91       	pop	r28
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	7f 91       	pop	r23
     e1c:	6f 91       	pop	r22
     e1e:	5f 91       	pop	r21
     e20:	4f 91       	pop	r20
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
     e30:	80 91 ee 00 	lds	r24, 0x00EE
     e34:	85 fd       	sbrc	r24, 5
     e36:	13 c0       	rjmp	.+38     	; 0xe5e <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
     e38:	80 91 ee 00 	lds	r24, 0x00EE
     e3c:	86 ff       	sbrs	r24, 6
     e3e:	e4 cf       	rjmp	.-56     	; 0xe08 <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
     e40:	e0 91 9b 02 	lds	r30, 0x029B
     e44:	f0 91 9c 02 	lds	r31, 0x029C
     e48:	30 97       	sbiw	r30, 0x00	; 0
     e4a:	09 f0       	breq	.+2      	; 0xe4e <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
     e4c:	09 95       	icall

		TransmittedSuccesfully = TRUE;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 90 02 	sts	0x0290, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
     e54:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
     e58:	10 92 ee 00 	sts	0x00EE, r1
     e5c:	d5 cf       	rjmp	.-86     	; 0xe08 <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 8f 02 	sts	0x028F, r24
       	can_retrieve_data( &LastReceivedMsg );
     e64:	80 e8       	ldi	r24, 0x80	; 128
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
     e6c:	80 e8       	ldi	r24, 0x80	; 128
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	0e 94 3f 0b 	call	0x167e	; 0x167e <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
     e74:	88 23       	and	r24, r24
     e76:	69 f4       	brne	.+26     	; 0xe92 <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
     e78:	80 e8       	ldi	r24, 0x80	; 128
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
     e80:	e0 91 99 02 	lds	r30, 0x0299
     e84:	f0 91 9a 02 	lds	r31, 0x029A
     e88:	30 97       	sbiw	r30, 0x00	; 0
     e8a:	19 f0       	breq	.+6      	; 0xe92 <__vector_18+0x132>
    	   		rx_call_back( &LastReceivedMsg );
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	09 95       	icall
		}

		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
     e92:	88 e9       	ldi	r24, 0x98	; 152
     e94:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
     e98:	80 91 ee 00 	lds	r24, 0x00EE
     e9c:	8f 7d       	andi	r24, 0xDF	; 223
     e9e:	80 93 ee 00 	sts	0x00EE, r24
     ea2:	b2 cf       	rjmp	.-156    	; 0xe08 <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     ea4:	80 91 da 00 	lds	r24, 0x00DA
     ea8:	80 93 da 00 	sts	0x00DA, r24
     eac:	af cf       	rjmp	.-162    	; 0xe0c <__vector_18+0xac>

00000eae <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
     eb4:	98 2f       	mov	r25, r24
     eb6:	92 95       	swap	r25
     eb8:	90 7f       	andi	r25, 0xF0	; 240
   cli();
     eba:	f8 94       	cli
   CANPAGE = page;
     ebc:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
     ec0:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
     ec4:	48 81       	ld	r20, Y
     ec6:	59 81       	ldd	r21, Y+1	; 0x01
     ec8:	6a 81       	ldd	r22, Y+2	; 0x02
     eca:	7b 81       	ldd	r23, Y+3	; 0x03
     ecc:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	86 95       	lsr	r24
     ed4:	8f 70       	andi	r24, 0x0F	; 15
     ed6:	79 f0       	breq	.+30     	; 0xef6 <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
     ed8:	fe 01       	movw	r30, r28
     eda:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
     ee0:	21 91       	ld	r18, Z+
     ee2:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	2c 81       	ldd	r18, Y+4	; 0x04
     eea:	26 95       	lsr	r18
     eec:	2f 70       	andi	r18, 0x0F	; 15
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	82 17       	cp	r24, r18
     ef2:	93 07       	cpc	r25, r19
     ef4:	ac f3       	brlt	.-22     	; 0xee0 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
     ef6:	80 91 f0 00 	lds	r24, 0x00F0
     efa:	8b 7f       	andi	r24, 0xFB	; 251
     efc:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	86 95       	lsr	r24
     f04:	8f 70       	andi	r24, 0x0F	; 15
     f06:	80 65       	ori	r24, 0x50	; 80
     f08:	80 93 ef 00 	sts	0x00EF, r24
   sei();
     f0c:	78 94       	sei
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
     f14:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
     f18:	80 91 ee 00 	lds	r24, 0x00EE
     f1c:	86 ff       	sbrs	r24, 6
     f1e:	fc cf       	rjmp	.-8      	; 0xf18 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
     f20:	08 95       	ret

00000f22 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     f22:	20 91 f8 00 	lds	r18, 0x00F8
     f26:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
     f28:	40 91 f9 00 	lds	r20, 0x00F9
     f2c:	94 2f       	mov	r25, r20
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	28 2b       	or	r18, r24
     f32:	39 2b       	or	r19, r25
  return retval;
}
     f34:	c9 01       	movw	r24, r18
     f36:	08 95       	ret

00000f38 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
     f3e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_Z17can_retrieve_dataP4sCAN>
     f42:	8f 70       	andi	r24, 0x0F	; 15
     f44:	88 0f       	add	r24, r24
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	91 7e       	andi	r25, 0xE1	; 225
     f4a:	98 2b       	or	r25, r24
     f4c:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     f4e:	80 91 f8 00 	lds	r24, 0x00F8
     f52:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
     f54:	40 91 f9 00 	lds	r20, 0x00F9
     f58:	34 2f       	mov	r19, r20
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	82 2b       	or	r24, r18
     f5e:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
     f60:	9e 87       	std	Y+14, r25	; 0x0e
     f62:	8d 87       	std	Y+13, r24	; 0x0d
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	61 f0       	breq	.+24     	; 0xf86 <_Z8set_baudh+0x1c>
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	30 f0       	brcs	.+12     	; 0xf7e <_Z8set_baudh+0x14>
     f72:	85 30       	cpi	r24, 0x05	; 5
     f74:	d1 f0       	breq	.+52     	; 0xfaa <_Z8set_baudh+0x40>
     f76:	85 30       	cpi	r24, 0x05	; 5
     f78:	80 f4       	brcc	.+32     	; 0xf9a <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
     f7a:	82 e1       	ldi	r24, 0x12	; 18
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 f0       	breq	.+36     	; 0xfa6 <_Z8set_baudh+0x3c>
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	71 f0       	breq	.+28     	; 0xfa2 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
     f86:	8e e0       	ldi	r24, 0x0E	; 14
     f88:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
     f8c:	84 e0       	ldi	r24, 0x04	; 4
     f8e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
     f92:	83 e1       	ldi	r24, 0x13	; 19
     f94:	80 93 e4 00 	sts	0x00E4, r24
     f98:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f9a:	86 30       	cpi	r24, 0x06	; 6
     f9c:	a1 f7       	brne	.-24     	; 0xf86 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
     f9e:	86 e2       	ldi	r24, 0x26	; 38
     fa0:	f3 cf       	rjmp	.-26     	; 0xf88 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     fa2:	86 e0       	ldi	r24, 0x06	; 6
     fa4:	f1 cf       	rjmp	.-30     	; 0xf88 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	ef cf       	rjmp	.-34     	; 0xf88 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
     faa:	8e e1       	ldi	r24, 0x1E	; 30
     fac:	ed cf       	rjmp	.-38     	; 0xf88 <_Z8set_baudh+0x1e>

00000fae <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
     fb4:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     fb8:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
     fba:	29 2f       	mov	r18, r25
     fbc:	22 95       	swap	r18
     fbe:	20 7f       	andi	r18, 0xF0	; 240
     fc0:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
     fc4:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     fc8:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     fcc:	9f 5f       	subi	r25, 0xFF	; 255
     fce:	96 30       	cpi	r25, 0x06	; 6
     fd0:	a1 f7       	brne	.-24     	; 0xfba <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
     fd2:	90 ea       	ldi	r25, 0xA0	; 160
     fd4:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
     fd8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_Z8set_baudh>
   can_init_mobs();
     fdc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
     fe0:	80 91 d9 00 	lds	r24, 0x00D9
     fe4:	82 ff       	sbrs	r24, 2
     fe6:	fc cf       	rjmp	.-8      	; 0xfe0 <_Z8can_inith+0x32>
   }
   //sei();
}
     fe8:	08 95       	ret

00000fea <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
     fea:	88 23       	and	r24, r24
     fec:	51 f4       	brne	.+20     	; 0x1002 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
     ffa:	83 e1       	ldi	r24, 0x13	; 19
     ffc:	80 93 e4 00 	sts	0x00E4, r24
    1000:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
    1002:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
    1006:	8c e0       	ldi	r24, 0x0C	; 12
    1008:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
    100c:	86 e3       	ldi	r24, 0x36	; 54
    100e:	80 93 e4 00 	sts	0x00E4, r24
    1012:	08 95       	ret

00001014 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1014:	88 23       	and	r24, r24
    1016:	51 f4       	brne	.+20     	; 0x102c <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    1018:	86 e0       	ldi	r24, 0x06	; 6
    101a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    1024:	83 e1       	ldi	r24, 0x13	; 19
    1026:	80 93 e4 00 	sts	0x00E4, r24
    102a:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    1032:	8c e0       	ldi	r24, 0x0C	; 12
    1034:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    1038:	87 e3       	ldi	r24, 0x37	; 55
    103a:	80 93 e4 00 	sts	0x00E4, r24
    103e:	08 95       	ret

00001040 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1040:	88 23       	and	r24, r24
    1042:	51 f4       	brne	.+20     	; 0x1058 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    1044:	8e e0       	ldi	r24, 0x0E	; 14
    1046:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    1050:	83 e1       	ldi	r24, 0x13	; 19
    1052:	80 93 e4 00 	sts	0x00E4, r24
    1056:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    105e:	8c e0       	ldi	r24, 0x0C	; 12
    1060:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    1064:	87 e3       	ldi	r24, 0x37	; 55
    1066:	80 93 e4 00 	sts	0x00E4, r24
    106a:	08 95       	ret

0000106c <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    106c:	88 23       	and	r24, r24
    106e:	51 f4       	brne	.+20     	; 0x1084 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    1070:	82 e1       	ldi	r24, 0x12	; 18
    1072:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    107c:	83 e1       	ldi	r24, 0x13	; 19
    107e:	80 93 e4 00 	sts	0x00E4, r24
    1082:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    1084:	88 e0       	ldi	r24, 0x08	; 8
    1086:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    108a:	8c e0       	ldi	r24, 0x0C	; 12
    108c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    1090:	87 e3       	ldi	r24, 0x37	; 55
    1092:	80 93 e4 00 	sts	0x00E4, r24
    1096:	08 95       	ret

00001098 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1098:	88 23       	and	r24, r24
    109a:	51 f4       	brne	.+20     	; 0x10b0 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    109c:	8e e1       	ldi	r24, 0x1E	; 30
    109e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    10a8:	83 e1       	ldi	r24, 0x13	; 19
    10aa:	80 93 e4 00 	sts	0x00E4, r24
    10ae:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    10b0:	8e e0       	ldi	r24, 0x0E	; 14
    10b2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    10b6:	8c e0       	ldi	r24, 0x0C	; 12
    10b8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    10bc:	87 e3       	ldi	r24, 0x37	; 55
    10be:	80 93 e4 00 	sts	0x00E4, r24
    10c2:	08 95       	ret

000010c4 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    10c4:	88 23       	and	r24, r24
    10c6:	51 f4       	brne	.+20     	; 0x10dc <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    10c8:	86 e2       	ldi	r24, 0x26	; 38
    10ca:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    10ce:	84 e0       	ldi	r24, 0x04	; 4
    10d0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    10d4:	83 e1       	ldi	r24, 0x13	; 19
    10d6:	80 93 e4 00 	sts	0x00E4, r24
    10da:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    10dc:	82 e1       	ldi	r24, 0x12	; 18
    10de:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    10e2:	8c e0       	ldi	r24, 0x0C	; 12
    10e4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    10e8:	87 e3       	ldi	r24, 0x37	; 55
    10ea:	80 93 e4 00 	sts	0x00E4, r24
    10ee:	08 95       	ret

000010f0 <_Z22random_number_adc_initv>:
 ********************************************************/
void random_number_adc_init()
{
	// Analog to Digital Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    10f0:	83 e9       	ldi	r24, 0x93	; 147
    10f2:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 : 
	DIDR0  |=  (1<<ADC3D);
    10f6:	ee e7       	ldi	r30, 0x7E	; 126
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 60       	ori	r24, 0x08	; 8
    10fe:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	80 93 7b 00 	sts	0x007B, r24
}
    1106:	08 95       	ret

00001108 <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);
    1108:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	50 e0       	ldi	r21, 0x00	; 0
	DDRD &= ~(0x40);
	// Make ADC3-PORTD_6-LED4 an input temporarily.
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED off will give high impedance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;		
    1112:	e3 e4       	ldi	r30, 0x43	; 67
    1114:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);					
    1118:	80 91 7a 00 	lds	r24, 0x007A
    111c:	80 64       	ori	r24, 0x40	; 64
    111e:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};	// Wait for conversion to finish.
    1122:	80 91 7a 00 	lds	r24, 0x007A
    1126:	86 fd       	sbrc	r24, 6
    1128:	fc cf       	rjmp	.-8      	; 0x1122 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)	
		tmp  = (ADCL & 0x01) << (i % 16);		
    112a:	80 91 78 00 	lds	r24, 0x0078
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	90 70       	andi	r25, 0x00	; 0
    1134:	ba 01       	movw	r22, r20
    1136:	6f 70       	andi	r22, 0x0F	; 15
    1138:	70 70       	andi	r23, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <_Z18pick_random_numberv+0x38>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	6a 95       	dec	r22
    1142:	e2 f7       	brpl	.-8      	; 0x113c <_Z18pick_random_numberv+0x34>
		random_result |= (tmp);					
    1144:	28 2b       	or	r18, r24
    1146:	39 2b       	or	r19, r25
		tmp = ADCH;								
    1148:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
    114c:	4f 5f       	subi	r20, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	40 31       	cpi	r20, 0x10	; 16
    1152:	51 05       	cpc	r21, r1
    1154:	f9 f6       	brne	.-66     	; 0x1114 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)	
		tmp  = (ADCL & 0x01) << (i % 16);		
		random_result |= (tmp);					
		tmp = ADCH;								
	}
	DDRD |= 0x40;					// Set ADC3-PORTD_6-LED4 back to being an output
    1156:	56 9a       	sbi	0x0a, 6	; 10
	return random_result;
}
    1158:	c9 01       	movw	r24, r18
    115a:	08 95       	ret

0000115c <_Z24setup_instance_claim_mobv>:
*/
void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	28 e0       	ldi	r18, 0x08	; 8
    1168:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    116c:	83 e0       	ldi	r24, 0x03	; 3
    116e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	63 e2       	ldi	r22, 0x23	; 35
    1176:	7c ef       	ldi	r23, 0xFC	; 252
    1178:	43 e2       	ldi	r20, 0x23	; 35
    117a:	5c ef       	ldi	r21, 0xFC	; 252
    117c:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z20can_add_id_to_filterhtt>
}
    1180:	08 95       	ret

00001182 <_Z17can_instance_initv>:
 ********************************************************/
void random_number_adc_init()
{
	// Analog to Digital Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    1182:	83 e9       	ldi	r24, 0x93	; 147
    1184:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 : 
	DIDR0  |=  (1<<ADC3D);
    1188:	80 91 7e 00 	lds	r24, 0x007E
    118c:	88 60       	ori	r24, 0x08	; 8
    118e:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    1192:	80 e8       	ldi	r24, 0x80	; 128
    1194:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;		// Indicates the state of the Confirmed status at boot-up.

void can_instance_init()
{
	random_number_adc_init		 ( );
	word tmp = pick_random_number( );		// random time delay
    1198:	0e 94 84 08 	call	0x1108	; 0x1108 <_Z18pick_random_numberv>
	rand_instance = rand_delay = ( tmp & 0xFF);	
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	90 93 a1 02 	sts	0x02A1, r25
    11a2:	80 93 a0 02 	sts	0x02A0, r24
    11a6:	80 93 a2 02 	sts	0x02A2, r24

	// put adc back into mode for Potentiometer
	adc_init();
    11aa:	0e 94 2b 04 	call	0x856	; 0x856 <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    11ae:	80 91 9e 02 	lds	r24, 0x029E
    11b2:	88 23       	and	r24, r24
    11b4:	51 f0       	breq	.+20     	; 0x11ca <_Z17can_instance_initv+0x48>
		setup_instance_claim_mob();
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		init_path  = 2;
		Confirmed = REPORT;
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	80 93 9e 02 	sts	0x029E, r24
    11bc:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinite loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= DIRTY;
    11be:	80 93 a5 02 	sts	0x02A5, r24
	init_complete = TRUE;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	80 93 9f 02 	sts	0x029F, r24
}
    11c8:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{
		// START AT 0; PICK a DELAY TIME : 
		init_path = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 a5 02 	sts	0x02A5, r24
		setup_instance_claim_mob();
    11d0:	0e 94 ae 08 	call	0x115c	; 0x115c <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    11d4:	10 92 9d 02 	sts	0x029D, r1
    11d8:	80 91 a5 02 	lds	r24, 0x02A5
    11dc:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinite loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= DIRTY;
    11de:	80 93 a5 02 	sts	0x02A5, r24
	init_complete = TRUE;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 93 9f 02 	sts	0x029F, r24
}
    11e8:	08 95       	ret

000011ea <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    11f0:	83 e2       	ldi	r24, 0x23	; 35
    11f2:	9c ef       	ldi	r25, 0xFC	; 252
    11f4:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    11f8:	68 83       	st	Y, r22
    11fa:	79 83       	std	Y+1, r23	; 0x01
    11fc:	8a 83       	std	Y+2, r24	; 0x02
    11fe:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    1200:	80 91 9d 02 	lds	r24, 0x029D
    1204:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    1206:	80 91 9e 02 	lds	r24, 0x029E
    120a:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    120c:	80 91 a2 02 	lds	r24, 0x02A2
    1210:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    1212:	80 91 a5 02 	lds	r24, 0x02A5
    1216:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    1218:	80 91 a6 02 	lds	r24, 0x02A6
    121c:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    121e:	80 91 1e 03 	lds	r24, 0x031E
    1222:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1228:	8e 60       	ori	r24, 0x0E	; 14
    122a:	8c 83       	std	Y+4, r24	; 0x04
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <_Z22can_instance_timeslicev>:
/* Called from OS_timers.c		
		"SystemDispatch()" every 10ms.		
*/
void can_instance_timeslice()
{
	ts_state = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 a6 02 	sts	0x02A6, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    1238:	40 91 9e 02 	lds	r20, 0x029E
    123c:	41 30       	cpi	r20, 0x01	; 1
    123e:	59 f1       	breq	.+86     	; 0x1296 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    1240:	80 91 9f 02 	lds	r24, 0x029F
    1244:	88 23       	and	r24, r24
    1246:	39 f1       	breq	.+78     	; 0x1296 <_Z22can_instance_timeslicev+0x64>
	ts_state   = 2;
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	80 93 a6 02 	sts	0x02A6, r24
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    124e:	80 91 a0 02 	lds	r24, 0x02A0
    1252:	90 91 a1 02 	lds	r25, 0x02A1
    1256:	9c 01       	movw	r18, r24
    1258:	21 50       	subi	r18, 0x01	; 1
    125a:	30 40       	sbci	r19, 0x00	; 0
    125c:	30 93 a1 02 	sts	0x02A1, r19
    1260:	20 93 a0 02 	sts	0x02A0, r18
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	b9 f4       	brne	.+46     	; 0x1296 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	90 93 a1 02 	sts	0x02A1, r25
    1270:	80 93 a0 02 	sts	0x02A0, r24

	if (Confirmed==NOT_CLAIMED)
    1274:	44 23       	and	r20, r20
    1276:	91 f0       	breq	.+36     	; 0x129c <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    1278:	42 30       	cpi	r20, 0x02	; 2
    127a:	09 f4       	brne	.+2      	; 0x127e <_Z22can_instance_timeslicev+0x4c>
    127c:	5a c0       	rjmp	.+180    	; 0x1332 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    127e:	40 32       	cpi	r20, 0x20	; 32
    1280:	39 f1       	breq	.+78     	; 0x12d0 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// (Claimed, but not saved to EEPROM) Dirty bit set? 
    1282:	40 38       	cpi	r20, 0x80	; 128
    1284:	09 f4       	brne	.+2      	; 0x1288 <_Z22can_instance_timeslicev+0x56>
    1286:	47 c0       	rjmp	.+142    	; 0x1316 <_Z22can_instance_timeslicev+0xe4>

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1288:	40 34       	cpi	r20, 0x40	; 64
    128a:	31 f0       	breq	.+12     	; 0x1298 <_Z22can_instance_timeslicev+0x66>
    128c:	80 91 a6 02 	lds	r24, 0x02A6
    1290:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	ts_state |= 0x80;
    1292:	80 93 a6 02 	sts	0x02A6, r24
    1296:	08 95       	ret

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1298:	86 e8       	ldi	r24, 0x86	; 134
    129a:	fb cf       	rjmp	.-10     	; 0x1292 <_Z22can_instance_timeslicev+0x60>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
	rand_delay = 1;							// so that it comes back in here next timeslice

	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	80 93 a6 02 	sts	0x02A6, r24
		Confirmed = CLAIM_PENDING;
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	80 93 9e 02 	sts	0x029E, r24
		can_prep_instance_request( &msg2, rand_instance );
    12a8:	81 e7       	ldi	r24, 0x71	; 113
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	60 91 a2 02 	lds	r22, 0x02A2
    12b0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	61 e7       	ldi	r22, 0x71	; 113
    12b8:	72 e0       	ldi	r23, 0x02	; 2
    12ba:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    12be:	8c e2       	ldi	r24, 0x2C	; 44
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	90 93 a4 02 	sts	0x02A4, r25
    12c6:	80 93 a3 02 	sts	0x02A3, r24
    12ca:	40 91 9e 02 	lds	r20, 0x029E
    12ce:	d4 cf       	rjmp	.-88     	; 0x1278 <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	80 93 a6 02 	sts	0x02A6, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT 
		cli();
    12d6:	f8 94       	cli
		byte restore = CANPAGE;
    12d8:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    12dc:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    12e0:	80 91 ee 00 	lds	r24, 0x00EE
    12e4:	86 ff       	sbrs	r24, 6
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    12e8:	80 e8       	ldi	r24, 0x80	; 128
    12ea:	80 93 9e 02 	sts	0x029E, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in with same ID, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    12ee:	80 91 a3 02 	lds	r24, 0x02A3
    12f2:	90 91 a4 02 	lds	r25, 0x02A4
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	90 93 a4 02 	sts	0x02A4, r25
    12fc:	80 93 a3 02 	sts	0x02A3, r24
		if (timeout_10ms_mult == 0)
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	19 f4       	brne	.+6      	; 0x130a <_Z22can_instance_timeslicev+0xd8>
		{
			Confirmed = NOT_USING_INSTANCES;
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	80 93 9e 02 	sts	0x029E, r24
		}
		CANPAGE = restore;
    130a:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    130e:	78 94       	sei
    1310:	40 91 9e 02 	lds	r20, 0x029E
    1314:	b6 cf       	rjmp	.-148    	; 0x1282 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// (Claimed, but not saved to EEPROM) Dirty bit set? 
	{
		ts_state  = 5;
    1316:	85 e0       	ldi	r24, 0x05	; 5
    1318:	80 93 a6 02 	sts	0x02A6, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	80 93 9e 02 	sts	0x029E, r24
		
		cli();  save_configuration();  sei();
    1322:	f8 94       	cli
    1324:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z18save_configurationv>
    1328:	78 94       	sei
    132a:	80 91 a6 02 	lds	r24, 0x02A6
    132e:	80 68       	ori	r24, 0x80	; 128
    1330:	b0 cf       	rjmp	.-160    	; 0x1292 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    1332:	87 e0       	ldi	r24, 0x07	; 7
    1334:	80 93 a6 02 	sts	0x02A6, r24
		Confirmed = CLAIMED;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 9e 02 	sts	0x029E, r24
		can_prep_instance_request( &msg2, MyInstance );
    133e:	81 e7       	ldi	r24, 0x71	; 113
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	60 91 9d 02 	lds	r22, 0x029D
    1346:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	61 e7       	ldi	r22, 0x71	; 113
    134e:	72 e0       	ldi	r23, 0x02	; 2
    1350:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
    1354:	40 91 9e 02 	lds	r20, 0x029E
    1358:	92 cf       	rjmp	.-220    	; 0x127e <_Z22can_instance_timeslicev+0x4c>

0000135a <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    1360:	84 e2       	ldi	r24, 0x24	; 36
    1362:	9c ef       	ldi	r25, 0xFC	; 252
    1364:	60 91 9d 02 	lds	r22, 0x029D
    1368:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    136c:	68 83       	st	Y, r22
    136e:	79 83       	std	Y+1, r23	; 0x01
    1370:	8a 83       	std	Y+2, r24	; 0x02
    1372:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    1374:	80 91 9d 02 	lds	r24, 0x029D
    1378:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    137e:	82 60       	ori	r24, 0x02	; 2
    1380:	8c 83       	std	Y+4, r24	; 0x04
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <_Z28can_process_instance_requestP4sCAN>:
 	
 Extract instance from the Message.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    1388:	fc 01       	movw	r30, r24
    138a:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    138c:	90 91 9d 02 	lds	r25, 0x029D
    1390:	89 17       	cp	r24, r25
    1392:	18 f0       	brcs	.+6      	; 0x139a <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	80 93 9d 02 	sts	0x029D, r24
    139a:	08 95       	ret

0000139c <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    139c:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	78 2f       	mov	r23, r24
    13a2:	89 2f       	mov	r24, r25
    13a4:	92 2f       	mov	r25, r18
    13a6:	08 95       	ret

000013a8 <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    13a8:	38 2f       	mov	r19, r24
    13aa:	26 2f       	mov	r18, r22
    13ac:	87 2f       	mov	r24, r23
    13ae:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    13b0:	63 2f       	mov	r22, r19
    13b2:	72 2f       	mov	r23, r18
    13b4:	08 95       	ret

000013b6 <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    13b6:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    13b8:	08 95       	ret

000013ba <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    13ba:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    13bc:	08 95       	ret

000013be <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    13be:	89 2f       	mov	r24, r25
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	08 95       	ret

000013c4 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    13c4:	e1 e0       	ldi	r30, 0x01	; 1
    13c6:	62 17       	cp	r22, r18
    13c8:	73 07       	cpc	r23, r19
    13ca:	84 07       	cpc	r24, r20
    13cc:	95 07       	cpc	r25, r21
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <_Z5match6idTypeS_+0xe>
    13d0:	e0 e0       	ldi	r30, 0x00	; 0
}
    13d2:	8e 2f       	mov	r24, r30
    13d4:	08 95       	ret

000013d6 <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	62 13       	cpse	r22, r18
    13da:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    13dc:	08 95       	ret

000013de <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    13de:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    13e0:	27 2f       	mov	r18, r23
    13e2:	38 2f       	mov	r19, r24
    13e4:	69 2f       	mov	r22, r25
    13e6:	74 2f       	mov	r23, r20
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	26 17       	cp	r18, r22
    13ec:	37 07       	cpc	r19, r23
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <_Z8id_match6idTypeS_+0x14>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
}
    13f2:	08 95       	ret

000013f4 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	49 13       	cpse	r20, r25
    13f8:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    13fa:	08 95       	ret

000013fc <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    13fc:	90 93 ad 02 	sts	0x02AD, r25
    1400:	80 93 ac 02 	sts	0x02AC, r24
}
    1404:	08 95       	ret

00001406 <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    140c:	81 e1       	ldi	r24, 0x11	; 17
    140e:	9c ef       	ldi	r25, 0xFC	; 252
    1410:	60 91 9d 02 	lds	r22, 0x029D
    1414:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    1418:	68 83       	st	Y, r22
    141a:	79 83       	std	Y+1, r23	; 0x01
    141c:	8a 83       	std	Y+2, r24	; 0x02
    141e:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    1424:	80 91 9d 02 	lds	r24, 0x029D
    1428:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    142a:	80 91 a7 02 	lds	r24, 0x02A7
    142e:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    1430:	80 91 a8 02 	lds	r24, 0x02A8
    1434:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    143a:	88 60       	ori	r24, 0x08	; 8
    143c:	8c 83       	std	Y+4, r24	; 0x04
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    144a:	82 e1       	ldi	r24, 0x12	; 18
    144c:	9c ef       	ldi	r25, 0xFC	; 252
    144e:	60 91 9d 02 	lds	r22, 0x029D
    1452:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    1456:	68 83       	st	Y, r22
    1458:	79 83       	std	Y+1, r23	; 0x01
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    1462:	81 e4       	ldi	r24, 0x41	; 65
    1464:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    146a:	9f e0       	ldi	r25, 0x0F	; 15
    146c:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    146e:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    1470:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1476:	8c 60       	ori	r24, 0x0C	; 12
    1478:	8c 83       	std	Y+4, r24	; 0x04
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    1486:	83 e1       	ldi	r24, 0x13	; 19
    1488:	9c ef       	ldi	r25, 0xFC	; 252
    148a:	60 91 9d 02 	lds	r22, 0x029D
    148e:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    1492:	68 83       	st	Y, r22
    1494:	79 83       	std	Y+1, r23	; 0x01
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    149e:	86 e5       	ldi	r24, 0x56	; 86
    14a0:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    14a2:	88 e7       	ldi	r24, 0x78	; 120
    14a4:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    14a6:	8c e9       	ldi	r24, 0x9C	; 156
    14a8:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    14aa:	8e ed       	ldi	r24, 0xDE	; 222
    14ac:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    14b2:	8a 60       	ori	r24, 0x0A	; 10
    14b4:	8c 83       	std	Y+4, r24	; 0x04
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    14c2:	84 e1       	ldi	r24, 0x14	; 20
    14c4:	9c ef       	ldi	r25, 0xFC	; 252
    14c6:	60 91 9d 02 	lds	r22, 0x029D
    14ca:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    14ce:	68 83       	st	Y, r22
    14d0:	79 83       	std	Y+1, r23	; 0x01
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    14d6:	80 91 a9 02 	lds	r24, 0x02A9
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    14de:	de 01       	movw	r26, r28
    14e0:	16 96       	adiw	r26, 0x06	; 6
    14e2:	9c 01       	movw	r18, r24
    14e4:	28 5f       	subi	r18, 0xF8	; 248
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    14e8:	fc 01       	movw	r30, r24
    14ea:	e4 58       	subi	r30, 0x84	; 132
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	e4 91       	lpm	r30, Z+
    14f0:	ed 93       	st	X+, r30
    14f2:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    14f4:	82 17       	cp	r24, r18
    14f6:	93 07       	cpc	r25, r19
    14f8:	b9 f7       	brne	.-18     	; 0x14e8 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    14fe:	82 61       	ori	r24, 0x12	; 18
    1500:	8c 83       	std	Y+4, r24	; 0x04
}
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    1508:	80 91 ae 02 	lds	r24, 0x02AE
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	d9 f0       	breq	.+54     	; 0x1546 <_Z24can_board_presence_replyv+0x3e>
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	28 f0       	brcs	.+10     	; 0x151e <_Z24can_board_presence_replyv+0x16>
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	09 f1       	breq	.+66     	; 0x155a <_Z24can_board_presence_replyv+0x52>
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	59 f0       	breq	.+22     	; 0x1532 <_Z24can_board_presence_replyv+0x2a>
    151c:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    151e:	81 e7       	ldi	r24, 0x71	; 113
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	0e 94 03 0a 	call	0x1406	; 0x1406 <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	61 e7       	ldi	r22, 0x71	; 113
    152a:	72 e0       	ldi	r23, 0x02	; 2
    152c:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1530:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    1532:	81 e7       	ldi	r24, 0x71	; 113
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	61 e7       	ldi	r22, 0x71	; 113
    153e:	72 e0       	ldi	r23, 0x02	; 2
    1540:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
    1544:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    1546:	81 e7       	ldi	r24, 0x71	; 113
    1548:	92 e0       	ldi	r25, 0x02	; 2
    154a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	61 e7       	ldi	r22, 0x71	; 113
    1552:	72 e0       	ldi	r23, 0x02	; 2
    1554:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1558:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    155a:	81 e7       	ldi	r24, 0x71	; 113
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	0e 94 40 0a 	call	0x1480	; 0x1480 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	61 e7       	ldi	r22, 0x71	; 113
    1566:	72 e0       	ldi	r23, 0x02	; 2
    1568:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
			break;
    156c:	08 95       	ret

0000156e <_Z19can_board_timeslicev>:
/* Sends the queued message 
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    156e:	80 91 aa 02 	lds	r24, 0x02AA
    1572:	80 fd       	sbrc	r24, 0
    1574:	59 c0       	rjmp	.+178    	; 0x1628 <_Z19can_board_timeslicev+0xba>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    1576:	81 fd       	sbrc	r24, 1
    1578:	4c c0       	rjmp	.+152    	; 0x1612 <_Z19can_board_timeslicev+0xa4>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    157a:	82 fd       	sbrc	r24, 2
    157c:	35 c0       	rjmp	.+106    	; 0x15e8 <_Z19can_board_timeslicev+0x7a>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
    157e:	83 fd       	sbrc	r24, 3
    1580:	26 c0       	rjmp	.+76     	; 0x15ce <_Z19can_board_timeslicev+0x60>
		save_configuration();
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    1582:	84 fd       	sbrc	r24, 4
    1584:	1a c0       	rjmp	.+52     	; 0x15ba <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    1586:	85 ff       	sbrs	r24, 5
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)
    158a:	80 91 0a 01 	lds	r24, 0x010A
    158e:	90 91 0b 01 	lds	r25, 0x010B
    1592:	9c 01       	movw	r18, r24
    1594:	21 50       	subi	r18, 0x01	; 1
    1596:	30 40       	sbci	r19, 0x00	; 0
    1598:	30 93 0b 01 	sts	0x010B, r19
    159c:	20 93 0a 01 	sts	0x010A, r18
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <_Z19can_board_timeslicev+0x38>
    15a4:	08 95       	ret
		{
			cli();
    15a6:	f8 94       	cli
			can_board_presence_reply( );
    15a8:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    15ac:	80 91 aa 02 	lds	r24, 0x02AA
    15b0:	8f 7d       	andi	r24, 0xDF	; 223
    15b2:	80 93 aa 02 	sts	0x02AA, r24
			sei();
    15b6:	78 94       	sei
    15b8:	08 95       	ret
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    15ba:	f8 94       	cli
		save_cal();
    15bc:	0e 94 8a 02 	call	0x514	; 0x514 <_Z8save_calv>
		System_Send_Status &= (~0x10);
    15c0:	80 91 aa 02 	lds	r24, 0x02AA
    15c4:	8f 7e       	andi	r24, 0xEF	; 239
    15c6:	80 93 aa 02 	sts	0x02AA, r24
		sei();
    15ca:	78 94       	sei
    15cc:	dc cf       	rjmp	.-72     	; 0x1586 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
		cli();
    15ce:	f8 94       	cli
		save_configuration();
    15d0:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z18save_configurationv>
		led_on(4);
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_Z6led_onh>
		System_Send_Status &= (~0x08);
    15da:	80 91 aa 02 	lds	r24, 0x02AA
    15de:	87 7f       	andi	r24, 0xF7	; 247
    15e0:	80 93 aa 02 	sts	0x02AA, r24
		sei();
    15e4:	78 94       	sei
    15e6:	cd cf       	rjmp	.-102    	; 0x1582 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    15e8:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    15ea:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    15ee:	81 e7       	ldi	r24, 0x71	; 113
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	60 91 9d 02 	lds	r22, 0x029D
    15f6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	61 e7       	ldi	r22, 0x71	; 113
    15fe:	72 e0       	ldi	r23, 0x02	; 2
    1600:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    1604:	80 91 aa 02 	lds	r24, 0x02AA
    1608:	8b 7f       	andi	r24, 0xFB	; 251
    160a:	80 93 aa 02 	sts	0x02AA, r24
		sei();
    160e:	78 94       	sei
    1610:	b6 cf       	rjmp	.-148    	; 0x157e <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	61 e7       	ldi	r22, 0x71	; 113
    1616:	72 e0       	ldi	r23, 0x02	; 2
    1618:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    161c:	80 91 aa 02 	lds	r24, 0x02AA
    1620:	8d 7f       	andi	r24, 0xFD	; 253
    1622:	80 93 aa 02 	sts	0x02AA, r24
    1626:	a9 cf       	rjmp	.-174    	; 0x157a <_Z19can_board_timeslicev+0xc>
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	62 e6       	ldi	r22, 0x62	; 98
    162c:	72 e0       	ldi	r23, 0x02	; 2
    162e:	0e 94 57 07 	call	0xeae	; 0xeae <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    1632:	80 91 aa 02 	lds	r24, 0x02AA
    1636:	8e 7f       	andi	r24, 0xFE	; 254
    1638:	80 93 aa 02 	sts	0x02AA, r24
    163c:	9c cf       	rjmp	.-200    	; 0x1576 <_Z19can_board_timeslicev+0x8>

0000163e <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    1644:	87 e2       	ldi	r24, 0x27	; 39
    1646:	9c ef       	ldi	r25, 0xFC	; 252
    1648:	60 91 9d 02 	lds	r22, 0x029D
    164c:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    1650:	68 83       	st	Y, r22
    1652:	79 83       	std	Y+1, r23	; 0x01
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    1658:	80 91 1a 03 	lds	r24, 0x031A
    165c:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    165e:	80 91 1b 03 	lds	r24, 0x031B
    1662:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    1664:	80 91 1c 03 	lds	r24, 0x031C
    1668:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    166a:	80 91 1d 03 	lds	r24, 0x031D
    166e:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	8c 83       	std	Y+4, r24	; 0x04
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    1684:	85 e1       	ldi	r24, 0x15	; 21
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	60 91 9d 02 	lds	r22, 0x029D
    168c:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    1690:	9b 01       	movw	r18, r22
    1692:	ac 01       	movw	r20, r24
    1694:	68 81       	ld	r22, Y
    1696:	79 81       	ldd	r23, Y+1	; 0x01
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
    16a0:	88 23       	and	r24, r24
    16a2:	39 f0       	breq	.+14     	; 0x16b2 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
    16a4:	ce 01       	movw	r24, r28
    16a6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    16b2:	85 e1       	ldi	r24, 0x15	; 21
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	6f ef       	ldi	r22, 0xFF	; 255
    16b8:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    16bc:	9b 01       	movw	r18, r22
    16be:	ac 01       	movw	r20, r24
    16c0:	68 81       	ld	r22, Y
    16c2:	79 81       	ldd	r23, Y+1	; 0x01
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	9b 81       	ldd	r25, Y+3	; 0x03
    16c8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    16cc:	88 23       	and	r24, r24
    16ce:	51 f7       	brne	.-44     	; 0x16a4 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
		return TRUE;
	}
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    16d0:	80 e1       	ldi	r24, 0x10	; 16
    16d2:	9c ef       	ldi	r25, 0xFC	; 252
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    16da:	9b 01       	movw	r18, r22
    16dc:	ac 01       	movw	r20, r24
    16de:	68 81       	ld	r22, Y
    16e0:	79 81       	ldd	r23, Y+1	; 0x01
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	9b 81       	ldd	r25, Y+3	; 0x03
    16e6:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z8id_match6idTypeS_>
    16ea:	88 23       	and	r24, r24
    16ec:	91 f0       	breq	.+36     	; 0x1712 <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.
			Need to delay by the instance number of timeslices.
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    16ee:	80 91 aa 02 	lds	r24, 0x02AA
    16f2:	80 62       	ori	r24, 0x20	; 32
    16f4:	80 93 aa 02 	sts	0x02AA, r24
		Board_presence_response_type = mMsg->data[0];
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	80 93 ae 02 	sts	0x02AE, r24
		Board_presence_delay 		 = MyInstance;
    16fe:	80 91 9d 02 	lds	r24, 0x029D
    1702:	80 93 0a 01 	sts	0x010A, r24
    1706:	10 92 0b 01 	sts	0x010B, r1
		return TRUE;
    170a:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    1712:	82 e2       	ldi	r24, 0x22	; 34
    1714:	9c ef       	ldi	r25, 0xFC	; 252
    1716:	60 91 9d 02 	lds	r22, 0x029D
    171a:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	68 81       	ld	r22, Y
    1724:	79 81       	ldd	r23, Y+1	; 0x01
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
    172e:	88 23       	and	r24, r24
    1730:	f1 f0       	breq	.+60     	; 0x176e <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	84 ff       	sbrs	r24, 4
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 );
    1738:	82 e6       	ldi	r24, 0x62	; 98
    173a:	92 e0       	ldi	r25, 0x02	; 2
    173c:	0e 94 1f 0b 	call	0x163e	; 0x163e <_Z18can_prep_configureP4sCAN>
			System_Send_Status = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 aa 02 	sts	0x02AA, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    1746:	e0 91 ac 02 	lds	r30, 0x02AC
    174a:	f0 91 ad 02 	lds	r31, 0x02AD
    174e:	30 97       	sbiw	r30, 0x00	; 0
    1750:	19 f1       	breq	.+70     	; 0x1798 <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	8f 70       	andi	r24, 0x0F	; 15
    1756:	09 95       	icall
		return TRUE;
    1758:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 );
			System_Send_Status = 1;
		} else { 
			can_parse_configure_request( mMsg );	// in configuration.c
    1760:	ce 01       	movw	r24, r28
    1762:	0e 94 33 11 	call	0x2266	; 0x2266 <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    1766:	88 e0       	ldi	r24, 0x08	; 8
    1768:	80 93 aa 02 	sts	0x02AA, r24
    176c:	ec cf       	rjmp	.-40     	; 0x1746 <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    176e:	81 e2       	ldi	r24, 0x21	; 33
    1770:	9c ef       	ldi	r25, 0xFC	; 252
    1772:	60 91 9d 02 	lds	r22, 0x029D
    1776:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    177a:	9b 01       	movw	r18, r22
    177c:	ac 01       	movw	r20, r24
    177e:	68 81       	ld	r22, Y
    1780:	79 81       	ldd	r23, Y+1	; 0x01
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
    178a:	88 23       	and	r24, r24
    178c:	39 f0       	breq	.+14     	; 0x179c <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    178e:	88 e0       	ldi	r24, 0x08	; 8
    1790:	80 93 aa 02 	sts	0x02AA, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	8a cf       	rjmp	.-236    	; 0x16ac <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	88 cf       	rjmp	.-240    	; 0x16ac <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    179c:	81 e2       	ldi	r24, 0x21	; 33
    179e:	9c ef       	ldi	r25, 0xFC	; 252
    17a0:	6f ef       	ldi	r22, 0xFF	; 255
    17a2:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    17a6:	9b 01       	movw	r18, r22
    17a8:	ac 01       	movw	r20, r24
    17aa:	68 81       	ld	r22, Y
    17ac:	79 81       	ldd	r23, Y+1	; 0x01
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    17b6:	88 23       	and	r24, r24
    17b8:	51 f7       	brne	.-44     	; 0x178e <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    17ba:	85 e2       	ldi	r24, 0x25	; 37
    17bc:	9c ef       	ldi	r25, 0xFC	; 252
    17be:	60 91 9d 02 	lds	r22, 0x029D
    17c2:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    17c6:	9b 01       	movw	r18, r22
    17c8:	ac 01       	movw	r20, r24
    17ca:	68 81       	ld	r22, Y
    17cc:	79 81       	ldd	r23, Y+1	; 0x01
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	9b 81       	ldd	r25, Y+3	; 0x03
    17d2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
    17d6:	88 23       	and	r24, r24
    17d8:	49 f5       	brne	.+82     	; 0x182c <_Z23can_board_msg_responderP4sCAN+0x1ae>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    17da:	86 e2       	ldi	r24, 0x26	; 38
    17dc:	9c ef       	ldi	r25, 0xFC	; 252
    17de:	60 91 9d 02 	lds	r22, 0x029D
    17e2:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24
    17ea:	68 81       	ld	r22, Y
    17ec:	79 81       	ldd	r23, Y+1	; 0x01
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
    17f6:	88 23       	and	r24, r24
    17f8:	79 f1       	breq	.+94     	; 0x1858 <_Z23can_board_msg_responderP4sCAN+0x1da>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	8e 71       	andi	r24, 0x1E	; 30
    17fe:	84 30       	cpi	r24, 0x04	; 4
    1800:	59 f6       	brne	.-106    	; 0x1798 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    1802:	3d 81       	ldd	r19, Y+5	; 0x05
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	82 2b       	or	r24, r18
    180c:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    180e:	22 e1       	ldi	r18, 0x12	; 18
    1810:	84 33       	cpi	r24, 0x34	; 52
    1812:	92 07       	cpc	r25, r18
    1814:	09 f6       	brne	.-126    	; 0x1798 <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    1816:	85 e5       	ldi	r24, 0x55	; 85
    1818:	80 93 a5 02 	sts	0x02A5, r24
				init_complete = FALSE;
    181c:	10 92 9f 02 	sts	0x029F, r1
				Confirmed     = NOT_CLAIMED;
    1820:	10 92 9e 02 	sts	0x029E, r1
				can_instance_init();		// This fires off the sequencing right away.
    1824:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	40 cf       	rjmp	.-384    	; 0x16ac <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	80 93 9e 02 	sts	0x029E, r24
		MyInstance = mMsg->data[0];
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	80 93 9d 02 	sts	0x029D, r24
		System_Send_Status |= 0x08;
    1838:	80 91 aa 02 	lds	r24, 0x02AA
    183c:	88 60       	ori	r24, 0x08	; 8
    183e:	80 93 aa 02 	sts	0x02AA, r24
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    1848:	60 91 9d 02 	lds	r22, 0x029D
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	0e 94 ba 04 	call	0x974	; 0x974 <_Z26can_add_instance_to_filterht>
		return TRUE;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	2a cf       	rjmp	.-428    	; 0x16ac <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    1858:	86 e2       	ldi	r24, 0x26	; 38
    185a:	9c ef       	ldi	r25, 0xFC	; 252
    185c:	6f ef       	ldi	r22, 0xFF	; 255
    185e:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	68 81       	ld	r22, Y
    1868:	79 81       	ldd	r23, Y+1	; 0x01
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z5match6idTypeS_>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    1872:	88 23       	and	r24, r24
    1874:	11 f6       	brne	.-124    	; 0x17fa <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    1876:	83 e2       	ldi	r24, 0x23	; 35
    1878:	9c ef       	ldi	r25, 0xFC	; 252
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z14create_CAN_eidth>
    1880:	9b 01       	movw	r18, r22
    1882:	ac 01       	movw	r20, r24
    1884:	68 81       	ld	r22, Y
    1886:	79 81       	ldd	r23, Y+1	; 0x01
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z8id_match6idTypeS_>
    1890:	88 23       	and	r24, r24
    1892:	09 f4       	brne	.+2      	; 0x1896 <_Z23can_board_msg_responderP4sCAN+0x218>
    1894:	0b cf       	rjmp	.-490    	; 0x16ac <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	80 91 9d 02 	lds	r24, 0x029D
    189c:	98 17       	cp	r25, r24
    189e:	09 f0       	breq	.+2      	; 0x18a2 <_Z23can_board_msg_responderP4sCAN+0x224>
    18a0:	7b cf       	rjmp	.-266    	; 0x1798 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    18a2:	80 91 9e 02 	lds	r24, 0x029E
    18a6:	80 32       	cpi	r24, 0x20	; 32
    18a8:	41 f0       	breq	.+16     	; 0x18ba <_Z23can_board_msg_responderP4sCAN+0x23c>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    18aa:	88 23       	and	r24, r24
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <_Z23can_board_msg_responderP4sCAN+0x232>
    18ae:	74 cf       	rjmp	.-280    	; 0x1798 <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    18b0:	ce 01       	movw	r24, r28
    18b2:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	f9 ce       	rjmp	.-526    	; 0x16ac <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    18ba:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    18be:	80 e3       	ldi	r24, 0x30	; 48
    18c0:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    18c4:	80 91 ef 00 	lds	r24, 0x00EF
    18c8:	8f 73       	andi	r24, 0x3F	; 63
    18ca:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    18ce:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    18d2:	10 92 9e 02 	sts	0x029E, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    18d6:	ce 01       	movw	r24, r28
    18d8:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	e6 ce       	rjmp	.-564    	; 0x16ac <_Z23can_board_msg_responderP4sCAN+0x2e>

000018e0 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	7b 01       	movw	r14, r22
    18ee:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    18f0:	c0 e0       	ldi	r28, 0x00	; 0
    18f2:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    18f4:	ce 01       	movw	r24, r28
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	8c 0f       	add	r24, r28
    18fc:	9d 1f       	adc	r25, r29
    18fe:	fc 01       	movw	r30, r24
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	e8 0f       	add	r30, r24
    190a:	f9 1f       	adc	r31, r25
    190c:	e1 55       	subi	r30, 0x51	; 81
    190e:	fd 4f       	sbci	r31, 0xFD	; 253
    1910:	20 81       	ld	r18, Z
    1912:	31 81       	ldd	r19, Z+1	; 0x01
    1914:	42 81       	ldd	r20, Z+2	; 0x02
    1916:	53 81       	ldd	r21, Z+3	; 0x03
    1918:	c8 01       	movw	r24, r16
    191a:	b7 01       	movw	r22, r14
    191c:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z8id_match6idTypeS_>
    1920:	88 23       	and	r24, r24
    1922:	61 f4       	brne	.+24     	; 0x193c <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    1924:	21 96       	adiw	r28, 0x01	; 1
    1926:	c6 30       	cpi	r28, 0x06	; 6
    1928:	d1 05       	cpc	r29, r1
    192a:	21 f7       	brne	.-56     	; 0x18f4 <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    192c:	8f ef       	ldi	r24, 0xFF	; 255
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    193c:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	08 95       	ret

0000194c <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    194c:	28 2f       	mov	r18, r24
    194e:	39 2f       	mov	r19, r25
    1950:	d9 01       	movw	r26, r18
    1952:	86 2f       	mov	r24, r22
    1954:	97 2f       	mov	r25, r23
    1956:	fc 01       	movw	r30, r24
    1958:	8f e0       	ldi	r24, 0x0F	; 15
    195a:	01 90       	ld	r0, Z+
    195c:	0d 92       	st	X+, r0
    195e:	81 50       	subi	r24, 0x01	; 1
    1960:	e1 f7       	brne	.-8      	; 0x195a <_Z12copy_can_msgP4sCANS0_+0xe>
}
    1962:	08 95       	ret

00001964 <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    1964:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    1966:	80 91 09 03 	lds	r24, 0x0309
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9c 01       	movw	r18, r24
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	28 0f       	add	r18, r24
    1974:	39 1f       	adc	r19, r25
    1976:	c9 01       	movw	r24, r18
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	82 0f       	add	r24, r18
    1982:	93 1f       	adc	r25, r19
    1984:	81 55       	subi	r24, 0x51	; 81
    1986:	9d 4f       	sbci	r25, 0xFD	; 253
    1988:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    198c:	80 91 09 03 	lds	r24, 0x0309
    1990:	8f 5f       	subi	r24, 0xFF	; 255
    1992:	80 93 09 03 	sts	0x0309, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    1996:	86 30       	cpi	r24, 0x06	; 6
    1998:	10 f0       	brcs	.+4      	; 0x199e <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    199a:	10 92 09 03 	sts	0x0309, r1
    199e:	08 95       	ret

000019a0 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    19a6:	68 81       	ld	r22, Y
    19a8:	79 81       	ldd	r23, Y+1	; 0x01
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    19b2:	8f 3f       	cpi	r24, 0xFF	; 255
    19b4:	a9 f0       	breq	.+42     	; 0x19e0 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9c 01       	movw	r18, r24
    19ba:	22 0f       	add	r18, r18
    19bc:	33 1f       	adc	r19, r19
    19be:	28 0f       	add	r18, r24
    19c0:	39 1f       	adc	r19, r25
    19c2:	c9 01       	movw	r24, r18
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	82 0f       	add	r24, r18
    19ce:	93 1f       	adc	r25, r19
    19d0:	81 55       	subi	r24, 0x51	; 81
    19d2:	9d 4f       	sbci	r25, 0xFD	; 253
    19d4:	be 01       	movw	r22, r28
    19d6:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    19e0:	80 91 09 03 	lds	r24, 0x0309
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 01       	movw	r18, r24
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	28 0f       	add	r18, r24
    19ee:	39 1f       	adc	r19, r25
    19f0:	c9 01       	movw	r24, r18
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	82 0f       	add	r24, r18
    19fc:	93 1f       	adc	r25, r19
    19fe:	81 55       	subi	r24, 0x51	; 81
    1a00:	9d 4f       	sbci	r25, 0xFD	; 253
    1a02:	be 01       	movw	r22, r28
    1a04:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    1a08:	80 91 09 03 	lds	r24, 0x0309
    1a0c:	8f 5f       	subi	r24, 0xFF	; 255
    1a0e:	80 93 09 03 	sts	0x0309, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    1a12:	86 30       	cpi	r24, 0x06	; 6
    1a14:	10 f3       	brcs	.-60     	; 0x19da <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    1a16:	10 92 09 03 	sts	0x0309, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <_Z12QueueMessageP4sCAN>:
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    1a20:	20 91 1d 03 	lds	r18, 0x031D
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1a24:	21 fd       	sbrc	r18, 1
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    1a28:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_Z17addMailboxHistoryP4sCAN>
    1a2c:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    1a2e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_Z16addNormalHistoryP4sCAN>
    1a32:	08 95       	ret

00001a34 <_Z15RetrieveMessagev>:
    1a34:	80 91 1d 03 	lds	r24, 0x031D
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1a38:	81 ff       	sbrs	r24, 1
    1a3a:	1b c0       	rjmp	.+54     	; 0x1a72 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    1a3c:	20 91 0a 03 	lds	r18, 0x030A
    1a40:	80 91 09 03 	lds	r24, 0x0309
    1a44:	28 17       	cp	r18, r24
    1a46:	c9 f0       	breq	.+50     	; 0x1a7a <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    1a48:	82 2f       	mov	r24, r18
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	80 93 0a 03 	sts	0x030A, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1a50:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    1a52:	c9 01       	movw	r24, r18
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	82 0f       	add	r24, r18
    1a5a:	93 1f       	adc	r25, r19
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	22 0f       	add	r18, r18
    1a64:	33 1f       	adc	r19, r19
    1a66:	28 0f       	add	r18, r24
    1a68:	39 1f       	adc	r19, r25
    1a6a:	21 55       	subi	r18, 0x51	; 81
    1a6c:	3d 4f       	sbci	r19, 0xFD	; 253
		}
	}
	return NULL;
}
    1a6e:	c9 01       	movw	r24, r18
    1a70:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
}
    1a76:	c9 01       	movw	r24, r18
    1a78:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    1a7a:	10 92 0a 03 	sts	0x030A, r1
			RxHead = 0;
    1a7e:	10 92 09 03 	sts	0x0309, r1
			return NULL;
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f3 cf       	rjmp	.-26     	; 0x1a6e <_Z15RetrieveMessagev+0x3a>

00001a88 <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	44 0f       	add	r20, r20
    1a8e:	55 1f       	adc	r21, r21
    1a90:	48 0f       	add	r20, r24
    1a92:	59 1f       	adc	r21, r25
    1a94:	9a 01       	movw	r18, r20
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	22 0f       	add	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	24 0f       	add	r18, r20
    1aa0:	35 1f       	adc	r19, r21
    1aa2:	21 55       	subi	r18, 0x51	; 81
    1aa4:	3d 4f       	sbci	r19, 0xFD	; 253
}
    1aa6:	c9 01       	movw	r24, r18
    1aa8:	08 95       	ret

00001aaa <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    1aaa:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_Z15RetrieveMessagev>
	if (msg)
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <_Z15CAN_Q_Timeslicev+0xe>
    1ab2:	20 91 1d 03 	lds	r18, 0x031D
	{
		SET_LED_2();
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1ab6:	21 ff       	sbrs	r18, 1
    1ab8:	08 95       	ret
			can_file_message( msg );
    1aba:	0e 94 36 01 	call	0x26c	; 0x26c <_Z16can_file_messageP4sCAN>
    1abe:	08 95       	ret

00001ac0 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    1ac0:	10 92 0c 03 	sts	0x030C, r1
	System_LED_Control.pattern    = 0;
    1ac4:	10 92 0b 03 	sts	0x030B, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    1ac8:	23 9a       	sbi	0x04, 3	; 4
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    1aca:	22 9a       	sbi	0x04, 2	; 4
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    1acc:	21 9a       	sbi	0x04, 1	; 4
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    1ace:	20 9a       	sbi	0x04, 0	; 4
#endif
  	RESET_LED_1();
    1ad0:	2b 98       	cbi	0x05, 3	; 5
	RESET_LED_2();
    1ad2:	2a 98       	cbi	0x05, 2	; 5
	RESET_LED_3();
    1ad4:	29 98       	cbi	0x05, 1	; 5
	RESET_LED_4();
    1ad6:	28 98       	cbi	0x05, 0	; 5
}
    1ad8:	08 95       	ret

00001ada <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	69 f0       	breq	.+26     	; 0x1af8 <_Z16protected_led_onh+0x1e>
    1ade:	83 30       	cpi	r24, 0x03	; 3
    1ae0:	28 f0       	brcs	.+10     	; 0x1aec <_Z16protected_led_onh+0x12>
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	59 f0       	breq	.+22     	; 0x1afc <_Z16protected_led_onh+0x22>
    1ae6:	84 30       	cpi	r24, 0x04	; 4
    1ae8:	29 f0       	breq	.+10     	; 0x1af4 <_Z16protected_led_onh+0x1a>
    1aea:	08 95       	ret
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	e9 f7       	brne	.-6      	; 0x1aea <_Z16protected_led_onh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE)  LED_1_ON();  break;
    1af0:	2b 98       	cbi	0x05, 3	; 5
    1af2:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  LED_2_ON();  break;
   case 3:  LED_3_ON();  break;
   case 4:  LED_4_ON();  break;
    1af4:	28 98       	cbi	0x05, 0	; 5
    1af6:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  LED_1_ON();  break;
   case 2:  if(LED_1_2_USEABLE)  LED_2_ON();  break;
    1af8:	2a 98       	cbi	0x05, 2	; 5
    1afa:	08 95       	ret
   case 3:  LED_3_ON();  break;
    1afc:	29 98       	cbi	0x05, 1	; 5
    1afe:	08 95       	ret

00001b00 <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    1b00:	82 30       	cpi	r24, 0x02	; 2
    1b02:	69 f0       	breq	.+26     	; 0x1b1e <_Z17protected_led_offh+0x1e>
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	28 f0       	brcs	.+10     	; 0x1b12 <_Z17protected_led_offh+0x12>
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	59 f0       	breq	.+22     	; 0x1b22 <_Z17protected_led_offh+0x22>
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <_Z17protected_led_offh+0x1a>
    1b10:	08 95       	ret
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	e9 f7       	brne	.-6      	; 0x1b10 <_Z17protected_led_offh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE) LED_1_OFF();  break;
    1b16:	2b 9a       	sbi	0x05, 3	; 5
    1b18:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) LED_2_OFF();  break;
   case 3:  LED_3_OFF();  break;
   case 4:  LED_4_OFF();  break;
    1b1a:	28 9a       	sbi	0x05, 0	; 5
    1b1c:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) LED_1_OFF();  break;
   case 2:  if(LED_1_2_USEABLE) LED_2_OFF();  break;
    1b1e:	2a 9a       	sbi	0x05, 2	; 5
    1b20:	08 95       	ret
   case 3:  LED_3_OFF();  break;
    1b22:	29 9a       	sbi	0x05, 1	; 5
    1b24:	08 95       	ret

00001b26 <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1b26:	90 91 0c 03 	lds	r25, 0x030C
    1b2a:	99 23       	and	r25, r25
    1b2c:	21 f0       	breq	.+8      	; 0x1b36 <_Z11strobe_ledsh+0x10>
    1b2e:	92 30       	cpi	r25, 0x02	; 2
    1b30:	11 f0       	breq	.+4      	; 0x1b36 <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	08 95       	ret
    1b36:	90 91 0f 01 	lds	r25, 0x010F
    1b3a:	29 2f       	mov	r18, r25
    1b3c:	21 50       	subi	r18, 0x01	; 1
    1b3e:	20 93 0f 01 	sts	0x010F, r18
    1b42:	99 23       	and	r25, r25
    1b44:	b1 f7       	brne	.-20     	; 0x1b32 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    1b46:	9a e0       	ldi	r25, 0x0A	; 10
    1b48:	90 93 0f 01 	sts	0x010F, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    1b4c:	88 23       	and	r24, r24
    1b4e:	79 f0       	breq	.+30     	; 0x1b6e <_Z11strobe_ledsh+0x48>
    1b50:	80 91 0e 01 	lds	r24, 0x010E
    1b54:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_Z16protected_led_onh>
		i++;
    1b58:	80 91 0e 01 	lds	r24, 0x010E
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	80 93 0e 01 	sts	0x010E, r24
		if (i>=5)  { i=1; return TRUE; }
    1b62:	85 30       	cpi	r24, 0x05	; 5
    1b64:	78 f0       	brcs	.+30     	; 0x1b84 <_Z11strobe_ledsh+0x5e>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 0e 01 	sts	0x010E, r24
    1b6c:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    1b6e:	80 91 0e 01 	lds	r24, 0x010E
    1b72:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <_Z17protected_led_offh>
		i++;
    1b76:	80 91 0e 01 	lds	r24, 0x010E
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	80 93 0e 01 	sts	0x010E, r24
		if (i>=5)  { i=1; return TRUE; }
    1b80:	85 30       	cpi	r24, 0x05	; 5
    1b82:	88 f7       	brcc	.-30     	; 0x1b66 <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    1b84:	80 e0       	ldi	r24, 0x00	; 0
}
    1b86:	08 95       	ret

00001b88 <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b88:	90 91 0c 03 	lds	r25, 0x030C
    1b8c:	91 11       	cpse	r25, r1
    1b8e:	08 95       	ret
	protected_led_on(mindex);
    1b90:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_Z16protected_led_onh>
    1b94:	08 95       	ret

00001b96 <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b96:	90 91 0c 03 	lds	r25, 0x030C
    1b9a:	91 11       	cpse	r25, r1
    1b9c:	08 95       	ret
	protected_led_off(mindex);
    1b9e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <_Z17protected_led_offh>
    1ba2:	08 95       	ret

00001ba4 <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    1ba4:	66 23       	and	r22, r22
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    1ba8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_Z7led_offh>
    1bac:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    1bae:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_Z6led_onh>
    1bb2:	08 95       	ret

00001bb4 <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1bb4:	90 91 0c 03 	lds	r25, 0x030C
    1bb8:	91 11       	cpse	r25, r1
    1bba:	08 95       	ret
	protected_set_led( mindex, value );
    1bbc:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_Z17protected_set_ledhh>
    1bc0:	08 95       	ret

00001bc2 <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    1bc2:	66 23       	and	r22, r22
    1bc4:	69 f0       	breq	.+26     	; 0x1be0 <_Z19protected_show_bytehh+0x1e>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1bc6:	87 ff       	sbrs	r24, 7
    1bc8:	20 c0       	rjmp	.+64     	; 0x1c0a <_Z19protected_show_bytehh+0x48>
    1bca:	28 9a       	sbi	0x05, 0	; 5
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1bcc:	86 ff       	sbrs	r24, 6
    1bce:	20 c0       	rjmp	.+64     	; 0x1c10 <_Z19protected_show_bytehh+0x4e>
    1bd0:	29 9a       	sbi	0x05, 1	; 5
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bd2:	85 ff       	sbrs	r24, 5
    1bd4:	20 c0       	rjmp	.+64     	; 0x1c16 <_Z19protected_show_bytehh+0x54>
    1bd6:	2a 9a       	sbi	0x05, 2	; 5
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    1bd8:	84 fd       	sbrc	r24, 4
    1bda:	0d c0       	rjmp	.+26     	; 0x1bf6 <_Z19protected_show_bytehh+0x34>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1bdc:	2b 98       	cbi	0x05, 3	; 5
    1bde:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1be0:	83 ff       	sbrs	r24, 3
    1be2:	0b c0       	rjmp	.+22     	; 0x1bfa <_Z19protected_show_bytehh+0x38>
    1be4:	28 9a       	sbi	0x05, 0	; 5
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1be6:	82 ff       	sbrs	r24, 2
    1be8:	0b c0       	rjmp	.+22     	; 0x1c00 <_Z19protected_show_bytehh+0x3e>
    1bea:	29 9a       	sbi	0x05, 1	; 5
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bec:	81 ff       	sbrs	r24, 1
    1bee:	0b c0       	rjmp	.+22     	; 0x1c06 <_Z19protected_show_bytehh+0x44>
    1bf0:	2a 9a       	sbi	0x05, 2	; 5
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1bf2:	80 ff       	sbrs	r24, 0
    1bf4:	f3 cf       	rjmp	.-26     	; 0x1bdc <_Z19protected_show_bytehh+0x1a>
    1bf6:	2b 9a       	sbi	0x05, 3	; 5
    1bf8:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1bfa:	28 98       	cbi	0x05, 0	; 5
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1bfc:	82 fd       	sbrc	r24, 2
    1bfe:	f5 cf       	rjmp	.-22     	; 0x1bea <_Z19protected_show_bytehh+0x28>
    1c00:	29 98       	cbi	0x05, 1	; 5
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1c02:	81 fd       	sbrc	r24, 1
    1c04:	f5 cf       	rjmp	.-22     	; 0x1bf0 <_Z19protected_show_bytehh+0x2e>
    1c06:	2a 98       	cbi	0x05, 2	; 5
    1c08:	f4 cf       	rjmp	.-24     	; 0x1bf2 <_Z19protected_show_bytehh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1c0a:	28 98       	cbi	0x05, 0	; 5
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1c0c:	86 fd       	sbrc	r24, 6
    1c0e:	e0 cf       	rjmp	.-64     	; 0x1bd0 <_Z19protected_show_bytehh+0xe>
    1c10:	29 98       	cbi	0x05, 1	; 5
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1c12:	85 fd       	sbrc	r24, 5
    1c14:	e0 cf       	rjmp	.-64     	; 0x1bd6 <_Z19protected_show_bytehh+0x14>
    1c16:	2a 98       	cbi	0x05, 2	; 5
    1c18:	df cf       	rjmp	.-66     	; 0x1bd8 <_Z19protected_show_bytehh+0x16>

00001c1a <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    1c1a:	90 91 0c 03 	lds	r25, 0x030C
    1c1e:	99 23       	and	r25, r25
    1c20:	11 f0       	breq	.+4      	; 0x1c26 <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    1c22:	80 91 0b 03 	lds	r24, 0x030B
	}
    protected_show_byte( result, mHiNibble );
    1c26:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_Z19protected_show_bytehh>
}
    1c2a:	08 95       	ret

00001c2c <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1c2c:	90 91 0c 03 	lds	r25, 0x030C
    1c30:	99 23       	and	r25, r25
    1c32:	19 f0       	breq	.+6      	; 0x1c3a <_Z18show_result_toggleh+0xe>
    1c34:	93 30       	cpi	r25, 0x03	; 3
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <_Z18show_result_toggleh+0xe>
    1c38:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    1c3a:	90 91 0c 01 	lds	r25, 0x010C
    1c3e:	99 23       	and	r25, r25
    1c40:	59 f4       	brne	.+22     	; 0x1c58 <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 91 0c 01 	lds	r25, 0x010C
    1c4e:	91 11       	cpse	r25, r1
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	80 93 0c 01 	sts	0x010C, r24
    1c56:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_Z19protected_show_bytehh>
    1c5e:	f4 cf       	rjmp	.-24     	; 0x1c48 <_Z18show_result_toggleh+0x1c>

00001c60 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    1c60:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    1c62:	95 81       	ldd	r25, Z+5	; 0x05
    1c64:	9f 70       	andi	r25, 0x0F	; 15
    1c66:	90 93 0c 03 	sts	0x030C, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    1c6a:	86 81       	ldd	r24, Z+6	; 0x06
    1c6c:	8f 70       	andi	r24, 0x0F	; 15
    1c6e:	80 93 0b 03 	sts	0x030B, r24

	switch (System_LED_Control.systemMode)
    1c72:	92 30       	cpi	r25, 0x02	; 2
    1c74:	81 f0       	breq	.+32     	; 0x1c96 <_Z21can_parse_led_requestP4sCAN+0x36>
    1c76:	93 30       	cpi	r25, 0x03	; 3
    1c78:	39 f0       	breq	.+14     	; 0x1c88 <_Z21can_parse_led_requestP4sCAN+0x28>
    1c7a:	91 30       	cpi	r25, 0x01	; 1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <_Z21can_parse_led_requestP4sCAN+0x20>
    1c7e:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_Z9show_bytehh>
									  break;
    1c86:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    1c88:	80 91 9d 02 	lds	r24, 0x029D
    1c8c:	80 93 0b 03 	sts	0x030B, r24
									  show_result_toggle( MyInstance );
    1c90:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_Z18show_result_toggleh>
    1c94:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    1c96:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_Z11strobe_ledsh>
									  break;
    1c9a:	08 95       	ret

00001c9c <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    1c9c:	80 91 0c 03 	lds	r24, 0x030C
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	d9 f0       	breq	.+54     	; 0x1cda <_Z19led_timeslice_100msv+0x3e>
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	49 f0       	breq	.+18     	; 0x1cba <_Z19led_timeslice_100msv+0x1e>
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <_Z19led_timeslice_100msv+0x12>
    1cac:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    1cae:	80 91 0b 03 	lds	r24, 0x030B
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_Z9show_bytehh>
									  break;
    1cb8:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    1cba:	80 91 0d 01 	lds	r24, 0x010D
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	91 50       	subi	r25, 0x01	; 1
    1cc2:	90 93 0d 01 	sts	0x010D, r25
    1cc6:	88 23       	and	r24, r24
    1cc8:	89 f7       	brne	.-30     	; 0x1cac <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    1cca:	8a e0       	ldi	r24, 0x0A	; 10
    1ccc:	80 93 0d 01 	sts	0x010D, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    1cd0:	80 91 9d 02 	lds	r24, 0x029D
    1cd4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_Z18show_result_toggleh>
    1cd8:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    1cda:	80 91 0b 03 	lds	r24, 0x030B
    1cde:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_Z11strobe_ledsh>
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	19 f7       	brne	.-58     	; 0x1cac <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    1ce6:	90 91 0b 03 	lds	r25, 0x030B
    1cea:	99 23       	and	r25, r25
    1cec:	19 f4       	brne	.+6      	; 0x1cf4 <_Z19led_timeslice_100msv+0x58>
    1cee:	80 93 0b 03 	sts	0x030B, r24
    1cf2:	08 95       	ret
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	fb cf       	rjmp	.-10     	; 0x1cee <_Z19led_timeslice_100msv+0x52>

00001cf8 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1cf8:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1cfa:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1cfc:	90 93 89 00 	sts	0x0089, r25
    1d00:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    1d04:	2f bf       	out	0x3f, r18	; 63
}
    1d06:	08 95       	ret

00001d08 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1d08:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    1d0a:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    1d0c:	90 93 8b 00 	sts	0x008B, r25
    1d10:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    1d14:	2f bf       	out	0x3f, r18	; 63
}
    1d16:	08 95       	ret

00001d18 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	7b 01       	movw	r14, r22
    1d22:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1d24:	20 91 10 01 	lds	r18, 0x0110
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	74 e2       	ldi	r23, 0x24	; 36
    1d32:	84 ef       	ldi	r24, 0xF4	; 244
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 bd 19 	call	0x337a	; 0x337a <__divmodsi4>
    1d3a:	ca 01       	movw	r24, r20
    1d3c:	b9 01       	movw	r22, r18
    1d3e:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__floatsisf>
    1d42:	a8 01       	movw	r20, r16
    1d44:	97 01       	movw	r18, r14
    1d46:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__divsf3>
    1d4a:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fixunssfsi>
	return Top;
}
    1d4e:	cb 01       	movw	r24, r22
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	08 95       	ret

00001d5a <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    1d5a:	90 93 12 01 	sts	0x0112, r25
    1d5e:	80 93 11 01 	sts	0x0111, r24
	ICR1 = TOP;
    1d62:	90 93 87 00 	sts	0x0087, r25
    1d66:	80 93 86 00 	sts	0x0086, r24
}
    1d6a:	08 95       	ret

00001d6c <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	9b 01       	movw	r18, r22
    1d76:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	74 e2       	ldi	r23, 0x24	; 36
    1d7c:	84 e7       	ldi	r24, 0x74	; 116
    1d7e:	9b e4       	ldi	r25, 0x4B	; 75
    1d80:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__divsf3>
    1d84:	8b 01       	movw	r16, r22
    1d86:	d8 2f       	mov	r29, r24
    1d88:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1d8a:	9e 01       	movw	r18, r28
    1d8c:	71 2f       	mov	r23, r17
    1d8e:	83 2f       	mov	r24, r19
    1d90:	92 2f       	mov	r25, r18
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	0c f0       	brlt	.+2      	; 0x1da4 <_Z16select_prescalerf+0x38>
    1da2:	41 c0       	rjmp	.+130    	; 0x1e26 <_Z16select_prescalerf+0xba>
    1da4:	9e 01       	movw	r18, r28
    1da6:	60 2f       	mov	r22, r16
    1da8:	71 2f       	mov	r23, r17
    1daa:	83 2f       	mov	r24, r19
    1dac:	92 2f       	mov	r25, r18
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	5e e3       	ldi	r21, 0x3E	; 62
    1db6:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	b4 f5       	brge	.+108    	; 0x1e36 <_Z16select_prescalerf+0xca>
    1dca:	9e 01       	movw	r18, r28
    1dcc:	60 2f       	mov	r22, r16
    1dce:	71 2f       	mov	r23, r17
    1dd0:	83 2f       	mov	r24, r19
    1dd2:	92 2f       	mov	r25, r18
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5c e3       	ldi	r21, 0x3C	; 60
    1ddc:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <_Z16select_prescalerf+0xd6>
    1df0:	9e 01       	movw	r18, r28
    1df2:	60 2f       	mov	r22, r16
    1df4:	71 2f       	mov	r23, r17
    1df6:	83 2f       	mov	r24, r19
    1df8:	92 2f       	mov	r25, r18
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5b e3       	ldi	r21, 0x3B	; 59
    1e02:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	9c f4       	brge	.+38     	; 0x1e3c <_Z16select_prescalerf+0xd0>
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    1e1a:	c9 01       	movw	r24, r18
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    1e26:	21 e0       	ldi	r18, 0x01	; 1
    1e28:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    1e2a:	c9 01       	movw	r24, r18
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1e36:	28 e0       	ldi	r18, 0x08	; 8
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	ef cf       	rjmp	.-34     	; 0x1e1a <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	31 e0       	ldi	r19, 0x01	; 1
    1e40:	ec cf       	rjmp	.-40     	; 0x1e1a <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    1e42:	20 e4       	ldi	r18, 0x40	; 64
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	e9 cf       	rjmp	.-46     	; 0x1e1a <_Z16select_prescalerf+0xae>

00001e48 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1e48:	80 34       	cpi	r24, 0x40	; 64
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	d9 f0       	breq	.+54     	; 0x1e84 <_Z20get_tccr1b_prescalert+0x3c>
    1e4e:	81 34       	cpi	r24, 0x41	; 65
    1e50:	91 05       	cpc	r25, r1
    1e52:	50 f0       	brcs	.+20     	; 0x1e68 <_Z20get_tccr1b_prescalert+0x20>
    1e54:	21 e0       	ldi	r18, 0x01	; 1
    1e56:	80 30       	cpi	r24, 0x00	; 0
    1e58:	92 07       	cpc	r25, r18
    1e5a:	81 f0       	breq	.+32     	; 0x1e7c <_Z20get_tccr1b_prescalert+0x34>
    1e5c:	24 e0       	ldi	r18, 0x04	; 4
    1e5e:	80 30       	cpi	r24, 0x00	; 0
    1e60:	92 07       	cpc	r25, r18
    1e62:	51 f0       	breq	.+20     	; 0x1e78 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    1e64:	8f ef       	ldi	r24, 0xFF	; 255
    1e66:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	49 f0       	breq	.+18     	; 0x1e80 <_Z20get_tccr1b_prescalert+0x38>
    1e6e:	88 30       	cpi	r24, 0x08	; 8
    1e70:	91 05       	cpc	r25, r1
    1e72:	c1 f7       	brne	.-16     	; 0x1e64 <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    1e76:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    1e78:	85 e0       	ldi	r24, 0x05	; 5
    1e7a:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    1e7c:	84 e0       	ldi	r24, 0x04	; 4
    1e7e:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	08 95       	ret

00001e88 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    1e88:	ef 92       	push	r14
    1e8a:	ff 92       	push	r15
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	7b 01       	movw	r14, r22
    1e92:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1e94:	20 91 10 01 	lds	r18, 0x0110
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	74 e2       	ldi	r23, 0x24	; 36
    1ea2:	84 ef       	ldi	r24, 0xF4	; 244
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 bd 19 	call	0x337a	; 0x337a <__divmodsi4>
    1eaa:	ca 01       	movw	r24, r20
    1eac:	b9 01       	movw	r22, r18
    1eae:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__floatsisf>
    1eb2:	a8 01       	movw	r20, r16
    1eb4:	97 01       	movw	r18, r14
    1eb6:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__divsf3>
    1eba:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    1ebe:	70 93 12 01 	sts	0x0112, r23
    1ec2:	60 93 11 01 	sts	0x0111, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    1ec6:	70 93 87 00 	sts	0x0087, r23
    1eca:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	08 95       	ret

00001ed8 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	7b 01       	movw	r14, r22
    1ee6:	8c 01       	movw	r16, r24
    1ee8:	c4 2f       	mov	r28, r20
    1eea:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    1eec:	41 11       	cpse	r20, r1
    1eee:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    1ef0:	d1 11       	cpse	r29, r1
    1ef2:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    1ef4:	80 91 64 00 	lds	r24, 0x0064
    1ef8:	87 7e       	andi	r24, 0xE7	; 231
    1efa:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1efe:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1f00:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1f02:	10 92 89 00 	sts	0x0089, r1
    1f06:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    1f0a:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1f0c:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1f0e:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    1f10:	10 92 8b 00 	sts	0x008B, r1
    1f14:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    1f18:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1f1a:	20 91 10 01 	lds	r18, 0x0110
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	74 e2       	ldi	r23, 0x24	; 36
    1f28:	84 ef       	ldi	r24, 0xF4	; 244
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 bd 19 	call	0x337a	; 0x337a <__divmodsi4>
    1f30:	ca 01       	movw	r24, r20
    1f32:	b9 01       	movw	r22, r18
    1f34:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__floatsisf>
    1f38:	a8 01       	movw	r20, r16
    1f3a:	97 01       	movw	r18, r14
    1f3c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__divsf3>
    1f40:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    1f44:	70 93 12 01 	sts	0x0112, r23
    1f48:	60 93 11 01 	sts	0x0111, r22
	ICR1 = TOP;
    1f4c:	70 93 87 00 	sts	0x0087, r23
    1f50:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    1f54:	cc 23       	and	r28, r28
    1f56:	c1 f4       	brne	.+48     	; 0x1f88 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    1f58:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    1f5a:	d1 11       	cpse	r29, r1
    1f5c:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    1f5e:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    1f62:	c8 01       	movw	r24, r16
    1f64:	b7 01       	movw	r22, r14
    1f66:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_Z16select_prescalerf>
    1f6a:	80 93 10 01 	sts	0x0110, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_Z20get_tccr1b_prescalert>
    1f74:	88 61       	ori	r24, 0x18	; 24
    1f76:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    1f88:	82 e8       	ldi	r24, 0x82	; 130
    1f8a:	e7 cf       	rjmp	.-50     	; 0x1f5a <_Z8pwm_initfhh+0x82>

00001f8c <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    1f8c:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    1f90:	29 2f       	mov	r18, r25
    1f92:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    1f94:	88 23       	and	r24, r24
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    1f98:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    1f9a:	90 93 80 00 	sts	0x0080, r25
}
    1f9e:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    1fa0:	92 2f       	mov	r25, r18
    1fa2:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    1fa4:	90 93 80 00 	sts	0x0080, r25
}
    1fa8:	08 95       	ret

00001faa <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    1faa:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    1fae:	29 2f       	mov	r18, r25
    1fb0:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    1fb2:	88 23       	and	r24, r24
    1fb4:	21 f4       	brne	.+8      	; 0x1fbe <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    1fb6:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    1fb8:	90 93 80 00 	sts	0x0080, r25
}
    1fbc:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    1fbe:	92 2f       	mov	r25, r18
    1fc0:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    1fc2:	90 93 80 00 	sts	0x0080, r25
}
    1fc6:	08 95       	ret

00001fc8 <_Z9set_dutyAf>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_dutyA( float mDuty )
{
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	7b 01       	movw	r14, r22
    1fd2:	8c 01       	movw	r16, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	a9 01       	movw	r20, r18
    1fda:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__ltsf2>
    1fde:	87 ff       	sbrs	r24, 7
    1fe0:	04 c0       	rjmp	.+8      	; 0x1fea <_Z9set_dutyAf+0x22>
    1fe2:	17 fb       	bst	r17, 7
    1fe4:	10 95       	com	r17
    1fe6:	17 f9       	bld	r17, 7
    1fe8:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    1fea:	60 91 11 01 	lds	r22, 0x0111
    1fee:	70 91 12 01 	lds	r23, 0x0112
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
    1ffa:	a8 01       	movw	r20, r16
    1ffc:	97 01       	movw	r18, r14
    1ffe:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
    2002:	0e 94 31 1a 	call	0x3462	; 0x3462 <ceil>
    2006:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    200a:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    200c:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    200e:	70 93 89 00 	sts	0x0089, r23
    2012:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    2016:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	08 95       	ret

00002022 <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	7b 01       	movw	r14, r22
    202c:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__ltsf2>
    2038:	87 ff       	sbrs	r24, 7
    203a:	04 c0       	rjmp	.+8      	; 0x2044 <_Z9set_dutyBf+0x22>
    203c:	17 fb       	bst	r17, 7
    203e:	10 95       	com	r17
    2040:	17 f9       	bld	r17, 7
    2042:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    2044:	60 91 11 01 	lds	r22, 0x0111
    2048:	70 91 12 01 	lds	r23, 0x0112
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
    2054:	a8 01       	movw	r20, r16
    2056:	97 01       	movw	r18, r14
    2058:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
    205c:	0e 94 31 1a 	call	0x3462	; 0x3462 <ceil>
    2060:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2064:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    2066:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2068:	70 93 8b 00 	sts	0x008B, r23
    206c:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    2070:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	08 95       	ret

0000207c <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    207c:	9b 01       	movw	r18, r22
    207e:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    2080:	10 92 0e 03 	sts	0x030E, r1
    2084:	10 92 0f 03 	sts	0x030F, r1
    2088:	10 92 10 03 	sts	0x0310, r1
    208c:	10 92 11 03 	sts	0x0311, r1
    2090:	80 91 0e 03 	lds	r24, 0x030E
    2094:	90 91 0f 03 	lds	r25, 0x030F
    2098:	a0 91 10 03 	lds	r26, 0x0310
    209c:	b0 91 11 03 	lds	r27, 0x0311
    20a0:	82 17       	cp	r24, r18
    20a2:	93 07       	cpc	r25, r19
    20a4:	a4 07       	cpc	r26, r20
    20a6:	b5 07       	cpc	r27, r21
    20a8:	04 f5       	brge	.+64     	; 0x20ea <_Z5delayl+0x6e>
    20aa:	80 91 0e 03 	lds	r24, 0x030E
    20ae:	90 91 0f 03 	lds	r25, 0x030F
    20b2:	a0 91 10 03 	lds	r26, 0x0310
    20b6:	b0 91 11 03 	lds	r27, 0x0311
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	a1 1d       	adc	r26, r1
    20be:	b1 1d       	adc	r27, r1
    20c0:	80 93 0e 03 	sts	0x030E, r24
    20c4:	90 93 0f 03 	sts	0x030F, r25
    20c8:	a0 93 10 03 	sts	0x0310, r26
    20cc:	b0 93 11 03 	sts	0x0311, r27
    20d0:	80 91 0e 03 	lds	r24, 0x030E
    20d4:	90 91 0f 03 	lds	r25, 0x030F
    20d8:	a0 91 10 03 	lds	r26, 0x0310
    20dc:	b0 91 11 03 	lds	r27, 0x0311
    20e0:	82 17       	cp	r24, r18
    20e2:	93 07       	cpc	r25, r19
    20e4:	a4 07       	cpc	r26, r20
    20e6:	b5 07       	cpc	r27, r21
    20e8:	04 f3       	brlt	.-64     	; 0x20aa <_Z5delayl+0x2e>
    20ea:	08 95       	ret

000020ec <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    20f0:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    20f2:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    20f4:	8e ef       	ldi	r24, 0xFE	; 254
    20f6:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    20f8:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    20fa:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    20fc:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    20fe:	10 92 64 00 	sts	0x0064, r1
}
    2102:	08 95       	ret

00002104 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    2108:	93 e0       	ldi	r25, 0x03	; 3
    210a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    210c:	9a ef       	ldi	r25, 0xFA	; 250
    210e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    2110:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    2114:	10 92 15 03 	sts	0x0315, r1
    2118:	10 92 14 03 	sts	0x0314, r1
	/******************* PERIPHERAL INIT  ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    211c:	08 95       	ret

0000211e <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	80 93 18 03 	sts	0x0318, r24
}
    2124:	08 95       	ret

00002126 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    2126:	10 92 18 03 	sts	0x0318, r1
}
    212a:	08 95       	ret

0000212c <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    212c:	20 91 14 03 	lds	r18, 0x0314
    2130:	30 91 15 03 	lds	r19, 0x0315
    2134:	c9 01       	movw	r24, r18
    2136:	65 e0       	ldi	r22, 0x05	; 5
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	0e 94 aa 19 	call	0x3354	; 0x3354 <__divmodhi4>
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	39 f4       	brne	.+14     	; 0x2150 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    2142:	c9 01       	movw	r24, r18
    2144:	6a e0       	ldi	r22, 0x0A	; 10
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	0e 94 aa 19 	call	0x3354	; 0x3354 <__divmodhi4>
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	09 f0       	breq	.+2      	; 0x2152 <_Z15System_Dispatchv+0x26>
    2150:	08 95       	ret
		{
			can_instance_timeslice();
    2152:	0e 94 19 09 	call	0x1232	; 0x1232 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    2156:	80 91 14 03 	lds	r24, 0x0314
    215a:	90 91 15 03 	lds	r25, 0x0315
    215e:	64 e1       	ldi	r22, 0x14	; 20
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	0e 94 aa 19 	call	0x3354	; 0x3354 <__divmodhi4>
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	99 f7       	brne	.-26     	; 0x2150 <_Z15System_Dispatchv+0x24>
			{	
				can_board_timeslice();
    216a:	0e 94 b7 0a 	call	0x156e	; 0x156e <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    216e:	80 91 14 03 	lds	r24, 0x0314
    2172:	90 91 15 03 	lds	r25, 0x0315
    2176:	62 e3       	ldi	r22, 0x32	; 50
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	0e 94 aa 19 	call	0x3354	; 0x3354 <__divmodhi4>
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	39 f7       	brne	.-50     	; 0x2150 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    2182:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_Z19led_timeslice_100msv>
    2186:	08 95       	ret

00002188 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    2188:	1f 92       	push	r1
    218a:	0f 92       	push	r0
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	0f 92       	push	r0
    2190:	11 24       	eor	r1, r1
    2192:	2f 93       	push	r18
    2194:	3f 93       	push	r19
    2196:	4f 93       	push	r20
    2198:	5f 93       	push	r21
    219a:	6f 93       	push	r22
    219c:	7f 93       	push	r23
    219e:	8f 93       	push	r24
    21a0:	9f 93       	push	r25
    21a2:	af 93       	push	r26
    21a4:	bf 93       	push	r27
    21a6:	ef 93       	push	r30
    21a8:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    21aa:	80 91 19 03 	lds	r24, 0x0319
    21ae:	88 23       	and	r24, r24
    21b0:	41 f1       	breq	.+80     	; 0x2202 <__vector_15+0x7a>
    21b2:	10 92 19 03 	sts	0x0319, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    21b6:	80 91 18 03 	lds	r24, 0x0318
    21ba:	88 23       	and	r24, r24
    21bc:	49 f1       	breq	.+82     	; 0x2210 <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    21be:	80 91 12 03 	lds	r24, 0x0312
    21c2:	90 91 13 03 	lds	r25, 0x0313
    21c6:	9c 01       	movw	r18, r24
    21c8:	2f 5f       	subi	r18, 0xFF	; 255
    21ca:	3f 4f       	sbci	r19, 0xFF	; 255
    21cc:	30 93 13 03 	sts	0x0313, r19
    21d0:	20 93 12 03 	sts	0x0312, r18
    21d4:	6a e0       	ldi	r22, 0x0A	; 10
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	0e 94 96 19 	call	0x332c	; 0x332c <__udivmodhi4>
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	31 f1       	breq	.+76     	; 0x222c <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    21e0:	ff 91       	pop	r31
    21e2:	ef 91       	pop	r30
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	7f 91       	pop	r23
    21ee:	6f 91       	pop	r22
    21f0:	5f 91       	pop	r21
    21f2:	4f 91       	pop	r20
    21f4:	3f 91       	pop	r19
    21f6:	2f 91       	pop	r18
    21f8:	0f 90       	pop	r0
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	0f 90       	pop	r0
    21fe:	1f 90       	pop	r1
    2200:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	80 93 19 03 	sts	0x0319, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    2208:	80 91 18 03 	lds	r24, 0x0318
    220c:	88 23       	and	r24, r24
    220e:	b9 f6       	brne	.-82     	; 0x21be <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    2210:	80 91 14 03 	lds	r24, 0x0314
    2214:	90 91 15 03 	lds	r25, 0x0315
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	90 93 15 03 	sts	0x0315, r25
    221e:	80 93 14 03 	sts	0x0314, r24
		System_Dispatch();
    2222:	0e 94 96 10 	call	0x212c	; 0x212c <_Z15System_Dispatchv>
		OS_Dispatch();
    2226:	0e 94 98 02 	call	0x530	; 0x530 <_Z11OS_Dispatchv>
    222a:	da cf       	rjmp	.-76     	; 0x21e0 <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    222c:	10 92 13 03 	sts	0x0313, r1
    2230:	10 92 12 03 	sts	0x0312, r1
			OS_Event_TIC_Counter++;
    2234:	80 91 14 03 	lds	r24, 0x0314
    2238:	90 91 15 03 	lds	r25, 0x0315
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	90 93 15 03 	sts	0x0315, r25
    2242:	80 93 14 03 	sts	0x0314, r24
			OS_Dispatch();
    2246:	0e 94 98 02 	call	0x530	; 0x530 <_Z11OS_Dispatchv>
    224a:	ca cf       	rjmp	.-108    	; 0x21e0 <__vector_15+0x58>

0000224c <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    2250:	93 e0       	ldi	r25, 0x03	; 3
    2252:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    2254:	9a ef       	ldi	r25, 0xFA	; 250
    2256:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    2258:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    225c:	10 92 15 03 	sts	0x0315, r1
    2260:	10 92 14 03 	sts	0x0314, r1
}
    2264:	08 95       	ret

00002266 <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    2266:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    2268:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    226a:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    226c:	85 81       	ldd	r24, Z+5	; 0x05
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	d9 f0       	breq	.+54     	; 0x22a8 <_Z27can_parse_configure_requestP4sCAN+0x42>
    2272:	83 30       	cpi	r24, 0x03	; 3
    2274:	71 f0       	breq	.+28     	; 0x2292 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	09 f0       	breq	.+2      	; 0x227c <_Z27can_parse_configure_requestP4sCAN+0x16>
    227a:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    227c:	89 2f       	mov	r24, r25
    227e:	80 95       	com	r24
    2280:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    2282:	92 23       	and	r25, r18
    2284:	20 91 1a 03 	lds	r18, 0x031A
    2288:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    228a:	89 23       	and	r24, r25
    228c:	80 93 1a 03 	sts	0x031A, r24
				 break;
    2290:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    2292:	89 2f       	mov	r24, r25
    2294:	80 95       	com	r24
    2296:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    2298:	92 23       	and	r25, r18
    229a:	20 91 1c 03 	lds	r18, 0x031C
    229e:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    22a0:	89 23       	and	r24, r25
    22a2:	80 93 1c 03 	sts	0x031C, r24
    22a6:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    22a8:	89 2f       	mov	r24, r25
    22aa:	80 95       	com	r24
    22ac:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    22ae:	92 23       	and	r25, r18
    22b0:	20 91 1b 03 	lds	r18, 0x031B
    22b4:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    22b6:	89 23       	and	r24, r25
    22b8:	80 93 1b 03 	sts	0x031B, r24
				 break;
    22bc:	08 95       	ret

000022be <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    22be:	10 92 1a 03 	sts	0x031A, r1
	config_byte_2 = 0;		// no reports
    22c2:	10 92 1b 03 	sts	0x031B, r1
	config_byte_3 = 0;		// 
    22c6:	10 92 1c 03 	sts	0x031C, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    22ca:	82 e4       	ldi	r24, 0x42	; 66
    22cc:	80 93 1d 03 	sts	0x031D, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    22d0:	10 92 9f 02 	sts	0x029F, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    22d4:	80 91 1e 03 	lds	r24, 0x031E
    22d8:	81 60       	ori	r24, 0x01	; 1
    22da:	80 93 1e 03 	sts	0x031E, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    22de:	10 92 9e 02 	sts	0x029E, r1
	MyInstance 		 = 0x98;
    22e2:	88 e9       	ldi	r24, 0x98	; 152
    22e4:	80 93 9d 02 	sts	0x029D, r24

	//led_on(4);
}
    22e8:	08 95       	ret

000022ea <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    22ea:	80 91 1e 03 	lds	r24, 0x031E
							// and b/c it's better the user knows when it's read.
	//led_off(4);
	
	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    22ee:	80 fd       	sbrc	r24, 0
    22f0:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    22f2:	0e 94 5f 11 	call	0x22be	; 0x22be <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    22f6:	0e 94 a1 01 	call	0x342	; 0x342 <_Z25app_default_configurationv>
    22fa:	08 95       	ret

000022fc <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number( byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    22fc:	20 91 9d 02 	lds	r18, 0x029D
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2300:	f9 99       	sbic	0x1f, 1	; 31
    2302:	fe cf       	rjmp	.-4      	; 0x2300 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2304:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2306:	92 bd       	out	0x22, r25	; 34
    2308:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    230a:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	fa 9a       	sbi	0x1f, 2	; 31
    2312:	f9 9a       	sbi	0x1f, 1	; 31
    2314:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    2316:	9c 01       	movw	r18, r24
    2318:	2f 5f       	subi	r18, 0xFF	; 255
    231a:	3f 4f       	sbci	r19, 0xFF	; 255
}
    231c:	c9 01       	movw	r24, r18
    231e:	08 95       	ret

00002320 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2320:	f9 99       	sbic	0x1f, 1	; 31
    2322:	fe cf       	rjmp	.-4      	; 0x2320 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2324:	92 bd       	out	0x22, r25	; 34
    2326:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2328:	f8 9a       	sbi	0x1f, 0	; 31
    232a:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    232c:	20 93 9d 02 	sts	0x029D, r18
    return mEEPROMAddress+1;    
    2330:	9c 01       	movw	r18, r24
    2332:	2f 5f       	subi	r18, 0xFF	; 255
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2336:	c9 01       	movw	r24, r18
    2338:	08 95       	ret

0000233a <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    233a:	20 91 9e 02 	lds	r18, 0x029E
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    233e:	f9 99       	sbic	0x1f, 1	; 31
    2340:	fe cf       	rjmp	.-4      	; 0x233e <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2342:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2344:	92 bd       	out	0x22, r25	; 34
    2346:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2348:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	fa 9a       	sbi	0x1f, 2	; 31
    2350:	f9 9a       	sbi	0x1f, 1	; 31
    2352:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    2354:	9c 01       	movw	r18, r24
    2356:	2f 5f       	subi	r18, 0xFF	; 255
    2358:	3f 4f       	sbci	r19, 0xFF	; 255
}
    235a:	c9 01       	movw	r24, r18
    235c:	08 95       	ret

0000235e <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    235e:	f9 99       	sbic	0x1f, 1	; 31
    2360:	fe cf       	rjmp	.-4      	; 0x235e <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2362:	92 bd       	out	0x22, r25	; 34
    2364:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2366:	f8 9a       	sbi	0x1f, 0	; 31
    2368:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    236a:	20 93 9e 02 	sts	0x029E, r18
    return mEEPROMAddress+1;
    236e:	9c 01       	movw	r18, r24
    2370:	2f 5f       	subi	r18, 0xFF	; 255
    2372:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2374:	c9 01       	movw	r24, r18
    2376:	08 95       	ret

00002378 <_Z25save_configuration_eepromPh>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	byte* address = addr;
	eeprom_write_byte( addr++, ~config_byte_1 );
    2378:	9c 01       	movw	r18, r24
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	40 91 1a 03 	lds	r20, 0x031A
    2382:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2384:	f9 99       	sbic	0x1f, 1	; 31
    2386:	fe cf       	rjmp	.-4      	; 0x2384 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2388:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    238a:	92 bd       	out	0x22, r25	; 34
    238c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    238e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	fa 9a       	sbi	0x1f, 2	; 31
    2396:	f9 9a       	sbi	0x1f, 1	; 31
    2398:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    239a:	c9 01       	movw	r24, r18
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	40 91 1b 03 	lds	r20, 0x031B
    23a2:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    23a4:	f9 99       	sbic	0x1f, 1	; 31
    23a6:	fe cf       	rjmp	.-4      	; 0x23a4 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    23a8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23aa:	32 bd       	out	0x22, r19	; 34
    23ac:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    23ae:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	fa 9a       	sbi	0x1f, 2	; 31
    23b6:	f9 9a       	sbi	0x1f, 1	; 31
    23b8:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    23ba:	9c 01       	movw	r18, r24
    23bc:	2f 5f       	subi	r18, 0xFF	; 255
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	40 91 1c 03 	lds	r20, 0x031C
    23c4:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    23c6:	f9 99       	sbic	0x1f, 1	; 31
    23c8:	fe cf       	rjmp	.-4      	; 0x23c6 <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    23ca:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23cc:	92 bd       	out	0x22, r25	; 34
    23ce:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    23d0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	fa 9a       	sbi	0x1f, 2	; 31
    23d8:	f9 9a       	sbi	0x1f, 1	; 31
    23da:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    23dc:	c9 01       	movw	r24, r18
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	40 91 1d 03 	lds	r20, 0x031D
    23e4:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    23e6:	f9 99       	sbic	0x1f, 1	; 31
    23e8:	fe cf       	rjmp	.-4      	; 0x23e6 <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    23ea:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23ec:	32 bd       	out	0x22, r19	; 34
    23ee:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    23f0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	fa 9a       	sbi	0x1f, 2	; 31
    23f8:	f9 9a       	sbi	0x1f, 1	; 31
    23fa:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    23fc:	9c 01       	movw	r18, r24
    23fe:	2f 5f       	subi	r18, 0xFF	; 255
    2400:	3f 4f       	sbci	r19, 0xFF	; 255
    2402:	40 91 1e 03 	lds	r20, 0x031E
    2406:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2408:	f9 99       	sbic	0x1f, 1	; 31
    240a:	fe cf       	rjmp	.-4      	; 0x2408 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    240c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    240e:	92 bd       	out	0x22, r25	; 34
    2410:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2412:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	fa 9a       	sbi	0x1f, 2	; 31
    241a:	f9 9a       	sbi	0x1f, 1	; 31
    241c:	0f be       	out	0x3f, r0	; 63
	okay_to_read_cal = true;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 93 1c 02 	sts	0x021C, r24
	return addr;
}
    2424:	c9 01       	movw	r24, r18
    2426:	08 95       	ret

00002428 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    2430:	0e 94 9d 11 	call	0x233a	; 0x233a <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    2434:	0e 94 bc 11 	call	0x2378	; 0x2378 <_Z25save_configuration_eepromPh>
}
    2438:	08 95       	ret

0000243a <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    243a:	f8 94       	cli
	return save_configuration();
    243c:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z18save_configurationv>
	sei();
}
    2440:	08 95       	ret

00002442 <_Z21make_system_new_boardt>:
	Caller:		None found in BigMotorEn.
 */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    2442:	22 e1       	ldi	r18, 0x12	; 18
    2444:	84 33       	cpi	r24, 0x34	; 52
    2446:	92 07       	cpc	r25, r18
    2448:	11 f0       	breq	.+4      	; 0x244e <_Z21make_system_new_boardt+0xc>
		  0 = bad password 
	Caller:		None found in BigMotorEn.
 */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    244a:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    244c:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    244e:	80 91 1e 03 	lds	r24, 0x031E
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	80 93 1e 03 	sts	0x031E, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    2458:	f8 94       	cli
    245a:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z18save_configurationv>
    245e:	78 94       	sei
		retval = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	08 95       	ret

00002464 <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    2464:	9c 01       	movw	r18, r24
    2466:	2f 5f       	subi	r18, 0xFF	; 255
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    246a:	f9 99       	sbic	0x1f, 1	; 31
    246c:	fe cf       	rjmp	.-4      	; 0x246a <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    246e:	92 bd       	out	0x22, r25	; 34
    2470:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2472:	f8 9a       	sbi	0x1f, 0	; 31
    2474:	80 b5       	in	r24, 0x20	; 32
    2476:	80 95       	com	r24
    2478:	80 93 1a 03 	sts	0x031A, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    247c:	c9 01       	movw	r24, r18
    247e:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2480:	f9 99       	sbic	0x1f, 1	; 31
    2482:	fe cf       	rjmp	.-4      	; 0x2480 <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2484:	32 bd       	out	0x22, r19	; 34
    2486:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2488:	f8 9a       	sbi	0x1f, 0	; 31
    248a:	20 b5       	in	r18, 0x20	; 32
    248c:	20 95       	com	r18
    248e:	20 93 1b 03 	sts	0x031B, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    2492:	9c 01       	movw	r18, r24
    2494:	2f 5f       	subi	r18, 0xFF	; 255
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2498:	f9 99       	sbic	0x1f, 1	; 31
    249a:	fe cf       	rjmp	.-4      	; 0x2498 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    249c:	92 bd       	out	0x22, r25	; 34
    249e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    24a0:	f8 9a       	sbi	0x1f, 0	; 31
    24a2:	80 b5       	in	r24, 0x20	; 32
    24a4:	80 95       	com	r24
    24a6:	80 93 1c 03 	sts	0x031C, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    24aa:	c9 01       	movw	r24, r18
    24ac:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    24ae:	f9 99       	sbic	0x1f, 1	; 31
    24b0:	fe cf       	rjmp	.-4      	; 0x24ae <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    24b2:	32 bd       	out	0x22, r19	; 34
    24b4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    24b6:	f8 9a       	sbi	0x1f, 0	; 31
    24b8:	20 b5       	in	r18, 0x20	; 32
    24ba:	20 95       	com	r18
    24bc:	20 93 1d 03 	sts	0x031D, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    24c0:	9c 01       	movw	r18, r24
    24c2:	2f 5f       	subi	r18, 0xFF	; 255
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    24c6:	f9 99       	sbic	0x1f, 1	; 31
    24c8:	fe cf       	rjmp	.-4      	; 0x24c6 <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    24ca:	92 bd       	out	0x22, r25	; 34
    24cc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    24ce:	f8 9a       	sbi	0x1f, 0	; 31
    24d0:	80 b5       	in	r24, 0x20	; 32
    24d2:	80 95       	com	r24
    24d4:	80 93 1e 03 	sts	0x031E, r24
	return addr;
}
    24d8:	c9 01       	movw	r24, r18
    24da:	08 95       	ret

000024dc <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 90 11 	call	0x2320	; 0x2320 <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    24e4:	0e 94 af 11 	call	0x235e	; 0x235e <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    24e8:	0e 94 32 12 	call	0x2464	; 0x2464 <_Z25read_configuration_eepromPh>
}
    24ec:	08 95       	ret

000024ee <__fixunssfsi>:
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	7b 01       	movw	r14, r22
    24f8:	8c 01       	movw	r16, r24
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	5f e4       	ldi	r21, 0x4F	; 79
    2502:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__gesf2>
    2506:	87 fd       	sbrc	r24, 7
    2508:	11 c0       	rjmp	.+34     	; 0x252c <__fixunssfsi+0x3e>
    250a:	c8 01       	movw	r24, r16
    250c:	b7 01       	movw	r22, r14
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	5f e4       	ldi	r21, 0x4F	; 79
    2516:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    251a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__fixsfsi>
    251e:	9b 01       	movw	r18, r22
    2520:	ac 01       	movw	r20, r24
    2522:	20 50       	subi	r18, 0x00	; 0
    2524:	30 40       	sbci	r19, 0x00	; 0
    2526:	40 40       	sbci	r20, 0x00	; 0
    2528:	50 48       	sbci	r21, 0x80	; 128
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <__fixunssfsi+0x4a>
    252c:	c8 01       	movw	r24, r16
    252e:	b7 01       	movw	r22, r14
    2530:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__fixsfsi>
    2534:	9b 01       	movw	r18, r22
    2536:	ac 01       	movw	r20, r24
    2538:	b9 01       	movw	r22, r18
    253a:	ca 01       	movw	r24, r20
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	08 95       	ret

00002546 <_fpadd_parts>:
    2546:	a0 e0       	ldi	r26, 0x00	; 0
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e9 ea       	ldi	r30, 0xA9	; 169
    254c:	f2 e1       	ldi	r31, 0x12	; 18
    254e:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x8>
    2552:	fc 01       	movw	r30, r24
    2554:	ea 01       	movw	r28, r20
    2556:	80 81       	ld	r24, Z
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	08 f4       	brcc	.+2      	; 0x255e <_fpadd_parts+0x18>
    255c:	38 c1       	rjmp	.+624    	; 0x27ce <_fpadd_parts+0x288>
    255e:	db 01       	movw	r26, r22
    2560:	9c 91       	ld	r25, X
    2562:	92 30       	cpi	r25, 0x02	; 2
    2564:	08 f4       	brcc	.+2      	; 0x2568 <_fpadd_parts+0x22>
    2566:	30 c1       	rjmp	.+608    	; 0x27c8 <_fpadd_parts+0x282>
    2568:	84 30       	cpi	r24, 0x04	; 4
    256a:	59 f4       	brne	.+22     	; 0x2582 <_fpadd_parts+0x3c>
    256c:	94 30       	cpi	r25, 0x04	; 4
    256e:	09 f0       	breq	.+2      	; 0x2572 <_fpadd_parts+0x2c>
    2570:	2e c1       	rjmp	.+604    	; 0x27ce <_fpadd_parts+0x288>
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	11 96       	adiw	r26, 0x01	; 1
    2576:	8c 91       	ld	r24, X
    2578:	11 97       	sbiw	r26, 0x01	; 1
    257a:	98 17       	cp	r25, r24
    257c:	09 f0       	breq	.+2      	; 0x2580 <_fpadd_parts+0x3a>
    257e:	21 c1       	rjmp	.+578    	; 0x27c2 <_fpadd_parts+0x27c>
    2580:	26 c1       	rjmp	.+588    	; 0x27ce <_fpadd_parts+0x288>
    2582:	94 30       	cpi	r25, 0x04	; 4
    2584:	09 f4       	brne	.+2      	; 0x2588 <_fpadd_parts+0x42>
    2586:	20 c1       	rjmp	.+576    	; 0x27c8 <_fpadd_parts+0x282>
    2588:	92 30       	cpi	r25, 0x02	; 2
    258a:	b1 f4       	brne	.+44     	; 0x25b8 <_fpadd_parts+0x72>
    258c:	82 30       	cpi	r24, 0x02	; 2
    258e:	09 f0       	breq	.+2      	; 0x2592 <_fpadd_parts+0x4c>
    2590:	1e c1       	rjmp	.+572    	; 0x27ce <_fpadd_parts+0x288>
    2592:	ca 01       	movw	r24, r20
    2594:	af 01       	movw	r20, r30
    2596:	28 e0       	ldi	r18, 0x08	; 8
    2598:	da 01       	movw	r26, r20
    259a:	0d 90       	ld	r0, X+
    259c:	ad 01       	movw	r20, r26
    259e:	dc 01       	movw	r26, r24
    25a0:	0d 92       	st	X+, r0
    25a2:	cd 01       	movw	r24, r26
    25a4:	21 50       	subi	r18, 0x01	; 1
    25a6:	c1 f7       	brne	.-16     	; 0x2598 <_fpadd_parts+0x52>
    25a8:	db 01       	movw	r26, r22
    25aa:	11 96       	adiw	r26, 0x01	; 1
    25ac:	8c 91       	ld	r24, X
    25ae:	11 97       	sbiw	r26, 0x01	; 1
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	89 23       	and	r24, r25
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	0a c1       	rjmp	.+532    	; 0x27cc <_fpadd_parts+0x286>
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	09 f4       	brne	.+2      	; 0x25be <_fpadd_parts+0x78>
    25bc:	05 c1       	rjmp	.+522    	; 0x27c8 <_fpadd_parts+0x282>
    25be:	c2 80       	ldd	r12, Z+2	; 0x02
    25c0:	d3 80       	ldd	r13, Z+3	; 0x03
    25c2:	db 01       	movw	r26, r22
    25c4:	12 96       	adiw	r26, 0x02	; 2
    25c6:	6d 90       	ld	r6, X+
    25c8:	7c 90       	ld	r7, X
    25ca:	13 97       	sbiw	r26, 0x03	; 3
    25cc:	24 81       	ldd	r18, Z+4	; 0x04
    25ce:	35 81       	ldd	r19, Z+5	; 0x05
    25d0:	46 81       	ldd	r20, Z+6	; 0x06
    25d2:	57 81       	ldd	r21, Z+7	; 0x07
    25d4:	14 96       	adiw	r26, 0x04	; 4
    25d6:	ed 90       	ld	r14, X+
    25d8:	fd 90       	ld	r15, X+
    25da:	0d 91       	ld	r16, X+
    25dc:	1c 91       	ld	r17, X
    25de:	17 97       	sbiw	r26, 0x07	; 7
    25e0:	c6 01       	movw	r24, r12
    25e2:	86 19       	sub	r24, r6
    25e4:	97 09       	sbc	r25, r7
    25e6:	5c 01       	movw	r10, r24
    25e8:	97 ff       	sbrs	r25, 7
    25ea:	04 c0       	rjmp	.+8      	; 0x25f4 <_fpadd_parts+0xae>
    25ec:	aa 24       	eor	r10, r10
    25ee:	bb 24       	eor	r11, r11
    25f0:	a8 1a       	sub	r10, r24
    25f2:	b9 0a       	sbc	r11, r25
    25f4:	b0 e2       	ldi	r27, 0x20	; 32
    25f6:	ab 16       	cp	r10, r27
    25f8:	b1 04       	cpc	r11, r1
    25fa:	0c f0       	brlt	.+2      	; 0x25fe <_fpadd_parts+0xb8>
    25fc:	61 c0       	rjmp	.+194    	; 0x26c0 <_fpadd_parts+0x17a>
    25fe:	18 16       	cp	r1, r24
    2600:	19 06       	cpc	r1, r25
    2602:	6c f5       	brge	.+90     	; 0x265e <_fpadd_parts+0x118>
    2604:	37 01       	movw	r6, r14
    2606:	48 01       	movw	r8, r16
    2608:	0a 2c       	mov	r0, r10
    260a:	04 c0       	rjmp	.+8      	; 0x2614 <_fpadd_parts+0xce>
    260c:	96 94       	lsr	r9
    260e:	87 94       	ror	r8
    2610:	77 94       	ror	r7
    2612:	67 94       	ror	r6
    2614:	0a 94       	dec	r0
    2616:	d2 f7       	brpl	.-12     	; 0x260c <_fpadd_parts+0xc6>
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	a0 e0       	ldi	r26, 0x00	; 0
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	0a 2c       	mov	r0, r10
    2622:	04 c0       	rjmp	.+8      	; 0x262c <_fpadd_parts+0xe6>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	aa 1f       	adc	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	0a 94       	dec	r0
    262e:	d2 f7       	brpl	.-12     	; 0x2624 <_fpadd_parts+0xde>
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	a1 09       	sbc	r26, r1
    2634:	b1 09       	sbc	r27, r1
    2636:	8e 21       	and	r24, r14
    2638:	9f 21       	and	r25, r15
    263a:	a0 23       	and	r26, r16
    263c:	b1 23       	and	r27, r17
    263e:	ee 24       	eor	r14, r14
    2640:	ff 24       	eor	r15, r15
    2642:	87 01       	movw	r16, r14
    2644:	e3 94       	inc	r14
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	a1 05       	cpc	r26, r1
    264a:	b1 05       	cpc	r27, r1
    264c:	19 f4       	brne	.+6      	; 0x2654 <_fpadd_parts+0x10e>
    264e:	ee 24       	eor	r14, r14
    2650:	ff 24       	eor	r15, r15
    2652:	87 01       	movw	r16, r14
    2654:	e6 28       	or	r14, r6
    2656:	f7 28       	or	r15, r7
    2658:	08 29       	or	r16, r8
    265a:	19 29       	or	r17, r9
    265c:	3c c0       	rjmp	.+120    	; 0x26d6 <_fpadd_parts+0x190>
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	d1 f1       	breq	.+116    	; 0x26d6 <_fpadd_parts+0x190>
    2662:	ca 0c       	add	r12, r10
    2664:	db 1c       	adc	r13, r11
    2666:	39 01       	movw	r6, r18
    2668:	4a 01       	movw	r8, r20
    266a:	0a 2c       	mov	r0, r10
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <_fpadd_parts+0x130>
    266e:	96 94       	lsr	r9
    2670:	87 94       	ror	r8
    2672:	77 94       	ror	r7
    2674:	67 94       	ror	r6
    2676:	0a 94       	dec	r0
    2678:	d2 f7       	brpl	.-12     	; 0x266e <_fpadd_parts+0x128>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	0a 2c       	mov	r0, r10
    2684:	04 c0       	rjmp	.+8      	; 0x268e <_fpadd_parts+0x148>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	aa 1f       	adc	r26, r26
    268c:	bb 1f       	adc	r27, r27
    268e:	0a 94       	dec	r0
    2690:	d2 f7       	brpl	.-12     	; 0x2686 <_fpadd_parts+0x140>
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	a1 09       	sbc	r26, r1
    2696:	b1 09       	sbc	r27, r1
    2698:	82 23       	and	r24, r18
    269a:	93 23       	and	r25, r19
    269c:	a4 23       	and	r26, r20
    269e:	b5 23       	and	r27, r21
    26a0:	21 e0       	ldi	r18, 0x01	; 1
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	a1 05       	cpc	r26, r1
    26ac:	b1 05       	cpc	r27, r1
    26ae:	19 f4       	brne	.+6      	; 0x26b6 <_fpadd_parts+0x170>
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	a9 01       	movw	r20, r18
    26b6:	26 29       	or	r18, r6
    26b8:	37 29       	or	r19, r7
    26ba:	48 29       	or	r20, r8
    26bc:	59 29       	or	r21, r9
    26be:	0b c0       	rjmp	.+22     	; 0x26d6 <_fpadd_parts+0x190>
    26c0:	6c 14       	cp	r6, r12
    26c2:	7d 04       	cpc	r7, r13
    26c4:	24 f4       	brge	.+8      	; 0x26ce <_fpadd_parts+0x188>
    26c6:	ee 24       	eor	r14, r14
    26c8:	ff 24       	eor	r15, r15
    26ca:	87 01       	movw	r16, r14
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <_fpadd_parts+0x190>
    26ce:	63 01       	movw	r12, r6
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	a9 01       	movw	r20, r18
    26d6:	81 81       	ldd	r24, Z+1	; 0x01
    26d8:	fb 01       	movw	r30, r22
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	89 17       	cp	r24, r25
    26de:	09 f4       	brne	.+2      	; 0x26e2 <_fpadd_parts+0x19c>
    26e0:	45 c0       	rjmp	.+138    	; 0x276c <_fpadd_parts+0x226>
    26e2:	88 23       	and	r24, r24
    26e4:	49 f0       	breq	.+18     	; 0x26f8 <_fpadd_parts+0x1b2>
    26e6:	d8 01       	movw	r26, r16
    26e8:	c7 01       	movw	r24, r14
    26ea:	82 1b       	sub	r24, r18
    26ec:	93 0b       	sbc	r25, r19
    26ee:	a4 0b       	sbc	r26, r20
    26f0:	b5 0b       	sbc	r27, r21
    26f2:	9c 01       	movw	r18, r24
    26f4:	ad 01       	movw	r20, r26
    26f6:	04 c0       	rjmp	.+8      	; 0x2700 <_fpadd_parts+0x1ba>
    26f8:	2e 19       	sub	r18, r14
    26fa:	3f 09       	sbc	r19, r15
    26fc:	40 0b       	sbc	r20, r16
    26fe:	51 0b       	sbc	r21, r17
    2700:	57 fd       	sbrc	r21, 7
    2702:	04 c0       	rjmp	.+8      	; 0x270c <_fpadd_parts+0x1c6>
    2704:	19 82       	std	Y+1, r1	; 0x01
    2706:	db 82       	std	Y+3, r13	; 0x03
    2708:	ca 82       	std	Y+2, r12	; 0x02
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <_fpadd_parts+0x1dc>
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	db 82       	std	Y+3, r13	; 0x03
    2712:	ca 82       	std	Y+2, r12	; 0x02
    2714:	50 95       	com	r21
    2716:	40 95       	com	r20
    2718:	30 95       	com	r19
    271a:	21 95       	neg	r18
    271c:	3f 4f       	sbci	r19, 0xFF	; 255
    271e:	4f 4f       	sbci	r20, 0xFF	; 255
    2720:	5f 4f       	sbci	r21, 0xFF	; 255
    2722:	2c 83       	std	Y+4, r18	; 0x04
    2724:	3d 83       	std	Y+5, r19	; 0x05
    2726:	4e 83       	std	Y+6, r20	; 0x06
    2728:	5f 83       	std	Y+7, r21	; 0x07
    272a:	0d c0       	rjmp	.+26     	; 0x2746 <_fpadd_parts+0x200>
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	aa 1f       	adc	r26, r26
    2732:	bb 1f       	adc	r27, r27
    2734:	8c 83       	std	Y+4, r24	; 0x04
    2736:	9d 83       	std	Y+5, r25	; 0x05
    2738:	ae 83       	std	Y+6, r26	; 0x06
    273a:	bf 83       	std	Y+7, r27	; 0x07
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	9b 81       	ldd	r25, Y+3	; 0x03
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9b 83       	std	Y+3, r25	; 0x03
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	8c 81       	ldd	r24, Y+4	; 0x04
    2748:	9d 81       	ldd	r25, Y+5	; 0x05
    274a:	ae 81       	ldd	r26, Y+6	; 0x06
    274c:	bf 81       	ldd	r27, Y+7	; 0x07
    274e:	9c 01       	movw	r18, r24
    2750:	ad 01       	movw	r20, r26
    2752:	21 50       	subi	r18, 0x01	; 1
    2754:	30 40       	sbci	r19, 0x00	; 0
    2756:	40 40       	sbci	r20, 0x00	; 0
    2758:	50 40       	sbci	r21, 0x00	; 0
    275a:	2f 3f       	cpi	r18, 0xFF	; 255
    275c:	ef ef       	ldi	r30, 0xFF	; 255
    275e:	3e 07       	cpc	r19, r30
    2760:	ef ef       	ldi	r30, 0xFF	; 255
    2762:	4e 07       	cpc	r20, r30
    2764:	ef e3       	ldi	r30, 0x3F	; 63
    2766:	5e 07       	cpc	r21, r30
    2768:	08 f3       	brcs	.-62     	; 0x272c <_fpadd_parts+0x1e6>
    276a:	0b c0       	rjmp	.+22     	; 0x2782 <_fpadd_parts+0x23c>
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	db 82       	std	Y+3, r13	; 0x03
    2770:	ca 82       	std	Y+2, r12	; 0x02
    2772:	2e 0d       	add	r18, r14
    2774:	3f 1d       	adc	r19, r15
    2776:	40 1f       	adc	r20, r16
    2778:	51 1f       	adc	r21, r17
    277a:	2c 83       	std	Y+4, r18	; 0x04
    277c:	3d 83       	std	Y+5, r19	; 0x05
    277e:	4e 83       	std	Y+6, r20	; 0x06
    2780:	5f 83       	std	Y+7, r21	; 0x07
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	88 83       	st	Y, r24
    2786:	2c 81       	ldd	r18, Y+4	; 0x04
    2788:	3d 81       	ldd	r19, Y+5	; 0x05
    278a:	4e 81       	ldd	r20, Y+6	; 0x06
    278c:	5f 81       	ldd	r21, Y+7	; 0x07
    278e:	57 ff       	sbrs	r21, 7
    2790:	1d c0       	rjmp	.+58     	; 0x27cc <_fpadd_parts+0x286>
    2792:	da 01       	movw	r26, r20
    2794:	c9 01       	movw	r24, r18
    2796:	81 70       	andi	r24, 0x01	; 1
    2798:	90 70       	andi	r25, 0x00	; 0
    279a:	a0 70       	andi	r26, 0x00	; 0
    279c:	b0 70       	andi	r27, 0x00	; 0
    279e:	56 95       	lsr	r21
    27a0:	47 95       	ror	r20
    27a2:	37 95       	ror	r19
    27a4:	27 95       	ror	r18
    27a6:	82 2b       	or	r24, r18
    27a8:	93 2b       	or	r25, r19
    27aa:	a4 2b       	or	r26, r20
    27ac:	b5 2b       	or	r27, r21
    27ae:	8c 83       	std	Y+4, r24	; 0x04
    27b0:	9d 83       	std	Y+5, r25	; 0x05
    27b2:	ae 83       	std	Y+6, r26	; 0x06
    27b4:	bf 83       	std	Y+7, r27	; 0x07
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	8a 83       	std	Y+2, r24	; 0x02
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <_fpadd_parts+0x286>
    27c2:	e3 e1       	ldi	r30, 0x13	; 19
    27c4:	f1 e0       	ldi	r31, 0x01	; 1
    27c6:	03 c0       	rjmp	.+6      	; 0x27ce <_fpadd_parts+0x288>
    27c8:	fb 01       	movw	r30, r22
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <_fpadd_parts+0x288>
    27cc:	fe 01       	movw	r30, r28
    27ce:	cf 01       	movw	r24, r30
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	ee e0       	ldi	r30, 0x0E	; 14
    27d6:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x8>

000027da <__addsf3>:
    27da:	a0 e2       	ldi	r26, 0x20	; 32
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e3 ef       	ldi	r30, 0xF3	; 243
    27e0:	f3 e1       	ldi	r31, 0x13	; 19
    27e2:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__prologue_saves__+0x18>
    27e6:	69 83       	std	Y+1, r22	; 0x01
    27e8:	7a 83       	std	Y+2, r23	; 0x02
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	2d 83       	std	Y+5, r18	; 0x05
    27f0:	3e 83       	std	Y+6, r19	; 0x06
    27f2:	4f 83       	std	Y+7, r20	; 0x07
    27f4:	58 87       	std	Y+8, r21	; 0x08
    27f6:	89 e0       	ldi	r24, 0x09	; 9
    27f8:	e8 2e       	mov	r14, r24
    27fa:	f1 2c       	mov	r15, r1
    27fc:	ec 0e       	add	r14, r28
    27fe:	fd 1e       	adc	r15, r29
    2800:	ce 01       	movw	r24, r28
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	b7 01       	movw	r22, r14
    2806:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    280a:	8e 01       	movw	r16, r28
    280c:	0f 5e       	subi	r16, 0xEF	; 239
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	ce 01       	movw	r24, r28
    2812:	05 96       	adiw	r24, 0x05	; 5
    2814:	b8 01       	movw	r22, r16
    2816:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    281a:	c7 01       	movw	r24, r14
    281c:	b8 01       	movw	r22, r16
    281e:	ae 01       	movw	r20, r28
    2820:	47 5e       	subi	r20, 0xE7	; 231
    2822:	5f 4f       	sbci	r21, 0xFF	; 255
    2824:	0e 94 a3 12 	call	0x2546	; 0x2546 <_fpadd_parts>
    2828:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    282c:	a0 96       	adiw	r28, 0x20	; 32
    282e:	e6 e0       	ldi	r30, 0x06	; 6
    2830:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x18>

00002834 <__subsf3>:
    2834:	a0 e2       	ldi	r26, 0x20	; 32
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e0 e2       	ldi	r30, 0x20	; 32
    283a:	f4 e1       	ldi	r31, 0x14	; 20
    283c:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__prologue_saves__+0x18>
    2840:	69 83       	std	Y+1, r22	; 0x01
    2842:	7a 83       	std	Y+2, r23	; 0x02
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	9c 83       	std	Y+4, r25	; 0x04
    2848:	2d 83       	std	Y+5, r18	; 0x05
    284a:	3e 83       	std	Y+6, r19	; 0x06
    284c:	4f 83       	std	Y+7, r20	; 0x07
    284e:	58 87       	std	Y+8, r21	; 0x08
    2850:	8e 01       	movw	r16, r28
    2852:	07 5f       	subi	r16, 0xF7	; 247
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	b8 01       	movw	r22, r16
    285c:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2860:	91 e1       	ldi	r25, 0x11	; 17
    2862:	e9 2e       	mov	r14, r25
    2864:	f1 2c       	mov	r15, r1
    2866:	ec 0e       	add	r14, r28
    2868:	fd 1e       	adc	r15, r29
    286a:	ce 01       	movw	r24, r28
    286c:	05 96       	adiw	r24, 0x05	; 5
    286e:	b7 01       	movw	r22, r14
    2870:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2874:	8a 89       	ldd	r24, Y+18	; 0x12
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	89 27       	eor	r24, r25
    287a:	8a 8b       	std	Y+18, r24	; 0x12
    287c:	c8 01       	movw	r24, r16
    287e:	b7 01       	movw	r22, r14
    2880:	ae 01       	movw	r20, r28
    2882:	47 5e       	subi	r20, 0xE7	; 231
    2884:	5f 4f       	sbci	r21, 0xFF	; 255
    2886:	0e 94 a3 12 	call	0x2546	; 0x2546 <_fpadd_parts>
    288a:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    288e:	a0 96       	adiw	r28, 0x20	; 32
    2890:	e6 e0       	ldi	r30, 0x06	; 6
    2892:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x18>

00002896 <__mulsf3>:
    2896:	a0 e2       	ldi	r26, 0x20	; 32
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e1 e5       	ldi	r30, 0x51	; 81
    289c:	f4 e1       	ldi	r31, 0x14	; 20
    289e:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__prologue_saves__>
    28a2:	69 83       	std	Y+1, r22	; 0x01
    28a4:	7a 83       	std	Y+2, r23	; 0x02
    28a6:	8b 83       	std	Y+3, r24	; 0x03
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	2d 83       	std	Y+5, r18	; 0x05
    28ac:	3e 83       	std	Y+6, r19	; 0x06
    28ae:	4f 83       	std	Y+7, r20	; 0x07
    28b0:	58 87       	std	Y+8, r21	; 0x08
    28b2:	ce 01       	movw	r24, r28
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	be 01       	movw	r22, r28
    28b8:	67 5f       	subi	r22, 0xF7	; 247
    28ba:	7f 4f       	sbci	r23, 0xFF	; 255
    28bc:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    28c0:	ce 01       	movw	r24, r28
    28c2:	05 96       	adiw	r24, 0x05	; 5
    28c4:	be 01       	movw	r22, r28
    28c6:	6f 5e       	subi	r22, 0xEF	; 239
    28c8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ca:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    28ce:	99 85       	ldd	r25, Y+9	; 0x09
    28d0:	92 30       	cpi	r25, 0x02	; 2
    28d2:	78 f0       	brcs	.+30     	; 0x28f2 <__mulsf3+0x5c>
    28d4:	89 89       	ldd	r24, Y+17	; 0x11
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	c0 f0       	brcs	.+48     	; 0x290a <__mulsf3+0x74>
    28da:	94 30       	cpi	r25, 0x04	; 4
    28dc:	19 f4       	brne	.+6      	; 0x28e4 <__mulsf3+0x4e>
    28de:	82 30       	cpi	r24, 0x02	; 2
    28e0:	41 f4       	brne	.+16     	; 0x28f2 <__mulsf3+0x5c>
    28e2:	cb c0       	rjmp	.+406    	; 0x2a7a <__mulsf3+0x1e4>
    28e4:	84 30       	cpi	r24, 0x04	; 4
    28e6:	19 f4       	brne	.+6      	; 0x28ee <__mulsf3+0x58>
    28e8:	92 30       	cpi	r25, 0x02	; 2
    28ea:	79 f4       	brne	.+30     	; 0x290a <__mulsf3+0x74>
    28ec:	c6 c0       	rjmp	.+396    	; 0x2a7a <__mulsf3+0x1e4>
    28ee:	92 30       	cpi	r25, 0x02	; 2
    28f0:	51 f4       	brne	.+20     	; 0x2906 <__mulsf3+0x70>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    28f6:	9a 89       	ldd	r25, Y+18	; 0x12
    28f8:	29 17       	cp	r18, r25
    28fa:	09 f4       	brne	.+2      	; 0x28fe <__mulsf3+0x68>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	8a 87       	std	Y+10, r24	; 0x0a
    2900:	ce 01       	movw	r24, r28
    2902:	09 96       	adiw	r24, 0x09	; 9
    2904:	bc c0       	rjmp	.+376    	; 0x2a7e <__mulsf3+0x1e8>
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	51 f4       	brne	.+20     	; 0x291e <__mulsf3+0x88>
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	2a 85       	ldd	r18, Y+10	; 0x0a
    290e:	9a 89       	ldd	r25, Y+18	; 0x12
    2910:	29 17       	cp	r18, r25
    2912:	09 f4       	brne	.+2      	; 0x2916 <__mulsf3+0x80>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	8a 8b       	std	Y+18, r24	; 0x12
    2918:	ce 01       	movw	r24, r28
    291a:	41 96       	adiw	r24, 0x11	; 17
    291c:	b0 c0       	rjmp	.+352    	; 0x2a7e <__mulsf3+0x1e8>
    291e:	6d 84       	ldd	r6, Y+13	; 0x0d
    2920:	7e 84       	ldd	r7, Y+14	; 0x0e
    2922:	8f 84       	ldd	r8, Y+15	; 0x0f
    2924:	98 88       	ldd	r9, Y+16	; 0x10
    2926:	ed 88       	ldd	r14, Y+21	; 0x15
    2928:	fe 88       	ldd	r15, Y+22	; 0x16
    292a:	0f 89       	ldd	r16, Y+23	; 0x17
    292c:	18 8d       	ldd	r17, Y+24	; 0x18
    292e:	e0 e2       	ldi	r30, 0x20	; 32
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	dc 01       	movw	r26, r24
    2938:	aa 24       	eor	r10, r10
    293a:	bb 24       	eor	r11, r11
    293c:	65 01       	movw	r12, r10
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	a9 01       	movw	r20, r18
    2944:	b3 01       	movw	r22, r6
    2946:	61 70       	andi	r22, 0x01	; 1
    2948:	70 70       	andi	r23, 0x00	; 0
    294a:	61 15       	cp	r22, r1
    294c:	71 05       	cpc	r23, r1
    294e:	d1 f0       	breq	.+52     	; 0x2984 <__mulsf3+0xee>
    2950:	2e 0d       	add	r18, r14
    2952:	3f 1d       	adc	r19, r15
    2954:	40 1f       	adc	r20, r16
    2956:	51 1f       	adc	r21, r17
    2958:	15 01       	movw	r2, r10
    295a:	26 01       	movw	r4, r12
    295c:	28 0e       	add	r2, r24
    295e:	39 1e       	adc	r3, r25
    2960:	4a 1e       	adc	r4, r26
    2962:	5b 1e       	adc	r5, r27
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e0       	ldi	r26, 0x00	; 0
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	2e 15       	cp	r18, r14
    296e:	3f 05       	cpc	r19, r15
    2970:	40 07       	cpc	r20, r16
    2972:	51 07       	cpc	r21, r17
    2974:	18 f0       	brcs	.+6      	; 0x297c <__mulsf3+0xe6>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	dc 01       	movw	r26, r24
    297c:	82 0d       	add	r24, r2
    297e:	93 1d       	adc	r25, r3
    2980:	a4 1d       	adc	r26, r4
    2982:	b5 1d       	adc	r27, r5
    2984:	aa 0c       	add	r10, r10
    2986:	bb 1c       	adc	r11, r11
    2988:	cc 1c       	adc	r12, r12
    298a:	dd 1c       	adc	r13, r13
    298c:	17 ff       	sbrs	r17, 7
    298e:	09 c0       	rjmp	.+18     	; 0x29a2 <__mulsf3+0x10c>
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	26 2e       	mov	r2, r22
    2994:	31 2c       	mov	r3, r1
    2996:	41 2c       	mov	r4, r1
    2998:	51 2c       	mov	r5, r1
    299a:	a2 28       	or	r10, r2
    299c:	b3 28       	or	r11, r3
    299e:	c4 28       	or	r12, r4
    29a0:	d5 28       	or	r13, r5
    29a2:	31 97       	sbiw	r30, 0x01	; 1
    29a4:	49 f0       	breq	.+18     	; 0x29b8 <__mulsf3+0x122>
    29a6:	ee 0c       	add	r14, r14
    29a8:	ff 1c       	adc	r15, r15
    29aa:	00 1f       	adc	r16, r16
    29ac:	11 1f       	adc	r17, r17
    29ae:	96 94       	lsr	r9
    29b0:	87 94       	ror	r8
    29b2:	77 94       	ror	r7
    29b4:	67 94       	ror	r6
    29b6:	c6 cf       	rjmp	.-116    	; 0x2944 <__mulsf3+0xae>
    29b8:	6b 89       	ldd	r22, Y+19	; 0x13
    29ba:	7c 89       	ldd	r23, Y+20	; 0x14
    29bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    29be:	fc 85       	ldd	r31, Y+12	; 0x0c
    29c0:	6e 0f       	add	r22, r30
    29c2:	7f 1f       	adc	r23, r31
    29c4:	6e 5f       	subi	r22, 0xFE	; 254
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	7c 8f       	std	Y+28, r23	; 0x1c
    29ca:	6b 8f       	std	Y+27, r22	; 0x1b
    29cc:	61 e0       	ldi	r22, 0x01	; 1
    29ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    29d0:	7a 89       	ldd	r23, Y+18	; 0x12
    29d2:	e7 17       	cp	r30, r23
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <__mulsf3+0x142>
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	6a 8f       	std	Y+26, r22	; 0x1a
    29da:	6b 8d       	ldd	r22, Y+27	; 0x1b
    29dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    29de:	10 c0       	rjmp	.+32     	; 0x2a00 <__mulsf3+0x16a>
    29e0:	fc 01       	movw	r30, r24
    29e2:	e1 70       	andi	r30, 0x01	; 1
    29e4:	f0 70       	andi	r31, 0x00	; 0
    29e6:	30 97       	sbiw	r30, 0x00	; 0
    29e8:	29 f0       	breq	.+10     	; 0x29f4 <__mulsf3+0x15e>
    29ea:	56 95       	lsr	r21
    29ec:	47 95       	ror	r20
    29ee:	37 95       	ror	r19
    29f0:	27 95       	ror	r18
    29f2:	50 68       	ori	r21, 0x80	; 128
    29f4:	b6 95       	lsr	r27
    29f6:	a7 95       	ror	r26
    29f8:	97 95       	ror	r25
    29fa:	87 95       	ror	r24
    29fc:	6f 5f       	subi	r22, 0xFF	; 255
    29fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2a00:	b7 fd       	sbrc	r27, 7
    2a02:	ee cf       	rjmp	.-36     	; 0x29e0 <__mulsf3+0x14a>
    2a04:	0c c0       	rjmp	.+24     	; 0x2a1e <__mulsf3+0x188>
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	57 fd       	sbrc	r21, 7
    2a10:	81 60       	ori	r24, 0x01	; 1
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	44 1f       	adc	r20, r20
    2a18:	55 1f       	adc	r21, r21
    2a1a:	61 50       	subi	r22, 0x01	; 1
    2a1c:	70 40       	sbci	r23, 0x00	; 0
    2a1e:	80 30       	cpi	r24, 0x00	; 0
    2a20:	e0 e0       	ldi	r30, 0x00	; 0
    2a22:	9e 07       	cpc	r25, r30
    2a24:	e0 e0       	ldi	r30, 0x00	; 0
    2a26:	ae 07       	cpc	r26, r30
    2a28:	e0 e4       	ldi	r30, 0x40	; 64
    2a2a:	be 07       	cpc	r27, r30
    2a2c:	60 f3       	brcs	.-40     	; 0x2a06 <__mulsf3+0x170>
    2a2e:	6b 8f       	std	Y+27, r22	; 0x1b
    2a30:	7c 8f       	std	Y+28, r23	; 0x1c
    2a32:	6f e7       	ldi	r22, 0x7F	; 127
    2a34:	e6 2e       	mov	r14, r22
    2a36:	f1 2c       	mov	r15, r1
    2a38:	01 2d       	mov	r16, r1
    2a3a:	11 2d       	mov	r17, r1
    2a3c:	e8 22       	and	r14, r24
    2a3e:	f9 22       	and	r15, r25
    2a40:	0a 23       	and	r16, r26
    2a42:	1b 23       	and	r17, r27
    2a44:	60 e4       	ldi	r22, 0x40	; 64
    2a46:	e6 16       	cp	r14, r22
    2a48:	f1 04       	cpc	r15, r1
    2a4a:	01 05       	cpc	r16, r1
    2a4c:	11 05       	cpc	r17, r1
    2a4e:	61 f4       	brne	.+24     	; 0x2a68 <__mulsf3+0x1d2>
    2a50:	87 fd       	sbrc	r24, 7
    2a52:	0a c0       	rjmp	.+20     	; 0x2a68 <__mulsf3+0x1d2>
    2a54:	21 15       	cp	r18, r1
    2a56:	31 05       	cpc	r19, r1
    2a58:	41 05       	cpc	r20, r1
    2a5a:	51 05       	cpc	r21, r1
    2a5c:	29 f0       	breq	.+10     	; 0x2a68 <__mulsf3+0x1d2>
    2a5e:	80 5c       	subi	r24, 0xC0	; 192
    2a60:	9f 4f       	sbci	r25, 0xFF	; 255
    2a62:	af 4f       	sbci	r26, 0xFF	; 255
    2a64:	bf 4f       	sbci	r27, 0xFF	; 255
    2a66:	80 78       	andi	r24, 0x80	; 128
    2a68:	8d 8f       	std	Y+29, r24	; 0x1d
    2a6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6c:	af 8f       	std	Y+31, r26	; 0x1f
    2a6e:	b8 a3       	std	Y+32, r27	; 0x20
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	89 8f       	std	Y+25, r24	; 0x19
    2a74:	ce 01       	movw	r24, r28
    2a76:	49 96       	adiw	r24, 0x19	; 25
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <__mulsf3+0x1e8>
    2a7a:	83 e1       	ldi	r24, 0x13	; 19
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2a82:	a0 96       	adiw	r28, 0x20	; 32
    2a84:	e2 e1       	ldi	r30, 0x12	; 18
    2a86:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__epilogue_restores__>

00002a8a <__divsf3>:
    2a8a:	a8 e1       	ldi	r26, 0x18	; 24
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	eb e4       	ldi	r30, 0x4B	; 75
    2a90:	f5 e1       	ldi	r31, 0x15	; 21
    2a92:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x10>
    2a96:	69 83       	std	Y+1, r22	; 0x01
    2a98:	7a 83       	std	Y+2, r23	; 0x02
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
    2a9c:	9c 83       	std	Y+4, r25	; 0x04
    2a9e:	2d 83       	std	Y+5, r18	; 0x05
    2aa0:	3e 83       	std	Y+6, r19	; 0x06
    2aa2:	4f 83       	std	Y+7, r20	; 0x07
    2aa4:	58 87       	std	Y+8, r21	; 0x08
    2aa6:	8e 01       	movw	r16, r28
    2aa8:	07 5f       	subi	r16, 0xF7	; 247
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	ce 01       	movw	r24, r28
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	b8 01       	movw	r22, r16
    2ab2:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2ab6:	81 e1       	ldi	r24, 0x11	; 17
    2ab8:	e8 2e       	mov	r14, r24
    2aba:	f1 2c       	mov	r15, r1
    2abc:	ec 0e       	add	r14, r28
    2abe:	fd 1e       	adc	r15, r29
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	05 96       	adiw	r24, 0x05	; 5
    2ac4:	b7 01       	movw	r22, r14
    2ac6:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2aca:	99 85       	ldd	r25, Y+9	; 0x09
    2acc:	92 30       	cpi	r25, 0x02	; 2
    2ace:	08 f4       	brcc	.+2      	; 0x2ad2 <__divsf3+0x48>
    2ad0:	83 c0       	rjmp	.+262    	; 0x2bd8 <__divsf3+0x14e>
    2ad2:	89 89       	ldd	r24, Y+17	; 0x11
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	08 f4       	brcc	.+2      	; 0x2ada <__divsf3+0x50>
    2ad8:	7b c0       	rjmp	.+246    	; 0x2bd0 <__divsf3+0x146>
    2ada:	2a 85       	ldd	r18, Y+10	; 0x0a
    2adc:	3a 89       	ldd	r19, Y+18	; 0x12
    2ade:	23 27       	eor	r18, r19
    2ae0:	2a 87       	std	Y+10, r18	; 0x0a
    2ae2:	94 30       	cpi	r25, 0x04	; 4
    2ae4:	11 f0       	breq	.+4      	; 0x2aea <__divsf3+0x60>
    2ae6:	92 30       	cpi	r25, 0x02	; 2
    2ae8:	21 f4       	brne	.+8      	; 0x2af2 <__divsf3+0x68>
    2aea:	98 17       	cp	r25, r24
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <__divsf3+0x66>
    2aee:	6c c0       	rjmp	.+216    	; 0x2bc8 <__divsf3+0x13e>
    2af0:	71 c0       	rjmp	.+226    	; 0x2bd4 <__divsf3+0x14a>
    2af2:	84 30       	cpi	r24, 0x04	; 4
    2af4:	39 f4       	brne	.+14     	; 0x2b04 <__divsf3+0x7a>
    2af6:	1d 86       	std	Y+13, r1	; 0x0d
    2af8:	1e 86       	std	Y+14, r1	; 0x0e
    2afa:	1f 86       	std	Y+15, r1	; 0x0f
    2afc:	18 8a       	std	Y+16, r1	; 0x10
    2afe:	1c 86       	std	Y+12, r1	; 0x0c
    2b00:	1b 86       	std	Y+11, r1	; 0x0b
    2b02:	6a c0       	rjmp	.+212    	; 0x2bd8 <__divsf3+0x14e>
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	19 f4       	brne	.+6      	; 0x2b0e <__divsf3+0x84>
    2b08:	84 e0       	ldi	r24, 0x04	; 4
    2b0a:	89 87       	std	Y+9, r24	; 0x09
    2b0c:	65 c0       	rjmp	.+202    	; 0x2bd8 <__divsf3+0x14e>
    2b0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b12:	2b 89       	ldd	r18, Y+19	; 0x13
    2b14:	3c 89       	ldd	r19, Y+20	; 0x14
    2b16:	82 1b       	sub	r24, r18
    2b18:	93 0b       	sbc	r25, r19
    2b1a:	9c 87       	std	Y+12, r25	; 0x0c
    2b1c:	8b 87       	std	Y+11, r24	; 0x0b
    2b1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b20:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b22:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b24:	58 89       	ldd	r21, Y+16	; 0x10
    2b26:	ed 88       	ldd	r14, Y+21	; 0x15
    2b28:	fe 88       	ldd	r15, Y+22	; 0x16
    2b2a:	0f 89       	ldd	r16, Y+23	; 0x17
    2b2c:	18 8d       	ldd	r17, Y+24	; 0x18
    2b2e:	2e 15       	cp	r18, r14
    2b30:	3f 05       	cpc	r19, r15
    2b32:	40 07       	cpc	r20, r16
    2b34:	51 07       	cpc	r21, r17
    2b36:	38 f4       	brcc	.+14     	; 0x2b46 <__divsf3+0xbc>
    2b38:	22 0f       	add	r18, r18
    2b3a:	33 1f       	adc	r19, r19
    2b3c:	44 1f       	adc	r20, r20
    2b3e:	55 1f       	adc	r21, r21
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	9c 87       	std	Y+12, r25	; 0x0c
    2b44:	8b 87       	std	Y+11, r24	; 0x0b
    2b46:	6f e1       	ldi	r22, 0x1F	; 31
    2b48:	70 e0       	ldi	r23, 0x00	; 0
    2b4a:	a1 2c       	mov	r10, r1
    2b4c:	b1 2c       	mov	r11, r1
    2b4e:	c1 2c       	mov	r12, r1
    2b50:	a0 e4       	ldi	r26, 0x40	; 64
    2b52:	da 2e       	mov	r13, r26
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	dc 01       	movw	r26, r24
    2b5a:	2e 15       	cp	r18, r14
    2b5c:	3f 05       	cpc	r19, r15
    2b5e:	40 07       	cpc	r20, r16
    2b60:	51 07       	cpc	r21, r17
    2b62:	40 f0       	brcs	.+16     	; 0x2b74 <__divsf3+0xea>
    2b64:	8a 29       	or	r24, r10
    2b66:	9b 29       	or	r25, r11
    2b68:	ac 29       	or	r26, r12
    2b6a:	bd 29       	or	r27, r13
    2b6c:	2e 19       	sub	r18, r14
    2b6e:	3f 09       	sbc	r19, r15
    2b70:	40 0b       	sbc	r20, r16
    2b72:	51 0b       	sbc	r21, r17
    2b74:	d6 94       	lsr	r13
    2b76:	c7 94       	ror	r12
    2b78:	b7 94       	ror	r11
    2b7a:	a7 94       	ror	r10
    2b7c:	22 0f       	add	r18, r18
    2b7e:	33 1f       	adc	r19, r19
    2b80:	44 1f       	adc	r20, r20
    2b82:	55 1f       	adc	r21, r21
    2b84:	61 50       	subi	r22, 0x01	; 1
    2b86:	70 40       	sbci	r23, 0x00	; 0
    2b88:	41 f7       	brne	.-48     	; 0x2b5a <__divsf3+0xd0>
    2b8a:	6f e7       	ldi	r22, 0x7F	; 127
    2b8c:	e6 2e       	mov	r14, r22
    2b8e:	f1 2c       	mov	r15, r1
    2b90:	01 2d       	mov	r16, r1
    2b92:	11 2d       	mov	r17, r1
    2b94:	e8 22       	and	r14, r24
    2b96:	f9 22       	and	r15, r25
    2b98:	0a 23       	and	r16, r26
    2b9a:	1b 23       	and	r17, r27
    2b9c:	60 e4       	ldi	r22, 0x40	; 64
    2b9e:	e6 16       	cp	r14, r22
    2ba0:	f1 04       	cpc	r15, r1
    2ba2:	01 05       	cpc	r16, r1
    2ba4:	11 05       	cpc	r17, r1
    2ba6:	61 f4       	brne	.+24     	; 0x2bc0 <__divsf3+0x136>
    2ba8:	87 fd       	sbrc	r24, 7
    2baa:	0a c0       	rjmp	.+20     	; 0x2bc0 <__divsf3+0x136>
    2bac:	21 15       	cp	r18, r1
    2bae:	31 05       	cpc	r19, r1
    2bb0:	41 05       	cpc	r20, r1
    2bb2:	51 05       	cpc	r21, r1
    2bb4:	29 f0       	breq	.+10     	; 0x2bc0 <__divsf3+0x136>
    2bb6:	80 5c       	subi	r24, 0xC0	; 192
    2bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bba:	af 4f       	sbci	r26, 0xFF	; 255
    2bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bbe:	80 78       	andi	r24, 0x80	; 128
    2bc0:	8d 87       	std	Y+13, r24	; 0x0d
    2bc2:	9e 87       	std	Y+14, r25	; 0x0e
    2bc4:	af 87       	std	Y+15, r26	; 0x0f
    2bc6:	b8 8b       	std	Y+16, r27	; 0x10
    2bc8:	8e 01       	movw	r16, r28
    2bca:	07 5f       	subi	r16, 0xF7	; 247
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <__divsf3+0x14e>
    2bd0:	87 01       	movw	r16, r14
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <__divsf3+0x14e>
    2bd4:	03 e1       	ldi	r16, 0x13	; 19
    2bd6:	11 e0       	ldi	r17, 0x01	; 1
    2bd8:	c8 01       	movw	r24, r16
    2bda:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2bde:	68 96       	adiw	r28, 0x18	; 24
    2be0:	ea e0       	ldi	r30, 0x0A	; 10
    2be2:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x10>

00002be6 <__gtsf2>:
    2be6:	a8 e1       	ldi	r26, 0x18	; 24
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e9 ef       	ldi	r30, 0xF9	; 249
    2bec:	f5 e1       	ldi	r31, 0x15	; 21
    2bee:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__prologue_saves__+0x18>
    2bf2:	69 83       	std	Y+1, r22	; 0x01
    2bf4:	7a 83       	std	Y+2, r23	; 0x02
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	2d 83       	std	Y+5, r18	; 0x05
    2bfc:	3e 83       	std	Y+6, r19	; 0x06
    2bfe:	4f 83       	std	Y+7, r20	; 0x07
    2c00:	58 87       	std	Y+8, r21	; 0x08
    2c02:	8e 01       	movw	r16, r28
    2c04:	07 5f       	subi	r16, 0xF7	; 247
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	ce 01       	movw	r24, r28
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	b8 01       	movw	r22, r16
    2c0e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2c12:	81 e1       	ldi	r24, 0x11	; 17
    2c14:	e8 2e       	mov	r14, r24
    2c16:	f1 2c       	mov	r15, r1
    2c18:	ec 0e       	add	r14, r28
    2c1a:	fd 1e       	adc	r15, r29
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	05 96       	adiw	r24, 0x05	; 5
    2c20:	b7 01       	movw	r22, r14
    2c22:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	40 f0       	brcs	.+16     	; 0x2c3c <__gtsf2+0x56>
    2c2c:	89 89       	ldd	r24, Y+17	; 0x11
    2c2e:	82 30       	cpi	r24, 0x02	; 2
    2c30:	28 f0       	brcs	.+10     	; 0x2c3c <__gtsf2+0x56>
    2c32:	c8 01       	movw	r24, r16
    2c34:	b7 01       	movw	r22, r14
    2c36:	0e 94 3d 19 	call	0x327a	; 0x327a <__fpcmp_parts_f>
    2c3a:	01 c0       	rjmp	.+2      	; 0x2c3e <__gtsf2+0x58>
    2c3c:	8f ef       	ldi	r24, 0xFF	; 255
    2c3e:	68 96       	adiw	r28, 0x18	; 24
    2c40:	e6 e0       	ldi	r30, 0x06	; 6
    2c42:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x18>

00002c46 <__gesf2>:
    2c46:	a8 e1       	ldi	r26, 0x18	; 24
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e9 e2       	ldi	r30, 0x29	; 41
    2c4c:	f6 e1       	ldi	r31, 0x16	; 22
    2c4e:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__prologue_saves__+0x18>
    2c52:	69 83       	std	Y+1, r22	; 0x01
    2c54:	7a 83       	std	Y+2, r23	; 0x02
    2c56:	8b 83       	std	Y+3, r24	; 0x03
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	2d 83       	std	Y+5, r18	; 0x05
    2c5c:	3e 83       	std	Y+6, r19	; 0x06
    2c5e:	4f 83       	std	Y+7, r20	; 0x07
    2c60:	58 87       	std	Y+8, r21	; 0x08
    2c62:	8e 01       	movw	r16, r28
    2c64:	07 5f       	subi	r16, 0xF7	; 247
    2c66:	1f 4f       	sbci	r17, 0xFF	; 255
    2c68:	ce 01       	movw	r24, r28
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	b8 01       	movw	r22, r16
    2c6e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2c72:	81 e1       	ldi	r24, 0x11	; 17
    2c74:	e8 2e       	mov	r14, r24
    2c76:	f1 2c       	mov	r15, r1
    2c78:	ec 0e       	add	r14, r28
    2c7a:	fd 1e       	adc	r15, r29
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	05 96       	adiw	r24, 0x05	; 5
    2c80:	b7 01       	movw	r22, r14
    2c82:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	82 30       	cpi	r24, 0x02	; 2
    2c8a:	40 f0       	brcs	.+16     	; 0x2c9c <__gesf2+0x56>
    2c8c:	89 89       	ldd	r24, Y+17	; 0x11
    2c8e:	82 30       	cpi	r24, 0x02	; 2
    2c90:	28 f0       	brcs	.+10     	; 0x2c9c <__gesf2+0x56>
    2c92:	c8 01       	movw	r24, r16
    2c94:	b7 01       	movw	r22, r14
    2c96:	0e 94 3d 19 	call	0x327a	; 0x327a <__fpcmp_parts_f>
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <__gesf2+0x58>
    2c9c:	8f ef       	ldi	r24, 0xFF	; 255
    2c9e:	68 96       	adiw	r28, 0x18	; 24
    2ca0:	e6 e0       	ldi	r30, 0x06	; 6
    2ca2:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x18>

00002ca6 <__ltsf2>:
    2ca6:	a8 e1       	ldi	r26, 0x18	; 24
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e9 e5       	ldi	r30, 0x59	; 89
    2cac:	f6 e1       	ldi	r31, 0x16	; 22
    2cae:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__prologue_saves__+0x18>
    2cb2:	69 83       	std	Y+1, r22	; 0x01
    2cb4:	7a 83       	std	Y+2, r23	; 0x02
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	2d 83       	std	Y+5, r18	; 0x05
    2cbc:	3e 83       	std	Y+6, r19	; 0x06
    2cbe:	4f 83       	std	Y+7, r20	; 0x07
    2cc0:	58 87       	std	Y+8, r21	; 0x08
    2cc2:	8e 01       	movw	r16, r28
    2cc4:	07 5f       	subi	r16, 0xF7	; 247
    2cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc8:	ce 01       	movw	r24, r28
    2cca:	01 96       	adiw	r24, 0x01	; 1
    2ccc:	b8 01       	movw	r22, r16
    2cce:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2cd2:	81 e1       	ldi	r24, 0x11	; 17
    2cd4:	e8 2e       	mov	r14, r24
    2cd6:	f1 2c       	mov	r15, r1
    2cd8:	ec 0e       	add	r14, r28
    2cda:	fd 1e       	adc	r15, r29
    2cdc:	ce 01       	movw	r24, r28
    2cde:	05 96       	adiw	r24, 0x05	; 5
    2ce0:	b7 01       	movw	r22, r14
    2ce2:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	82 30       	cpi	r24, 0x02	; 2
    2cea:	40 f0       	brcs	.+16     	; 0x2cfc <__ltsf2+0x56>
    2cec:	89 89       	ldd	r24, Y+17	; 0x11
    2cee:	82 30       	cpi	r24, 0x02	; 2
    2cf0:	28 f0       	brcs	.+10     	; 0x2cfc <__ltsf2+0x56>
    2cf2:	c8 01       	movw	r24, r16
    2cf4:	b7 01       	movw	r22, r14
    2cf6:	0e 94 3d 19 	call	0x327a	; 0x327a <__fpcmp_parts_f>
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <__ltsf2+0x58>
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	68 96       	adiw	r28, 0x18	; 24
    2d00:	e6 e0       	ldi	r30, 0x06	; 6
    2d02:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x18>

00002d06 <__floatsisf>:
    2d06:	a8 e0       	ldi	r26, 0x08	; 8
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e9 e8       	ldi	r30, 0x89	; 137
    2d0c:	f6 e1       	ldi	r31, 0x16	; 22
    2d0e:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__prologue_saves__+0x18>
    2d12:	7b 01       	movw	r14, r22
    2d14:	8c 01       	movw	r16, r24
    2d16:	83 e0       	ldi	r24, 0x03	; 3
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	d8 01       	movw	r26, r16
    2d1c:	c7 01       	movw	r24, r14
    2d1e:	88 27       	eor	r24, r24
    2d20:	b7 fd       	sbrc	r27, 7
    2d22:	83 95       	inc	r24
    2d24:	99 27       	eor	r25, r25
    2d26:	aa 27       	eor	r26, r26
    2d28:	bb 27       	eor	r27, r27
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
    2d2e:	e1 14       	cp	r14, r1
    2d30:	f1 04       	cpc	r15, r1
    2d32:	01 05       	cpc	r16, r1
    2d34:	11 05       	cpc	r17, r1
    2d36:	19 f4       	brne	.+6      	; 0x2d3e <__floatsisf+0x38>
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	37 c0       	rjmp	.+110    	; 0x2dac <__floatsisf+0xa6>
    2d3e:	8e e1       	ldi	r24, 0x1E	; 30
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	22 23       	and	r18, r18
    2d48:	89 f0       	breq	.+34     	; 0x2d6c <__floatsisf+0x66>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	e8 16       	cp	r14, r24
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	f8 06       	cpc	r15, r24
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	08 07       	cpc	r16, r24
    2d56:	80 e8       	ldi	r24, 0x80	; 128
    2d58:	18 07       	cpc	r17, r24
    2d5a:	69 f1       	breq	.+90     	; 0x2db6 <__floatsisf+0xb0>
    2d5c:	10 95       	com	r17
    2d5e:	00 95       	com	r16
    2d60:	f0 94       	com	r15
    2d62:	e0 94       	com	r14
    2d64:	e1 1c       	adc	r14, r1
    2d66:	f1 1c       	adc	r15, r1
    2d68:	01 1d       	adc	r16, r1
    2d6a:	11 1d       	adc	r17, r1
    2d6c:	ed 82       	std	Y+5, r14	; 0x05
    2d6e:	fe 82       	std	Y+6, r15	; 0x06
    2d70:	0f 83       	std	Y+7, r16	; 0x07
    2d72:	18 87       	std	Y+8, r17	; 0x08
    2d74:	c8 01       	movw	r24, r16
    2d76:	b7 01       	movw	r22, r14
    2d78:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__clzsi2>
    2d7c:	9c 01       	movw	r18, r24
    2d7e:	21 50       	subi	r18, 0x01	; 1
    2d80:	30 40       	sbci	r19, 0x00	; 0
    2d82:	12 16       	cp	r1, r18
    2d84:	13 06       	cpc	r1, r19
    2d86:	94 f4       	brge	.+36     	; 0x2dac <__floatsisf+0xa6>
    2d88:	02 2e       	mov	r0, r18
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <__floatsisf+0x8e>
    2d8c:	ee 0c       	add	r14, r14
    2d8e:	ff 1c       	adc	r15, r15
    2d90:	00 1f       	adc	r16, r16
    2d92:	11 1f       	adc	r17, r17
    2d94:	0a 94       	dec	r0
    2d96:	d2 f7       	brpl	.-12     	; 0x2d8c <__floatsisf+0x86>
    2d98:	ed 82       	std	Y+5, r14	; 0x05
    2d9a:	fe 82       	std	Y+6, r15	; 0x06
    2d9c:	0f 83       	std	Y+7, r16	; 0x07
    2d9e:	18 87       	std	Y+8, r17	; 0x08
    2da0:	8e e1       	ldi	r24, 0x1E	; 30
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	82 1b       	sub	r24, r18
    2da6:	93 0b       	sbc	r25, r19
    2da8:	9c 83       	std	Y+4, r25	; 0x04
    2daa:	8b 83       	std	Y+3, r24	; 0x03
    2dac:	ce 01       	movw	r24, r28
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2db4:	04 c0       	rjmp	.+8      	; 0x2dbe <__floatsisf+0xb8>
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	9f ec       	ldi	r25, 0xCF	; 207
    2dbe:	28 96       	adiw	r28, 0x08	; 8
    2dc0:	e6 e0       	ldi	r30, 0x06	; 6
    2dc2:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x18>

00002dc6 <__fixsfsi>:
    2dc6:	ac e0       	ldi	r26, 0x0C	; 12
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 ee       	ldi	r30, 0xE9	; 233
    2dcc:	f6 e1       	ldi	r31, 0x16	; 22
    2dce:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__prologue_saves__+0x20>
    2dd2:	69 83       	std	Y+1, r22	; 0x01
    2dd4:	7a 83       	std	Y+2, r23	; 0x02
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
    2dd8:	9c 83       	std	Y+4, r25	; 0x04
    2dda:	ce 01       	movw	r24, r28
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	be 01       	movw	r22, r28
    2de0:	6b 5f       	subi	r22, 0xFB	; 251
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__unpack_f>
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	82 30       	cpi	r24, 0x02	; 2
    2dec:	81 f1       	breq	.+96     	; 0x2e4e <__fixsfsi+0x88>
    2dee:	82 30       	cpi	r24, 0x02	; 2
    2df0:	70 f1       	brcs	.+92     	; 0x2e4e <__fixsfsi+0x88>
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	21 f4       	brne	.+8      	; 0x2dfe <__fixsfsi+0x38>
    2df6:	8e 81       	ldd	r24, Y+6	; 0x06
    2df8:	88 23       	and	r24, r24
    2dfa:	69 f1       	breq	.+90     	; 0x2e56 <__fixsfsi+0x90>
    2dfc:	0a c0       	rjmp	.+20     	; 0x2e12 <__fixsfsi+0x4c>
    2dfe:	2f 81       	ldd	r18, Y+7	; 0x07
    2e00:	38 85       	ldd	r19, Y+8	; 0x08
    2e02:	37 fd       	sbrc	r19, 7
    2e04:	24 c0       	rjmp	.+72     	; 0x2e4e <__fixsfsi+0x88>
    2e06:	6e 81       	ldd	r22, Y+6	; 0x06
    2e08:	2f 31       	cpi	r18, 0x1F	; 31
    2e0a:	31 05       	cpc	r19, r1
    2e0c:	3c f0       	brlt	.+14     	; 0x2e1c <__fixsfsi+0x56>
    2e0e:	66 23       	and	r22, r22
    2e10:	11 f1       	breq	.+68     	; 0x2e56 <__fixsfsi+0x90>
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	50 e8       	ldi	r21, 0x80	; 128
    2e1a:	21 c0       	rjmp	.+66     	; 0x2e5e <__fixsfsi+0x98>
    2e1c:	8e e1       	ldi	r24, 0x1E	; 30
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	82 1b       	sub	r24, r18
    2e22:	93 0b       	sbc	r25, r19
    2e24:	29 85       	ldd	r18, Y+9	; 0x09
    2e26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e28:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e2c:	04 c0       	rjmp	.+8      	; 0x2e36 <__fixsfsi+0x70>
    2e2e:	56 95       	lsr	r21
    2e30:	47 95       	ror	r20
    2e32:	37 95       	ror	r19
    2e34:	27 95       	ror	r18
    2e36:	8a 95       	dec	r24
    2e38:	d2 f7       	brpl	.-12     	; 0x2e2e <__fixsfsi+0x68>
    2e3a:	66 23       	and	r22, r22
    2e3c:	81 f0       	breq	.+32     	; 0x2e5e <__fixsfsi+0x98>
    2e3e:	50 95       	com	r21
    2e40:	40 95       	com	r20
    2e42:	30 95       	com	r19
    2e44:	21 95       	neg	r18
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	4f 4f       	sbci	r20, 0xFF	; 255
    2e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4c:	08 c0       	rjmp	.+16     	; 0x2e5e <__fixsfsi+0x98>
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	a9 01       	movw	r20, r18
    2e54:	04 c0       	rjmp	.+8      	; 0x2e5e <__fixsfsi+0x98>
    2e56:	2f ef       	ldi	r18, 0xFF	; 255
    2e58:	3f ef       	ldi	r19, 0xFF	; 255
    2e5a:	4f ef       	ldi	r20, 0xFF	; 255
    2e5c:	5f e7       	ldi	r21, 0x7F	; 127
    2e5e:	b9 01       	movw	r22, r18
    2e60:	ca 01       	movw	r24, r20
    2e62:	2c 96       	adiw	r28, 0x0c	; 12
    2e64:	e2 e0       	ldi	r30, 0x02	; 2
    2e66:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__epilogue_restores__+0x20>

00002e6a <__floatunsisf>:
    2e6a:	a8 e0       	ldi	r26, 0x08	; 8
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	eb e3       	ldi	r30, 0x3B	; 59
    2e70:	f7 e1       	ldi	r31, 0x17	; 23
    2e72:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x14>
    2e76:	7b 01       	movw	r14, r22
    2e78:	8c 01       	movw	r16, r24
    2e7a:	1a 82       	std	Y+2, r1	; 0x02
    2e7c:	61 15       	cp	r22, r1
    2e7e:	71 05       	cpc	r23, r1
    2e80:	81 05       	cpc	r24, r1
    2e82:	91 05       	cpc	r25, r1
    2e84:	19 f4       	brne	.+6      	; 0x2e8c <__floatunsisf+0x22>
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	5f c0       	rjmp	.+190    	; 0x2f4a <__floatunsisf+0xe0>
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	8e e1       	ldi	r24, 0x1E	; 30
    2e92:	c8 2e       	mov	r12, r24
    2e94:	d1 2c       	mov	r13, r1
    2e96:	dc 82       	std	Y+4, r13	; 0x04
    2e98:	cb 82       	std	Y+3, r12	; 0x03
    2e9a:	ed 82       	std	Y+5, r14	; 0x05
    2e9c:	fe 82       	std	Y+6, r15	; 0x06
    2e9e:	0f 83       	std	Y+7, r16	; 0x07
    2ea0:	18 87       	std	Y+8, r17	; 0x08
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	b7 01       	movw	r22, r14
    2ea6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__clzsi2>
    2eaa:	fc 01       	movw	r30, r24
    2eac:	31 97       	sbiw	r30, 0x01	; 1
    2eae:	f7 ff       	sbrs	r31, 7
    2eb0:	3a c0       	rjmp	.+116    	; 0x2f26 <__floatunsisf+0xbc>
    2eb2:	aa 27       	eor	r26, r26
    2eb4:	bb 27       	eor	r27, r27
    2eb6:	ae 1b       	sub	r26, r30
    2eb8:	bf 0b       	sbc	r27, r31
    2eba:	21 e0       	ldi	r18, 0x01	; 1
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	0a 2e       	mov	r0, r26
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <__floatunsisf+0x64>
    2ec6:	22 0f       	add	r18, r18
    2ec8:	33 1f       	adc	r19, r19
    2eca:	44 1f       	adc	r20, r20
    2ecc:	55 1f       	adc	r21, r21
    2ece:	0a 94       	dec	r0
    2ed0:	d2 f7       	brpl	.-12     	; 0x2ec6 <__floatunsisf+0x5c>
    2ed2:	21 50       	subi	r18, 0x01	; 1
    2ed4:	30 40       	sbci	r19, 0x00	; 0
    2ed6:	40 40       	sbci	r20, 0x00	; 0
    2ed8:	50 40       	sbci	r21, 0x00	; 0
    2eda:	2e 21       	and	r18, r14
    2edc:	3f 21       	and	r19, r15
    2ede:	40 23       	and	r20, r16
    2ee0:	51 23       	and	r21, r17
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	21 15       	cp	r18, r1
    2eec:	31 05       	cpc	r19, r1
    2eee:	41 05       	cpc	r20, r1
    2ef0:	51 05       	cpc	r21, r1
    2ef2:	19 f4       	brne	.+6      	; 0x2efa <__floatunsisf+0x90>
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	cb 01       	movw	r24, r22
    2efa:	04 c0       	rjmp	.+8      	; 0x2f04 <__floatunsisf+0x9a>
    2efc:	16 95       	lsr	r17
    2efe:	07 95       	ror	r16
    2f00:	f7 94       	ror	r15
    2f02:	e7 94       	ror	r14
    2f04:	aa 95       	dec	r26
    2f06:	d2 f7       	brpl	.-12     	; 0x2efc <__floatunsisf+0x92>
    2f08:	e6 2a       	or	r14, r22
    2f0a:	f7 2a       	or	r15, r23
    2f0c:	08 2b       	or	r16, r24
    2f0e:	19 2b       	or	r17, r25
    2f10:	ed 82       	std	Y+5, r14	; 0x05
    2f12:	fe 82       	std	Y+6, r15	; 0x06
    2f14:	0f 83       	std	Y+7, r16	; 0x07
    2f16:	18 87       	std	Y+8, r17	; 0x08
    2f18:	8e e1       	ldi	r24, 0x1E	; 30
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	8e 1b       	sub	r24, r30
    2f1e:	9f 0b       	sbc	r25, r31
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    2f24:	12 c0       	rjmp	.+36     	; 0x2f4a <__floatunsisf+0xe0>
    2f26:	30 97       	sbiw	r30, 0x00	; 0
    2f28:	81 f0       	breq	.+32     	; 0x2f4a <__floatunsisf+0xe0>
    2f2a:	0e 2e       	mov	r0, r30
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <__floatunsisf+0xcc>
    2f2e:	ee 0c       	add	r14, r14
    2f30:	ff 1c       	adc	r15, r15
    2f32:	00 1f       	adc	r16, r16
    2f34:	11 1f       	adc	r17, r17
    2f36:	0a 94       	dec	r0
    2f38:	d2 f7       	brpl	.-12     	; 0x2f2e <__floatunsisf+0xc4>
    2f3a:	ed 82       	std	Y+5, r14	; 0x05
    2f3c:	fe 82       	std	Y+6, r15	; 0x06
    2f3e:	0f 83       	std	Y+7, r16	; 0x07
    2f40:	18 87       	std	Y+8, r17	; 0x08
    2f42:	ce 1a       	sub	r12, r30
    2f44:	df 0a       	sbc	r13, r31
    2f46:	dc 82       	std	Y+4, r13	; 0x04
    2f48:	cb 82       	std	Y+3, r12	; 0x03
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2f52:	28 96       	adiw	r28, 0x08	; 8
    2f54:	e8 e0       	ldi	r30, 0x08	; 8
    2f56:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x14>

00002f5a <__clzsi2>:
    2f5a:	af 92       	push	r10
    2f5c:	bf 92       	push	r11
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	7b 01       	movw	r14, r22
    2f6c:	8c 01       	movw	r16, r24
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	e8 16       	cp	r14, r24
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	f8 06       	cpc	r15, r24
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	08 07       	cpc	r16, r24
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	18 07       	cpc	r17, r24
    2f7e:	58 f4       	brcc	.+22     	; 0x2f96 <__clzsi2+0x3c>
    2f80:	ef ef       	ldi	r30, 0xFF	; 255
    2f82:	ee 16       	cp	r14, r30
    2f84:	f1 04       	cpc	r15, r1
    2f86:	01 05       	cpc	r16, r1
    2f88:	11 05       	cpc	r17, r1
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <__clzsi2+0x34>
    2f8c:	90 f4       	brcc	.+36     	; 0x2fb2 <__clzsi2+0x58>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	dc 01       	movw	r26, r24
    2f94:	17 c0       	rjmp	.+46     	; 0x2fc4 <__clzsi2+0x6a>
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	ef 16       	cp	r14, r31
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	ff 06       	cpc	r15, r31
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	0f 07       	cpc	r16, r31
    2fa2:	f1 e0       	ldi	r31, 0x01	; 1
    2fa4:	1f 07       	cpc	r17, r31
    2fa6:	50 f4       	brcc	.+20     	; 0x2fbc <__clzsi2+0x62>
    2fa8:	80 e1       	ldi	r24, 0x10	; 16
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	a0 e0       	ldi	r26, 0x00	; 0
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	09 c0       	rjmp	.+18     	; 0x2fc4 <__clzsi2+0x6a>
    2fb2:	88 e0       	ldi	r24, 0x08	; 8
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a0 e0       	ldi	r26, 0x00	; 0
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	04 c0       	rjmp	.+8      	; 0x2fc4 <__clzsi2+0x6a>
    2fbc:	88 e1       	ldi	r24, 0x18	; 24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a0 e0       	ldi	r26, 0x00	; 0
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	20 e2       	ldi	r18, 0x20	; 32
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	28 1b       	sub	r18, r24
    2fce:	39 0b       	sbc	r19, r25
    2fd0:	4a 0b       	sbc	r20, r26
    2fd2:	5b 0b       	sbc	r21, r27
    2fd4:	57 01       	movw	r10, r14
    2fd6:	68 01       	movw	r12, r16
    2fd8:	04 c0       	rjmp	.+8      	; 0x2fe2 <__clzsi2+0x88>
    2fda:	d6 94       	lsr	r13
    2fdc:	c7 94       	ror	r12
    2fde:	b7 94       	ror	r11
    2fe0:	a7 94       	ror	r10
    2fe2:	8a 95       	dec	r24
    2fe4:	d2 f7       	brpl	.-12     	; 0x2fda <__clzsi2+0x80>
    2fe6:	d6 01       	movw	r26, r12
    2fe8:	c5 01       	movw	r24, r10
    2fea:	85 5e       	subi	r24, 0xE5	; 229
    2fec:	9e 4f       	sbci	r25, 0xFE	; 254
    2fee:	fc 01       	movw	r30, r24
    2ff0:	80 81       	ld	r24, Z
    2ff2:	28 1b       	sub	r18, r24
    2ff4:	31 09       	sbc	r19, r1
    2ff6:	41 09       	sbc	r20, r1
    2ff8:	51 09       	sbc	r21, r1
    2ffa:	c9 01       	movw	r24, r18
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	ef 90       	pop	r14
    3004:	df 90       	pop	r13
    3006:	cf 90       	pop	r12
    3008:	bf 90       	pop	r11
    300a:	af 90       	pop	r10
    300c:	08 95       	ret

0000300e <__pack_f>:
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	fc 01       	movw	r30, r24
    301c:	24 81       	ldd	r18, Z+4	; 0x04
    301e:	35 81       	ldd	r19, Z+5	; 0x05
    3020:	46 81       	ldd	r20, Z+6	; 0x06
    3022:	57 81       	ldd	r21, Z+7	; 0x07
    3024:	61 81       	ldd	r22, Z+1	; 0x01
    3026:	80 81       	ld	r24, Z
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	20 f4       	brcc	.+8      	; 0x3034 <__pack_f+0x26>
    302c:	40 61       	ori	r20, 0x10	; 16
    302e:	ef ef       	ldi	r30, 0xFF	; 255
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	a3 c0       	rjmp	.+326    	; 0x317a <__pack_f+0x16c>
    3034:	84 30       	cpi	r24, 0x04	; 4
    3036:	09 f4       	brne	.+2      	; 0x303a <__pack_f+0x2c>
    3038:	9b c0       	rjmp	.+310    	; 0x3170 <__pack_f+0x162>
    303a:	82 30       	cpi	r24, 0x02	; 2
    303c:	09 f4       	brne	.+2      	; 0x3040 <__pack_f+0x32>
    303e:	92 c0       	rjmp	.+292    	; 0x3164 <__pack_f+0x156>
    3040:	21 15       	cp	r18, r1
    3042:	31 05       	cpc	r19, r1
    3044:	41 05       	cpc	r20, r1
    3046:	51 05       	cpc	r21, r1
    3048:	09 f4       	brne	.+2      	; 0x304c <__pack_f+0x3e>
    304a:	8f c0       	rjmp	.+286    	; 0x316a <__pack_f+0x15c>
    304c:	02 80       	ldd	r0, Z+2	; 0x02
    304e:	f3 81       	ldd	r31, Z+3	; 0x03
    3050:	e0 2d       	mov	r30, r0
    3052:	7f ef       	ldi	r23, 0xFF	; 255
    3054:	e2 38       	cpi	r30, 0x82	; 130
    3056:	f7 07       	cpc	r31, r23
    3058:	0c f0       	brlt	.+2      	; 0x305c <__pack_f+0x4e>
    305a:	5a c0       	rjmp	.+180    	; 0x3110 <__pack_f+0x102>
    305c:	c2 e8       	ldi	r28, 0x82	; 130
    305e:	df ef       	ldi	r29, 0xFF	; 255
    3060:	ce 1b       	sub	r28, r30
    3062:	df 0b       	sbc	r29, r31
    3064:	ca 31       	cpi	r28, 0x1A	; 26
    3066:	d1 05       	cpc	r29, r1
    3068:	6c f5       	brge	.+90     	; 0x30c4 <__pack_f+0xb6>
    306a:	79 01       	movw	r14, r18
    306c:	8a 01       	movw	r16, r20
    306e:	0c 2e       	mov	r0, r28
    3070:	04 c0       	rjmp	.+8      	; 0x307a <__pack_f+0x6c>
    3072:	16 95       	lsr	r17
    3074:	07 95       	ror	r16
    3076:	f7 94       	ror	r15
    3078:	e7 94       	ror	r14
    307a:	0a 94       	dec	r0
    307c:	d2 f7       	brpl	.-12     	; 0x3072 <__pack_f+0x64>
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a0 e0       	ldi	r26, 0x00	; 0
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	0c 2e       	mov	r0, r28
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <__pack_f+0x84>
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	aa 1f       	adc	r26, r26
    3090:	bb 1f       	adc	r27, r27
    3092:	0a 94       	dec	r0
    3094:	d2 f7       	brpl	.-12     	; 0x308a <__pack_f+0x7c>
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	a1 09       	sbc	r26, r1
    309a:	b1 09       	sbc	r27, r1
    309c:	82 23       	and	r24, r18
    309e:	93 23       	and	r25, r19
    30a0:	a4 23       	and	r26, r20
    30a2:	b5 23       	and	r27, r21
    30a4:	21 e0       	ldi	r18, 0x01	; 1
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	a1 05       	cpc	r26, r1
    30b0:	b1 05       	cpc	r27, r1
    30b2:	19 f4       	brne	.+6      	; 0x30ba <__pack_f+0xac>
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	a9 01       	movw	r20, r18
    30ba:	2e 29       	or	r18, r14
    30bc:	3f 29       	or	r19, r15
    30be:	40 2b       	or	r20, r16
    30c0:	51 2b       	or	r21, r17
    30c2:	03 c0       	rjmp	.+6      	; 0x30ca <__pack_f+0xbc>
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	a9 01       	movw	r20, r18
    30ca:	da 01       	movw	r26, r20
    30cc:	c9 01       	movw	r24, r18
    30ce:	8f 77       	andi	r24, 0x7F	; 127
    30d0:	90 70       	andi	r25, 0x00	; 0
    30d2:	a0 70       	andi	r26, 0x00	; 0
    30d4:	b0 70       	andi	r27, 0x00	; 0
    30d6:	80 34       	cpi	r24, 0x40	; 64
    30d8:	91 05       	cpc	r25, r1
    30da:	a1 05       	cpc	r26, r1
    30dc:	b1 05       	cpc	r27, r1
    30de:	39 f4       	brne	.+14     	; 0x30ee <__pack_f+0xe0>
    30e0:	27 ff       	sbrs	r18, 7
    30e2:	09 c0       	rjmp	.+18     	; 0x30f6 <__pack_f+0xe8>
    30e4:	20 5c       	subi	r18, 0xC0	; 192
    30e6:	3f 4f       	sbci	r19, 0xFF	; 255
    30e8:	4f 4f       	sbci	r20, 0xFF	; 255
    30ea:	5f 4f       	sbci	r21, 0xFF	; 255
    30ec:	04 c0       	rjmp	.+8      	; 0x30f6 <__pack_f+0xe8>
    30ee:	21 5c       	subi	r18, 0xC1	; 193
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	4f 4f       	sbci	r20, 0xFF	; 255
    30f4:	5f 4f       	sbci	r21, 0xFF	; 255
    30f6:	e1 e0       	ldi	r30, 0x01	; 1
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	20 30       	cpi	r18, 0x00	; 0
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	38 07       	cpc	r19, r24
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	48 07       	cpc	r20, r24
    3104:	80 e4       	ldi	r24, 0x40	; 64
    3106:	58 07       	cpc	r21, r24
    3108:	28 f5       	brcc	.+74     	; 0x3154 <__pack_f+0x146>
    310a:	e0 e0       	ldi	r30, 0x00	; 0
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	22 c0       	rjmp	.+68     	; 0x3154 <__pack_f+0x146>
    3110:	e0 38       	cpi	r30, 0x80	; 128
    3112:	f1 05       	cpc	r31, r1
    3114:	6c f5       	brge	.+90     	; 0x3170 <__pack_f+0x162>
    3116:	e1 58       	subi	r30, 0x81	; 129
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	da 01       	movw	r26, r20
    311c:	c9 01       	movw	r24, r18
    311e:	8f 77       	andi	r24, 0x7F	; 127
    3120:	90 70       	andi	r25, 0x00	; 0
    3122:	a0 70       	andi	r26, 0x00	; 0
    3124:	b0 70       	andi	r27, 0x00	; 0
    3126:	80 34       	cpi	r24, 0x40	; 64
    3128:	91 05       	cpc	r25, r1
    312a:	a1 05       	cpc	r26, r1
    312c:	b1 05       	cpc	r27, r1
    312e:	39 f4       	brne	.+14     	; 0x313e <__pack_f+0x130>
    3130:	27 ff       	sbrs	r18, 7
    3132:	09 c0       	rjmp	.+18     	; 0x3146 <__pack_f+0x138>
    3134:	20 5c       	subi	r18, 0xC0	; 192
    3136:	3f 4f       	sbci	r19, 0xFF	; 255
    3138:	4f 4f       	sbci	r20, 0xFF	; 255
    313a:	5f 4f       	sbci	r21, 0xFF	; 255
    313c:	04 c0       	rjmp	.+8      	; 0x3146 <__pack_f+0x138>
    313e:	21 5c       	subi	r18, 0xC1	; 193
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	4f 4f       	sbci	r20, 0xFF	; 255
    3144:	5f 4f       	sbci	r21, 0xFF	; 255
    3146:	57 ff       	sbrs	r21, 7
    3148:	05 c0       	rjmp	.+10     	; 0x3154 <__pack_f+0x146>
    314a:	56 95       	lsr	r21
    314c:	47 95       	ror	r20
    314e:	37 95       	ror	r19
    3150:	27 95       	ror	r18
    3152:	31 96       	adiw	r30, 0x01	; 1
    3154:	87 e0       	ldi	r24, 0x07	; 7
    3156:	56 95       	lsr	r21
    3158:	47 95       	ror	r20
    315a:	37 95       	ror	r19
    315c:	27 95       	ror	r18
    315e:	8a 95       	dec	r24
    3160:	d1 f7       	brne	.-12     	; 0x3156 <__pack_f+0x148>
    3162:	0b c0       	rjmp	.+22     	; 0x317a <__pack_f+0x16c>
    3164:	e0 e0       	ldi	r30, 0x00	; 0
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	05 c0       	rjmp	.+10     	; 0x3174 <__pack_f+0x166>
    316a:	e0 e0       	ldi	r30, 0x00	; 0
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	05 c0       	rjmp	.+10     	; 0x317a <__pack_f+0x16c>
    3170:	ef ef       	ldi	r30, 0xFF	; 255
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	a9 01       	movw	r20, r18
    317a:	8e 2f       	mov	r24, r30
    317c:	87 95       	ror	r24
    317e:	88 27       	eor	r24, r24
    3180:	87 95       	ror	r24
    3182:	94 2f       	mov	r25, r20
    3184:	9f 77       	andi	r25, 0x7F	; 127
    3186:	67 95       	ror	r22
    3188:	66 27       	eor	r22, r22
    318a:	67 95       	ror	r22
    318c:	e6 95       	lsr	r30
    318e:	a9 2f       	mov	r26, r25
    3190:	a8 2b       	or	r26, r24
    3192:	fe 2f       	mov	r31, r30
    3194:	f6 2b       	or	r31, r22
    3196:	62 2f       	mov	r22, r18
    3198:	73 2f       	mov	r23, r19
    319a:	8a 2f       	mov	r24, r26
    319c:	9f 2f       	mov	r25, r31
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	e6 e0       	ldi	r30, 0x06	; 6
    31a4:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x18>

000031a8 <__unpack_f>:
    31a8:	dc 01       	movw	r26, r24
    31aa:	fb 01       	movw	r30, r22
    31ac:	2c 91       	ld	r18, X
    31ae:	11 96       	adiw	r26, 0x01	; 1
    31b0:	3c 91       	ld	r19, X
    31b2:	11 97       	sbiw	r26, 0x01	; 1
    31b4:	12 96       	adiw	r26, 0x02	; 2
    31b6:	8c 91       	ld	r24, X
    31b8:	12 97       	sbiw	r26, 0x02	; 2
    31ba:	48 2f       	mov	r20, r24
    31bc:	4f 77       	andi	r20, 0x7F	; 127
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	98 2f       	mov	r25, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	99 27       	eor	r25, r25
    31c6:	99 1f       	adc	r25, r25
    31c8:	13 96       	adiw	r26, 0x03	; 3
    31ca:	6c 91       	ld	r22, X
    31cc:	13 97       	sbiw	r26, 0x03	; 3
    31ce:	86 2f       	mov	r24, r22
    31d0:	88 0f       	add	r24, r24
    31d2:	89 2b       	or	r24, r25
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	66 1f       	adc	r22, r22
    31d8:	66 27       	eor	r22, r22
    31da:	66 1f       	adc	r22, r22
    31dc:	61 83       	std	Z+1, r22	; 0x01
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	39 f5       	brne	.+78     	; 0x3230 <__unpack_f+0x88>
    31e2:	21 15       	cp	r18, r1
    31e4:	31 05       	cpc	r19, r1
    31e6:	41 05       	cpc	r20, r1
    31e8:	51 05       	cpc	r21, r1
    31ea:	11 f4       	brne	.+4      	; 0x31f0 <__unpack_f+0x48>
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	29 c0       	rjmp	.+82     	; 0x3242 <__unpack_f+0x9a>
    31f0:	82 e8       	ldi	r24, 0x82	; 130
    31f2:	9f ef       	ldi	r25, 0xFF	; 255
    31f4:	93 83       	std	Z+3, r25	; 0x03
    31f6:	82 83       	std	Z+2, r24	; 0x02
    31f8:	67 e0       	ldi	r22, 0x07	; 7
    31fa:	22 0f       	add	r18, r18
    31fc:	33 1f       	adc	r19, r19
    31fe:	44 1f       	adc	r20, r20
    3200:	55 1f       	adc	r21, r21
    3202:	6a 95       	dec	r22
    3204:	d1 f7       	brne	.-12     	; 0x31fa <__unpack_f+0x52>
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	80 83       	st	Z, r24
    320a:	09 c0       	rjmp	.+18     	; 0x321e <__unpack_f+0x76>
    320c:	22 0f       	add	r18, r18
    320e:	33 1f       	adc	r19, r19
    3210:	44 1f       	adc	r20, r20
    3212:	55 1f       	adc	r21, r21
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	93 83       	std	Z+3, r25	; 0x03
    321c:	82 83       	std	Z+2, r24	; 0x02
    321e:	20 30       	cpi	r18, 0x00	; 0
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	38 07       	cpc	r19, r24
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	48 07       	cpc	r20, r24
    3228:	80 e4       	ldi	r24, 0x40	; 64
    322a:	58 07       	cpc	r21, r24
    322c:	78 f3       	brcs	.-34     	; 0x320c <__unpack_f+0x64>
    322e:	20 c0       	rjmp	.+64     	; 0x3270 <__unpack_f+0xc8>
    3230:	8f 3f       	cpi	r24, 0xFF	; 255
    3232:	91 05       	cpc	r25, r1
    3234:	79 f4       	brne	.+30     	; 0x3254 <__unpack_f+0xac>
    3236:	21 15       	cp	r18, r1
    3238:	31 05       	cpc	r19, r1
    323a:	41 05       	cpc	r20, r1
    323c:	51 05       	cpc	r21, r1
    323e:	19 f4       	brne	.+6      	; 0x3246 <__unpack_f+0x9e>
    3240:	84 e0       	ldi	r24, 0x04	; 4
    3242:	80 83       	st	Z, r24
    3244:	08 95       	ret
    3246:	44 ff       	sbrs	r20, 4
    3248:	03 c0       	rjmp	.+6      	; 0x3250 <__unpack_f+0xa8>
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	80 83       	st	Z, r24
    324e:	10 c0       	rjmp	.+32     	; 0x3270 <__unpack_f+0xc8>
    3250:	10 82       	st	Z, r1
    3252:	0e c0       	rjmp	.+28     	; 0x3270 <__unpack_f+0xc8>
    3254:	8f 57       	subi	r24, 0x7F	; 127
    3256:	90 40       	sbci	r25, 0x00	; 0
    3258:	93 83       	std	Z+3, r25	; 0x03
    325a:	82 83       	std	Z+2, r24	; 0x02
    325c:	83 e0       	ldi	r24, 0x03	; 3
    325e:	80 83       	st	Z, r24
    3260:	87 e0       	ldi	r24, 0x07	; 7
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	44 1f       	adc	r20, r20
    3268:	55 1f       	adc	r21, r21
    326a:	8a 95       	dec	r24
    326c:	d1 f7       	brne	.-12     	; 0x3262 <__unpack_f+0xba>
    326e:	50 64       	ori	r21, 0x40	; 64
    3270:	24 83       	std	Z+4, r18	; 0x04
    3272:	35 83       	std	Z+5, r19	; 0x05
    3274:	46 83       	std	Z+6, r20	; 0x06
    3276:	57 83       	std	Z+7, r21	; 0x07
    3278:	08 95       	ret

0000327a <__fpcmp_parts_f>:
    327a:	fc 01       	movw	r30, r24
    327c:	db 01       	movw	r26, r22
    327e:	90 81       	ld	r25, Z
    3280:	92 30       	cpi	r25, 0x02	; 2
    3282:	08 f4       	brcc	.+2      	; 0x3286 <__fpcmp_parts_f+0xc>
    3284:	49 c0       	rjmp	.+146    	; 0x3318 <__fpcmp_parts_f+0x9e>
    3286:	8c 91       	ld	r24, X
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	08 f4       	brcc	.+2      	; 0x328e <__fpcmp_parts_f+0x14>
    328c:	45 c0       	rjmp	.+138    	; 0x3318 <__fpcmp_parts_f+0x9e>
    328e:	94 30       	cpi	r25, 0x04	; 4
    3290:	51 f4       	brne	.+20     	; 0x32a6 <__fpcmp_parts_f+0x2c>
    3292:	61 81       	ldd	r22, Z+1	; 0x01
    3294:	84 30       	cpi	r24, 0x04	; 4
    3296:	b1 f5       	brne	.+108    	; 0x3304 <__fpcmp_parts_f+0x8a>
    3298:	11 96       	adiw	r26, 0x01	; 1
    329a:	2c 91       	ld	r18, X
    329c:	11 97       	sbiw	r26, 0x01	; 1
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	26 1b       	sub	r18, r22
    32a2:	31 09       	sbc	r19, r1
    32a4:	41 c0       	rjmp	.+130    	; 0x3328 <__fpcmp_parts_f+0xae>
    32a6:	84 30       	cpi	r24, 0x04	; 4
    32a8:	21 f0       	breq	.+8      	; 0x32b2 <__fpcmp_parts_f+0x38>
    32aa:	92 30       	cpi	r25, 0x02	; 2
    32ac:	41 f4       	brne	.+16     	; 0x32be <__fpcmp_parts_f+0x44>
    32ae:	82 30       	cpi	r24, 0x02	; 2
    32b0:	b1 f1       	breq	.+108    	; 0x331e <__fpcmp_parts_f+0xa4>
    32b2:	11 96       	adiw	r26, 0x01	; 1
    32b4:	8c 91       	ld	r24, X
    32b6:	11 97       	sbiw	r26, 0x01	; 1
    32b8:	88 23       	and	r24, r24
    32ba:	a1 f1       	breq	.+104    	; 0x3324 <__fpcmp_parts_f+0xaa>
    32bc:	2d c0       	rjmp	.+90     	; 0x3318 <__fpcmp_parts_f+0x9e>
    32be:	61 81       	ldd	r22, Z+1	; 0x01
    32c0:	82 30       	cpi	r24, 0x02	; 2
    32c2:	01 f1       	breq	.+64     	; 0x3304 <__fpcmp_parts_f+0x8a>
    32c4:	11 96       	adiw	r26, 0x01	; 1
    32c6:	8c 91       	ld	r24, X
    32c8:	11 97       	sbiw	r26, 0x01	; 1
    32ca:	68 17       	cp	r22, r24
    32cc:	d9 f4       	brne	.+54     	; 0x3304 <__fpcmp_parts_f+0x8a>
    32ce:	22 81       	ldd	r18, Z+2	; 0x02
    32d0:	33 81       	ldd	r19, Z+3	; 0x03
    32d2:	12 96       	adiw	r26, 0x02	; 2
    32d4:	8d 91       	ld	r24, X+
    32d6:	9c 91       	ld	r25, X
    32d8:	13 97       	sbiw	r26, 0x03	; 3
    32da:	82 17       	cp	r24, r18
    32dc:	93 07       	cpc	r25, r19
    32de:	94 f0       	brlt	.+36     	; 0x3304 <__fpcmp_parts_f+0x8a>
    32e0:	28 17       	cp	r18, r24
    32e2:	39 07       	cpc	r19, r25
    32e4:	bc f0       	brlt	.+46     	; 0x3314 <__fpcmp_parts_f+0x9a>
    32e6:	24 81       	ldd	r18, Z+4	; 0x04
    32e8:	35 81       	ldd	r19, Z+5	; 0x05
    32ea:	46 81       	ldd	r20, Z+6	; 0x06
    32ec:	57 81       	ldd	r21, Z+7	; 0x07
    32ee:	14 96       	adiw	r26, 0x04	; 4
    32f0:	8d 91       	ld	r24, X+
    32f2:	9d 91       	ld	r25, X+
    32f4:	0d 90       	ld	r0, X+
    32f6:	bc 91       	ld	r27, X
    32f8:	a0 2d       	mov	r26, r0
    32fa:	82 17       	cp	r24, r18
    32fc:	93 07       	cpc	r25, r19
    32fe:	a4 07       	cpc	r26, r20
    3300:	b5 07       	cpc	r27, r21
    3302:	18 f4       	brcc	.+6      	; 0x330a <__fpcmp_parts_f+0x90>
    3304:	66 23       	and	r22, r22
    3306:	41 f0       	breq	.+16     	; 0x3318 <__fpcmp_parts_f+0x9e>
    3308:	0d c0       	rjmp	.+26     	; 0x3324 <__fpcmp_parts_f+0xaa>
    330a:	28 17       	cp	r18, r24
    330c:	39 07       	cpc	r19, r25
    330e:	4a 07       	cpc	r20, r26
    3310:	5b 07       	cpc	r21, r27
    3312:	28 f4       	brcc	.+10     	; 0x331e <__fpcmp_parts_f+0xa4>
    3314:	66 23       	and	r22, r22
    3316:	31 f0       	breq	.+12     	; 0x3324 <__fpcmp_parts_f+0xaa>
    3318:	21 e0       	ldi	r18, 0x01	; 1
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	05 c0       	rjmp	.+10     	; 0x3328 <__fpcmp_parts_f+0xae>
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <__fpcmp_parts_f+0xae>
    3324:	2f ef       	ldi	r18, 0xFF	; 255
    3326:	3f ef       	ldi	r19, 0xFF	; 255
    3328:	c9 01       	movw	r24, r18
    332a:	08 95       	ret

0000332c <__udivmodhi4>:
    332c:	aa 1b       	sub	r26, r26
    332e:	bb 1b       	sub	r27, r27
    3330:	51 e1       	ldi	r21, 0x11	; 17
    3332:	07 c0       	rjmp	.+14     	; 0x3342 <__udivmodhi4_ep>

00003334 <__udivmodhi4_loop>:
    3334:	aa 1f       	adc	r26, r26
    3336:	bb 1f       	adc	r27, r27
    3338:	a6 17       	cp	r26, r22
    333a:	b7 07       	cpc	r27, r23
    333c:	10 f0       	brcs	.+4      	; 0x3342 <__udivmodhi4_ep>
    333e:	a6 1b       	sub	r26, r22
    3340:	b7 0b       	sbc	r27, r23

00003342 <__udivmodhi4_ep>:
    3342:	88 1f       	adc	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	5a 95       	dec	r21
    3348:	a9 f7       	brne	.-22     	; 0x3334 <__udivmodhi4_loop>
    334a:	80 95       	com	r24
    334c:	90 95       	com	r25
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	08 95       	ret

00003354 <__divmodhi4>:
    3354:	97 fb       	bst	r25, 7
    3356:	09 2e       	mov	r0, r25
    3358:	07 26       	eor	r0, r23
    335a:	0a d0       	rcall	.+20     	; 0x3370 <__divmodhi4_neg1>
    335c:	77 fd       	sbrc	r23, 7
    335e:	04 d0       	rcall	.+8      	; 0x3368 <__divmodhi4_neg2>
    3360:	e5 df       	rcall	.-54     	; 0x332c <__udivmodhi4>
    3362:	06 d0       	rcall	.+12     	; 0x3370 <__divmodhi4_neg1>
    3364:	00 20       	and	r0, r0
    3366:	1a f4       	brpl	.+6      	; 0x336e <__divmodhi4_exit>

00003368 <__divmodhi4_neg2>:
    3368:	70 95       	com	r23
    336a:	61 95       	neg	r22
    336c:	7f 4f       	sbci	r23, 0xFF	; 255

0000336e <__divmodhi4_exit>:
    336e:	08 95       	ret

00003370 <__divmodhi4_neg1>:
    3370:	f6 f7       	brtc	.-4      	; 0x336e <__divmodhi4_exit>
    3372:	90 95       	com	r25
    3374:	81 95       	neg	r24
    3376:	9f 4f       	sbci	r25, 0xFF	; 255
    3378:	08 95       	ret

0000337a <__divmodsi4>:
    337a:	97 fb       	bst	r25, 7
    337c:	09 2e       	mov	r0, r25
    337e:	05 26       	eor	r0, r21
    3380:	0e d0       	rcall	.+28     	; 0x339e <__divmodsi4_neg1>
    3382:	57 fd       	sbrc	r21, 7
    3384:	04 d0       	rcall	.+8      	; 0x338e <__divmodsi4_neg2>
    3386:	14 d0       	rcall	.+40     	; 0x33b0 <__udivmodsi4>
    3388:	0a d0       	rcall	.+20     	; 0x339e <__divmodsi4_neg1>
    338a:	00 1c       	adc	r0, r0
    338c:	38 f4       	brcc	.+14     	; 0x339c <__divmodsi4_exit>

0000338e <__divmodsi4_neg2>:
    338e:	50 95       	com	r21
    3390:	40 95       	com	r20
    3392:	30 95       	com	r19
    3394:	21 95       	neg	r18
    3396:	3f 4f       	sbci	r19, 0xFF	; 255
    3398:	4f 4f       	sbci	r20, 0xFF	; 255
    339a:	5f 4f       	sbci	r21, 0xFF	; 255

0000339c <__divmodsi4_exit>:
    339c:	08 95       	ret

0000339e <__divmodsi4_neg1>:
    339e:	f6 f7       	brtc	.-4      	; 0x339c <__divmodsi4_exit>
    33a0:	90 95       	com	r25
    33a2:	80 95       	com	r24
    33a4:	70 95       	com	r23
    33a6:	61 95       	neg	r22
    33a8:	7f 4f       	sbci	r23, 0xFF	; 255
    33aa:	8f 4f       	sbci	r24, 0xFF	; 255
    33ac:	9f 4f       	sbci	r25, 0xFF	; 255
    33ae:	08 95       	ret

000033b0 <__udivmodsi4>:
    33b0:	a1 e2       	ldi	r26, 0x21	; 33
    33b2:	1a 2e       	mov	r1, r26
    33b4:	aa 1b       	sub	r26, r26
    33b6:	bb 1b       	sub	r27, r27
    33b8:	fd 01       	movw	r30, r26
    33ba:	0d c0       	rjmp	.+26     	; 0x33d6 <__udivmodsi4_ep>

000033bc <__udivmodsi4_loop>:
    33bc:	aa 1f       	adc	r26, r26
    33be:	bb 1f       	adc	r27, r27
    33c0:	ee 1f       	adc	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	a2 17       	cp	r26, r18
    33c6:	b3 07       	cpc	r27, r19
    33c8:	e4 07       	cpc	r30, r20
    33ca:	f5 07       	cpc	r31, r21
    33cc:	20 f0       	brcs	.+8      	; 0x33d6 <__udivmodsi4_ep>
    33ce:	a2 1b       	sub	r26, r18
    33d0:	b3 0b       	sbc	r27, r19
    33d2:	e4 0b       	sbc	r30, r20
    33d4:	f5 0b       	sbc	r31, r21

000033d6 <__udivmodsi4_ep>:
    33d6:	66 1f       	adc	r22, r22
    33d8:	77 1f       	adc	r23, r23
    33da:	88 1f       	adc	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	1a 94       	dec	r1
    33e0:	69 f7       	brne	.-38     	; 0x33bc <__udivmodsi4_loop>
    33e2:	60 95       	com	r22
    33e4:	70 95       	com	r23
    33e6:	80 95       	com	r24
    33e8:	90 95       	com	r25
    33ea:	9b 01       	movw	r18, r22
    33ec:	ac 01       	movw	r20, r24
    33ee:	bd 01       	movw	r22, r26
    33f0:	cf 01       	movw	r24, r30
    33f2:	08 95       	ret

000033f4 <__prologue_saves__>:
    33f4:	2f 92       	push	r2
    33f6:	3f 92       	push	r3
    33f8:	4f 92       	push	r4
    33fa:	5f 92       	push	r5
    33fc:	6f 92       	push	r6
    33fe:	7f 92       	push	r7
    3400:	8f 92       	push	r8
    3402:	9f 92       	push	r9
    3404:	af 92       	push	r10
    3406:	bf 92       	push	r11
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
    341c:	ca 1b       	sub	r28, r26
    341e:	db 0b       	sbc	r29, r27
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	09 94       	ijmp

0000342c <__epilogue_restores__>:
    342c:	2a 88       	ldd	r2, Y+18	; 0x12
    342e:	39 88       	ldd	r3, Y+17	; 0x11
    3430:	48 88       	ldd	r4, Y+16	; 0x10
    3432:	5f 84       	ldd	r5, Y+15	; 0x0f
    3434:	6e 84       	ldd	r6, Y+14	; 0x0e
    3436:	7d 84       	ldd	r7, Y+13	; 0x0d
    3438:	8c 84       	ldd	r8, Y+12	; 0x0c
    343a:	9b 84       	ldd	r9, Y+11	; 0x0b
    343c:	aa 84       	ldd	r10, Y+10	; 0x0a
    343e:	b9 84       	ldd	r11, Y+9	; 0x09
    3440:	c8 84       	ldd	r12, Y+8	; 0x08
    3442:	df 80       	ldd	r13, Y+7	; 0x07
    3444:	ee 80       	ldd	r14, Y+6	; 0x06
    3446:	fd 80       	ldd	r15, Y+5	; 0x05
    3448:	0c 81       	ldd	r16, Y+4	; 0x04
    344a:	1b 81       	ldd	r17, Y+3	; 0x03
    344c:	aa 81       	ldd	r26, Y+2	; 0x02
    344e:	b9 81       	ldd	r27, Y+1	; 0x01
    3450:	ce 0f       	add	r28, r30
    3452:	d1 1d       	adc	r29, r1
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	ed 01       	movw	r28, r26
    3460:	08 95       	ret

00003462 <ceil>:
    3462:	3b d0       	rcall	.+118    	; 0x34da <__fp_trunc>
    3464:	80 f0       	brcs	.+32     	; 0x3486 <ceil+0x24>
    3466:	9f 37       	cpi	r25, 0x7F	; 127
    3468:	40 f4       	brcc	.+16     	; 0x347a <ceil+0x18>
    346a:	91 11       	cpse	r25, r1
    346c:	0e f4       	brtc	.+2      	; 0x3470 <ceil+0xe>
    346e:	4d c0       	rjmp	.+154    	; 0x350a <__fp_szero>
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	80 e8       	ldi	r24, 0x80	; 128
    3476:	9f e3       	ldi	r25, 0x3F	; 63
    3478:	08 95       	ret
    347a:	26 f0       	brts	.+8      	; 0x3484 <ceil+0x22>
    347c:	1b 16       	cp	r1, r27
    347e:	61 1d       	adc	r22, r1
    3480:	71 1d       	adc	r23, r1
    3482:	81 1d       	adc	r24, r1
    3484:	01 c0       	rjmp	.+2      	; 0x3488 <__fp_mintl>
    3486:	1b c0       	rjmp	.+54     	; 0x34be <__fp_mpack>

00003488 <__fp_mintl>:
    3488:	88 23       	and	r24, r24
    348a:	71 f4       	brne	.+28     	; 0x34a8 <__fp_mintl+0x20>
    348c:	77 23       	and	r23, r23
    348e:	21 f0       	breq	.+8      	; 0x3498 <__fp_mintl+0x10>
    3490:	98 50       	subi	r25, 0x08	; 8
    3492:	87 2b       	or	r24, r23
    3494:	76 2f       	mov	r23, r22
    3496:	07 c0       	rjmp	.+14     	; 0x34a6 <__fp_mintl+0x1e>
    3498:	66 23       	and	r22, r22
    349a:	11 f4       	brne	.+4      	; 0x34a0 <__fp_mintl+0x18>
    349c:	99 27       	eor	r25, r25
    349e:	0d c0       	rjmp	.+26     	; 0x34ba <__fp_mintl+0x32>
    34a0:	90 51       	subi	r25, 0x10	; 16
    34a2:	86 2b       	or	r24, r22
    34a4:	70 e0       	ldi	r23, 0x00	; 0
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	2a f0       	brmi	.+10     	; 0x34b4 <__fp_mintl+0x2c>
    34aa:	9a 95       	dec	r25
    34ac:	66 0f       	add	r22, r22
    34ae:	77 1f       	adc	r23, r23
    34b0:	88 1f       	adc	r24, r24
    34b2:	da f7       	brpl	.-10     	; 0x34aa <__fp_mintl+0x22>
    34b4:	88 0f       	add	r24, r24
    34b6:	96 95       	lsr	r25
    34b8:	87 95       	ror	r24
    34ba:	97 f9       	bld	r25, 7
    34bc:	08 95       	ret

000034be <__fp_mpack>:
    34be:	9f 3f       	cpi	r25, 0xFF	; 255
    34c0:	31 f0       	breq	.+12     	; 0x34ce <__fp_mpack_finite+0xc>

000034c2 <__fp_mpack_finite>:
    34c2:	91 50       	subi	r25, 0x01	; 1
    34c4:	20 f4       	brcc	.+8      	; 0x34ce <__fp_mpack_finite+0xc>
    34c6:	87 95       	ror	r24
    34c8:	77 95       	ror	r23
    34ca:	67 95       	ror	r22
    34cc:	b7 95       	ror	r27
    34ce:	88 0f       	add	r24, r24
    34d0:	91 1d       	adc	r25, r1
    34d2:	96 95       	lsr	r25
    34d4:	87 95       	ror	r24
    34d6:	97 f9       	bld	r25, 7
    34d8:	08 95       	ret

000034da <__fp_trunc>:
    34da:	25 d0       	rcall	.+74     	; 0x3526 <__fp_splitA>
    34dc:	a0 f0       	brcs	.+40     	; 0x3506 <__fp_trunc+0x2c>
    34de:	be e7       	ldi	r27, 0x7E	; 126
    34e0:	b9 17       	cp	r27, r25
    34e2:	88 f4       	brcc	.+34     	; 0x3506 <__fp_trunc+0x2c>
    34e4:	bb 27       	eor	r27, r27
    34e6:	9f 38       	cpi	r25, 0x8F	; 143
    34e8:	60 f4       	brcc	.+24     	; 0x3502 <__fp_trunc+0x28>
    34ea:	16 16       	cp	r1, r22
    34ec:	b1 1d       	adc	r27, r1
    34ee:	67 2f       	mov	r22, r23
    34f0:	78 2f       	mov	r23, r24
    34f2:	88 27       	eor	r24, r24
    34f4:	98 5f       	subi	r25, 0xF8	; 248
    34f6:	f7 cf       	rjmp	.-18     	; 0x34e6 <__fp_trunc+0xc>
    34f8:	86 95       	lsr	r24
    34fa:	77 95       	ror	r23
    34fc:	67 95       	ror	r22
    34fe:	b1 1d       	adc	r27, r1
    3500:	93 95       	inc	r25
    3502:	96 39       	cpi	r25, 0x96	; 150
    3504:	c8 f3       	brcs	.-14     	; 0x34f8 <__fp_trunc+0x1e>
    3506:	08 95       	ret

00003508 <__fp_zero>:
    3508:	e8 94       	clt

0000350a <__fp_szero>:
    350a:	bb 27       	eor	r27, r27
    350c:	66 27       	eor	r22, r22
    350e:	77 27       	eor	r23, r23
    3510:	cb 01       	movw	r24, r22
    3512:	97 f9       	bld	r25, 7
    3514:	08 95       	ret

00003516 <__fp_split3>:
    3516:	57 fd       	sbrc	r21, 7
    3518:	90 58       	subi	r25, 0x80	; 128
    351a:	44 0f       	add	r20, r20
    351c:	55 1f       	adc	r21, r21
    351e:	59 f0       	breq	.+22     	; 0x3536 <__fp_splitA+0x10>
    3520:	5f 3f       	cpi	r21, 0xFF	; 255
    3522:	71 f0       	breq	.+28     	; 0x3540 <__fp_splitA+0x1a>
    3524:	47 95       	ror	r20

00003526 <__fp_splitA>:
    3526:	88 0f       	add	r24, r24
    3528:	97 fb       	bst	r25, 7
    352a:	99 1f       	adc	r25, r25
    352c:	61 f0       	breq	.+24     	; 0x3546 <__fp_splitA+0x20>
    352e:	9f 3f       	cpi	r25, 0xFF	; 255
    3530:	79 f0       	breq	.+30     	; 0x3550 <__fp_splitA+0x2a>
    3532:	87 95       	ror	r24
    3534:	08 95       	ret
    3536:	12 16       	cp	r1, r18
    3538:	13 06       	cpc	r1, r19
    353a:	14 06       	cpc	r1, r20
    353c:	55 1f       	adc	r21, r21
    353e:	f2 cf       	rjmp	.-28     	; 0x3524 <__fp_split3+0xe>
    3540:	46 95       	lsr	r20
    3542:	f1 df       	rcall	.-30     	; 0x3526 <__fp_splitA>
    3544:	08 c0       	rjmp	.+16     	; 0x3556 <__fp_splitA+0x30>
    3546:	16 16       	cp	r1, r22
    3548:	17 06       	cpc	r1, r23
    354a:	18 06       	cpc	r1, r24
    354c:	99 1f       	adc	r25, r25
    354e:	f1 cf       	rjmp	.-30     	; 0x3532 <__fp_splitA+0xc>
    3550:	86 95       	lsr	r24
    3552:	71 05       	cpc	r23, r1
    3554:	61 05       	cpc	r22, r1
    3556:	08 94       	sec
    3558:	08 95       	ret

0000355a <_exit>:
    355a:	f8 94       	cli

0000355c <__stop_program>:
    355c:	ff cf       	rjmp	.-2      	; 0x355c <__stop_program>
