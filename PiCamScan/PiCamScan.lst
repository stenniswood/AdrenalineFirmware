
PiCamScan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  00003ee0  00003f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ee0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ac  00800238  00800238  000040ac  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  000040ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002fe  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000460  00000000  00000000  0000533a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001775  00000000  00000000  0000579a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007a14  00000000  00000000  00006f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000319c  00000000  00000000  0000e923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000516b  00000000  00000000  00011abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000eb0  00000000  00000000  00016c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002498  00000000  00000000  00017adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000323f  00000000  00000000  00019f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000009e1  00000000  00000000  0001d1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002d0  00000000  00000000  0001db94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__vector_26>
      6c:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ee       	ldi	r30, 0xE0	; 224
      a0:	fe e3       	ldi	r31, 0x3E	; 62
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a8 33       	cpi	r26, 0x38	; 56
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a8 e3       	ldi	r26, 0x38	; 56
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a4 3e       	cpi	r26, 0xE4	; 228
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
      c2:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z4initv>:
	ADCSRA = 0;	// disabled!
}*/

void init()
{
	cli();
      ca:	f8 94       	cli
	chip_init   ( );	
      cc:	0e 94 80 11 	call	0x2300	; 0x2300 <_Z9chip_initv>
	// CAM SCAN's LEDs go directly from the Raspberry Pi and not this Atmel part.
	
	delay(10000);					// ~ 1 sec
      d0:	60 e1       	ldi	r22, 0x10	; 16
      d2:	77 e2       	ldi	r23, 0x27	; 39
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
	//config_init();
	//can_instance_init();	
	//set_configure_callback	( config_change );			
	//set_rx_callback( can_file_message );	// empty

	spi_init( FALSE, FALSE, 0, 0 );
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	40 e0       	ldi	r20, 0x00	; 0
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <spi_init>
	set_spi_isr_callback( spi_callback );
      e8:	8b ef       	ldi	r24, 0xFB	; 251
      ea:	94 e0       	ldi	r25, 0x04	; 4
      ec:	0e 94 40 15 	call	0x2a80	; 0x2a80 <set_spi_isr_callback>
	sei();
      f0:	78 94       	sei

//	lowside_init  ( );
	servos_init   ( );
      f2:	0e 94 8b 05 	call	0xb16	; 0xb16 <servos_init>
//	adc_init      ( );
//	start_sampling( );
	
	OS_InitTask   ( );
      f6:	0e 94 8c 11 	call	0x2318	; 0x2318 <_Z11OS_InitTaskv>
}
      fa:	08 95       	ret

000000fc <_Z10servo_scanv>:
//***** main *****************************************************
byte  count = 0;
float angle = -60.0;
float increment = (60.0*2.0 / 600.0);
void servo_scan()
{
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
	/* Scan both servos!		*/
	if (angle >  60.0) increment = -fabs(increment);
     10c:	a0 90 00 01 	lds	r10, 0x0100
     110:	b0 90 01 01 	lds	r11, 0x0101
     114:	c0 90 02 01 	lds	r12, 0x0102
     118:	d0 90 03 01 	lds	r13, 0x0103
     11c:	c6 01       	movw	r24, r12
     11e:	b5 01       	movw	r22, r10
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e7       	ldi	r20, 0x70	; 112
     126:	52 e4       	ldi	r21, 0x42	; 66
     128:	0e 94 94 1a 	call	0x3528	; 0x3528 <__gtsf2>
     12c:	18 16       	cp	r1, r24
     12e:	0c f4       	brge	.+2      	; 0x132 <_Z10servo_scanv+0x36>
     130:	4c c0       	rjmp	.+152    	; 0x1ca <_Z10servo_scanv+0xce>
     132:	e0 90 04 01 	lds	r14, 0x0104
     136:	f0 90 05 01 	lds	r15, 0x0105
     13a:	00 91 06 01 	lds	r16, 0x0106
     13e:	10 91 07 01 	lds	r17, 0x0107
	if (angle < -60.0) increment = +fabs(increment);
     142:	c6 01       	movw	r24, r12
     144:	b5 01       	movw	r22, r10
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e7       	ldi	r20, 0x70	; 112
     14c:	52 ec       	ldi	r21, 0xC2	; 194
     14e:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__ltsf2>
     152:	87 ff       	sbrs	r24, 7
     154:	0a c0       	rjmp	.+20     	; 0x16a <_Z10servo_scanv+0x6e>
     156:	e8 94       	clt
     158:	17 f9       	bld	r17, 7
     15a:	e0 92 04 01 	sts	0x0104, r14
     15e:	f0 92 05 01 	sts	0x0105, r15
     162:	00 93 06 01 	sts	0x0106, r16
     166:	10 93 07 01 	sts	0x0107, r17
	angle  += increment;
     16a:	c6 01       	movw	r24, r12
     16c:	b5 01       	movw	r22, r10
     16e:	a8 01       	movw	r20, r16
     170:	97 01       	movw	r18, r14
     172:	0e 94 8e 18 	call	0x311c	; 0x311c <__addsf3>
     176:	e8 2f       	mov	r30, r24
     178:	b6 2f       	mov	r27, r22
     17a:	a7 2f       	mov	r26, r23
     17c:	2b 2f       	mov	r18, r27
     17e:	3a 2f       	mov	r19, r26
     180:	4e 2f       	mov	r20, r30
     182:	59 2f       	mov	r21, r25
     184:	20 93 00 01 	sts	0x0100, r18
     188:	30 93 01 01 	sts	0x0101, r19
     18c:	40 93 02 01 	sts	0x0102, r20
     190:	50 93 03 01 	sts	0x0103, r21

	set_angle(1, angle);
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	46 2f       	mov	r20, r22
     198:	57 2f       	mov	r21, r23
     19a:	6e 2f       	mov	r22, r30
     19c:	79 2f       	mov	r23, r25
     19e:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
	set_angle(2, angle);
     1a2:	40 91 00 01 	lds	r20, 0x0100
     1a6:	50 91 01 01 	lds	r21, 0x0101
     1aa:	60 91 02 01 	lds	r22, 0x0102
     1ae:	70 91 03 01 	lds	r23, 0x0103
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret
float angle = -60.0;
float increment = (60.0*2.0 / 600.0);
void servo_scan()
{
	/* Scan both servos!		*/
	if (angle >  60.0) increment = -fabs(increment);
     1ca:	e0 90 04 01 	lds	r14, 0x0104
     1ce:	f0 90 05 01 	lds	r15, 0x0105
     1d2:	00 91 06 01 	lds	r16, 0x0106
     1d6:	10 91 07 01 	lds	r17, 0x0107
     1da:	e8 94       	clt
     1dc:	17 f9       	bld	r17, 7
     1de:	17 fb       	bst	r17, 7
     1e0:	10 95       	com	r17
     1e2:	17 f9       	bld	r17, 7
     1e4:	10 95       	com	r17
     1e6:	e0 92 04 01 	sts	0x0104, r14
     1ea:	f0 92 05 01 	sts	0x0105, r15
     1ee:	00 93 06 01 	sts	0x0106, r16
     1f2:	10 93 07 01 	sts	0x0107, r17
     1f6:	a5 cf       	rjmp	.-182    	; 0x142 <_Z10servo_scanv+0x46>

000001f8 <_Z15process_spi_msgv>:
}

void process_spi_msg()
{
	
}
     1f8:	08 95       	ret

000001fa <main>:

int main(void)
{
    init();
     1fa:	0e 94 65 00 	call	0xca	; 0xca <_Z4initv>
    set_angle(1, 0.0);	    
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	ba 01       	movw	r22, r20
     206:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
    {
	    //set_angle(2, -30.0);
		//servo_scan();
		//delay(10000);
		//set_angle(2, 30.0);
		delay(10000);		
     20a:	60 e1       	ldi	r22, 0x10	; 16
     20c:	77 e2       	ldi	r23, 0x27	; 39
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
     216:	f9 cf       	rjmp	.-14     	; 0x20a <main+0x10>

00000218 <_Z15set_rows_outputv>:


/******************** ROW DDR (INPUT/OUTPUT) ******************/
void set_rows_output()
{
  ROW_DDR |= ROW_DDR_MASK;
     218:	84 b1       	in	r24, 0x04	; 4
     21a:	8c 67       	ori	r24, 0x7C	; 124
     21c:	84 b9       	out	0x04, r24	; 4
}
     21e:	08 95       	ret

00000220 <_Z14set_rows_inputv>:
void set_rows_input()
{
  ROW_DDR &= (~ROW_DDR_MASK);
     220:	84 b1       	in	r24, 0x04	; 4
     222:	83 78       	andi	r24, 0x83	; 131
     224:	84 b9       	out	0x04, r24	; 4
}
     226:	08 95       	ret

00000228 <_Z12all_rows_lowv>:
void all_rows_low()
{  
  ROW_PORT &= (~ROW_DDR_MASK);
     228:	85 b1       	in	r24, 0x05	; 5
     22a:	83 78       	andi	r24, 0x83	; 131
     22c:	85 b9       	out	0x05, r24	; 5
}
     22e:	08 95       	ret

00000230 <_Z13all_rows_highv>:
void all_rows_high()
{
  ROW_PORT |= ROW_DDR_MASK;
     230:	85 b1       	in	r24, 0x05	; 5
     232:	8c 67       	ori	r24, 0x7C	; 124
     234:	85 b9       	out	0x05, r24	; 5
}
     236:	08 95       	ret

00000238 <_Z7set_rowhh>:
/********************************************************
 Then to isolate the row, put all rows high except for 1 
 *******************************************************/
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	b9 f0       	breq	.+46     	; 0x26a <_Z7set_rowhh+0x32>
     23c:	83 30       	cpi	r24, 0x03	; 3
     23e:	28 f0       	brcs	.+10     	; 0x24a <_Z7set_rowhh+0x12>
     240:	83 30       	cpi	r24, 0x03	; 3
     242:	b9 f0       	breq	.+46     	; 0x272 <_Z7set_rowhh+0x3a>
     244:	84 30       	cpi	r24, 0x04	; 4
     246:	69 f0       	breq	.+26     	; 0x262 <_Z7set_rowhh+0x2a>
     248:	08 95       	ret
     24a:	88 23       	and	r24, r24
     24c:	31 f0       	breq	.+12     	; 0x25a <_Z7set_rowhh+0x22>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	d9 f7       	brne	.-10     	; 0x248 <_Z7set_rowhh+0x10>
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
     252:	66 23       	and	r22, r22
     254:	91 f0       	breq	.+36     	; 0x27a <_Z7set_rowhh+0x42>
     256:	2b 9a       	sbi	0x05, 3	; 5
     258:	08 95       	ret
 *******************************************************/
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
     25a:	66 23       	and	r22, r22
     25c:	81 f0       	breq	.+32     	; 0x27e <_Z7set_rowhh+0x46>
     25e:	2a 9a       	sbi	0x05, 2	; 5
     260:	08 95       	ret
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
    case 2 : if (mHigh) ROW_PORT|= ROW2; else ROW_PORT &= ~ROW2; break;		// Row	2
    case 3 : if (mHigh) ROW_PORT|= ROW3; else ROW_PORT &= ~ROW3; break; 	// Row	3
    case 4 : if (mHigh) ROW_PORT|= ROW4; else ROW_PORT &= ~ROW4; break;		// Row  4
     262:	66 23       	and	r22, r22
     264:	91 f4       	brne	.+36     	; 0x28a <_Z7set_rowhh+0x52>
     266:	2e 98       	cbi	0x05, 6	; 5
     268:	08 95       	ret
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
    case 2 : if (mHigh) ROW_PORT|= ROW2; else ROW_PORT &= ~ROW2; break;		// Row	2
     26a:	66 23       	and	r22, r22
     26c:	51 f0       	breq	.+20     	; 0x282 <_Z7set_rowhh+0x4a>
     26e:	2c 9a       	sbi	0x05, 4	; 5
     270:	08 95       	ret
    case 3 : if (mHigh) ROW_PORT|= ROW3; else ROW_PORT &= ~ROW3; break; 	// Row	3
     272:	66 23       	and	r22, r22
     274:	41 f0       	breq	.+16     	; 0x286 <_Z7set_rowhh+0x4e>
     276:	2d 9a       	sbi	0x05, 5	; 5
     278:	08 95       	ret
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
     27a:	2b 98       	cbi	0x05, 3	; 5
     27c:	08 95       	ret
 *******************************************************/
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
     27e:	2a 98       	cbi	0x05, 2	; 5
     280:	08 95       	ret
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
    case 2 : if (mHigh) ROW_PORT|= ROW2; else ROW_PORT &= ~ROW2; break;		// Row	2
     282:	2c 98       	cbi	0x05, 4	; 5
     284:	08 95       	ret
    case 3 : if (mHigh) ROW_PORT|= ROW3; else ROW_PORT &= ~ROW3; break; 	// Row	3
     286:	2d 98       	cbi	0x05, 5	; 5
     288:	08 95       	ret
    case 4 : if (mHigh) ROW_PORT|= ROW4; else ROW_PORT &= ~ROW4; break;		// Row  4
     28a:	2e 9a       	sbi	0x05, 6	; 5
     28c:	08 95       	ret

0000028e <_Z18set_switches_inputv>:
}

/******************** SWITCHES ******************/
void set_switches_input()
{	// internal pullup needed?  no because external
	SWITCH_DDR &= (~SWITCH_DDR_MASK);
     28e:	87 b1       	in	r24, 0x07	; 7
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	87 b9       	out	0x07, r24	; 7
}
     294:	08 95       	ret

00000296 <_Z19set_switches_outputv>:
void set_switches_output()
{
	SWITCH_DDR |= SWITCH_DDR_MASK;
     296:	87 b1       	in	r24, 0x07	; 7
     298:	80 6f       	ori	r24, 0xF0	; 240
     29a:	87 b9       	out	0x07, r24	; 7
}
     29c:	08 95       	ret

0000029e <_Z13read_switchesv>:
	0xDF => 1101 a button in both col 5 is pushed
********************************************************/
byte read_switches()
{
  byte combined;
  combined = (SWITCH_IN_PORT & SWITCH_DDR_MASK);
     29e:	86 b1       	in	r24, 0x06	; 6
  return combined;
}
     2a0:	80 7f       	andi	r24, 0xF0	; 240
     2a2:	08 95       	ret

000002a4 <_Z10pack_arrayPh>:

 //static union uKeyRoster retval;
union uKeyRoster pack_array( byte* mKeyArray )
{
	static union uKeyRoster retval;
	byte index = 0;
     2a4:	e8 2f       	mov	r30, r24
     2a6:	f9 2f       	mov	r31, r25

	// combine odd rows into lower nibble.
	// all keys should only take 2.5 bytes
	// extra .5 byte stores count of keys pressed.
	for (int i=0; i<NUM_ROWS; i++)
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0

 //static union uKeyRoster retval;
union uKeyRoster pack_array( byte* mKeyArray )
{
	static union uKeyRoster retval;
	byte index = 0;
     2ac:	20 e0       	ldi	r18, 0x00	; 0
	// combine odd rows into lower nibble.
	// all keys should only take 2.5 bytes
	// extra .5 byte stores count of keys pressed.
	for (int i=0; i<NUM_ROWS; i++)
	{
		if ((i%2)==0)
     2ae:	80 fd       	sbrc	r24, 0
     2b0:	15 c0       	rjmp	.+42     	; 0x2dc <_Z10pack_arrayPh+0x38>
			retval.array[index] = (mKeyArray[i] & 0xF0);							// upper nibble
     2b2:	a2 2f       	mov	r26, r18
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	a2 5a       	subi	r26, 0xA2	; 162
     2b8:	bd 4f       	sbci	r27, 0xFD	; 253
     2ba:	30 81       	ld	r19, Z
     2bc:	30 7f       	andi	r19, 0xF0	; 240
     2be:	3c 93       	st	X, r19
	byte index = 0;

	// combine odd rows into lower nibble.
	// all keys should only take 2.5 bytes
	// extra .5 byte stores count of keys pressed.
	for (int i=0; i<NUM_ROWS; i++)
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	31 96       	adiw	r30, 0x01	; 1
     2c4:	85 30       	cpi	r24, 0x05	; 5
     2c6:	91 05       	cpc	r25, r1
     2c8:	91 f7       	brne	.-28     	; 0x2ae <_Z10pack_arrayPh+0xa>
		else {
			retval.array[index] |= ((mKeyArray[i] & 0xF0) >> 4);		// lower nibble
			index++;
		}
	}
	return retval;
     2ca:	60 91 5e 02 	lds	r22, 0x025E
     2ce:	70 91 5f 02 	lds	r23, 0x025F
}
     2d2:	80 91 60 02 	lds	r24, 0x0260
     2d6:	90 91 61 02 	lds	r25, 0x0261
     2da:	08 95       	ret
	for (int i=0; i<NUM_ROWS; i++)
	{
		if ((i%2)==0)
			retval.array[index] = (mKeyArray[i] & 0xF0);							// upper nibble
		else {
			retval.array[index] |= ((mKeyArray[i] & 0xF0) >> 4);		// lower nibble
     2dc:	a2 2f       	mov	r26, r18
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	a2 5a       	subi	r26, 0xA2	; 162
     2e2:	bd 4f       	sbci	r27, 0xFD	; 253
     2e4:	40 81       	ld	r20, Z
     2e6:	42 95       	swap	r20
     2e8:	4f 70       	andi	r20, 0x0F	; 15
     2ea:	3c 91       	ld	r19, X
     2ec:	34 2b       	or	r19, r20
     2ee:	3c 93       	st	X, r19
			index++;
     2f0:	2f 5f       	subi	r18, 0xFF	; 255
     2f2:	e6 cf       	rjmp	.-52     	; 0x2c0 <_Z10pack_arrayPh+0x1c>

000002f4 <_Z9scan_keysPh>:
array[3] 	  	 Row (3)
array[4]   		 Row (2)
BITS are in UPPER NIBBLE!
************************************************/
void scan_keys( byte* mkeys )
{
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
{  
  ROW_PORT &= (~ROW_DDR_MASK);
}
void all_rows_high()
{
  ROW_PORT |= ROW_DDR_MASK;
     2fc:	25 b1       	in	r18, 0x05	; 5
     2fe:	2c 67       	ori	r18, 0x7C	; 124
     300:	25 b9       	out	0x05, r18	; 5
     302:	08 2f       	mov	r16, r24
     304:	19 2f       	mov	r17, r25
BITS are in UPPER NIBBLE!
************************************************/
void scan_keys( byte* mkeys )
{
  all_rows_high();
  for (int i=0; i<NUM_ROWS; i++)
     306:	c0 e0       	ldi	r28, 0x00	; 0
     308:	d0 e0       	ldi	r29, 0x00	; 0
  {
     set_row( i, 0 );
     30a:	8c 2f       	mov	r24, r28
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	0e 94 1c 01 	call	0x238	; 0x238 <_Z7set_rowhh>
	 delay(CHARGE_TIME);
     312:	6c e2       	ldi	r22, 0x2C	; 44
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
	0xDF => 1101 a button in both col 5 is pushed
********************************************************/
byte read_switches()
{
  byte combined;
  combined = (SWITCH_IN_PORT & SWITCH_DDR_MASK);
     31e:	86 b1       	in	r24, 0x06	; 6
     320:	80 7f       	andi	r24, 0xF0	; 240
  all_rows_high();
  for (int i=0; i<NUM_ROWS; i++)
  {
     set_row( i, 0 );
	 delay(CHARGE_TIME);
	 mkeys[i] = read_switches();	// upper nibble
     322:	f8 01       	movw	r30, r16
     324:	81 93       	st	Z+, r24
     326:	8f 01       	movw	r16, r30
     set_row( i, 1 );				// restore so not to affect the next row
     328:	8c 2f       	mov	r24, r28
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	0e 94 1c 01 	call	0x238	; 0x238 <_Z7set_rowhh>
BITS are in UPPER NIBBLE!
************************************************/
void scan_keys( byte* mkeys )
{
  all_rows_high();
  for (int i=0; i<NUM_ROWS; i++)
     330:	21 96       	adiw	r28, 0x01	; 1
     332:	c5 30       	cpi	r28, 0x05	; 5
     334:	d1 05       	cpc	r29, r1
     336:	49 f7       	brne	.-46     	; 0x30a <_Z9scan_keysPh+0x16>
     set_row( i, 0 );
	 delay(CHARGE_TIME);
	 mkeys[i] = read_switches();	// upper nibble
     set_row( i, 1 );				// restore so not to affect the next row
  }
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <_Z16check_for_changePhS_>:
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
	    return 1;
  }
  return 0;
     342:	a8 2f       	mov	r26, r24
     344:	b9 2f       	mov	r27, r25
     346:	e6 2f       	mov	r30, r22
     348:	f7 2f       	mov	r31, r23
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
  {
	 if (mSrc1[i] != mSrc2[i])
     34e:	3d 91       	ld	r19, X+
     350:	21 91       	ld	r18, Z+
     352:	32 17       	cp	r19, r18
     354:	31 f4       	brne	.+12     	; 0x362 <_Z16check_for_changePhS_+0x20>
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	85 30       	cpi	r24, 0x05	; 5
     35a:	91 05       	cpc	r25, r1
     35c:	c1 f7       	brne	.-16     	; 0x34e <_Z16check_for_changePhS_+0xc>
  {
	 if (mSrc1[i] != mSrc2[i])
	    return 1;
  }
  return 0;
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	08 95       	ret
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
	    return 1;
     362:	81 e0       	ldi	r24, 0x01	; 1
  }
  return 0;
}
     364:	08 95       	ret

00000366 <_Z16update_prev_keysv>:

void update_prev_keys()
{  
  for (int i=0; i<NUM_ROWS; i++)
	 prev_keys[i] = keys[i];
     366:	80 91 4d 02 	lds	r24, 0x024D
     36a:	80 93 48 02 	sts	0x0248, r24
     36e:	80 91 4e 02 	lds	r24, 0x024E
     372:	80 93 49 02 	sts	0x0249, r24
     376:	80 91 4f 02 	lds	r24, 0x024F
     37a:	80 93 4a 02 	sts	0x024A, r24
     37e:	80 91 50 02 	lds	r24, 0x0250
     382:	80 93 4b 02 	sts	0x024B, r24
     386:	80 91 51 02 	lds	r24, 0x0251
     38a:	80 93 4c 02 	sts	0x024C, r24
}
     38e:	08 95       	ret

00000390 <_Z12buttons_initv>:

void buttons_init()
{
	for (int i=0; i<NUM_ROWS; i++)
		prev_keys[i] = 0xFF;		// assume all up.
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	80 93 48 02 	sts	0x0248, r24
     396:	80 93 49 02 	sts	0x0249, r24
     39a:	80 93 4a 02 	sts	0x024A, r24
     39e:	80 93 4b 02 	sts	0x024B, r24
     3a2:	80 93 4c 02 	sts	0x024C, r24


/******************** ROW DDR (INPUT/OUTPUT) ******************/
void set_rows_output()
{
  ROW_DDR |= ROW_DDR_MASK;
     3a6:	84 b1       	in	r24, 0x04	; 4
     3a8:	8c 67       	ori	r24, 0x7C	; 124
     3aa:	84 b9       	out	0x04, r24	; 4
}

/******************** SWITCHES ******************/
void set_switches_input()
{	// internal pullup needed?  no because external
	SWITCH_DDR &= (~SWITCH_DDR_MASK);
     3ac:	87 b1       	in	r24, 0x07	; 7
     3ae:	8f 70       	andi	r24, 0x0F	; 15
     3b0:	87 b9       	out	0x07, r24	; 7
	for (int i=0; i<NUM_ROWS; i++)
		prev_keys[i] = 0xFF;		// assume all up.
	set_rows_output();
	//all_rows_low();
	set_switches_input();
	scan_keys(keys);
     3b2:	8d e4       	ldi	r24, 0x4D	; 77
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z9scan_keysPh>
}

void update_prev_keys()
{  
  for (int i=0; i<NUM_ROWS; i++)
	 prev_keys[i] = keys[i];
     3ba:	80 91 4d 02 	lds	r24, 0x024D
     3be:	80 93 48 02 	sts	0x0248, r24
     3c2:	80 91 4e 02 	lds	r24, 0x024E
     3c6:	80 93 49 02 	sts	0x0249, r24
     3ca:	80 91 4f 02 	lds	r24, 0x024F
     3ce:	80 93 4a 02 	sts	0x024A, r24
     3d2:	80 91 50 02 	lds	r24, 0x0250
     3d6:	80 93 4b 02 	sts	0x024B, r24
     3da:	80 91 51 02 	lds	r24, 0x0251
     3de:	80 93 4c 02 	sts	0x024C, r24
	set_rows_output();
	//all_rows_low();
	set_switches_input();
	scan_keys(keys);
	update_prev_keys();
}
     3e2:	08 95       	ret

000003e4 <_Z14wait_for_pressv>:
The column(s) affected are the 0 bits.
ie.  0xEF  means a button on SW1 column is pushed.
ie.  0x7F  means a button on SW4 & SW3 columns are pushed.
***********************************************************/
void wait_for_press()
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29


/******************** ROW DDR (INPUT/OUTPUT) ******************/
void set_rows_output()
{
  ROW_DDR |= ROW_DDR_MASK;
     3e8:	84 b1       	in	r24, 0x04	; 4
     3ea:	8c 67       	ori	r24, 0x7C	; 124
     3ec:	84 b9       	out	0x04, r24	; 4
{
  ROW_DDR &= (~ROW_DDR_MASK);
}
void all_rows_low()
{  
  ROW_PORT &= (~ROW_DDR_MASK);
     3ee:	85 b1       	in	r24, 0x05	; 5
     3f0:	83 78       	andi	r24, 0x83	; 131
     3f2:	85 b9       	out	0x05, r24	; 5
}

/******************** SWITCHES ******************/
void set_switches_input()
{	// internal pullup needed?  no because external
	SWITCH_DDR &= (~SWITCH_DDR_MASK);
     3f4:	87 b1       	in	r24, 0x07	; 7
     3f6:	8f 70       	andi	r24, 0x0F	; 15
     3f8:	87 b9       	out	0x07, r24	; 7

	// If there are no glitches _slower_ than 5ms.  This will work.
	// repeat until first sign of change:
	do {
		do { 
			scan_keys(keys);
     3fa:	8d e4       	ldi	r24, 0x4D	; 77
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z9scan_keysPh>
     402:	c8 e4       	ldi	r28, 0x48	; 72
     404:	d2 e0       	ldi	r29, 0x02	; 2
     406:	ad e4       	ldi	r26, 0x4D	; 77
     408:	b2 e0       	ldi	r27, 0x02	; 2
Return :   Pickup results in the "keys" array.
The column(s) affected are the 0 bits.
ie.  0xEF  means a button on SW1 column is pushed.
ie.  0x7F  means a button on SW4 & SW3 columns are pushed.
***********************************************************/
void wait_for_press()
     40a:	fe 01       	movw	r30, r28
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
     40c:	91 91       	ld	r25, Z+
     40e:	8d 91       	ld	r24, X+
     410:	98 17       	cp	r25, r24
     412:	41 f4       	brne	.+16     	; 0x424 <_Z14wait_for_pressv+0x40>
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	ed 34       	cpi	r30, 0x4D	; 77
     418:	f8 07       	cpc	r31, r24
     41a:	79 f3       	breq	.-34     	; 0x3fa <_Z14wait_for_pressv+0x16>
  {
	 if (mSrc1[i] != mSrc2[i])
     41c:	91 91       	ld	r25, Z+
     41e:	8d 91       	ld	r24, X+
     420:	98 17       	cp	r25, r24
     422:	c1 f3       	breq	.-16     	; 0x414 <_Z14wait_for_pressv+0x30>
			scan_keys(keys);
			change = check_for_change(prev_keys, keys); 
		} while (change==0);

		// slight delay ~5ms
		delay(5);		// adjust time for 5ms!
     424:	65 e0       	ldi	r22, 0x05	; 5
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
		/* Reread : 
			if still different from previous, 
				then real debounce event
			if return to previous,
				then ignore the event		*/
			scan_keys( keys2 );
     430:	82 e5       	ldi	r24, 0x52	; 82
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z9scan_keysPh>
     438:	e2 e5       	ldi	r30, 0x52	; 82
     43a:	f2 e0       	ldi	r31, 0x02	; 2
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
     43c:	99 91       	ld	r25, Y+
     43e:	81 91       	ld	r24, Z+
     440:	98 17       	cp	r25, r24
     442:	41 f4       	brne	.+16     	; 0x454 <_Z14wait_for_pressv+0x70>
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	cd 34       	cpi	r28, 0x4D	; 77
     448:	d8 07       	cpc	r29, r24
     44a:	b9 f2       	breq	.-82     	; 0x3fa <_Z14wait_for_pressv+0x16>
  {
	 if (mSrc1[i] != mSrc2[i])
     44c:	99 91       	ld	r25, Y+
     44e:	81 91       	ld	r24, Z+
     450:	98 17       	cp	r25, r24
     452:	c1 f3       	breq	.-16     	; 0x444 <_Z14wait_for_pressv+0x60>
}

void update_prev_keys()
{  
  for (int i=0; i<NUM_ROWS; i++)
	 prev_keys[i] = keys[i];
     454:	80 91 4d 02 	lds	r24, 0x024D
     458:	80 93 48 02 	sts	0x0248, r24
     45c:	80 91 4e 02 	lds	r24, 0x024E
     460:	80 93 49 02 	sts	0x0249, r24
     464:	80 91 4f 02 	lds	r24, 0x024F
     468:	80 93 4a 02 	sts	0x024A, r24
     46c:	80 91 50 02 	lds	r24, 0x0250
     470:	80 93 4b 02 	sts	0x024B, r24
     474:	80 91 51 02 	lds	r24, 0x0251
     478:	80 93 4c 02 	sts	0x024C, r24
			change = check_for_change( prev_keys, keys2 );
	} while	( change==0 );	// the change has to remain for the debounce time or else not valid.

	// Real event!
	update_prev_keys();
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <_Z10get_columnh>:
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
		if ((mColByte & (1<<i))==0)
			return	i-4;
    return -1;
     482:	90 e0       	ldi	r25, 0x00	; 0
Converts the upper nibble of the column into an actual index
*************************************************************/
byte get_column(byte mColByte)
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
     484:	24 e0       	ldi	r18, 0x04	; 4
     486:	30 e0       	ldi	r19, 0x00	; 0
		if ((mColByte & (1<<i))==0)
     488:	ac 01       	movw	r20, r24
     48a:	02 2e       	mov	r0, r18
     48c:	02 c0       	rjmp	.+4      	; 0x492 <_Z10get_columnh+0x10>
     48e:	55 95       	asr	r21
     490:	47 95       	ror	r20
     492:	0a 94       	dec	r0
     494:	e2 f7       	brpl	.-8      	; 0x48e <_Z10get_columnh+0xc>
     496:	40 ff       	sbrs	r20, 0
     498:	07 c0       	rjmp	.+14     	; 0x4a8 <_Z10get_columnh+0x26>
Converts the upper nibble of the column into an actual index
*************************************************************/
byte get_column(byte mColByte)
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
     49a:	2f 5f       	subi	r18, 0xFF	; 255
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	28 30       	cpi	r18, 0x08	; 8
     4a0:	31 05       	cpc	r19, r1
     4a2:	91 f7       	brne	.-28     	; 0x488 <_Z10get_columnh+0x6>
		if ((mColByte & (1<<i))==0)
			return	i-4;
    return -1;
     4a4:	8f ef       	ldi	r24, 0xFF	; 255
}
     4a6:	08 95       	ret
byte get_column(byte mColByte)
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
		if ((mColByte & (1<<i))==0)
			return	i-4;
     4a8:	82 2f       	mov	r24, r18
     4aa:	84 50       	subi	r24, 0x04	; 4
     4ac:	08 95       	ret

000004ae <_Z8add_keyshh>:
		mNumberKeysPressed
************************************************************/
void add_keys( byte mrow, byte mStartKeyNumber )
{
	// Scan each bit:
	for (int i=4; i<8; i++)
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	70 91 57 02 	lds	r23, 0x0257
     4b4:	24 e0       	ldi	r18, 0x04	; 4
     4b6:	30 e0       	ldi	r19, 0x00	; 0
		if (  (mrow & (1<<i)) == 0  )	// pressed,
     4b8:	ac 01       	movw	r20, r24
     4ba:	02 2e       	mov	r0, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <_Z8add_keyshh+0x14>
     4be:	55 95       	asr	r21
     4c0:	47 95       	ror	r20
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <_Z8add_keyshh+0x10>
     4c6:	40 fd       	sbrc	r20, 0
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <_Z8add_keyshh+0x28>
		{								// add to list
			keys_down[NumberKeysPressed++] = mStartKeyNumber+i-4;	
     4ca:	e7 2f       	mov	r30, r23
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	e7 5a       	subi	r30, 0xA7	; 167
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	60 83       	st	Z, r22
     4d4:	7f 5f       	subi	r23, 0xFF	; 255
		mNumberKeysPressed
************************************************************/
void add_keys( byte mrow, byte mStartKeyNumber )
{
	// Scan each bit:
	for (int i=4; i<8; i++)
     4d6:	2f 5f       	subi	r18, 0xFF	; 255
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	6f 5f       	subi	r22, 0xFF	; 255
     4dc:	28 30       	cpi	r18, 0x08	; 8
     4de:	31 05       	cpc	r19, r1
     4e0:	59 f7       	brne	.-42     	; 0x4b8 <_Z8add_keyshh+0xa>
     4e2:	70 93 57 02 	sts	0x0257, r23
		if (  (mrow & (1<<i)) == 0  )	// pressed,
		{								// add to list
			keys_down[NumberKeysPressed++] = mStartKeyNumber+i-4;	
		}
}
     4e6:	08 95       	ret

000004e8 <_Z14build_key_listPh>:
		2nd Row   :                [ 8, 9, A, B ]
		3rd Row   :                [ C, D, E, F ]
		4th Row   :                [ 10, 11, 12, 13 ]
************************************************************/
void build_key_list( byte* mkeys )
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	ec 01       	movw	r28, r24
	NumberKeysPressed = 0;
     4ee:	10 92 57 02 	sts	0x0257, r1
	add_keys( mkeys[0], 0 );
     4f2:	88 81       	ld	r24, Y
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z8add_keyshh>
	add_keys( mkeys[1], 4 );
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z8add_keyshh>
	add_keys( mkeys[2], 8 );
     502:	8a 81       	ldd	r24, Y+2	; 0x02
     504:	68 e0       	ldi	r22, 0x08	; 8
     506:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z8add_keyshh>
	add_keys( mkeys[3], 12);
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	6c e0       	ldi	r22, 0x0C	; 12
     50e:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z8add_keyshh>
	add_keys( mkeys[4], 16);
     512:	8c 81       	ldd	r24, Y+4	; 0x04
     514:	60 e1       	ldi	r22, 0x10	; 16
     516:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z8add_keyshh>
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <_Z11lookup_charhh>:
mRow - zero indexed ROW_DDR
mCol - zero indexed COL
************************************/
char lookup_char( byte mRow, byte mCol )
{
	byte index = (mRow * MAX_COL) + mCol;
     520:	88 0f       	add	r24, r24
     522:	88 0f       	add	r24, r24
     524:	68 0f       	add	r22, r24
	return assigned_characters[index];
     526:	e8 e0       	ldi	r30, 0x08	; 8
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	e6 0f       	add	r30, r22
     52c:	f1 1d       	adc	r31, r1
}
     52e:	80 81       	ld	r24, Z
     530:	08 95       	ret

00000532 <_Z16can_file_messageP4sCAN>:
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
************************************************************/
void can_file_message( sCAN* mMsg )
{
}
     532:	08 95       	ret

00000534 <_Z26can_prep_button_roster_msgP4sCAN10uKeyRoster>:
		 [2] lower nibble is 4th row		 
		 [3] upper nibble is 4th row
		 [3] lower nibble is 4th row
************************************************************/
void can_prep_button_roster_msg( sCAN* mMsg, union uKeyRoster mkeypad )
{
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	1f 93       	push	r17
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	00 d0       	rcall	.+0      	; 0x540 <_Z26can_prep_button_roster_msgP4sCAN10uKeyRoster+0xc>
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	7c 01       	movw	r14, r24
     546:	16 2f       	mov	r17, r22
	static byte count = 0;
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_ROSTER, MyInstance );
     548:	86 e3       	ldi	r24, 0x36	; 54
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	60 91 60 03 	lds	r22, 0x0360
     550:	49 83       	std	Y+1, r20	; 0x01
     552:	5a 83       	std	Y+2, r21	; 0x02
     554:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	f7 01       	movw	r30, r14
     55e:	80 83       	st	Z, r24
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	a2 83       	std	Z+2, r26	; 0x02
     564:	b3 83       	std	Z+3, r27	; 0x03
    mMsg->data[0] = mkeypad.array[0];	 // Upper Nibble is count of pressed buttons.  Lower nibble is the front edge buttons.
     566:	49 81       	ldd	r20, Y+1	; 0x01
     568:	45 83       	std	Z+5, r20	; 0x05
    mMsg->data[1] = mkeypad.array[1]; 	 // 
     56a:	5a 81       	ldd	r21, Y+2	; 0x02
     56c:	56 83       	std	Z+6, r21	; 0x06
    mMsg->data[2] = mkeypad.array[2];    // 
     56e:	17 83       	std	Z+7, r17	; 0x07
    mMsg->data[3] = count++;	 		 // 
     570:	80 91 65 02 	lds	r24, 0x0265
     574:	80 87       	std	Z+8, r24	; 0x08
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	80 93 65 02 	sts	0x0265, r24
    mMsg->header.DLC = 4;
     57c:	84 81       	ldd	r24, Z+4	; 0x04
     57e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     580:	88 60       	ori	r24, 0x08	; 8
     582:	84 83       	std	Z+4, r24	; 0x04
}
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	1f 91       	pop	r17
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret

00000594 <_Z27can_prep_button_pressed_msgP4sCAN>:
		 [...] Last key id
		 [button msg counter] to make each can msg unique.
************************************************************/
byte counter = 0;
void can_prep_button_pressed_msg( sCAN* mMsg )
{
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
     59a:	85 e3       	ldi	r24, 0x35	; 53
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	60 91 60 03 	lds	r22, 0x0360
     5a2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
     5a6:	68 83       	st	Y, r22
     5a8:	79 83       	std	Y+1, r23	; 0x01
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	9b 83       	std	Y+3, r25	; 0x03
	if (NumberKeysPressed > 7)
     5ae:	90 91 57 02 	lds	r25, 0x0257
     5b2:	98 30       	cpi	r25, 0x08	; 8
     5b4:	40 f1       	brcs	.+80     	; 0x606 <_Z27can_prep_button_pressed_msgP4sCAN+0x72>
		NumberKeysPressed = 7;
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	80 93 57 02 	sts	0x0257, r24

    mMsg->data[0] = NumberKeysPressed;
     5bc:	8d 83       	std	Y+5, r24	; 0x05
     5be:	79 e0       	ldi	r23, 0x09	; 9
     5c0:	48 e0       	ldi	r20, 0x08	; 8
     5c2:	50 e0       	ldi	r21, 0x00	; 0
    for (int i=0; i<NumberKeysPressed; i++)
     5c4:	27 e0       	ldi	r18, 0x07	; 7
     5c6:	30 e0       	ldi	r19, 0x00	; 0
{
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
     5c8:	a9 e5       	ldi	r26, 0x59	; 89
     5ca:	b2 e0       	ldi	r27, 0x02	; 2
		 [2] Second Key id (if 2 pressed)
		 [...] Last key id
		 [button msg counter] to make each can msg unique.
************************************************************/
byte counter = 0;
void can_prep_button_pressed_msg( sCAN* mMsg )
     5cc:	fe 01       	movw	r30, r28
     5ce:	36 96       	adiw	r30, 0x06	; 6
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
    for (int i=0; i<NumberKeysPressed; i++)
	    mMsg->data[i+1] = keys_down[i];
     5d4:	01 96       	adiw	r24, 0x01	; 1
     5d6:	6d 91       	ld	r22, X+
     5d8:	61 93       	st	Z+, r22
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
    for (int i=0; i<NumberKeysPressed; i++)
     5da:	82 17       	cp	r24, r18
     5dc:	93 07       	cpc	r25, r19
     5de:	d4 f3       	brlt	.-12     	; 0x5d4 <_Z27can_prep_button_pressed_msgP4sCAN+0x40>
	    mMsg->data[i+1] = keys_down[i];

	mMsg->data[NumberKeysPressed+1] = counter++;
     5e0:	80 91 62 02 	lds	r24, 0x0262
     5e4:	fe 01       	movw	r30, r28
     5e6:	e4 0f       	add	r30, r20
     5e8:	f5 1f       	adc	r31, r21
     5ea:	85 83       	std	Z+5, r24	; 0x05
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	80 93 62 02 	sts	0x0262, r24
    mMsg->header.DLC = 2+NumberKeysPressed;
     5f2:	97 2f       	mov	r25, r23
     5f4:	9f 70       	andi	r25, 0x0F	; 15
     5f6:	99 0f       	add	r25, r25
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     5fc:	89 2b       	or	r24, r25
     5fe:	8c 83       	std	Y+4, r24	; 0x04
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	08 95       	ret
{
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
     606:	9d 83       	std	Y+5, r25	; 0x05
    for (int i=0; i<NumberKeysPressed; i++)
     608:	29 2f       	mov	r18, r25
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	21 15       	cp	r18, r1
     60e:	31 05       	cpc	r19, r1
     610:	39 f0       	breq	.+14     	; 0x620 <_Z27can_prep_button_pressed_msgP4sCAN+0x8c>
     612:	a9 01       	movw	r20, r18
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	5f 4f       	sbci	r21, 0xFF	; 255
     618:	79 2f       	mov	r23, r25
     61a:	7e 5f       	subi	r23, 0xFE	; 254
     61c:	7f 70       	andi	r23, 0x0F	; 15
     61e:	d4 cf       	rjmp	.-88     	; 0x5c8 <_Z27can_prep_button_pressed_msgP4sCAN+0x34>
     620:	79 2f       	mov	r23, r25
     622:	7e 5f       	subi	r23, 0xFE	; 254
     624:	7f 70       	andi	r23, 0x0F	; 15
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	da cf       	rjmp	.-76     	; 0x5e0 <_Z27can_prep_button_pressed_msgP4sCAN+0x4c>

0000062c <_Z17can_init_test_msgPh>:
/************************************************************
  Operates on the currently selected CANPAGE MOB
  Adds a timestamp in addition to can_retrieve_data()
************************************************************/
void can_init_test_msg(byte* tmp)
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
	static word count = 0;
	count++;
     632:	80 91 63 02 	lds	r24, 0x0263
     636:	90 91 64 02 	lds	r25, 0x0264
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	90 93 64 02 	sts	0x0264, r25
     640:	80 93 63 02 	sts	0x0263, r24
    msg1.id 	 = create_CAN_eid( 0x02, 0x0004, 0x01);
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	64 e0       	ldi	r22, 0x04	; 4
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z14create_CAN_eidhth>
     650:	60 93 25 03 	sts	0x0325, r22
     654:	70 93 26 03 	sts	0x0326, r23
     658:	80 93 27 03 	sts	0x0327, r24
     65c:	90 93 28 03 	sts	0x0328, r25
    msg1.data[0] = tmp[0];
     660:	88 81       	ld	r24, Y
     662:	80 93 2a 03 	sts	0x032A, r24
    msg1.data[1] = tmp[1];
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	80 93 2b 03 	sts	0x032B, r24
    msg1.data[2] = tmp[2];
     66c:	8a 81       	ldd	r24, Y+2	; 0x02
     66e:	80 93 2c 03 	sts	0x032C, r24
    msg1.data[3] = tmp[3];
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	80 93 2d 03 	sts	0x032D, r24
    msg1.data[4] = tmp[4];
     678:	8c 81       	ldd	r24, Y+4	; 0x04
     67a:	80 93 2e 03 	sts	0x032E, r24
    
    msg1.data[5] = PORTC;
     67e:	88 b1       	in	r24, 0x08	; 8
     680:	80 93 2f 03 	sts	0x032F, r24
    msg1.data[6] = SWITCH_DDR;
     684:	87 b1       	in	r24, 0x07	; 7
     686:	80 93 30 03 	sts	0x0330, r24
    msg1.data[7] = 0xFF;
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	80 93 31 03 	sts	0x0331, r24
    msg1.header.DLC = 8;
     690:	80 91 29 03 	lds	r24, 0x0329
     694:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     696:	80 61       	ori	r24, 0x10	; 16
     698:	80 93 29 03 	sts	0x0329, r24
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <_Z11OS_Dispatchv>:
		// If the ping happens to be picked up, so much the better.  If it is not detected,
		// it is beyond the max specified anyway.
		
		//sonar_Timeslice();			// Take sonar reading.
	}
}
     6a2:	08 95       	ret

000006a4 <_Z14send_test_msgsv>:
// 		Maybe a sign error somewhere top nibble is taken as signed char.
//		Or the receiver buffer wasn't getting serviced properly.
byte a = 0x11;
void send_test_msgs()
{
	a = 0x00;
     6a4:	10 92 1c 01 	sts	0x011C, r1
	while (1) 
	{
		a += 0x11;
     6a8:	80 91 1c 01 	lds	r24, 0x011C
     6ac:	8f 5e       	subi	r24, 0xEF	; 239
     6ae:	80 93 1c 01 	sts	0x011C, r24
		msg1.data[0] = a;
     6b2:	80 93 2a 03 	sts	0x032A, r24
		can_send_msg( 0, &msg1 );
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	65 e2       	ldi	r22, 0x25	; 37
     6ba:	73 e0       	ldi	r23, 0x03	; 3
     6bc:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_Z12can_send_msghP4sCAN>
		delay  (one_second/2);
     6c0:	60 e4       	ldi	r22, 0x40	; 64
     6c2:	7d e0       	ldi	r23, 0x0D	; 13
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
		delay  (one_second/2);
     6cc:	60 e4       	ldi	r22, 0x40	; 64
     6ce:	7d e0       	ldi	r23, 0x0D	; 13
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
     6d8:	e7 cf       	rjmp	.-50     	; 0x6a8 <_Z14send_test_msgsv+0x4>

000006da <_Z11eeprom_testv>:

/**************************************************************/
void eeprom_test()
{

}
     6da:	08 95       	ret

000006dc <_Z31can_prep_board_presence_requestP4sCANh>:
				3=> Board Description (text)

Note: 0x00 Instance for this msg => Intended for all receivers
***************************************************************/
void can_prep_board_presence_request( sCAN* mMsg, byte mType )
{
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
     6e4:	16 2f       	mov	r17, r22
    mMsg->id 	  = create_CAN_eid( ID_BOARD_PRESENCE_REQUEST, 0x00 );
     6e6:	80 e1       	ldi	r24, 0x10	; 16
     6e8:	9c ef       	ldi	r25, 0xFC	; 252
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	88 83       	st	Y, r24
     6f6:	99 83       	std	Y+1, r25	; 0x01
     6f8:	aa 83       	std	Y+2, r26	; 0x02
     6fa:	bb 83       	std	Y+3, r27	; 0x03
    mMsg->data[0] = mType;
     6fc:	1d 83       	std	Y+5, r17	; 0x05
    mMsg->header.DLC = 1;
     6fe:	8c 81       	ldd	r24, Y+4	; 0x04
     700:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     702:	82 60       	ori	r24, 0x02	; 2
     704:	8c 83       	std	Y+4, r24	; 0x04
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	08 95       	ret

0000070e <_Z23can_prep_system_led_msgP4sCANhhh>:
 SYSTEM_LED_MODE_CONT_PATTERN 	0x04	(blinks Pattern continuously)

OUTPUT: mMsg will be filled in for sending.
************************************************************/
void can_prep_system_led_msg( sCAN* mMsg, byte mDestinationInstance, byte mMode, byte mPattern )
{
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	00 d0       	rcall	.+0      	; 0x718 <_Z23can_prep_system_led_msgP4sCANhhh+0xa>
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	8c 01       	movw	r16, r24
    mMsg->id 	  = create_CAN_eid( ID_SYSTEM_LED_REQUEST, mDestinationInstance );
     71e:	85 e1       	ldi	r24, 0x15	; 21
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	2a 83       	std	Y+2, r18	; 0x02
     724:	49 83       	std	Y+1, r20	; 0x01
     726:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
     72a:	f8 01       	movw	r30, r16
     72c:	60 83       	st	Z, r22
     72e:	71 83       	std	Z+1, r23	; 0x01
     730:	82 83       	std	Z+2, r24	; 0x02
     732:	93 83       	std	Z+3, r25	; 0x03
    mMsg->data[0] = mMode;
     734:	49 81       	ldd	r20, Y+1	; 0x01
     736:	45 83       	std	Z+5, r20	; 0x05
    mMsg->data[1] = mPattern;		// Lower 4 bits are the pattern!
     738:	2a 81       	ldd	r18, Y+2	; 0x02
     73a:	26 83       	std	Z+6, r18	; 0x06
    mMsg->header.DLC = 2;
     73c:	84 81       	ldd	r24, Z+4	; 0x04
     73e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     740:	84 60       	ori	r24, 0x04	; 4
     742:	84 83       	std	Z+4, r24	; 0x04
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <_Z23can_prep_test_backlightP4sCANt>:
#define LCD_CMD_SET_WINDOW			0x10
#define LCD_CMD_BEEP				0x20		// Specify On & Off time in milliseconds
#define LCD_CMD_BACKLIGHT			0x30		// Specify the percent * 10 in word.

void can_prep_test_backlight( sCAN* mMsg, word mValue )
{
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
     75c:	8b 01       	movw	r16, r22
    mMsg->id 	  = create_CAN_eid( 0x00, ID_LCD_COMMAND, MyInstance );
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	60 e6       	ldi	r22, 0x60	; 96
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	40 91 60 03 	lds	r20, 0x0360
     768:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z14create_CAN_eidhth>
     76c:	68 83       	st	Y, r22
     76e:	79 83       	std	Y+1, r23	; 0x01
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = LCD_CMD_BACKLIGHT;
     774:	80 e3       	ldi	r24, 0x30	; 48
     776:	8d 83       	std	Y+5, r24	; 0x05
	float duty    = ((float)mValue / 1024.0)*1000.;
     778:	b8 01       	movw	r22, r16
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__floatunsisf>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e8       	ldi	r20, 0x80	; 128
     788:	5a e3       	ldi	r21, 0x3A	; 58
     78a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	4a e7       	ldi	r20, 0x7A	; 122
     794:	54 e4       	ldi	r21, 0x44	; 68
     796:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
	word dutyW = duty;
     79a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
	mMsg->data[1] = hi(dutyW);
     79e:	7e 83       	std	Y+6, r23	; 0x06
	mMsg->data[2] = lo(dutyW);
     7a0:	6f 83       	std	Y+7, r22	; 0x07
    mMsg->header.DLC = 3;
     7a2:	8c 81       	ldd	r24, Y+4	; 0x04
     7a4:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     7a6:	86 60       	ori	r24, 0x06	; 6
     7a8:	8c 83       	std	Y+4, r24	; 0x04
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <_Z17can_prep_lcd_beepP4sCANt>:
void can_prep_lcd_beep( sCAN* mMsg, word mValue )
{   
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ec 01       	movw	r28, r24
     7be:	16 2f       	mov	r17, r22
     7c0:	07 2f       	mov	r16, r23
    mMsg->id 	  = create_CAN_eid( 0x00, ID_LCD_COMMAND, MyInstance );
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	60 e6       	ldi	r22, 0x60	; 96
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	40 91 60 03 	lds	r20, 0x0360
     7cc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z14create_CAN_eidhth>
     7d0:	dc 01       	movw	r26, r24
     7d2:	cb 01       	movw	r24, r22
     7d4:	88 83       	st	Y, r24
     7d6:	99 83       	std	Y+1, r25	; 0x01
     7d8:	aa 83       	std	Y+2, r26	; 0x02
     7da:	bb 83       	std	Y+3, r27	; 0x03
	mMsg->data[0] = LCD_CMD_BEEP;
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = hi(mValue);
     7e0:	0e 83       	std	Y+6, r16	; 0x06
	mMsg->data[2] = lo(mValue);
     7e2:	1f 83       	std	Y+7, r17	; 0x07
	mMsg->data[3] = 3;
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC = 4;
     7e8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ea:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     7ec:	88 60       	ori	r24, 0x08	; 8
     7ee:	8c 83       	std	Y+4, r24	; 0x04
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret

000007fa <_Z16can_prep_pwm_msgP4sCANt>:
// Extract the PWM word array; Updates PWM array
void can_prep_pwm_msg( sCAN* mMsg, word mPWM )
{
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
     804:	8b 01       	movw	r16, r22
		4..7		8..11
		12..15		16..18		19..22		23..26
		27..30		31..34		35..38		39..42
		43..46
		47..48	nFFF 0FFF ] end.   */
    mMsg->id 	  = create_CAN_eid( 0x00, ID_PWM_CHANNEL_UPDATE, MyInstance );
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	60 e8       	ldi	r22, 0x80	; 128
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	40 91 60 03 	lds	r20, 0x0360
     810:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z14create_CAN_eidhth>
     814:	68 83       	st	Y, r22
     816:	79 83       	std	Y+1, r23	; 0x01
     818:	8a 83       	std	Y+2, r24	; 0x02
     81a:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->header.DLC = 8;
     81c:	8c 81       	ldd	r24, Y+4	; 0x04
     81e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     820:	80 61       	ori	r24, 0x10	; 16
     822:	8c 83       	std	Y+4, r24	; 0x04
	byte upper_nibble 		 = ((mPWM & 0x0F00)>>8);
     824:	c8 01       	movw	r24, r16
     826:	80 70       	andi	r24, 0x00	; 0
     828:	9f 70       	andi	r25, 0x0F	; 15
	byte lower_nibble 		 = ((mPWM & 0x00FF));
	byte first_index         =  0;
	mMsg->data[0] 			 = ((first_index<<4) | upper_nibble);
     82a:	9d 83       	std	Y+5, r25	; 0x05
	mMsg->data[1] 			 = lower_nibble;
     82c:	0e 83       	std	Y+6, r16	; 0x06
	mMsg->data[2]			 = upper_nibble;
     82e:	9f 83       	std	Y+7, r25	; 0x07
	mMsg->data[3] 			 = lower_nibble;
     830:	08 87       	std	Y+8, r16	; 0x08
	mMsg->data[4] 			 = upper_nibble;
     832:	99 87       	std	Y+9, r25	; 0x09
	mMsg->data[5] 			 = lower_nibble;
     834:	0a 87       	std	Y+10, r16	; 0x0a
	mMsg->data[6] 			 = upper_nibble;
     836:	9b 87       	std	Y+11, r25	; 0x0b
	mMsg->data[7] 			 = lower_nibble;	
     838:	0c 87       	std	Y+12, r16	; 0x0c
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <parse_pan_tilt_angles>:
byte  num_expected=0;
	

// Use fixed point
void parse_pan_tilt_angles(byte* mData, float *pan, float *tilt)
{
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	fc 01       	movw	r30, r24
     852:	8b 01       	movw	r16, r22
     854:	7a 01       	movw	r14, r20
	// Atmel is slave, so we have received data.
	short lpan,ltilt;
	lpan  = mData[1];   lpan=(lpan<<8);	
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	80 e0       	ldi	r24, 0x00	; 0
	lpan  |= mData[2]; 
	
	ltilt = mData[3];	ltilt=(ltilt<<8);
     85a:	33 81       	ldd	r19, Z+3	; 0x03
     85c:	20 e0       	ldi	r18, 0x00	; 0
	ltilt |= mData[4];
     85e:	c4 81       	ldd	r28, Z+4	; 0x04
     860:	d0 e0       	ldi	r29, 0x00	; 0
     862:	c2 2b       	or	r28, r18
     864:	d3 2b       	or	r29, r19
void parse_pan_tilt_angles(byte* mData, float *pan, float *tilt)
{
	// Atmel is slave, so we have received data.
	short lpan,ltilt;
	lpan  = mData[1];   lpan=(lpan<<8);	
	lpan  |= mData[2]; 
     866:	62 81       	ldd	r22, Z+2	; 0x02
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	68 2b       	or	r22, r24
     86c:	79 2b       	or	r23, r25
	
	ltilt = mData[3];	ltilt=(ltilt<<8);
	ltilt |= mData[4];

	*pan  = ((float)lpan)/100.0;
     86e:	88 27       	eor	r24, r24
     870:	77 fd       	sbrc	r23, 7
     872:	80 95       	com	r24
     874:	98 2f       	mov	r25, r24
     876:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	48 ec       	ldi	r20, 0xC8	; 200
     880:	52 e4       	ldi	r21, 0x42	; 66
     882:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
     886:	f8 01       	movw	r30, r16
     888:	60 83       	st	Z, r22
     88a:	71 83       	std	Z+1, r23	; 0x01
     88c:	82 83       	std	Z+2, r24	; 0x02
     88e:	93 83       	std	Z+3, r25	; 0x03
	*tilt = ((float)ltilt)/100.0;
     890:	be 01       	movw	r22, r28
     892:	88 27       	eor	r24, r24
     894:	77 fd       	sbrc	r23, 7
     896:	80 95       	com	r24
     898:	98 2f       	mov	r25, r24
     89a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	48 ec       	ldi	r20, 0xC8	; 200
     8a4:	52 e4       	ldi	r21, 0x42	; 66
     8a6:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
     8aa:	f7 01       	movw	r30, r14
     8ac:	60 83       	st	Z, r22
     8ae:	71 83       	std	Z+1, r23	; 0x01
     8b0:	82 83       	std	Z+2, r24	; 0x02
     8b2:	93 83       	std	Z+3, r25	; 0x03
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	08 95       	ret

000008c2 <parse_low_side_driver>:

void parse_low_side_driver(byte* mData, byte* mBit, byte* mValue)
{
     8c2:	fc 01       	movw	r30, r24
	// Atmel is slave, so we have received data:
	*mBit   = mData[1];
     8c4:	81 81       	ldd	r24, Z+1	; 0x01
     8c6:	db 01       	movw	r26, r22
     8c8:	8c 93       	st	X, r24
	*mValue = mData[2];
     8ca:	82 81       	ldd	r24, Z+2	; 0x02
     8cc:	fa 01       	movw	r30, r20
     8ce:	80 83       	st	Z, r24
}
     8d0:	08 95       	ret

000008d2 <parse_low_side_drivers>:

void parse_low_side_drivers(byte* mData, byte* mValues)
{
	// Atmel is slave, so we have to request a read.
	*mValues = mData[1];
     8d2:	fc 01       	movw	r30, r24
     8d4:	81 81       	ldd	r24, Z+1	; 0x01
     8d6:	fb 01       	movw	r30, r22
     8d8:	80 83       	st	Z, r24
}
     8da:	08 95       	ret

000008dc <parse_read_analog>:

void parse_read_analog( byte* mData, byte* mChannel )
{
	// Atmel is slave, so we have to request a read.
	*mChannel = mData[1];
     8dc:	fc 01       	movw	r30, r24
     8de:	81 81       	ldd	r24, Z+1	; 0x01
     8e0:	fb 01       	movw	r30, r22
     8e2:	80 83       	st	Z, r24
}
     8e4:	08 95       	ret

000008e6 <parse_read_all_analogs>:

void parse_read_all_analogs( byte* mData, float* mValue )
{
	// No parsing to be done.  See packaging instructions.
}
     8e6:	08 95       	ret

000008e8 <_Z16pack_all_analogsv>:

/**************************************************************/
// from Analog.h :
void pack_all_analogs( )
{
     8e8:	e3 e1       	ldi	r30, 0x13	; 19
     8ea:	f3 e0       	ldi	r31, 0x03	; 3
     8ec:	a9 ea       	ldi	r26, 0xA9	; 169
     8ee:	b2 e0       	ldi	r27, 0x02	; 2
	byte offset = 1;
	for (int i=0; i<8; i++)
	{
		OutBuffer[i*2+offset]  = hi( Sample[i] );
     8f0:	80 81       	ld	r24, Z
     8f2:	32 96       	adiw	r30, 0x02	; 2
		OutBuffer[i*2+offset]  = lo( Sample[i] );
     8f4:	8c 93       	st	X, r24
     8f6:	12 96       	adiw	r26, 0x02	; 2
/**************************************************************/
// from Analog.h :
void pack_all_analogs( )
{
	byte offset = 1;
	for (int i=0; i<8; i++)
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	e3 32       	cpi	r30, 0x23	; 35
     8fc:	f8 07       	cpc	r31, r24
     8fe:	c1 f7       	brne	.-16     	; 0x8f0 <_Z16pack_all_analogsv+0x8>
	{
		OutBuffer[i*2+offset]  = hi( Sample[i] );
		OutBuffer[i*2+offset]  = lo( Sample[i] );
	}
}
     900:	08 95       	ret

00000902 <num_expected_bytes>:
/**************************************************************/

byte num_expected_bytes( byte mToken )
{
     902:	81 50       	subi	r24, 0x01	; 1
     904:	85 30       	cpi	r24, 0x05	; 5
     906:	30 f4       	brcc	.+12     	; 0x914 <num_expected_bytes+0x12>
     908:	e8 2f       	mov	r30, r24
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	e3 5e       	subi	r30, 0xE3	; 227
     90e:	fe 4f       	sbci	r31, 0xFE	; 254
     910:	80 81       	ld	r24, Z
     912:	08 95       	ret
     914:	80 e0       	ldi	r24, 0x00	; 0
	case READ_ANALOG 			: return 1;		break;
	case READ_ANALOGS 			: return 1;		break;	
	default: break;
	}
	return 0;	
}
     916:	08 95       	ret

00000918 <test_rx_response>:

#define TEST_SERVO 1
void test_rx_response( byte mData )
{
	switch ( mData )
     918:	85 30       	cpi	r24, 0x05	; 5
     91a:	09 f1       	breq	.+66     	; 0x95e <test_rx_response+0x46>
     91c:	86 30       	cpi	r24, 0x06	; 6
     91e:	68 f0       	brcs	.+26     	; 0x93a <test_rx_response+0x22>
     920:	80 34       	cpi	r24, 0x40	; 64
     922:	29 f1       	breq	.+74     	; 0x96e <test_rx_response+0x56>
     924:	81 34       	cpi	r24, 0x41	; 65
     926:	c8 f4       	brcc	.+50     	; 0x95a <test_rx_response+0x42>
     928:	80 32       	cpi	r24, 0x20	; 32
     92a:	79 f0       	breq	.+30     	; 0x94a <test_rx_response+0x32>
	case 5		: set_angle(TEST_SERVO,  50.0);	break;	
	case 0x80	: set_angle(TEST_SERVO,  50.0);	break;	
	case 0x40	: set_angle(TEST_SERVO, -25.0);	break;		
	case 0xC0	: set_angle(TEST_SERVO,   0.0);	break;			
	case 0x20	: set_angle(TEST_SERVO, +25.0);	break;				
	default 	: set_angle(TEST_SERVO,   0.0);  break;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	ba 01       	movw	r22, r20
     934:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
     938:	08 95       	ret
}

#define TEST_SERVO 1
void test_rx_response( byte mData )
{
	switch ( mData )
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	c1 f0       	breq	.+48     	; 0x96e <test_rx_response+0x56>
     93e:	83 30       	cpi	r24, 0x03	; 3
     940:	f0 f0       	brcs	.+60     	; 0x97e <test_rx_response+0x66>
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	99 f3       	breq	.-26     	; 0x92c <test_rx_response+0x14>
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	89 f7       	brne	.-30     	; 0x92c <test_rx_response+0x14>
	case 4		: set_angle(TEST_SERVO,  25.0);	break;
	case 5		: set_angle(TEST_SERVO,  50.0);	break;	
	case 0x80	: set_angle(TEST_SERVO,  50.0);	break;	
	case 0x40	: set_angle(TEST_SERVO, -25.0);	break;		
	case 0xC0	: set_angle(TEST_SERVO,   0.0);	break;			
	case 0x20	: set_angle(TEST_SERVO, +25.0);	break;				
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	68 ec       	ldi	r22, 0xC8	; 200
     952:	71 e4       	ldi	r23, 0x41	; 65
     954:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
     958:	08 95       	ret
}

#define TEST_SERVO 1
void test_rx_response( byte mData )
{
	switch ( mData )
     95a:	80 38       	cpi	r24, 0x80	; 128
     95c:	39 f7       	brne	.-50     	; 0x92c <test_rx_response+0x14>
	case 1		: set_angle(TEST_SERVO, -50.0);	break;
	case 2		: set_angle(TEST_SERVO, -25.0);	break;
	case 3		: set_angle(TEST_SERVO,   0.0);	break;
	case 4		: set_angle(TEST_SERVO,  25.0);	break;
	case 5		: set_angle(TEST_SERVO,  50.0);	break;	
	case 0x80	: set_angle(TEST_SERVO,  50.0);	break;	
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	68 e4       	ldi	r22, 0x48	; 72
     966:	72 e4       	ldi	r23, 0x42	; 66
     968:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
     96c:	08 95       	ret
	case 0x40	: set_angle(TEST_SERVO, -25.0);	break;		
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	68 ec       	ldi	r22, 0xC8	; 200
     976:	71 ec       	ldi	r23, 0xC1	; 193
     978:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
     97c:	08 95       	ret
}

#define TEST_SERVO 1
void test_rx_response( byte mData )
{
	switch ( mData )
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	a9 f6       	brne	.-86     	; 0x92c <test_rx_response+0x14>
	{
	case 1		: set_angle(TEST_SERVO, -50.0);	break;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	68 e4       	ldi	r22, 0x48	; 72
     98a:	72 ec       	ldi	r23, 0xC2	; 194
     98c:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
     990:	08 95       	ret

00000992 <_Z18zero_output_bufferv>:
	case 0x20	: set_angle(TEST_SERVO, +25.0);	break;				
	default 	: set_angle(TEST_SERVO,   0.0);  break;
	}
}
void zero_output_buffer()
{
     992:	e8 ea       	ldi	r30, 0xA8	; 168
     994:	f2 e0       	ldi	r31, 0x02	; 2
	for (int i=0; i<20; i++)
		OutBuffer[i] = 0xFF;
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	81 93       	st	Z+, r24
	default 	: set_angle(TEST_SERVO,   0.0);  break;
	}
}
void zero_output_buffer()
{
	for (int i=0; i<20; i++)
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	ec 3b       	cpi	r30, 0xBC	; 188
     99e:	f9 07       	cpc	r31, r25
     9a0:	d9 f7       	brne	.-10     	; 0x998 <_Z18zero_output_bufferv+0x6>
		OutBuffer[i] = 0xFF;
}
     9a2:	08 95       	ret

000009a4 <_Z10test_servov>:

void test_servo()
{
	while(1)
	{
		set_angle(1, -30.0);
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	60 ef       	ldi	r22, 0xF0	; 240
     9ac:	71 ec       	ldi	r23, 0xC1	; 193
     9ae:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
		set_angle(2, -30.0);		
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 ef       	ldi	r22, 0xF0	; 240
     9ba:	71 ec       	ldi	r23, 0xC1	; 193
     9bc:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
		delay(10000);
     9c0:	60 e1       	ldi	r22, 0x10	; 16
     9c2:	77 e2       	ldi	r23, 0x27	; 39
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
		set_angle(1, +30.0);
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	60 ef       	ldi	r22, 0xF0	; 240
     9d4:	71 e4       	ldi	r23, 0x41	; 65
     9d6:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
		set_angle(2, +30.0);
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	60 ef       	ldi	r22, 0xF0	; 240
     9e2:	71 e4       	ldi	r23, 0x41	; 65
     9e4:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
		delay(10000);
     9e8:	60 e1       	ldi	r22, 0x10	; 16
     9ea:	77 e2       	ldi	r23, 0x27	; 39
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
     9f4:	d7 cf       	rjmp	.-82     	; 0x9a4 <_Z10test_servov>

000009f6 <spi_callback>:
	}
}
// Called everytime a byte has been received.
byte spi_callback()
{							set_angle(1, -25.0);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	68 ec       	ldi	r22, 0xC8	; 200
     9fe:	71 ec       	ldi	r23, 0xC1	; 193
     a00:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>

	InBuffer[InIndex] = SPDR;
     a04:	80 91 bc 02 	lds	r24, 0x02BC
     a08:	9e b5       	in	r25, 0x2e	; 46
     a0a:	e4 e9       	ldi	r30, 0x94	; 148
     a0c:	f2 e0       	ldi	r31, 0x02	; 2
     a0e:	e8 0f       	add	r30, r24
     a10:	f1 1d       	adc	r31, r1
     a12:	90 83       	st	Z, r25
		zero_output_buffer();
		OutBuffer[1] = 0x99;			// Acknowledge start of new command.
		OutBuffer[2] = InBuffer[0];		// echo command
		OutBuffer[3] = num_expected;	// bytes expected.
	} */
	InIndex++; 
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	80 93 bc 02 	sts	0x02BC, r24
	SPDR = OutIndex++;	//OutBuffer[]
     a1a:	80 91 bd 02 	lds	r24, 0x02BD
     a1e:	8e bd       	out	0x2e, r24	; 46
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	80 93 bd 02 	sts	0x02BD, r24
		//distribute_parsing( InBuffer );
		InIndex = 0;
		OutIndex = 0;
	}*/	
	return 1;
}
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	08 95       	ret

00000a2a <distribute_parsing>:

void distribute_parsing( byte* mData )
{
     a2a:	fc 01       	movw	r30, r24
	switch ( mData[0] )
     a2c:	80 81       	ld	r24, Z
     a2e:	83 30       	cpi	r24, 0x03	; 3
     a30:	d9 f1       	breq	.+118    	; 0xaa8 <distribute_parsing+0x7e>
     a32:	84 30       	cpi	r24, 0x04	; 4
     a34:	28 f0       	brcs	.+10     	; 0xa40 <distribute_parsing+0x16>
     a36:	84 30       	cpi	r24, 0x04	; 4
     a38:	a9 f0       	breq	.+42     	; 0xa64 <distribute_parsing+0x3a>
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	81 f0       	breq	.+32     	; 0xa5e <distribute_parsing+0x34>
     a3e:	08 95       	ret
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	a1 f0       	breq	.+40     	; 0xa6c <distribute_parsing+0x42>
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	d9 f7       	brne	.-10     	; 0xa3e <distribute_parsing+0x14>
}

void parse_low_side_driver(byte* mData, byte* mBit, byte* mValue)
{
	// Atmel is slave, so we have received data:
	*mBit   = mData[1];
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	80 93 72 02 	sts	0x0272, r24
	*mValue = mData[2];
     a4e:	92 81       	ldd	r25, Z+2	; 0x02
     a50:	90 93 70 02 	sts	0x0270, r25
				set_angle(2, tilt);
				break;
	case UPDATE_LOWSIDE_DRIVER :
				// After all data has been received.
				parse_low_side_driver(mData, &LS_Bit, &LS_Value);
				if (LS_Value)
     a54:	99 23       	and	r25, r25
     a56:	61 f1       	breq	.+88     	; 0xab0 <distribute_parsing+0x86>
					turn_output_on (LS_Bit );
     a58:	0e 94 5d 07 	call	0xeba	; 0xeba <turn_output_on>
     a5c:	08 95       	ret
				break;
	case READ_ANALOGS :
				// Measurements are being continuously taken.
				// Needs to be called after the first byte arrives!!!	
				// SUPPLY DATA NOW!
				pack_all_analogs( );								
     a5e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_Z16pack_all_analogsv>
     a62:	08 95       	ret
}

void parse_read_analog( byte* mData, byte* mChannel )
{
	// Atmel is slave, so we have to request a read.
	*mChannel = mData[1];
     a64:	81 81       	ldd	r24, Z+1	; 0x01
     a66:	80 93 93 02 	sts	0x0293, r24
				break;
	case READ_ANALOG : 
				// Needs to be called after the first byte arrives!!!
				parse_read_analog(mData, &Channel);
				// SUPPLY DATA NOW!				
				break;
     a6a:	08 95       	ret
{
	switch ( mData[0] )
	{
	case UPDATE_PAN_TILT : 
				// After all data has been received.
				parse_pan_tilt_angles(mData, &pan, &tilt);
     a6c:	cf 01       	movw	r24, r30
     a6e:	68 e6       	ldi	r22, 0x68	; 104
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	4c e6       	ldi	r20, 0x6C	; 108
     a74:	52 e0       	ldi	r21, 0x02	; 2
     a76:	0e 94 22 04 	call	0x844	; 0x844 <parse_pan_tilt_angles>
				set_angle(1, pan );
     a7a:	40 91 68 02 	lds	r20, 0x0268
     a7e:	50 91 69 02 	lds	r21, 0x0269
     a82:	60 91 6a 02 	lds	r22, 0x026A
     a86:	70 91 6b 02 	lds	r23, 0x026B
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
				set_angle(2, tilt);
     a90:	40 91 6c 02 	lds	r20, 0x026C
     a94:	50 91 6d 02 	lds	r21, 0x026D
     a98:	60 91 6e 02 	lds	r22, 0x026E
     a9c:	70 91 6f 02 	lds	r23, 0x026F
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	0e 94 27 06 	call	0xc4e	; 0xc4e <set_angle>
				break;
     aa6:	08 95       	ret
}

void parse_low_side_drivers(byte* mData, byte* mValues)
{
	// Atmel is slave, so we have to request a read.
	*mValues = mData[1];
     aa8:	81 81       	ldd	r24, Z+1	; 0x01
     aaa:	80 93 71 02 	sts	0x0271, r24
					turn_output_off(LS_Bit );					
				break;
	case UPDATE_LOWSIDE_DRIVERS : 
				// After all data has been received.	
				parse_low_side_drivers(mData, &LS_Values );
				break;
     aae:	08 95       	ret
				// After all data has been received.
				parse_low_side_driver(mData, &LS_Bit, &LS_Value);
				if (LS_Value)
					turn_output_on (LS_Bit );
				else
					turn_output_off(LS_Bit );					
     ab0:	0e 94 7c 07 	call	0xef8	; 0xef8 <turn_output_off>
     ab4:	08 95       	ret

00000ab6 <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
*******************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0;
     ab6:	10 92 da 03 	sts	0x03DA, r1
	config_byte_2 = 0;
     aba:	10 92 db 03 	sts	0x03DB, r1
}
     abe:	08 95       	ret

00000ac0 <_Z8save_calv>:

Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr = save_configuration();
     ac0:	0e 94 1b 13 	call	0x2636	; 0x2636 <_Z18save_configurationv>
	addr = save_configuration_eeprom	(addr);
     ac4:	0e 94 c6 12 	call	0x258c	; 0x258c <_Z25save_configuration_eepromPh>
	return addr;
};
     ac8:	08 95       	ret

00000aca <_Z13config_changeh>:
}

/* Callback for configuration change. */
void config_change( byte mByteChanged )
{
	save_cal();	
     aca:	0e 94 60 05 	call	0xac0	; 0xac0 <_Z8save_calv>
}
     ace:	08 95       	ret

00000ad0 <_Z8read_calv>:

Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr = read_configuration();
     ad0:	0e 94 75 13 	call	0x26ea	; 0x26ea <_Z18read_configurationv>
	addr = read_configuration_eeprom	(addr);
     ad4:	0e 94 39 13 	call	0x2672	; 0x2672 <_Z25read_configuration_eepromPh>
	return addr;	
};
     ad8:	08 95       	ret

00000ada <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     ada:	80 91 db 03 	lds	r24, 0x03DB
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	80 7f       	andi	r24, 0xF0	; 240
     ae2:	90 70       	andi	r25, 0x00	; 0
     ae4:	80 32       	cpi	r24, 0x20	; 32
     ae6:	91 05       	cpc	r25, r1
     ae8:	91 f0       	breq	.+36     	; 0xb0e <_Z13getReportRatev+0x34>
     aea:	81 32       	cpi	r24, 0x21	; 33
     aec:	91 05       	cpc	r25, r1
     aee:	44 f0       	brlt	.+16     	; 0xb00 <_Z13getReportRatev+0x26>
     af0:	80 34       	cpi	r24, 0x40	; 64
     af2:	91 05       	cpc	r25, r1
     af4:	51 f0       	breq	.+20     	; 0xb0a <_Z13getReportRatev+0x30>
     af6:	80 38       	cpi	r24, 0x80	; 128
     af8:	91 05       	cpc	r25, r1
     afa:	29 f4       	brne	.+10     	; 0xb06 <_Z13getReportRatev+0x2c>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
     afc:	84 e1       	ldi	r24, 0x14	; 20
     afe:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     b00:	80 31       	cpi	r24, 0x10	; 16
     b02:	91 05       	cpc	r25, r1
     b04:	31 f0       	breq	.+12     	; 0xb12 <_Z13getReportRatev+0x38>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
     b0a:	8a e0       	ldi	r24, 0x0A	; 10
     b0c:	08 95       	ret
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	08 95       	ret
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
     b12:	82 e0       	ldi	r24, 0x02	; 2
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
	default: return -1;  break;
	}
}	
     b14:	08 95       	ret

00000b16 <servos_init>:
float ServoRangeDegs;
float ServoCountRange;
word  CenterCount;

void servos_init()
{
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
	pwm_init( BASE_FREQ, TRUE, TRUE );
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	88 e4       	ldi	r24, 0x48	; 72
     b28:	92 e4       	ldi	r25, 0x42	; 66
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	21 e0       	ldi	r18, 0x01	; 1
     b2e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <_Z8pwm_initfhh>
	// How many counts do we get at this base frequency?
	// 3,200  see "get_top_value()" in pwm.c.  It's 16,000,000/8/50 = 40,000
	// Good enough resolution.

	//byte ps               = select_prescaler( BASE_FREQ );
	float counts_per_period = get_top_value( BASE_FREQ );
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	88 e4       	ldi	r24, 0x48	; 72
     b38:	92 e4       	ldi	r25, 0x42	; 66
     b3a:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z13get_top_valuef>
     b3e:	bc 01       	movw	r22, r24
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__floatunsisf>
	float period_ms         = (1.0 / BASE_FREQ) * 1000.0;		// in ms 
	float counts_per_ms     = counts_per_period / period_ms;
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 ea       	ldi	r20, 0xA0	; 160
     b4e:	51 e4       	ldi	r21, 0x41	; 65
     b50:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
     b54:	8b 01       	movw	r16, r22
     b56:	d8 2f       	mov	r29, r24
     b58:	c9 2f       	mov	r28, r25

	MinCount = round(counts_per_ms * (float)RC_MIN_PW_TIME_MS);
     b5a:	9e 01       	movw	r18, r28
     b5c:	71 2f       	mov	r23, r17
     b5e:	83 2f       	mov	r24, r19
     b60:	92 2f       	mov	r25, r18
     b62:	26 e6       	ldi	r18, 0x66	; 102
     b64:	36 e6       	ldi	r19, 0x66	; 102
     b66:	46 e6       	ldi	r20, 0x66	; 102
     b68:	5f e3       	ldi	r21, 0x3F	; 63
     b6a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
     b6e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <round>
     b72:	0e 94 84 1b 	call	0x3708	; 0x3708 <__fixsfsi>
     b76:	7b 01       	movw	r14, r22
     b78:	70 93 c0 02 	sts	0x02C0, r23
     b7c:	60 93 bf 02 	sts	0x02BF, r22
	MaxCount = round(counts_per_ms * (float)RC_MAX_PW_TIME_MS);
     b80:	9e 01       	movw	r18, r28
     b82:	60 2f       	mov	r22, r16
     b84:	71 2f       	mov	r23, r17
     b86:	83 2f       	mov	r24, r19
     b88:	92 2f       	mov	r25, r18
     b8a:	26 e6       	ldi	r18, 0x66	; 102
     b8c:	36 e6       	ldi	r19, 0x66	; 102
     b8e:	46 e0       	ldi	r20, 0x06	; 6
     b90:	50 e4       	ldi	r21, 0x40	; 64
     b92:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
     b96:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <round>
     b9a:	0e 94 84 1b 	call	0x3708	; 0x3708 <__fixsfsi>
     b9e:	70 93 23 01 	sts	0x0123, r23
     ba2:	60 93 22 01 	sts	0x0122, r22

	ServoRangeDegs  = (RC_MAX_ANGLE - RC_MIN_ANGLE);
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 ef       	ldi	r20, 0xF0	; 240
     bac:	52 e4       	ldi	r21, 0x42	; 66
     bae:	20 93 c1 02 	sts	0x02C1, r18
     bb2:	30 93 c2 02 	sts	0x02C2, r19
     bb6:	40 93 c3 02 	sts	0x02C3, r20
     bba:	50 93 c4 02 	sts	0x02C4, r21
	ServoCountRange = (MaxCount - MinCount);
     bbe:	6e 19       	sub	r22, r14
     bc0:	7f 09       	sbc	r23, r15
     bc2:	88 27       	eor	r24, r24
     bc4:	77 fd       	sbrc	r23, 7
     bc6:	80 95       	com	r24
     bc8:	98 2f       	mov	r25, r24
     bca:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     bce:	60 93 c5 02 	sts	0x02C5, r22
     bd2:	70 93 c6 02 	sts	0x02C6, r23
     bd6:	80 93 c7 02 	sts	0x02C7, r24
     bda:	90 93 c8 02 	sts	0x02C8, r25
	CenterCount     = ((float)counts_per_ms * RC_NEUTRAL_PW_TIME_MS );	
     bde:	9e 01       	movw	r18, r28
     be0:	60 2f       	mov	r22, r16
     be2:	71 2f       	mov	r23, r17
     be4:	83 2f       	mov	r24, r19
     be6:	92 2f       	mov	r25, r18
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 ec       	ldi	r20, 0xC0	; 192
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
     bf4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
     bf8:	70 93 ca 02 	sts	0x02CA, r23
     bfc:	60 93 c9 02 	sts	0x02C9, r22
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <move_to_min>:

void move_to_min(byte mServoNum)
{
	if (mServoNum==1)
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	39 f0       	breq	.+14     	; 0xc20 <move_to_min+0x12>
		OCR1A_Write( MinCount );
	else
		OCR1B_Write( MinCount );	
     c12:	80 91 bf 02 	lds	r24, 0x02BF
     c16:	90 91 c0 02 	lds	r25, 0x02C0
     c1a:	0e 94 86 13 	call	0x270c	; 0x270c <_Z11OCR1B_Writej>
     c1e:	08 95       	ret
}

void move_to_min(byte mServoNum)
{
	if (mServoNum==1)
		OCR1A_Write( MinCount );
     c20:	80 91 bf 02 	lds	r24, 0x02BF
     c24:	90 91 c0 02 	lds	r25, 0x02C0
     c28:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z11OCR1A_Writej>
     c2c:	08 95       	ret

00000c2e <move_to_max>:
	else
		OCR1B_Write( MinCount );	
}
void move_to_max(byte mServoNum)
{
	if (mServoNum==1)
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	39 f0       	breq	.+14     	; 0xc40 <move_to_max+0x12>
		OCR1A_Write( MaxCount );
	else
		OCR1B_Write( MaxCount );
     c32:	80 91 22 01 	lds	r24, 0x0122
     c36:	90 91 23 01 	lds	r25, 0x0123
     c3a:	0e 94 86 13 	call	0x270c	; 0x270c <_Z11OCR1B_Writej>
     c3e:	08 95       	ret
		OCR1B_Write( MinCount );	
}
void move_to_max(byte mServoNum)
{
	if (mServoNum==1)
		OCR1A_Write( MaxCount );
     c40:	80 91 22 01 	lds	r24, 0x0122
     c44:	90 91 23 01 	lds	r25, 0x0123
     c48:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z11OCR1A_Writej>
     c4c:	08 95       	ret

00000c4e <set_angle>:
// mCount / mDegrees = ServoCountRange / ServoRangeDegs
// mCount   = ServoCountRange / ServoRangeDegs * mDegrees

// 0.5ms 1.0 ms  2.5ms
void set_angle(byte mServoNum, float mDegrees)
{
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	c8 2f       	mov	r28, r24
     c62:	7a 01       	movw	r14, r20
     c64:	8b 01       	movw	r16, r22
	if (mDegrees > RC_MAX_ANGLE) return;
     c66:	cb 01       	movw	r24, r22
     c68:	ba 01       	movw	r22, r20
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e7       	ldi	r20, 0x70	; 112
     c70:	52 e4       	ldi	r21, 0x42	; 66
     c72:	0e 94 94 1a 	call	0x3528	; 0x3528 <__gtsf2>
     c76:	18 16       	cp	r1, r24
     c78:	0c f4       	brge	.+2      	; 0xc7c <set_angle+0x2e>
     c7a:	4e c0       	rjmp	.+156    	; 0xd18 <set_angle+0xca>
	if (mDegrees < RC_MIN_ANGLE) return;
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e7       	ldi	r20, 0x70	; 112
     c86:	52 ec       	ldi	r21, 0xC2	; 194
     c88:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__ltsf2>
     c8c:	87 fd       	sbrc	r24, 7
     c8e:	44 c0       	rjmp	.+136    	; 0xd18 <set_angle+0xca>
	
	word Count = round(((float)(ServoCountRange/ServoRangeDegs)*mDegrees)) + (ServoCountRange/2.0) + MinCount;
     c90:	a0 90 c5 02 	lds	r10, 0x02C5
     c94:	b0 90 c6 02 	lds	r11, 0x02C6
     c98:	c0 90 c7 02 	lds	r12, 0x02C7
     c9c:	d0 90 c8 02 	lds	r13, 0x02C8
     ca0:	c6 01       	movw	r24, r12
     ca2:	b5 01       	movw	r22, r10
     ca4:	20 91 c1 02 	lds	r18, 0x02C1
     ca8:	30 91 c2 02 	lds	r19, 0x02C2
     cac:	40 91 c3 02 	lds	r20, 0x02C3
     cb0:	50 91 c4 02 	lds	r21, 0x02C4
     cb4:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
     cb8:	a8 01       	movw	r20, r16
     cba:	97 01       	movw	r18, r14
     cbc:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
     cc0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <round>
     cc4:	7b 01       	movw	r14, r22
     cc6:	8c 01       	movw	r16, r24
     cc8:	c6 01       	movw	r24, r12
     cca:	b5 01       	movw	r22, r10
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	5f e3       	ldi	r21, 0x3F	; 63
     cd4:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
     cd8:	9b 01       	movw	r18, r22
     cda:	ac 01       	movw	r20, r24
     cdc:	c8 01       	movw	r24, r16
     cde:	b7 01       	movw	r22, r14
     ce0:	0e 94 8e 18 	call	0x311c	; 0x311c <__addsf3>
     ce4:	7b 01       	movw	r14, r22
     ce6:	8c 01       	movw	r16, r24
     ce8:	60 91 bf 02 	lds	r22, 0x02BF
     cec:	70 91 c0 02 	lds	r23, 0x02C0
     cf0:	88 27       	eor	r24, r24
     cf2:	77 fd       	sbrc	r23, 7
     cf4:	80 95       	com	r24
     cf6:	98 2f       	mov	r25, r24
     cf8:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	c8 01       	movw	r24, r16
     d02:	b7 01       	movw	r22, r14
     d04:	0e 94 8e 18 	call	0x311c	; 0x311c <__addsf3>
     d08:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
/*
(MaxCount - MinCount) 
(RC_MAX_ANGLE - RC_MIN_ANGLE)
counts_per_degree * mDegrees + 
*/
	if (mServoNum==1)
     d10:	c1 30       	cpi	r28, 0x01	; 1
     d12:	61 f0       	breq	.+24     	; 0xd2c <set_angle+0xde>
		OCR1A_Write( Count );
	else
		OCR1B_Write( Count );
     d14:	0e 94 86 13 	call	0x270c	; 0x270c <_Z11OCR1B_Writej>
}
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	08 95       	ret
(MaxCount - MinCount) 
(RC_MAX_ANGLE - RC_MIN_ANGLE)
counts_per_degree * mDegrees + 
*/
	if (mServoNum==1)
		OCR1A_Write( Count );
     d2c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z11OCR1A_Writej>
     d30:	f3 cf       	rjmp	.-26     	; 0xd18 <set_angle+0xca>

00000d32 <neutral>:
		OCR1B_Write( Count );
}

void neutral( byte mServoNum )
{
	if (mServoNum==1)
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	39 f0       	breq	.+14     	; 0xd44 <neutral+0x12>
		OCR1A_Write( CenterCount );
	else 
		OCR1B_Write( CenterCount );
     d36:	80 91 c9 02 	lds	r24, 0x02C9
     d3a:	90 91 ca 02 	lds	r25, 0x02CA
     d3e:	0e 94 86 13 	call	0x270c	; 0x270c <_Z11OCR1B_Writej>
     d42:	08 95       	ret
}

void neutral( byte mServoNum )
{
	if (mServoNum==1)
		OCR1A_Write( CenterCount );
     d44:	80 91 c9 02 	lds	r24, 0x02C9
     d48:	90 91 ca 02 	lds	r25, 0x02CA
     d4c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z11OCR1A_Writej>
     d50:	08 95       	ret

00000d52 <_Z7forwardv>:

float counts_per_period;
word c;
word limit;
void forward()
{
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
    counts_per_period = get_top_value( BASE_FREQ );
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	88 e4       	ldi	r24, 0x48	; 72
     d64:	92 e4       	ldi	r25, 0x42	; 66
     d66:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z13get_top_valuef>
     d6a:	bc 01       	movw	r22, r24
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__floatunsisf>
     d74:	7b 01       	movw	r14, r22
     d76:	8c 01       	movw	r16, r24
     d78:	60 93 cb 02 	sts	0x02CB, r22
     d7c:	70 93 cc 02 	sts	0x02CC, r23
     d80:	80 93 cd 02 	sts	0x02CD, r24
     d84:	90 93 ce 02 	sts	0x02CE, r25
	limit  = round( counts_per_period / 8.0 );
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	5e e3       	ldi	r21, 0x3E	; 62
     d90:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
     d94:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <round>
     d98:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
     d9c:	eb 01       	movw	r28, r22
     d9e:	70 93 d2 02 	sts	0x02D2, r23
     da2:	60 93 d1 02 	sts	0x02D1, r22
	c      = round( counts_per_period / 22.0 );
     da6:	c8 01       	movw	r24, r16
     da8:	b7 01       	movw	r22, r14
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 eb       	ldi	r20, 0xB0	; 176
     db0:	51 e4       	ldi	r21, 0x41	; 65
     db2:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
     db6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <round>
     dba:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
     dbe:	9b 01       	movw	r18, r22
     dc0:	70 93 d0 02 	sts	0x02D0, r23
     dc4:	60 93 cf 02 	sts	0x02CF, r22
	while (c < limit)
     dc8:	6c 17       	cp	r22, r28
     dca:	7d 07       	cpc	r23, r29
     dcc:	18 f5       	brcc	.+70     	; 0xe14 <_Z7forwardv+0xc2>
	{
		OCR1A_Write( c );
     dce:	c9 01       	movw	r24, r18
     dd0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z11OCR1A_Writej>
		OCR1B_Write( c );
     dd4:	80 91 cf 02 	lds	r24, 0x02CF
     dd8:	90 91 d0 02 	lds	r25, 0x02D0
     ddc:	0e 94 86 13 	call	0x270c	; 0x270c <_Z11OCR1B_Writej>
		c++;
     de0:	80 91 cf 02 	lds	r24, 0x02CF
     de4:	90 91 d0 02 	lds	r25, 0x02D0
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	90 93 d0 02 	sts	0x02D0, r25
     dee:	80 93 cf 02 	sts	0x02CF, r24
		delay(400);
     df2:	60 e9       	ldi	r22, 0x90	; 144
     df4:	71 e0       	ldi	r23, 0x01	; 1
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
void forward()
{
    counts_per_period = get_top_value( BASE_FREQ );
	limit  = round( counts_per_period / 8.0 );
	c      = round( counts_per_period / 22.0 );
	while (c < limit)
     dfe:	20 91 cf 02 	lds	r18, 0x02CF
     e02:	30 91 d0 02 	lds	r19, 0x02D0
     e06:	80 91 d1 02 	lds	r24, 0x02D1
     e0a:	90 91 d2 02 	lds	r25, 0x02D2
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	e8 f2       	brcs	.-70     	; 0xdce <_Z7forwardv+0x7c>
		OCR1A_Write( c );
		OCR1B_Write( c );
		c++;
		delay(400);
	}
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	08 95       	ret

00000e22 <_Z8backwardv>:
void backward()
{
    counts_per_period = get_top_value( BASE_FREQ );
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	88 e4       	ldi	r24, 0x48	; 72
     e28:	92 e4       	ldi	r25, 0x42	; 66
     e2a:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z13get_top_valuef>
     e2e:	bc 01       	movw	r22, r24
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__floatunsisf>
     e38:	60 93 cb 02 	sts	0x02CB, r22
     e3c:	70 93 cc 02 	sts	0x02CC, r23
     e40:	80 93 cd 02 	sts	0x02CD, r24
     e44:	90 93 ce 02 	sts	0x02CE, r25
	limit = round( counts_per_period / 22.0 );
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 eb       	ldi	r20, 0xB0	; 176
     e4e:	51 e4       	ldi	r21, 0x41	; 65
     e50:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
     e54:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <round>
     e58:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
     e5c:	70 93 d2 02 	sts	0x02D2, r23
     e60:	60 93 d1 02 	sts	0x02D1, r22
	while (c > limit)
     e64:	20 91 cf 02 	lds	r18, 0x02CF
     e68:	30 91 d0 02 	lds	r19, 0x02D0
     e6c:	62 17       	cp	r22, r18
     e6e:	73 07       	cpc	r23, r19
     e70:	18 f5       	brcc	.+70     	; 0xeb8 <_Z8backwardv+0x96>
	{
		OCR1A_Write( c );
     e72:	c9 01       	movw	r24, r18
     e74:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z11OCR1A_Writej>
		OCR1B_Write( c );
     e78:	80 91 cf 02 	lds	r24, 0x02CF
     e7c:	90 91 d0 02 	lds	r25, 0x02D0
     e80:	0e 94 86 13 	call	0x270c	; 0x270c <_Z11OCR1B_Writej>
		c--;
     e84:	80 91 cf 02 	lds	r24, 0x02CF
     e88:	90 91 d0 02 	lds	r25, 0x02D0
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	90 93 d0 02 	sts	0x02D0, r25
     e92:	80 93 cf 02 	sts	0x02CF, r24
		delay(400);
     e96:	60 e9       	ldi	r22, 0x90	; 144
     e98:	71 e0       	ldi	r23, 0x01	; 1
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z5delayl>
}
void backward()
{
    counts_per_period = get_top_value( BASE_FREQ );
	limit = round( counts_per_period / 22.0 );
	while (c > limit)
     ea2:	20 91 cf 02 	lds	r18, 0x02CF
     ea6:	30 91 d0 02 	lds	r19, 0x02D0
     eaa:	80 91 d1 02 	lds	r24, 0x02D1
     eae:	90 91 d2 02 	lds	r25, 0x02D2
     eb2:	82 17       	cp	r24, r18
     eb4:	93 07       	cpc	r25, r19
     eb6:	e8 f2       	brcs	.-70     	; 0xe72 <_Z8backwardv+0x50>
     eb8:	08 95       	ret

00000eba <turn_output_on>:
	}
}

void turn_output_on( byte bit_number )
{
	switch (bit_number)
     eba:	84 30       	cpi	r24, 0x04	; 4
     ebc:	d9 f0       	breq	.+54     	; 0xef4 <turn_output_on+0x3a>
     ebe:	85 30       	cpi	r24, 0x05	; 5
     ec0:	30 f0       	brcs	.+12     	; 0xece <turn_output_on+0x14>
     ec2:	86 30       	cpi	r24, 0x06	; 6
     ec4:	99 f0       	breq	.+38     	; 0xeec <turn_output_on+0x32>
     ec6:	86 30       	cpi	r24, 0x06	; 6
     ec8:	40 f4       	brcc	.+16     	; 0xeda <turn_output_on+0x20>
				break;
	case 3:		LOWSIDE_PORT_2 |= LOWSIDE_3;
				break;
	case 4:		LOWSIDE_PORT_3 |= LOWSIDE_4;
				break;
	case 5:		LOWSIDE_PORT_3 |= LOWSIDE_5;
     eca:	59 9a       	sbi	0x0b, 1	; 11
				break;
     ecc:	08 95       	ret
	}
}

void turn_output_on( byte bit_number )
{
	switch (bit_number)
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	79 f0       	breq	.+30     	; 0xef0 <turn_output_on+0x36>
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	28 f0       	brcs	.+10     	; 0xee0 <turn_output_on+0x26>
	{
	case 1:		LOWSIDE_PORT_1 |= LOWSIDE_1;
				break;
	case 2:		LOWSIDE_PORT_1 |= LOWSIDE_2;
				break;
	case 3:		LOWSIDE_PORT_2 |= LOWSIDE_3;
     ed6:	40 9a       	sbi	0x08, 0	; 8
				break;
     ed8:	08 95       	ret
	}
}

void turn_output_on( byte bit_number )
{
	switch (bit_number)
     eda:	87 30       	cpi	r24, 0x07	; 7
     edc:	29 f0       	breq	.+10     	; 0xee8 <turn_output_on+0x2e>
     ede:	08 95       	ret
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	e9 f7       	brne	.-6      	; 0xede <turn_output_on+0x24>
	{
	case 1:		LOWSIDE_PORT_1 |= LOWSIDE_1;
     ee4:	2b 9a       	sbi	0x05, 3	; 5
				break;
     ee6:	08 95       	ret
				break;
	case 5:		LOWSIDE_PORT_3 |= LOWSIDE_5;
				break;
	case 6:		LOWSIDE_PORT_2 |= LOWSIDE_6;
				break;
	case 7:		LOWSIDE_PORT_2 |= LOWSIDE_7;
     ee8:	47 9a       	sbi	0x08, 7	; 8
     eea:	08 95       	ret
				break;
	case 4:		LOWSIDE_PORT_3 |= LOWSIDE_4;
				break;
	case 5:		LOWSIDE_PORT_3 |= LOWSIDE_5;
				break;
	case 6:		LOWSIDE_PORT_2 |= LOWSIDE_6;
     eec:	46 9a       	sbi	0x08, 6	; 8
				break;
     eee:	08 95       	ret
{
	switch (bit_number)
	{
	case 1:		LOWSIDE_PORT_1 |= LOWSIDE_1;
				break;
	case 2:		LOWSIDE_PORT_1 |= LOWSIDE_2;
     ef0:	2c 9a       	sbi	0x05, 4	; 5
				break;
     ef2:	08 95       	ret
	case 3:		LOWSIDE_PORT_2 |= LOWSIDE_3;
				break;
	case 4:		LOWSIDE_PORT_3 |= LOWSIDE_4;
     ef4:	58 9a       	sbi	0x0b, 0	; 11
				break;
     ef6:	08 95       	ret

00000ef8 <turn_output_off>:
	}
}

void turn_output_off( byte bit_number )
{
	switch (bit_number)
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	d9 f0       	breq	.+54     	; 0xf32 <turn_output_off+0x3a>
     efc:	85 30       	cpi	r24, 0x05	; 5
     efe:	30 f0       	brcs	.+12     	; 0xf0c <turn_output_off+0x14>
     f00:	86 30       	cpi	r24, 0x06	; 6
     f02:	99 f0       	breq	.+38     	; 0xf2a <turn_output_off+0x32>
     f04:	86 30       	cpi	r24, 0x06	; 6
     f06:	40 f4       	brcc	.+16     	; 0xf18 <turn_output_off+0x20>
				break;
	case 3:		LOWSIDE_PORT_2 &= ~LOWSIDE_3;
				break;
	case 4:		LOWSIDE_PORT_3 &= ~LOWSIDE_4;
				break;
	case 5:		LOWSIDE_PORT_3 &= ~LOWSIDE_5;
     f08:	59 98       	cbi	0x0b, 1	; 11
				break;
     f0a:	08 95       	ret
	}
}

void turn_output_off( byte bit_number )
{
	switch (bit_number)
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	79 f0       	breq	.+30     	; 0xf2e <turn_output_off+0x36>
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	28 f0       	brcs	.+10     	; 0xf1e <turn_output_off+0x26>
	{
	case 1:		LOWSIDE_PORT_1 &= ~LOWSIDE_1;
				break;
	case 2:		LOWSIDE_PORT_1 &= ~LOWSIDE_2;
				break;
	case 3:		LOWSIDE_PORT_2 &= ~LOWSIDE_3;
     f14:	40 98       	cbi	0x08, 0	; 8
				break;
     f16:	08 95       	ret
	}
}

void turn_output_off( byte bit_number )
{
	switch (bit_number)
     f18:	87 30       	cpi	r24, 0x07	; 7
     f1a:	29 f0       	breq	.+10     	; 0xf26 <turn_output_off+0x2e>
     f1c:	08 95       	ret
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	e9 f7       	brne	.-6      	; 0xf1c <turn_output_off+0x24>
	{
	case 1:		LOWSIDE_PORT_1 &= ~LOWSIDE_1;
     f22:	2b 98       	cbi	0x05, 3	; 5
				break;
     f24:	08 95       	ret
				break;
	case 5:		LOWSIDE_PORT_3 &= ~LOWSIDE_5;
				break;
	case 6:		LOWSIDE_PORT_2 &= ~LOWSIDE_6;
				break;
	case 7:		LOWSIDE_PORT_2 &= ~LOWSIDE_7;
     f26:	47 98       	cbi	0x08, 7	; 8
     f28:	08 95       	ret
				break;
	case 4:		LOWSIDE_PORT_3 &= ~LOWSIDE_4;
				break;
	case 5:		LOWSIDE_PORT_3 &= ~LOWSIDE_5;
				break;
	case 6:		LOWSIDE_PORT_2 &= ~LOWSIDE_6;
     f2a:	46 98       	cbi	0x08, 6	; 8
				break;
     f2c:	08 95       	ret
{
	switch (bit_number)
	{
	case 1:		LOWSIDE_PORT_1 &= ~LOWSIDE_1;
				break;
	case 2:		LOWSIDE_PORT_1 &= ~LOWSIDE_2;
     f2e:	2c 98       	cbi	0x05, 4	; 5
				break;
     f30:	08 95       	ret
	case 3:		LOWSIDE_PORT_2 &= ~LOWSIDE_3;
				break;
	case 4:		LOWSIDE_PORT_3 &= ~LOWSIDE_4;
     f32:	58 98       	cbi	0x0b, 0	; 11
				break;
     f34:	08 95       	ret

00000f36 <set_lowside_byte>:
	LOWSIDE_DDR_3 |= (LOWSIDE_4 | LOWSIDE_5);

}

void set_lowside_byte(byte mValue)
{
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	f8 2e       	mov	r15, r24
	byte test_bit;
	for (int i=0; i<8; i++)
     f42:	c0 e0       	ldi	r28, 0x00	; 0
     f44:	d0 e0       	ldi	r29, 0x00	; 0
	{
		test_bit = (1<<i);
     f46:	01 e0       	ldi	r16, 0x01	; 1
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	06 c0       	rjmp	.+12     	; 0xf58 <set_lowside_byte+0x22>
		if (mValue & test_bit)
			turn_output_on (i);
     f4c:	0e 94 5d 07 	call	0xeba	; 0xeba <turn_output_on>
}

void set_lowside_byte(byte mValue)
{
	byte test_bit;
	for (int i=0; i<8; i++)
     f50:	21 96       	adiw	r28, 0x01	; 1
     f52:	c8 30       	cpi	r28, 0x08	; 8
     f54:	d1 05       	cpc	r29, r1
     f56:	89 f0       	breq	.+34     	; 0xf7a <set_lowside_byte+0x44>
	{
		test_bit = (1<<i);
     f58:	98 01       	movw	r18, r16
     f5a:	8c 2f       	mov	r24, r28
     f5c:	0c 2e       	mov	r0, r28
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <set_lowside_byte+0x2e>
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <set_lowside_byte+0x2a>
		if (mValue & test_bit)
     f68:	2f 21       	and	r18, r15
     f6a:	81 f7       	brne	.-32     	; 0xf4c <set_lowside_byte+0x16>
			turn_output_on (i);
		else 
			turn_output_off(i);
     f6c:	8c 2f       	mov	r24, r28
     f6e:	0e 94 7c 07 	call	0xef8	; 0xef8 <turn_output_off>
}

void set_lowside_byte(byte mValue)
{
	byte test_bit;
	for (int i=0; i<8; i++)
     f72:	21 96       	adiw	r28, 0x01	; 1
     f74:	c8 30       	cpi	r28, 0x08	; 8
     f76:	d1 05       	cpc	r29, r1
     f78:	79 f7       	brne	.-34     	; 0xf58 <set_lowside_byte+0x22>
		if (mValue & test_bit)
			turn_output_on (i);
		else 
			turn_output_off(i);
	}
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	08 95       	ret

00000f86 <lowside_init>:
#include "can_board_msg.h"
#include "lowside.h"


void lowside_init()
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
	// set all to off
	for (int i=1; i<8; i++)
     f8a:	c1 e0       	ldi	r28, 0x01	; 1
     f8c:	d0 e0       	ldi	r29, 0x00	; 0
		turn_output_off( i );
     f8e:	8c 2f       	mov	r24, r28
     f90:	0e 94 7c 07 	call	0xef8	; 0xef8 <turn_output_off>


void lowside_init()
{
	// set all to off
	for (int i=1; i<8; i++)
     f94:	21 96       	adiw	r28, 0x01	; 1
     f96:	c8 30       	cpi	r28, 0x08	; 8
     f98:	d1 05       	cpc	r29, r1
     f9a:	c9 f7       	brne	.-14     	; 0xf8e <lowside_init+0x8>
		turn_output_off( i );

	// set dio pins as outputs
	LOWSIDE_DDR_1 |= (LOWSIDE_1 | LOWSIDE_2);
     f9c:	84 b1       	in	r24, 0x04	; 4
     f9e:	88 61       	ori	r24, 0x18	; 24
     fa0:	84 b9       	out	0x04, r24	; 4
	LOWSIDE_DDR_2 |= (LOWSIDE_3 | LOWSIDE_6 | LOWSIDE_7);
     fa2:	87 b1       	in	r24, 0x07	; 7
     fa4:	81 6c       	ori	r24, 0xC1	; 193
     fa6:	87 b9       	out	0x07, r24	; 7
	LOWSIDE_DDR_3 |= (LOWSIDE_4 | LOWSIDE_5);
     fa8:	8a b1       	in	r24, 0x0a	; 10
     faa:	83 60       	ori	r24, 0x03	; 3
     fac:	8a b9       	out	0x0a, r24	; 10

}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <__vector_27>:
byte sample_index   = 0;
byte next_channel   = 1;
byte sample_counter = 0;

ISR ( ADC_vect )
{
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
	if (sample_counter++ > NUM_AVGS) 
     fce:	80 91 24 03 	lds	r24, 0x0324
     fd2:	98 2f       	mov	r25, r24
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	90 93 24 03 	sts	0x0324, r25
     fda:	8b 30       	cpi	r24, 0x0B	; 11
     fdc:	08 f4       	brcc	.+2      	; 0xfe0 <__vector_27+0x2c>
     fde:	45 c0       	rjmp	.+138    	; 0x106a <__vector_27+0xb6>
	{
		sample_counter=0;		
     fe0:	10 92 24 03 	sts	0x0324, r1
		for (int i=0; i<MAX_USED_CHANNELS; i++)
		{
			// maybe best not to do in interrupt!
			//SampleAvg[i] = accumulators[i] / NUM_AVGS;		// could be expensive time wise!
			accumulators[i] = 0.0;		// start over
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	dc 01       	movw	r26, r24
     fea:	80 93 f3 02 	sts	0x02F3, r24
     fee:	90 93 f4 02 	sts	0x02F4, r25
     ff2:	a0 93 f5 02 	sts	0x02F5, r26
     ff6:	b0 93 f6 02 	sts	0x02F6, r27
     ffa:	80 93 f7 02 	sts	0x02F7, r24
     ffe:	90 93 f8 02 	sts	0x02F8, r25
    1002:	a0 93 f9 02 	sts	0x02F9, r26
    1006:	b0 93 fa 02 	sts	0x02FA, r27
    100a:	80 93 fb 02 	sts	0x02FB, r24
    100e:	90 93 fc 02 	sts	0x02FC, r25
    1012:	a0 93 fd 02 	sts	0x02FD, r26
    1016:	b0 93 fe 02 	sts	0x02FE, r27
    101a:	80 93 ff 02 	sts	0x02FF, r24
    101e:	90 93 00 03 	sts	0x0300, r25
    1022:	a0 93 01 03 	sts	0x0301, r26
    1026:	b0 93 02 03 	sts	0x0302, r27
    102a:	80 93 03 03 	sts	0x0303, r24
    102e:	90 93 04 03 	sts	0x0304, r25
    1032:	a0 93 05 03 	sts	0x0305, r26
    1036:	b0 93 06 03 	sts	0x0306, r27
    103a:	80 93 07 03 	sts	0x0307, r24
    103e:	90 93 08 03 	sts	0x0308, r25
    1042:	a0 93 09 03 	sts	0x0309, r26
    1046:	b0 93 0a 03 	sts	0x030A, r27
    104a:	80 93 0b 03 	sts	0x030B, r24
    104e:	90 93 0c 03 	sts	0x030C, r25
    1052:	a0 93 0d 03 	sts	0x030D, r26
    1056:	b0 93 0e 03 	sts	0x030E, r27
    105a:	80 93 0f 03 	sts	0x030F, r24
    105e:	90 93 10 03 	sts	0x0310, r25
    1062:	a0 93 11 03 	sts	0x0311, r26
    1066:	b0 93 12 03 	sts	0x0312, r27
		}
	} 
	word result = ADCL;
    106a:	20 91 78 00 	lds	r18, 0x0078
	result      += (ADCH<<8);
    106e:	30 91 79 00 	lds	r19, 0x0079
    1072:	93 2f       	mov	r25, r19
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	82 0f       	add	r24, r18
    1078:	91 1d       	adc	r25, r1

	next_channel++;
    107a:	20 91 24 01 	lds	r18, 0x0124
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	20 93 24 01 	sts	0x0124, r18
	if (next_channel==4) 
    1084:	24 30       	cpi	r18, 0x04	; 4
    1086:	b9 f1       	breq	.+110    	; 0x10f6 <__vector_27+0x142>
		next_channel++;
	if (next_channel==MAX_USED_CHANNELS)
    1088:	28 30       	cpi	r18, 0x08	; 8
    108a:	51 f1       	breq	.+84     	; 0x10e0 <__vector_27+0x12c>
		next_channel = 1;  

	Sample      [sample_index] = result;
    108c:	20 91 23 03 	lds	r18, 0x0323
    1090:	e2 2f       	mov	r30, r18
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	ed 5e       	subi	r30, 0xED	; 237
    109a:	fc 4f       	sbci	r31, 0xFC	; 252
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
	//accumulators[sample_index] += result;  This caused serious errors!
	sample_index++;
    10a0:	82 2f       	mov	r24, r18
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	80 93 23 03 	sts	0x0323, r24
	if (sample_index == MAX_USED_CHANNELS)
    10a8:	88 30       	cpi	r24, 0x08	; 8
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <__vector_27+0x134>
    10ac:	90 91 24 01 	lds	r25, 0x0124
	{
		sample_index = 0;
		next_channel = 1;
	} 

	byte admux = (ADMUX & 0xE0);
    10b0:	80 91 7c 00 	lds	r24, 0x007C
    10b4:	80 7e       	andi	r24, 0xE0	; 224
	ADMUX  = (admux | next_channel);
    10b6:	89 2b       	or	r24, r25
    10b8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start conversion
    10bc:	80 91 7a 00 	lds	r24, 0x007A
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	80 93 7a 00 	sts	0x007A, r24

}
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

	next_channel++;
	if (next_channel==4) 
		next_channel++;
	if (next_channel==MAX_USED_CHANNELS)
		next_channel = 1;  
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	20 93 24 01 	sts	0x0124, r18
    10e6:	d2 cf       	rjmp	.-92     	; 0x108c <__vector_27+0xd8>
	Sample      [sample_index] = result;
	//accumulators[sample_index] += result;  This caused serious errors!
	sample_index++;
	if (sample_index == MAX_USED_CHANNELS)
	{
		sample_index = 0;
    10e8:	10 92 23 03 	sts	0x0323, r1
		next_channel = 1;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 24 01 	sts	0x0124, r24
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	dd cf       	rjmp	.-70     	; 0x10b0 <__vector_27+0xfc>
	word result = ADCL;
	result      += (ADCH<<8);

	next_channel++;
	if (next_channel==4) 
		next_channel++;
    10f6:	25 e0       	ldi	r18, 0x05	; 5
    10f8:	20 93 24 01 	sts	0x0124, r18
    10fc:	c7 cf       	rjmp	.-114    	; 0x108c <__vector_27+0xd8>

000010fe <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    10fe:	ea e7       	ldi	r30, 0x7A	; 122
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	88 7f       	andi	r24, 0xF8	; 248
    1106:	80 83       	st	Z, r24
}
    1108:	08 95       	ret

0000110a <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83;
    110a:	8b e9       	ldi	r24, 0x9B	; 155
    110c:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC0..ADC7 
	// ADC4 is PB7 which is used as SCLK.  So has been rewired to 
	// 
	DIDR0  = 0xEF;		// ADC4=0 FOR SCLK
    1110:	8f ee       	ldi	r24, 0xEF	; 239
    1112:	80 93 7e 00 	sts	0x007E, r24
	DIDR1  = 0X03;		// ADC8,ADC9
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	80 93 7f 00 	sts	0x007F, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    111c:	80 ea       	ldi	r24, 0xA0	; 160
    111e:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = FIRST_CHANNEL_MUX;
    1122:	81 e4       	ldi	r24, 0x41	; 65
    1124:	80 93 7c 00 	sts	0x007C, r24
}
    1128:	08 95       	ret

0000112a <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = FIRST_CHANNEL_MUX;		// Select POT	
    112a:	81 e4       	ldi	r24, 0x41	; 65
    112c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);			// Start conversion
    1130:	ea e7       	ldi	r30, 0x7A	; 122
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 64       	ori	r24, 0x40	; 64
    1138:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    113a:	08 95       	ret

0000113c <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
    113c:	90 93 5d 03 	sts	0x035D, r25
    1140:	80 93 5c 03 	sts	0x035C, r24
}
    1144:	08 95       	ret

00001146 <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
    1146:	90 93 5f 03 	sts	0x035F, r25
    114a:	80 93 5e 03 	sts	0x035E, r24
}
    114e:	08 95       	ret

00001150 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
    1154:	ed ee       	ldi	r30, 0xED	; 237
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    115a:	82 95       	swap	r24
    115c:	80 7f       	andi	r24, 0xF0	; 240
    115e:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
    1160:	c1 ef       	ldi	r28, 0xF1	; 241
    1162:	d0 e0       	ldi	r29, 0x00	; 0
    1164:	38 81       	ld	r19, Y
    1166:	cb 01       	movw	r24, r22
    1168:	80 7e       	andi	r24, 0xE0	; 224
    116a:	90 70       	andi	r25, 0x00	; 0
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	92 95       	swap	r25
    1172:	82 95       	swap	r24
    1174:	8f 70       	andi	r24, 0x0F	; 15
    1176:	89 27       	eor	r24, r25
    1178:	9f 70       	andi	r25, 0x0F	; 15
    117a:	89 27       	eor	r24, r25
    117c:	38 7f       	andi	r19, 0xF8	; 248
    117e:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
    1180:	a0 ef       	ldi	r26, 0xF0	; 240
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	8c 91       	ld	r24, X
    1186:	66 0f       	add	r22, r22
    1188:	66 0f       	add	r22, r22
    118a:	66 0f       	add	r22, r22
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
    1190:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
    1192:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
    1194:	a5 ef       	ldi	r26, 0xF5	; 245
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	8c 91       	ld	r24, X
    119a:	87 60       	ori	r24, 0x07	; 7
    119c:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
    119e:	a4 ef       	ldi	r26, 0xF4	; 244
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	8c 91       	ld	r24, X
    11a4:	88 6f       	ori	r24, 0xF8	; 248
    11a6:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    11a8:	20 83       	st	Z, r18
}
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    11b0:	ed ee       	ldi	r30, 0xED	; 237
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    11b6:	82 95       	swap	r24
    11b8:	80 7f       	andi	r24, 0xF0	; 240
    11ba:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
    11bc:	a5 ef       	ldi	r26, 0xF5	; 245
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	8c 91       	ld	r24, X
    11c2:	88 7f       	andi	r24, 0xF8	; 248
    11c4:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
    11c6:	a4 ef       	ldi	r26, 0xF4	; 244
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	8c 91       	ld	r24, X
    11cc:	87 70       	andi	r24, 0x07	; 7
    11ce:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    11d0:	90 83       	st	Z, r25
}
    11d2:	08 95       	ret

000011d4 <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
    11d4:	25 2f       	mov	r18, r21
    11d6:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    11d8:	ed ee       	ldi	r30, 0xED	; 237
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    11de:	82 95       	swap	r24
    11e0:	80 7f       	andi	r24, 0xF0	; 240
    11e2:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
    11e4:	86 2f       	mov	r24, r22
    11e6:	82 95       	swap	r24
    11e8:	86 95       	lsr	r24
    11ea:	87 70       	andi	r24, 0x07	; 7
    11ec:	44 0f       	add	r20, r20
    11ee:	44 0f       	add	r20, r20
    11f0:	44 0f       	add	r20, r20
    11f2:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    11f4:	c9 01       	movw	r24, r18
    11f6:	80 7e       	andi	r24, 0xE0	; 224
    11f8:	9f 71       	andi	r25, 0x1F	; 31
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	92 95       	swap	r25
    1200:	82 95       	swap	r24
    1202:	8f 70       	andi	r24, 0x0F	; 15
    1204:	89 27       	eor	r24, r25
    1206:	9f 70       	andi	r25, 0x0F	; 15
    1208:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
    120a:	22 0f       	add	r18, r18
    120c:	22 0f       	add	r18, r18
    120e:	22 0f       	add	r18, r18
    1210:	37 2f       	mov	r19, r23
    1212:	32 95       	swap	r19
    1214:	36 95       	lsr	r19
    1216:	37 70       	andi	r19, 0x07	; 7
    1218:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
    121a:	77 0f       	add	r23, r23
    121c:	77 0f       	add	r23, r23
    121e:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
    1220:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
    1224:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    1228:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
    122c:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
    1230:	50 83       	st	Z, r21
}
    1232:	08 95       	ret

00001234 <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	f8 2e       	mov	r15, r24
    1240:	8b 01       	movw	r16, r22
    1242:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    124a:	c7 2f       	mov	r28, r23
    124c:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
    124e:	c8 01       	movw	r24, r16
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1256:	27 2f       	mov	r18, r23
    1258:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    125a:	ed ee       	ldi	r30, 0xED	; 237
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1260:	f2 94       	swap	r15
    1262:	b0 ef       	ldi	r27, 0xF0	; 240
    1264:	fb 22       	and	r15, r27
    1266:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
    1268:	43 ef       	ldi	r20, 0xF3	; 243
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	da 01       	movw	r26, r20
    126e:	6c 91       	ld	r22, X
    1270:	8d 2f       	mov	r24, r29
    1272:	82 95       	swap	r24
    1274:	86 95       	lsr	r24
    1276:	87 70       	andi	r24, 0x07	; 7
    1278:	68 7f       	andi	r22, 0xF8	; 248
    127a:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    127c:	ce 01       	movw	r24, r28
    127e:	80 7e       	andi	r24, 0xE0	; 224
    1280:	9f 71       	andi	r25, 0x1F	; 31
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	92 95       	swap	r25
    1288:	82 95       	swap	r24
    128a:	8f 70       	andi	r24, 0x0F	; 15
    128c:	89 27       	eor	r24, r25
    128e:	9f 70       	andi	r25, 0x0F	; 15
    1290:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
    1292:	a1 ef       	ldi	r26, 0xF1	; 241
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	7c 91       	ld	r23, X
    1298:	fc 2e       	mov	r15, r28
    129a:	ff 0c       	add	r15, r15
    129c:	ff 0c       	add	r15, r15
    129e:	ff 0c       	add	r15, r15
    12a0:	77 70       	andi	r23, 0x07	; 7
    12a2:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
    12a4:	ea 01       	movw	r28, r20
    12a6:	68 83       	st	Y, r22
	CANIDT2 = idt2;
    12a8:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    12ac:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
    12ae:	c7 ef       	ldi	r28, 0xF7	; 247
    12b0:	d0 e0       	ldi	r29, 0x00	; 0
    12b2:	48 81       	ld	r20, Y
    12b4:	83 2f       	mov	r24, r19
    12b6:	82 95       	swap	r24
    12b8:	86 95       	lsr	r24
    12ba:	87 70       	andi	r24, 0x07	; 7
    12bc:	48 7f       	andi	r20, 0xF8	; 248
    12be:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
    12c0:	c9 01       	movw	r24, r18
    12c2:	80 7e       	andi	r24, 0xE0	; 224
    12c4:	9f 71       	andi	r25, 0x1F	; 31
    12c6:	96 95       	lsr	r25
    12c8:	87 95       	ror	r24
    12ca:	92 95       	swap	r25
    12cc:	82 95       	swap	r24
    12ce:	8f 70       	andi	r24, 0x0F	; 15
    12d0:	89 27       	eor	r24, r25
    12d2:	9f 70       	andi	r25, 0x0F	; 15
    12d4:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
    12d6:	a5 ef       	ldi	r26, 0xF5	; 245
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	5c 91       	ld	r21, X
    12dc:	22 0f       	add	r18, r18
    12de:	22 0f       	add	r18, r18
    12e0:	22 0f       	add	r18, r18
    12e2:	57 70       	andi	r21, 0x07	; 7
    12e4:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
    12e6:	48 83       	st	Y, r20
	CANIDM2 = idm2;
    12e8:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
    12ec:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
    12ee:	00 83       	st	Z, r16
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	08 95       	ret

000012fc <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
    12fc:	ed ee       	ldi	r30, 0xED	; 237
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1302:	82 95       	swap	r24
    1304:	80 7f       	andi	r24, 0xF0	; 240
    1306:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
    1308:	a7 ef       	ldi	r26, 0xF7	; 247
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	8c 91       	ld	r24, X
    130e:	88 7f       	andi	r24, 0xF8	; 248
    1310:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
    1312:	a6 ef       	ldi	r26, 0xF6	; 246
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	8c 91       	ld	r24, X
    1318:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
    131a:	a5 ef       	ldi	r26, 0xF5	; 245
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	8c 91       	ld	r24, X
    1320:	87 70       	andi	r24, 0x07	; 7
    1322:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1324:	90 83       	st	Z, r25
}
    1326:	08 95       	ret

00001328 <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1328:	ed ee       	ldi	r30, 0xED	; 237
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    132e:	82 95       	swap	r24
    1330:	80 7f       	andi	r24, 0xF0	; 240
    1332:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1334:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    1338:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    133c:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    1340:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    1344:	90 83       	st	Z, r25
}
    1346:	08 95       	ret

00001348 <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1348:	ed ee       	ldi	r30, 0xED	; 237
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    134e:	82 95       	swap	r24
    1350:	80 7f       	andi	r24, 0xF0	; 240
    1352:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
    1354:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
    1358:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
    135c:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
    1360:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
    1364:	90 83       	st	Z, r25
}
    1366:	08 95       	ret

00001368 <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
    136e:	ed ee       	ldi	r30, 0xED	; 237
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
    1374:	38 2f       	mov	r19, r24
    1376:	32 95       	swap	r19
    1378:	30 7f       	andi	r19, 0xF0	; 240
    137a:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
    137c:	ce ed       	ldi	r28, 0xDE	; 222
    137e:	d0 e0       	ldi	r29, 0x00	; 0
    1380:	98 81       	ld	r25, Y
    1382:	a1 e0       	ldi	r26, 0x01	; 1
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <_Z21can_setup_receive_mobhssh+0x24>
    1388:	aa 0f       	add	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <_Z21can_setup_receive_mobhssh+0x20>
    1390:	9a 2b       	or	r25, r26
    1392:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1394:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1396:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1398:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    139c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    13a0:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    13a4:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    13a8:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
    13aa:	20 69       	ori	r18, 0x90	; 144
    13ac:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
    13b0:	a8 ed       	ldi	r26, 0xD8	; 216
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	8c 91       	ld	r24, X
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
    13ba:	10 83       	st	Z, r17
}
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	08 95       	ret

000013c4 <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	28 e0       	ldi	r18, 0x08	; 8
    13dc:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
    13e0:	60 91 60 03 	lds	r22, 0x0360
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	28 e0       	ldi	r18, 0x08	; 8
    13f8:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    13fc:	cd ee       	ldi	r28, 0xED	; 237
    13fe:	d0 e0       	ldi	r29, 0x00	; 0
    1400:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1402:	80 e3       	ldi	r24, 0x30	; 48
    1404:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    1406:	05 ef       	ldi	r16, 0xF5	; 245
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	f8 01       	movw	r30, r16
    140c:	80 81       	ld	r24, Z
    140e:	88 7f       	andi	r24, 0xF8	; 248
    1410:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    1412:	84 ef       	ldi	r24, 0xF4	; 244
    1414:	e8 2e       	mov	r14, r24
    1416:	f1 2c       	mov	r15, r1
    1418:	f7 01       	movw	r30, r14
    141a:	80 81       	ld	r24, Z
    141c:	87 70       	andi	r24, 0x07	; 7
    141e:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    1420:	98 83       	st	Y, r25
   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	63 e2       	ldi	r22, 0x23	; 35
    1426:	7c ef       	ldi	r23, 0xFC	; 252
    1428:	43 e2       	ldi	r20, 0x23	; 35
    142a:	5c ef       	ldi	r21, 0xFC	; 252
    142c:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
    1430:	85 e0       	ldi	r24, 0x05	; 5
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	28 e0       	ldi	r18, 0x08	; 8
    143c:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1440:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1442:	80 e5       	ldi	r24, 0x50	; 80
    1444:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    1446:	f8 01       	movw	r30, r16
    1448:	80 81       	ld	r24, Z
    144a:	88 7f       	andi	r24, 0xF8	; 248
    144c:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    144e:	f7 01       	movw	r30, r14
    1450:	80 81       	ld	r24, Z
    1452:	87 70       	andi	r24, 0x07	; 7
    1454:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    1456:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
    1458:	85 e0       	ldi	r24, 0x05	; 5
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	7c ef       	ldi	r23, 0xFC	; 252
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	5c ef       	ldi	r21, 0xFC	; 252
    1462:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z20can_add_id_to_filterhtt>
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	08 95       	ret

00001474 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
    1474:	ed ee       	ldi	r30, 0xED	; 237
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
    147a:	82 95       	swap	r24
    147c:	80 7f       	andi	r24, 0xF0	; 240
    147e:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
    1480:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    1484:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
    1488:	90 83       	st	Z, r25
}
    148a:	08 95       	ret

0000148c <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
    148c:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
    148e:	40 91 f3 00 	lds	r20, 0x00F3
    1492:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
    1494:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
    1498:	80 91 f1 00 	lds	r24, 0x00F1
    149c:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
    149e:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
    14a2:	ba 01       	movw	r22, r20
    14a4:	76 95       	lsr	r23
    14a6:	67 95       	ror	r22
    14a8:	76 95       	lsr	r23
    14aa:	67 95       	ror	r22
    14ac:	76 95       	lsr	r23
    14ae:	67 95       	ror	r22
    14b0:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
    14b2:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	22 95       	swap	r18
    14ba:	32 95       	swap	r19
    14bc:	30 7f       	andi	r19, 0xF0	; 240
    14be:	32 27       	eor	r19, r18
    14c0:	20 7f       	andi	r18, 0xF0	; 240
    14c2:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
    14c4:	54 2f       	mov	r21, r20
    14c6:	44 27       	eor	r20, r20
    14c8:	52 95       	swap	r21
    14ca:	55 0f       	add	r21, r21
    14cc:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    14ce:	24 2b       	or	r18, r20
    14d0:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
    14d2:	ac 01       	movw	r20, r24
    14d4:	56 95       	lsr	r21
    14d6:	47 95       	ror	r20
    14d8:	56 95       	lsr	r21
    14da:	47 95       	ror	r20
    14dc:	56 95       	lsr	r21
    14de:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    14e0:	24 2b       	or	r18, r20
    14e2:	35 2b       	or	r19, r21
    14e4:	32 83       	std	Z+2, r19	; 0x02
    14e6:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
    14e8:	82 95       	swap	r24
    14ea:	88 0f       	add	r24, r24
    14ec:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
    14ee:	a6 95       	lsr	r26
    14f0:	a6 95       	lsr	r26
    14f2:	a6 95       	lsr	r26
    14f4:	a8 2b       	or	r26, r24
    14f6:	a3 83       	std	Z+3, r26	; 0x03
}
    14f8:	08 95       	ret

000014fa <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
    1500:	0e 94 46 0a 	call	0x148c	; 0x148c <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
    1504:	80 91 ef 00 	lds	r24, 0x00EF
    1508:	8f 70       	andi	r24, 0x0F	; 15
    150a:	28 2f       	mov	r18, r24
    150c:	22 0f       	add	r18, r18
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	91 7e       	andi	r25, 0xE1	; 225
    1512:	92 2b       	or	r25, r18
    1514:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
    1516:	48 2f       	mov	r20, r24
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	41 15       	cp	r20, r1
    151c:	51 05       	cpc	r21, r1
    151e:	59 f0       	breq	.+22     	; 0x1536 <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
    1520:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
    1526:	90 91 fa 00 	lds	r25, 0x00FA
    152a:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	24 17       	cp	r18, r20
    1532:	35 07       	cpc	r19, r21
    1534:	c4 f3       	brlt	.-16     	; 0x1526 <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	2f 93       	push	r18
    1548:	3f 93       	push	r19
    154a:	4f 93       	push	r20
    154c:	5f 93       	push	r21
    154e:	6f 93       	push	r22
    1550:	7f 93       	push	r23
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	cf 93       	push	r28
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
    1560:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
    1564:	40 91 ec 00 	lds	r20, 0x00EC
    1568:	42 95       	swap	r20
    156a:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    156c:	4f 30       	cpi	r20, 0x0F	; 15
    156e:	09 f4       	brne	.+2      	; 0x1572 <__vector_18+0x36>
    1570:	87 c0       	rjmp	.+270    	; 0x1680 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
    1572:	80 91 ec 00 	lds	r24, 0x00EC
    1576:	80 7f       	andi	r24, 0xF0	; 240
    1578:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
    157c:	80 91 ee 00 	lds	r24, 0x00EE
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	8f 71       	andi	r24, 0x1F	; 31
    1584:	90 70       	andi	r25, 0x00	; 0
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	09 f4       	brne	.+2      	; 0x158c <__vector_18+0x50>
    158a:	40 c0       	rjmp	.+128    	; 0x160c <__vector_18+0xd0>
		 byte st = CANSTMOB;
    158c:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	82 ff       	sbrs	r24, 2
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <__vector_18+0x64>
    1596:	20 91 ee 00 	lds	r18, 0x00EE
    159a:	2f 7e       	andi	r18, 0xEF	; 239
    159c:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
    15a0:	9c 01       	movw	r18, r24
    15a2:	23 70       	andi	r18, 0x03	; 3
    15a4:	30 70       	andi	r19, 0x00	; 0
    15a6:	21 15       	cp	r18, r1
    15a8:	31 05       	cpc	r19, r1
    15aa:	29 f0       	breq	.+10     	; 0x15b6 <__vector_18+0x7a>
    15ac:	20 91 ee 00 	lds	r18, 0x00EE
    15b0:	27 7f       	andi	r18, 0xF7	; 247
    15b2:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
    15b6:	81 ff       	sbrs	r24, 1
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <__vector_18+0x88>
    15ba:	20 91 ee 00 	lds	r18, 0x00EE
    15be:	2b 7f       	andi	r18, 0xFB	; 251
    15c0:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
    15c4:	80 ff       	sbrs	r24, 0
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <__vector_18+0x96>
    15c8:	80 91 ee 00 	lds	r24, 0x00EE
    15cc:	8d 7f       	andi	r24, 0xFD	; 253
    15ce:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
    15d2:	45 30       	cpi	r20, 0x05	; 5
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <__vector_18+0x9c>
    15d6:	4b c0       	rjmp	.+150    	; 0x166e <__vector_18+0x132>
    15d8:	41 30       	cpi	r20, 0x01	; 1
    15da:	09 f4       	brne	.+2      	; 0x15de <__vector_18+0xa2>
    15dc:	48 c0       	rjmp	.+144    	; 0x166e <__vector_18+0x132>
    15de:	43 30       	cpi	r20, 0x03	; 3
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <__vector_18+0xa8>
    15e2:	45 c0       	rjmp	.+138    	; 0x166e <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
    15e4:	c0 93 ed 00 	sts	0x00ED, r28
}
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	cf 91       	pop	r28
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
    160c:	80 91 ee 00 	lds	r24, 0x00EE
    1610:	85 fd       	sbrc	r24, 5
    1612:	13 c0       	rjmp	.+38     	; 0x163a <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
    1614:	80 91 ee 00 	lds	r24, 0x00EE
    1618:	86 ff       	sbrs	r24, 6
    161a:	e4 cf       	rjmp	.-56     	; 0x15e4 <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
    161c:	e0 91 5e 03 	lds	r30, 0x035E
    1620:	f0 91 5f 03 	lds	r31, 0x035F
    1624:	30 97       	sbiw	r30, 0x00	; 0
    1626:	09 f0       	breq	.+2      	; 0x162a <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
    1628:	09 95       	icall

		TransmittedSuccesfully = TRUE;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 53 03 	sts	0x0353, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
    1630:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
    1634:	10 92 ee 00 	sts	0x00EE, r1
    1638:	d5 cf       	rjmp	.-86     	; 0x15e4 <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	80 93 52 03 	sts	0x0352, r24
       	can_retrieve_data( &LastReceivedMsg );
    1640:	83 e4       	ldi	r24, 0x43	; 67
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
    1648:	83 e4       	ldi	r24, 0x43	; 67
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
    1650:	88 23       	and	r24, r24
    1652:	69 f4       	brne	.+26     	; 0x166e <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
    1654:	83 e4       	ldi	r24, 0x43	; 67
    1656:	93 e0       	ldi	r25, 0x03	; 3
    1658:	0e 94 f7 10 	call	0x21ee	; 0x21ee <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
    165c:	e0 91 5c 03 	lds	r30, 0x035C
    1660:	f0 91 5d 03 	lds	r31, 0x035D
    1664:	30 97       	sbiw	r30, 0x00	; 0
    1666:	19 f0       	breq	.+6      	; 0x166e <__vector_18+0x132>
    	   		rx_call_back(&LastReceivedMsg);
    1668:	83 e4       	ldi	r24, 0x43	; 67
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
    166e:	88 e9       	ldi	r24, 0x98	; 152
    1670:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
    1674:	80 91 ee 00 	lds	r24, 0x00EE
    1678:	8f 7d       	andi	r24, 0xDF	; 223
    167a:	80 93 ee 00 	sts	0x00EE, r24
    167e:	b2 cf       	rjmp	.-156    	; 0x15e4 <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    1680:	80 91 da 00 	lds	r24, 0x00DA
    1684:	80 93 da 00 	sts	0x00DA, r24
    1688:	af cf       	rjmp	.-162    	; 0x15e8 <__vector_18+0xac>

0000168a <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
    1690:	98 2f       	mov	r25, r24
    1692:	92 95       	swap	r25
    1694:	90 7f       	andi	r25, 0xF0	; 240
   cli();
    1696:	f8 94       	cli
   CANPAGE = page;
    1698:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
    169c:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
    16a0:	48 81       	ld	r20, Y
    16a2:	59 81       	ldd	r21, Y+1	; 0x01
    16a4:	6a 81       	ldd	r22, Y+2	; 0x02
    16a6:	7b 81       	ldd	r23, Y+3	; 0x03
    16a8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	86 95       	lsr	r24
    16b0:	8f 70       	andi	r24, 0x0F	; 15
    16b2:	79 f0       	breq	.+30     	; 0x16d2 <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
    16b4:	fe 01       	movw	r30, r28
    16b6:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
    16bc:	21 91       	ld	r18, Z+
    16be:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	2c 81       	ldd	r18, Y+4	; 0x04
    16c6:	26 95       	lsr	r18
    16c8:	2f 70       	andi	r18, 0x0F	; 15
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	82 17       	cp	r24, r18
    16ce:	93 07       	cpc	r25, r19
    16d0:	ac f3       	brlt	.-22     	; 0x16bc <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
    16d2:	80 91 f0 00 	lds	r24, 0x00F0
    16d6:	8b 7f       	andi	r24, 0xFB	; 251
    16d8:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	86 95       	lsr	r24
    16e0:	8f 70       	andi	r24, 0x0F	; 15
    16e2:	80 65       	ori	r24, 0x50	; 80
    16e4:	80 93 ef 00 	sts	0x00EF, r24
   sei();
    16e8:	78 94       	sei
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
    16f0:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
    16f4:	80 91 ee 00 	lds	r24, 0x00EE
    16f8:	86 ff       	sbrs	r24, 6
    16fa:	fc cf       	rjmp	.-8      	; 0x16f4 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
    16fc:	08 95       	ret

000016fe <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    16fe:	20 91 f8 00 	lds	r18, 0x00F8
    1702:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
    1704:	40 91 f9 00 	lds	r20, 0x00F9
    1708:	94 2f       	mov	r25, r20
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	28 2b       	or	r18, r24
    170e:	39 2b       	or	r19, r25
  return retval;
}
    1710:	c9 01       	movw	r24, r18
    1712:	08 95       	ret

00001714 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
    171a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_Z17can_retrieve_dataP4sCAN>
    171e:	8f 70       	andi	r24, 0x0F	; 15
    1720:	88 0f       	add	r24, r24
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	91 7e       	andi	r25, 0xE1	; 225
    1726:	98 2b       	or	r25, r24
    1728:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    172a:	80 91 f8 00 	lds	r24, 0x00F8
    172e:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
    1730:	40 91 f9 00 	lds	r20, 0x00F9
    1734:	34 2f       	mov	r19, r20
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	82 2b       	or	r24, r18
    173a:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
    173c:	9e 87       	std	Y+14, r25	; 0x0e
    173e:	8d 87       	std	Y+13, r24	; 0x0d
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    1746:	83 30       	cpi	r24, 0x03	; 3
    1748:	61 f0       	breq	.+24     	; 0x1762 <_Z8set_baudh+0x1c>
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	30 f0       	brcs	.+12     	; 0x175a <_Z8set_baudh+0x14>
    174e:	85 30       	cpi	r24, 0x05	; 5
    1750:	d1 f0       	breq	.+52     	; 0x1786 <_Z8set_baudh+0x40>
    1752:	85 30       	cpi	r24, 0x05	; 5
    1754:	80 f4       	brcc	.+32     	; 0x1776 <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    1756:	82 e1       	ldi	r24, 0x12	; 18
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 f0       	breq	.+36     	; 0x1782 <_Z8set_baudh+0x3c>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	71 f0       	breq	.+28     	; 0x177e <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    1762:	8e e0       	ldi	r24, 0x0E	; 14
    1764:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    1768:	84 e0       	ldi	r24, 0x04	; 4
    176a:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    176e:	83 e1       	ldi	r24, 0x13	; 19
    1770:	80 93 e4 00 	sts	0x00E4, r24
    1774:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    1776:	86 30       	cpi	r24, 0x06	; 6
    1778:	a1 f7       	brne	.-24     	; 0x1762 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    177a:	86 e2       	ldi	r24, 0x26	; 38
    177c:	f3 cf       	rjmp	.-26     	; 0x1764 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    177e:	86 e0       	ldi	r24, 0x06	; 6
    1780:	f1 cf       	rjmp	.-30     	; 0x1764 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	ef cf       	rjmp	.-34     	; 0x1764 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    1786:	8e e1       	ldi	r24, 0x1E	; 30
    1788:	ed cf       	rjmp	.-38     	; 0x1764 <_Z8set_baudh+0x1e>

0000178a <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
    1790:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    1794:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
    1796:	29 2f       	mov	r18, r25
    1798:	22 95       	swap	r18
    179a:	20 7f       	andi	r18, 0xF0	; 240
    179c:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
    17a0:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    17a4:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    17a8:	9f 5f       	subi	r25, 0xFF	; 255
    17aa:	96 30       	cpi	r25, 0x06	; 6
    17ac:	a1 f7       	brne	.-24     	; 0x1796 <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
    17ae:	90 ea       	ldi	r25, 0xA0	; 160
    17b0:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
    17b4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_Z8set_baudh>
   can_init_mobs();
    17b8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
    17bc:	80 91 d9 00 	lds	r24, 0x00D9
    17c0:	82 ff       	sbrs	r24, 2
    17c2:	fc cf       	rjmp	.-8      	; 0x17bc <_Z8can_inith+0x32>
   }
   //sei();
}
    17c4:	08 95       	ret

000017c6 <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
    17c6:	88 23       	and	r24, r24
    17c8:	51 f4       	brne	.+20     	; 0x17de <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
    17d0:	84 e0       	ldi	r24, 0x04	; 4
    17d2:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
    17d6:	83 e1       	ldi	r24, 0x13	; 19
    17d8:	80 93 e4 00 	sts	0x00E4, r24
    17dc:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
    17de:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
    17e2:	8c e0       	ldi	r24, 0x0C	; 12
    17e4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
    17e8:	86 e3       	ldi	r24, 0x36	; 54
    17ea:	80 93 e4 00 	sts	0x00E4, r24
    17ee:	08 95       	ret

000017f0 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    17f0:	88 23       	and	r24, r24
    17f2:	51 f4       	brne	.+20     	; 0x1808 <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    17f4:	86 e0       	ldi	r24, 0x06	; 6
    17f6:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    1800:	83 e1       	ldi	r24, 0x13	; 19
    1802:	80 93 e4 00 	sts	0x00E4, r24
    1806:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    180e:	8c e0       	ldi	r24, 0x0C	; 12
    1810:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    1814:	87 e3       	ldi	r24, 0x37	; 55
    1816:	80 93 e4 00 	sts	0x00E4, r24
    181a:	08 95       	ret

0000181c <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    181c:	88 23       	and	r24, r24
    181e:	51 f4       	brne	.+20     	; 0x1834 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    1820:	8e e0       	ldi	r24, 0x0E	; 14
    1822:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    1826:	84 e0       	ldi	r24, 0x04	; 4
    1828:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    182c:	83 e1       	ldi	r24, 0x13	; 19
    182e:	80 93 e4 00 	sts	0x00E4, r24
    1832:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    1834:	86 e0       	ldi	r24, 0x06	; 6
    1836:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    183a:	8c e0       	ldi	r24, 0x0C	; 12
    183c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    1840:	87 e3       	ldi	r24, 0x37	; 55
    1842:	80 93 e4 00 	sts	0x00E4, r24
    1846:	08 95       	ret

00001848 <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1848:	88 23       	and	r24, r24
    184a:	51 f4       	brne	.+20     	; 0x1860 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    184c:	82 e1       	ldi	r24, 0x12	; 18
    184e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    1858:	83 e1       	ldi	r24, 0x13	; 19
    185a:	80 93 e4 00 	sts	0x00E4, r24
    185e:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    1860:	88 e0       	ldi	r24, 0x08	; 8
    1862:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    1866:	8c e0       	ldi	r24, 0x0C	; 12
    1868:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    186c:	87 e3       	ldi	r24, 0x37	; 55
    186e:	80 93 e4 00 	sts	0x00E4, r24
    1872:	08 95       	ret

00001874 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1874:	88 23       	and	r24, r24
    1876:	51 f4       	brne	.+20     	; 0x188c <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    1878:	8e e1       	ldi	r24, 0x1E	; 30
    187a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    187e:	84 e0       	ldi	r24, 0x04	; 4
    1880:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    1884:	83 e1       	ldi	r24, 0x13	; 19
    1886:	80 93 e4 00 	sts	0x00E4, r24
    188a:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    188c:	8e e0       	ldi	r24, 0x0E	; 14
    188e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    1892:	8c e0       	ldi	r24, 0x0C	; 12
    1894:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    1898:	87 e3       	ldi	r24, 0x37	; 55
    189a:	80 93 e4 00 	sts	0x00E4, r24
    189e:	08 95       	ret

000018a0 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    18a0:	88 23       	and	r24, r24
    18a2:	51 f4       	brne	.+20     	; 0x18b8 <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    18a4:	86 e2       	ldi	r24, 0x26	; 38
    18a6:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    18b0:	83 e1       	ldi	r24, 0x13	; 19
    18b2:	80 93 e4 00 	sts	0x00E4, r24
    18b6:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    18b8:	82 e1       	ldi	r24, 0x12	; 18
    18ba:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    18be:	8c e0       	ldi	r24, 0x0C	; 12
    18c0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    18c4:	87 e3       	ldi	r24, 0x37	; 55
    18c6:	80 93 e4 00 	sts	0x00E4, r24
    18ca:	08 95       	ret

000018cc <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    18cc:	83 e9       	ldi	r24, 0x93	; 147
    18ce:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    18d2:	ee e7       	ldi	r30, 0x7E	; 126
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	88 60       	ori	r24, 0x08	; 8
    18da:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    18dc:	80 e8       	ldi	r24, 0x80	; 128
    18de:	80 93 7b 00 	sts	0x007B, r24
}
    18e2:	08 95       	ret

000018e4 <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
    18e4:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
    18ee:	e3 e4       	ldi	r30, 0x43	; 67
    18f0:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
    18f4:	80 91 7a 00 	lds	r24, 0x007A
    18f8:	80 64       	ori	r24, 0x40	; 64
    18fa:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
    18fe:	80 91 7a 00 	lds	r24, 0x007A
    1902:	86 fd       	sbrc	r24, 6
    1904:	fc cf       	rjmp	.-8      	; 0x18fe <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
    1906:	80 91 78 00 	lds	r24, 0x0078
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	ba 01       	movw	r22, r20
    1912:	6f 70       	andi	r22, 0x0F	; 15
    1914:	70 70       	andi	r23, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <_Z18pick_random_numberv+0x38>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	6a 95       	dec	r22
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <_Z18pick_random_numberv+0x34>
		result |= (tmp);
    1920:	28 2b       	or	r18, r24
    1922:	39 2b       	or	r19, r25
		tmp = ADCH;  
    1924:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    1928:	4f 5f       	subi	r20, 0xFF	; 255
    192a:	5f 4f       	sbci	r21, 0xFF	; 255
    192c:	40 31       	cpi	r20, 0x10	; 16
    192e:	51 05       	cpc	r21, r1
    1930:	f9 f6       	brne	.-66     	; 0x18f0 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
    1932:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
    1934:	c9 01       	movw	r24, r18
    1936:	08 95       	ret

00001938 <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	28 e0       	ldi	r18, 0x08	; 8
    1944:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	63 e2       	ldi	r22, 0x23	; 35
    1952:	7c ef       	ldi	r23, 0xFC	; 252
    1954:	43 e2       	ldi	r20, 0x23	; 35
    1956:	5c ef       	ldi	r21, 0xFC	; 252
    1958:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z20can_add_id_to_filterhtt>
}
    195c:	08 95       	ret

0000195e <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    195e:	83 e9       	ldi	r24, 0x93	; 147
    1960:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    1964:	80 91 7e 00 	lds	r24, 0x007E
    1968:	88 60       	ori	r24, 0x08	; 8
    196a:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    196e:	80 e8       	ldi	r24, 0x80	; 128
    1970:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
    1974:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	90 93 64 03 	sts	0x0364, r25
    197e:	80 93 63 03 	sts	0x0363, r24
    1982:	80 93 65 03 	sts	0x0365, r24

	// put adc back into mode for POT
	adc_init();
    1986:	0e 94 85 08 	call	0x110a	; 0x110a <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    198a:	80 91 61 03 	lds	r24, 0x0361
    198e:	88 23       	and	r24, r24
    1990:	51 f0       	breq	.+20     	; 0x19a6 <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	80 93 61 03 	sts	0x0361, r24
    1998:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    199a:	80 93 68 03 	sts	0x0368, r24
	init_complete = TRUE;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 93 62 03 	sts	0x0362, r24
}
    19a4:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME
		init_path = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 68 03 	sts	0x0368, r24
		setup_instance_claim_mob();
    19ac:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    19b0:	10 92 60 03 	sts	0x0360, r1
    19b4:	80 91 68 03 	lds	r24, 0x0368
    19b8:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    19ba:	80 93 68 03 	sts	0x0368, r24
	init_complete = TRUE;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 93 62 03 	sts	0x0362, r24
}
    19c4:	08 95       	ret

000019c6 <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    19cc:	83 e2       	ldi	r24, 0x23	; 35
    19ce:	9c ef       	ldi	r25, 0xFC	; 252
    19d0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    19d4:	68 83       	st	Y, r22
    19d6:	79 83       	std	Y+1, r23	; 0x01
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    19dc:	80 91 60 03 	lds	r24, 0x0360
    19e0:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    19e2:	80 91 61 03 	lds	r24, 0x0361
    19e6:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    19e8:	80 91 65 03 	lds	r24, 0x0365
    19ec:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    19ee:	80 91 68 03 	lds	r24, 0x0368
    19f2:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    19f4:	80 91 69 03 	lds	r24, 0x0369
    19f8:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    19fa:	80 91 de 03 	lds	r24, 0x03DE
    19fe:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1a04:	8e 60       	ori	r24, 0x0E	; 14
    1a06:	8c 83       	std	Y+4, r24	; 0x04
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <_Z22can_instance_timeslicev>:

byte ts_state = 0;

void can_instance_timeslice()
{
	ts_state = 1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	80 93 69 03 	sts	0x0369, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    1a14:	40 91 61 03 	lds	r20, 0x0361
    1a18:	41 30       	cpi	r20, 0x01	; 1
    1a1a:	59 f1       	breq	.+86     	; 0x1a72 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    1a1c:	80 91 62 03 	lds	r24, 0x0362
    1a20:	88 23       	and	r24, r24
    1a22:	39 f1       	breq	.+78     	; 0x1a72 <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    1a24:	80 91 63 03 	lds	r24, 0x0363
    1a28:	90 91 64 03 	lds	r25, 0x0364
    1a2c:	9c 01       	movw	r18, r24
    1a2e:	21 50       	subi	r18, 0x01	; 1
    1a30:	30 40       	sbci	r19, 0x00	; 0
    1a32:	30 93 64 03 	sts	0x0364, r19
    1a36:	20 93 63 03 	sts	0x0363, r18
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	d1 f4       	brne	.+52     	; 0x1a72 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	90 93 64 03 	sts	0x0364, r25
    1a46:	80 93 63 03 	sts	0x0363, r24
	ts_state = 2;
    1a4a:	82 e0       	ldi	r24, 0x02	; 2
    1a4c:	80 93 69 03 	sts	0x0369, r24
	
	if (Confirmed==NOT_CLAIMED)
    1a50:	44 23       	and	r20, r20
    1a52:	91 f0       	breq	.+36     	; 0x1a78 <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    1a54:	42 30       	cpi	r20, 0x02	; 2
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <_Z22can_instance_timeslicev+0x4c>
    1a58:	5a c0       	rjmp	.+180    	; 0x1b0e <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    1a5a:	40 32       	cpi	r20, 0x20	; 32
    1a5c:	39 f1       	breq	.+78     	; 0x1aac <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
    1a5e:	40 38       	cpi	r20, 0x80	; 128
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <_Z22can_instance_timeslicev+0x56>
    1a62:	47 c0       	rjmp	.+142    	; 0x1af2 <_Z22can_instance_timeslicev+0xe4>
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1a64:	40 34       	cpi	r20, 0x40	; 64
    1a66:	31 f0       	breq	.+12     	; 0x1a74 <_Z22can_instance_timeslicev+0x66>
    1a68:	80 91 69 03 	lds	r24, 0x0369
    1a6c:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
    1a6e:	80 93 69 03 	sts	0x0369, r24
    1a72:	08 95       	ret
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1a74:	86 e8       	ldi	r24, 0x86	; 134
    1a76:	fb cf       	rjmp	.-10     	; 0x1a6e <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state = 2;
	
	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	80 93 69 03 	sts	0x0369, r24
		Confirmed = CLAIM_PENDING;
    1a7e:	80 e2       	ldi	r24, 0x20	; 32
    1a80:	80 93 61 03 	sts	0x0361, r24
		can_prep_instance_request( &msg2, rand_instance );
    1a84:	84 e3       	ldi	r24, 0x34	; 52
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	60 91 65 03 	lds	r22, 0x0365
    1a8c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	64 e3       	ldi	r22, 0x34	; 52
    1a94:	73 e0       	ldi	r23, 0x03	; 3
    1a96:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    1a9a:	8c e2       	ldi	r24, 0x2C	; 44
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	90 93 67 03 	sts	0x0367, r25
    1aa2:	80 93 66 03 	sts	0x0366, r24
    1aa6:	40 91 61 03 	lds	r20, 0x0361
    1aaa:	d4 cf       	rjmp	.-88     	; 0x1a54 <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	80 93 69 03 	sts	0x0369, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT
		cli();
    1ab2:	f8 94       	cli
		byte restore = CANPAGE;
    1ab4:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    1ab8:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    1abc:	80 91 ee 00 	lds	r24, 0x00EE
    1ac0:	86 ff       	sbrs	r24, 6
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    1ac4:	80 e8       	ldi	r24, 0x80	; 128
    1ac6:	80 93 61 03 	sts	0x0361, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    1aca:	80 91 66 03 	lds	r24, 0x0366
    1ace:	90 91 67 03 	lds	r25, 0x0367
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	90 93 67 03 	sts	0x0367, r25
    1ad8:	80 93 66 03 	sts	0x0366, r24
		if (timeout_10ms_mult == 0)
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	19 f4       	brne	.+6      	; 0x1ae6 <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
    1ae0:	84 e0       	ldi	r24, 0x04	; 4
    1ae2:	80 93 61 03 	sts	0x0361, r24
		}
		CANPAGE = restore;
    1ae6:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    1aea:	78 94       	sei
    1aec:	40 91 61 03 	lds	r20, 0x0361
    1af0:	b6 cf       	rjmp	.-148    	; 0x1a5e <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state = 5;
    1af2:	85 e0       	ldi	r24, 0x05	; 5
    1af4:	80 93 69 03 	sts	0x0369, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	80 93 61 03 	sts	0x0361, r24
		cli();  save_configuration();  sei();
    1afe:	f8 94       	cli
    1b00:	0e 94 1b 13 	call	0x2636	; 0x2636 <_Z18save_configurationv>
    1b04:	78 94       	sei
    1b06:	80 91 69 03 	lds	r24, 0x0369
    1b0a:	80 68       	ori	r24, 0x80	; 128
    1b0c:	b0 cf       	rjmp	.-160    	; 0x1a6e <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    1b0e:	87 e0       	ldi	r24, 0x07	; 7
    1b10:	80 93 69 03 	sts	0x0369, r24
		Confirmed = CLAIMED;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 93 61 03 	sts	0x0361, r24
		can_prep_instance_request( &msg2, MyInstance );
    1b1a:	84 e3       	ldi	r24, 0x34	; 52
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	60 91 60 03 	lds	r22, 0x0360
    1b22:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	64 e3       	ldi	r22, 0x34	; 52
    1b2a:	73 e0       	ldi	r23, 0x03	; 3
    1b2c:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
    1b30:	40 91 61 03 	lds	r20, 0x0361
    1b34:	92 cf       	rjmp	.-220    	; 0x1a5a <_Z22can_instance_timeslicev+0x4c>

00001b36 <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    1b3c:	84 e2       	ldi	r24, 0x24	; 36
    1b3e:	9c ef       	ldi	r25, 0xFC	; 252
    1b40:	60 91 60 03 	lds	r22, 0x0360
    1b44:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1b48:	68 83       	st	Y, r22
    1b4a:	79 83       	std	Y+1, r23	; 0x01
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    1b50:	80 91 60 03 	lds	r24, 0x0360
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1b5a:	82 60       	ori	r24, 0x02	; 2
    1b5c:	8c 83       	std	Y+4, r24	; 0x04
}
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    1b64:	fc 01       	movw	r30, r24
    1b66:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    1b68:	90 91 60 03 	lds	r25, 0x0360
    1b6c:	89 17       	cp	r24, r25
    1b6e:	18 f0       	brcs	.+6      	; 0x1b76 <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    1b70:	8f 5f       	subi	r24, 0xFF	; 255
    1b72:	80 93 60 03 	sts	0x0360, r24
    1b76:	08 95       	ret

00001b78 <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    1b78:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	78 2f       	mov	r23, r24
    1b7e:	89 2f       	mov	r24, r25
    1b80:	92 2f       	mov	r25, r18
    1b82:	08 95       	ret

00001b84 <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    1b84:	38 2f       	mov	r19, r24
    1b86:	26 2f       	mov	r18, r22
    1b88:	87 2f       	mov	r24, r23
    1b8a:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    1b8c:	63 2f       	mov	r22, r19
    1b8e:	72 2f       	mov	r23, r18
    1b90:	08 95       	ret

00001b92 <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    1b92:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    1b94:	08 95       	ret

00001b96 <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    1b96:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    1b98:	08 95       	ret

00001b9a <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    1b9a:	89 2f       	mov	r24, r25
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	08 95       	ret

00001ba0 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    1ba0:	e1 e0       	ldi	r30, 0x01	; 1
    1ba2:	62 17       	cp	r22, r18
    1ba4:	73 07       	cpc	r23, r19
    1ba6:	84 07       	cpc	r24, r20
    1ba8:	95 07       	cpc	r25, r21
    1baa:	09 f0       	breq	.+2      	; 0x1bae <_Z5match6idTypeS_+0xe>
    1bac:	e0 e0       	ldi	r30, 0x00	; 0
}
    1bae:	8e 2f       	mov	r24, r30
    1bb0:	08 95       	ret

00001bb2 <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	62 13       	cpse	r22, r18
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    1bb8:	08 95       	ret

00001bba <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    1bba:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    1bbc:	27 2f       	mov	r18, r23
    1bbe:	38 2f       	mov	r19, r24
    1bc0:	69 2f       	mov	r22, r25
    1bc2:	74 2f       	mov	r23, r20
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	26 17       	cp	r18, r22
    1bc8:	37 07       	cpc	r19, r23
    1bca:	09 f0       	breq	.+2      	; 0x1bce <_Z8id_match6idTypeS_+0x14>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
}
    1bce:	08 95       	ret

00001bd0 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	49 13       	cpse	r20, r25
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    1bd6:	08 95       	ret

00001bd8 <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    1bd8:	90 93 70 03 	sts	0x0370, r25
    1bdc:	80 93 6f 03 	sts	0x036F, r24
}
    1be0:	08 95       	ret

00001be2 <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    1be8:	81 e1       	ldi	r24, 0x11	; 17
    1bea:	9c ef       	ldi	r25, 0xFC	; 252
    1bec:	60 91 60 03 	lds	r22, 0x0360
    1bf0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1bf4:	68 83       	st	Y, r22
    1bf6:	79 83       	std	Y+1, r23	; 0x01
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
    1bfa:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    1c00:	80 91 60 03 	lds	r24, 0x0360
    1c04:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    1c06:	80 91 6a 03 	lds	r24, 0x036A
    1c0a:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    1c0c:	80 91 6b 03 	lds	r24, 0x036B
    1c10:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1c12:	8c 81       	ldd	r24, Y+4	; 0x04
    1c14:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1c16:	88 60       	ori	r24, 0x08	; 8
    1c18:	8c 83       	std	Y+4, r24	; 0x04
}
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	08 95       	ret

00001c20 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    1c26:	82 e1       	ldi	r24, 0x12	; 18
    1c28:	9c ef       	ldi	r25, 0xFC	; 252
    1c2a:	60 91 60 03 	lds	r22, 0x0360
    1c2e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1c32:	68 83       	st	Y, r22
    1c34:	79 83       	std	Y+1, r23	; 0x01
    1c36:	8a 83       	std	Y+2, r24	; 0x02
    1c38:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    1c3e:	91 e4       	ldi	r25, 0x41	; 65
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    1c42:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    1c44:	9f e0       	ldi	r25, 0x0F	; 15
    1c46:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    1c48:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    1c4a:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1c50:	8c 60       	ori	r24, 0x0C	; 12
    1c52:	8c 83       	std	Y+4, r24	; 0x04
}
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    1c60:	83 e1       	ldi	r24, 0x13	; 19
    1c62:	9c ef       	ldi	r25, 0xFC	; 252
    1c64:	60 91 60 03 	lds	r22, 0x0360
    1c68:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1c6c:	68 83       	st	Y, r22
    1c6e:	79 83       	std	Y+1, r23	; 0x01
    1c70:	8a 83       	std	Y+2, r24	; 0x02
    1c72:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    1c78:	86 e5       	ldi	r24, 0x56	; 86
    1c7a:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    1c7c:	88 e7       	ldi	r24, 0x78	; 120
    1c7e:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    1c80:	8c e9       	ldi	r24, 0x9C	; 156
    1c82:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    1c84:	8e ed       	ldi	r24, 0xDE	; 222
    1c86:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1c8c:	8a 60       	ori	r24, 0x0A	; 10
    1c8e:	8c 83       	std	Y+4, r24	; 0x04
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    1c9c:	84 e1       	ldi	r24, 0x14	; 20
    1c9e:	9c ef       	ldi	r25, 0xFC	; 252
    1ca0:	60 91 60 03 	lds	r22, 0x0360
    1ca4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1ca8:	68 83       	st	Y, r22
    1caa:	79 83       	std	Y+1, r23	; 0x01
    1cac:	8a 83       	std	Y+2, r24	; 0x02
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    1cb0:	80 91 6c 03 	lds	r24, 0x036C
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    1cb8:	de 01       	movw	r26, r28
    1cba:	16 96       	adiw	r26, 0x06	; 6
    1cbc:	9c 01       	movw	r18, r24
    1cbe:	28 5f       	subi	r18, 0xF8	; 248
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e4 58       	subi	r30, 0x84	; 132
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	e4 91       	lpm	r30, Z+
    1cca:	ed 93       	st	X+, r30
    1ccc:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    1cce:	82 17       	cp	r24, r18
    1cd0:	93 07       	cpc	r25, r19
    1cd2:	b9 f7       	brne	.-18     	; 0x1cc2 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1cd8:	82 61       	ori	r24, 0x12	; 18
    1cda:	8c 83       	std	Y+4, r24	; 0x04
}
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	08 95       	ret

00001ce2 <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    1ce2:	80 91 71 03 	lds	r24, 0x0371
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	d9 f0       	breq	.+54     	; 0x1d20 <_Z24can_board_presence_replyv+0x3e>
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	28 f0       	brcs	.+10     	; 0x1cf8 <_Z24can_board_presence_replyv+0x16>
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	09 f1       	breq	.+66     	; 0x1d34 <_Z24can_board_presence_replyv+0x52>
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	59 f0       	breq	.+22     	; 0x1d0c <_Z24can_board_presence_replyv+0x2a>
    1cf6:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    1cf8:	84 e3       	ldi	r24, 0x34	; 52
    1cfa:	93 e0       	ldi	r25, 0x03	; 3
    1cfc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	64 e3       	ldi	r22, 0x34	; 52
    1d04:	73 e0       	ldi	r23, 0x03	; 3
    1d06:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1d0a:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    1d0c:	84 e3       	ldi	r24, 0x34	; 52
    1d0e:	93 e0       	ldi	r25, 0x03	; 3
    1d10:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	64 e3       	ldi	r22, 0x34	; 52
    1d18:	73 e0       	ldi	r23, 0x03	; 3
    1d1a:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
    1d1e:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    1d20:	84 e3       	ldi	r24, 0x34	; 52
    1d22:	93 e0       	ldi	r25, 0x03	; 3
    1d24:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	64 e3       	ldi	r22, 0x34	; 52
    1d2c:	73 e0       	ldi	r23, 0x03	; 3
    1d2e:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1d32:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    1d34:	84 e3       	ldi	r24, 0x34	; 52
    1d36:	93 e0       	ldi	r25, 0x03	; 3
    1d38:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	64 e3       	ldi	r22, 0x34	; 52
    1d40:	73 e0       	ldi	r23, 0x03	; 3
    1d42:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1d46:	08 95       	ret

00001d48 <_Z19can_board_timeslicev>:
{	
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    1d48:	80 91 6d 03 	lds	r24, 0x036D
    1d4c:	80 fd       	sbrc	r24, 0
    1d4e:	56 c0       	rjmp	.+172    	; 0x1dfc <_Z19can_board_timeslicev+0xb4>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    1d50:	81 fd       	sbrc	r24, 1
    1d52:	49 c0       	rjmp	.+146    	; 0x1de6 <_Z19can_board_timeslicev+0x9e>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    1d54:	82 fd       	sbrc	r24, 2
    1d56:	32 c0       	rjmp	.+100    	; 0x1dbc <_Z19can_board_timeslicev+0x74>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
    1d58:	83 fd       	sbrc	r24, 3
    1d5a:	26 c0       	rjmp	.+76     	; 0x1da8 <_Z19can_board_timeslicev+0x60>
		cli();
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    1d5c:	84 fd       	sbrc	r24, 4
    1d5e:	1a c0       	rjmp	.+52     	; 0x1d94 <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    1d60:	85 ff       	sbrs	r24, 5
    1d62:	0d c0       	rjmp	.+26     	; 0x1d7e <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)		
    1d64:	80 91 26 01 	lds	r24, 0x0126
    1d68:	90 91 27 01 	lds	r25, 0x0127
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	21 50       	subi	r18, 0x01	; 1
    1d70:	30 40       	sbci	r19, 0x00	; 0
    1d72:	30 93 27 01 	sts	0x0127, r19
    1d76:	20 93 26 01 	sts	0x0126, r18
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <_Z19can_board_timeslicev+0x38>
    1d7e:	08 95       	ret
		{
			cli();
    1d80:	f8 94       	cli
			can_board_presence_reply( );
    1d82:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    1d86:	80 91 6d 03 	lds	r24, 0x036D
    1d8a:	8f 7d       	andi	r24, 0xDF	; 223
    1d8c:	80 93 6d 03 	sts	0x036D, r24
			sei();
    1d90:	78 94       	sei
    1d92:	08 95       	ret
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    1d94:	f8 94       	cli
		save_cal();
    1d96:	0e 94 60 05 	call	0xac0	; 0xac0 <_Z8save_calv>
		System_Send_Status &= (~0x10);
    1d9a:	80 91 6d 03 	lds	r24, 0x036D
    1d9e:	8f 7e       	andi	r24, 0xEF	; 239
    1da0:	80 93 6d 03 	sts	0x036D, r24
		sei();
    1da4:	78 94       	sei
    1da6:	dc cf       	rjmp	.-72     	; 0x1d60 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
		cli();
    1da8:	f8 94       	cli
		save_configuration();
    1daa:	0e 94 1b 13 	call	0x2636	; 0x2636 <_Z18save_configurationv>
		System_Send_Status &= (~0x08);
    1dae:	80 91 6d 03 	lds	r24, 0x036D
    1db2:	87 7f       	andi	r24, 0xF7	; 247
    1db4:	80 93 6d 03 	sts	0x036D, r24
		sei();
    1db8:	78 94       	sei
    1dba:	d0 cf       	rjmp	.-96     	; 0x1d5c <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    1dbc:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    1dbe:	0e 94 75 13 	call	0x26ea	; 0x26ea <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    1dc2:	84 e3       	ldi	r24, 0x34	; 52
    1dc4:	93 e0       	ldi	r25, 0x03	; 3
    1dc6:	60 91 60 03 	lds	r22, 0x0360
    1dca:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	64 e3       	ldi	r22, 0x34	; 52
    1dd2:	73 e0       	ldi	r23, 0x03	; 3
    1dd4:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    1dd8:	80 91 6d 03 	lds	r24, 0x036D
    1ddc:	8b 7f       	andi	r24, 0xFB	; 251
    1dde:	80 93 6d 03 	sts	0x036D, r24
		sei();
    1de2:	78 94       	sei
    1de4:	b9 cf       	rjmp	.-142    	; 0x1d58 <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	64 e3       	ldi	r22, 0x34	; 52
    1dea:	73 e0       	ldi	r23, 0x03	; 3
    1dec:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    1df0:	80 91 6d 03 	lds	r24, 0x036D
    1df4:	8d 7f       	andi	r24, 0xFD	; 253
    1df6:	80 93 6d 03 	sts	0x036D, r24
    1dfa:	ac cf       	rjmp	.-168    	; 0x1d54 <_Z19can_board_timeslicev+0xc>
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	65 e2       	ldi	r22, 0x25	; 37
    1e00:	73 e0       	ldi	r23, 0x03	; 3
    1e02:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    1e06:	80 91 6d 03 	lds	r24, 0x036D
    1e0a:	8e 7f       	andi	r24, 0xFE	; 254
    1e0c:	80 93 6d 03 	sts	0x036D, r24
    1e10:	9f cf       	rjmp	.-194    	; 0x1d50 <_Z19can_board_timeslicev+0x8>

00001e12 <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    1e18:	87 e2       	ldi	r24, 0x27	; 39
    1e1a:	9c ef       	ldi	r25, 0xFC	; 252
    1e1c:	60 91 60 03 	lds	r22, 0x0360
    1e20:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1e24:	68 83       	st	Y, r22
    1e26:	79 83       	std	Y+1, r23	; 0x01
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    1e2c:	80 91 da 03 	lds	r24, 0x03DA
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    1e32:	80 91 db 03 	lds	r24, 0x03DB
    1e36:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    1e38:	80 91 dc 03 	lds	r24, 0x03DC
    1e3c:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    1e3e:	80 91 dd 03 	lds	r24, 0x03DD
    1e42:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1e48:	88 60       	ori	r24, 0x08	; 8
    1e4a:	8c 83       	std	Y+4, r24	; 0x04
}
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	08 95       	ret

00001e52 <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    1e58:	85 e1       	ldi	r24, 0x15	; 21
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	60 91 60 03 	lds	r22, 0x0360
    1e60:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1e64:	9b 01       	movw	r18, r22
    1e66:	ac 01       	movw	r20, r24
    1e68:	68 81       	ld	r22, Y
    1e6a:	79 81       	ldd	r23, Y+1	; 0x01
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e70:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
    1e74:	88 23       	and	r24, r24
    1e76:	39 f0       	breq	.+14     	; 0x1e86 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
    1e78:	ce 01       	movw	r24, r28
    1e7a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    1e86:	85 e1       	ldi	r24, 0x15	; 21
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	6f ef       	ldi	r22, 0xFF	; 255
    1e8c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1e90:	9b 01       	movw	r18, r22
    1e92:	ac 01       	movw	r20, r24
    1e94:	68 81       	ld	r22, Y
    1e96:	79 81       	ldd	r23, Y+1	; 0x01
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    1ea0:	88 23       	and	r24, r24
    1ea2:	51 f7       	brne	.-44     	; 0x1e78 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
		return TRUE;
	} else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    1ea4:	80 e1       	ldi	r24, 0x10	; 16
    1ea6:	9c ef       	ldi	r25, 0xFC	; 252
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	68 81       	ld	r22, Y
    1eb4:	79 81       	ldd	r23, Y+1	; 0x01
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_Z8id_match6idTypeS_>
    1ebe:	88 23       	and	r24, r24
    1ec0:	91 f0       	breq	.+36     	; 0x1ee6 <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.  
			Need to delay by the instance number of timeslices.  
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    1ec2:	80 91 6d 03 	lds	r24, 0x036D
    1ec6:	80 62       	ori	r24, 0x20	; 32
    1ec8:	80 93 6d 03 	sts	0x036D, r24
		Board_presence_response_type = mMsg->data[0];
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	80 93 71 03 	sts	0x0371, r24
		Board_presence_delay 		 = MyInstance;
    1ed2:	80 91 60 03 	lds	r24, 0x0360
    1ed6:	80 93 26 01 	sts	0x0126, r24
    1eda:	10 92 27 01 	sts	0x0127, r1
		return TRUE;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    1ee6:	82 e2       	ldi	r24, 0x22	; 34
    1ee8:	9c ef       	ldi	r25, 0xFC	; 252
    1eea:	60 91 60 03 	lds	r22, 0x0360
    1eee:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1ef2:	9b 01       	movw	r18, r22
    1ef4:	ac 01       	movw	r20, r24
    1ef6:	68 81       	ld	r22, Y
    1ef8:	79 81       	ldd	r23, Y+1	; 0x01
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	9b 81       	ldd	r25, Y+3	; 0x03
    1efe:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
    1f02:	88 23       	and	r24, r24
    1f04:	f1 f0       	breq	.+60     	; 0x1f42 <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	84 ff       	sbrs	r24, 4
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 ); 
    1f0c:	85 e2       	ldi	r24, 0x25	; 37
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_Z18can_prep_configureP4sCAN>
			System_Send_Status=1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	80 93 6d 03 	sts	0x036D, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    1f1a:	e0 91 6f 03 	lds	r30, 0x036F
    1f1e:	f0 91 70 03 	lds	r31, 0x0370
    1f22:	30 97       	sbiw	r30, 0x00	; 0
    1f24:	19 f1       	breq	.+70     	; 0x1f6c <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	8f 70       	andi	r24, 0x0F	; 15
    1f2a:	09 95       	icall
		return TRUE;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 ); 
			System_Send_Status=1;
		} else {
			can_parse_configure_request( mMsg );	// in configuration.c
    1f34:	ce 01       	movw	r24, r28
    1f36:	0e 94 3d 12 	call	0x247a	; 0x247a <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    1f3a:	88 e0       	ldi	r24, 0x08	; 8
    1f3c:	80 93 6d 03 	sts	0x036D, r24
    1f40:	ec cf       	rjmp	.-40     	; 0x1f1a <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1f42:	81 e2       	ldi	r24, 0x21	; 33
    1f44:	9c ef       	ldi	r25, 0xFC	; 252
    1f46:	60 91 60 03 	lds	r22, 0x0360
    1f4a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1f4e:	9b 01       	movw	r18, r22
    1f50:	ac 01       	movw	r20, r24
    1f52:	68 81       	ld	r22, Y
    1f54:	79 81       	ldd	r23, Y+1	; 0x01
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
    1f5e:	88 23       	and	r24, r24
    1f60:	39 f0       	breq	.+14     	; 0x1f70 <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    1f62:	88 e0       	ldi	r24, 0x08	; 8
    1f64:	80 93 6d 03 	sts	0x036D, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	8a cf       	rjmp	.-236    	; 0x1e80 <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	88 cf       	rjmp	.-240    	; 0x1e80 <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    1f70:	81 e2       	ldi	r24, 0x21	; 33
    1f72:	9c ef       	ldi	r25, 0xFC	; 252
    1f74:	6f ef       	ldi	r22, 0xFF	; 255
    1f76:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1f7a:	9b 01       	movw	r18, r22
    1f7c:	ac 01       	movw	r20, r24
    1f7e:	68 81       	ld	r22, Y
    1f80:	79 81       	ldd	r23, Y+1	; 0x01
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1f8a:	88 23       	and	r24, r24
    1f8c:	51 f7       	brne	.-44     	; 0x1f62 <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    1f8e:	85 e2       	ldi	r24, 0x25	; 37
    1f90:	9c ef       	ldi	r25, 0xFC	; 252
    1f92:	60 91 60 03 	lds	r22, 0x0360
    1f96:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1f9a:	9b 01       	movw	r18, r22
    1f9c:	ac 01       	movw	r20, r24
    1f9e:	68 81       	ld	r22, Y
    1fa0:	79 81       	ldd	r23, Y+1	; 0x01
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
    1faa:	88 23       	and	r24, r24
    1fac:	49 f5       	brne	.+82     	; 0x2000 <_Z23can_board_msg_responderP4sCAN+0x1ae>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    1fae:	86 e2       	ldi	r24, 0x26	; 38
    1fb0:	9c ef       	ldi	r25, 0xFC	; 252
    1fb2:	60 91 60 03 	lds	r22, 0x0360
    1fb6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    1fba:	9b 01       	movw	r18, r22
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	68 81       	ld	r22, Y
    1fc0:	79 81       	ldd	r23, Y+1	; 0x01
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
    1fca:	88 23       	and	r24, r24
    1fcc:	61 f1       	breq	.+88     	; 0x2026 <_Z23can_board_msg_responderP4sCAN+0x1d4>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	8e 71       	andi	r24, 0x1E	; 30
    1fd2:	84 30       	cpi	r24, 0x04	; 4
    1fd4:	59 f6       	brne	.-106    	; 0x1f6c <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    1fd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	8e 81       	ldd	r24, Y+6	; 0x06
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	82 2b       	or	r24, r18
    1fe0:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    1fe2:	22 e1       	ldi	r18, 0x12	; 18
    1fe4:	84 33       	cpi	r24, 0x34	; 52
    1fe6:	92 07       	cpc	r25, r18
    1fe8:	09 f6       	brne	.-126    	; 0x1f6c <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    1fea:	85 e5       	ldi	r24, 0x55	; 85
    1fec:	80 93 68 03 	sts	0x0368, r24
				init_complete = FALSE;
    1ff0:	10 92 62 03 	sts	0x0362, r1
				Confirmed     = NOT_CLAIMED;
    1ff4:	10 92 61 03 	sts	0x0361, r1
				can_instance_init();		// This fires off the sequencing right away.
    1ff8:	0e 94 af 0c 	call	0x195e	; 0x195e <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	40 cf       	rjmp	.-384    	; 0x1e80 <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 61 03 	sts	0x0361, r24
		MyInstance = mMsg->data[0];
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	80 93 60 03 	sts	0x0360, r24
		save_configuration();
    200c:	0e 94 1b 13 	call	0x2636	; 0x2636 <_Z18save_configurationv>
   		can_remove_instance_from_filter( 1 );
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    2016:	60 91 60 03 	lds	r22, 0x0360
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z26can_add_instance_to_filterht>
		return TRUE;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	2d cf       	rjmp	.-422    	; 0x1e80 <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    2026:	86 e2       	ldi	r24, 0x26	; 38
    2028:	9c ef       	ldi	r25, 0xFC	; 252
    202a:	6f ef       	ldi	r22, 0xFF	; 255
    202c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    2030:	9b 01       	movw	r18, r22
    2032:	ac 01       	movw	r20, r24
    2034:	68 81       	ld	r22, Y
    2036:	79 81       	ldd	r23, Y+1	; 0x01
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_Z5match6idTypeS_>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    2040:	88 23       	and	r24, r24
    2042:	29 f6       	brne	.-118    	; 0x1fce <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    2044:	83 e2       	ldi	r24, 0x23	; 35
    2046:	9c ef       	ldi	r25, 0xFC	; 252
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_Z14create_CAN_eidth>
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	68 81       	ld	r22, Y
    2054:	79 81       	ldd	r23, Y+1	; 0x01
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_Z8id_match6idTypeS_>
    205e:	88 23       	and	r24, r24
    2060:	09 f4       	brne	.+2      	; 0x2064 <_Z23can_board_msg_responderP4sCAN+0x212>
    2062:	0e cf       	rjmp	.-484    	; 0x1e80 <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    2064:	9d 81       	ldd	r25, Y+5	; 0x05
    2066:	80 91 60 03 	lds	r24, 0x0360
    206a:	98 17       	cp	r25, r24
    206c:	09 f0       	breq	.+2      	; 0x2070 <_Z23can_board_msg_responderP4sCAN+0x21e>
    206e:	7e cf       	rjmp	.-260    	; 0x1f6c <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    2070:	80 91 61 03 	lds	r24, 0x0361
    2074:	80 32       	cpi	r24, 0x20	; 32
    2076:	41 f0       	breq	.+16     	; 0x2088 <_Z23can_board_msg_responderP4sCAN+0x236>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    2078:	88 23       	and	r24, r24
    207a:	09 f0       	breq	.+2      	; 0x207e <_Z23can_board_msg_responderP4sCAN+0x22c>
    207c:	77 cf       	rjmp	.-274    	; 0x1f6c <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    207e:	ce 01       	movw	r24, r28
    2080:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	fc ce       	rjmp	.-520    	; 0x1e80 <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    2088:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    208c:	80 e3       	ldi	r24, 0x30	; 48
    208e:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    2092:	80 91 ef 00 	lds	r24, 0x00EF
    2096:	8f 73       	andi	r24, 0x3F	; 63
    2098:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    209c:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    20a0:	10 92 61 03 	sts	0x0361, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    20a4:	ce 01       	movw	r24, r28
    20a6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	e9 ce       	rjmp	.-558    	; 0x1e80 <_Z23can_board_msg_responderP4sCAN+0x2e>

000020ae <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	7b 01       	movw	r14, r22
    20bc:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    20be:	c0 e0       	ldi	r28, 0x00	; 0
    20c0:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    20c2:	ce 01       	movw	r24, r28
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	8c 0f       	add	r24, r28
    20ca:	9d 1f       	adc	r25, r29
    20cc:	fc 01       	movw	r30, r24
    20ce:	ee 0f       	add	r30, r30
    20d0:	ff 1f       	adc	r31, r31
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	e8 0f       	add	r30, r24
    20d8:	f9 1f       	adc	r31, r25
    20da:	ee 58       	subi	r30, 0x8E	; 142
    20dc:	fc 4f       	sbci	r31, 0xFC	; 252
    20de:	20 81       	ld	r18, Z
    20e0:	31 81       	ldd	r19, Z+1	; 0x01
    20e2:	42 81       	ldd	r20, Z+2	; 0x02
    20e4:	53 81       	ldd	r21, Z+3	; 0x03
    20e6:	c8 01       	movw	r24, r16
    20e8:	b7 01       	movw	r22, r14
    20ea:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_Z8id_match6idTypeS_>
    20ee:	88 23       	and	r24, r24
    20f0:	61 f4       	brne	.+24     	; 0x210a <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    20f2:	21 96       	adiw	r28, 0x01	; 1
    20f4:	c6 30       	cpi	r28, 0x06	; 6
    20f6:	d1 05       	cpc	r29, r1
    20f8:	21 f7       	brne	.-56     	; 0x20c2 <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
}
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    210a:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	ff 90       	pop	r15
    2116:	ef 90       	pop	r14
    2118:	08 95       	ret

0000211a <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    211a:	28 2f       	mov	r18, r24
    211c:	39 2f       	mov	r19, r25
    211e:	d9 01       	movw	r26, r18
    2120:	86 2f       	mov	r24, r22
    2122:	97 2f       	mov	r25, r23
    2124:	fc 01       	movw	r30, r24
    2126:	8f e0       	ldi	r24, 0x0F	; 15
    2128:	01 90       	ld	r0, Z+
    212a:	0d 92       	st	X+, r0
    212c:	81 50       	subi	r24, 0x01	; 1
    212e:	e1 f7       	brne	.-8      	; 0x2128 <_Z12copy_can_msgP4sCANS0_+0xe>
}
    2130:	08 95       	ret

00002132 <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    2132:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    2134:	80 91 cc 03 	lds	r24, 0x03CC
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 01       	movw	r18, r24
    213c:	22 0f       	add	r18, r18
    213e:	33 1f       	adc	r19, r19
    2140:	28 0f       	add	r18, r24
    2142:	39 1f       	adc	r19, r25
    2144:	c9 01       	movw	r24, r18
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	8e 58       	subi	r24, 0x8E	; 142
    2154:	9c 4f       	sbci	r25, 0xFC	; 252
    2156:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    215a:	80 91 cc 03 	lds	r24, 0x03CC
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	80 93 cc 03 	sts	0x03CC, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    2164:	86 30       	cpi	r24, 0x06	; 6
    2166:	10 f0       	brcs	.+4      	; 0x216c <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    2168:	10 92 cc 03 	sts	0x03CC, r1
    216c:	08 95       	ret

0000216e <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    2174:	68 81       	ld	r22, Y
    2176:	79 81       	ldd	r23, Y+1	; 0x01
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	9b 81       	ldd	r25, Y+3	; 0x03
    217c:	0e 94 57 10 	call	0x20ae	; 0x20ae <_Z11FindMailBox6idType>
	if (index == 0xFF)
    2180:	8f 3f       	cpi	r24, 0xFF	; 255
    2182:	a9 f0       	breq	.+42     	; 0x21ae <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9c 01       	movw	r18, r24
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	28 0f       	add	r18, r24
    218e:	39 1f       	adc	r19, r25
    2190:	c9 01       	movw	r24, r18
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	82 0f       	add	r24, r18
    219c:	93 1f       	adc	r25, r19
    219e:	8e 58       	subi	r24, 0x8E	; 142
    21a0:	9c 4f       	sbci	r25, 0xFC	; 252
    21a2:	be 01       	movw	r22, r28
    21a4:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    21ae:	80 91 cc 03 	lds	r24, 0x03CC
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9c 01       	movw	r18, r24
    21b6:	22 0f       	add	r18, r18
    21b8:	33 1f       	adc	r19, r19
    21ba:	28 0f       	add	r18, r24
    21bc:	39 1f       	adc	r19, r25
    21be:	c9 01       	movw	r24, r18
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	82 0f       	add	r24, r18
    21ca:	93 1f       	adc	r25, r19
    21cc:	8e 58       	subi	r24, 0x8E	; 142
    21ce:	9c 4f       	sbci	r25, 0xFC	; 252
    21d0:	be 01       	movw	r22, r28
    21d2:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    21d6:	80 91 cc 03 	lds	r24, 0x03CC
    21da:	8f 5f       	subi	r24, 0xFF	; 255
    21dc:	80 93 cc 03 	sts	0x03CC, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    21e0:	86 30       	cpi	r24, 0x06	; 6
    21e2:	10 f3       	brcs	.-60     	; 0x21a8 <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    21e4:	10 92 cc 03 	sts	0x03CC, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <_Z12QueueMessageP4sCAN>:
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    21ee:	20 91 dd 03 	lds	r18, 0x03DD
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    21f2:	21 fd       	sbrc	r18, 1
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    21f6:	0e 94 b7 10 	call	0x216e	; 0x216e <_Z17addMailboxHistoryP4sCAN>
    21fa:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    21fc:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z16addNormalHistoryP4sCAN>
    2200:	08 95       	ret

00002202 <_Z15RetrieveMessagev>:
    2202:	80 91 dd 03 	lds	r24, 0x03DD
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2206:	81 ff       	sbrs	r24, 1
    2208:	1b c0       	rjmp	.+54     	; 0x2240 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    220a:	20 91 cd 03 	lds	r18, 0x03CD
    220e:	80 91 cc 03 	lds	r24, 0x03CC
    2212:	28 17       	cp	r18, r24
    2214:	c9 f0       	breq	.+50     	; 0x2248 <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2216:	82 2f       	mov	r24, r18
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	80 93 cd 03 	sts	0x03CD, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    221e:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2220:	c9 01       	movw	r24, r18
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	9c 01       	movw	r18, r24
    222c:	22 0f       	add	r18, r18
    222e:	33 1f       	adc	r19, r19
    2230:	22 0f       	add	r18, r18
    2232:	33 1f       	adc	r19, r19
    2234:	28 0f       	add	r18, r24
    2236:	39 1f       	adc	r19, r25
    2238:	2e 58       	subi	r18, 0x8E	; 142
    223a:	3c 4f       	sbci	r19, 0xFC	; 252
		}
	}
	return NULL;
}
    223c:	c9 01       	movw	r24, r18
    223e:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
}
    2244:	c9 01       	movw	r24, r18
    2246:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    2248:	10 92 cd 03 	sts	0x03CD, r1
			RxHead = 0;
    224c:	10 92 cc 03 	sts	0x03CC, r1
			return NULL;
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	f3 cf       	rjmp	.-26     	; 0x223c <_Z15RetrieveMessagev+0x3a>

00002256 <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	ac 01       	movw	r20, r24
    225a:	44 0f       	add	r20, r20
    225c:	55 1f       	adc	r21, r21
    225e:	48 0f       	add	r20, r24
    2260:	59 1f       	adc	r21, r25
    2262:	9a 01       	movw	r18, r20
    2264:	22 0f       	add	r18, r18
    2266:	33 1f       	adc	r19, r19
    2268:	22 0f       	add	r18, r18
    226a:	33 1f       	adc	r19, r19
    226c:	24 0f       	add	r18, r20
    226e:	35 1f       	adc	r19, r21
    2270:	2e 58       	subi	r18, 0x8E	; 142
    2272:	3c 4f       	sbci	r19, 0xFC	; 252
}
    2274:	c9 01       	movw	r24, r18
    2276:	08 95       	ret

00002278 <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    2278:	0e 94 01 11 	call	0x2202	; 0x2202 <_Z15RetrieveMessagev>
	if (msg)
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	21 f0       	breq	.+8      	; 0x2288 <_Z15CAN_Q_Timeslicev+0x10>
	{
		SET_LED_2();
    2280:	59 9a       	sbi	0x0b, 1	; 11
    2282:	20 91 dd 03 	lds	r18, 0x03DD
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2286:	21 ff       	sbrs	r18, 1
    2288:	08 95       	ret
			can_file_message( msg );
    228a:	0e 94 99 02 	call	0x532	; 0x532 <_Z16can_file_messageP4sCAN>
    228e:	08 95       	ret

00002290 <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    2290:	9b 01       	movw	r18, r22
    2292:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    2294:	10 92 ce 03 	sts	0x03CE, r1
    2298:	10 92 cf 03 	sts	0x03CF, r1
    229c:	10 92 d0 03 	sts	0x03D0, r1
    22a0:	10 92 d1 03 	sts	0x03D1, r1
    22a4:	80 91 ce 03 	lds	r24, 0x03CE
    22a8:	90 91 cf 03 	lds	r25, 0x03CF
    22ac:	a0 91 d0 03 	lds	r26, 0x03D0
    22b0:	b0 91 d1 03 	lds	r27, 0x03D1
    22b4:	82 17       	cp	r24, r18
    22b6:	93 07       	cpc	r25, r19
    22b8:	a4 07       	cpc	r26, r20
    22ba:	b5 07       	cpc	r27, r21
    22bc:	04 f5       	brge	.+64     	; 0x22fe <_Z5delayl+0x6e>
    22be:	80 91 ce 03 	lds	r24, 0x03CE
    22c2:	90 91 cf 03 	lds	r25, 0x03CF
    22c6:	a0 91 d0 03 	lds	r26, 0x03D0
    22ca:	b0 91 d1 03 	lds	r27, 0x03D1
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	a1 1d       	adc	r26, r1
    22d2:	b1 1d       	adc	r27, r1
    22d4:	80 93 ce 03 	sts	0x03CE, r24
    22d8:	90 93 cf 03 	sts	0x03CF, r25
    22dc:	a0 93 d0 03 	sts	0x03D0, r26
    22e0:	b0 93 d1 03 	sts	0x03D1, r27
    22e4:	80 91 ce 03 	lds	r24, 0x03CE
    22e8:	90 91 cf 03 	lds	r25, 0x03CF
    22ec:	a0 91 d0 03 	lds	r26, 0x03D0
    22f0:	b0 91 d1 03 	lds	r27, 0x03D1
    22f4:	82 17       	cp	r24, r18
    22f6:	93 07       	cpc	r25, r19
    22f8:	a4 07       	cpc	r26, r20
    22fa:	b5 07       	cpc	r27, r21
    22fc:	04 f3       	brlt	.-64     	; 0x22be <_Z5delayl+0x2e>
    22fe:	08 95       	ret

00002300 <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    2304:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    2306:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    2308:	8e ef       	ldi	r24, 0xFE	; 254
    230a:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    230c:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    230e:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    2310:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    2312:	10 92 64 00 	sts	0x0064, r1
}
    2316:	08 95       	ret

00002318 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    231c:	93 e0       	ldi	r25, 0x03	; 3
    231e:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    2320:	9a ef       	ldi	r25, 0xFA	; 250
    2322:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    2324:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    2328:	10 92 d5 03 	sts	0x03D5, r1
    232c:	10 92 d4 03 	sts	0x03D4, r1
	/******************* PERIPHERAL INIT ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    2330:	08 95       	ret

00002332 <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 d8 03 	sts	0x03D8, r24
}
    2338:	08 95       	ret

0000233a <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    233a:	10 92 d8 03 	sts	0x03D8, r1
}
    233e:	08 95       	ret

00002340 <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    2340:	20 91 d4 03 	lds	r18, 0x03D4
    2344:	30 91 d5 03 	lds	r19, 0x03D5
    2348:	c9 01       	movw	r24, r18
    234a:	65 e0       	ldi	r22, 0x05	; 5
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	39 f4       	brne	.+14     	; 0x2364 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    2356:	c9 01       	movw	r24, r18
    2358:	6a e0       	ldi	r22, 0x0A	; 10
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	09 f0       	breq	.+2      	; 0x2366 <_Z15System_Dispatchv+0x26>
    2364:	08 95       	ret
		{
			can_instance_timeslice();
    2366:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    236a:	80 91 d4 03 	lds	r24, 0x03D4
    236e:	90 91 d5 03 	lds	r25, 0x03D5
    2372:	64 e1       	ldi	r22, 0x14	; 20
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	99 f7       	brne	.-26     	; 0x2364 <_Z15System_Dispatchv+0x24>
			{
				can_board_timeslice();
    237e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    2382:	80 91 d4 03 	lds	r24, 0x03D4
    2386:	90 91 d5 03 	lds	r25, 0x03D5
    238a:	62 e3       	ldi	r22, 0x32	; 50
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	39 f7       	brne	.-50     	; 0x2364 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    2396:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_Z19led_timeslice_100msv>
    239a:	08 95       	ret

0000239c <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    239c:	1f 92       	push	r1
    239e:	0f 92       	push	r0
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	0f 92       	push	r0
    23a4:	11 24       	eor	r1, r1
    23a6:	2f 93       	push	r18
    23a8:	3f 93       	push	r19
    23aa:	4f 93       	push	r20
    23ac:	5f 93       	push	r21
    23ae:	6f 93       	push	r22
    23b0:	7f 93       	push	r23
    23b2:	8f 93       	push	r24
    23b4:	9f 93       	push	r25
    23b6:	af 93       	push	r26
    23b8:	bf 93       	push	r27
    23ba:	ef 93       	push	r30
    23bc:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    23be:	80 91 d9 03 	lds	r24, 0x03D9
    23c2:	88 23       	and	r24, r24
    23c4:	41 f1       	breq	.+80     	; 0x2416 <__vector_15+0x7a>
    23c6:	10 92 d9 03 	sts	0x03D9, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    23ca:	80 91 d8 03 	lds	r24, 0x03D8
    23ce:	88 23       	and	r24, r24
    23d0:	49 f1       	breq	.+82     	; 0x2424 <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    23d2:	80 91 d2 03 	lds	r24, 0x03D2
    23d6:	90 91 d3 03 	lds	r25, 0x03D3
    23da:	9c 01       	movw	r18, r24
    23dc:	2f 5f       	subi	r18, 0xFF	; 255
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
    23e0:	30 93 d3 03 	sts	0x03D3, r19
    23e4:	20 93 d2 03 	sts	0x03D2, r18
    23e8:	6a e0       	ldi	r22, 0x0A	; 10
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodhi4>
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	31 f1       	breq	.+76     	; 0x2440 <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	7f 91       	pop	r23
    2402:	6f 91       	pop	r22
    2404:	5f 91       	pop	r21
    2406:	4f 91       	pop	r20
    2408:	3f 91       	pop	r19
    240a:	2f 91       	pop	r18
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	0f 90       	pop	r0
    2412:	1f 90       	pop	r1
    2414:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	80 93 d9 03 	sts	0x03D9, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    241c:	80 91 d8 03 	lds	r24, 0x03D8
    2420:	88 23       	and	r24, r24
    2422:	b9 f6       	brne	.-82     	; 0x23d2 <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    2424:	80 91 d4 03 	lds	r24, 0x03D4
    2428:	90 91 d5 03 	lds	r25, 0x03D5
    242c:	01 96       	adiw	r24, 0x01	; 1
    242e:	90 93 d5 03 	sts	0x03D5, r25
    2432:	80 93 d4 03 	sts	0x03D4, r24
		System_Dispatch();
    2436:	0e 94 a0 11 	call	0x2340	; 0x2340 <_Z15System_Dispatchv>
		OS_Dispatch();
    243a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z11OS_Dispatchv>
    243e:	da cf       	rjmp	.-76     	; 0x23f4 <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    2440:	10 92 d3 03 	sts	0x03D3, r1
    2444:	10 92 d2 03 	sts	0x03D2, r1
			OS_Event_TIC_Counter++;
    2448:	80 91 d4 03 	lds	r24, 0x03D4
    244c:	90 91 d5 03 	lds	r25, 0x03D5
    2450:	01 96       	adiw	r24, 0x01	; 1
    2452:	90 93 d5 03 	sts	0x03D5, r25
    2456:	80 93 d4 03 	sts	0x03D4, r24
			OS_Dispatch();
    245a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z11OS_Dispatchv>
    245e:	ca cf       	rjmp	.-108    	; 0x23f4 <__vector_15+0x58>

00002460 <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    2464:	93 e0       	ldi	r25, 0x03	; 3
    2466:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    2468:	9a ef       	ldi	r25, 0xFA	; 250
    246a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    246c:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    2470:	10 92 d5 03 	sts	0x03D5, r1
    2474:	10 92 d4 03 	sts	0x03D4, r1
}
    2478:	08 95       	ret

0000247a <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    247a:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    247c:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    247e:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    2480:	85 81       	ldd	r24, Z+5	; 0x05
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	d9 f0       	breq	.+54     	; 0x24bc <_Z27can_parse_configure_requestP4sCAN+0x42>
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	71 f0       	breq	.+28     	; 0x24a6 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    248a:	81 30       	cpi	r24, 0x01	; 1
    248c:	09 f0       	breq	.+2      	; 0x2490 <_Z27can_parse_configure_requestP4sCAN+0x16>
    248e:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    2490:	89 2f       	mov	r24, r25
    2492:	80 95       	com	r24
    2494:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    2496:	92 23       	and	r25, r18
    2498:	20 91 da 03 	lds	r18, 0x03DA
    249c:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    249e:	89 23       	and	r24, r25
    24a0:	80 93 da 03 	sts	0x03DA, r24
				 break;
    24a4:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    24a6:	89 2f       	mov	r24, r25
    24a8:	80 95       	com	r24
    24aa:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    24ac:	92 23       	and	r25, r18
    24ae:	20 91 dc 03 	lds	r18, 0x03DC
    24b2:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    24b4:	89 23       	and	r24, r25
    24b6:	80 93 dc 03 	sts	0x03DC, r24
    24ba:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    24bc:	89 2f       	mov	r24, r25
    24be:	80 95       	com	r24
    24c0:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    24c2:	92 23       	and	r25, r18
    24c4:	20 91 db 03 	lds	r18, 0x03DB
    24c8:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    24ca:	89 23       	and	r24, r25
    24cc:	80 93 db 03 	sts	0x03DB, r24
				 break;
    24d0:	08 95       	ret

000024d2 <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    24d2:	10 92 da 03 	sts	0x03DA, r1
	config_byte_2 = 0;		// no reports
    24d6:	10 92 db 03 	sts	0x03DB, r1
	config_byte_3 = 0;		// 
    24da:	10 92 dc 03 	sts	0x03DC, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    24de:	82 e4       	ldi	r24, 0x42	; 66
    24e0:	80 93 dd 03 	sts	0x03DD, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    24e4:	10 92 62 03 	sts	0x0362, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    24e8:	80 91 de 03 	lds	r24, 0x03DE
    24ec:	81 60       	ori	r24, 0x01	; 1
    24ee:	80 93 de 03 	sts	0x03DE, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    24f2:	10 92 61 03 	sts	0x0361, r1
	MyInstance 		 = 0x98;
    24f6:	88 e9       	ldi	r24, 0x98	; 152
    24f8:	80 93 60 03 	sts	0x0360, r24
}
    24fc:	08 95       	ret

000024fe <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    24fe:	80 91 de 03 	lds	r24, 0x03DE
							// b/c BigMotorEn board already does and we should have a consistent interface.
							// and b/c it's better the user knows when it's read.

	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    2502:	80 fd       	sbrc	r24, 0
    2504:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    2506:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    250a:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z25app_default_configurationv>
    250e:	08 95       	ret

00002510 <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    2510:	20 91 60 03 	lds	r18, 0x0360
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2514:	f9 99       	sbic	0x1f, 1	; 31
    2516:	fe cf       	rjmp	.-4      	; 0x2514 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2518:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    251a:	92 bd       	out	0x22, r25	; 34
    251c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    251e:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	fa 9a       	sbi	0x1f, 2	; 31
    2526:	f9 9a       	sbi	0x1f, 1	; 31
    2528:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    252a:	9c 01       	movw	r18, r24
    252c:	2f 5f       	subi	r18, 0xFF	; 255
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2530:	c9 01       	movw	r24, r18
    2532:	08 95       	ret

00002534 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2534:	f9 99       	sbic	0x1f, 1	; 31
    2536:	fe cf       	rjmp	.-4      	; 0x2534 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2538:	92 bd       	out	0x22, r25	; 34
    253a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    253c:	f8 9a       	sbi	0x1f, 0	; 31
    253e:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    2540:	20 93 60 03 	sts	0x0360, r18
    return mEEPROMAddress+1;    
    2544:	9c 01       	movw	r18, r24
    2546:	2f 5f       	subi	r18, 0xFF	; 255
    2548:	3f 4f       	sbci	r19, 0xFF	; 255
}
    254a:	c9 01       	movw	r24, r18
    254c:	08 95       	ret

0000254e <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    254e:	20 91 61 03 	lds	r18, 0x0361
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2552:	f9 99       	sbic	0x1f, 1	; 31
    2554:	fe cf       	rjmp	.-4      	; 0x2552 <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2556:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2558:	92 bd       	out	0x22, r25	; 34
    255a:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    255c:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	fa 9a       	sbi	0x1f, 2	; 31
    2564:	f9 9a       	sbi	0x1f, 1	; 31
    2566:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    2568:	9c 01       	movw	r18, r24
    256a:	2f 5f       	subi	r18, 0xFF	; 255
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
}
    256e:	c9 01       	movw	r24, r18
    2570:	08 95       	ret

00002572 <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2572:	f9 99       	sbic	0x1f, 1	; 31
    2574:	fe cf       	rjmp	.-4      	; 0x2572 <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2576:	92 bd       	out	0x22, r25	; 34
    2578:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    257a:	f8 9a       	sbi	0x1f, 0	; 31
    257c:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    257e:	20 93 61 03 	sts	0x0361, r18
    return mEEPROMAddress+1;
    2582:	9c 01       	movw	r18, r24
    2584:	2f 5f       	subi	r18, 0xFF	; 255
    2586:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2588:	c9 01       	movw	r24, r18
    258a:	08 95       	ret

0000258c <_Z25save_configuration_eepromPh>:
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	eeprom_write_byte( addr++, ~config_byte_1 );
    258c:	9c 01       	movw	r18, r24
    258e:	2f 5f       	subi	r18, 0xFF	; 255
    2590:	3f 4f       	sbci	r19, 0xFF	; 255
    2592:	40 91 da 03 	lds	r20, 0x03DA
    2596:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2598:	f9 99       	sbic	0x1f, 1	; 31
    259a:	fe cf       	rjmp	.-4      	; 0x2598 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    259c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    259e:	92 bd       	out	0x22, r25	; 34
    25a0:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    25a2:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	fa 9a       	sbi	0x1f, 2	; 31
    25aa:	f9 9a       	sbi	0x1f, 1	; 31
    25ac:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    25ae:	c9 01       	movw	r24, r18
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	40 91 db 03 	lds	r20, 0x03DB
    25b6:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    25b8:	f9 99       	sbic	0x1f, 1	; 31
    25ba:	fe cf       	rjmp	.-4      	; 0x25b8 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    25bc:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25be:	32 bd       	out	0x22, r19	; 34
    25c0:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    25c2:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	fa 9a       	sbi	0x1f, 2	; 31
    25ca:	f9 9a       	sbi	0x1f, 1	; 31
    25cc:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    25ce:	9c 01       	movw	r18, r24
    25d0:	2f 5f       	subi	r18, 0xFF	; 255
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	40 91 dc 03 	lds	r20, 0x03DC
    25d8:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    25da:	f9 99       	sbic	0x1f, 1	; 31
    25dc:	fe cf       	rjmp	.-4      	; 0x25da <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    25de:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25e0:	92 bd       	out	0x22, r25	; 34
    25e2:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    25e4:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	fa 9a       	sbi	0x1f, 2	; 31
    25ec:	f9 9a       	sbi	0x1f, 1	; 31
    25ee:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    25f0:	c9 01       	movw	r24, r18
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	40 91 dd 03 	lds	r20, 0x03DD
    25f8:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    25fa:	f9 99       	sbic	0x1f, 1	; 31
    25fc:	fe cf       	rjmp	.-4      	; 0x25fa <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    25fe:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2600:	32 bd       	out	0x22, r19	; 34
    2602:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2604:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	fa 9a       	sbi	0x1f, 2	; 31
    260c:	f9 9a       	sbi	0x1f, 1	; 31
    260e:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    2610:	9c 01       	movw	r18, r24
    2612:	2f 5f       	subi	r18, 0xFF	; 255
    2614:	3f 4f       	sbci	r19, 0xFF	; 255
    2616:	40 91 de 03 	lds	r20, 0x03DE
    261a:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    261c:	f9 99       	sbic	0x1f, 1	; 31
    261e:	fe cf       	rjmp	.-4      	; 0x261c <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2620:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2622:	92 bd       	out	0x22, r25	; 34
    2624:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2626:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	fa 9a       	sbi	0x1f, 2	; 31
    262e:	f9 9a       	sbi	0x1f, 1	; 31
    2630:	0f be       	out	0x3f, r0	; 63
	return addr;
}
    2632:	c9 01       	movw	r24, r18
    2634:	08 95       	ret

00002636 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    263e:	0e 94 a7 12 	call	0x254e	; 0x254e <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    2642:	0e 94 c6 12 	call	0x258c	; 0x258c <_Z25save_configuration_eepromPh>
}
    2646:	08 95       	ret

00002648 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    2648:	f8 94       	cli
	return save_configuration();
    264a:	0e 94 1b 13 	call	0x2636	; 0x2636 <_Z18save_configurationv>
	sei();
}
    264e:	08 95       	ret

00002650 <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    2650:	22 e1       	ldi	r18, 0x12	; 18
    2652:	84 33       	cpi	r24, 0x34	; 52
    2654:	92 07       	cpc	r25, r18
    2656:	11 f0       	breq	.+4      	; 0x265c <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    2658:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    265a:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    265c:	80 91 de 03 	lds	r24, 0x03DE
    2660:	8e 7f       	andi	r24, 0xFE	; 254
    2662:	80 93 de 03 	sts	0x03DE, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    2666:	f8 94       	cli
    2668:	0e 94 1b 13 	call	0x2636	; 0x2636 <_Z18save_configurationv>
    266c:	78 94       	sei
		retval = 1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	08 95       	ret

00002672 <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    2672:	9c 01       	movw	r18, r24
    2674:	2f 5f       	subi	r18, 0xFF	; 255
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2678:	f9 99       	sbic	0x1f, 1	; 31
    267a:	fe cf       	rjmp	.-4      	; 0x2678 <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    267c:	92 bd       	out	0x22, r25	; 34
    267e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2680:	f8 9a       	sbi	0x1f, 0	; 31
    2682:	80 b5       	in	r24, 0x20	; 32
    2684:	80 95       	com	r24
    2686:	80 93 da 03 	sts	0x03DA, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    268a:	c9 01       	movw	r24, r18
    268c:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    268e:	f9 99       	sbic	0x1f, 1	; 31
    2690:	fe cf       	rjmp	.-4      	; 0x268e <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2692:	32 bd       	out	0x22, r19	; 34
    2694:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2696:	f8 9a       	sbi	0x1f, 0	; 31
    2698:	20 b5       	in	r18, 0x20	; 32
    269a:	20 95       	com	r18
    269c:	20 93 db 03 	sts	0x03DB, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    26a0:	9c 01       	movw	r18, r24
    26a2:	2f 5f       	subi	r18, 0xFF	; 255
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26a6:	f9 99       	sbic	0x1f, 1	; 31
    26a8:	fe cf       	rjmp	.-4      	; 0x26a6 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    26aa:	92 bd       	out	0x22, r25	; 34
    26ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    26ae:	f8 9a       	sbi	0x1f, 0	; 31
    26b0:	80 b5       	in	r24, 0x20	; 32
    26b2:	80 95       	com	r24
    26b4:	80 93 dc 03 	sts	0x03DC, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    26b8:	c9 01       	movw	r24, r18
    26ba:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26bc:	f9 99       	sbic	0x1f, 1	; 31
    26be:	fe cf       	rjmp	.-4      	; 0x26bc <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    26c0:	32 bd       	out	0x22, r19	; 34
    26c2:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    26c4:	f8 9a       	sbi	0x1f, 0	; 31
    26c6:	20 b5       	in	r18, 0x20	; 32
    26c8:	20 95       	com	r18
    26ca:	20 93 dd 03 	sts	0x03DD, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    26ce:	9c 01       	movw	r18, r24
    26d0:	2f 5f       	subi	r18, 0xFF	; 255
    26d2:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26d4:	f9 99       	sbic	0x1f, 1	; 31
    26d6:	fe cf       	rjmp	.-4      	; 0x26d4 <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    26d8:	92 bd       	out	0x22, r25	; 34
    26da:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    26dc:	f8 9a       	sbi	0x1f, 0	; 31
    26de:	80 b5       	in	r24, 0x20	; 32
    26e0:	80 95       	com	r24
    26e2:	80 93 de 03 	sts	0x03DE, r24
	return addr;
}
    26e6:	c9 01       	movw	r24, r18
    26e8:	08 95       	ret

000026ea <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 9a 12 	call	0x2534	; 0x2534 <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    26f2:	0e 94 b9 12 	call	0x2572	; 0x2572 <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    26f6:	0e 94 39 13 	call	0x2672	; 0x2672 <_Z25read_configuration_eepromPh>
}
    26fa:	08 95       	ret

000026fc <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    26fc:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    26fe:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    2700:	90 93 89 00 	sts	0x0089, r25
    2704:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    2708:	2f bf       	out	0x3f, r18	; 63
}
    270a:	08 95       	ret

0000270c <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    270c:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    270e:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2710:	90 93 8b 00 	sts	0x008B, r25
    2714:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    2718:	2f bf       	out	0x3f, r18	; 63
}
    271a:	08 95       	ret

0000271c <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	7b 01       	movw	r14, r22
    2726:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    2728:	20 91 28 01 	lds	r18, 0x0128
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	74 e2       	ldi	r23, 0x24	; 36
    2736:	84 ef       	ldi	r24, 0xF4	; 244
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divmodsi4>
    273e:	ca 01       	movw	r24, r20
    2740:	b9 01       	movw	r22, r18
    2742:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    2746:	a8 01       	movw	r20, r16
    2748:	97 01       	movw	r18, r14
    274a:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
    274e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
	return Top;
}
    2752:	cb 01       	movw	r24, r22
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	08 95       	ret

0000275e <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    275e:	90 93 2a 01 	sts	0x012A, r25
    2762:	80 93 29 01 	sts	0x0129, r24
	ICR1 = TOP;
    2766:	90 93 87 00 	sts	0x0087, r25
    276a:	80 93 86 00 	sts	0x0086, r24
}
    276e:	08 95       	ret

00002770 <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    2770:	0f 93       	push	r16
    2772:	1f 93       	push	r17
    2774:	cf 93       	push	r28
    2776:	df 93       	push	r29
    2778:	9b 01       	movw	r18, r22
    277a:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	74 e2       	ldi	r23, 0x24	; 36
    2780:	84 e7       	ldi	r24, 0x74	; 116
    2782:	9b e4       	ldi	r25, 0x4B	; 75
    2784:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
    2788:	8b 01       	movw	r16, r22
    278a:	d8 2f       	mov	r29, r24
    278c:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    278e:	9e 01       	movw	r18, r28
    2790:	71 2f       	mov	r23, r17
    2792:	83 2f       	mov	r24, r19
    2794:	92 2f       	mov	r25, r18
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 94 1a 	call	0x3528	; 0x3528 <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <_Z16select_prescalerf+0x38>
    27a6:	41 c0       	rjmp	.+130    	; 0x282a <_Z16select_prescalerf+0xba>
    27a8:	9e 01       	movw	r18, r28
    27aa:	60 2f       	mov	r22, r16
    27ac:	71 2f       	mov	r23, r17
    27ae:	83 2f       	mov	r24, r19
    27b0:	92 2f       	mov	r25, r18
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	5e e3       	ldi	r21, 0x3E	; 62
    27ba:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 94 1a 	call	0x3528	; 0x3528 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	b4 f5       	brge	.+108    	; 0x283a <_Z16select_prescalerf+0xca>
    27ce:	9e 01       	movw	r18, r28
    27d0:	60 2f       	mov	r22, r16
    27d2:	71 2f       	mov	r23, r17
    27d4:	83 2f       	mov	r24, r19
    27d6:	92 2f       	mov	r25, r18
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5c e3       	ldi	r21, 0x3C	; 60
    27e0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 94 1a 	call	0x3528	; 0x3528 <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <_Z16select_prescalerf+0xd6>
    27f4:	9e 01       	movw	r18, r28
    27f6:	60 2f       	mov	r22, r16
    27f8:	71 2f       	mov	r23, r17
    27fa:	83 2f       	mov	r24, r19
    27fc:	92 2f       	mov	r25, r18
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5b e3       	ldi	r21, 0x3B	; 59
    2806:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	3f ef       	ldi	r19, 0xFF	; 255
    280e:	4f e7       	ldi	r20, 0x7F	; 127
    2810:	57 e4       	ldi	r21, 0x47	; 71
    2812:	0e 94 94 1a 	call	0x3528	; 0x3528 <__gtsf2>
    2816:	18 16       	cp	r1, r24
    2818:	9c f4       	brge	.+38     	; 0x2840 <_Z16select_prescalerf+0xd0>
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    281e:	c9 01       	movw	r24, r18
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    282a:	21 e0       	ldi	r18, 0x01	; 1
    282c:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    282e:	c9 01       	movw	r24, r18
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    283a:	28 e0       	ldi	r18, 0x08	; 8
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	ef cf       	rjmp	.-34     	; 0x281e <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	31 e0       	ldi	r19, 0x01	; 1
    2844:	ec cf       	rjmp	.-40     	; 0x281e <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    2846:	20 e4       	ldi	r18, 0x40	; 64
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	e9 cf       	rjmp	.-46     	; 0x281e <_Z16select_prescalerf+0xae>

0000284c <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    284c:	80 34       	cpi	r24, 0x40	; 64
    284e:	91 05       	cpc	r25, r1
    2850:	d9 f0       	breq	.+54     	; 0x2888 <_Z20get_tccr1b_prescalert+0x3c>
    2852:	81 34       	cpi	r24, 0x41	; 65
    2854:	91 05       	cpc	r25, r1
    2856:	50 f0       	brcs	.+20     	; 0x286c <_Z20get_tccr1b_prescalert+0x20>
    2858:	21 e0       	ldi	r18, 0x01	; 1
    285a:	80 30       	cpi	r24, 0x00	; 0
    285c:	92 07       	cpc	r25, r18
    285e:	81 f0       	breq	.+32     	; 0x2880 <_Z20get_tccr1b_prescalert+0x34>
    2860:	24 e0       	ldi	r18, 0x04	; 4
    2862:	80 30       	cpi	r24, 0x00	; 0
    2864:	92 07       	cpc	r25, r18
    2866:	51 f0       	breq	.+20     	; 0x287c <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    2868:	8f ef       	ldi	r24, 0xFF	; 255
    286a:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    286c:	81 30       	cpi	r24, 0x01	; 1
    286e:	91 05       	cpc	r25, r1
    2870:	49 f0       	breq	.+18     	; 0x2884 <_Z20get_tccr1b_prescalert+0x38>
    2872:	88 30       	cpi	r24, 0x08	; 8
    2874:	91 05       	cpc	r25, r1
    2876:	c1 f7       	brne	.-16     	; 0x2868 <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    2878:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    287a:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    287c:	85 e0       	ldi	r24, 0x05	; 5
    287e:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    2880:	84 e0       	ldi	r24, 0x04	; 4
    2882:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    2888:	83 e0       	ldi	r24, 0x03	; 3
    288a:	08 95       	ret

0000288c <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    288c:	ef 92       	push	r14
    288e:	ff 92       	push	r15
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	7b 01       	movw	r14, r22
    2896:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    2898:	20 91 28 01 	lds	r18, 0x0128
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	74 e2       	ldi	r23, 0x24	; 36
    28a6:	84 ef       	ldi	r24, 0xF4	; 244
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divmodsi4>
    28ae:	ca 01       	movw	r24, r20
    28b0:	b9 01       	movw	r22, r18
    28b2:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    28b6:	a8 01       	movw	r20, r16
    28b8:	97 01       	movw	r18, r14
    28ba:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
    28be:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    28c2:	70 93 2a 01 	sts	0x012A, r23
    28c6:	60 93 29 01 	sts	0x0129, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    28ca:	70 93 87 00 	sts	0x0087, r23
    28ce:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	08 95       	ret

000028dc <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    28dc:	ef 92       	push	r14
    28de:	ff 92       	push	r15
    28e0:	0f 93       	push	r16
    28e2:	1f 93       	push	r17
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	7b 01       	movw	r14, r22
    28ea:	8c 01       	movw	r16, r24
    28ec:	c4 2f       	mov	r28, r20
    28ee:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    28f0:	41 11       	cpse	r20, r1
    28f2:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    28f4:	d1 11       	cpse	r29, r1
    28f6:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    28f8:	80 91 64 00 	lds	r24, 0x0064
    28fc:	87 7e       	andi	r24, 0xE7	; 231
    28fe:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    2902:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    2904:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    2906:	10 92 89 00 	sts	0x0089, r1
    290a:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    290e:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2910:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    2912:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2914:	10 92 8b 00 	sts	0x008B, r1
    2918:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    291c:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    291e:	20 91 28 01 	lds	r18, 0x0128
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	74 e2       	ldi	r23, 0x24	; 36
    292c:	84 ef       	ldi	r24, 0xF4	; 244
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divmodsi4>
    2934:	ca 01       	movw	r24, r20
    2936:	b9 01       	movw	r22, r18
    2938:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    293c:	a8 01       	movw	r20, r16
    293e:	97 01       	movw	r18, r14
    2940:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divsf3>
    2944:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    2948:	70 93 2a 01 	sts	0x012A, r23
    294c:	60 93 29 01 	sts	0x0129, r22
	ICR1 = TOP;
    2950:	70 93 87 00 	sts	0x0087, r23
    2954:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    2958:	cc 23       	and	r28, r28
    295a:	c1 f4       	brne	.+48     	; 0x298c <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    295c:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    295e:	d1 11       	cpse	r29, r1
    2960:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    2962:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    2966:	c8 01       	movw	r24, r16
    2968:	b7 01       	movw	r22, r14
    296a:	0e 94 b8 13 	call	0x2770	; 0x2770 <_Z16select_prescalerf>
    296e:	80 93 28 01 	sts	0x0128, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 26 14 	call	0x284c	; 0x284c <_Z20get_tccr1b_prescalert>
    2978:	88 61       	ori	r24, 0x18	; 24
    297a:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    298c:	82 e8       	ldi	r24, 0x82	; 130
    298e:	e7 cf       	rjmp	.-50     	; 0x295e <_Z8pwm_initfhh+0x82>

00002990 <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    2990:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    2994:	29 2f       	mov	r18, r25
    2996:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    2998:	88 23       	and	r24, r24
    299a:	21 f4       	brne	.+8      	; 0x29a4 <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    299c:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    299e:	90 93 80 00 	sts	0x0080, r25
}
    29a2:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    29a4:	92 2f       	mov	r25, r18
    29a6:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    29a8:	90 93 80 00 	sts	0x0080, r25
}
    29ac:	08 95       	ret

000029ae <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    29ae:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    29b2:	29 2f       	mov	r18, r25
    29b4:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    29b6:	88 23       	and	r24, r24
    29b8:	21 f4       	brne	.+8      	; 0x29c2 <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    29ba:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    29bc:	90 93 80 00 	sts	0x0080, r25
}
    29c0:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    29c2:	92 2f       	mov	r25, r18
    29c4:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    29c6:	90 93 80 00 	sts	0x0080, r25
}
    29ca:	08 95       	ret

000029cc <_Z9set_dutyAf>:

/* value must be Positive! */
void set_dutyA( float mDuty )
{
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	7b 01       	movw	r14, r22
    29d6:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty; 
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	a9 01       	movw	r20, r18
    29de:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__ltsf2>
    29e2:	87 ff       	sbrs	r24, 7
    29e4:	04 c0       	rjmp	.+8      	; 0x29ee <_Z9set_dutyAf+0x22>
    29e6:	17 fb       	bst	r17, 7
    29e8:	10 95       	com	r17
    29ea:	17 f9       	bld	r17, 7
    29ec:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    29ee:	60 91 29 01 	lds	r22, 0x0129
    29f2:	70 91 2a 01 	lds	r23, 0x012A
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__floatunsisf>
    29fe:	a8 01       	movw	r20, r16
    2a00:	97 01       	movw	r18, r14
    2a02:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
    2a06:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <ceil>
    2a0a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    2a0e:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    2a10:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    2a12:	70 93 89 00 	sts	0x0089, r23
    2a16:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    2a1a:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty; 
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	08 95       	ret

00002a26 <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	7b 01       	movw	r14, r22
    2a30:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	a9 01       	movw	r20, r18
    2a38:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__ltsf2>
    2a3c:	87 ff       	sbrs	r24, 7
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <_Z9set_dutyBf+0x22>
    2a40:	17 fb       	bst	r17, 7
    2a42:	10 95       	com	r17
    2a44:	17 f9       	bld	r17, 7
    2a46:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    2a48:	60 91 29 01 	lds	r22, 0x0129
    2a4c:	70 91 2a 01 	lds	r23, 0x012A
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__floatunsisf>
    2a58:	a8 01       	movw	r20, r16
    2a5a:	97 01       	movw	r18, r14
    2a5c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsf3>
    2a60:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <ceil>
    2a64:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2a68:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    2a6a:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2a6c:	70 93 8b 00 	sts	0x008B, r23
    2a70:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    2a74:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	08 95       	ret

00002a80 <set_spi_isr_callback>:
			  which has a system message ID
******************************************************************************/
void set_spi_isr_callback( BOOL (*mCallback)(void) )
{
	//printf("set_spi_isr_callback(%d)\n", mCallback);
	spi_isr_call_back = mCallback;
    2a80:	90 93 e0 03 	sts	0x03E0, r25
    2a84:	80 93 df 03 	sts	0x03DF, r24
}
    2a88:	08 95       	ret

00002a8a <__vector_26>:
//#include "rpi_spi.h"
//#include "servos.h"

/******* SPI Transfer Complete ISR ***************/
ISR ( SPI_STC_vect )
{	
    2a8a:	1f 92       	push	r1
    2a8c:	0f 92       	push	r0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	0f 92       	push	r0
    2a92:	11 24       	eor	r1, r1
    2a94:	2f 93       	push	r18
    2a96:	3f 93       	push	r19
    2a98:	4f 93       	push	r20
    2a9a:	5f 93       	push	r21
    2a9c:	6f 93       	push	r22
    2a9e:	7f 93       	push	r23
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	af 93       	push	r26
    2aa6:	bf 93       	push	r27
    2aa8:	ef 93       	push	r30
    2aaa:	ff 93       	push	r31
	spi_isr_call_back();
    2aac:	e0 91 df 03 	lds	r30, 0x03DF
    2ab0:	f0 91 e0 03 	lds	r31, 0x03E0
    2ab4:	09 95       	icall
//	test_rx_response( SPDR );	
}
    2ab6:	ff 91       	pop	r31
    2ab8:	ef 91       	pop	r30
    2aba:	bf 91       	pop	r27
    2abc:	af 91       	pop	r26
    2abe:	9f 91       	pop	r25
    2ac0:	8f 91       	pop	r24
    2ac2:	7f 91       	pop	r23
    2ac4:	6f 91       	pop	r22
    2ac6:	5f 91       	pop	r21
    2ac8:	4f 91       	pop	r20
    2aca:	3f 91       	pop	r19
    2acc:	2f 91       	pop	r18
    2ace:	0f 90       	pop	r0
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	0f 90       	pop	r0
    2ad4:	1f 90       	pop	r1
    2ad6:	18 95       	reti

00002ad8 <_Z16SPI_SlaveReceivev>:


char SPI_SlaveReceive(void) 
{
	/* Wait for reception complete */ 
	while(!(SPSR & (1<<SPIF)));
    2ad8:	0d b4       	in	r0, 0x2d	; 45
    2ada:	07 fe       	sbrs	r0, 7
    2adc:	fd cf       	rjmp	.-6      	; 0x2ad8 <_Z16SPI_SlaveReceivev>
	/* Return data register */ 
	return SPDR;
    2ade:	8e b5       	in	r24, 0x2e	; 46
}
    2ae0:	08 95       	ret

00002ae2 <spi_setBitOrder>:

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	21 f0       	breq	.+8      	; 0x2aee <spi_setBitOrder+0xc>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    2ae6:	8c b5       	in	r24, 0x2c	; 44
    2ae8:	8f 7d       	andi	r24, 0xDF	; 223
    2aea:	8c bd       	out	0x2c, r24	; 44
    2aec:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    2aee:	8c b5       	in	r24, 0x2c	; 44
    2af0:	80 62       	ori	r24, 0x20	; 32
    2af2:	8c bd       	out	0x2c, r24	; 44
    2af4:	08 95       	ret

00002af6 <spi_setDataMode>:
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2af6:	9c b5       	in	r25, 0x2c	; 44
    2af8:	93 7f       	andi	r25, 0xF3	; 243
    2afa:	98 2b       	or	r25, r24
    2afc:	9c bd       	out	0x2c, r25	; 44
}
    2afe:	08 95       	ret

00002b00 <spi_setClockDivider>:

// Sets BaudRate:
void spi_setClockDivider( uint8_t rate )
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    2b00:	2c b5       	in	r18, 0x2c	; 44
    2b02:	98 2f       	mov	r25, r24
    2b04:	93 70       	andi	r25, 0x03	; 3
    2b06:	2c 7f       	andi	r18, 0xFC	; 252
    2b08:	92 2b       	or	r25, r18
    2b0a:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    2b0c:	2d b5       	in	r18, 0x2d	; 45
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	95 95       	asr	r25
    2b12:	87 95       	ror	r24
    2b14:	95 95       	asr	r25
    2b16:	87 95       	ror	r24
    2b18:	81 70       	andi	r24, 0x01	; 1
    2b1a:	2e 7f       	andi	r18, 0xFE	; 254
    2b1c:	82 2b       	or	r24, r18
    2b1e:	8d bd       	out	0x2d, r24	; 45
}
    2b20:	08 95       	ret

00002b22 <_Z7pin_ddrhh>:
  /************************ WARNING!! *****************************
   No need to modify MCUCR reigsters.  Default is '0' which means
   the SPI to use regular MISO/MOSI, not the alternate pins 
   NOTE: The Serial Progamming always uses the Alternate pins.
   ****************************************************************/
  if (mAlternatePins) 
    2b22:	88 23       	and	r24, r24
    2b24:	59 f0       	breq	.+22     	; 0x2b3c <_Z7pin_ddrhh+0x1a>
  {
  	MCUCR |= (1<<SPIPS); 				        // Clear for MOSI.  Set for MOSI_A
    2b26:	85 b7       	in	r24, 0x35	; 53
    2b28:	80 68       	ori	r24, 0x80	; 128
    2b2a:	85 bf       	out	0x35, r24	; 53
	if (mMaster)
    2b2c:	66 23       	and	r22, r22
    2b2e:	99 f0       	breq	.+38     	; 0x2b56 <_Z7pin_ddrhh+0x34>
	{
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD &= ~MISO_A;
    2b30:	52 98       	cbi	0x0a, 2	; 10
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD |= MOSI_A|SCK_A;
    2b32:	8a b1       	in	r24, 0x0a	; 10
    2b34:	88 61       	ori	r24, 0x18	; 24
    2b36:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;	
    2b38:	38 98       	cbi	0x07, 0	; 7
    2b3a:	08 95       	ret
		  DDRC &= ~SS_A;
	}  
  }
  else
  {
  	  MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
    2b3c:	85 b7       	in	r24, 0x35	; 53
    2b3e:	8f 77       	andi	r24, 0x7F	; 127
    2b40:	85 bf       	out	0x35, r24	; 53
	  if (mMaster)
    2b42:	66 23       	and	r22, r22
    2b44:	71 f4       	brne	.+28     	; 0x2b62 <_Z7pin_ddrhh+0x40>
		  DDRC &= ~SS;	

	  } else {
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRB |= MISO;	
    2b46:	20 9a       	sbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB &= MOSI|SCK|SS;
    2b48:	84 b1       	in	r24, 0x04	; 4
    2b4a:	8a 78       	andi	r24, 0x8A	; 138
    2b4c:	84 b9       	out	0x04, r24	; 4
		  DDRD &= SS;
    2b4e:	8a b1       	in	r24, 0x0a	; 10
    2b50:	88 70       	andi	r24, 0x08	; 8
    2b52:	8a b9       	out	0x0a, r24	; 10
    2b54:	08 95       	ret
		  DDRC &= ~SS_A;	
	}
	else {	
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD |= MISO_A;
    2b56:	52 9a       	sbi	0x0a, 2	; 10

		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD &= ~(MOSI_A|SCK_A);
    2b58:	8a b1       	in	r24, 0x0a	; 10
    2b5a:	87 7e       	andi	r24, 0xE7	; 231
    2b5c:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;
    2b5e:	38 98       	cbi	0x07, 0	; 7
    2b60:	08 95       	ret
  	  MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
	  if (mMaster)
	  {
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD &= ~MISO;
    2b62:	50 98       	cbi	0x0a, 0	; 10
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD |= MOSI|SCK;
    2b64:	8a b1       	in	r24, 0x0a	; 10
    2b66:	82 68       	ori	r24, 0x82	; 130
    2b68:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS;	
    2b6a:	3b 98       	cbi	0x07, 3	; 7
    2b6c:	08 95       	ret

00002b6e <spi_init>:
	
	mbit_order	:	[MSGFIRST,LSBFIRST]  
	mSPI_Mode	:	SPI mode [SPI_MODE0..SPI_MODE3]
****************************************************************************/
void spi_init( BOOL mAlternatePins, BOOL mMaster, uint8_t mbit_order, uint8_t mSPI_Mode )
{
    2b6e:	1f 93       	push	r17
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <spi_init+0x8>
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	16 2f       	mov	r17, r22
   pin_ddr(mAlternatePins, mMaster);
    2b7c:	2a 83       	std	Y+2, r18	; 0x02
    2b7e:	49 83       	std	Y+1, r20	; 0x01
    2b80:	0e 94 91 15 	call	0x2b22	; 0x2b22 <_Z7pin_ddrhh>
}

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    2b84:	49 81       	ldd	r20, Y+1	; 0x01
    2b86:	2a 81       	ldd	r18, Y+2	; 0x02
    2b88:	41 30       	cpi	r20, 0x01	; 1
    2b8a:	c1 f0       	breq	.+48     	; 0x2bbc <spi_init+0x4e>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    2b8c:	8c b5       	in	r24, 0x2c	; 44
    2b8e:	8f 7d       	andi	r24, 0xDF	; 223
    2b90:	8c bd       	out	0x2c, r24	; 44
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2b92:	8c b5       	in	r24, 0x2c	; 44
    2b94:	83 7f       	andi	r24, 0xF3	; 243
    2b96:	82 2b       	or	r24, r18
    2b98:	8c bd       	out	0x2c, r24	; 44
										// CMR3000 wants SPI_MODE0, but sample is done on rising edge as in Mode3

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  if (mMaster)
    2b9a:	11 23       	and	r17, r17
    2b9c:	c1 f4       	brne	.+48     	; 0x2bce <spi_init+0x60>
  {
	  SPCR |= (1<<MSTR);		// Master SPI
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
  } else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
    2b9e:	8c b5       	in	r24, 0x2c	; 44
    2ba0:	8f 7e       	andi	r24, 0xEF	; 239
    2ba2:	8c bd       	out	0x2c, r24	; 44
  return SPDR;
}

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    2ba4:	8c b5       	in	r24, 0x2c	; 44
    2ba6:	80 68       	ori	r24, 0x80	; 128
    2ba8:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
  } else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
	  spi_attachInterrupt();
  }
  SPCR |= (1<<SPE);			// Enable SPI Module
    2baa:	8c b5       	in	r24, 0x2c	; 44
    2bac:	80 64       	ori	r24, 0x40	; 64
    2bae:	8c bd       	out	0x2c, r24	; 44
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	1f 91       	pop	r17
    2bba:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    2bbc:	8c b5       	in	r24, 0x2c	; 44
    2bbe:	80 62       	ori	r24, 0x20	; 32
    2bc0:	8c bd       	out	0x2c, r24	; 44
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2bc2:	8c b5       	in	r24, 0x2c	; 44
    2bc4:	83 7f       	andi	r24, 0xF3	; 243
    2bc6:	82 2b       	or	r24, r18
    2bc8:	8c bd       	out	0x2c, r24	; 44
										// CMR3000 wants SPI_MODE0, but sample is done on rising edge as in Mode3

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  if (mMaster)
    2bca:	11 23       	and	r17, r17
    2bcc:	41 f3       	breq	.-48     	; 0x2b9e <spi_init+0x30>
  {
	  SPCR |= (1<<MSTR);		// Master SPI
    2bce:	8c b5       	in	r24, 0x2c	; 44
    2bd0:	80 61       	ori	r24, 0x10	; 16
    2bd2:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	0e 94 80 15 	call	0x2b00	; 0x2b00 <spi_setClockDivider>
    2bda:	e7 cf       	rjmp	.-50     	; 0x2baa <spi_init+0x3c>

00002bdc <spi_transfer>:
  SPCR |= (1<<SPE);			// Enable SPI Module
}

byte spi_transfer(byte _data) 
{
  SPDR = _data; 
    2bdc:	8e bd       	out	0x2e, r24	; 46
  while (! (SPSR & (1<<SPIF)) );
    2bde:	0d b4       	in	r0, 0x2d	; 45
    2be0:	07 fe       	sbrs	r0, 7
    2be2:	fd cf       	rjmp	.-6      	; 0x2bde <spi_transfer+0x2>
  return SPDR;
    2be4:	8e b5       	in	r24, 0x2e	; 46
}
    2be6:	08 95       	ret

00002be8 <spi_attachInterrupt>:

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    2be8:	8c b5       	in	r24, 0x2c	; 44
    2bea:	80 68       	ori	r24, 0x80	; 128
    2bec:	8c bd       	out	0x2c, r24	; 44
}
    2bee:	08 95       	ret

00002bf0 <spi_detachInterrupt>:

void spi_detachInterrupt() 
{
  SPCR &= ~(1<<SPIE);
    2bf0:	8c b5       	in	r24, 0x2c	; 44
    2bf2:	8f 77       	andi	r24, 0x7F	; 127
    2bf4:	8c bd       	out	0x2c, r24	; 44
}
    2bf6:	08 95       	ret

00002bf8 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    2bf8:	10 92 e2 03 	sts	0x03E2, r1
	System_LED_Control.pattern    = 0;
    2bfc:	10 92 e1 03 	sts	0x03E1, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    2c00:	50 9a       	sbi	0x0a, 0	; 10
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    2c02:	51 9a       	sbi	0x0a, 1	; 10
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    2c04:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    2c06:	57 9a       	sbi	0x0a, 7	; 10
#endif
  	RESET_LED_1();
    2c08:	58 98       	cbi	0x0b, 0	; 11
	RESET_LED_2();
    2c0a:	59 98       	cbi	0x0b, 1	; 11
	RESET_LED_3();
    2c0c:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_4();
    2c0e:	5f 98       	cbi	0x0b, 7	; 11
}
    2c10:	08 95       	ret

00002c12 <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	69 f0       	breq	.+26     	; 0x2c30 <_Z16protected_led_onh+0x1e>
    2c16:	83 30       	cpi	r24, 0x03	; 3
    2c18:	28 f0       	brcs	.+10     	; 0x2c24 <_Z16protected_led_onh+0x12>
    2c1a:	83 30       	cpi	r24, 0x03	; 3
    2c1c:	59 f0       	breq	.+22     	; 0x2c34 <_Z16protected_led_onh+0x22>
    2c1e:	84 30       	cpi	r24, 0x04	; 4
    2c20:	29 f0       	breq	.+10     	; 0x2c2c <_Z16protected_led_onh+0x1a>
    2c22:	08 95       	ret
    2c24:	81 30       	cpi	r24, 0x01	; 1
    2c26:	e9 f7       	brne	.-6      	; 0x2c22 <_Z16protected_led_onh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
    2c28:	58 9a       	sbi	0x0b, 0	; 11
    2c2a:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    2c2c:	5f 9a       	sbi	0x0b, 7	; 11
    2c2e:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
    2c30:	59 9a       	sbi	0x0b, 1	; 11
    2c32:	08 95       	ret
   case 3:  SET_LED_3();  break;
    2c34:	5e 9a       	sbi	0x0b, 6	; 11
    2c36:	08 95       	ret

00002c38 <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    2c38:	82 30       	cpi	r24, 0x02	; 2
    2c3a:	69 f0       	breq	.+26     	; 0x2c56 <_Z17protected_led_offh+0x1e>
    2c3c:	83 30       	cpi	r24, 0x03	; 3
    2c3e:	28 f0       	brcs	.+10     	; 0x2c4a <_Z17protected_led_offh+0x12>
    2c40:	83 30       	cpi	r24, 0x03	; 3
    2c42:	59 f0       	breq	.+22     	; 0x2c5a <_Z17protected_led_offh+0x22>
    2c44:	84 30       	cpi	r24, 0x04	; 4
    2c46:	29 f0       	breq	.+10     	; 0x2c52 <_Z17protected_led_offh+0x1a>
    2c48:	08 95       	ret
    2c4a:	81 30       	cpi	r24, 0x01	; 1
    2c4c:	e9 f7       	brne	.-6      	; 0x2c48 <_Z17protected_led_offh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
    2c4e:	58 98       	cbi	0x0b, 0	; 11
    2c50:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    2c52:	5f 98       	cbi	0x0b, 7	; 11
    2c54:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
    2c56:	59 98       	cbi	0x0b, 1	; 11
    2c58:	08 95       	ret
   case 3:  RESET_LED_3();  break;
    2c5a:	5e 98       	cbi	0x0b, 6	; 11
    2c5c:	08 95       	ret

00002c5e <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2c5e:	90 91 e2 03 	lds	r25, 0x03E2
    2c62:	99 23       	and	r25, r25
    2c64:	21 f0       	breq	.+8      	; 0x2c6e <_Z11strobe_ledsh+0x10>
    2c66:	92 30       	cpi	r25, 0x02	; 2
    2c68:	11 f0       	breq	.+4      	; 0x2c6e <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	08 95       	ret
    2c6e:	90 91 2e 01 	lds	r25, 0x012E
    2c72:	29 2f       	mov	r18, r25
    2c74:	21 50       	subi	r18, 0x01	; 1
    2c76:	20 93 2e 01 	sts	0x012E, r18
    2c7a:	99 23       	and	r25, r25
    2c7c:	b1 f7       	brne	.-20     	; 0x2c6a <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    2c7e:	9a e0       	ldi	r25, 0x0A	; 10
    2c80:	90 93 2e 01 	sts	0x012E, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2c84:	88 23       	and	r24, r24
    2c86:	79 f0       	breq	.+30     	; 0x2ca6 <_Z11strobe_ledsh+0x48>
    2c88:	80 91 2d 01 	lds	r24, 0x012D
    2c8c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_Z16protected_led_onh>
		i++;
    2c90:	80 91 2d 01 	lds	r24, 0x012D
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	80 93 2d 01 	sts	0x012D, r24
		if (i>=5)  { i=1; return TRUE; }
    2c9a:	85 30       	cpi	r24, 0x05	; 5
    2c9c:	78 f0       	brcs	.+30     	; 0x2cbc <_Z11strobe_ledsh+0x5e>
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	80 93 2d 01 	sts	0x012D, r24
    2ca4:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2ca6:	80 91 2d 01 	lds	r24, 0x012D
    2caa:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <_Z17protected_led_offh>
		i++;
    2cae:	80 91 2d 01 	lds	r24, 0x012D
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	80 93 2d 01 	sts	0x012D, r24
		if (i>=5)  { i=1; return TRUE; }
    2cb8:	85 30       	cpi	r24, 0x05	; 5
    2cba:	88 f7       	brcc	.-30     	; 0x2c9e <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
}
    2cbe:	08 95       	ret

00002cc0 <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2cc0:	90 91 e2 03 	lds	r25, 0x03E2
    2cc4:	91 11       	cpse	r25, r1
    2cc6:	08 95       	ret
	protected_led_on(mindex);
    2cc8:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_Z16protected_led_onh>
    2ccc:	08 95       	ret

00002cce <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2cce:	90 91 e2 03 	lds	r25, 0x03E2
    2cd2:	91 11       	cpse	r25, r1
    2cd4:	08 95       	ret
	protected_led_off(mindex);
    2cd6:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <_Z17protected_led_offh>
    2cda:	08 95       	ret

00002cdc <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    2cdc:	66 23       	and	r22, r22
    2cde:	19 f4       	brne	.+6      	; 0x2ce6 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    2ce0:	0e 94 67 16 	call	0x2cce	; 0x2cce <_Z7led_offh>
    2ce4:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    2ce6:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <_Z6led_onh>
    2cea:	08 95       	ret

00002cec <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2cec:	90 91 e2 03 	lds	r25, 0x03E2
    2cf0:	91 11       	cpse	r25, r1
    2cf2:	08 95       	ret
	protected_set_led( mindex, value );
    2cf4:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Z17protected_set_ledhh>
    2cf8:	08 95       	ret

00002cfa <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    2cfa:	66 23       	and	r22, r22
    2cfc:	69 f0       	breq	.+26     	; 0x2d18 <_Z19protected_show_bytehh+0x1e>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    2cfe:	87 ff       	sbrs	r24, 7
    2d00:	20 c0       	rjmp	.+64     	; 0x2d42 <_Z19protected_show_bytehh+0x48>
    2d02:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    2d04:	86 ff       	sbrs	r24, 6
    2d06:	20 c0       	rjmp	.+64     	; 0x2d48 <_Z19protected_show_bytehh+0x4e>
    2d08:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    2d0a:	85 ff       	sbrs	r24, 5
    2d0c:	20 c0       	rjmp	.+64     	; 0x2d4e <_Z19protected_show_bytehh+0x54>
    2d0e:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    2d10:	84 fd       	sbrc	r24, 4
    2d12:	0d c0       	rjmp	.+26     	; 0x2d2e <_Z19protected_show_bytehh+0x34>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    2d14:	58 98       	cbi	0x0b, 0	; 11
    2d16:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    2d18:	83 ff       	sbrs	r24, 3
    2d1a:	0b c0       	rjmp	.+22     	; 0x2d32 <_Z19protected_show_bytehh+0x38>
    2d1c:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    2d1e:	82 ff       	sbrs	r24, 2
    2d20:	0b c0       	rjmp	.+22     	; 0x2d38 <_Z19protected_show_bytehh+0x3e>
    2d22:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    2d24:	81 ff       	sbrs	r24, 1
    2d26:	0b c0       	rjmp	.+22     	; 0x2d3e <_Z19protected_show_bytehh+0x44>
    2d28:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    2d2a:	80 ff       	sbrs	r24, 0
    2d2c:	f3 cf       	rjmp	.-26     	; 0x2d14 <_Z19protected_show_bytehh+0x1a>
    2d2e:	58 9a       	sbi	0x0b, 0	; 11
    2d30:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    2d32:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    2d34:	82 fd       	sbrc	r24, 2
    2d36:	f5 cf       	rjmp	.-22     	; 0x2d22 <_Z19protected_show_bytehh+0x28>
    2d38:	5e 98       	cbi	0x0b, 6	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    2d3a:	81 fd       	sbrc	r24, 1
    2d3c:	f5 cf       	rjmp	.-22     	; 0x2d28 <_Z19protected_show_bytehh+0x2e>
    2d3e:	59 98       	cbi	0x0b, 1	; 11
    2d40:	f4 cf       	rjmp	.-24     	; 0x2d2a <_Z19protected_show_bytehh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    2d42:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    2d44:	86 fd       	sbrc	r24, 6
    2d46:	e0 cf       	rjmp	.-64     	; 0x2d08 <_Z19protected_show_bytehh+0xe>
    2d48:	5e 98       	cbi	0x0b, 6	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    2d4a:	85 fd       	sbrc	r24, 5
    2d4c:	e0 cf       	rjmp	.-64     	; 0x2d0e <_Z19protected_show_bytehh+0x14>
    2d4e:	59 98       	cbi	0x0b, 1	; 11
    2d50:	df cf       	rjmp	.-66     	; 0x2d10 <_Z19protected_show_bytehh+0x16>

00002d52 <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    2d52:	90 91 e2 03 	lds	r25, 0x03E2
    2d56:	99 23       	and	r25, r25
    2d58:	11 f0       	breq	.+4      	; 0x2d5e <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    2d5a:	80 91 e1 03 	lds	r24, 0x03E1
	}
    protected_show_byte( result, mHiNibble );
    2d5e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_Z19protected_show_bytehh>
}
    2d62:	08 95       	ret

00002d64 <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2d64:	90 91 e2 03 	lds	r25, 0x03E2
    2d68:	99 23       	and	r25, r25
    2d6a:	19 f0       	breq	.+6      	; 0x2d72 <_Z18show_result_toggleh+0xe>
    2d6c:	93 30       	cpi	r25, 0x03	; 3
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <_Z18show_result_toggleh+0xe>
    2d70:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    2d72:	90 91 2b 01 	lds	r25, 0x012B
    2d76:	99 23       	and	r25, r25
    2d78:	59 f4       	brne	.+22     	; 0x2d90 <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    2d7a:	60 e0       	ldi	r22, 0x00	; 0
    2d7c:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 91 2b 01 	lds	r25, 0x012B
    2d86:	91 11       	cpse	r25, r1
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	80 93 2b 01 	sts	0x012B, r24
    2d8e:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_Z19protected_show_bytehh>
    2d96:	f4 cf       	rjmp	.-24     	; 0x2d80 <_Z18show_result_toggleh+0x1c>

00002d98 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    2d98:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    2d9a:	95 81       	ldd	r25, Z+5	; 0x05
    2d9c:	9f 70       	andi	r25, 0x0F	; 15
    2d9e:	90 93 e2 03 	sts	0x03E2, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    2da2:	86 81       	ldd	r24, Z+6	; 0x06
    2da4:	8f 70       	andi	r24, 0x0F	; 15
    2da6:	80 93 e1 03 	sts	0x03E1, r24

	switch (System_LED_Control.systemMode)
    2daa:	92 30       	cpi	r25, 0x02	; 2
    2dac:	81 f0       	breq	.+32     	; 0x2dce <_Z21can_parse_led_requestP4sCAN+0x36>
    2dae:	93 30       	cpi	r25, 0x03	; 3
    2db0:	39 f0       	breq	.+14     	; 0x2dc0 <_Z21can_parse_led_requestP4sCAN+0x28>
    2db2:	91 30       	cpi	r25, 0x01	; 1
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <_Z21can_parse_led_requestP4sCAN+0x20>
    2db6:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_Z9show_bytehh>
									  break;
    2dbe:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    2dc0:	80 91 60 03 	lds	r24, 0x0360
    2dc4:	80 93 e1 03 	sts	0x03E1, r24
									  show_result_toggle( MyInstance );
    2dc8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_Z18show_result_toggleh>
    2dcc:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    2dce:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <_Z11strobe_ledsh>
									  break;
    2dd2:	08 95       	ret

00002dd4 <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    2dd4:	80 91 e2 03 	lds	r24, 0x03E2
    2dd8:	82 30       	cpi	r24, 0x02	; 2
    2dda:	d9 f0       	breq	.+54     	; 0x2e12 <_Z19led_timeslice_100msv+0x3e>
    2ddc:	83 30       	cpi	r24, 0x03	; 3
    2dde:	49 f0       	breq	.+18     	; 0x2df2 <_Z19led_timeslice_100msv+0x1e>
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <_Z19led_timeslice_100msv+0x12>
    2de4:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    2de6:	80 91 e1 03 	lds	r24, 0x03E1
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_Z9show_bytehh>
									  break;
    2df0:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    2df2:	80 91 2c 01 	lds	r24, 0x012C
    2df6:	98 2f       	mov	r25, r24
    2df8:	91 50       	subi	r25, 0x01	; 1
    2dfa:	90 93 2c 01 	sts	0x012C, r25
    2dfe:	88 23       	and	r24, r24
    2e00:	89 f7       	brne	.-30     	; 0x2de4 <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    2e02:	8a e0       	ldi	r24, 0x0A	; 10
    2e04:	80 93 2c 01 	sts	0x012C, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    2e08:	80 91 60 03 	lds	r24, 0x0360
    2e0c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_Z18show_result_toggleh>
    2e10:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    2e12:	80 91 e1 03 	lds	r24, 0x03E1
    2e16:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <_Z11strobe_ledsh>
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	19 f7       	brne	.-58     	; 0x2de4 <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    2e1e:	90 91 e1 03 	lds	r25, 0x03E1
    2e22:	99 23       	and	r25, r25
    2e24:	19 f4       	brne	.+6      	; 0x2e2c <_Z19led_timeslice_100msv+0x58>
    2e26:	80 93 e1 03 	sts	0x03E1, r24
    2e2a:	08 95       	ret
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	fb cf       	rjmp	.-10     	; 0x2e26 <_Z19led_timeslice_100msv+0x52>

00002e30 <__fixunssfsi>:
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	7b 01       	movw	r14, r22
    2e3a:	8c 01       	movw	r16, r24
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	5f e4       	ldi	r21, 0x4F	; 79
    2e44:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__gesf2>
    2e48:	87 fd       	sbrc	r24, 7
    2e4a:	11 c0       	rjmp	.+34     	; 0x2e6e <__fixunssfsi+0x3e>
    2e4c:	c8 01       	movw	r24, r16
    2e4e:	b7 01       	movw	r22, r14
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	5f e4       	ldi	r21, 0x4F	; 79
    2e58:	0e 94 bb 18 	call	0x3176	; 0x3176 <__subsf3>
    2e5c:	0e 94 84 1b 	call	0x3708	; 0x3708 <__fixsfsi>
    2e60:	9b 01       	movw	r18, r22
    2e62:	ac 01       	movw	r20, r24
    2e64:	20 50       	subi	r18, 0x00	; 0
    2e66:	30 40       	sbci	r19, 0x00	; 0
    2e68:	40 40       	sbci	r20, 0x00	; 0
    2e6a:	50 48       	sbci	r21, 0x80	; 128
    2e6c:	06 c0       	rjmp	.+12     	; 0x2e7a <__fixunssfsi+0x4a>
    2e6e:	c8 01       	movw	r24, r16
    2e70:	b7 01       	movw	r22, r14
    2e72:	0e 94 84 1b 	call	0x3708	; 0x3708 <__fixsfsi>
    2e76:	9b 01       	movw	r18, r22
    2e78:	ac 01       	movw	r20, r24
    2e7a:	b9 01       	movw	r22, r18
    2e7c:	ca 01       	movw	r24, r20
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	08 95       	ret

00002e88 <_fpadd_parts>:
    2e88:	a0 e0       	ldi	r26, 0x00	; 0
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	ea e4       	ldi	r30, 0x4A	; 74
    2e8e:	f7 e1       	ldi	r31, 0x17	; 23
    2e90:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__prologue_saves__+0x8>
    2e94:	fc 01       	movw	r30, r24
    2e96:	ea 01       	movw	r28, r20
    2e98:	80 81       	ld	r24, Z
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	08 f4       	brcc	.+2      	; 0x2ea0 <_fpadd_parts+0x18>
    2e9e:	38 c1       	rjmp	.+624    	; 0x3110 <_fpadd_parts+0x288>
    2ea0:	db 01       	movw	r26, r22
    2ea2:	9c 91       	ld	r25, X
    2ea4:	92 30       	cpi	r25, 0x02	; 2
    2ea6:	08 f4       	brcc	.+2      	; 0x2eaa <_fpadd_parts+0x22>
    2ea8:	30 c1       	rjmp	.+608    	; 0x310a <_fpadd_parts+0x282>
    2eaa:	84 30       	cpi	r24, 0x04	; 4
    2eac:	59 f4       	brne	.+22     	; 0x2ec4 <_fpadd_parts+0x3c>
    2eae:	94 30       	cpi	r25, 0x04	; 4
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <_fpadd_parts+0x2c>
    2eb2:	2e c1       	rjmp	.+604    	; 0x3110 <_fpadd_parts+0x288>
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	11 96       	adiw	r26, 0x01	; 1
    2eb8:	8c 91       	ld	r24, X
    2eba:	11 97       	sbiw	r26, 0x01	; 1
    2ebc:	98 17       	cp	r25, r24
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <_fpadd_parts+0x3a>
    2ec0:	21 c1       	rjmp	.+578    	; 0x3104 <_fpadd_parts+0x27c>
    2ec2:	26 c1       	rjmp	.+588    	; 0x3110 <_fpadd_parts+0x288>
    2ec4:	94 30       	cpi	r25, 0x04	; 4
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <_fpadd_parts+0x42>
    2ec8:	20 c1       	rjmp	.+576    	; 0x310a <_fpadd_parts+0x282>
    2eca:	92 30       	cpi	r25, 0x02	; 2
    2ecc:	b1 f4       	brne	.+44     	; 0x2efa <_fpadd_parts+0x72>
    2ece:	82 30       	cpi	r24, 0x02	; 2
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <_fpadd_parts+0x4c>
    2ed2:	1e c1       	rjmp	.+572    	; 0x3110 <_fpadd_parts+0x288>
    2ed4:	ca 01       	movw	r24, r20
    2ed6:	af 01       	movw	r20, r30
    2ed8:	28 e0       	ldi	r18, 0x08	; 8
    2eda:	da 01       	movw	r26, r20
    2edc:	0d 90       	ld	r0, X+
    2ede:	ad 01       	movw	r20, r26
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	0d 92       	st	X+, r0
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	21 50       	subi	r18, 0x01	; 1
    2ee8:	c1 f7       	brne	.-16     	; 0x2eda <_fpadd_parts+0x52>
    2eea:	db 01       	movw	r26, r22
    2eec:	11 96       	adiw	r26, 0x01	; 1
    2eee:	8c 91       	ld	r24, X
    2ef0:	11 97       	sbiw	r26, 0x01	; 1
    2ef2:	91 81       	ldd	r25, Z+1	; 0x01
    2ef4:	89 23       	and	r24, r25
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    2ef8:	0a c1       	rjmp	.+532    	; 0x310e <_fpadd_parts+0x286>
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <_fpadd_parts+0x78>
    2efe:	05 c1       	rjmp	.+522    	; 0x310a <_fpadd_parts+0x282>
    2f00:	c2 80       	ldd	r12, Z+2	; 0x02
    2f02:	d3 80       	ldd	r13, Z+3	; 0x03
    2f04:	db 01       	movw	r26, r22
    2f06:	12 96       	adiw	r26, 0x02	; 2
    2f08:	6d 90       	ld	r6, X+
    2f0a:	7c 90       	ld	r7, X
    2f0c:	13 97       	sbiw	r26, 0x03	; 3
    2f0e:	24 81       	ldd	r18, Z+4	; 0x04
    2f10:	35 81       	ldd	r19, Z+5	; 0x05
    2f12:	46 81       	ldd	r20, Z+6	; 0x06
    2f14:	57 81       	ldd	r21, Z+7	; 0x07
    2f16:	14 96       	adiw	r26, 0x04	; 4
    2f18:	ed 90       	ld	r14, X+
    2f1a:	fd 90       	ld	r15, X+
    2f1c:	0d 91       	ld	r16, X+
    2f1e:	1c 91       	ld	r17, X
    2f20:	17 97       	sbiw	r26, 0x07	; 7
    2f22:	c6 01       	movw	r24, r12
    2f24:	86 19       	sub	r24, r6
    2f26:	97 09       	sbc	r25, r7
    2f28:	5c 01       	movw	r10, r24
    2f2a:	97 ff       	sbrs	r25, 7
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <_fpadd_parts+0xae>
    2f2e:	aa 24       	eor	r10, r10
    2f30:	bb 24       	eor	r11, r11
    2f32:	a8 1a       	sub	r10, r24
    2f34:	b9 0a       	sbc	r11, r25
    2f36:	b0 e2       	ldi	r27, 0x20	; 32
    2f38:	ab 16       	cp	r10, r27
    2f3a:	b1 04       	cpc	r11, r1
    2f3c:	0c f0       	brlt	.+2      	; 0x2f40 <_fpadd_parts+0xb8>
    2f3e:	61 c0       	rjmp	.+194    	; 0x3002 <_fpadd_parts+0x17a>
    2f40:	18 16       	cp	r1, r24
    2f42:	19 06       	cpc	r1, r25
    2f44:	6c f5       	brge	.+90     	; 0x2fa0 <_fpadd_parts+0x118>
    2f46:	37 01       	movw	r6, r14
    2f48:	48 01       	movw	r8, r16
    2f4a:	0a 2c       	mov	r0, r10
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <_fpadd_parts+0xce>
    2f4e:	96 94       	lsr	r9
    2f50:	87 94       	ror	r8
    2f52:	77 94       	ror	r7
    2f54:	67 94       	ror	r6
    2f56:	0a 94       	dec	r0
    2f58:	d2 f7       	brpl	.-12     	; 0x2f4e <_fpadd_parts+0xc6>
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	a0 e0       	ldi	r26, 0x00	; 0
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	0a 2c       	mov	r0, r10
    2f64:	04 c0       	rjmp	.+8      	; 0x2f6e <_fpadd_parts+0xe6>
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	aa 1f       	adc	r26, r26
    2f6c:	bb 1f       	adc	r27, r27
    2f6e:	0a 94       	dec	r0
    2f70:	d2 f7       	brpl	.-12     	; 0x2f66 <_fpadd_parts+0xde>
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	a1 09       	sbc	r26, r1
    2f76:	b1 09       	sbc	r27, r1
    2f78:	8e 21       	and	r24, r14
    2f7a:	9f 21       	and	r25, r15
    2f7c:	a0 23       	and	r26, r16
    2f7e:	b1 23       	and	r27, r17
    2f80:	ee 24       	eor	r14, r14
    2f82:	ff 24       	eor	r15, r15
    2f84:	87 01       	movw	r16, r14
    2f86:	e3 94       	inc	r14
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	a1 05       	cpc	r26, r1
    2f8c:	b1 05       	cpc	r27, r1
    2f8e:	19 f4       	brne	.+6      	; 0x2f96 <_fpadd_parts+0x10e>
    2f90:	ee 24       	eor	r14, r14
    2f92:	ff 24       	eor	r15, r15
    2f94:	87 01       	movw	r16, r14
    2f96:	e6 28       	or	r14, r6
    2f98:	f7 28       	or	r15, r7
    2f9a:	08 29       	or	r16, r8
    2f9c:	19 29       	or	r17, r9
    2f9e:	3c c0       	rjmp	.+120    	; 0x3018 <_fpadd_parts+0x190>
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	d1 f1       	breq	.+116    	; 0x3018 <_fpadd_parts+0x190>
    2fa4:	ca 0c       	add	r12, r10
    2fa6:	db 1c       	adc	r13, r11
    2fa8:	39 01       	movw	r6, r18
    2faa:	4a 01       	movw	r8, r20
    2fac:	0a 2c       	mov	r0, r10
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <_fpadd_parts+0x130>
    2fb0:	96 94       	lsr	r9
    2fb2:	87 94       	ror	r8
    2fb4:	77 94       	ror	r7
    2fb6:	67 94       	ror	r6
    2fb8:	0a 94       	dec	r0
    2fba:	d2 f7       	brpl	.-12     	; 0x2fb0 <_fpadd_parts+0x128>
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a0 e0       	ldi	r26, 0x00	; 0
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	0a 2c       	mov	r0, r10
    2fc6:	04 c0       	rjmp	.+8      	; 0x2fd0 <_fpadd_parts+0x148>
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	aa 1f       	adc	r26, r26
    2fce:	bb 1f       	adc	r27, r27
    2fd0:	0a 94       	dec	r0
    2fd2:	d2 f7       	brpl	.-12     	; 0x2fc8 <_fpadd_parts+0x140>
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	a1 09       	sbc	r26, r1
    2fd8:	b1 09       	sbc	r27, r1
    2fda:	82 23       	and	r24, r18
    2fdc:	93 23       	and	r25, r19
    2fde:	a4 23       	and	r26, r20
    2fe0:	b5 23       	and	r27, r21
    2fe2:	21 e0       	ldi	r18, 0x01	; 1
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	a1 05       	cpc	r26, r1
    2fee:	b1 05       	cpc	r27, r1
    2ff0:	19 f4       	brne	.+6      	; 0x2ff8 <_fpadd_parts+0x170>
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	a9 01       	movw	r20, r18
    2ff8:	26 29       	or	r18, r6
    2ffa:	37 29       	or	r19, r7
    2ffc:	48 29       	or	r20, r8
    2ffe:	59 29       	or	r21, r9
    3000:	0b c0       	rjmp	.+22     	; 0x3018 <_fpadd_parts+0x190>
    3002:	6c 14       	cp	r6, r12
    3004:	7d 04       	cpc	r7, r13
    3006:	24 f4       	brge	.+8      	; 0x3010 <_fpadd_parts+0x188>
    3008:	ee 24       	eor	r14, r14
    300a:	ff 24       	eor	r15, r15
    300c:	87 01       	movw	r16, r14
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <_fpadd_parts+0x190>
    3010:	63 01       	movw	r12, r6
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	a9 01       	movw	r20, r18
    3018:	81 81       	ldd	r24, Z+1	; 0x01
    301a:	fb 01       	movw	r30, r22
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	89 17       	cp	r24, r25
    3020:	09 f4       	brne	.+2      	; 0x3024 <_fpadd_parts+0x19c>
    3022:	45 c0       	rjmp	.+138    	; 0x30ae <_fpadd_parts+0x226>
    3024:	88 23       	and	r24, r24
    3026:	49 f0       	breq	.+18     	; 0x303a <_fpadd_parts+0x1b2>
    3028:	d8 01       	movw	r26, r16
    302a:	c7 01       	movw	r24, r14
    302c:	82 1b       	sub	r24, r18
    302e:	93 0b       	sbc	r25, r19
    3030:	a4 0b       	sbc	r26, r20
    3032:	b5 0b       	sbc	r27, r21
    3034:	9c 01       	movw	r18, r24
    3036:	ad 01       	movw	r20, r26
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <_fpadd_parts+0x1ba>
    303a:	2e 19       	sub	r18, r14
    303c:	3f 09       	sbc	r19, r15
    303e:	40 0b       	sbc	r20, r16
    3040:	51 0b       	sbc	r21, r17
    3042:	57 fd       	sbrc	r21, 7
    3044:	04 c0       	rjmp	.+8      	; 0x304e <_fpadd_parts+0x1c6>
    3046:	19 82       	std	Y+1, r1	; 0x01
    3048:	db 82       	std	Y+3, r13	; 0x03
    304a:	ca 82       	std	Y+2, r12	; 0x02
    304c:	0b c0       	rjmp	.+22     	; 0x3064 <_fpadd_parts+0x1dc>
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	db 82       	std	Y+3, r13	; 0x03
    3054:	ca 82       	std	Y+2, r12	; 0x02
    3056:	50 95       	com	r21
    3058:	40 95       	com	r20
    305a:	30 95       	com	r19
    305c:	21 95       	neg	r18
    305e:	3f 4f       	sbci	r19, 0xFF	; 255
    3060:	4f 4f       	sbci	r20, 0xFF	; 255
    3062:	5f 4f       	sbci	r21, 0xFF	; 255
    3064:	2c 83       	std	Y+4, r18	; 0x04
    3066:	3d 83       	std	Y+5, r19	; 0x05
    3068:	4e 83       	std	Y+6, r20	; 0x06
    306a:	5f 83       	std	Y+7, r21	; 0x07
    306c:	0d c0       	rjmp	.+26     	; 0x3088 <_fpadd_parts+0x200>
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	aa 1f       	adc	r26, r26
    3074:	bb 1f       	adc	r27, r27
    3076:	8c 83       	std	Y+4, r24	; 0x04
    3078:	9d 83       	std	Y+5, r25	; 0x05
    307a:	ae 83       	std	Y+6, r26	; 0x06
    307c:	bf 83       	std	Y+7, r27	; 0x07
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	9b 83       	std	Y+3, r25	; 0x03
    3086:	8a 83       	std	Y+2, r24	; 0x02
    3088:	8c 81       	ldd	r24, Y+4	; 0x04
    308a:	9d 81       	ldd	r25, Y+5	; 0x05
    308c:	ae 81       	ldd	r26, Y+6	; 0x06
    308e:	bf 81       	ldd	r27, Y+7	; 0x07
    3090:	9c 01       	movw	r18, r24
    3092:	ad 01       	movw	r20, r26
    3094:	21 50       	subi	r18, 0x01	; 1
    3096:	30 40       	sbci	r19, 0x00	; 0
    3098:	40 40       	sbci	r20, 0x00	; 0
    309a:	50 40       	sbci	r21, 0x00	; 0
    309c:	2f 3f       	cpi	r18, 0xFF	; 255
    309e:	ef ef       	ldi	r30, 0xFF	; 255
    30a0:	3e 07       	cpc	r19, r30
    30a2:	ef ef       	ldi	r30, 0xFF	; 255
    30a4:	4e 07       	cpc	r20, r30
    30a6:	ef e3       	ldi	r30, 0x3F	; 63
    30a8:	5e 07       	cpc	r21, r30
    30aa:	08 f3       	brcs	.-62     	; 0x306e <_fpadd_parts+0x1e6>
    30ac:	0b c0       	rjmp	.+22     	; 0x30c4 <_fpadd_parts+0x23c>
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	db 82       	std	Y+3, r13	; 0x03
    30b2:	ca 82       	std	Y+2, r12	; 0x02
    30b4:	2e 0d       	add	r18, r14
    30b6:	3f 1d       	adc	r19, r15
    30b8:	40 1f       	adc	r20, r16
    30ba:	51 1f       	adc	r21, r17
    30bc:	2c 83       	std	Y+4, r18	; 0x04
    30be:	3d 83       	std	Y+5, r19	; 0x05
    30c0:	4e 83       	std	Y+6, r20	; 0x06
    30c2:	5f 83       	std	Y+7, r21	; 0x07
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	88 83       	st	Y, r24
    30c8:	2c 81       	ldd	r18, Y+4	; 0x04
    30ca:	3d 81       	ldd	r19, Y+5	; 0x05
    30cc:	4e 81       	ldd	r20, Y+6	; 0x06
    30ce:	5f 81       	ldd	r21, Y+7	; 0x07
    30d0:	57 ff       	sbrs	r21, 7
    30d2:	1d c0       	rjmp	.+58     	; 0x310e <_fpadd_parts+0x286>
    30d4:	da 01       	movw	r26, r20
    30d6:	c9 01       	movw	r24, r18
    30d8:	81 70       	andi	r24, 0x01	; 1
    30da:	90 70       	andi	r25, 0x00	; 0
    30dc:	a0 70       	andi	r26, 0x00	; 0
    30de:	b0 70       	andi	r27, 0x00	; 0
    30e0:	56 95       	lsr	r21
    30e2:	47 95       	ror	r20
    30e4:	37 95       	ror	r19
    30e6:	27 95       	ror	r18
    30e8:	82 2b       	or	r24, r18
    30ea:	93 2b       	or	r25, r19
    30ec:	a4 2b       	or	r26, r20
    30ee:	b5 2b       	or	r27, r21
    30f0:	8c 83       	std	Y+4, r24	; 0x04
    30f2:	9d 83       	std	Y+5, r25	; 0x05
    30f4:	ae 83       	std	Y+6, r26	; 0x06
    30f6:	bf 83       	std	Y+7, r27	; 0x07
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
    30fa:	9b 81       	ldd	r25, Y+3	; 0x03
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	9b 83       	std	Y+3, r25	; 0x03
    3100:	8a 83       	std	Y+2, r24	; 0x02
    3102:	05 c0       	rjmp	.+10     	; 0x310e <_fpadd_parts+0x286>
    3104:	ef e2       	ldi	r30, 0x2F	; 47
    3106:	f1 e0       	ldi	r31, 0x01	; 1
    3108:	03 c0       	rjmp	.+6      	; 0x3110 <_fpadd_parts+0x288>
    310a:	fb 01       	movw	r30, r22
    310c:	01 c0       	rjmp	.+2      	; 0x3110 <_fpadd_parts+0x288>
    310e:	fe 01       	movw	r30, r28
    3110:	cf 01       	movw	r24, r30
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	ee e0       	ldi	r30, 0x0E	; 14
    3118:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__epilogue_restores__+0x8>

0000311c <__addsf3>:
    311c:	a0 e2       	ldi	r26, 0x20	; 32
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e4 e9       	ldi	r30, 0x94	; 148
    3122:	f8 e1       	ldi	r31, 0x18	; 24
    3124:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
    3128:	69 83       	std	Y+1, r22	; 0x01
    312a:	7a 83       	std	Y+2, r23	; 0x02
    312c:	8b 83       	std	Y+3, r24	; 0x03
    312e:	9c 83       	std	Y+4, r25	; 0x04
    3130:	2d 83       	std	Y+5, r18	; 0x05
    3132:	3e 83       	std	Y+6, r19	; 0x06
    3134:	4f 83       	std	Y+7, r20	; 0x07
    3136:	58 87       	std	Y+8, r21	; 0x08
    3138:	89 e0       	ldi	r24, 0x09	; 9
    313a:	e8 2e       	mov	r14, r24
    313c:	f1 2c       	mov	r15, r1
    313e:	ec 0e       	add	r14, r28
    3140:	fd 1e       	adc	r15, r29
    3142:	ce 01       	movw	r24, r28
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	b7 01       	movw	r22, r14
    3148:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    314c:	8e 01       	movw	r16, r28
    314e:	0f 5e       	subi	r16, 0xEF	; 239
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	ce 01       	movw	r24, r28
    3154:	05 96       	adiw	r24, 0x05	; 5
    3156:	b8 01       	movw	r22, r16
    3158:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    315c:	c7 01       	movw	r24, r14
    315e:	b8 01       	movw	r22, r16
    3160:	ae 01       	movw	r20, r28
    3162:	47 5e       	subi	r20, 0xE7	; 231
    3164:	5f 4f       	sbci	r21, 0xFF	; 255
    3166:	0e 94 44 17 	call	0x2e88	; 0x2e88 <_fpadd_parts>
    316a:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__pack_f>
    316e:	a0 96       	adiw	r28, 0x20	; 32
    3170:	e6 e0       	ldi	r30, 0x06	; 6
    3172:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

00003176 <__subsf3>:
    3176:	a0 e2       	ldi	r26, 0x20	; 32
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e1 ec       	ldi	r30, 0xC1	; 193
    317c:	f8 e1       	ldi	r31, 0x18	; 24
    317e:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
    3182:	69 83       	std	Y+1, r22	; 0x01
    3184:	7a 83       	std	Y+2, r23	; 0x02
    3186:	8b 83       	std	Y+3, r24	; 0x03
    3188:	9c 83       	std	Y+4, r25	; 0x04
    318a:	2d 83       	std	Y+5, r18	; 0x05
    318c:	3e 83       	std	Y+6, r19	; 0x06
    318e:	4f 83       	std	Y+7, r20	; 0x07
    3190:	58 87       	std	Y+8, r21	; 0x08
    3192:	8e 01       	movw	r16, r28
    3194:	07 5f       	subi	r16, 0xF7	; 247
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	ce 01       	movw	r24, r28
    319a:	01 96       	adiw	r24, 0x01	; 1
    319c:	b8 01       	movw	r22, r16
    319e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    31a2:	91 e1       	ldi	r25, 0x11	; 17
    31a4:	e9 2e       	mov	r14, r25
    31a6:	f1 2c       	mov	r15, r1
    31a8:	ec 0e       	add	r14, r28
    31aa:	fd 1e       	adc	r15, r29
    31ac:	ce 01       	movw	r24, r28
    31ae:	05 96       	adiw	r24, 0x05	; 5
    31b0:	b7 01       	movw	r22, r14
    31b2:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    31b6:	8a 89       	ldd	r24, Y+18	; 0x12
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	89 27       	eor	r24, r25
    31bc:	8a 8b       	std	Y+18, r24	; 0x12
    31be:	c8 01       	movw	r24, r16
    31c0:	b7 01       	movw	r22, r14
    31c2:	ae 01       	movw	r20, r28
    31c4:	47 5e       	subi	r20, 0xE7	; 231
    31c6:	5f 4f       	sbci	r21, 0xFF	; 255
    31c8:	0e 94 44 17 	call	0x2e88	; 0x2e88 <_fpadd_parts>
    31cc:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__pack_f>
    31d0:	a0 96       	adiw	r28, 0x20	; 32
    31d2:	e6 e0       	ldi	r30, 0x06	; 6
    31d4:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

000031d8 <__mulsf3>:
    31d8:	a0 e2       	ldi	r26, 0x20	; 32
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	e2 ef       	ldi	r30, 0xF2	; 242
    31de:	f8 e1       	ldi	r31, 0x18	; 24
    31e0:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__prologue_saves__>
    31e4:	69 83       	std	Y+1, r22	; 0x01
    31e6:	7a 83       	std	Y+2, r23	; 0x02
    31e8:	8b 83       	std	Y+3, r24	; 0x03
    31ea:	9c 83       	std	Y+4, r25	; 0x04
    31ec:	2d 83       	std	Y+5, r18	; 0x05
    31ee:	3e 83       	std	Y+6, r19	; 0x06
    31f0:	4f 83       	std	Y+7, r20	; 0x07
    31f2:	58 87       	std	Y+8, r21	; 0x08
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	be 01       	movw	r22, r28
    31fa:	67 5f       	subi	r22, 0xF7	; 247
    31fc:	7f 4f       	sbci	r23, 0xFF	; 255
    31fe:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    3202:	ce 01       	movw	r24, r28
    3204:	05 96       	adiw	r24, 0x05	; 5
    3206:	be 01       	movw	r22, r28
    3208:	6f 5e       	subi	r22, 0xEF	; 239
    320a:	7f 4f       	sbci	r23, 0xFF	; 255
    320c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    3210:	99 85       	ldd	r25, Y+9	; 0x09
    3212:	92 30       	cpi	r25, 0x02	; 2
    3214:	78 f0       	brcs	.+30     	; 0x3234 <__mulsf3+0x5c>
    3216:	89 89       	ldd	r24, Y+17	; 0x11
    3218:	82 30       	cpi	r24, 0x02	; 2
    321a:	c0 f0       	brcs	.+48     	; 0x324c <__mulsf3+0x74>
    321c:	94 30       	cpi	r25, 0x04	; 4
    321e:	19 f4       	brne	.+6      	; 0x3226 <__mulsf3+0x4e>
    3220:	82 30       	cpi	r24, 0x02	; 2
    3222:	41 f4       	brne	.+16     	; 0x3234 <__mulsf3+0x5c>
    3224:	cb c0       	rjmp	.+406    	; 0x33bc <__mulsf3+0x1e4>
    3226:	84 30       	cpi	r24, 0x04	; 4
    3228:	19 f4       	brne	.+6      	; 0x3230 <__mulsf3+0x58>
    322a:	92 30       	cpi	r25, 0x02	; 2
    322c:	79 f4       	brne	.+30     	; 0x324c <__mulsf3+0x74>
    322e:	c6 c0       	rjmp	.+396    	; 0x33bc <__mulsf3+0x1e4>
    3230:	92 30       	cpi	r25, 0x02	; 2
    3232:	51 f4       	brne	.+20     	; 0x3248 <__mulsf3+0x70>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	2a 85       	ldd	r18, Y+10	; 0x0a
    3238:	9a 89       	ldd	r25, Y+18	; 0x12
    323a:	29 17       	cp	r18, r25
    323c:	09 f4       	brne	.+2      	; 0x3240 <__mulsf3+0x68>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	8a 87       	std	Y+10, r24	; 0x0a
    3242:	ce 01       	movw	r24, r28
    3244:	09 96       	adiw	r24, 0x09	; 9
    3246:	bc c0       	rjmp	.+376    	; 0x33c0 <__mulsf3+0x1e8>
    3248:	82 30       	cpi	r24, 0x02	; 2
    324a:	51 f4       	brne	.+20     	; 0x3260 <__mulsf3+0x88>
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3250:	9a 89       	ldd	r25, Y+18	; 0x12
    3252:	29 17       	cp	r18, r25
    3254:	09 f4       	brne	.+2      	; 0x3258 <__mulsf3+0x80>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	8a 8b       	std	Y+18, r24	; 0x12
    325a:	ce 01       	movw	r24, r28
    325c:	41 96       	adiw	r24, 0x11	; 17
    325e:	b0 c0       	rjmp	.+352    	; 0x33c0 <__mulsf3+0x1e8>
    3260:	6d 84       	ldd	r6, Y+13	; 0x0d
    3262:	7e 84       	ldd	r7, Y+14	; 0x0e
    3264:	8f 84       	ldd	r8, Y+15	; 0x0f
    3266:	98 88       	ldd	r9, Y+16	; 0x10
    3268:	ed 88       	ldd	r14, Y+21	; 0x15
    326a:	fe 88       	ldd	r15, Y+22	; 0x16
    326c:	0f 89       	ldd	r16, Y+23	; 0x17
    326e:	18 8d       	ldd	r17, Y+24	; 0x18
    3270:	e0 e2       	ldi	r30, 0x20	; 32
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	dc 01       	movw	r26, r24
    327a:	aa 24       	eor	r10, r10
    327c:	bb 24       	eor	r11, r11
    327e:	65 01       	movw	r12, r10
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	a9 01       	movw	r20, r18
    3286:	b3 01       	movw	r22, r6
    3288:	61 70       	andi	r22, 0x01	; 1
    328a:	70 70       	andi	r23, 0x00	; 0
    328c:	61 15       	cp	r22, r1
    328e:	71 05       	cpc	r23, r1
    3290:	d1 f0       	breq	.+52     	; 0x32c6 <__mulsf3+0xee>
    3292:	2e 0d       	add	r18, r14
    3294:	3f 1d       	adc	r19, r15
    3296:	40 1f       	adc	r20, r16
    3298:	51 1f       	adc	r21, r17
    329a:	15 01       	movw	r2, r10
    329c:	26 01       	movw	r4, r12
    329e:	28 0e       	add	r2, r24
    32a0:	39 1e       	adc	r3, r25
    32a2:	4a 1e       	adc	r4, r26
    32a4:	5b 1e       	adc	r5, r27
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a0 e0       	ldi	r26, 0x00	; 0
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	2e 15       	cp	r18, r14
    32b0:	3f 05       	cpc	r19, r15
    32b2:	40 07       	cpc	r20, r16
    32b4:	51 07       	cpc	r21, r17
    32b6:	18 f0       	brcs	.+6      	; 0x32be <__mulsf3+0xe6>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	dc 01       	movw	r26, r24
    32be:	82 0d       	add	r24, r2
    32c0:	93 1d       	adc	r25, r3
    32c2:	a4 1d       	adc	r26, r4
    32c4:	b5 1d       	adc	r27, r5
    32c6:	aa 0c       	add	r10, r10
    32c8:	bb 1c       	adc	r11, r11
    32ca:	cc 1c       	adc	r12, r12
    32cc:	dd 1c       	adc	r13, r13
    32ce:	17 ff       	sbrs	r17, 7
    32d0:	09 c0       	rjmp	.+18     	; 0x32e4 <__mulsf3+0x10c>
    32d2:	61 e0       	ldi	r22, 0x01	; 1
    32d4:	26 2e       	mov	r2, r22
    32d6:	31 2c       	mov	r3, r1
    32d8:	41 2c       	mov	r4, r1
    32da:	51 2c       	mov	r5, r1
    32dc:	a2 28       	or	r10, r2
    32de:	b3 28       	or	r11, r3
    32e0:	c4 28       	or	r12, r4
    32e2:	d5 28       	or	r13, r5
    32e4:	31 97       	sbiw	r30, 0x01	; 1
    32e6:	49 f0       	breq	.+18     	; 0x32fa <__mulsf3+0x122>
    32e8:	ee 0c       	add	r14, r14
    32ea:	ff 1c       	adc	r15, r15
    32ec:	00 1f       	adc	r16, r16
    32ee:	11 1f       	adc	r17, r17
    32f0:	96 94       	lsr	r9
    32f2:	87 94       	ror	r8
    32f4:	77 94       	ror	r7
    32f6:	67 94       	ror	r6
    32f8:	c6 cf       	rjmp	.-116    	; 0x3286 <__mulsf3+0xae>
    32fa:	6b 89       	ldd	r22, Y+19	; 0x13
    32fc:	7c 89       	ldd	r23, Y+20	; 0x14
    32fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    3300:	fc 85       	ldd	r31, Y+12	; 0x0c
    3302:	6e 0f       	add	r22, r30
    3304:	7f 1f       	adc	r23, r31
    3306:	6e 5f       	subi	r22, 0xFE	; 254
    3308:	7f 4f       	sbci	r23, 0xFF	; 255
    330a:	7c 8f       	std	Y+28, r23	; 0x1c
    330c:	6b 8f       	std	Y+27, r22	; 0x1b
    330e:	61 e0       	ldi	r22, 0x01	; 1
    3310:	ea 85       	ldd	r30, Y+10	; 0x0a
    3312:	7a 89       	ldd	r23, Y+18	; 0x12
    3314:	e7 17       	cp	r30, r23
    3316:	09 f4       	brne	.+2      	; 0x331a <__mulsf3+0x142>
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	6a 8f       	std	Y+26, r22	; 0x1a
    331c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    331e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3320:	10 c0       	rjmp	.+32     	; 0x3342 <__mulsf3+0x16a>
    3322:	fc 01       	movw	r30, r24
    3324:	e1 70       	andi	r30, 0x01	; 1
    3326:	f0 70       	andi	r31, 0x00	; 0
    3328:	30 97       	sbiw	r30, 0x00	; 0
    332a:	29 f0       	breq	.+10     	; 0x3336 <__mulsf3+0x15e>
    332c:	56 95       	lsr	r21
    332e:	47 95       	ror	r20
    3330:	37 95       	ror	r19
    3332:	27 95       	ror	r18
    3334:	50 68       	ori	r21, 0x80	; 128
    3336:	b6 95       	lsr	r27
    3338:	a7 95       	ror	r26
    333a:	97 95       	ror	r25
    333c:	87 95       	ror	r24
    333e:	6f 5f       	subi	r22, 0xFF	; 255
    3340:	7f 4f       	sbci	r23, 0xFF	; 255
    3342:	b7 fd       	sbrc	r27, 7
    3344:	ee cf       	rjmp	.-36     	; 0x3322 <__mulsf3+0x14a>
    3346:	0c c0       	rjmp	.+24     	; 0x3360 <__mulsf3+0x188>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	aa 1f       	adc	r26, r26
    334e:	bb 1f       	adc	r27, r27
    3350:	57 fd       	sbrc	r21, 7
    3352:	81 60       	ori	r24, 0x01	; 1
    3354:	22 0f       	add	r18, r18
    3356:	33 1f       	adc	r19, r19
    3358:	44 1f       	adc	r20, r20
    335a:	55 1f       	adc	r21, r21
    335c:	61 50       	subi	r22, 0x01	; 1
    335e:	70 40       	sbci	r23, 0x00	; 0
    3360:	80 30       	cpi	r24, 0x00	; 0
    3362:	e0 e0       	ldi	r30, 0x00	; 0
    3364:	9e 07       	cpc	r25, r30
    3366:	e0 e0       	ldi	r30, 0x00	; 0
    3368:	ae 07       	cpc	r26, r30
    336a:	e0 e4       	ldi	r30, 0x40	; 64
    336c:	be 07       	cpc	r27, r30
    336e:	60 f3       	brcs	.-40     	; 0x3348 <__mulsf3+0x170>
    3370:	6b 8f       	std	Y+27, r22	; 0x1b
    3372:	7c 8f       	std	Y+28, r23	; 0x1c
    3374:	6f e7       	ldi	r22, 0x7F	; 127
    3376:	e6 2e       	mov	r14, r22
    3378:	f1 2c       	mov	r15, r1
    337a:	01 2d       	mov	r16, r1
    337c:	11 2d       	mov	r17, r1
    337e:	e8 22       	and	r14, r24
    3380:	f9 22       	and	r15, r25
    3382:	0a 23       	and	r16, r26
    3384:	1b 23       	and	r17, r27
    3386:	60 e4       	ldi	r22, 0x40	; 64
    3388:	e6 16       	cp	r14, r22
    338a:	f1 04       	cpc	r15, r1
    338c:	01 05       	cpc	r16, r1
    338e:	11 05       	cpc	r17, r1
    3390:	61 f4       	brne	.+24     	; 0x33aa <__mulsf3+0x1d2>
    3392:	87 fd       	sbrc	r24, 7
    3394:	0a c0       	rjmp	.+20     	; 0x33aa <__mulsf3+0x1d2>
    3396:	21 15       	cp	r18, r1
    3398:	31 05       	cpc	r19, r1
    339a:	41 05       	cpc	r20, r1
    339c:	51 05       	cpc	r21, r1
    339e:	29 f0       	breq	.+10     	; 0x33aa <__mulsf3+0x1d2>
    33a0:	80 5c       	subi	r24, 0xC0	; 192
    33a2:	9f 4f       	sbci	r25, 0xFF	; 255
    33a4:	af 4f       	sbci	r26, 0xFF	; 255
    33a6:	bf 4f       	sbci	r27, 0xFF	; 255
    33a8:	80 78       	andi	r24, 0x80	; 128
    33aa:	8d 8f       	std	Y+29, r24	; 0x1d
    33ac:	9e 8f       	std	Y+30, r25	; 0x1e
    33ae:	af 8f       	std	Y+31, r26	; 0x1f
    33b0:	b8 a3       	std	Y+32, r27	; 0x20
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	89 8f       	std	Y+25, r24	; 0x19
    33b6:	ce 01       	movw	r24, r28
    33b8:	49 96       	adiw	r24, 0x19	; 25
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <__mulsf3+0x1e8>
    33bc:	8f e2       	ldi	r24, 0x2F	; 47
    33be:	91 e0       	ldi	r25, 0x01	; 1
    33c0:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__pack_f>
    33c4:	a0 96       	adiw	r28, 0x20	; 32
    33c6:	e2 e1       	ldi	r30, 0x12	; 18
    33c8:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__epilogue_restores__>

000033cc <__divsf3>:
    33cc:	a8 e1       	ldi	r26, 0x18	; 24
    33ce:	b0 e0       	ldi	r27, 0x00	; 0
    33d0:	ec ee       	ldi	r30, 0xEC	; 236
    33d2:	f9 e1       	ldi	r31, 0x19	; 25
    33d4:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <__prologue_saves__+0x10>
    33d8:	69 83       	std	Y+1, r22	; 0x01
    33da:	7a 83       	std	Y+2, r23	; 0x02
    33dc:	8b 83       	std	Y+3, r24	; 0x03
    33de:	9c 83       	std	Y+4, r25	; 0x04
    33e0:	2d 83       	std	Y+5, r18	; 0x05
    33e2:	3e 83       	std	Y+6, r19	; 0x06
    33e4:	4f 83       	std	Y+7, r20	; 0x07
    33e6:	58 87       	std	Y+8, r21	; 0x08
    33e8:	8e 01       	movw	r16, r28
    33ea:	07 5f       	subi	r16, 0xF7	; 247
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	ce 01       	movw	r24, r28
    33f0:	01 96       	adiw	r24, 0x01	; 1
    33f2:	b8 01       	movw	r22, r16
    33f4:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    33f8:	81 e1       	ldi	r24, 0x11	; 17
    33fa:	e8 2e       	mov	r14, r24
    33fc:	f1 2c       	mov	r15, r1
    33fe:	ec 0e       	add	r14, r28
    3400:	fd 1e       	adc	r15, r29
    3402:	ce 01       	movw	r24, r28
    3404:	05 96       	adiw	r24, 0x05	; 5
    3406:	b7 01       	movw	r22, r14
    3408:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    340c:	99 85       	ldd	r25, Y+9	; 0x09
    340e:	92 30       	cpi	r25, 0x02	; 2
    3410:	08 f4       	brcc	.+2      	; 0x3414 <__divsf3+0x48>
    3412:	83 c0       	rjmp	.+262    	; 0x351a <__divsf3+0x14e>
    3414:	89 89       	ldd	r24, Y+17	; 0x11
    3416:	82 30       	cpi	r24, 0x02	; 2
    3418:	08 f4       	brcc	.+2      	; 0x341c <__divsf3+0x50>
    341a:	7b c0       	rjmp	.+246    	; 0x3512 <__divsf3+0x146>
    341c:	2a 85       	ldd	r18, Y+10	; 0x0a
    341e:	3a 89       	ldd	r19, Y+18	; 0x12
    3420:	23 27       	eor	r18, r19
    3422:	2a 87       	std	Y+10, r18	; 0x0a
    3424:	94 30       	cpi	r25, 0x04	; 4
    3426:	11 f0       	breq	.+4      	; 0x342c <__divsf3+0x60>
    3428:	92 30       	cpi	r25, 0x02	; 2
    342a:	21 f4       	brne	.+8      	; 0x3434 <__divsf3+0x68>
    342c:	98 17       	cp	r25, r24
    342e:	09 f0       	breq	.+2      	; 0x3432 <__divsf3+0x66>
    3430:	6c c0       	rjmp	.+216    	; 0x350a <__divsf3+0x13e>
    3432:	71 c0       	rjmp	.+226    	; 0x3516 <__divsf3+0x14a>
    3434:	84 30       	cpi	r24, 0x04	; 4
    3436:	39 f4       	brne	.+14     	; 0x3446 <__divsf3+0x7a>
    3438:	1d 86       	std	Y+13, r1	; 0x0d
    343a:	1e 86       	std	Y+14, r1	; 0x0e
    343c:	1f 86       	std	Y+15, r1	; 0x0f
    343e:	18 8a       	std	Y+16, r1	; 0x10
    3440:	1c 86       	std	Y+12, r1	; 0x0c
    3442:	1b 86       	std	Y+11, r1	; 0x0b
    3444:	6a c0       	rjmp	.+212    	; 0x351a <__divsf3+0x14e>
    3446:	82 30       	cpi	r24, 0x02	; 2
    3448:	19 f4       	brne	.+6      	; 0x3450 <__divsf3+0x84>
    344a:	84 e0       	ldi	r24, 0x04	; 4
    344c:	89 87       	std	Y+9, r24	; 0x09
    344e:	65 c0       	rjmp	.+202    	; 0x351a <__divsf3+0x14e>
    3450:	8b 85       	ldd	r24, Y+11	; 0x0b
    3452:	9c 85       	ldd	r25, Y+12	; 0x0c
    3454:	2b 89       	ldd	r18, Y+19	; 0x13
    3456:	3c 89       	ldd	r19, Y+20	; 0x14
    3458:	82 1b       	sub	r24, r18
    345a:	93 0b       	sbc	r25, r19
    345c:	9c 87       	std	Y+12, r25	; 0x0c
    345e:	8b 87       	std	Y+11, r24	; 0x0b
    3460:	2d 85       	ldd	r18, Y+13	; 0x0d
    3462:	3e 85       	ldd	r19, Y+14	; 0x0e
    3464:	4f 85       	ldd	r20, Y+15	; 0x0f
    3466:	58 89       	ldd	r21, Y+16	; 0x10
    3468:	ed 88       	ldd	r14, Y+21	; 0x15
    346a:	fe 88       	ldd	r15, Y+22	; 0x16
    346c:	0f 89       	ldd	r16, Y+23	; 0x17
    346e:	18 8d       	ldd	r17, Y+24	; 0x18
    3470:	2e 15       	cp	r18, r14
    3472:	3f 05       	cpc	r19, r15
    3474:	40 07       	cpc	r20, r16
    3476:	51 07       	cpc	r21, r17
    3478:	38 f4       	brcc	.+14     	; 0x3488 <__divsf3+0xbc>
    347a:	22 0f       	add	r18, r18
    347c:	33 1f       	adc	r19, r19
    347e:	44 1f       	adc	r20, r20
    3480:	55 1f       	adc	r21, r21
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	9c 87       	std	Y+12, r25	; 0x0c
    3486:	8b 87       	std	Y+11, r24	; 0x0b
    3488:	6f e1       	ldi	r22, 0x1F	; 31
    348a:	70 e0       	ldi	r23, 0x00	; 0
    348c:	a1 2c       	mov	r10, r1
    348e:	b1 2c       	mov	r11, r1
    3490:	c1 2c       	mov	r12, r1
    3492:	a0 e4       	ldi	r26, 0x40	; 64
    3494:	da 2e       	mov	r13, r26
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	dc 01       	movw	r26, r24
    349c:	2e 15       	cp	r18, r14
    349e:	3f 05       	cpc	r19, r15
    34a0:	40 07       	cpc	r20, r16
    34a2:	51 07       	cpc	r21, r17
    34a4:	40 f0       	brcs	.+16     	; 0x34b6 <__divsf3+0xea>
    34a6:	8a 29       	or	r24, r10
    34a8:	9b 29       	or	r25, r11
    34aa:	ac 29       	or	r26, r12
    34ac:	bd 29       	or	r27, r13
    34ae:	2e 19       	sub	r18, r14
    34b0:	3f 09       	sbc	r19, r15
    34b2:	40 0b       	sbc	r20, r16
    34b4:	51 0b       	sbc	r21, r17
    34b6:	d6 94       	lsr	r13
    34b8:	c7 94       	ror	r12
    34ba:	b7 94       	ror	r11
    34bc:	a7 94       	ror	r10
    34be:	22 0f       	add	r18, r18
    34c0:	33 1f       	adc	r19, r19
    34c2:	44 1f       	adc	r20, r20
    34c4:	55 1f       	adc	r21, r21
    34c6:	61 50       	subi	r22, 0x01	; 1
    34c8:	70 40       	sbci	r23, 0x00	; 0
    34ca:	41 f7       	brne	.-48     	; 0x349c <__divsf3+0xd0>
    34cc:	6f e7       	ldi	r22, 0x7F	; 127
    34ce:	e6 2e       	mov	r14, r22
    34d0:	f1 2c       	mov	r15, r1
    34d2:	01 2d       	mov	r16, r1
    34d4:	11 2d       	mov	r17, r1
    34d6:	e8 22       	and	r14, r24
    34d8:	f9 22       	and	r15, r25
    34da:	0a 23       	and	r16, r26
    34dc:	1b 23       	and	r17, r27
    34de:	60 e4       	ldi	r22, 0x40	; 64
    34e0:	e6 16       	cp	r14, r22
    34e2:	f1 04       	cpc	r15, r1
    34e4:	01 05       	cpc	r16, r1
    34e6:	11 05       	cpc	r17, r1
    34e8:	61 f4       	brne	.+24     	; 0x3502 <__divsf3+0x136>
    34ea:	87 fd       	sbrc	r24, 7
    34ec:	0a c0       	rjmp	.+20     	; 0x3502 <__divsf3+0x136>
    34ee:	21 15       	cp	r18, r1
    34f0:	31 05       	cpc	r19, r1
    34f2:	41 05       	cpc	r20, r1
    34f4:	51 05       	cpc	r21, r1
    34f6:	29 f0       	breq	.+10     	; 0x3502 <__divsf3+0x136>
    34f8:	80 5c       	subi	r24, 0xC0	; 192
    34fa:	9f 4f       	sbci	r25, 0xFF	; 255
    34fc:	af 4f       	sbci	r26, 0xFF	; 255
    34fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3500:	80 78       	andi	r24, 0x80	; 128
    3502:	8d 87       	std	Y+13, r24	; 0x0d
    3504:	9e 87       	std	Y+14, r25	; 0x0e
    3506:	af 87       	std	Y+15, r26	; 0x0f
    3508:	b8 8b       	std	Y+16, r27	; 0x10
    350a:	8e 01       	movw	r16, r28
    350c:	07 5f       	subi	r16, 0xF7	; 247
    350e:	1f 4f       	sbci	r17, 0xFF	; 255
    3510:	04 c0       	rjmp	.+8      	; 0x351a <__divsf3+0x14e>
    3512:	87 01       	movw	r16, r14
    3514:	02 c0       	rjmp	.+4      	; 0x351a <__divsf3+0x14e>
    3516:	0f e2       	ldi	r16, 0x2F	; 47
    3518:	11 e0       	ldi	r17, 0x01	; 1
    351a:	c8 01       	movw	r24, r16
    351c:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__pack_f>
    3520:	68 96       	adiw	r28, 0x18	; 24
    3522:	ea e0       	ldi	r30, 0x0A	; 10
    3524:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__epilogue_restores__+0x10>

00003528 <__gtsf2>:
    3528:	a8 e1       	ldi	r26, 0x18	; 24
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	ea e9       	ldi	r30, 0x9A	; 154
    352e:	fa e1       	ldi	r31, 0x1A	; 26
    3530:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
    3534:	69 83       	std	Y+1, r22	; 0x01
    3536:	7a 83       	std	Y+2, r23	; 0x02
    3538:	8b 83       	std	Y+3, r24	; 0x03
    353a:	9c 83       	std	Y+4, r25	; 0x04
    353c:	2d 83       	std	Y+5, r18	; 0x05
    353e:	3e 83       	std	Y+6, r19	; 0x06
    3540:	4f 83       	std	Y+7, r20	; 0x07
    3542:	58 87       	std	Y+8, r21	; 0x08
    3544:	8e 01       	movw	r16, r28
    3546:	07 5f       	subi	r16, 0xF7	; 247
    3548:	1f 4f       	sbci	r17, 0xFF	; 255
    354a:	ce 01       	movw	r24, r28
    354c:	01 96       	adiw	r24, 0x01	; 1
    354e:	b8 01       	movw	r22, r16
    3550:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    3554:	81 e1       	ldi	r24, 0x11	; 17
    3556:	e8 2e       	mov	r14, r24
    3558:	f1 2c       	mov	r15, r1
    355a:	ec 0e       	add	r14, r28
    355c:	fd 1e       	adc	r15, r29
    355e:	ce 01       	movw	r24, r28
    3560:	05 96       	adiw	r24, 0x05	; 5
    3562:	b7 01       	movw	r22, r14
    3564:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	82 30       	cpi	r24, 0x02	; 2
    356c:	40 f0       	brcs	.+16     	; 0x357e <__gtsf2+0x56>
    356e:	89 89       	ldd	r24, Y+17	; 0x11
    3570:	82 30       	cpi	r24, 0x02	; 2
    3572:	28 f0       	brcs	.+10     	; 0x357e <__gtsf2+0x56>
    3574:	c8 01       	movw	r24, r16
    3576:	b7 01       	movw	r22, r14
    3578:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fpcmp_parts_f>
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <__gtsf2+0x58>
    357e:	8f ef       	ldi	r24, 0xFF	; 255
    3580:	68 96       	adiw	r28, 0x18	; 24
    3582:	e6 e0       	ldi	r30, 0x06	; 6
    3584:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

00003588 <__gesf2>:
    3588:	a8 e1       	ldi	r26, 0x18	; 24
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	ea ec       	ldi	r30, 0xCA	; 202
    358e:	fa e1       	ldi	r31, 0x1A	; 26
    3590:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
    3594:	69 83       	std	Y+1, r22	; 0x01
    3596:	7a 83       	std	Y+2, r23	; 0x02
    3598:	8b 83       	std	Y+3, r24	; 0x03
    359a:	9c 83       	std	Y+4, r25	; 0x04
    359c:	2d 83       	std	Y+5, r18	; 0x05
    359e:	3e 83       	std	Y+6, r19	; 0x06
    35a0:	4f 83       	std	Y+7, r20	; 0x07
    35a2:	58 87       	std	Y+8, r21	; 0x08
    35a4:	8e 01       	movw	r16, r28
    35a6:	07 5f       	subi	r16, 0xF7	; 247
    35a8:	1f 4f       	sbci	r17, 0xFF	; 255
    35aa:	ce 01       	movw	r24, r28
    35ac:	01 96       	adiw	r24, 0x01	; 1
    35ae:	b8 01       	movw	r22, r16
    35b0:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    35b4:	81 e1       	ldi	r24, 0x11	; 17
    35b6:	e8 2e       	mov	r14, r24
    35b8:	f1 2c       	mov	r15, r1
    35ba:	ec 0e       	add	r14, r28
    35bc:	fd 1e       	adc	r15, r29
    35be:	ce 01       	movw	r24, r28
    35c0:	05 96       	adiw	r24, 0x05	; 5
    35c2:	b7 01       	movw	r22, r14
    35c4:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	82 30       	cpi	r24, 0x02	; 2
    35cc:	40 f0       	brcs	.+16     	; 0x35de <__gesf2+0x56>
    35ce:	89 89       	ldd	r24, Y+17	; 0x11
    35d0:	82 30       	cpi	r24, 0x02	; 2
    35d2:	28 f0       	brcs	.+10     	; 0x35de <__gesf2+0x56>
    35d4:	c8 01       	movw	r24, r16
    35d6:	b7 01       	movw	r22, r14
    35d8:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fpcmp_parts_f>
    35dc:	01 c0       	rjmp	.+2      	; 0x35e0 <__gesf2+0x58>
    35de:	8f ef       	ldi	r24, 0xFF	; 255
    35e0:	68 96       	adiw	r28, 0x18	; 24
    35e2:	e6 e0       	ldi	r30, 0x06	; 6
    35e4:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

000035e8 <__ltsf2>:
    35e8:	a8 e1       	ldi	r26, 0x18	; 24
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	ea ef       	ldi	r30, 0xFA	; 250
    35ee:	fa e1       	ldi	r31, 0x1A	; 26
    35f0:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
    35f4:	69 83       	std	Y+1, r22	; 0x01
    35f6:	7a 83       	std	Y+2, r23	; 0x02
    35f8:	8b 83       	std	Y+3, r24	; 0x03
    35fa:	9c 83       	std	Y+4, r25	; 0x04
    35fc:	2d 83       	std	Y+5, r18	; 0x05
    35fe:	3e 83       	std	Y+6, r19	; 0x06
    3600:	4f 83       	std	Y+7, r20	; 0x07
    3602:	58 87       	std	Y+8, r21	; 0x08
    3604:	8e 01       	movw	r16, r28
    3606:	07 5f       	subi	r16, 0xF7	; 247
    3608:	1f 4f       	sbci	r17, 0xFF	; 255
    360a:	ce 01       	movw	r24, r28
    360c:	01 96       	adiw	r24, 0x01	; 1
    360e:	b8 01       	movw	r22, r16
    3610:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    3614:	81 e1       	ldi	r24, 0x11	; 17
    3616:	e8 2e       	mov	r14, r24
    3618:	f1 2c       	mov	r15, r1
    361a:	ec 0e       	add	r14, r28
    361c:	fd 1e       	adc	r15, r29
    361e:	ce 01       	movw	r24, r28
    3620:	05 96       	adiw	r24, 0x05	; 5
    3622:	b7 01       	movw	r22, r14
    3624:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    3628:	89 85       	ldd	r24, Y+9	; 0x09
    362a:	82 30       	cpi	r24, 0x02	; 2
    362c:	40 f0       	brcs	.+16     	; 0x363e <__ltsf2+0x56>
    362e:	89 89       	ldd	r24, Y+17	; 0x11
    3630:	82 30       	cpi	r24, 0x02	; 2
    3632:	28 f0       	brcs	.+10     	; 0x363e <__ltsf2+0x56>
    3634:	c8 01       	movw	r24, r16
    3636:	b7 01       	movw	r22, r14
    3638:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fpcmp_parts_f>
    363c:	01 c0       	rjmp	.+2      	; 0x3640 <__ltsf2+0x58>
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	68 96       	adiw	r28, 0x18	; 24
    3642:	e6 e0       	ldi	r30, 0x06	; 6
    3644:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

00003648 <__floatsisf>:
    3648:	a8 e0       	ldi	r26, 0x08	; 8
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	ea e2       	ldi	r30, 0x2A	; 42
    364e:	fb e1       	ldi	r31, 0x1B	; 27
    3650:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
    3654:	7b 01       	movw	r14, r22
    3656:	8c 01       	movw	r16, r24
    3658:	83 e0       	ldi	r24, 0x03	; 3
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	d8 01       	movw	r26, r16
    365e:	c7 01       	movw	r24, r14
    3660:	88 27       	eor	r24, r24
    3662:	b7 fd       	sbrc	r27, 7
    3664:	83 95       	inc	r24
    3666:	99 27       	eor	r25, r25
    3668:	aa 27       	eor	r26, r26
    366a:	bb 27       	eor	r27, r27
    366c:	28 2f       	mov	r18, r24
    366e:	8a 83       	std	Y+2, r24	; 0x02
    3670:	e1 14       	cp	r14, r1
    3672:	f1 04       	cpc	r15, r1
    3674:	01 05       	cpc	r16, r1
    3676:	11 05       	cpc	r17, r1
    3678:	19 f4       	brne	.+6      	; 0x3680 <__floatsisf+0x38>
    367a:	82 e0       	ldi	r24, 0x02	; 2
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	37 c0       	rjmp	.+110    	; 0x36ee <__floatsisf+0xa6>
    3680:	8e e1       	ldi	r24, 0x1E	; 30
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9c 83       	std	Y+4, r25	; 0x04
    3686:	8b 83       	std	Y+3, r24	; 0x03
    3688:	22 23       	and	r18, r18
    368a:	89 f0       	breq	.+34     	; 0x36ae <__floatsisf+0x66>
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	e8 16       	cp	r14, r24
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	f8 06       	cpc	r15, r24
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	08 07       	cpc	r16, r24
    3698:	80 e8       	ldi	r24, 0x80	; 128
    369a:	18 07       	cpc	r17, r24
    369c:	69 f1       	breq	.+90     	; 0x36f8 <__floatsisf+0xb0>
    369e:	10 95       	com	r17
    36a0:	00 95       	com	r16
    36a2:	f0 94       	com	r15
    36a4:	e0 94       	com	r14
    36a6:	e1 1c       	adc	r14, r1
    36a8:	f1 1c       	adc	r15, r1
    36aa:	01 1d       	adc	r16, r1
    36ac:	11 1d       	adc	r17, r1
    36ae:	ed 82       	std	Y+5, r14	; 0x05
    36b0:	fe 82       	std	Y+6, r15	; 0x06
    36b2:	0f 83       	std	Y+7, r16	; 0x07
    36b4:	18 87       	std	Y+8, r17	; 0x08
    36b6:	c8 01       	movw	r24, r16
    36b8:	b7 01       	movw	r22, r14
    36ba:	0e 94 4e 1c 	call	0x389c	; 0x389c <__clzsi2>
    36be:	9c 01       	movw	r18, r24
    36c0:	21 50       	subi	r18, 0x01	; 1
    36c2:	30 40       	sbci	r19, 0x00	; 0
    36c4:	12 16       	cp	r1, r18
    36c6:	13 06       	cpc	r1, r19
    36c8:	94 f4       	brge	.+36     	; 0x36ee <__floatsisf+0xa6>
    36ca:	02 2e       	mov	r0, r18
    36cc:	04 c0       	rjmp	.+8      	; 0x36d6 <__floatsisf+0x8e>
    36ce:	ee 0c       	add	r14, r14
    36d0:	ff 1c       	adc	r15, r15
    36d2:	00 1f       	adc	r16, r16
    36d4:	11 1f       	adc	r17, r17
    36d6:	0a 94       	dec	r0
    36d8:	d2 f7       	brpl	.-12     	; 0x36ce <__floatsisf+0x86>
    36da:	ed 82       	std	Y+5, r14	; 0x05
    36dc:	fe 82       	std	Y+6, r15	; 0x06
    36de:	0f 83       	std	Y+7, r16	; 0x07
    36e0:	18 87       	std	Y+8, r17	; 0x08
    36e2:	8e e1       	ldi	r24, 0x1E	; 30
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	82 1b       	sub	r24, r18
    36e8:	93 0b       	sbc	r25, r19
    36ea:	9c 83       	std	Y+4, r25	; 0x04
    36ec:	8b 83       	std	Y+3, r24	; 0x03
    36ee:	ce 01       	movw	r24, r28
    36f0:	01 96       	adiw	r24, 0x01	; 1
    36f2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__pack_f>
    36f6:	04 c0       	rjmp	.+8      	; 0x3700 <__floatsisf+0xb8>
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	9f ec       	ldi	r25, 0xCF	; 207
    3700:	28 96       	adiw	r28, 0x08	; 8
    3702:	e6 e0       	ldi	r30, 0x06	; 6
    3704:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

00003708 <__fixsfsi>:
    3708:	ac e0       	ldi	r26, 0x0C	; 12
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	ea e8       	ldi	r30, 0x8A	; 138
    370e:	fb e1       	ldi	r31, 0x1B	; 27
    3710:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__+0x20>
    3714:	69 83       	std	Y+1, r22	; 0x01
    3716:	7a 83       	std	Y+2, r23	; 0x02
    3718:	8b 83       	std	Y+3, r24	; 0x03
    371a:	9c 83       	std	Y+4, r25	; 0x04
    371c:	ce 01       	movw	r24, r28
    371e:	01 96       	adiw	r24, 0x01	; 1
    3720:	be 01       	movw	r22, r28
    3722:	6b 5f       	subi	r22, 0xFB	; 251
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__unpack_f>
    372a:	8d 81       	ldd	r24, Y+5	; 0x05
    372c:	82 30       	cpi	r24, 0x02	; 2
    372e:	81 f1       	breq	.+96     	; 0x3790 <__fixsfsi+0x88>
    3730:	82 30       	cpi	r24, 0x02	; 2
    3732:	70 f1       	brcs	.+92     	; 0x3790 <__fixsfsi+0x88>
    3734:	84 30       	cpi	r24, 0x04	; 4
    3736:	21 f4       	brne	.+8      	; 0x3740 <__fixsfsi+0x38>
    3738:	8e 81       	ldd	r24, Y+6	; 0x06
    373a:	88 23       	and	r24, r24
    373c:	69 f1       	breq	.+90     	; 0x3798 <__fixsfsi+0x90>
    373e:	0a c0       	rjmp	.+20     	; 0x3754 <__fixsfsi+0x4c>
    3740:	2f 81       	ldd	r18, Y+7	; 0x07
    3742:	38 85       	ldd	r19, Y+8	; 0x08
    3744:	37 fd       	sbrc	r19, 7
    3746:	24 c0       	rjmp	.+72     	; 0x3790 <__fixsfsi+0x88>
    3748:	6e 81       	ldd	r22, Y+6	; 0x06
    374a:	2f 31       	cpi	r18, 0x1F	; 31
    374c:	31 05       	cpc	r19, r1
    374e:	3c f0       	brlt	.+14     	; 0x375e <__fixsfsi+0x56>
    3750:	66 23       	and	r22, r22
    3752:	11 f1       	breq	.+68     	; 0x3798 <__fixsfsi+0x90>
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	50 e8       	ldi	r21, 0x80	; 128
    375c:	21 c0       	rjmp	.+66     	; 0x37a0 <__fixsfsi+0x98>
    375e:	8e e1       	ldi	r24, 0x1E	; 30
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	82 1b       	sub	r24, r18
    3764:	93 0b       	sbc	r25, r19
    3766:	29 85       	ldd	r18, Y+9	; 0x09
    3768:	3a 85       	ldd	r19, Y+10	; 0x0a
    376a:	4b 85       	ldd	r20, Y+11	; 0x0b
    376c:	5c 85       	ldd	r21, Y+12	; 0x0c
    376e:	04 c0       	rjmp	.+8      	; 0x3778 <__fixsfsi+0x70>
    3770:	56 95       	lsr	r21
    3772:	47 95       	ror	r20
    3774:	37 95       	ror	r19
    3776:	27 95       	ror	r18
    3778:	8a 95       	dec	r24
    377a:	d2 f7       	brpl	.-12     	; 0x3770 <__fixsfsi+0x68>
    377c:	66 23       	and	r22, r22
    377e:	81 f0       	breq	.+32     	; 0x37a0 <__fixsfsi+0x98>
    3780:	50 95       	com	r21
    3782:	40 95       	com	r20
    3784:	30 95       	com	r19
    3786:	21 95       	neg	r18
    3788:	3f 4f       	sbci	r19, 0xFF	; 255
    378a:	4f 4f       	sbci	r20, 0xFF	; 255
    378c:	5f 4f       	sbci	r21, 0xFF	; 255
    378e:	08 c0       	rjmp	.+16     	; 0x37a0 <__fixsfsi+0x98>
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	a9 01       	movw	r20, r18
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <__fixsfsi+0x98>
    3798:	2f ef       	ldi	r18, 0xFF	; 255
    379a:	3f ef       	ldi	r19, 0xFF	; 255
    379c:	4f ef       	ldi	r20, 0xFF	; 255
    379e:	5f e7       	ldi	r21, 0x7F	; 127
    37a0:	b9 01       	movw	r22, r18
    37a2:	ca 01       	movw	r24, r20
    37a4:	2c 96       	adiw	r28, 0x0c	; 12
    37a6:	e2 e0       	ldi	r30, 0x02	; 2
    37a8:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__+0x20>

000037ac <__floatunsisf>:
    37ac:	a8 e0       	ldi	r26, 0x08	; 8
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	ec ed       	ldi	r30, 0xDC	; 220
    37b2:	fb e1       	ldi	r31, 0x1B	; 27
    37b4:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__prologue_saves__+0x14>
    37b8:	7b 01       	movw	r14, r22
    37ba:	8c 01       	movw	r16, r24
    37bc:	1a 82       	std	Y+2, r1	; 0x02
    37be:	61 15       	cp	r22, r1
    37c0:	71 05       	cpc	r23, r1
    37c2:	81 05       	cpc	r24, r1
    37c4:	91 05       	cpc	r25, r1
    37c6:	19 f4       	brne	.+6      	; 0x37ce <__floatunsisf+0x22>
    37c8:	82 e0       	ldi	r24, 0x02	; 2
    37ca:	89 83       	std	Y+1, r24	; 0x01
    37cc:	5f c0       	rjmp	.+190    	; 0x388c <__floatunsisf+0xe0>
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	8e e1       	ldi	r24, 0x1E	; 30
    37d4:	c8 2e       	mov	r12, r24
    37d6:	d1 2c       	mov	r13, r1
    37d8:	dc 82       	std	Y+4, r13	; 0x04
    37da:	cb 82       	std	Y+3, r12	; 0x03
    37dc:	ed 82       	std	Y+5, r14	; 0x05
    37de:	fe 82       	std	Y+6, r15	; 0x06
    37e0:	0f 83       	std	Y+7, r16	; 0x07
    37e2:	18 87       	std	Y+8, r17	; 0x08
    37e4:	c8 01       	movw	r24, r16
    37e6:	b7 01       	movw	r22, r14
    37e8:	0e 94 4e 1c 	call	0x389c	; 0x389c <__clzsi2>
    37ec:	fc 01       	movw	r30, r24
    37ee:	31 97       	sbiw	r30, 0x01	; 1
    37f0:	f7 ff       	sbrs	r31, 7
    37f2:	3a c0       	rjmp	.+116    	; 0x3868 <__floatunsisf+0xbc>
    37f4:	aa 27       	eor	r26, r26
    37f6:	bb 27       	eor	r27, r27
    37f8:	ae 1b       	sub	r26, r30
    37fa:	bf 0b       	sbc	r27, r31
    37fc:	21 e0       	ldi	r18, 0x01	; 1
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	0a 2e       	mov	r0, r26
    3806:	04 c0       	rjmp	.+8      	; 0x3810 <__floatunsisf+0x64>
    3808:	22 0f       	add	r18, r18
    380a:	33 1f       	adc	r19, r19
    380c:	44 1f       	adc	r20, r20
    380e:	55 1f       	adc	r21, r21
    3810:	0a 94       	dec	r0
    3812:	d2 f7       	brpl	.-12     	; 0x3808 <__floatunsisf+0x5c>
    3814:	21 50       	subi	r18, 0x01	; 1
    3816:	30 40       	sbci	r19, 0x00	; 0
    3818:	40 40       	sbci	r20, 0x00	; 0
    381a:	50 40       	sbci	r21, 0x00	; 0
    381c:	2e 21       	and	r18, r14
    381e:	3f 21       	and	r19, r15
    3820:	40 23       	and	r20, r16
    3822:	51 23       	and	r21, r17
    3824:	61 e0       	ldi	r22, 0x01	; 1
    3826:	70 e0       	ldi	r23, 0x00	; 0
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	21 15       	cp	r18, r1
    382e:	31 05       	cpc	r19, r1
    3830:	41 05       	cpc	r20, r1
    3832:	51 05       	cpc	r21, r1
    3834:	19 f4       	brne	.+6      	; 0x383c <__floatunsisf+0x90>
    3836:	60 e0       	ldi	r22, 0x00	; 0
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	cb 01       	movw	r24, r22
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <__floatunsisf+0x9a>
    383e:	16 95       	lsr	r17
    3840:	07 95       	ror	r16
    3842:	f7 94       	ror	r15
    3844:	e7 94       	ror	r14
    3846:	aa 95       	dec	r26
    3848:	d2 f7       	brpl	.-12     	; 0x383e <__floatunsisf+0x92>
    384a:	e6 2a       	or	r14, r22
    384c:	f7 2a       	or	r15, r23
    384e:	08 2b       	or	r16, r24
    3850:	19 2b       	or	r17, r25
    3852:	ed 82       	std	Y+5, r14	; 0x05
    3854:	fe 82       	std	Y+6, r15	; 0x06
    3856:	0f 83       	std	Y+7, r16	; 0x07
    3858:	18 87       	std	Y+8, r17	; 0x08
    385a:	8e e1       	ldi	r24, 0x1E	; 30
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	8e 1b       	sub	r24, r30
    3860:	9f 0b       	sbc	r25, r31
    3862:	9c 83       	std	Y+4, r25	; 0x04
    3864:	8b 83       	std	Y+3, r24	; 0x03
    3866:	12 c0       	rjmp	.+36     	; 0x388c <__floatunsisf+0xe0>
    3868:	30 97       	sbiw	r30, 0x00	; 0
    386a:	81 f0       	breq	.+32     	; 0x388c <__floatunsisf+0xe0>
    386c:	0e 2e       	mov	r0, r30
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <__floatunsisf+0xcc>
    3870:	ee 0c       	add	r14, r14
    3872:	ff 1c       	adc	r15, r15
    3874:	00 1f       	adc	r16, r16
    3876:	11 1f       	adc	r17, r17
    3878:	0a 94       	dec	r0
    387a:	d2 f7       	brpl	.-12     	; 0x3870 <__floatunsisf+0xc4>
    387c:	ed 82       	std	Y+5, r14	; 0x05
    387e:	fe 82       	std	Y+6, r15	; 0x06
    3880:	0f 83       	std	Y+7, r16	; 0x07
    3882:	18 87       	std	Y+8, r17	; 0x08
    3884:	ce 1a       	sub	r12, r30
    3886:	df 0a       	sbc	r13, r31
    3888:	dc 82       	std	Y+4, r13	; 0x04
    388a:	cb 82       	std	Y+3, r12	; 0x03
    388c:	ce 01       	movw	r24, r28
    388e:	01 96       	adiw	r24, 0x01	; 1
    3890:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__pack_f>
    3894:	28 96       	adiw	r28, 0x08	; 8
    3896:	e8 e0       	ldi	r30, 0x08	; 8
    3898:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__epilogue_restores__+0x14>

0000389c <__clzsi2>:
    389c:	af 92       	push	r10
    389e:	bf 92       	push	r11
    38a0:	cf 92       	push	r12
    38a2:	df 92       	push	r13
    38a4:	ef 92       	push	r14
    38a6:	ff 92       	push	r15
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	7b 01       	movw	r14, r22
    38ae:	8c 01       	movw	r16, r24
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	e8 16       	cp	r14, r24
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	f8 06       	cpc	r15, r24
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	08 07       	cpc	r16, r24
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	18 07       	cpc	r17, r24
    38c0:	58 f4       	brcc	.+22     	; 0x38d8 <__clzsi2+0x3c>
    38c2:	ef ef       	ldi	r30, 0xFF	; 255
    38c4:	ee 16       	cp	r14, r30
    38c6:	f1 04       	cpc	r15, r1
    38c8:	01 05       	cpc	r16, r1
    38ca:	11 05       	cpc	r17, r1
    38cc:	09 f0       	breq	.+2      	; 0x38d0 <__clzsi2+0x34>
    38ce:	90 f4       	brcc	.+36     	; 0x38f4 <__clzsi2+0x58>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	dc 01       	movw	r26, r24
    38d6:	17 c0       	rjmp	.+46     	; 0x3906 <__clzsi2+0x6a>
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	ef 16       	cp	r14, r31
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	ff 06       	cpc	r15, r31
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	0f 07       	cpc	r16, r31
    38e4:	f1 e0       	ldi	r31, 0x01	; 1
    38e6:	1f 07       	cpc	r17, r31
    38e8:	50 f4       	brcc	.+20     	; 0x38fe <__clzsi2+0x62>
    38ea:	80 e1       	ldi	r24, 0x10	; 16
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	a0 e0       	ldi	r26, 0x00	; 0
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	09 c0       	rjmp	.+18     	; 0x3906 <__clzsi2+0x6a>
    38f4:	88 e0       	ldi	r24, 0x08	; 8
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	a0 e0       	ldi	r26, 0x00	; 0
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <__clzsi2+0x6a>
    38fe:	88 e1       	ldi	r24, 0x18	; 24
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	a0 e0       	ldi	r26, 0x00	; 0
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	20 e2       	ldi	r18, 0x20	; 32
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	50 e0       	ldi	r21, 0x00	; 0
    390e:	28 1b       	sub	r18, r24
    3910:	39 0b       	sbc	r19, r25
    3912:	4a 0b       	sbc	r20, r26
    3914:	5b 0b       	sbc	r21, r27
    3916:	57 01       	movw	r10, r14
    3918:	68 01       	movw	r12, r16
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <__clzsi2+0x88>
    391c:	d6 94       	lsr	r13
    391e:	c7 94       	ror	r12
    3920:	b7 94       	ror	r11
    3922:	a7 94       	ror	r10
    3924:	8a 95       	dec	r24
    3926:	d2 f7       	brpl	.-12     	; 0x391c <__clzsi2+0x80>
    3928:	d6 01       	movw	r26, r12
    392a:	c5 01       	movw	r24, r10
    392c:	89 5c       	subi	r24, 0xC9	; 201
    392e:	9e 4f       	sbci	r25, 0xFE	; 254
    3930:	fc 01       	movw	r30, r24
    3932:	80 81       	ld	r24, Z
    3934:	28 1b       	sub	r18, r24
    3936:	31 09       	sbc	r19, r1
    3938:	41 09       	sbc	r20, r1
    393a:	51 09       	sbc	r21, r1
    393c:	c9 01       	movw	r24, r18
    393e:	1f 91       	pop	r17
    3940:	0f 91       	pop	r16
    3942:	ff 90       	pop	r15
    3944:	ef 90       	pop	r14
    3946:	df 90       	pop	r13
    3948:	cf 90       	pop	r12
    394a:	bf 90       	pop	r11
    394c:	af 90       	pop	r10
    394e:	08 95       	ret

00003950 <__pack_f>:
    3950:	ef 92       	push	r14
    3952:	ff 92       	push	r15
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	fc 01       	movw	r30, r24
    395e:	24 81       	ldd	r18, Z+4	; 0x04
    3960:	35 81       	ldd	r19, Z+5	; 0x05
    3962:	46 81       	ldd	r20, Z+6	; 0x06
    3964:	57 81       	ldd	r21, Z+7	; 0x07
    3966:	61 81       	ldd	r22, Z+1	; 0x01
    3968:	80 81       	ld	r24, Z
    396a:	82 30       	cpi	r24, 0x02	; 2
    396c:	20 f4       	brcc	.+8      	; 0x3976 <__pack_f+0x26>
    396e:	40 61       	ori	r20, 0x10	; 16
    3970:	ef ef       	ldi	r30, 0xFF	; 255
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	a3 c0       	rjmp	.+326    	; 0x3abc <__pack_f+0x16c>
    3976:	84 30       	cpi	r24, 0x04	; 4
    3978:	09 f4       	brne	.+2      	; 0x397c <__pack_f+0x2c>
    397a:	9b c0       	rjmp	.+310    	; 0x3ab2 <__pack_f+0x162>
    397c:	82 30       	cpi	r24, 0x02	; 2
    397e:	09 f4       	brne	.+2      	; 0x3982 <__pack_f+0x32>
    3980:	92 c0       	rjmp	.+292    	; 0x3aa6 <__pack_f+0x156>
    3982:	21 15       	cp	r18, r1
    3984:	31 05       	cpc	r19, r1
    3986:	41 05       	cpc	r20, r1
    3988:	51 05       	cpc	r21, r1
    398a:	09 f4       	brne	.+2      	; 0x398e <__pack_f+0x3e>
    398c:	8f c0       	rjmp	.+286    	; 0x3aac <__pack_f+0x15c>
    398e:	02 80       	ldd	r0, Z+2	; 0x02
    3990:	f3 81       	ldd	r31, Z+3	; 0x03
    3992:	e0 2d       	mov	r30, r0
    3994:	7f ef       	ldi	r23, 0xFF	; 255
    3996:	e2 38       	cpi	r30, 0x82	; 130
    3998:	f7 07       	cpc	r31, r23
    399a:	0c f0       	brlt	.+2      	; 0x399e <__pack_f+0x4e>
    399c:	5a c0       	rjmp	.+180    	; 0x3a52 <__pack_f+0x102>
    399e:	c2 e8       	ldi	r28, 0x82	; 130
    39a0:	df ef       	ldi	r29, 0xFF	; 255
    39a2:	ce 1b       	sub	r28, r30
    39a4:	df 0b       	sbc	r29, r31
    39a6:	ca 31       	cpi	r28, 0x1A	; 26
    39a8:	d1 05       	cpc	r29, r1
    39aa:	6c f5       	brge	.+90     	; 0x3a06 <__pack_f+0xb6>
    39ac:	79 01       	movw	r14, r18
    39ae:	8a 01       	movw	r16, r20
    39b0:	0c 2e       	mov	r0, r28
    39b2:	04 c0       	rjmp	.+8      	; 0x39bc <__pack_f+0x6c>
    39b4:	16 95       	lsr	r17
    39b6:	07 95       	ror	r16
    39b8:	f7 94       	ror	r15
    39ba:	e7 94       	ror	r14
    39bc:	0a 94       	dec	r0
    39be:	d2 f7       	brpl	.-12     	; 0x39b4 <__pack_f+0x64>
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	a0 e0       	ldi	r26, 0x00	; 0
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	0c 2e       	mov	r0, r28
    39ca:	04 c0       	rjmp	.+8      	; 0x39d4 <__pack_f+0x84>
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	aa 1f       	adc	r26, r26
    39d2:	bb 1f       	adc	r27, r27
    39d4:	0a 94       	dec	r0
    39d6:	d2 f7       	brpl	.-12     	; 0x39cc <__pack_f+0x7c>
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	a1 09       	sbc	r26, r1
    39dc:	b1 09       	sbc	r27, r1
    39de:	82 23       	and	r24, r18
    39e0:	93 23       	and	r25, r19
    39e2:	a4 23       	and	r26, r20
    39e4:	b5 23       	and	r27, r21
    39e6:	21 e0       	ldi	r18, 0x01	; 1
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e0       	ldi	r20, 0x00	; 0
    39ec:	50 e0       	ldi	r21, 0x00	; 0
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	a1 05       	cpc	r26, r1
    39f2:	b1 05       	cpc	r27, r1
    39f4:	19 f4       	brne	.+6      	; 0x39fc <__pack_f+0xac>
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	a9 01       	movw	r20, r18
    39fc:	2e 29       	or	r18, r14
    39fe:	3f 29       	or	r19, r15
    3a00:	40 2b       	or	r20, r16
    3a02:	51 2b       	or	r21, r17
    3a04:	03 c0       	rjmp	.+6      	; 0x3a0c <__pack_f+0xbc>
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	a9 01       	movw	r20, r18
    3a0c:	da 01       	movw	r26, r20
    3a0e:	c9 01       	movw	r24, r18
    3a10:	8f 77       	andi	r24, 0x7F	; 127
    3a12:	90 70       	andi	r25, 0x00	; 0
    3a14:	a0 70       	andi	r26, 0x00	; 0
    3a16:	b0 70       	andi	r27, 0x00	; 0
    3a18:	80 34       	cpi	r24, 0x40	; 64
    3a1a:	91 05       	cpc	r25, r1
    3a1c:	a1 05       	cpc	r26, r1
    3a1e:	b1 05       	cpc	r27, r1
    3a20:	39 f4       	brne	.+14     	; 0x3a30 <__pack_f+0xe0>
    3a22:	27 ff       	sbrs	r18, 7
    3a24:	09 c0       	rjmp	.+18     	; 0x3a38 <__pack_f+0xe8>
    3a26:	20 5c       	subi	r18, 0xC0	; 192
    3a28:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2a:	4f 4f       	sbci	r20, 0xFF	; 255
    3a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2e:	04 c0       	rjmp	.+8      	; 0x3a38 <__pack_f+0xe8>
    3a30:	21 5c       	subi	r18, 0xC1	; 193
    3a32:	3f 4f       	sbci	r19, 0xFF	; 255
    3a34:	4f 4f       	sbci	r20, 0xFF	; 255
    3a36:	5f 4f       	sbci	r21, 0xFF	; 255
    3a38:	e1 e0       	ldi	r30, 0x01	; 1
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	20 30       	cpi	r18, 0x00	; 0
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	38 07       	cpc	r19, r24
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	48 07       	cpc	r20, r24
    3a46:	80 e4       	ldi	r24, 0x40	; 64
    3a48:	58 07       	cpc	r21, r24
    3a4a:	28 f5       	brcc	.+74     	; 0x3a96 <__pack_f+0x146>
    3a4c:	e0 e0       	ldi	r30, 0x00	; 0
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	22 c0       	rjmp	.+68     	; 0x3a96 <__pack_f+0x146>
    3a52:	e0 38       	cpi	r30, 0x80	; 128
    3a54:	f1 05       	cpc	r31, r1
    3a56:	6c f5       	brge	.+90     	; 0x3ab2 <__pack_f+0x162>
    3a58:	e1 58       	subi	r30, 0x81	; 129
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	da 01       	movw	r26, r20
    3a5e:	c9 01       	movw	r24, r18
    3a60:	8f 77       	andi	r24, 0x7F	; 127
    3a62:	90 70       	andi	r25, 0x00	; 0
    3a64:	a0 70       	andi	r26, 0x00	; 0
    3a66:	b0 70       	andi	r27, 0x00	; 0
    3a68:	80 34       	cpi	r24, 0x40	; 64
    3a6a:	91 05       	cpc	r25, r1
    3a6c:	a1 05       	cpc	r26, r1
    3a6e:	b1 05       	cpc	r27, r1
    3a70:	39 f4       	brne	.+14     	; 0x3a80 <__pack_f+0x130>
    3a72:	27 ff       	sbrs	r18, 7
    3a74:	09 c0       	rjmp	.+18     	; 0x3a88 <__pack_f+0x138>
    3a76:	20 5c       	subi	r18, 0xC0	; 192
    3a78:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7a:	4f 4f       	sbci	r20, 0xFF	; 255
    3a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a7e:	04 c0       	rjmp	.+8      	; 0x3a88 <__pack_f+0x138>
    3a80:	21 5c       	subi	r18, 0xC1	; 193
    3a82:	3f 4f       	sbci	r19, 0xFF	; 255
    3a84:	4f 4f       	sbci	r20, 0xFF	; 255
    3a86:	5f 4f       	sbci	r21, 0xFF	; 255
    3a88:	57 ff       	sbrs	r21, 7
    3a8a:	05 c0       	rjmp	.+10     	; 0x3a96 <__pack_f+0x146>
    3a8c:	56 95       	lsr	r21
    3a8e:	47 95       	ror	r20
    3a90:	37 95       	ror	r19
    3a92:	27 95       	ror	r18
    3a94:	31 96       	adiw	r30, 0x01	; 1
    3a96:	87 e0       	ldi	r24, 0x07	; 7
    3a98:	56 95       	lsr	r21
    3a9a:	47 95       	ror	r20
    3a9c:	37 95       	ror	r19
    3a9e:	27 95       	ror	r18
    3aa0:	8a 95       	dec	r24
    3aa2:	d1 f7       	brne	.-12     	; 0x3a98 <__pack_f+0x148>
    3aa4:	0b c0       	rjmp	.+22     	; 0x3abc <__pack_f+0x16c>
    3aa6:	e0 e0       	ldi	r30, 0x00	; 0
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	05 c0       	rjmp	.+10     	; 0x3ab6 <__pack_f+0x166>
    3aac:	e0 e0       	ldi	r30, 0x00	; 0
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	05 c0       	rjmp	.+10     	; 0x3abc <__pack_f+0x16c>
    3ab2:	ef ef       	ldi	r30, 0xFF	; 255
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	a9 01       	movw	r20, r18
    3abc:	8e 2f       	mov	r24, r30
    3abe:	87 95       	ror	r24
    3ac0:	88 27       	eor	r24, r24
    3ac2:	87 95       	ror	r24
    3ac4:	94 2f       	mov	r25, r20
    3ac6:	9f 77       	andi	r25, 0x7F	; 127
    3ac8:	67 95       	ror	r22
    3aca:	66 27       	eor	r22, r22
    3acc:	67 95       	ror	r22
    3ace:	e6 95       	lsr	r30
    3ad0:	a9 2f       	mov	r26, r25
    3ad2:	a8 2b       	or	r26, r24
    3ad4:	fe 2f       	mov	r31, r30
    3ad6:	f6 2b       	or	r31, r22
    3ad8:	62 2f       	mov	r22, r18
    3ada:	73 2f       	mov	r23, r19
    3adc:	8a 2f       	mov	r24, r26
    3ade:	9f 2f       	mov	r25, r31
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	e6 e0       	ldi	r30, 0x06	; 6
    3ae6:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

00003aea <__unpack_f>:
    3aea:	dc 01       	movw	r26, r24
    3aec:	fb 01       	movw	r30, r22
    3aee:	2c 91       	ld	r18, X
    3af0:	11 96       	adiw	r26, 0x01	; 1
    3af2:	3c 91       	ld	r19, X
    3af4:	11 97       	sbiw	r26, 0x01	; 1
    3af6:	12 96       	adiw	r26, 0x02	; 2
    3af8:	8c 91       	ld	r24, X
    3afa:	12 97       	sbiw	r26, 0x02	; 2
    3afc:	48 2f       	mov	r20, r24
    3afe:	4f 77       	andi	r20, 0x7F	; 127
    3b00:	50 e0       	ldi	r21, 0x00	; 0
    3b02:	98 2f       	mov	r25, r24
    3b04:	99 1f       	adc	r25, r25
    3b06:	99 27       	eor	r25, r25
    3b08:	99 1f       	adc	r25, r25
    3b0a:	13 96       	adiw	r26, 0x03	; 3
    3b0c:	6c 91       	ld	r22, X
    3b0e:	13 97       	sbiw	r26, 0x03	; 3
    3b10:	86 2f       	mov	r24, r22
    3b12:	88 0f       	add	r24, r24
    3b14:	89 2b       	or	r24, r25
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	66 1f       	adc	r22, r22
    3b1a:	66 27       	eor	r22, r22
    3b1c:	66 1f       	adc	r22, r22
    3b1e:	61 83       	std	Z+1, r22	; 0x01
    3b20:	00 97       	sbiw	r24, 0x00	; 0
    3b22:	39 f5       	brne	.+78     	; 0x3b72 <__unpack_f+0x88>
    3b24:	21 15       	cp	r18, r1
    3b26:	31 05       	cpc	r19, r1
    3b28:	41 05       	cpc	r20, r1
    3b2a:	51 05       	cpc	r21, r1
    3b2c:	11 f4       	brne	.+4      	; 0x3b32 <__unpack_f+0x48>
    3b2e:	82 e0       	ldi	r24, 0x02	; 2
    3b30:	29 c0       	rjmp	.+82     	; 0x3b84 <__unpack_f+0x9a>
    3b32:	82 e8       	ldi	r24, 0x82	; 130
    3b34:	9f ef       	ldi	r25, 0xFF	; 255
    3b36:	93 83       	std	Z+3, r25	; 0x03
    3b38:	82 83       	std	Z+2, r24	; 0x02
    3b3a:	67 e0       	ldi	r22, 0x07	; 7
    3b3c:	22 0f       	add	r18, r18
    3b3e:	33 1f       	adc	r19, r19
    3b40:	44 1f       	adc	r20, r20
    3b42:	55 1f       	adc	r21, r21
    3b44:	6a 95       	dec	r22
    3b46:	d1 f7       	brne	.-12     	; 0x3b3c <__unpack_f+0x52>
    3b48:	83 e0       	ldi	r24, 0x03	; 3
    3b4a:	80 83       	st	Z, r24
    3b4c:	09 c0       	rjmp	.+18     	; 0x3b60 <__unpack_f+0x76>
    3b4e:	22 0f       	add	r18, r18
    3b50:	33 1f       	adc	r19, r19
    3b52:	44 1f       	adc	r20, r20
    3b54:	55 1f       	adc	r21, r21
    3b56:	82 81       	ldd	r24, Z+2	; 0x02
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	01 97       	sbiw	r24, 0x01	; 1
    3b5c:	93 83       	std	Z+3, r25	; 0x03
    3b5e:	82 83       	std	Z+2, r24	; 0x02
    3b60:	20 30       	cpi	r18, 0x00	; 0
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	38 07       	cpc	r19, r24
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	48 07       	cpc	r20, r24
    3b6a:	80 e4       	ldi	r24, 0x40	; 64
    3b6c:	58 07       	cpc	r21, r24
    3b6e:	78 f3       	brcs	.-34     	; 0x3b4e <__unpack_f+0x64>
    3b70:	20 c0       	rjmp	.+64     	; 0x3bb2 <__unpack_f+0xc8>
    3b72:	8f 3f       	cpi	r24, 0xFF	; 255
    3b74:	91 05       	cpc	r25, r1
    3b76:	79 f4       	brne	.+30     	; 0x3b96 <__unpack_f+0xac>
    3b78:	21 15       	cp	r18, r1
    3b7a:	31 05       	cpc	r19, r1
    3b7c:	41 05       	cpc	r20, r1
    3b7e:	51 05       	cpc	r21, r1
    3b80:	19 f4       	brne	.+6      	; 0x3b88 <__unpack_f+0x9e>
    3b82:	84 e0       	ldi	r24, 0x04	; 4
    3b84:	80 83       	st	Z, r24
    3b86:	08 95       	ret
    3b88:	44 ff       	sbrs	r20, 4
    3b8a:	03 c0       	rjmp	.+6      	; 0x3b92 <__unpack_f+0xa8>
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	80 83       	st	Z, r24
    3b90:	10 c0       	rjmp	.+32     	; 0x3bb2 <__unpack_f+0xc8>
    3b92:	10 82       	st	Z, r1
    3b94:	0e c0       	rjmp	.+28     	; 0x3bb2 <__unpack_f+0xc8>
    3b96:	8f 57       	subi	r24, 0x7F	; 127
    3b98:	90 40       	sbci	r25, 0x00	; 0
    3b9a:	93 83       	std	Z+3, r25	; 0x03
    3b9c:	82 83       	std	Z+2, r24	; 0x02
    3b9e:	83 e0       	ldi	r24, 0x03	; 3
    3ba0:	80 83       	st	Z, r24
    3ba2:	87 e0       	ldi	r24, 0x07	; 7
    3ba4:	22 0f       	add	r18, r18
    3ba6:	33 1f       	adc	r19, r19
    3ba8:	44 1f       	adc	r20, r20
    3baa:	55 1f       	adc	r21, r21
    3bac:	8a 95       	dec	r24
    3bae:	d1 f7       	brne	.-12     	; 0x3ba4 <__unpack_f+0xba>
    3bb0:	50 64       	ori	r21, 0x40	; 64
    3bb2:	24 83       	std	Z+4, r18	; 0x04
    3bb4:	35 83       	std	Z+5, r19	; 0x05
    3bb6:	46 83       	std	Z+6, r20	; 0x06
    3bb8:	57 83       	std	Z+7, r21	; 0x07
    3bba:	08 95       	ret

00003bbc <__fpcmp_parts_f>:
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	db 01       	movw	r26, r22
    3bc0:	90 81       	ld	r25, Z
    3bc2:	92 30       	cpi	r25, 0x02	; 2
    3bc4:	08 f4       	brcc	.+2      	; 0x3bc8 <__fpcmp_parts_f+0xc>
    3bc6:	49 c0       	rjmp	.+146    	; 0x3c5a <__fpcmp_parts_f+0x9e>
    3bc8:	8c 91       	ld	r24, X
    3bca:	82 30       	cpi	r24, 0x02	; 2
    3bcc:	08 f4       	brcc	.+2      	; 0x3bd0 <__fpcmp_parts_f+0x14>
    3bce:	45 c0       	rjmp	.+138    	; 0x3c5a <__fpcmp_parts_f+0x9e>
    3bd0:	94 30       	cpi	r25, 0x04	; 4
    3bd2:	51 f4       	brne	.+20     	; 0x3be8 <__fpcmp_parts_f+0x2c>
    3bd4:	61 81       	ldd	r22, Z+1	; 0x01
    3bd6:	84 30       	cpi	r24, 0x04	; 4
    3bd8:	b1 f5       	brne	.+108    	; 0x3c46 <__fpcmp_parts_f+0x8a>
    3bda:	11 96       	adiw	r26, 0x01	; 1
    3bdc:	2c 91       	ld	r18, X
    3bde:	11 97       	sbiw	r26, 0x01	; 1
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	26 1b       	sub	r18, r22
    3be4:	31 09       	sbc	r19, r1
    3be6:	41 c0       	rjmp	.+130    	; 0x3c6a <__fpcmp_parts_f+0xae>
    3be8:	84 30       	cpi	r24, 0x04	; 4
    3bea:	21 f0       	breq	.+8      	; 0x3bf4 <__fpcmp_parts_f+0x38>
    3bec:	92 30       	cpi	r25, 0x02	; 2
    3bee:	41 f4       	brne	.+16     	; 0x3c00 <__fpcmp_parts_f+0x44>
    3bf0:	82 30       	cpi	r24, 0x02	; 2
    3bf2:	b1 f1       	breq	.+108    	; 0x3c60 <__fpcmp_parts_f+0xa4>
    3bf4:	11 96       	adiw	r26, 0x01	; 1
    3bf6:	8c 91       	ld	r24, X
    3bf8:	11 97       	sbiw	r26, 0x01	; 1
    3bfa:	88 23       	and	r24, r24
    3bfc:	a1 f1       	breq	.+104    	; 0x3c66 <__fpcmp_parts_f+0xaa>
    3bfe:	2d c0       	rjmp	.+90     	; 0x3c5a <__fpcmp_parts_f+0x9e>
    3c00:	61 81       	ldd	r22, Z+1	; 0x01
    3c02:	82 30       	cpi	r24, 0x02	; 2
    3c04:	01 f1       	breq	.+64     	; 0x3c46 <__fpcmp_parts_f+0x8a>
    3c06:	11 96       	adiw	r26, 0x01	; 1
    3c08:	8c 91       	ld	r24, X
    3c0a:	11 97       	sbiw	r26, 0x01	; 1
    3c0c:	68 17       	cp	r22, r24
    3c0e:	d9 f4       	brne	.+54     	; 0x3c46 <__fpcmp_parts_f+0x8a>
    3c10:	22 81       	ldd	r18, Z+2	; 0x02
    3c12:	33 81       	ldd	r19, Z+3	; 0x03
    3c14:	12 96       	adiw	r26, 0x02	; 2
    3c16:	8d 91       	ld	r24, X+
    3c18:	9c 91       	ld	r25, X
    3c1a:	13 97       	sbiw	r26, 0x03	; 3
    3c1c:	82 17       	cp	r24, r18
    3c1e:	93 07       	cpc	r25, r19
    3c20:	94 f0       	brlt	.+36     	; 0x3c46 <__fpcmp_parts_f+0x8a>
    3c22:	28 17       	cp	r18, r24
    3c24:	39 07       	cpc	r19, r25
    3c26:	bc f0       	brlt	.+46     	; 0x3c56 <__fpcmp_parts_f+0x9a>
    3c28:	24 81       	ldd	r18, Z+4	; 0x04
    3c2a:	35 81       	ldd	r19, Z+5	; 0x05
    3c2c:	46 81       	ldd	r20, Z+6	; 0x06
    3c2e:	57 81       	ldd	r21, Z+7	; 0x07
    3c30:	14 96       	adiw	r26, 0x04	; 4
    3c32:	8d 91       	ld	r24, X+
    3c34:	9d 91       	ld	r25, X+
    3c36:	0d 90       	ld	r0, X+
    3c38:	bc 91       	ld	r27, X
    3c3a:	a0 2d       	mov	r26, r0
    3c3c:	82 17       	cp	r24, r18
    3c3e:	93 07       	cpc	r25, r19
    3c40:	a4 07       	cpc	r26, r20
    3c42:	b5 07       	cpc	r27, r21
    3c44:	18 f4       	brcc	.+6      	; 0x3c4c <__fpcmp_parts_f+0x90>
    3c46:	66 23       	and	r22, r22
    3c48:	41 f0       	breq	.+16     	; 0x3c5a <__fpcmp_parts_f+0x9e>
    3c4a:	0d c0       	rjmp	.+26     	; 0x3c66 <__fpcmp_parts_f+0xaa>
    3c4c:	28 17       	cp	r18, r24
    3c4e:	39 07       	cpc	r19, r25
    3c50:	4a 07       	cpc	r20, r26
    3c52:	5b 07       	cpc	r21, r27
    3c54:	28 f4       	brcc	.+10     	; 0x3c60 <__fpcmp_parts_f+0xa4>
    3c56:	66 23       	and	r22, r22
    3c58:	31 f0       	breq	.+12     	; 0x3c66 <__fpcmp_parts_f+0xaa>
    3c5a:	21 e0       	ldi	r18, 0x01	; 1
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	05 c0       	rjmp	.+10     	; 0x3c6a <__fpcmp_parts_f+0xae>
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	02 c0       	rjmp	.+4      	; 0x3c6a <__fpcmp_parts_f+0xae>
    3c66:	2f ef       	ldi	r18, 0xFF	; 255
    3c68:	3f ef       	ldi	r19, 0xFF	; 255
    3c6a:	c9 01       	movw	r24, r18
    3c6c:	08 95       	ret

00003c6e <__udivmodhi4>:
    3c6e:	aa 1b       	sub	r26, r26
    3c70:	bb 1b       	sub	r27, r27
    3c72:	51 e1       	ldi	r21, 0x11	; 17
    3c74:	07 c0       	rjmp	.+14     	; 0x3c84 <__udivmodhi4_ep>

00003c76 <__udivmodhi4_loop>:
    3c76:	aa 1f       	adc	r26, r26
    3c78:	bb 1f       	adc	r27, r27
    3c7a:	a6 17       	cp	r26, r22
    3c7c:	b7 07       	cpc	r27, r23
    3c7e:	10 f0       	brcs	.+4      	; 0x3c84 <__udivmodhi4_ep>
    3c80:	a6 1b       	sub	r26, r22
    3c82:	b7 0b       	sbc	r27, r23

00003c84 <__udivmodhi4_ep>:
    3c84:	88 1f       	adc	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	5a 95       	dec	r21
    3c8a:	a9 f7       	brne	.-22     	; 0x3c76 <__udivmodhi4_loop>
    3c8c:	80 95       	com	r24
    3c8e:	90 95       	com	r25
    3c90:	bc 01       	movw	r22, r24
    3c92:	cd 01       	movw	r24, r26
    3c94:	08 95       	ret

00003c96 <__divmodhi4>:
    3c96:	97 fb       	bst	r25, 7
    3c98:	09 2e       	mov	r0, r25
    3c9a:	07 26       	eor	r0, r23
    3c9c:	0a d0       	rcall	.+20     	; 0x3cb2 <__divmodhi4_neg1>
    3c9e:	77 fd       	sbrc	r23, 7
    3ca0:	04 d0       	rcall	.+8      	; 0x3caa <__divmodhi4_neg2>
    3ca2:	e5 df       	rcall	.-54     	; 0x3c6e <__udivmodhi4>
    3ca4:	06 d0       	rcall	.+12     	; 0x3cb2 <__divmodhi4_neg1>
    3ca6:	00 20       	and	r0, r0
    3ca8:	1a f4       	brpl	.+6      	; 0x3cb0 <__divmodhi4_exit>

00003caa <__divmodhi4_neg2>:
    3caa:	70 95       	com	r23
    3cac:	61 95       	neg	r22
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255

00003cb0 <__divmodhi4_exit>:
    3cb0:	08 95       	ret

00003cb2 <__divmodhi4_neg1>:
    3cb2:	f6 f7       	brtc	.-4      	; 0x3cb0 <__divmodhi4_exit>
    3cb4:	90 95       	com	r25
    3cb6:	81 95       	neg	r24
    3cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cba:	08 95       	ret

00003cbc <__divmodsi4>:
    3cbc:	97 fb       	bst	r25, 7
    3cbe:	09 2e       	mov	r0, r25
    3cc0:	05 26       	eor	r0, r21
    3cc2:	0e d0       	rcall	.+28     	; 0x3ce0 <__divmodsi4_neg1>
    3cc4:	57 fd       	sbrc	r21, 7
    3cc6:	04 d0       	rcall	.+8      	; 0x3cd0 <__divmodsi4_neg2>
    3cc8:	14 d0       	rcall	.+40     	; 0x3cf2 <__udivmodsi4>
    3cca:	0a d0       	rcall	.+20     	; 0x3ce0 <__divmodsi4_neg1>
    3ccc:	00 1c       	adc	r0, r0
    3cce:	38 f4       	brcc	.+14     	; 0x3cde <__divmodsi4_exit>

00003cd0 <__divmodsi4_neg2>:
    3cd0:	50 95       	com	r21
    3cd2:	40 95       	com	r20
    3cd4:	30 95       	com	r19
    3cd6:	21 95       	neg	r18
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	4f 4f       	sbci	r20, 0xFF	; 255
    3cdc:	5f 4f       	sbci	r21, 0xFF	; 255

00003cde <__divmodsi4_exit>:
    3cde:	08 95       	ret

00003ce0 <__divmodsi4_neg1>:
    3ce0:	f6 f7       	brtc	.-4      	; 0x3cde <__divmodsi4_exit>
    3ce2:	90 95       	com	r25
    3ce4:	80 95       	com	r24
    3ce6:	70 95       	com	r23
    3ce8:	61 95       	neg	r22
    3cea:	7f 4f       	sbci	r23, 0xFF	; 255
    3cec:	8f 4f       	sbci	r24, 0xFF	; 255
    3cee:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf0:	08 95       	ret

00003cf2 <__udivmodsi4>:
    3cf2:	a1 e2       	ldi	r26, 0x21	; 33
    3cf4:	1a 2e       	mov	r1, r26
    3cf6:	aa 1b       	sub	r26, r26
    3cf8:	bb 1b       	sub	r27, r27
    3cfa:	fd 01       	movw	r30, r26
    3cfc:	0d c0       	rjmp	.+26     	; 0x3d18 <__udivmodsi4_ep>

00003cfe <__udivmodsi4_loop>:
    3cfe:	aa 1f       	adc	r26, r26
    3d00:	bb 1f       	adc	r27, r27
    3d02:	ee 1f       	adc	r30, r30
    3d04:	ff 1f       	adc	r31, r31
    3d06:	a2 17       	cp	r26, r18
    3d08:	b3 07       	cpc	r27, r19
    3d0a:	e4 07       	cpc	r30, r20
    3d0c:	f5 07       	cpc	r31, r21
    3d0e:	20 f0       	brcs	.+8      	; 0x3d18 <__udivmodsi4_ep>
    3d10:	a2 1b       	sub	r26, r18
    3d12:	b3 0b       	sbc	r27, r19
    3d14:	e4 0b       	sbc	r30, r20
    3d16:	f5 0b       	sbc	r31, r21

00003d18 <__udivmodsi4_ep>:
    3d18:	66 1f       	adc	r22, r22
    3d1a:	77 1f       	adc	r23, r23
    3d1c:	88 1f       	adc	r24, r24
    3d1e:	99 1f       	adc	r25, r25
    3d20:	1a 94       	dec	r1
    3d22:	69 f7       	brne	.-38     	; 0x3cfe <__udivmodsi4_loop>
    3d24:	60 95       	com	r22
    3d26:	70 95       	com	r23
    3d28:	80 95       	com	r24
    3d2a:	90 95       	com	r25
    3d2c:	9b 01       	movw	r18, r22
    3d2e:	ac 01       	movw	r20, r24
    3d30:	bd 01       	movw	r22, r26
    3d32:	cf 01       	movw	r24, r30
    3d34:	08 95       	ret

00003d36 <__prologue_saves__>:
    3d36:	2f 92       	push	r2
    3d38:	3f 92       	push	r3
    3d3a:	4f 92       	push	r4
    3d3c:	5f 92       	push	r5
    3d3e:	6f 92       	push	r6
    3d40:	7f 92       	push	r7
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	ca 1b       	sub	r28, r26
    3d60:	db 0b       	sbc	r29, r27
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	cd bf       	out	0x3d, r28	; 61
    3d6c:	09 94       	ijmp

00003d6e <__epilogue_restores__>:
    3d6e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d70:	39 88       	ldd	r3, Y+17	; 0x11
    3d72:	48 88       	ldd	r4, Y+16	; 0x10
    3d74:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d76:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d78:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d80:	b9 84       	ldd	r11, Y+9	; 0x09
    3d82:	c8 84       	ldd	r12, Y+8	; 0x08
    3d84:	df 80       	ldd	r13, Y+7	; 0x07
    3d86:	ee 80       	ldd	r14, Y+6	; 0x06
    3d88:	fd 80       	ldd	r15, Y+5	; 0x05
    3d8a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d8c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d8e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d90:	b9 81       	ldd	r27, Y+1	; 0x01
    3d92:	ce 0f       	add	r28, r30
    3d94:	d1 1d       	adc	r29, r1
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	f8 94       	cli
    3d9a:	de bf       	out	0x3e, r29	; 62
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	ed 01       	movw	r28, r26
    3da2:	08 95       	ret

00003da4 <ceil>:
    3da4:	3b d0       	rcall	.+118    	; 0x3e1c <__fp_trunc>
    3da6:	80 f0       	brcs	.+32     	; 0x3dc8 <ceil+0x24>
    3da8:	9f 37       	cpi	r25, 0x7F	; 127
    3daa:	40 f4       	brcc	.+16     	; 0x3dbc <ceil+0x18>
    3dac:	91 11       	cpse	r25, r1
    3dae:	0e f4       	brtc	.+2      	; 0x3db2 <ceil+0xe>
    3db0:	4d c0       	rjmp	.+154    	; 0x3e4c <__fp_szero>
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	80 e8       	ldi	r24, 0x80	; 128
    3db8:	9f e3       	ldi	r25, 0x3F	; 63
    3dba:	08 95       	ret
    3dbc:	26 f0       	brts	.+8      	; 0x3dc6 <ceil+0x22>
    3dbe:	1b 16       	cp	r1, r27
    3dc0:	61 1d       	adc	r22, r1
    3dc2:	71 1d       	adc	r23, r1
    3dc4:	81 1d       	adc	r24, r1
    3dc6:	01 c0       	rjmp	.+2      	; 0x3dca <__fp_mintl>
    3dc8:	1b c0       	rjmp	.+54     	; 0x3e00 <__fp_mpack>

00003dca <__fp_mintl>:
    3dca:	88 23       	and	r24, r24
    3dcc:	71 f4       	brne	.+28     	; 0x3dea <__fp_mintl+0x20>
    3dce:	77 23       	and	r23, r23
    3dd0:	21 f0       	breq	.+8      	; 0x3dda <__fp_mintl+0x10>
    3dd2:	98 50       	subi	r25, 0x08	; 8
    3dd4:	87 2b       	or	r24, r23
    3dd6:	76 2f       	mov	r23, r22
    3dd8:	07 c0       	rjmp	.+14     	; 0x3de8 <__fp_mintl+0x1e>
    3dda:	66 23       	and	r22, r22
    3ddc:	11 f4       	brne	.+4      	; 0x3de2 <__fp_mintl+0x18>
    3dde:	99 27       	eor	r25, r25
    3de0:	0d c0       	rjmp	.+26     	; 0x3dfc <__fp_mintl+0x32>
    3de2:	90 51       	subi	r25, 0x10	; 16
    3de4:	86 2b       	or	r24, r22
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	60 e0       	ldi	r22, 0x00	; 0
    3dea:	2a f0       	brmi	.+10     	; 0x3df6 <__fp_mintl+0x2c>
    3dec:	9a 95       	dec	r25
    3dee:	66 0f       	add	r22, r22
    3df0:	77 1f       	adc	r23, r23
    3df2:	88 1f       	adc	r24, r24
    3df4:	da f7       	brpl	.-10     	; 0x3dec <__fp_mintl+0x22>
    3df6:	88 0f       	add	r24, r24
    3df8:	96 95       	lsr	r25
    3dfa:	87 95       	ror	r24
    3dfc:	97 f9       	bld	r25, 7
    3dfe:	08 95       	ret

00003e00 <__fp_mpack>:
    3e00:	9f 3f       	cpi	r25, 0xFF	; 255
    3e02:	31 f0       	breq	.+12     	; 0x3e10 <__fp_mpack_finite+0xc>

00003e04 <__fp_mpack_finite>:
    3e04:	91 50       	subi	r25, 0x01	; 1
    3e06:	20 f4       	brcc	.+8      	; 0x3e10 <__fp_mpack_finite+0xc>
    3e08:	87 95       	ror	r24
    3e0a:	77 95       	ror	r23
    3e0c:	67 95       	ror	r22
    3e0e:	b7 95       	ror	r27
    3e10:	88 0f       	add	r24, r24
    3e12:	91 1d       	adc	r25, r1
    3e14:	96 95       	lsr	r25
    3e16:	87 95       	ror	r24
    3e18:	97 f9       	bld	r25, 7
    3e1a:	08 95       	ret

00003e1c <__fp_trunc>:
    3e1c:	45 d0       	rcall	.+138    	; 0x3ea8 <__fp_splitA>
    3e1e:	a0 f0       	brcs	.+40     	; 0x3e48 <__fp_trunc+0x2c>
    3e20:	be e7       	ldi	r27, 0x7E	; 126
    3e22:	b9 17       	cp	r27, r25
    3e24:	88 f4       	brcc	.+34     	; 0x3e48 <__fp_trunc+0x2c>
    3e26:	bb 27       	eor	r27, r27
    3e28:	9f 38       	cpi	r25, 0x8F	; 143
    3e2a:	60 f4       	brcc	.+24     	; 0x3e44 <__fp_trunc+0x28>
    3e2c:	16 16       	cp	r1, r22
    3e2e:	b1 1d       	adc	r27, r1
    3e30:	67 2f       	mov	r22, r23
    3e32:	78 2f       	mov	r23, r24
    3e34:	88 27       	eor	r24, r24
    3e36:	98 5f       	subi	r25, 0xF8	; 248
    3e38:	f7 cf       	rjmp	.-18     	; 0x3e28 <__fp_trunc+0xc>
    3e3a:	86 95       	lsr	r24
    3e3c:	77 95       	ror	r23
    3e3e:	67 95       	ror	r22
    3e40:	b1 1d       	adc	r27, r1
    3e42:	93 95       	inc	r25
    3e44:	96 39       	cpi	r25, 0x96	; 150
    3e46:	c8 f3       	brcs	.-14     	; 0x3e3a <__fp_trunc+0x1e>
    3e48:	08 95       	ret

00003e4a <__fp_zero>:
    3e4a:	e8 94       	clt

00003e4c <__fp_szero>:
    3e4c:	bb 27       	eor	r27, r27
    3e4e:	66 27       	eor	r22, r22
    3e50:	77 27       	eor	r23, r23
    3e52:	cb 01       	movw	r24, r22
    3e54:	97 f9       	bld	r25, 7
    3e56:	08 95       	ret

00003e58 <round>:
    3e58:	27 d0       	rcall	.+78     	; 0x3ea8 <__fp_splitA>
    3e5a:	e0 f0       	brcs	.+56     	; 0x3e94 <round+0x3c>
    3e5c:	9e 37       	cpi	r25, 0x7E	; 126
    3e5e:	d8 f0       	brcs	.+54     	; 0x3e96 <round+0x3e>
    3e60:	96 39       	cpi	r25, 0x96	; 150
    3e62:	b8 f4       	brcc	.+46     	; 0x3e92 <round+0x3a>
    3e64:	9e 38       	cpi	r25, 0x8E	; 142
    3e66:	48 f4       	brcc	.+18     	; 0x3e7a <round+0x22>
    3e68:	67 2f       	mov	r22, r23
    3e6a:	78 2f       	mov	r23, r24
    3e6c:	88 27       	eor	r24, r24
    3e6e:	98 5f       	subi	r25, 0xF8	; 248
    3e70:	f9 cf       	rjmp	.-14     	; 0x3e64 <round+0xc>
    3e72:	86 95       	lsr	r24
    3e74:	77 95       	ror	r23
    3e76:	67 95       	ror	r22
    3e78:	93 95       	inc	r25
    3e7a:	95 39       	cpi	r25, 0x95	; 149
    3e7c:	d0 f3       	brcs	.-12     	; 0x3e72 <round+0x1a>
    3e7e:	b6 2f       	mov	r27, r22
    3e80:	b1 70       	andi	r27, 0x01	; 1
    3e82:	6b 0f       	add	r22, r27
    3e84:	71 1d       	adc	r23, r1
    3e86:	81 1d       	adc	r24, r1
    3e88:	20 f4       	brcc	.+8      	; 0x3e92 <round+0x3a>
    3e8a:	87 95       	ror	r24
    3e8c:	77 95       	ror	r23
    3e8e:	67 95       	ror	r22
    3e90:	93 95       	inc	r25
    3e92:	9b cf       	rjmp	.-202    	; 0x3dca <__fp_mintl>
    3e94:	b5 cf       	rjmp	.-150    	; 0x3e00 <__fp_mpack>
    3e96:	da cf       	rjmp	.-76     	; 0x3e4c <__fp_szero>

00003e98 <__fp_split3>:
    3e98:	57 fd       	sbrc	r21, 7
    3e9a:	90 58       	subi	r25, 0x80	; 128
    3e9c:	44 0f       	add	r20, r20
    3e9e:	55 1f       	adc	r21, r21
    3ea0:	59 f0       	breq	.+22     	; 0x3eb8 <__fp_splitA+0x10>
    3ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ea4:	71 f0       	breq	.+28     	; 0x3ec2 <__fp_splitA+0x1a>
    3ea6:	47 95       	ror	r20

00003ea8 <__fp_splitA>:
    3ea8:	88 0f       	add	r24, r24
    3eaa:	97 fb       	bst	r25, 7
    3eac:	99 1f       	adc	r25, r25
    3eae:	61 f0       	breq	.+24     	; 0x3ec8 <__fp_splitA+0x20>
    3eb0:	9f 3f       	cpi	r25, 0xFF	; 255
    3eb2:	79 f0       	breq	.+30     	; 0x3ed2 <__fp_splitA+0x2a>
    3eb4:	87 95       	ror	r24
    3eb6:	08 95       	ret
    3eb8:	12 16       	cp	r1, r18
    3eba:	13 06       	cpc	r1, r19
    3ebc:	14 06       	cpc	r1, r20
    3ebe:	55 1f       	adc	r21, r21
    3ec0:	f2 cf       	rjmp	.-28     	; 0x3ea6 <__fp_split3+0xe>
    3ec2:	46 95       	lsr	r20
    3ec4:	f1 df       	rcall	.-30     	; 0x3ea8 <__fp_splitA>
    3ec6:	08 c0       	rjmp	.+16     	; 0x3ed8 <__fp_splitA+0x30>
    3ec8:	16 16       	cp	r1, r22
    3eca:	17 06       	cpc	r1, r23
    3ecc:	18 06       	cpc	r1, r24
    3ece:	99 1f       	adc	r25, r25
    3ed0:	f1 cf       	rjmp	.-30     	; 0x3eb4 <__fp_splitA+0xc>
    3ed2:	86 95       	lsr	r24
    3ed4:	71 05       	cpc	r23, r1
    3ed6:	61 05       	cpc	r22, r1
    3ed8:	08 94       	sec
    3eda:	08 95       	ret

00003edc <_exit>:
    3edc:	f8 94       	cli

00003ede <__stop_program>:
    3ede:	ff cf       	rjmp	.-2      	; 0x3ede <__stop_program>
