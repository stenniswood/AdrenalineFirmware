
Analog_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  000035ec  00003680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001df  00800218  00800218  00003798  2**0
                  ALLOC
  3 .stab         00000de0  00000000  00000000  00003798  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e0  00000000  00000000  0000481d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001381  00000000  00000000  00004bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007542  00000000  00000000  00005f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e0b  00000000  00000000  0000d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004abe  00000000  00000000  000102cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cd0  00000000  00000000  00014d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021ab  00000000  00000000  00015a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d9b  00000000  00000000  00017c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000960  00000000  00000000  0001a9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002f8  00000000  00000000  0001b302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_23>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__vector_26>
      6c:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ee       	ldi	r30, 0xEC	; 236
      a0:	f5 e3       	ldi	r31, 0x35	; 53
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a8 31       	cpi	r26, 0x18	; 24
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a8 e1       	ldi	r26, 0x18	; 24
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a7 3f       	cpi	r26, 0xF7	; 247
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 87 00 	call	0x10e	; 0x10e <main>
      c2:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z4initv>:

bool okay_to_read_cal = false;

void init()
{
 	cli();
      ca:	f8 94       	cli
    chip_init  ( );	    			/* Chip initialization			*/
      cc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_Z9chip_initv>
	init_leds  ( );
      d0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_Z9init_ledsv>
	delay	   (1000000);			/* ~ 2 sec						*/
      d4:	60 e4       	ldi	r22, 0x40	; 64
      d6:	72 e4       	ldi	r23, 0x42	; 66
      d8:	8f e0       	ldi	r24, 0x0F	; 15
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 2a 10 	call	0x2054	; 0x2054 <_Z5delayl>
	read_configuration   ( );
      e0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_Z18read_configurationv>
	can_init   (CAN_250K_BAUD);		/* Enables Mob0 for Reception!	*/	
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 27 07 	call	0xe4e	; 0xe4e <_Z8can_inith>

	config_init		 ( );
      ea:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_Z11config_initv>
	can_instance_init( );
      ee:	0e 94 11 08 	call	0x1022	; 0x1022 <_Z17can_instance_initv>
	an_init    		 ( );			/* Analog SPI module init 		*/
      f2:	0e 94 cb 02 	call	0x596	; 0x596 <_Z7an_initv>

    set_rx_callback			( can_file_message );
      f6:	88 e9       	ldi	r24, 0x98	; 152
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 00 04 	call	0x800	; 0x800 <_Z15set_rx_callbackPFvP4sCANE>
	set_configure_callback	( config_change    );
      fe:	8c ea       	ldi	r24, 0xAC	; 172
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z22set_configure_callbackPFvhE>

	sei		   ( );
     106:	78 94       	sei
	OS_InitTask();	
     108:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_Z11OS_InitTaskv>
}
     10c:	08 95       	ret

0000010e <main>:
	Mask of Active signals - 8 bytes (4 x 16 bit mask Analog Chip 1,2,3,4)
	Right now read all and send all!
*/
int main(void)
{	
	init();
     10e:	0e 94 65 00 	call	0xca	; 0xca <_Z4initv>

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
     112:	80 91 f1 03 	lds	r24, 0x03F1
    while (1)
    {    
		/* OS_Dispatch reads ALL ACTIVE ANALOG SIGNALS.
			sends CAN report msgs periodically */		
		if (isSysConfigured(CAN_NEW_BOARD))		
     116:	80 fd       	sbrc	r24, 0
     118:	07 c0       	rjmp	.+14     	; 0x128 <main+0x1a>
			led_on(4);
		else 
			led_off(4);
     11a:	84 e0       	ldi	r24, 0x04	; 4
     11c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_Z7led_offh>
     120:	80 91 f1 03 	lds	r24, 0x03F1
	init();
    while (1)
    {    
		/* OS_Dispatch reads ALL ACTIVE ANALOG SIGNALS.
			sends CAN report msgs periodically */		
		if (isSysConfigured(CAN_NEW_BOARD))		
     124:	80 ff       	sbrs	r24, 0
     126:	f9 cf       	rjmp	.-14     	; 0x11a <main+0xc>
			led_on(4);
     128:	84 e0       	ldi	r24, 0x04	; 4
     12a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_Z6led_onh>
     12e:	f1 cf       	rjmp	.-30     	; 0x112 <main+0x4>

00000130 <_Z16can_file_messageP4sCAN>:


void can_file_message( sCAN* mMsg )
{
	// Analog board is mostly a transmitter!
}
     130:	08 95       	ret

00000132 <_Z19can_prep_analog_msgP4sCANjh>:
/* Package up the Analog readings into CAN message 
	1 Channel per CAN message.
	Optionally may have the derivative of the channel.
*/
void can_prep_analog_msg( sCAN* mMsg, uint16_t mReading, byte mMeasurementIndex )
{
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	df 93       	push	r29
     13c:	cf 93       	push	r28
     13e:	0f 92       	push	r0
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	7c 01       	movw	r14, r24
     146:	16 2f       	mov	r17, r22
     148:	07 2f       	mov	r16, r23
    mMsg->id 	  = create_CAN_eid(ID_ANALOG_MEASUREMENT, MyInstance); 
     14a:	80 ea       	ldi	r24, 0xA0	; 160
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	60 91 6e 03 	lds	r22, 0x036E
     152:	49 83       	std	Y+1, r20	; 0x01
     154:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
     158:	dc 01       	movw	r26, r24
     15a:	cb 01       	movw	r24, r22
     15c:	f7 01       	movw	r30, r14
     15e:	80 83       	st	Z, r24
     160:	91 83       	std	Z+1, r25	; 0x01
     162:	a2 83       	std	Z+2, r26	; 0x02
     164:	b3 83       	std	Z+3, r27	; 0x03
    mMsg->data[0] = mMeasurementIndex;
     166:	49 81       	ldd	r20, Y+1	; 0x01
     168:	45 83       	std	Z+5, r20	; 0x05
    mMsg->data[1] = hi(mReading);
     16a:	06 83       	std	Z+6, r16	; 0x06
    mMsg->data[2] = lo(mReading);     
     16c:	17 83       	std	Z+7, r17	; 0x07
    mMsg->header.DLC = 3;
     16e:	84 81       	ldd	r24, Z+4	; 0x04
     170:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     172:	86 60       	ori	r24, 0x06	; 6
     174:	84 83       	std	Z+4, r24	; 0x04
    //mMsg->data[0] = mCounter;   
}
     176:	0f 90       	pop	r0
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	ff 90       	pop	r15
     182:	ef 90       	pop	r14
     184:	08 95       	ret

00000186 <_Z30can_prep_analog_derivative_msgP4sCANhjj>:

void can_prep_analog_derivative_msg( sCAN* mMsg, 
							byte     mMeasurementIndex,
							uint16_t mReading, 
							uint16_t mReadingPrev )
{
     186:	df 92       	push	r13
     188:	ef 92       	push	r14
     18a:	ff 92       	push	r15
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	ec 01       	movw	r28, r24
     196:	d6 2e       	mov	r13, r22
     198:	8a 01       	movw	r16, r20
     19a:	79 01       	movw	r14, r18
    mMsg->id 	  = create_CAN_eid(ID_ANALOG_MEASUREMENT, MyInstance); 
     19c:	80 ea       	ldi	r24, 0xA0	; 160
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	60 91 6e 03 	lds	r22, 0x036E
     1a4:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
     1a8:	68 83       	st	Y, r22
     1aa:	79 83       	std	Y+1, r23	; 0x01
     1ac:	8a 83       	std	Y+2, r24	; 0x02
     1ae:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = mMeasurementIndex;
     1b0:	dd 82       	std	Y+5, r13	; 0x05
    mMsg->data[1] = hi(mReading  );
     1b2:	1e 83       	std	Y+6, r17	; 0x06
    mMsg->data[2] = lo(mReading  );     
     1b4:	0f 83       	std	Y+7, r16	; 0x07
    short diff = (mReading - mReadingPrev);
     1b6:	0e 19       	sub	r16, r14
     1b8:	1f 09       	sbc	r17, r15
    mMsg->data[3] = hi(diff);   
     1ba:	18 87       	std	Y+8, r17	; 0x08
    mMsg->data[4] = lo(diff);   
     1bc:	09 87       	std	Y+9, r16	; 0x09
    mMsg->header.DLC = 5;
     1be:	8c 81       	ldd	r24, Y+4	; 0x04
     1c0:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     1c2:	8a 60       	ori	r24, 0x0A	; 10
     1c4:	8c 83       	std	Y+4, r24	; 0x04
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	df 90       	pop	r13
     1d4:	08 95       	ret

000001d6 <_Z20can_send_analog_msgsv>:
					//can_send_msg_no_wait( 0, &tcan );
					can_send_msg( 0, &tcan );
				}
			}
	} */
}
     1d6:	08 95       	ret

000001d8 <_Z12can_send_onehh>:

/* Sends Just 1 Analog channel */
void can_send_one(byte mChip, byte mchan)
{
	byte index = 0;
	byte test = (MODE_SEND_DERIVATIVES_1<<mChip);
     1d8:	e8 2f       	mov	r30, r24
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	20 e1       	ldi	r18, 0x10	; 16
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <_Z12can_send_onehh+0xe>
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	8a 95       	dec	r24
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <_Z12can_send_onehh+0xa>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     1ea:	80 91 ed 03 	lds	r24, 0x03ED
     1ee:	82 23       	and	r24, r18
	if ( isConfigured(test) )
     1f0:	e9 f4       	brne	.+58     	; 0x22c <_Z12can_send_onehh+0x54>
		can_send_msg( 0, &tcan );
	}
	else 
	{
		index = (mChip<<4) | mchan;	
		can_prep_analog_msg ( &tcan, Readings[mChip*16+mchan], index );
     1f2:	cf 01       	movw	r24, r30
     1f4:	82 95       	swap	r24
     1f6:	92 95       	swap	r25
     1f8:	90 7f       	andi	r25, 0xF0	; 240
     1fa:	98 27       	eor	r25, r24
     1fc:	80 7f       	andi	r24, 0xF0	; 240
     1fe:	98 27       	eor	r25, r24
     200:	fc 01       	movw	r30, r24
     202:	e6 0f       	add	r30, r22
     204:	f1 1d       	adc	r31, r1
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	ef 5c       	subi	r30, 0xCF	; 207
     20c:	fd 4f       	sbci	r31, 0xFD	; 253
     20e:	20 81       	ld	r18, Z
     210:	31 81       	ldd	r19, Z+1	; 0x01
						ReadingsPrev[mChip*16+mchan] );
		can_send_msg( 0, &tcan );
	}
	else 
	{
		index = (mChip<<4) | mchan;	
     212:	46 2f       	mov	r20, r22
     214:	48 2b       	or	r20, r24
		can_prep_analog_msg ( &tcan, Readings[mChip*16+mchan], index );
     216:	89 e1       	ldi	r24, 0x19	; 25
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	b9 01       	movw	r22, r18
     21c:	0e 94 99 00 	call	0x132	; 0x132 <_Z19can_prep_analog_msgP4sCANjh>
		can_send_msg( 0, &tcan );
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	69 e1       	ldi	r22, 0x19	; 25
     224:	72 e0       	ldi	r23, 0x02	; 2
     226:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_Z12can_send_msghP4sCAN>
     22a:	08 95       	ret
	byte test = (MODE_SEND_DERIVATIVES_1<<mChip);
	if ( isConfigured(test) )
	{
		can_prep_analog_derivative_msg( &tcan, mchan,
						Readings[mChip*16+mchan],
						ReadingsPrev[mChip*16+mchan] );
     22c:	cf 01       	movw	r24, r30
     22e:	82 95       	swap	r24
     230:	92 95       	swap	r25
     232:	90 7f       	andi	r25, 0xF0	; 240
     234:	98 27       	eor	r25, r24
     236:	80 7f       	andi	r24, 0xF0	; 240
     238:	98 27       	eor	r25, r24
     23a:	86 0f       	add	r24, r22
     23c:	91 1d       	adc	r25, r1
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	dc 01       	movw	r26, r24
     244:	af 5c       	subi	r26, 0xCF	; 207
     246:	bd 4f       	sbci	r27, 0xFD	; 253
     248:	4d 91       	ld	r20, X+
     24a:	5c 91       	ld	r21, X
     24c:	dc 01       	movw	r26, r24
     24e:	af 54       	subi	r26, 0x4F	; 79
     250:	bd 4f       	sbci	r27, 0xFD	; 253
     252:	2d 91       	ld	r18, X+
     254:	3c 91       	ld	r19, X
     256:	89 e1       	ldi	r24, 0x19	; 25
     258:	92 e0       	ldi	r25, 0x02	; 2
     25a:	0e 94 c3 00 	call	0x186	; 0x186 <_Z30can_prep_analog_derivative_msgP4sCANhjj>
		can_send_msg( 0, &tcan );
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	69 e1       	ldi	r22, 0x19	; 25
     262:	72 e0       	ldi	r23, 0x02	; 2
     264:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_Z12can_send_msghP4sCAN>
     268:	08 95       	ret

0000026a <_Z18can_send_timeslicev>:
}

static short ReportCounter = 1;		// when zero sends update

void can_send_timeslice()
{
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	80 91 ed 03 	lds	r24, 0x03ED
     272:	8f 70       	andi	r24, 0x0F	; 15
	byte   configd;
	static byte chip = 0;
	byte   channel = 0;

	if (isConfigured(0x0F)==0)		// No chips enabled...
     274:	19 f4       	brne	.+6      	; 0x27c <_Z18can_send_timeslicev+0x12>
			} while ( !configd );

			led_off(2);
		}
	}
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret
	byte   channel = 0;

	if (isConfigured(0x0F)==0)		// No chips enabled...
		return;

	if (isReportingEnabled())
     27c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z18isReportingEnabledv>
     280:	88 23       	and	r24, r24
     282:	c9 f3       	breq	.-14     	; 0x276 <_Z18can_send_timeslicev+0xc>
	{
		ReportCounter--;
     284:	80 91 00 01 	lds	r24, 0x0100
     288:	90 91 01 01 	lds	r25, 0x0101
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	90 93 01 01 	sts	0x0101, r25
     292:	80 93 00 01 	sts	0x0100, r24
		if (ReportCounter<=0)			// Time To Report ? 
     296:	18 16       	cp	r1, r24
     298:	19 06       	cpc	r1, r25
     29a:	6c f3       	brlt	.-38     	; 0x276 <_Z18can_send_timeslicev+0xc>
		{ 
			ReportCounter = getReportRate();	// Refill
     29c:	0e 94 b3 01 	call	0x366	; 0x366 <_Z13getReportRatev>
     2a0:	80 93 00 01 	sts	0x0100, r24
     2a4:	10 92 01 01 	sts	0x0101, r1
			led_on(2);
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_Z6led_onh>

			// TRANSMIT ALL CHANNELS FOR A GIVEN CHIP:
			byte channels = get_num_channels(chip);
     2ae:	80 91 28 02 	lds	r24, 0x0228
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 19 03 	call	0x632	; 0x632 <_Z16get_num_channelsi>
     2b8:	d8 2f       	mov	r29, r24

void can_send_timeslice()
{
	byte   configd;
	static byte chip = 0;
	byte   channel = 0;
     2ba:	c0 e0       	ldi	r28, 0x00	; 0
			led_on(2);

			// TRANSMIT ALL CHANNELS FOR A GIVEN CHIP:
			byte channels = get_num_channels(chip);
			do {
				can_send_one( chip, channel );
     2bc:	80 91 28 02 	lds	r24, 0x0228
     2c0:	6c 2f       	mov	r22, r28
     2c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z12can_send_onehh>
				channel++;
     2c6:	cf 5f       	subi	r28, 0xFF	; 255
			ReportCounter = getReportRate();	// Refill
			led_on(2);

			// TRANSMIT ALL CHANNELS FOR A GIVEN CHIP:
			byte channels = get_num_channels(chip);
			do {
     2c8:	cd 17       	cp	r28, r29
     2ca:	c0 f3       	brcs	.-16     	; 0x2bc <_Z18can_send_timeslicev+0x52>
     2cc:	90 91 28 02 	lds	r25, 0x0228
     2d0:	50 91 ed 03 	lds	r21, 0x03ED
			} while (channel < channels);
		
			// Prepare for Next Chip!
			do {
				chip++;
				if (chip>3) chip = 0;
     2d4:	21 e0       	ldi	r18, 0x01	; 1
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	0a c0       	rjmp	.+20     	; 0x2ee <_Z18can_send_timeslicev+0x84>
     2da:	c9 01       	movw	r24, r18
     2dc:	04 2e       	mov	r0, r20
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <_Z18can_send_timeslicev+0x7a>
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	0a 94       	dec	r0
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <_Z18can_send_timeslicev+0x76>
     2e8:	94 2f       	mov	r25, r20
     2ea:	85 23       	and	r24, r21
				can_send_one( chip, channel );
				channel++;
			} while (channel < channels);
		
			// Prepare for Next Chip!
			do {
     2ec:	41 f4       	brne	.+16     	; 0x2fe <_Z18can_send_timeslicev+0x94>
				chip++;
     2ee:	49 2f       	mov	r20, r25
     2f0:	4f 5f       	subi	r20, 0xFF	; 255
				if (chip>3) chip = 0;
     2f2:	44 30       	cpi	r20, 0x04	; 4
     2f4:	90 f3       	brcs	.-28     	; 0x2da <_Z18can_send_timeslicev+0x70>
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	f6 cf       	rjmp	.-20     	; 0x2ea <_Z18can_send_timeslicev+0x80>
				can_send_one( chip, channel );
				channel++;
			} while (channel < channels);
		
			// Prepare for Next Chip!
			do {
     2fe:	40 93 28 02 	sts	0x0228, r20
				chip++;
				if (chip>3) chip = 0;
				configd = isConfigured( 1<<chip );
			} while ( !configd );

			led_off(2);
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_Z7led_offh>
     308:	b6 cf       	rjmp	.-148    	; 0x276 <_Z18can_send_timeslicev+0xc>

0000030a <_Z17can_init_test_msgv>:
	}
}

void can_init_test_msg()
{
    msg1.id 	 = create_CAN_eid( ID_ANALOG_MEASUREMENT, MyInstance );
     30a:	80 ea       	ldi	r24, 0xA0	; 160
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	60 91 6e 03 	lds	r22, 0x036E
     312:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
     316:	60 93 33 03 	sts	0x0333, r22
     31a:	70 93 34 03 	sts	0x0334, r23
     31e:	80 93 35 03 	sts	0x0335, r24
     322:	90 93 36 03 	sts	0x0336, r25
    msg1.data[0] = 0xA0;
     326:	80 ea       	ldi	r24, 0xA0	; 160
     328:	80 93 38 03 	sts	0x0338, r24
    msg1.data[1] = 0x55;
     32c:	85 e5       	ldi	r24, 0x55	; 85
     32e:	80 93 39 03 	sts	0x0339, r24
    msg1.data[2] = 0xA1;
     332:	91 ea       	ldi	r25, 0xA1	; 161
     334:	90 93 3a 03 	sts	0x033A, r25
    msg1.data[3] = 0x55;    
     338:	80 93 3b 03 	sts	0x033B, r24
    msg1.header.DLC = 4;
     33c:	80 91 37 03 	lds	r24, 0x0337
     340:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     342:	88 60       	ori	r24, 0x08	; 8
     344:	80 93 37 03 	sts	0x0337, r24
}
     348:	08 95       	ret

0000034a <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
*******************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0x01;		// Enable just chip #1
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 ed 03 	sts	0x03ED, r24
	config_byte_2 = 0x81;
     350:	81 e8       	ldi	r24, 0x81	; 129
     352:	80 93 ee 03 	sts	0x03EE, r24
	
}
     356:	08 95       	ret

00000358 <_Z13config_changeh>:
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
	{
	}
}
     358:	08 95       	ret

0000035a <_Z8save_calv>:
***********************************************************/
byte* save_cal()
{
	//byte* addr = CONFIGURATION_EEPROM_ADDRESS;
	//save_instance_eeprom();
	byte* addr = save_configuration();
     35a:	0e 94 00 12 	call	0x2400	; 0x2400 <_Z18save_configurationv>
//	addr = save_configuration_eeprom	(addr);
	return addr;
};
     35e:	08 95       	ret

00000360 <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	//byte* addr = CONFIGURATION_EEPROM_ADDRESS;
	byte*  addr = read_configuration();
     360:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_Z18read_configurationv>
//	addr        = read_configuration_eeprom(addr);
	return addr;
};
     364:	08 95       	ret

00000366 <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     366:	80 91 ee 03 	lds	r24, 0x03EE
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	80 7f       	andi	r24, 0xF0	; 240
     36e:	90 70       	andi	r25, 0x00	; 0
     370:	80 32       	cpi	r24, 0x20	; 32
     372:	91 05       	cpc	r25, r1
     374:	91 f0       	breq	.+36     	; 0x39a <_Z13getReportRatev+0x34>
     376:	81 32       	cpi	r24, 0x21	; 33
     378:	91 05       	cpc	r25, r1
     37a:	44 f0       	brlt	.+16     	; 0x38c <_Z13getReportRatev+0x26>
     37c:	80 34       	cpi	r24, 0x40	; 64
     37e:	91 05       	cpc	r25, r1
     380:	51 f0       	breq	.+20     	; 0x396 <_Z13getReportRatev+0x30>
     382:	80 38       	cpi	r24, 0x80	; 128
     384:	91 05       	cpc	r25, r1
     386:	29 f4       	brne	.+10     	; 0x392 <_Z13getReportRatev+0x2c>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
     388:	84 e1       	ldi	r24, 0x14	; 20
     38a:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     38c:	80 31       	cpi	r24, 0x10	; 16
     38e:	91 05       	cpc	r25, r1
     390:	31 f0       	breq	.+12     	; 0x39e <_Z13getReportRatev+0x38>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
     396:	8a e0       	ldi	r24, 0x0A	; 10
     398:	08 95       	ret
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
     39a:	84 e0       	ldi	r24, 0x04	; 4
     39c:	08 95       	ret
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
     39e:	82 e0       	ldi	r24, 0x02	; 2
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
	default: return -1;  break;
	}
}	
     3a0:	08 95       	ret

000003a2 <_Z18isReportingEnabledv>:

BOOL isReportingEnabled()
{
	if ( (config_byte_2 & 0xF0) != MODE_SEND_UPDATES_NONE )
     3a2:	90 91 ee 03 	lds	r25, 0x03EE
     3a6:	90 7f       	andi	r25, 0xF0	; 240
		return TRUE;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	09 f4       	brne	.+2      	; 0x3ae <_Z18isReportingEnabledv+0xc>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
	else
		return FALSE;
}
     3ae:	08 95       	ret

000003b0 <_Z22enable_pin_change_intsv>:
}

void enable_pin_change_ints()
{
	// ENABLE PIN CHANGE INTERRUPT:
	PCICR |= 0x02;		// pcint[8..15]
     3b0:	e8 e6       	ldi	r30, 0x68	; 104
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	82 60       	ori	r24, 0x02	; 2
     3b8:	80 83       	st	Z, r24
}
     3ba:	08 95       	ret

000003bc <_Z23disable_pin_change_intsv>:
void disable_pin_change_ints()
{
	// DISABLE PIN CHANGE INTERRUPT:
	PCICR &= ~(0x02);	// pcint[8..15]
     3bc:	e8 e6       	ldi	r30, 0x68	; 104
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	8d 7f       	andi	r24, 0xFD	; 253
     3c4:	80 83       	st	Z, r24
}
     3c6:	08 95       	ret

000003c8 <_Z11select_chiph>:

void select_chip(byte mChip)		
{
	switch (mChip)
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	59 f0       	breq	.+22     	; 0x3e2 <_Z11select_chiph+0x1a>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	28 f0       	brcs	.+10     	; 0x3da <_Z11select_chiph+0x12>
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	49 f0       	breq	.+18     	; 0x3e6 <_Z11select_chiph+0x1e>
     3d4:	83 30       	cpi	r24, 0x03	; 3
     3d6:	19 f0       	breq	.+6      	; 0x3de <_Z11select_chiph+0x16>
     3d8:	08 95       	ret
	{
	case 0 : CS_PORT &= ~(1<<CS_A1);			 break;
     3da:	2b 98       	cbi	0x05, 3	; 5
     3dc:	08 95       	ret
	case 1 : CS_PORT &= ~(1<<CS_A2);			 break;
	case 2 : CS_PORT &= ~(1<<CS_A3);			 break;
	case 3 : CS_PORT &= ~(1<<CS_A4);			 break;
     3de:	2e 98       	cbi	0x05, 6	; 5
     3e0:	08 95       	ret
void select_chip(byte mChip)		
{
	switch (mChip)
	{
	case 0 : CS_PORT &= ~(1<<CS_A1);			 break;
	case 1 : CS_PORT &= ~(1<<CS_A2);			 break;
     3e2:	2c 98       	cbi	0x05, 4	; 5
     3e4:	08 95       	ret
	case 2 : CS_PORT &= ~(1<<CS_A3);			 break;
     3e6:	2d 98       	cbi	0x05, 5	; 5
     3e8:	08 95       	ret

000003ea <_Z13deselect_chiph>:
	}
}

void deselect_chip( byte mChip )
{
	switch (mChip)
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	59 f0       	breq	.+22     	; 0x404 <_Z13deselect_chiph+0x1a>
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	28 f0       	brcs	.+10     	; 0x3fc <_Z13deselect_chiph+0x12>
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	49 f0       	breq	.+18     	; 0x408 <_Z13deselect_chiph+0x1e>
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	19 f0       	breq	.+6      	; 0x400 <_Z13deselect_chiph+0x16>
     3fa:	08 95       	ret
	{
	case 0 : CS_PORT |= (1<<CS_A1);			 break;
     3fc:	2b 9a       	sbi	0x05, 3	; 5
     3fe:	08 95       	ret
	case 1 : CS_PORT |= (1<<CS_A2);			 break;
	case 2 : CS_PORT |= (1<<CS_A3);			 break;
	case 3 : CS_PORT |= (1<<CS_A4);			 break;
     400:	2e 9a       	sbi	0x05, 6	; 5
     402:	08 95       	ret
void deselect_chip( byte mChip )
{
	switch (mChip)
	{
	case 0 : CS_PORT |= (1<<CS_A1);			 break;
	case 1 : CS_PORT |= (1<<CS_A2);			 break;
     404:	2c 9a       	sbi	0x05, 4	; 5
     406:	08 95       	ret
	case 2 : CS_PORT |= (1<<CS_A3);			 break;
     408:	2d 9a       	sbi	0x05, 5	; 5
     40a:	08 95       	ret

0000040c <_Z8an_reseth>:
		an_averaging_off( i );
	}
}

void an_reset(byte mChip)		
{
     40c:	cf 93       	push	r28
     40e:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     410:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
	spi_transfer( 0x10 );	// hard reset.	
     414:	80 e1       	ldi	r24, 0x10	; 16
     416:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
	deselect_chip(mChip);
     41a:	8c 2f       	mov	r24, r28
     41c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
}
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <_Z12an_reset_allv>:
}

void an_reset_all()  
{
	for (int i=0; i<4; i++)
		an_reset(i);
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 06 02 	call	0x40c	; 0x40c <_Z8an_reseth>
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	0e 94 06 02 	call	0x40c	; 0x40c <_Z8an_reseth>
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	0e 94 06 02 	call	0x40c	; 0x40c <_Z8an_reseth>
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	0e 94 06 02 	call	0x40c	; 0x40c <_Z8an_reseth>
}
     43c:	08 95       	ret

0000043e <_Z17get_chip_readingsh>:
/*
	Reads the values from the middle of the SPI data stream.
	Does not send any commands.
*/
void get_chip_readings( byte mChip )
{
     43e:	9f 92       	push	r9
     440:	af 92       	push	r10
     442:	bf 92       	push	r11
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	b8 2e       	mov	r11, r24

/*
	Reads the values from the middle of the SPI data stream.
	Does not send any commands.
*/
void get_chip_readings( byte mChip )
     456:	08 2f       	mov	r16, r24
     458:	10 e0       	ldi	r17, 0x00	; 0
     45a:	00 0f       	add	r16, r16
     45c:	11 1f       	adc	r17, r17
     45e:	02 95       	swap	r16
     460:	12 95       	swap	r17
     462:	10 7f       	andi	r17, 0xF0	; 240
     464:	10 27       	eor	r17, r16
     466:	00 7f       	andi	r16, 0xF0	; 240
     468:	10 27       	eor	r17, r16
     46a:	91 eb       	ldi	r25, 0xB1	; 177
     46c:	e9 2e       	mov	r14, r25
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	f9 2e       	mov	r15, r25
     472:	e0 0e       	add	r14, r16
     474:	f1 1e       	adc	r15, r17
     476:	0f 5c       	subi	r16, 0xCF	; 207
     478:	1d 4f       	sbci	r17, 0xFD	; 253
     47a:	c0 e1       	ldi	r28, 0x10	; 16
     47c:	d0 e0       	ldi	r29, 0x00	; 0
{
	// READ RESULT:
	for (int c=0; c<16; c++)
	{
		select_chip(mChip);
     47e:	8b 2d       	mov	r24, r11
     480:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
		byte upper = spi_transfer( 0x00 );
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
     48a:	98 2e       	mov	r9, r24
		deselect_chip(mChip);
     48c:	8b 2d       	mov	r24, r11
     48e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
		
		select_chip(mChip);
     492:	8b 2d       	mov	r24, r11
     494:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
		byte lower = spi_transfer( 0x00 );
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
     49e:	a8 2e       	mov	r10, r24
		deselect_chip(mChip);
     4a0:	8b 2d       	mov	r24, r11
     4a2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
		
		word result = (((word)upper)<<8) + (lower);
     4a6:	d9 2c       	mov	r13, r9
     4a8:	cc 24       	eor	r12, r12
     4aa:	96 01       	movw	r18, r12
     4ac:	2a 0d       	add	r18, r10
     4ae:	31 1d       	adc	r19, r1
		result = (result>>2);

		// STORE RESULT : 
		ReadingsPrev[mChip*16+c] = Readings[mChip*16+c];
     4b0:	f8 01       	movw	r30, r16
     4b2:	40 81       	ld	r20, Z
     4b4:	51 81       	ldd	r21, Z+1	; 0x01
     4b6:	f7 01       	movw	r30, r14
     4b8:	41 93       	st	Z+, r20
     4ba:	51 93       	st	Z+, r21
     4bc:	7f 01       	movw	r14, r30
		select_chip(mChip);
		byte lower = spi_transfer( 0x00 );
		deselect_chip(mChip);
		
		word result = (((word)upper)<<8) + (lower);
		result = (result>>2);
     4be:	36 95       	lsr	r19
     4c0:	27 95       	ror	r18
     4c2:	36 95       	lsr	r19
     4c4:	27 95       	ror	r18

		// STORE RESULT : 
		ReadingsPrev[mChip*16+c] = Readings[mChip*16+c];
		Readings    [mChip*16+c] = result;
     4c6:	f8 01       	movw	r30, r16
     4c8:	21 93       	st	Z+, r18
     4ca:	31 93       	st	Z+, r19
     4cc:	8f 01       	movw	r16, r30
     4ce:	21 97       	sbiw	r28, 0x01	; 1
	Does not send any commands.
*/
void get_chip_readings( byte mChip )
{
	// READ RESULT:
	for (int c=0; c<16; c++)
     4d0:	b1 f6       	brne	.-84     	; 0x47e <_Z17get_chip_readingsh+0x40>

		// STORE RESULT : 
		ReadingsPrev[mChip*16+c] = Readings[mChip*16+c];
		Readings    [mChip*16+c] = result;
	}
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	bf 90       	pop	r11
     4e4:	af 90       	pop	r10
     4e6:	9f 90       	pop	r9
     4e8:	08 95       	ret

000004ea <_Z13an_conversionhh>:
	mChip	   [1..4]	  there are 4 Analog chips on board.
	mChannel - [0 to 15]  the number of channels to read.
			   [4, 8, 16] 
*/
void an_conversion(byte mChip, byte mChannel)
{
     4ea:	1f 93       	push	r17
     4ec:	df 93       	push	r29
     4ee:	cf 93       	push	r28
     4f0:	0f 92       	push	r0
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	18 2f       	mov	r17, r24
	select_chip(mChip);
     4f8:	69 83       	std	Y+1, r22	; 0x01
     4fa:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
	byte channel   = (mChannel<<3);
     4fe:	69 81       	ldd	r22, Y+1	; 0x01
     500:	86 2f       	mov	r24, r22
     502:	88 0f       	add	r24, r24
     504:	88 0f       	add	r24, r24
     506:	88 0f       	add	r24, r24
	byte scan_mode = SCAN_0_to_N;
	spi_transfer( 0x80|channel|scan_mode );
     508:	80 68       	ori	r24, 0x80	; 128
     50a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
	deselect_chip(mChip);
     50e:	81 2f       	mov	r24, r17
     510:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
     514:	14 30       	cpi	r17, 0x04	; 4
     516:	80 f4       	brcc	.+32     	; 0x538 <__stack+0x39>
     518:	e1 2f       	mov	r30, r17
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	ee 5f       	subi	r30, 0xFE	; 254
     51e:	fe 4f       	sbci	r31, 0xFE	; 254
     520:	90 81       	ld	r25, Z
		case 1 : eoc_bit = 0x20; break;
		case 2 : eoc_bit = 0x40; break;
		case 3 : eoc_bit = 0x80; break;
		default: eoc_bit = 0x10; break;
	}
	while (EOC_PORT & eoc_bit) {   };
     522:	88 b1       	in	r24, 0x08	; 8
     524:	89 23       	and	r24, r25
     526:	e9 f7       	brne	.-6      	; 0x522 <__stack+0x23>

	// READ RESULTS:
	get_chip_readings( mChip );
     528:	81 2f       	mov	r24, r17
     52a:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z17get_chip_readingsh>

}
     52e:	0f 90       	pop	r0
     530:	cf 91       	pop	r28
     532:	df 91       	pop	r29
     534:	1f 91       	pop	r17
     536:	08 95       	ret
{
	select_chip(mChip);
	byte channel   = (mChannel<<3);
	byte scan_mode = SCAN_0_to_N;
	spi_transfer( 0x80|channel|scan_mode );
	deselect_chip(mChip);
     538:	90 e1       	ldi	r25, 0x10	; 16
     53a:	f3 cf       	rjmp	.-26     	; 0x522 <__stack+0x23>

0000053c <_Z8an_setuph>:
	get_chip_readings( mChip );

}

void an_setup( byte mChip )
{
     53c:	cf 93       	push	r28
     53e:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     540:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
	byte clock_mode = CLK_INT_AIN;
	byte ref_mode 	= REF_ALWAYS_ON;
	spi_transfer( 0x40| clock_mode | ref_mode );
     544:	88 e6       	ldi	r24, 0x68	; 104
     546:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
	deselect_chip(mChip);	
     54a:	8c 2f       	mov	r24, r28
     54c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
} 
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <_Z16an_averaging_offh>:

void an_averaging_off( byte mChip )
{
     554:	cf 93       	push	r28
     556:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     558:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
	spi_transfer( 0x20 );
     55c:	80 e2       	ldi	r24, 0x20	; 32
     55e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
	deselect_chip(mChip);	
     562:	8c 2f       	mov	r24, r28
     564:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
}
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <_Z16an_configure_allv>:
	for (int i=0; i<4; i++)
		an_reset(i);
}

void an_configure_all()  
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
	for (int i=0; i<4; i++)
     570:	c0 e0       	ldi	r28, 0x00	; 0
     572:	d0 e0       	ldi	r29, 0x00	; 0
	{
		an_conversion   ( i, 0 );
     574:	8c 2f       	mov	r24, r28
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	0e 94 75 02 	call	0x4ea	; 0x4ea <_Z13an_conversionhh>
		an_setup        ( i );
     57c:	8c 2f       	mov	r24, r28
     57e:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z8an_setuph>
		an_averaging_off( i );
     582:	8c 2f       	mov	r24, r28
     584:	0e 94 aa 02 	call	0x554	; 0x554 <_Z16an_averaging_offh>
		an_reset(i);
}

void an_configure_all()  
{
	for (int i=0; i<4; i++)
     588:	21 96       	adiw	r28, 0x01	; 1
     58a:	c4 30       	cpi	r28, 0x04	; 4
     58c:	d1 05       	cpc	r29, r1
     58e:	91 f7       	brne	.-28     	; 0x574 <_Z16an_configure_allv+0x8>
	{
		an_conversion   ( i, 0 );
		an_setup        ( i );
		an_averaging_off( i );
	}
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <_Z7an_initv>:

	// Maxim 11621 : 	
	// CS idles high
	// SCLK idles low.  10Mhz or less.
	// CPOL==CPHA  (must equal)
	spi_init( FALSE, TRUE, MSBFIRST, SPI_MODE0 );
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <spi_init>

	// 1 means output;  0 means input;	
	CS_DDR |= CS_DDR_MASK;		// Outputs!
     5a2:	84 b1       	in	r24, 0x04	; 4
     5a4:	88 67       	ori	r24, 0x78	; 120
     5a6:	84 b9       	out	0x04, r24	; 4
	CS_DDR |= 0x80;				// SCLK Output!
     5a8:	27 9a       	sbi	0x04, 7	; 4
	CS_DDR &= 0xFE;
     5aa:	20 98       	cbi	0x04, 0	; 4
	PORTB |= 0x01;
     5ac:	28 9a       	sbi	0x05, 0	; 5

	EOC_DDR &= ~EOC_DDR_MASK;	// Inputs!
     5ae:	87 b1       	in	r24, 0x07	; 7
     5b0:	8f 70       	andi	r24, 0x0F	; 15
     5b2:	87 b9       	out	0x07, r24	; 7
	an_reset_all();
     5b4:	0e 94 12 02 	call	0x424	; 0x424 <_Z12an_reset_allv>
	an_configure_all();
     5b8:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z16an_configure_allv>
	
	//enable_pin_change_ints();
}
     5bc:	08 95       	ret

000005be <_Z15an_averaging_onhh>:
	spi_transfer( 0x20 );
	deselect_chip(mChip);	
}

void an_averaging_on( byte mChip, byte mAverageMask )
{
     5be:	1f 93       	push	r17
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	0f 92       	push	r0
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	18 2f       	mov	r17, r24
	select_chip(mChip);
     5cc:	69 83       	std	Y+1, r22	; 0x01
     5ce:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
	// Not implemented the number results for scan mode 10 - single channel averaging.
	spi_transfer( 0x20| AVG_ON | mAverageMask );
     5d2:	69 81       	ldd	r22, Y+1	; 0x01
     5d4:	86 2f       	mov	r24, r22
     5d6:	80 63       	ori	r24, 0x30	; 48
     5d8:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
	deselect_chip(mChip);	
     5dc:	81 2f       	mov	r24, r17
     5de:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
}
     5e2:	0f 90       	pop	r0
     5e4:	cf 91       	pop	r28
     5e6:	df 91       	pop	r29
     5e8:	1f 91       	pop	r17
     5ea:	08 95       	ret

000005ec <_Z7an_readh>:

word an_read( byte mChip )		
{
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     5f4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11select_chiph>
	byte upper = spi_transfer( 0x00 );
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
     5fe:	18 2f       	mov	r17, r24
	byte lower = spi_transfer( 0x00 );
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <spi_transfer>
     606:	d8 2f       	mov	r29, r24
	deselect_chip(mChip);	
     608:	8c 2f       	mov	r24, r28
     60a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13deselect_chiph>
	word result = (upper<<8);
     60e:	51 2f       	mov	r21, r17
     610:	40 e0       	ldi	r20, 0x00	; 0
	result |= lower;
     612:	2d 2f       	mov	r18, r29
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	24 2b       	or	r18, r20
     618:	35 2b       	or	r19, r21
	return (result>>2);		// 10 bits
     61a:	36 95       	lsr	r19
     61c:	27 95       	ror	r18
     61e:	36 95       	lsr	r19
     620:	27 95       	ror	r18
}
     622:	c9 01       	movw	r24, r18
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	08 95       	ret

0000062c <_Z13an_start_readhh>:
		// 4 leading zeros:  0000
		// 10 bit data:          dddd dddd dd
		// 2 trailing zeros:			     00

	// Start a conversion by writing byte to the conversion register.
	an_conversion(mChip, mChannels);
     62c:	0e 94 75 02 	call	0x4ea	; 0x4ea <_Z13an_conversionhh>
}
     630:	08 95       	ret

00000632 <_Z16get_num_channelsi>:

/* The number of channels as represented by the CONFIG bytes */
byte get_num_channels( int mChip )
{
	byte channels=0;
	byte configd = isConfigured( 1<<mChip );
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	08 2e       	mov	r0, r24
     638:	02 c0       	rjmp	.+4      	; 0x63e <_Z16get_num_channelsi+0xc>
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	0a 94       	dec	r0
     640:	e2 f7       	brpl	.-8      	; 0x63a <_Z16get_num_channelsi+0x8>
     642:	90 91 ed 03 	lds	r25, 0x03ED
     646:	92 23       	and	r25, r18
	if (configd) {
     648:	89 f0       	breq	.+34     	; 0x66c <_Z16get_num_channelsi+0x3a>
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
     64a:	90 91 ef 03 	lds	r25, 0x03EF
		channels=4;
		byte upper8 = isConfigured3( MODE_ENABLE_ADC_CHIP1_UPPER8<<mChip );
     64e:	40 e1       	ldi	r20, 0x10	; 16
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	02 c0       	rjmp	.+4      	; 0x658 <_Z16get_num_channelsi+0x26>
     654:	44 0f       	add	r20, r20
     656:	55 1f       	adc	r21, r21
     658:	8a 95       	dec	r24
     65a:	e2 f7       	brpl	.-8      	; 0x654 <_Z16get_num_channelsi+0x22>
     65c:	49 23       	and	r20, r25
		if (upper8) 
     65e:	21 f4       	brne	.+8      	; 0x668 <_Z16get_num_channelsi+0x36>
     660:	29 23       	and	r18, r25
			channels = 15;
		else {
			byte mid4 = isConfigured3( MODE_ENABLE_ADC_CHIP1_MID4<<mChip );
			if (mid4) 
     662:	31 f0       	breq	.+12     	; 0x670 <_Z16get_num_channelsi+0x3e>
				channels = 8;
     664:	88 e0       	ldi	r24, 0x08	; 8
     666:	08 95       	ret
	byte configd = isConfigured( 1<<mChip );
	if (configd) {
		channels=4;
		byte upper8 = isConfigured3( MODE_ENABLE_ADC_CHIP1_UPPER8<<mChip );
		if (upper8) 
			channels = 15;
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	08 95       	ret
}

/* The number of channels as represented by the CONFIG bytes */
byte get_num_channels( int mChip )
{
	byte channels=0;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	08 95       	ret
	byte configd = isConfigured( 1<<mChip );
	if (configd) {
		channels=4;
     670:	84 e0       	ldi	r24, 0x04	; 4
			if (mid4) 
				channels = 8;
		}
	}
	return channels;
}
     672:	08 95       	ret

00000674 <_Z12an_start_allv>:
/*
	Start conversions on all active Maxim 11624 chips.
	
*/
void an_start_all()
{
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
	byte channels;
	for (int chip=0; chip<4; chip++)
     67c:	c0 e0       	ldi	r28, 0x00	; 0
     67e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		byte configd = isConfigured( 1<<chip );
     680:	01 e0       	ldi	r16, 0x01	; 1
     682:	10 e0       	ldi	r17, 0x00	; 0
     684:	c8 01       	movw	r24, r16
     686:	0c 2e       	mov	r0, r28
     688:	02 c0       	rjmp	.+4      	; 0x68e <_Z12an_start_allv+0x1a>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	0a 94       	dec	r0
     690:	e2 f7       	brpl	.-8      	; 0x68a <_Z12an_start_allv+0x16>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     692:	20 91 ed 03 	lds	r18, 0x03ED
     696:	28 23       	and	r18, r24
		if (configd) {
     698:	49 f4       	brne	.+18     	; 0x6ac <_Z12an_start_allv+0x38>
	
*/
void an_start_all()
{
	byte channels;
	for (int chip=0; chip<4; chip++)
     69a:	21 96       	adiw	r28, 0x01	; 1
     69c:	c4 30       	cpi	r28, 0x04	; 4
     69e:	d1 05       	cpc	r29, r1
     6a0:	89 f7       	brne	.-30     	; 0x684 <_Z12an_start_allv+0x10>
		if (configd) {
			channels = get_num_channels(chip);
			an_start_read(chip, channels);
		}
	}
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret
	byte channels;
	for (int chip=0; chip<4; chip++)
	{
		byte configd = isConfigured( 1<<chip );
		if (configd) {
			channels = get_num_channels(chip);
     6ac:	ce 01       	movw	r24, r28
     6ae:	0e 94 19 03 	call	0x632	; 0x632 <_Z16get_num_channelsi>
     6b2:	68 2f       	mov	r22, r24
		// 4 leading zeros:  0000
		// 10 bit data:          dddd dddd dd
		// 2 trailing zeros:			     00

	// Start a conversion by writing byte to the conversion register.
	an_conversion(mChip, mChannels);
     6b4:	8c 2f       	mov	r24, r28
     6b6:	0e 94 75 02 	call	0x4ea	; 0x4ea <_Z13an_conversionhh>
     6ba:	ef cf       	rjmp	.-34     	; 0x69a <_Z12an_start_allv+0x26>

000006bc <_Z12get_readingsh>:

/*
	
*/
void get_readings(byte mChip)
{
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
}

/*
	
*/
void get_readings(byte mChip)
     6c4:	08 2f       	mov	r16, r24
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	00 0f       	add	r16, r16
     6ca:	11 1f       	adc	r17, r17
     6cc:	02 95       	swap	r16
     6ce:	12 95       	swap	r17
     6d0:	10 7f       	andi	r17, 0xF0	; 240
     6d2:	10 27       	eor	r17, r16
     6d4:	00 7f       	andi	r16, 0xF0	; 240
     6d6:	10 27       	eor	r17, r16
     6d8:	0f 5c       	subi	r16, 0xCF	; 207
     6da:	1d 4f       	sbci	r17, 0xFD	; 253
     6dc:	c0 e1       	ldi	r28, 0x10	; 16
     6de:	d0 e0       	ldi	r29, 0x00	; 0
{
	for (int r=0; r<16; r++)
		Readings[mChip*16+r] = an_read(0);
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z7an_readh>
     6e6:	f8 01       	movw	r30, r16
     6e8:	81 93       	st	Z+, r24
     6ea:	91 93       	st	Z+, r25
     6ec:	8f 01       	movw	r16, r30
     6ee:	21 97       	sbiw	r28, 0x01	; 1
/*
	
*/
void get_readings(byte mChip)
{
	for (int r=0; r<16; r++)
     6f0:	b9 f7       	brne	.-18     	; 0x6e0 <_Z12get_readingsh+0x24>
		Readings[mChip*16+r] = an_read(0);
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	08 95       	ret

000006fc <__vector_23>:
	Interrupt on Pin Change - Interrupt indicates all requested conversions 
	are completed.
	Determine which pin changed, and read the results.
*/
ISR ( PCINT1_vect ) /* PCINT[8..15] */
{ 
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	2f 93       	push	r18
     708:	3f 93       	push	r19
     70a:	4f 93       	push	r20
     70c:	5f 93       	push	r21
     70e:	6f 93       	push	r22
     710:	7f 93       	push	r23
     712:	8f 93       	push	r24
     714:	9f 93       	push	r25
     716:	af 93       	push	r26
     718:	bf 93       	push	r27
     71a:	ef 93       	push	r30
     71c:	ff 93       	push	r31
	int chip=-1;
	if ((EOC_IN & CHIP_ONE) == 0)
     71e:	34 9b       	sbis	0x06, 4	; 6
     720:	1a c0       	rjmp	.+52     	; 0x756 <__vector_23+0x5a>
	{   
		chip = 0;
		get_chip_readings( chip );
	}
	if ((EOC_IN & CHIP_TWO) == 0)
     722:	35 9b       	sbis	0x06, 5	; 6
     724:	1d c0       	rjmp	.+58     	; 0x760 <__vector_23+0x64>
	{   
		chip = 1;
		get_chip_readings( chip );		
	}
	if ((EOC_IN & CHIP_THREE) == 0)
     726:	36 9b       	sbis	0x06, 6	; 6
     728:	20 c0       	rjmp	.+64     	; 0x76a <__vector_23+0x6e>
	{   
		chip = 2;
		get_chip_readings( chip );		
	}
	if ((EOC_IN & CHIP_FOUR) == 0)
     72a:	37 99       	sbic	0x06, 7	; 6
     72c:	03 c0       	rjmp	.+6      	; 0x734 <__vector_23+0x38>
	{   
		chip = 3;
		get_chip_readings( chip );
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z17get_chip_readingsh>
	}
}
     734:	ff 91       	pop	r31
     736:	ef 91       	pop	r30
     738:	bf 91       	pop	r27
     73a:	af 91       	pop	r26
     73c:	9f 91       	pop	r25
     73e:	8f 91       	pop	r24
     740:	7f 91       	pop	r23
     742:	6f 91       	pop	r22
     744:	5f 91       	pop	r21
     746:	4f 91       	pop	r20
     748:	3f 91       	pop	r19
     74a:	2f 91       	pop	r18
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti
{ 
	int chip=-1;
	if ((EOC_IN & CHIP_ONE) == 0)
	{   
		chip = 0;
		get_chip_readings( chip );
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z17get_chip_readingsh>
	}
	if ((EOC_IN & CHIP_TWO) == 0)
     75c:	35 99       	sbic	0x06, 5	; 6
     75e:	e3 cf       	rjmp	.-58     	; 0x726 <__vector_23+0x2a>
	{   
		chip = 1;
		get_chip_readings( chip );		
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z17get_chip_readingsh>
	}
	if ((EOC_IN & CHIP_THREE) == 0)
     766:	36 99       	sbic	0x06, 6	; 6
     768:	e0 cf       	rjmp	.-64     	; 0x72a <__vector_23+0x2e>
	{   
		chip = 2;
		get_chip_readings( chip );		
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z17get_chip_readingsh>
     770:	dc cf       	rjmp	.-72     	; 0x72a <__vector_23+0x2e>

00000772 <_Z16analog_timeslicev>:
	Called from OS_Dispatch()  10ms time slice.
	Starts A/D conversions on all active chips at same rate as report rate!
*/
void analog_timeslice()
{
	if (isReportingEnabled())		
     772:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z18isReportingEnabledv>
     776:	88 23       	and	r24, r24
     778:	09 f4       	brne	.+2      	; 0x77c <_Z16analog_timeslicev+0xa>
     77a:	08 95       	ret
		//if (ReportCounter<=0)			// Time To Report?
		{
			//ReportCounter = getReportRate();	// Refill 

			// Initiate a conversion for each active chip  (isr will handle data)
			an_start_all();
     77c:	0e 94 3a 03 	call	0x674	; 0x674 <_Z12an_start_allv>
     780:	08 95       	ret

00000782 <_Z11OS_Dispatchv>:
int t=0;
extern void can_send_configs();

void OS_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0)	// 5ms tasks
     782:	20 91 e7 03 	lds	r18, 0x03E7
     786:	30 91 e8 03 	lds	r19, 0x03E8
     78a:	c9 01       	movw	r24, r18
     78c:	65 e0       	ldi	r22, 0x05	; 5
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__divmodhi4>
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	69 f1       	breq	.+90     	; 0x7f2 <_Z11OS_Dispatchv+0x70>
	{
		can_send_timeslice();
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
     798:	c9 01       	movw	r24, r18
     79a:	6a e0       	ldi	r22, 0x0A	; 10
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__divmodhi4>
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	f9 f0       	breq	.+62     	; 0x7e4 <_Z11OS_Dispatchv+0x62>
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{
		
	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
     7a6:	c9 01       	movw	r24, r18
     7a8:	64 e6       	ldi	r22, 0x64	; 100
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__divmodhi4>
     7b0:	00 97       	sbiw	r24, 0x00	; 0
     7b2:	79 f4       	brne	.+30     	; 0x7d2 <_Z11OS_Dispatchv+0x50>
	{
#define PULSE 1
		// send CAN msgs
		//can_send_analog_msgs();
		if (t) {
     7b4:	80 91 31 03 	lds	r24, 0x0331
     7b8:	90 91 32 03 	lds	r25, 0x0332
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	51 f4       	brne	.+20     	; 0x7d4 <_Z11OS_Dispatchv+0x52>
			//can_send_configs();
			led_on(PULSE);
			t = 0;
		} else {
			led_off(PULSE);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_Z7led_offh>
			t = 1;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	90 93 32 03 	sts	0x0332, r25
     7ce:	80 93 31 03 	sts	0x0331, r24
     7d2:	08 95       	ret
#define PULSE 1
		// send CAN msgs
		//can_send_analog_msgs();
		if (t) {
			//can_send_configs();
			led_on(PULSE);
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_Z6led_onh>
			t = 0;
     7da:	10 92 32 03 	sts	0x0332, r1
     7de:	10 92 31 03 	sts	0x0331, r1
     7e2:	08 95       	ret
		can_send_timeslice();
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
	{
		analog_timeslice();  // ~1.2ms per chip (15 channels); 4chips=~5ms	
     7e4:	0e 94 b9 03 	call	0x772	; 0x772 <_Z16analog_timeslicev>
     7e8:	20 91 e7 03 	lds	r18, 0x03E7
     7ec:	30 91 e8 03 	lds	r19, 0x03E8
     7f0:	da cf       	rjmp	.-76     	; 0x7a6 <_Z11OS_Dispatchv+0x24>

void OS_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0)	// 5ms tasks
	{
		can_send_timeslice();
     7f2:	0e 94 35 01 	call	0x26a	; 0x26a <_Z18can_send_timeslicev>
     7f6:	20 91 e7 03 	lds	r18, 0x03E7
     7fa:	30 91 e8 03 	lds	r19, 0x03E8
     7fe:	cc cf       	rjmp	.-104    	; 0x798 <_Z11OS_Dispatchv+0x16>

00000800 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
     800:	90 93 6b 03 	sts	0x036B, r25
     804:	80 93 6a 03 	sts	0x036A, r24
}
     808:	08 95       	ret

0000080a <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
     80a:	90 93 6d 03 	sts	0x036D, r25
     80e:	80 93 6c 03 	sts	0x036C, r24
}
     812:	08 95       	ret

00000814 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
     818:	ed ee       	ldi	r30, 0xED	; 237
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     81e:	82 95       	swap	r24
     820:	80 7f       	andi	r24, 0xF0	; 240
     822:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
     824:	c1 ef       	ldi	r28, 0xF1	; 241
     826:	d0 e0       	ldi	r29, 0x00	; 0
     828:	38 81       	ld	r19, Y
     82a:	cb 01       	movw	r24, r22
     82c:	80 7e       	andi	r24, 0xE0	; 224
     82e:	90 70       	andi	r25, 0x00	; 0
     830:	96 95       	lsr	r25
     832:	87 95       	ror	r24
     834:	92 95       	swap	r25
     836:	82 95       	swap	r24
     838:	8f 70       	andi	r24, 0x0F	; 15
     83a:	89 27       	eor	r24, r25
     83c:	9f 70       	andi	r25, 0x0F	; 15
     83e:	89 27       	eor	r24, r25
     840:	38 7f       	andi	r19, 0xF8	; 248
     842:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
     844:	a0 ef       	ldi	r26, 0xF0	; 240
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	8c 91       	ld	r24, X
     84a:	66 0f       	add	r22, r22
     84c:	66 0f       	add	r22, r22
     84e:	66 0f       	add	r22, r22
     850:	87 70       	andi	r24, 0x07	; 7
     852:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
     854:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
     856:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
     858:	a5 ef       	ldi	r26, 0xF5	; 245
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	8c 91       	ld	r24, X
     85e:	87 60       	ori	r24, 0x07	; 7
     860:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
     862:	a4 ef       	ldi	r26, 0xF4	; 244
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	8c 91       	ld	r24, X
     868:	88 6f       	ori	r24, 0xF8	; 248
     86a:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     86c:	20 83       	st	Z, r18
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     874:	ed ee       	ldi	r30, 0xED	; 237
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     87a:	82 95       	swap	r24
     87c:	80 7f       	andi	r24, 0xF0	; 240
     87e:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
     880:	a5 ef       	ldi	r26, 0xF5	; 245
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	8c 91       	ld	r24, X
     886:	88 7f       	andi	r24, 0xF8	; 248
     888:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
     88a:	a4 ef       	ldi	r26, 0xF4	; 244
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	8c 91       	ld	r24, X
     890:	87 70       	andi	r24, 0x07	; 7
     892:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     894:	90 83       	st	Z, r25
}
     896:	08 95       	ret

00000898 <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
     898:	25 2f       	mov	r18, r21
     89a:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     89c:	ed ee       	ldi	r30, 0xED	; 237
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     8a2:	82 95       	swap	r24
     8a4:	80 7f       	andi	r24, 0xF0	; 240
     8a6:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
     8a8:	86 2f       	mov	r24, r22
     8aa:	82 95       	swap	r24
     8ac:	86 95       	lsr	r24
     8ae:	87 70       	andi	r24, 0x07	; 7
     8b0:	44 0f       	add	r20, r20
     8b2:	44 0f       	add	r20, r20
     8b4:	44 0f       	add	r20, r20
     8b6:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     8b8:	c9 01       	movw	r24, r18
     8ba:	80 7e       	andi	r24, 0xE0	; 224
     8bc:	9f 71       	andi	r25, 0x1F	; 31
     8be:	96 95       	lsr	r25
     8c0:	87 95       	ror	r24
     8c2:	92 95       	swap	r25
     8c4:	82 95       	swap	r24
     8c6:	8f 70       	andi	r24, 0x0F	; 15
     8c8:	89 27       	eor	r24, r25
     8ca:	9f 70       	andi	r25, 0x0F	; 15
     8cc:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
     8ce:	22 0f       	add	r18, r18
     8d0:	22 0f       	add	r18, r18
     8d2:	22 0f       	add	r18, r18
     8d4:	37 2f       	mov	r19, r23
     8d6:	32 95       	swap	r19
     8d8:	36 95       	lsr	r19
     8da:	37 70       	andi	r19, 0x07	; 7
     8dc:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
     8de:	77 0f       	add	r23, r23
     8e0:	77 0f       	add	r23, r23
     8e2:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
     8e4:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
     8e8:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     8ec:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
     8f0:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
     8f4:	50 83       	st	Z, r21
}
     8f6:	08 95       	ret

000008f8 <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	f8 2e       	mov	r15, r24
     904:	8b 01       	movw	r16, r22
     906:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
     90e:	c7 2f       	mov	r28, r23
     910:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
     912:	c8 01       	movw	r24, r16
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
     91a:	27 2f       	mov	r18, r23
     91c:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     91e:	ed ee       	ldi	r30, 0xED	; 237
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     924:	f2 94       	swap	r15
     926:	b0 ef       	ldi	r27, 0xF0	; 240
     928:	fb 22       	and	r15, r27
     92a:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
     92c:	43 ef       	ldi	r20, 0xF3	; 243
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	da 01       	movw	r26, r20
     932:	6c 91       	ld	r22, X
     934:	8d 2f       	mov	r24, r29
     936:	82 95       	swap	r24
     938:	86 95       	lsr	r24
     93a:	87 70       	andi	r24, 0x07	; 7
     93c:	68 7f       	andi	r22, 0xF8	; 248
     93e:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     940:	ce 01       	movw	r24, r28
     942:	80 7e       	andi	r24, 0xE0	; 224
     944:	9f 71       	andi	r25, 0x1F	; 31
     946:	96 95       	lsr	r25
     948:	87 95       	ror	r24
     94a:	92 95       	swap	r25
     94c:	82 95       	swap	r24
     94e:	8f 70       	andi	r24, 0x0F	; 15
     950:	89 27       	eor	r24, r25
     952:	9f 70       	andi	r25, 0x0F	; 15
     954:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
     956:	a1 ef       	ldi	r26, 0xF1	; 241
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	7c 91       	ld	r23, X
     95c:	fc 2e       	mov	r15, r28
     95e:	ff 0c       	add	r15, r15
     960:	ff 0c       	add	r15, r15
     962:	ff 0c       	add	r15, r15
     964:	77 70       	andi	r23, 0x07	; 7
     966:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
     968:	ea 01       	movw	r28, r20
     96a:	68 83       	st	Y, r22
	CANIDT2 = idt2;
     96c:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     970:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
     972:	c7 ef       	ldi	r28, 0xF7	; 247
     974:	d0 e0       	ldi	r29, 0x00	; 0
     976:	48 81       	ld	r20, Y
     978:	83 2f       	mov	r24, r19
     97a:	82 95       	swap	r24
     97c:	86 95       	lsr	r24
     97e:	87 70       	andi	r24, 0x07	; 7
     980:	48 7f       	andi	r20, 0xF8	; 248
     982:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
     984:	c9 01       	movw	r24, r18
     986:	80 7e       	andi	r24, 0xE0	; 224
     988:	9f 71       	andi	r25, 0x1F	; 31
     98a:	96 95       	lsr	r25
     98c:	87 95       	ror	r24
     98e:	92 95       	swap	r25
     990:	82 95       	swap	r24
     992:	8f 70       	andi	r24, 0x0F	; 15
     994:	89 27       	eor	r24, r25
     996:	9f 70       	andi	r25, 0x0F	; 15
     998:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
     99a:	a5 ef       	ldi	r26, 0xF5	; 245
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	5c 91       	ld	r21, X
     9a0:	22 0f       	add	r18, r18
     9a2:	22 0f       	add	r18, r18
     9a4:	22 0f       	add	r18, r18
     9a6:	57 70       	andi	r21, 0x07	; 7
     9a8:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
     9aa:	48 83       	st	Y, r20
	CANIDM2 = idm2;
     9ac:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
     9b0:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
     9b2:	00 83       	st	Z, r16
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	08 95       	ret

000009c0 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
     9c0:	ed ee       	ldi	r30, 0xED	; 237
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     9c6:	82 95       	swap	r24
     9c8:	80 7f       	andi	r24, 0xF0	; 240
     9ca:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
     9cc:	a7 ef       	ldi	r26, 0xF7	; 247
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	8c 91       	ld	r24, X
     9d2:	88 7f       	andi	r24, 0xF8	; 248
     9d4:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
     9d6:	a6 ef       	ldi	r26, 0xF6	; 246
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	8c 91       	ld	r24, X
     9dc:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
     9de:	a5 ef       	ldi	r26, 0xF5	; 245
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	8c 91       	ld	r24, X
     9e4:	87 70       	andi	r24, 0x07	; 7
     9e6:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     9e8:	90 83       	st	Z, r25
}
     9ea:	08 95       	ret

000009ec <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     9ec:	ed ee       	ldi	r30, 0xED	; 237
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     9f2:	82 95       	swap	r24
     9f4:	80 7f       	andi	r24, 0xF0	; 240
     9f6:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     9f8:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     9fc:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     a00:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     a04:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     a08:	90 83       	st	Z, r25
}
     a0a:	08 95       	ret

00000a0c <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     a0c:	ed ee       	ldi	r30, 0xED	; 237
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     a12:	82 95       	swap	r24
     a14:	80 7f       	andi	r24, 0xF0	; 240
     a16:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
     a18:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
     a1c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
     a20:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
     a24:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
     a28:	90 83       	st	Z, r25
}
     a2a:	08 95       	ret

00000a2c <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
     a32:	ed ee       	ldi	r30, 0xED	; 237
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
     a38:	38 2f       	mov	r19, r24
     a3a:	32 95       	swap	r19
     a3c:	30 7f       	andi	r19, 0xF0	; 240
     a3e:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
     a40:	ce ed       	ldi	r28, 0xDE	; 222
     a42:	d0 e0       	ldi	r29, 0x00	; 0
     a44:	98 81       	ld	r25, Y
     a46:	a1 e0       	ldi	r26, 0x01	; 1
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <_Z21can_setup_receive_mobhssh+0x24>
     a4c:	aa 0f       	add	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	8a 95       	dec	r24
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <_Z21can_setup_receive_mobhssh+0x20>
     a54:	9a 2b       	or	r25, r26
     a56:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     a58:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     a5a:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     a5c:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     a60:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     a64:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     a68:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     a6c:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
     a6e:	20 69       	ori	r18, 0x90	; 144
     a70:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
     a74:	a8 ed       	ldi	r26, 0xD8	; 216
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	8c 91       	ld	r24, X
     a7a:	82 60       	ori	r24, 0x02	; 2
     a7c:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
     a7e:	10 83       	st	Z, r17
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	08 95       	ret

00000a88 <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	28 e0       	ldi	r18, 0x08	; 8
     aa0:	0e 94 16 05 	call	0xa2c	; 0xa2c <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
     aa4:	60 91 6e 03 	lds	r22, 0x036E
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	0e 94 0a 04 	call	0x814	; 0x814 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	28 e0       	ldi	r18, 0x08	; 8
     abc:	0e 94 16 05 	call	0xa2c	; 0xa2c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     ac0:	cd ee       	ldi	r28, 0xED	; 237
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
     ac4:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     ac6:	80 e3       	ldi	r24, 0x30	; 48
     ac8:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     aca:	05 ef       	ldi	r16, 0xF5	; 245
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	f8 01       	movw	r30, r16
     ad0:	80 81       	ld	r24, Z
     ad2:	88 7f       	andi	r24, 0xF8	; 248
     ad4:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     ad6:	84 ef       	ldi	r24, 0xF4	; 244
     ad8:	e8 2e       	mov	r14, r24
     ada:	f1 2c       	mov	r15, r1
     adc:	f7 01       	movw	r30, r14
     ade:	80 81       	ld	r24, Z
     ae0:	87 70       	andi	r24, 0x07	; 7
     ae2:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     ae4:	98 83       	st	Y, r25
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	63 e2       	ldi	r22, 0x23	; 35
     aea:	7c ef       	ldi	r23, 0xFC	; 252
     aec:	43 e2       	ldi	r20, 0x23	; 35
     aee:	5c ef       	ldi	r21, 0xFC	; 252
     af0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
     af4:	85 e0       	ldi	r24, 0x05	; 5
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	28 e0       	ldi	r18, 0x08	; 8
     b00:	0e 94 16 05 	call	0xa2c	; 0xa2c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     b04:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     b06:	80 e5       	ldi	r24, 0x50	; 80
     b08:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     b0a:	f8 01       	movw	r30, r16
     b0c:	80 81       	ld	r24, Z
     b0e:	88 7f       	andi	r24, 0xF8	; 248
     b10:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     b12:	f7 01       	movw	r30, r14
     b14:	80 81       	ld	r24, Z
     b16:	87 70       	andi	r24, 0x07	; 7
     b18:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     b1a:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	7c ef       	ldi	r23, 0xFC	; 252
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	5c ef       	ldi	r21, 0xFC	; 252
     b26:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_Z20can_add_id_to_filterhtt>
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	08 95       	ret

00000b38 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
     b38:	ed ee       	ldi	r30, 0xED	; 237
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
     b3e:	82 95       	swap	r24
     b40:	80 7f       	andi	r24, 0xF0	; 240
     b42:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
     b44:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     b48:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
     b4c:	90 83       	st	Z, r25
}
     b4e:	08 95       	ret

00000b50 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
     b50:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
     b52:	40 91 f3 00 	lds	r20, 0x00F3
     b56:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
     b58:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
     b5c:	80 91 f1 00 	lds	r24, 0x00F1
     b60:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
     b62:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
     b66:	ba 01       	movw	r22, r20
     b68:	76 95       	lsr	r23
     b6a:	67 95       	ror	r22
     b6c:	76 95       	lsr	r23
     b6e:	67 95       	ror	r22
     b70:	76 95       	lsr	r23
     b72:	67 95       	ror	r22
     b74:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
     b76:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	22 95       	swap	r18
     b7e:	32 95       	swap	r19
     b80:	30 7f       	andi	r19, 0xF0	; 240
     b82:	32 27       	eor	r19, r18
     b84:	20 7f       	andi	r18, 0xF0	; 240
     b86:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
     b88:	54 2f       	mov	r21, r20
     b8a:	44 27       	eor	r20, r20
     b8c:	52 95       	swap	r21
     b8e:	55 0f       	add	r21, r21
     b90:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     b92:	24 2b       	or	r18, r20
     b94:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
     b96:	ac 01       	movw	r20, r24
     b98:	56 95       	lsr	r21
     b9a:	47 95       	ror	r20
     b9c:	56 95       	lsr	r21
     b9e:	47 95       	ror	r20
     ba0:	56 95       	lsr	r21
     ba2:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     ba4:	24 2b       	or	r18, r20
     ba6:	35 2b       	or	r19, r21
     ba8:	32 83       	std	Z+2, r19	; 0x02
     baa:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
     bac:	82 95       	swap	r24
     bae:	88 0f       	add	r24, r24
     bb0:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
     bb2:	a6 95       	lsr	r26
     bb4:	a6 95       	lsr	r26
     bb6:	a6 95       	lsr	r26
     bb8:	a8 2b       	or	r26, r24
     bba:	a3 83       	std	Z+3, r26	; 0x03
}
     bbc:	08 95       	ret

00000bbe <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
     bc4:	0e 94 a8 05 	call	0xb50	; 0xb50 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
     bc8:	80 91 ef 00 	lds	r24, 0x00EF
     bcc:	8f 70       	andi	r24, 0x0F	; 15
     bce:	28 2f       	mov	r18, r24
     bd0:	22 0f       	add	r18, r18
     bd2:	9c 81       	ldd	r25, Y+4	; 0x04
     bd4:	91 7e       	andi	r25, 0xE1	; 225
     bd6:	92 2b       	or	r25, r18
     bd8:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
     bda:	48 2f       	mov	r20, r24
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	41 15       	cp	r20, r1
     be0:	51 05       	cpc	r21, r1
     be2:	59 f0       	breq	.+22     	; 0xbfa <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
     be4:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
     bea:	90 91 fa 00 	lds	r25, 0x00FA
     bee:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     bf0:	2f 5f       	subi	r18, 0xFF	; 255
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	24 17       	cp	r18, r20
     bf6:	35 07       	cpc	r19, r21
     bf8:	c4 f3       	brlt	.-16     	; 0xbea <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	2f 93       	push	r18
     c0c:	3f 93       	push	r19
     c0e:	4f 93       	push	r20
     c10:	5f 93       	push	r21
     c12:	6f 93       	push	r22
     c14:	7f 93       	push	r23
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	af 93       	push	r26
     c1c:	bf 93       	push	r27
     c1e:	cf 93       	push	r28
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
     c24:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
     c28:	40 91 ec 00 	lds	r20, 0x00EC
     c2c:	42 95       	swap	r20
     c2e:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     c30:	4f 30       	cpi	r20, 0x0F	; 15
     c32:	09 f4       	brne	.+2      	; 0xc36 <__vector_18+0x36>
     c34:	87 c0       	rjmp	.+270    	; 0xd44 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
     c36:	80 91 ec 00 	lds	r24, 0x00EC
     c3a:	80 7f       	andi	r24, 0xF0	; 240
     c3c:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
     c40:	80 91 ee 00 	lds	r24, 0x00EE
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	8f 71       	andi	r24, 0x1F	; 31
     c48:	90 70       	andi	r25, 0x00	; 0
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	09 f4       	brne	.+2      	; 0xc50 <__vector_18+0x50>
     c4e:	40 c0       	rjmp	.+128    	; 0xcd0 <__vector_18+0xd0>
		 byte st = CANSTMOB;
     c50:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	82 ff       	sbrs	r24, 2
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <__vector_18+0x64>
     c5a:	20 91 ee 00 	lds	r18, 0x00EE
     c5e:	2f 7e       	andi	r18, 0xEF	; 239
     c60:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
     c64:	9c 01       	movw	r18, r24
     c66:	23 70       	andi	r18, 0x03	; 3
     c68:	30 70       	andi	r19, 0x00	; 0
     c6a:	21 15       	cp	r18, r1
     c6c:	31 05       	cpc	r19, r1
     c6e:	29 f0       	breq	.+10     	; 0xc7a <__vector_18+0x7a>
     c70:	20 91 ee 00 	lds	r18, 0x00EE
     c74:	27 7f       	andi	r18, 0xF7	; 247
     c76:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
     c7a:	81 ff       	sbrs	r24, 1
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__vector_18+0x88>
     c7e:	20 91 ee 00 	lds	r18, 0x00EE
     c82:	2b 7f       	andi	r18, 0xFB	; 251
     c84:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
     c88:	80 ff       	sbrs	r24, 0
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <__vector_18+0x96>
     c8c:	80 91 ee 00 	lds	r24, 0x00EE
     c90:	8d 7f       	andi	r24, 0xFD	; 253
     c92:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
     c96:	45 30       	cpi	r20, 0x05	; 5
     c98:	09 f4       	brne	.+2      	; 0xc9c <__vector_18+0x9c>
     c9a:	4b c0       	rjmp	.+150    	; 0xd32 <__vector_18+0x132>
     c9c:	41 30       	cpi	r20, 0x01	; 1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <__vector_18+0xa2>
     ca0:	48 c0       	rjmp	.+144    	; 0xd32 <__vector_18+0x132>
     ca2:	43 30       	cpi	r20, 0x03	; 3
     ca4:	09 f4       	brne	.+2      	; 0xca8 <__vector_18+0xa8>
     ca6:	45 c0       	rjmp	.+138    	; 0xd32 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
     ca8:	c0 93 ed 00 	sts	0x00ED, r28
}
     cac:	ff 91       	pop	r31
     cae:	ef 91       	pop	r30
     cb0:	cf 91       	pop	r28
     cb2:	bf 91       	pop	r27
     cb4:	af 91       	pop	r26
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	7f 91       	pop	r23
     cbc:	6f 91       	pop	r22
     cbe:	5f 91       	pop	r21
     cc0:	4f 91       	pop	r20
     cc2:	3f 91       	pop	r19
     cc4:	2f 91       	pop	r18
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
     cd0:	80 91 ee 00 	lds	r24, 0x00EE
     cd4:	85 fd       	sbrc	r24, 5
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
     cd8:	80 91 ee 00 	lds	r24, 0x00EE
     cdc:	86 ff       	sbrs	r24, 6
     cde:	e4 cf       	rjmp	.-56     	; 0xca8 <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
     ce0:	e0 91 6c 03 	lds	r30, 0x036C
     ce4:	f0 91 6d 03 	lds	r31, 0x036D
     ce8:	30 97       	sbiw	r30, 0x00	; 0
     cea:	09 f0       	breq	.+2      	; 0xcee <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
     cec:	09 95       	icall

		TransmittedSuccesfully = TRUE;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 61 03 	sts	0x0361, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
     cf4:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
     cf8:	10 92 ee 00 	sts	0x00EE, r1
     cfc:	d5 cf       	rjmp	.-86     	; 0xca8 <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 60 03 	sts	0x0360, r24
       	can_retrieve_data( &LastReceivedMsg );
     d04:	81 e5       	ldi	r24, 0x51	; 81
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
     d0c:	81 e5       	ldi	r24, 0x51	; 81
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	0e 94 8f 0a 	call	0x151e	; 0x151e <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
     d14:	88 23       	and	r24, r24
     d16:	69 f4       	brne	.+26     	; 0xd32 <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
     d18:	81 e5       	ldi	r24, 0x51	; 81
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
     d20:	e0 91 6a 03 	lds	r30, 0x036A
     d24:	f0 91 6b 03 	lds	r31, 0x036B
     d28:	30 97       	sbiw	r30, 0x00	; 0
     d2a:	19 f0       	breq	.+6      	; 0xd32 <__vector_18+0x132>
    	   		rx_call_back( &LastReceivedMsg );
     d2c:	81 e5       	ldi	r24, 0x51	; 81
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
     d32:	88 e9       	ldi	r24, 0x98	; 152
     d34:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
     d38:	80 91 ee 00 	lds	r24, 0x00EE
     d3c:	8f 7d       	andi	r24, 0xDF	; 223
     d3e:	80 93 ee 00 	sts	0x00EE, r24
     d42:	b2 cf       	rjmp	.-156    	; 0xca8 <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     d44:	80 91 da 00 	lds	r24, 0x00DA
     d48:	80 93 da 00 	sts	0x00DA, r24
     d4c:	af cf       	rjmp	.-162    	; 0xcac <__vector_18+0xac>

00000d4e <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
     d54:	98 2f       	mov	r25, r24
     d56:	92 95       	swap	r25
     d58:	90 7f       	andi	r25, 0xF0	; 240
   cli();
     d5a:	f8 94       	cli
   CANPAGE = page;
     d5c:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
     d60:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
     d64:	48 81       	ld	r20, Y
     d66:	59 81       	ldd	r21, Y+1	; 0x01
     d68:	6a 81       	ldd	r22, Y+2	; 0x02
     d6a:	7b 81       	ldd	r23, Y+3	; 0x03
     d6c:	0e 94 4c 04 	call	0x898	; 0x898 <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	86 95       	lsr	r24
     d74:	8f 70       	andi	r24, 0x0F	; 15
     d76:	79 f0       	breq	.+30     	; 0xd96 <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
     d78:	fe 01       	movw	r30, r28
     d7a:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
     d80:	21 91       	ld	r18, Z+
     d82:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	26 95       	lsr	r18
     d8c:	2f 70       	andi	r18, 0x0F	; 15
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	82 17       	cp	r24, r18
     d92:	93 07       	cpc	r25, r19
     d94:	ac f3       	brlt	.-22     	; 0xd80 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
     d96:	80 91 f0 00 	lds	r24, 0x00F0
     d9a:	8b 7f       	andi	r24, 0xFB	; 251
     d9c:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	86 95       	lsr	r24
     da4:	8f 70       	andi	r24, 0x0F	; 15
     da6:	80 65       	ori	r24, 0x50	; 80
     da8:	80 93 ef 00 	sts	0x00EF, r24
   sei();
     dac:	78 94       	sei
}
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
     db4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
     db8:	80 91 ee 00 	lds	r24, 0x00EE
     dbc:	86 ff       	sbrs	r24, 6
     dbe:	fc cf       	rjmp	.-8      	; 0xdb8 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
     dc0:	08 95       	ret

00000dc2 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     dc2:	20 91 f8 00 	lds	r18, 0x00F8
     dc6:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
     dc8:	40 91 f9 00 	lds	r20, 0x00F9
     dcc:	94 2f       	mov	r25, r20
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	28 2b       	or	r18, r24
     dd2:	39 2b       	or	r19, r25
  return retval;
}
     dd4:	c9 01       	movw	r24, r18
     dd6:	08 95       	ret

00000dd8 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
     dde:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z17can_retrieve_dataP4sCAN>
     de2:	8f 70       	andi	r24, 0x0F	; 15
     de4:	88 0f       	add	r24, r24
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	91 7e       	andi	r25, 0xE1	; 225
     dea:	98 2b       	or	r25, r24
     dec:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     dee:	80 91 f8 00 	lds	r24, 0x00F8
     df2:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
     df4:	40 91 f9 00 	lds	r20, 0x00F9
     df8:	34 2f       	mov	r19, r20
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	82 2b       	or	r24, r18
     dfe:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
     e00:	9e 87       	std	Y+14, r25	; 0x0e
     e02:	8d 87       	std	Y+13, r24	; 0x0d
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	61 f0       	breq	.+24     	; 0xe26 <_Z8set_baudh+0x1c>
     e0e:	84 30       	cpi	r24, 0x04	; 4
     e10:	30 f0       	brcs	.+12     	; 0xe1e <_Z8set_baudh+0x14>
     e12:	85 30       	cpi	r24, 0x05	; 5
     e14:	d1 f0       	breq	.+52     	; 0xe4a <_Z8set_baudh+0x40>
     e16:	85 30       	cpi	r24, 0x05	; 5
     e18:	80 f4       	brcc	.+32     	; 0xe3a <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
     e1a:	82 e1       	ldi	r24, 0x12	; 18
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	91 f0       	breq	.+36     	; 0xe46 <_Z8set_baudh+0x3c>
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	71 f0       	breq	.+28     	; 0xe42 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
     e26:	8e e0       	ldi	r24, 0x0E	; 14
     e28:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
     e32:	83 e1       	ldi	r24, 0x13	; 19
     e34:	80 93 e4 00 	sts	0x00E4, r24
     e38:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     e3a:	86 30       	cpi	r24, 0x06	; 6
     e3c:	a1 f7       	brne	.-24     	; 0xe26 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
     e3e:	86 e2       	ldi	r24, 0x26	; 38
     e40:	f3 cf       	rjmp	.-26     	; 0xe28 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     e42:	86 e0       	ldi	r24, 0x06	; 6
     e44:	f1 cf       	rjmp	.-30     	; 0xe28 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	ef cf       	rjmp	.-34     	; 0xe28 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
     e4a:	8e e1       	ldi	r24, 0x1E	; 30
     e4c:	ed cf       	rjmp	.-38     	; 0xe28 <_Z8set_baudh+0x1e>

00000e4e <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
     e54:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     e58:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
     e5a:	29 2f       	mov	r18, r25
     e5c:	22 95       	swap	r18
     e5e:	20 7f       	andi	r18, 0xF0	; 240
     e60:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
     e64:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     e68:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	96 30       	cpi	r25, 0x06	; 6
     e70:	a1 f7       	brne	.-24     	; 0xe5a <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
     e72:	90 ea       	ldi	r25, 0xA0	; 160
     e74:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
     e78:	0e 94 05 07 	call	0xe0a	; 0xe0a <_Z8set_baudh>
   can_init_mobs();
     e7c:	0e 94 44 05 	call	0xa88	; 0xa88 <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
     e80:	80 91 d9 00 	lds	r24, 0x00D9
     e84:	82 ff       	sbrs	r24, 2
     e86:	fc cf       	rjmp	.-8      	; 0xe80 <_Z8can_inith+0x32>
   }
   //sei();
}
     e88:	08 95       	ret

00000e8a <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
     e8a:	88 23       	and	r24, r24
     e8c:	51 f4       	brne	.+20     	; 0xea2 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
     e94:	84 e0       	ldi	r24, 0x04	; 4
     e96:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
     e9a:	83 e1       	ldi	r24, 0x13	; 19
     e9c:	80 93 e4 00 	sts	0x00E4, r24
     ea0:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
     ea2:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
     ea6:	8c e0       	ldi	r24, 0x0C	; 12
     ea8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
     eac:	86 e3       	ldi	r24, 0x36	; 54
     eae:	80 93 e4 00 	sts	0x00E4, r24
     eb2:	08 95       	ret

00000eb4 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
     eb4:	88 23       	and	r24, r24
     eb6:	51 f4       	brne	.+20     	; 0xecc <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     eb8:	86 e0       	ldi	r24, 0x06	; 6
     eba:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
     ec4:	83 e1       	ldi	r24, 0x13	; 19
     ec6:	80 93 e4 00 	sts	0x00E4, r24
     eca:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
     ed8:	87 e3       	ldi	r24, 0x37	; 55
     eda:	80 93 e4 00 	sts	0x00E4, r24
     ede:	08 95       	ret

00000ee0 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
     ee0:	88 23       	and	r24, r24
     ee2:	51 f4       	brne	.+20     	; 0xef8 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
     ee4:	8e e0       	ldi	r24, 0x0E	; 14
     ee6:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
     ef0:	83 e1       	ldi	r24, 0x13	; 19
     ef2:	80 93 e4 00 	sts	0x00E4, r24
     ef6:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
     ef8:	86 e0       	ldi	r24, 0x06	; 6
     efa:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
     efe:	8c e0       	ldi	r24, 0x0C	; 12
     f00:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
     f04:	87 e3       	ldi	r24, 0x37	; 55
     f06:	80 93 e4 00 	sts	0x00E4, r24
     f0a:	08 95       	ret

00000f0c <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
     f0c:	88 23       	and	r24, r24
     f0e:	51 f4       	brne	.+20     	; 0xf24 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
     f10:	82 e1       	ldi	r24, 0x12	; 18
     f12:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
     f1c:	83 e1       	ldi	r24, 0x13	; 19
     f1e:	80 93 e4 00 	sts	0x00E4, r24
     f22:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
     f2a:	8c e0       	ldi	r24, 0x0C	; 12
     f2c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
     f30:	87 e3       	ldi	r24, 0x37	; 55
     f32:	80 93 e4 00 	sts	0x00E4, r24
     f36:	08 95       	ret

00000f38 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
     f38:	88 23       	and	r24, r24
     f3a:	51 f4       	brne	.+20     	; 0xf50 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
     f3c:	8e e1       	ldi	r24, 0x1E	; 30
     f3e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
     f48:	83 e1       	ldi	r24, 0x13	; 19
     f4a:	80 93 e4 00 	sts	0x00E4, r24
     f4e:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
     f50:	8e e0       	ldi	r24, 0x0E	; 14
     f52:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
     f56:	8c e0       	ldi	r24, 0x0C	; 12
     f58:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
     f5c:	87 e3       	ldi	r24, 0x37	; 55
     f5e:	80 93 e4 00 	sts	0x00E4, r24
     f62:	08 95       	ret

00000f64 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
     f64:	88 23       	and	r24, r24
     f66:	51 f4       	brne	.+20     	; 0xf7c <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
     f68:	86 e2       	ldi	r24, 0x26	; 38
     f6a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
     f74:	83 e1       	ldi	r24, 0x13	; 19
     f76:	80 93 e4 00 	sts	0x00E4, r24
     f7a:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
     f7c:	82 e1       	ldi	r24, 0x12	; 18
     f7e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
     f82:	8c e0       	ldi	r24, 0x0C	; 12
     f84:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
     f88:	87 e3       	ldi	r24, 0x37	; 55
     f8a:	80 93 e4 00 	sts	0x00E4, r24
     f8e:	08 95       	ret

00000f90 <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
     f90:	83 e9       	ldi	r24, 0x93	; 147
     f92:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
     f96:	ee e7       	ldi	r30, 0x7E	; 126
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	88 60       	ori	r24, 0x08	; 8
     f9e:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
     fa0:	80 e8       	ldi	r24, 0x80	; 128
     fa2:	80 93 7b 00 	sts	0x007B, r24
}
     fa6:	08 95       	ret

00000fa8 <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
     fa8:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
     fb2:	e3 e4       	ldi	r30, 0x43	; 67
     fb4:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
     fb8:	80 91 7a 00 	lds	r24, 0x007A
     fbc:	80 64       	ori	r24, 0x40	; 64
     fbe:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
     fc2:	80 91 7a 00 	lds	r24, 0x007A
     fc6:	86 fd       	sbrc	r24, 6
     fc8:	fc cf       	rjmp	.-8      	; 0xfc2 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
     fca:	80 91 78 00 	lds	r24, 0x0078
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	90 70       	andi	r25, 0x00	; 0
     fd4:	ba 01       	movw	r22, r20
     fd6:	6f 70       	andi	r22, 0x0F	; 15
     fd8:	70 70       	andi	r23, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <_Z18pick_random_numberv+0x38>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	6a 95       	dec	r22
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <_Z18pick_random_numberv+0x34>
		result |= (tmp);
     fe4:	28 2b       	or	r18, r24
     fe6:	39 2b       	or	r19, r25
		tmp = ADCH;  
     fe8:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
     fec:	4f 5f       	subi	r20, 0xFF	; 255
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	40 31       	cpi	r20, 0x10	; 16
     ff2:	51 05       	cpc	r21, r1
     ff4:	f9 f6       	brne	.-66     	; 0xfb4 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
     ff6:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
     ff8:	c9 01       	movw	r24, r18
     ffa:	08 95       	ret

00000ffc <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	28 e0       	ldi	r18, 0x08	; 8
    1008:	0e 94 16 05 	call	0xa2c	; 0xa2c <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	0e 94 3a 04 	call	0x874	; 0x874 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	63 e2       	ldi	r22, 0x23	; 35
    1016:	7c ef       	ldi	r23, 0xFC	; 252
    1018:	43 e2       	ldi	r20, 0x23	; 35
    101a:	5c ef       	ldi	r21, 0xFC	; 252
    101c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_Z20can_add_id_to_filterhtt>
}
    1020:	08 95       	ret

00001022 <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    1022:	83 e9       	ldi	r24, 0x93	; 147
    1024:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    1028:	80 91 7e 00 	lds	r24, 0x007E
    102c:	88 60       	ori	r24, 0x08	; 8
    102e:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    1032:	80 e8       	ldi	r24, 0x80	; 128
    1034:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
    1038:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	90 93 72 03 	sts	0x0372, r25
    1042:	80 93 71 03 	sts	0x0371, r24
    1046:	80 93 73 03 	sts	0x0373, r24

	// put adc back into mode for POT
	adc_init();
    104a:	0e 94 a1 12 	call	0x2542	; 0x2542 <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    104e:	80 91 6f 03 	lds	r24, 0x036F
    1052:	88 23       	and	r24, r24
    1054:	51 f0       	breq	.+20     	; 0x106a <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	80 93 6f 03 	sts	0x036F, r24
    105c:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    105e:	80 93 76 03 	sts	0x0376, r24
	init_complete = TRUE;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 70 03 	sts	0x0370, r24
}
    1068:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME : 
		init_path = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 76 03 	sts	0x0376, r24
		setup_instance_claim_mob();
    1070:	0e 94 fe 07 	call	0xffc	; 0xffc <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    1074:	10 92 6e 03 	sts	0x036E, r1
    1078:	80 91 76 03 	lds	r24, 0x0376
    107c:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    107e:	80 93 76 03 	sts	0x0376, r24
	init_complete = TRUE;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	80 93 70 03 	sts	0x0370, r24
}
    1088:	08 95       	ret

0000108a <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    1090:	83 e2       	ldi	r24, 0x23	; 35
    1092:	9c ef       	ldi	r25, 0xFC	; 252
    1094:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1098:	68 83       	st	Y, r22
    109a:	79 83       	std	Y+1, r23	; 0x01
    109c:	8a 83       	std	Y+2, r24	; 0x02
    109e:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    10a0:	80 91 6e 03 	lds	r24, 0x036E
    10a4:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    10a6:	80 91 6f 03 	lds	r24, 0x036F
    10aa:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    10ac:	80 91 73 03 	lds	r24, 0x0373
    10b0:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    10b2:	80 91 76 03 	lds	r24, 0x0376
    10b6:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    10b8:	80 91 77 03 	lds	r24, 0x0377
    10bc:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    10be:	80 91 f1 03 	lds	r24, 0x03F1
    10c2:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    10c8:	8e 60       	ori	r24, 0x0E	; 14
    10ca:	8c 83       	std	Y+4, r24	; 0x04
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <_Z22can_instance_timeslicev>:



void can_instance_timeslice()
{
	ts_state = 1;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	80 93 77 03 	sts	0x0377, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    10d8:	40 91 6f 03 	lds	r20, 0x036F
    10dc:	41 30       	cpi	r20, 0x01	; 1
    10de:	59 f1       	breq	.+86     	; 0x1136 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    10e0:	80 91 70 03 	lds	r24, 0x0370
    10e4:	88 23       	and	r24, r24
    10e6:	39 f1       	breq	.+78     	; 0x1136 <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    10e8:	80 91 71 03 	lds	r24, 0x0371
    10ec:	90 91 72 03 	lds	r25, 0x0372
    10f0:	9c 01       	movw	r18, r24
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	30 40       	sbci	r19, 0x00	; 0
    10f6:	30 93 72 03 	sts	0x0372, r19
    10fa:	20 93 71 03 	sts	0x0371, r18
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	d1 f4       	brne	.+52     	; 0x1136 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	90 93 72 03 	sts	0x0372, r25
    110a:	80 93 71 03 	sts	0x0371, r24
	ts_state   = 2;
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	80 93 77 03 	sts	0x0377, r24

	if (Confirmed==NOT_CLAIMED)
    1114:	44 23       	and	r20, r20
    1116:	91 f0       	breq	.+36     	; 0x113c <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    1118:	42 30       	cpi	r20, 0x02	; 2
    111a:	09 f4       	brne	.+2      	; 0x111e <_Z22can_instance_timeslicev+0x4c>
    111c:	5a c0       	rjmp	.+180    	; 0x11d2 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    111e:	40 32       	cpi	r20, 0x20	; 32
    1120:	39 f1       	breq	.+78     	; 0x1170 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
    1122:	40 38       	cpi	r20, 0x80	; 128
    1124:	09 f4       	brne	.+2      	; 0x1128 <_Z22can_instance_timeslicev+0x56>
    1126:	47 c0       	rjmp	.+142    	; 0x11b6 <_Z22can_instance_timeslicev+0xe4>

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1128:	40 34       	cpi	r20, 0x40	; 64
    112a:	31 f0       	breq	.+12     	; 0x1138 <_Z22can_instance_timeslicev+0x66>
    112c:	80 91 77 03 	lds	r24, 0x0377
    1130:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
    1132:	80 93 77 03 	sts	0x0377, r24
    1136:	08 95       	ret

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1138:	86 e8       	ldi	r24, 0x86	; 134
    113a:	fb cf       	rjmp	.-10     	; 0x1132 <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state   = 2;

	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	80 93 77 03 	sts	0x0377, r24
		Confirmed = CLAIM_PENDING;
    1142:	80 e2       	ldi	r24, 0x20	; 32
    1144:	80 93 6f 03 	sts	0x036F, r24
		can_prep_instance_request( &msg2, rand_instance );
    1148:	82 e4       	ldi	r24, 0x42	; 66
    114a:	93 e0       	ldi	r25, 0x03	; 3
    114c:	60 91 73 03 	lds	r22, 0x0373
    1150:	0e 94 45 08 	call	0x108a	; 0x108a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	62 e4       	ldi	r22, 0x42	; 66
    1158:	73 e0       	ldi	r23, 0x03	; 3
    115a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    115e:	8c e2       	ldi	r24, 0x2C	; 44
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	90 93 75 03 	sts	0x0375, r25
    1166:	80 93 74 03 	sts	0x0374, r24
    116a:	40 91 6f 03 	lds	r20, 0x036F
    116e:	d4 cf       	rjmp	.-88     	; 0x1118 <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    1170:	84 e0       	ldi	r24, 0x04	; 4
    1172:	80 93 77 03 	sts	0x0377, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT 
		cli();
    1176:	f8 94       	cli
		byte restore = CANPAGE;
    1178:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    117c:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    1180:	80 91 ee 00 	lds	r24, 0x00EE
    1184:	86 ff       	sbrs	r24, 6
    1186:	03 c0       	rjmp	.+6      	; 0x118e <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    1188:	80 e8       	ldi	r24, 0x80	; 128
    118a:	80 93 6f 03 	sts	0x036F, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in with same ID, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    118e:	80 91 74 03 	lds	r24, 0x0374
    1192:	90 91 75 03 	lds	r25, 0x0375
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	90 93 75 03 	sts	0x0375, r25
    119c:	80 93 74 03 	sts	0x0374, r24
		if (timeout_10ms_mult == 0)
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	19 f4       	brne	.+6      	; 0x11aa <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	80 93 6f 03 	sts	0x036F, r24
		}
		CANPAGE = restore;
    11aa:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    11ae:	78 94       	sei
    11b0:	40 91 6f 03 	lds	r20, 0x036F
    11b4:	b6 cf       	rjmp	.-148    	; 0x1122 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state  = 5;
    11b6:	85 e0       	ldi	r24, 0x05	; 5
    11b8:	80 93 77 03 	sts	0x0377, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 6f 03 	sts	0x036F, r24
		
		cli();  save_configuration();  sei();
    11c2:	f8 94       	cli
    11c4:	0e 94 00 12 	call	0x2400	; 0x2400 <_Z18save_configurationv>
    11c8:	78 94       	sei
    11ca:	80 91 77 03 	lds	r24, 0x0377
    11ce:	80 68       	ori	r24, 0x80	; 128
    11d0:	b0 cf       	rjmp	.-160    	; 0x1132 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    11d2:	87 e0       	ldi	r24, 0x07	; 7
    11d4:	80 93 77 03 	sts	0x0377, r24
		Confirmed = CLAIMED;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	80 93 6f 03 	sts	0x036F, r24
		can_prep_instance_request( &msg2, MyInstance );
    11de:	82 e4       	ldi	r24, 0x42	; 66
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	60 91 6e 03 	lds	r22, 0x036E
    11e6:	0e 94 45 08 	call	0x108a	; 0x108a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	62 e4       	ldi	r22, 0x42	; 66
    11ee:	73 e0       	ldi	r23, 0x03	; 3
    11f0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
    11f4:	40 91 6f 03 	lds	r20, 0x036F
    11f8:	92 cf       	rjmp	.-220    	; 0x111e <_Z22can_instance_timeslicev+0x4c>

000011fa <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    1200:	84 e2       	ldi	r24, 0x24	; 36
    1202:	9c ef       	ldi	r25, 0xFC	; 252
    1204:	60 91 6e 03 	lds	r22, 0x036E
    1208:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    120c:	68 83       	st	Y, r22
    120e:	79 83       	std	Y+1, r23	; 0x01
    1210:	8a 83       	std	Y+2, r24	; 0x02
    1212:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    1214:	80 91 6e 03 	lds	r24, 0x036E
    1218:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	8c 83       	std	Y+4, r24	; 0x04
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    1228:	fc 01       	movw	r30, r24
    122a:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    122c:	90 91 6e 03 	lds	r25, 0x036E
    1230:	89 17       	cp	r24, r25
    1232:	18 f0       	brcs	.+6      	; 0x123a <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 6e 03 	sts	0x036E, r24
    123a:	08 95       	ret

0000123c <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    123c:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	78 2f       	mov	r23, r24
    1242:	89 2f       	mov	r24, r25
    1244:	92 2f       	mov	r25, r18
    1246:	08 95       	ret

00001248 <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    1248:	38 2f       	mov	r19, r24
    124a:	26 2f       	mov	r18, r22
    124c:	87 2f       	mov	r24, r23
    124e:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    1250:	63 2f       	mov	r22, r19
    1252:	72 2f       	mov	r23, r18
    1254:	08 95       	ret

00001256 <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    1256:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    1258:	08 95       	ret

0000125a <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    125a:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    125c:	08 95       	ret

0000125e <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    125e:	89 2f       	mov	r24, r25
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	08 95       	ret

00001264 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    1264:	e1 e0       	ldi	r30, 0x01	; 1
    1266:	62 17       	cp	r22, r18
    1268:	73 07       	cpc	r23, r19
    126a:	84 07       	cpc	r24, r20
    126c:	95 07       	cpc	r25, r21
    126e:	09 f0       	breq	.+2      	; 0x1272 <_Z5match6idTypeS_+0xe>
    1270:	e0 e0       	ldi	r30, 0x00	; 0
}
    1272:	8e 2f       	mov	r24, r30
    1274:	08 95       	ret

00001276 <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	62 13       	cpse	r22, r18
    127a:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    127c:	08 95       	ret

0000127e <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    127e:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    1280:	27 2f       	mov	r18, r23
    1282:	38 2f       	mov	r19, r24
    1284:	69 2f       	mov	r22, r25
    1286:	74 2f       	mov	r23, r20
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	26 17       	cp	r18, r22
    128c:	37 07       	cpc	r19, r23
    128e:	09 f0       	breq	.+2      	; 0x1292 <_Z8id_match6idTypeS_+0x14>
    1290:	80 e0       	ldi	r24, 0x00	; 0
}
    1292:	08 95       	ret

00001294 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	49 13       	cpse	r20, r25
    1298:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    129a:	08 95       	ret

0000129c <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    129c:	90 93 7e 03 	sts	0x037E, r25
    12a0:	80 93 7d 03 	sts	0x037D, r24
}
    12a4:	08 95       	ret

000012a6 <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    12ac:	81 e1       	ldi	r24, 0x11	; 17
    12ae:	9c ef       	ldi	r25, 0xFC	; 252
    12b0:	60 91 6e 03 	lds	r22, 0x036E
    12b4:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    12b8:	68 83       	st	Y, r22
    12ba:	79 83       	std	Y+1, r23	; 0x01
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    12c0:	83 e0       	ldi	r24, 0x03	; 3
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    12c4:	80 91 6e 03 	lds	r24, 0x036E
    12c8:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    12ca:	80 91 78 03 	lds	r24, 0x0378
    12ce:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    12d0:	80 91 79 03 	lds	r24, 0x0379
    12d4:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    12da:	88 60       	ori	r24, 0x08	; 8
    12dc:	8c 83       	std	Y+4, r24	; 0x04
}
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    12ea:	82 e1       	ldi	r24, 0x12	; 18
    12ec:	9c ef       	ldi	r25, 0xFC	; 252
    12ee:	60 91 6e 03 	lds	r22, 0x036E
    12f2:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    12f6:	68 83       	st	Y, r22
    12f8:	79 83       	std	Y+1, r23	; 0x01
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    1302:	81 e4       	ldi	r24, 0x41	; 65
    1304:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    130a:	9f e0       	ldi	r25, 0x0F	; 15
    130c:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    130e:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    1310:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1316:	8c 60       	ori	r24, 0x0C	; 12
    1318:	8c 83       	std	Y+4, r24	; 0x04
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    1326:	83 e1       	ldi	r24, 0x13	; 19
    1328:	9c ef       	ldi	r25, 0xFC	; 252
    132a:	60 91 6e 03 	lds	r22, 0x036E
    132e:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1332:	68 83       	st	Y, r22
    1334:	79 83       	std	Y+1, r23	; 0x01
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    133e:	86 e5       	ldi	r24, 0x56	; 86
    1340:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    1342:	88 e7       	ldi	r24, 0x78	; 120
    1344:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    1346:	8c e9       	ldi	r24, 0x9C	; 156
    1348:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    134a:	8e ed       	ldi	r24, 0xDE	; 222
    134c:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1352:	8a 60       	ori	r24, 0x0A	; 10
    1354:	8c 83       	std	Y+4, r24	; 0x04
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    1362:	84 e1       	ldi	r24, 0x14	; 20
    1364:	9c ef       	ldi	r25, 0xFC	; 252
    1366:	60 91 6e 03 	lds	r22, 0x036E
    136a:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    136e:	68 83       	st	Y, r22
    1370:	79 83       	std	Y+1, r23	; 0x01
    1372:	8a 83       	std	Y+2, r24	; 0x02
    1374:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    1376:	80 91 7a 03 	lds	r24, 0x037A
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    137e:	de 01       	movw	r26, r28
    1380:	16 96       	adiw	r26, 0x06	; 6
    1382:	9c 01       	movw	r18, r24
    1384:	28 5f       	subi	r18, 0xF8	; 248
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    1388:	fc 01       	movw	r30, r24
    138a:	e4 58       	subi	r30, 0x84	; 132
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	e4 91       	lpm	r30, Z+
    1390:	ed 93       	st	X+, r30
    1392:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    1394:	82 17       	cp	r24, r18
    1396:	93 07       	cpc	r25, r19
    1398:	b9 f7       	brne	.-18     	; 0x1388 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    139e:	82 61       	ori	r24, 0x12	; 18
    13a0:	8c 83       	std	Y+4, r24	; 0x04
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    13a8:	80 91 7f 03 	lds	r24, 0x037F
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	d9 f0       	breq	.+54     	; 0x13e6 <_Z24can_board_presence_replyv+0x3e>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	28 f0       	brcs	.+10     	; 0x13be <_Z24can_board_presence_replyv+0x16>
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	09 f1       	breq	.+66     	; 0x13fa <_Z24can_board_presence_replyv+0x52>
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	59 f0       	breq	.+22     	; 0x13d2 <_Z24can_board_presence_replyv+0x2a>
    13bc:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    13be:	82 e4       	ldi	r24, 0x42	; 66
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    13c2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	62 e4       	ldi	r22, 0x42	; 66
    13ca:	73 e0       	ldi	r23, 0x03	; 3
    13cc:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    13d0:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    13d2:	82 e4       	ldi	r24, 0x42	; 66
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	0e 94 ae 09 	call	0x135c	; 0x135c <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	62 e4       	ldi	r22, 0x42	; 66
    13de:	73 e0       	ldi	r23, 0x03	; 3
    13e0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
    13e4:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    13e6:	82 e4       	ldi	r24, 0x42	; 66
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	62 e4       	ldi	r22, 0x42	; 66
    13f2:	73 e0       	ldi	r23, 0x03	; 3
    13f4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    13f8:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    13fa:	82 e4       	ldi	r24, 0x42	; 66
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	0e 94 90 09 	call	0x1320	; 0x1320 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	62 e4       	ldi	r22, 0x42	; 66
    1406:	73 e0       	ldi	r23, 0x03	; 3
    1408:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    140c:	08 95       	ret

0000140e <_Z19can_board_timeslicev>:
/* Sends the queued message 
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    140e:	80 91 7b 03 	lds	r24, 0x037B
    1412:	80 fd       	sbrc	r24, 0
    1414:	59 c0       	rjmp	.+178    	; 0x14c8 <_Z19can_board_timeslicev+0xba>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    1416:	81 fd       	sbrc	r24, 1
    1418:	4c c0       	rjmp	.+152    	; 0x14b2 <_Z19can_board_timeslicev+0xa4>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    141a:	82 fd       	sbrc	r24, 2
    141c:	35 c0       	rjmp	.+106    	; 0x1488 <_Z19can_board_timeslicev+0x7a>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
    141e:	83 fd       	sbrc	r24, 3
    1420:	26 c0       	rjmp	.+76     	; 0x146e <_Z19can_board_timeslicev+0x60>
		save_configuration();
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    1422:	84 fd       	sbrc	r24, 4
    1424:	1a c0       	rjmp	.+52     	; 0x145a <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    1426:	85 ff       	sbrs	r24, 5
    1428:	0d c0       	rjmp	.+26     	; 0x1444 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)
    142a:	80 91 07 01 	lds	r24, 0x0107
    142e:	90 91 08 01 	lds	r25, 0x0108
    1432:	9c 01       	movw	r18, r24
    1434:	21 50       	subi	r18, 0x01	; 1
    1436:	30 40       	sbci	r19, 0x00	; 0
    1438:	30 93 08 01 	sts	0x0108, r19
    143c:	20 93 07 01 	sts	0x0107, r18
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	09 f0       	breq	.+2      	; 0x1446 <_Z19can_board_timeslicev+0x38>
    1444:	08 95       	ret
		{
			cli();
    1446:	f8 94       	cli
			can_board_presence_reply( );
    1448:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    144c:	80 91 7b 03 	lds	r24, 0x037B
    1450:	8f 7d       	andi	r24, 0xDF	; 223
    1452:	80 93 7b 03 	sts	0x037B, r24
			sei();
    1456:	78 94       	sei
    1458:	08 95       	ret
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    145a:	f8 94       	cli
		save_cal();
    145c:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z8save_calv>
		System_Send_Status &= (~0x10);
    1460:	80 91 7b 03 	lds	r24, 0x037B
    1464:	8f 7e       	andi	r24, 0xEF	; 239
    1466:	80 93 7b 03 	sts	0x037B, r24
		sei();
    146a:	78 94       	sei
    146c:	dc cf       	rjmp	.-72     	; 0x1426 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
		cli();
    146e:	f8 94       	cli
		save_configuration();
    1470:	0e 94 00 12 	call	0x2400	; 0x2400 <_Z18save_configurationv>
		led_on(4);
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_Z6led_onh>
		System_Send_Status &= (~0x08);
    147a:	80 91 7b 03 	lds	r24, 0x037B
    147e:	87 7f       	andi	r24, 0xF7	; 247
    1480:	80 93 7b 03 	sts	0x037B, r24
		sei();
    1484:	78 94       	sei
    1486:	cd cf       	rjmp	.-102    	; 0x1422 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    1488:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    148a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    148e:	82 e4       	ldi	r24, 0x42	; 66
    1490:	93 e0       	ldi	r25, 0x03	; 3
    1492:	60 91 6e 03 	lds	r22, 0x036E
    1496:	0e 94 45 08 	call	0x108a	; 0x108a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	62 e4       	ldi	r22, 0x42	; 66
    149e:	73 e0       	ldi	r23, 0x03	; 3
    14a0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    14a4:	80 91 7b 03 	lds	r24, 0x037B
    14a8:	8b 7f       	andi	r24, 0xFB	; 251
    14aa:	80 93 7b 03 	sts	0x037B, r24
		sei();
    14ae:	78 94       	sei
    14b0:	b6 cf       	rjmp	.-148    	; 0x141e <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	62 e4       	ldi	r22, 0x42	; 66
    14b6:	73 e0       	ldi	r23, 0x03	; 3
    14b8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    14bc:	80 91 7b 03 	lds	r24, 0x037B
    14c0:	8d 7f       	andi	r24, 0xFD	; 253
    14c2:	80 93 7b 03 	sts	0x037B, r24
    14c6:	a9 cf       	rjmp	.-174    	; 0x141a <_Z19can_board_timeslicev+0xc>
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	63 e3       	ldi	r22, 0x33	; 51
    14cc:	73 e0       	ldi	r23, 0x03	; 3
    14ce:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    14d2:	80 91 7b 03 	lds	r24, 0x037B
    14d6:	8e 7f       	andi	r24, 0xFE	; 254
    14d8:	80 93 7b 03 	sts	0x037B, r24
    14dc:	9c cf       	rjmp	.-200    	; 0x1416 <_Z19can_board_timeslicev+0x8>

000014de <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    14e4:	87 e2       	ldi	r24, 0x27	; 39
    14e6:	9c ef       	ldi	r25, 0xFC	; 252
    14e8:	60 91 6e 03 	lds	r22, 0x036E
    14ec:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    14f0:	68 83       	st	Y, r22
    14f2:	79 83       	std	Y+1, r23	; 0x01
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    14f8:	80 91 ed 03 	lds	r24, 0x03ED
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    14fe:	80 91 ee 03 	lds	r24, 0x03EE
    1502:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    1504:	80 91 ef 03 	lds	r24, 0x03EF
    1508:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    150a:	80 91 f0 03 	lds	r24, 0x03F0
    150e:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1514:	88 60       	ori	r24, 0x08	; 8
    1516:	8c 83       	std	Y+4, r24	; 0x04
}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    1524:	85 e1       	ldi	r24, 0x15	; 21
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	60 91 6e 03 	lds	r22, 0x036E
    152c:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	68 81       	ld	r22, Y
    1536:	79 81       	ldd	r23, Y+1	; 0x01
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
    1540:	88 23       	and	r24, r24
    1542:	39 f0       	breq	.+14     	; 0x1552 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
    1544:	ce 01       	movw	r24, r28
    1546:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    1552:	85 e1       	ldi	r24, 0x15	; 21
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	6f ef       	ldi	r22, 0xFF	; 255
    1558:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    155c:	9b 01       	movw	r18, r22
    155e:	ac 01       	movw	r20, r24
    1560:	68 81       	ld	r22, Y
    1562:	79 81       	ldd	r23, Y+1	; 0x01
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    156c:	88 23       	and	r24, r24
    156e:	51 f7       	brne	.-44     	; 0x1544 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
		return TRUE;
	}
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    1570:	80 e1       	ldi	r24, 0x10	; 16
    1572:	9c ef       	ldi	r25, 0xFC	; 252
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    157a:	9b 01       	movw	r18, r22
    157c:	ac 01       	movw	r20, r24
    157e:	68 81       	ld	r22, Y
    1580:	79 81       	ldd	r23, Y+1	; 0x01
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z8id_match6idTypeS_>
    158a:	88 23       	and	r24, r24
    158c:	91 f0       	breq	.+36     	; 0x15b2 <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.
			Need to delay by the instance number of timeslices.
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    158e:	80 91 7b 03 	lds	r24, 0x037B
    1592:	80 62       	ori	r24, 0x20	; 32
    1594:	80 93 7b 03 	sts	0x037B, r24
		Board_presence_response_type = mMsg->data[0];
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	80 93 7f 03 	sts	0x037F, r24
		Board_presence_delay 		 = MyInstance;
    159e:	80 91 6e 03 	lds	r24, 0x036E
    15a2:	80 93 07 01 	sts	0x0107, r24
    15a6:	10 92 08 01 	sts	0x0108, r1
		return TRUE;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    15b2:	82 e2       	ldi	r24, 0x22	; 34
    15b4:	9c ef       	ldi	r25, 0xFC	; 252
    15b6:	60 91 6e 03 	lds	r22, 0x036E
    15ba:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    15be:	9b 01       	movw	r18, r22
    15c0:	ac 01       	movw	r20, r24
    15c2:	68 81       	ld	r22, Y
    15c4:	79 81       	ldd	r23, Y+1	; 0x01
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ca:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
    15ce:	88 23       	and	r24, r24
    15d0:	f1 f0       	breq	.+60     	; 0x160e <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	84 ff       	sbrs	r24, 4
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 );
    15d8:	83 e3       	ldi	r24, 0x33	; 51
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 6f 0a 	call	0x14de	; 0x14de <_Z18can_prep_configureP4sCAN>
			System_Send_Status = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	80 93 7b 03 	sts	0x037B, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    15e6:	e0 91 7d 03 	lds	r30, 0x037D
    15ea:	f0 91 7e 03 	lds	r31, 0x037E
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	19 f1       	breq	.+70     	; 0x1638 <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	8f 70       	andi	r24, 0x0F	; 15
    15f6:	09 95       	icall
		return TRUE;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 );
			System_Send_Status = 1;
		} else { 
			can_parse_configure_request( mMsg );	// in configuration.c
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 1f 11 	call	0x223e	; 0x223e <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    1606:	88 e0       	ldi	r24, 0x08	; 8
    1608:	80 93 7b 03 	sts	0x037B, r24
    160c:	ec cf       	rjmp	.-40     	; 0x15e6 <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    160e:	81 e2       	ldi	r24, 0x21	; 33
    1610:	9c ef       	ldi	r25, 0xFC	; 252
    1612:	60 91 6e 03 	lds	r22, 0x036E
    1616:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	68 81       	ld	r22, Y
    1620:	79 81       	ldd	r23, Y+1	; 0x01
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	9b 81       	ldd	r25, Y+3	; 0x03
    1626:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
    162a:	88 23       	and	r24, r24
    162c:	39 f0       	breq	.+14     	; 0x163c <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    162e:	88 e0       	ldi	r24, 0x08	; 8
    1630:	80 93 7b 03 	sts	0x037B, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	8a cf       	rjmp	.-236    	; 0x154c <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	88 cf       	rjmp	.-240    	; 0x154c <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    163c:	81 e2       	ldi	r24, 0x21	; 33
    163e:	9c ef       	ldi	r25, 0xFC	; 252
    1640:	6f ef       	ldi	r22, 0xFF	; 255
    1642:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	68 81       	ld	r22, Y
    164c:	79 81       	ldd	r23, Y+1	; 0x01
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1656:	88 23       	and	r24, r24
    1658:	51 f7       	brne	.-44     	; 0x162e <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    165a:	85 e2       	ldi	r24, 0x25	; 37
    165c:	9c ef       	ldi	r25, 0xFC	; 252
    165e:	60 91 6e 03 	lds	r22, 0x036E
    1662:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	68 81       	ld	r22, Y
    166c:	79 81       	ldd	r23, Y+1	; 0x01
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	9b 81       	ldd	r25, Y+3	; 0x03
    1672:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
    1676:	88 23       	and	r24, r24
    1678:	49 f5       	brne	.+82     	; 0x16cc <_Z23can_board_msg_responderP4sCAN+0x1ae>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    167a:	86 e2       	ldi	r24, 0x26	; 38
    167c:	9c ef       	ldi	r25, 0xFC	; 252
    167e:	60 91 6e 03 	lds	r22, 0x036E
    1682:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1686:	9b 01       	movw	r18, r22
    1688:	ac 01       	movw	r20, r24
    168a:	68 81       	ld	r22, Y
    168c:	79 81       	ldd	r23, Y+1	; 0x01
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
    1696:	88 23       	and	r24, r24
    1698:	79 f1       	breq	.+94     	; 0x16f8 <_Z23can_board_msg_responderP4sCAN+0x1da>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	8e 71       	andi	r24, 0x1E	; 30
    169e:	84 30       	cpi	r24, 0x04	; 4
    16a0:	59 f6       	brne	.-106    	; 0x1638 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	82 2b       	or	r24, r18
    16ac:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    16ae:	22 e1       	ldi	r18, 0x12	; 18
    16b0:	84 33       	cpi	r24, 0x34	; 52
    16b2:	92 07       	cpc	r25, r18
    16b4:	09 f6       	brne	.-126    	; 0x1638 <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    16b6:	85 e5       	ldi	r24, 0x55	; 85
    16b8:	80 93 76 03 	sts	0x0376, r24
				init_complete = FALSE;
    16bc:	10 92 70 03 	sts	0x0370, r1
				Confirmed     = NOT_CLAIMED;
    16c0:	10 92 6f 03 	sts	0x036F, r1
				can_instance_init();		// This fires off the sequencing right away.
    16c4:	0e 94 11 08 	call	0x1022	; 0x1022 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	40 cf       	rjmp	.-384    	; 0x154c <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 6f 03 	sts	0x036F, r24
		MyInstance = mMsg->data[0];
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	80 93 6e 03 	sts	0x036E, r24
		System_Send_Status |= 0x08;
    16d8:	80 91 7b 03 	lds	r24, 0x037B
    16dc:	88 60       	ori	r24, 0x08	; 8
    16de:	80 93 7b 03 	sts	0x037B, r24
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	0e 94 3a 04 	call	0x874	; 0x874 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    16e8:	60 91 6e 03 	lds	r22, 0x036E
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	0e 94 0a 04 	call	0x814	; 0x814 <_Z26can_add_instance_to_filterht>
		return TRUE;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	2a cf       	rjmp	.-428    	; 0x154c <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    16f8:	86 e2       	ldi	r24, 0x26	; 38
    16fa:	9c ef       	ldi	r25, 0xFC	; 252
    16fc:	6f ef       	ldi	r22, 0xFF	; 255
    16fe:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1702:	9b 01       	movw	r18, r22
    1704:	ac 01       	movw	r20, r24
    1706:	68 81       	ld	r22, Y
    1708:	79 81       	ldd	r23, Y+1	; 0x01
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z5match6idTypeS_>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    1712:	88 23       	and	r24, r24
    1714:	11 f6       	brne	.-124    	; 0x169a <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    1716:	83 e2       	ldi	r24, 0x23	; 35
    1718:	9c ef       	ldi	r25, 0xFC	; 252
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z14create_CAN_eidth>
    1720:	9b 01       	movw	r18, r22
    1722:	ac 01       	movw	r20, r24
    1724:	68 81       	ld	r22, Y
    1726:	79 81       	ldd	r23, Y+1	; 0x01
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z8id_match6idTypeS_>
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <_Z23can_board_msg_responderP4sCAN+0x218>
    1734:	0b cf       	rjmp	.-490    	; 0x154c <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	80 91 6e 03 	lds	r24, 0x036E
    173c:	98 17       	cp	r25, r24
    173e:	09 f0       	breq	.+2      	; 0x1742 <_Z23can_board_msg_responderP4sCAN+0x224>
    1740:	7b cf       	rjmp	.-266    	; 0x1638 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    1742:	80 91 6f 03 	lds	r24, 0x036F
    1746:	80 32       	cpi	r24, 0x20	; 32
    1748:	41 f0       	breq	.+16     	; 0x175a <_Z23can_board_msg_responderP4sCAN+0x23c>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    174a:	88 23       	and	r24, r24
    174c:	09 f0       	breq	.+2      	; 0x1750 <_Z23can_board_msg_responderP4sCAN+0x232>
    174e:	74 cf       	rjmp	.-280    	; 0x1638 <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	f9 ce       	rjmp	.-526    	; 0x154c <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    175a:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    175e:	80 e3       	ldi	r24, 0x30	; 48
    1760:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    1764:	80 91 ef 00 	lds	r24, 0x00EF
    1768:	8f 73       	andi	r24, 0x3F	; 63
    176a:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    176e:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    1772:	10 92 6f 03 	sts	0x036F, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    1776:	ce 01       	movw	r24, r28
    1778:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	e6 ce       	rjmp	.-564    	; 0x154c <_Z23can_board_msg_responderP4sCAN+0x2e>

00001780 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	7b 01       	movw	r14, r22
    178e:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    1790:	c0 e0       	ldi	r28, 0x00	; 0
    1792:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    1794:	ce 01       	movw	r24, r28
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	8c 0f       	add	r24, r28
    179c:	9d 1f       	adc	r25, r29
    179e:	fc 01       	movw	r30, r24
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	e8 0f       	add	r30, r24
    17aa:	f9 1f       	adc	r31, r25
    17ac:	e0 58       	subi	r30, 0x80	; 128
    17ae:	fc 4f       	sbci	r31, 0xFC	; 252
    17b0:	20 81       	ld	r18, Z
    17b2:	31 81       	ldd	r19, Z+1	; 0x01
    17b4:	42 81       	ldd	r20, Z+2	; 0x02
    17b6:	53 81       	ldd	r21, Z+3	; 0x03
    17b8:	c8 01       	movw	r24, r16
    17ba:	b7 01       	movw	r22, r14
    17bc:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z8id_match6idTypeS_>
    17c0:	88 23       	and	r24, r24
    17c2:	61 f4       	brne	.+24     	; 0x17dc <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    17c4:	21 96       	adiw	r28, 0x01	; 1
    17c6:	c6 30       	cpi	r28, 0x06	; 6
    17c8:	d1 05       	cpc	r29, r1
    17ca:	21 f7       	brne	.-56     	; 0x1794 <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    17cc:	8f ef       	ldi	r24, 0xFF	; 255
}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    17dc:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	08 95       	ret

000017ec <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    17ec:	28 2f       	mov	r18, r24
    17ee:	39 2f       	mov	r19, r25
    17f0:	d9 01       	movw	r26, r18
    17f2:	86 2f       	mov	r24, r22
    17f4:	97 2f       	mov	r25, r23
    17f6:	fc 01       	movw	r30, r24
    17f8:	8f e0       	ldi	r24, 0x0F	; 15
    17fa:	01 90       	ld	r0, Z+
    17fc:	0d 92       	st	X+, r0
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	e1 f7       	brne	.-8      	; 0x17fa <_Z12copy_can_msgP4sCANS0_+0xe>
}
    1802:	08 95       	ret

00001804 <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    1804:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    1806:	80 91 da 03 	lds	r24, 0x03DA
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9c 01       	movw	r18, r24
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	28 0f       	add	r18, r24
    1814:	39 1f       	adc	r19, r25
    1816:	c9 01       	movw	r24, r18
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	80 58       	subi	r24, 0x80	; 128
    1826:	9c 4f       	sbci	r25, 0xFC	; 252
    1828:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    182c:	80 91 da 03 	lds	r24, 0x03DA
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 da 03 	sts	0x03DA, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    1836:	86 30       	cpi	r24, 0x06	; 6
    1838:	10 f0       	brcs	.+4      	; 0x183e <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    183a:	10 92 da 03 	sts	0x03DA, r1
    183e:	08 95       	ret

00001840 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    1846:	68 81       	ld	r22, Y
    1848:	79 81       	ldd	r23, Y+1	; 0x01
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    1852:	8f 3f       	cpi	r24, 0xFF	; 255
    1854:	a9 f0       	breq	.+42     	; 0x1880 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9c 01       	movw	r18, r24
    185a:	22 0f       	add	r18, r18
    185c:	33 1f       	adc	r19, r19
    185e:	28 0f       	add	r18, r24
    1860:	39 1f       	adc	r19, r25
    1862:	c9 01       	movw	r24, r18
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	80 58       	subi	r24, 0x80	; 128
    1872:	9c 4f       	sbci	r25, 0xFC	; 252
    1874:	be 01       	movw	r22, r28
    1876:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    1880:	80 91 da 03 	lds	r24, 0x03DA
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9c 01       	movw	r18, r24
    1888:	22 0f       	add	r18, r18
    188a:	33 1f       	adc	r19, r19
    188c:	28 0f       	add	r18, r24
    188e:	39 1f       	adc	r19, r25
    1890:	c9 01       	movw	r24, r18
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	82 0f       	add	r24, r18
    189c:	93 1f       	adc	r25, r19
    189e:	80 58       	subi	r24, 0x80	; 128
    18a0:	9c 4f       	sbci	r25, 0xFC	; 252
    18a2:	be 01       	movw	r22, r28
    18a4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    18a8:	80 91 da 03 	lds	r24, 0x03DA
    18ac:	8f 5f       	subi	r24, 0xFF	; 255
    18ae:	80 93 da 03 	sts	0x03DA, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    18b2:	86 30       	cpi	r24, 0x06	; 6
    18b4:	10 f3       	brcs	.-60     	; 0x187a <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    18b6:	10 92 da 03 	sts	0x03DA, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <_Z12QueueMessageP4sCAN>:
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    18c0:	20 91 f0 03 	lds	r18, 0x03F0
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    18c4:	21 fd       	sbrc	r18, 1
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    18c8:	0e 94 20 0c 	call	0x1840	; 0x1840 <_Z17addMailboxHistoryP4sCAN>
    18cc:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    18ce:	0e 94 02 0c 	call	0x1804	; 0x1804 <_Z16addNormalHistoryP4sCAN>
    18d2:	08 95       	ret

000018d4 <_Z15RetrieveMessagev>:
    18d4:	80 91 f0 03 	lds	r24, 0x03F0
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    18d8:	81 ff       	sbrs	r24, 1
    18da:	1b c0       	rjmp	.+54     	; 0x1912 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    18dc:	20 91 db 03 	lds	r18, 0x03DB
    18e0:	80 91 da 03 	lds	r24, 0x03DA
    18e4:	28 17       	cp	r18, r24
    18e6:	c9 f0       	breq	.+50     	; 0x191a <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    18e8:	82 2f       	mov	r24, r18
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	80 93 db 03 	sts	0x03DB, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    18f0:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    18f2:	c9 01       	movw	r24, r18
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	82 0f       	add	r24, r18
    18fa:	93 1f       	adc	r25, r19
    18fc:	9c 01       	movw	r18, r24
    18fe:	22 0f       	add	r18, r18
    1900:	33 1f       	adc	r19, r19
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	28 0f       	add	r18, r24
    1908:	39 1f       	adc	r19, r25
    190a:	20 58       	subi	r18, 0x80	; 128
    190c:	3c 4f       	sbci	r19, 0xFC	; 252
		}
	}
	return NULL;
}
    190e:	c9 01       	movw	r24, r18
    1910:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
}
    1916:	c9 01       	movw	r24, r18
    1918:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    191a:	10 92 db 03 	sts	0x03DB, r1
			RxHead = 0;
    191e:	10 92 da 03 	sts	0x03DA, r1
			return NULL;
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	f3 cf       	rjmp	.-26     	; 0x190e <_Z15RetrieveMessagev+0x3a>

00001928 <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	ac 01       	movw	r20, r24
    192c:	44 0f       	add	r20, r20
    192e:	55 1f       	adc	r21, r21
    1930:	48 0f       	add	r20, r24
    1932:	59 1f       	adc	r21, r25
    1934:	9a 01       	movw	r18, r20
    1936:	22 0f       	add	r18, r18
    1938:	33 1f       	adc	r19, r19
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	24 0f       	add	r18, r20
    1940:	35 1f       	adc	r19, r21
    1942:	20 58       	subi	r18, 0x80	; 128
    1944:	3c 4f       	sbci	r19, 0xFC	; 252
}
    1946:	c9 01       	movw	r24, r18
    1948:	08 95       	ret

0000194a <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    194a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_Z15RetrieveMessagev>
	if (msg)
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	21 f0       	breq	.+8      	; 0x195a <_Z15CAN_Q_Timeslicev+0x10>
	{
		SET_LED_2();
    1952:	5d 9a       	sbi	0x0b, 5	; 11
    1954:	20 91 f0 03 	lds	r18, 0x03F0
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1958:	21 ff       	sbrs	r18, 1
    195a:	08 95       	ret
			can_file_message( msg );
    195c:	0e 94 98 00 	call	0x130	; 0x130 <_Z16can_file_messageP4sCAN>
    1960:	08 95       	ret

00001962 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    1962:	10 92 dd 03 	sts	0x03DD, r1
	System_LED_Control.pattern    = 0;
    1966:	10 92 dc 03 	sts	0x03DC, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    196a:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    196c:	55 9a       	sbi	0x0a, 5	; 10
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    196e:	57 9a       	sbi	0x0a, 7	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    1970:	51 9a       	sbi	0x0a, 1	; 10
#endif
  	RESET_LED_1();
    1972:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_2();
    1974:	5d 98       	cbi	0x0b, 5	; 11
	RESET_LED_3();
    1976:	5f 98       	cbi	0x0b, 7	; 11
	RESET_LED_4();
    1978:	59 98       	cbi	0x0b, 1	; 11
}
    197a:	08 95       	ret

0000197c <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	69 f0       	breq	.+26     	; 0x199a <_Z16protected_led_onh+0x1e>
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	28 f0       	brcs	.+10     	; 0x198e <_Z16protected_led_onh+0x12>
    1984:	83 30       	cpi	r24, 0x03	; 3
    1986:	59 f0       	breq	.+22     	; 0x199e <_Z16protected_led_onh+0x22>
    1988:	84 30       	cpi	r24, 0x04	; 4
    198a:	29 f0       	breq	.+10     	; 0x1996 <_Z16protected_led_onh+0x1a>
    198c:	08 95       	ret
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	e9 f7       	brne	.-6      	; 0x198c <_Z16protected_led_onh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
    1992:	5e 9a       	sbi	0x0b, 6	; 11
    1994:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    1996:	59 9a       	sbi	0x0b, 1	; 11
    1998:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
    199a:	5d 9a       	sbi	0x0b, 5	; 11
    199c:	08 95       	ret
   case 3:  SET_LED_3();  break;
    199e:	5f 9a       	sbi	0x0b, 7	; 11
    19a0:	08 95       	ret

000019a2 <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	69 f0       	breq	.+26     	; 0x19c0 <_Z17protected_led_offh+0x1e>
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	28 f0       	brcs	.+10     	; 0x19b4 <_Z17protected_led_offh+0x12>
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	59 f0       	breq	.+22     	; 0x19c4 <_Z17protected_led_offh+0x22>
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	29 f0       	breq	.+10     	; 0x19bc <_Z17protected_led_offh+0x1a>
    19b2:	08 95       	ret
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	e9 f7       	brne	.-6      	; 0x19b2 <_Z17protected_led_offh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
    19b8:	5e 98       	cbi	0x0b, 6	; 11
    19ba:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    19bc:	59 98       	cbi	0x0b, 1	; 11
    19be:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
    19c0:	5d 98       	cbi	0x0b, 5	; 11
    19c2:	08 95       	ret
   case 3:  RESET_LED_3();  break;
    19c4:	5f 98       	cbi	0x0b, 7	; 11
    19c6:	08 95       	ret

000019c8 <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    19c8:	90 91 dd 03 	lds	r25, 0x03DD
    19cc:	99 23       	and	r25, r25
    19ce:	21 f0       	breq	.+8      	; 0x19d8 <_Z11strobe_ledsh+0x10>
    19d0:	92 30       	cpi	r25, 0x02	; 2
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	08 95       	ret
    19d8:	90 91 0c 01 	lds	r25, 0x010C
    19dc:	29 2f       	mov	r18, r25
    19de:	21 50       	subi	r18, 0x01	; 1
    19e0:	20 93 0c 01 	sts	0x010C, r18
    19e4:	99 23       	and	r25, r25
    19e6:	b1 f7       	brne	.-20     	; 0x19d4 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    19e8:	9a e0       	ldi	r25, 0x0A	; 10
    19ea:	90 93 0c 01 	sts	0x010C, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    19ee:	88 23       	and	r24, r24
    19f0:	79 f0       	breq	.+30     	; 0x1a10 <_Z11strobe_ledsh+0x48>
    19f2:	80 91 0b 01 	lds	r24, 0x010B
    19f6:	0e 94 be 0c 	call	0x197c	; 0x197c <_Z16protected_led_onh>
		i++;
    19fa:	80 91 0b 01 	lds	r24, 0x010B
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 0b 01 	sts	0x010B, r24
		if (i>=5)  { i=1; return TRUE; }
    1a04:	85 30       	cpi	r24, 0x05	; 5
    1a06:	78 f0       	brcs	.+30     	; 0x1a26 <_Z11strobe_ledsh+0x5e>
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	80 93 0b 01 	sts	0x010B, r24
    1a0e:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    1a10:	80 91 0b 01 	lds	r24, 0x010B
    1a14:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_Z17protected_led_offh>
		i++;
    1a18:	80 91 0b 01 	lds	r24, 0x010B
    1a1c:	8f 5f       	subi	r24, 0xFF	; 255
    1a1e:	80 93 0b 01 	sts	0x010B, r24
		if (i>=5)  { i=1; return TRUE; }
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	88 f7       	brcc	.-30     	; 0x1a08 <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    1a26:	80 e0       	ldi	r24, 0x00	; 0
}
    1a28:	08 95       	ret

00001a2a <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1a2a:	90 91 dd 03 	lds	r25, 0x03DD
    1a2e:	91 11       	cpse	r25, r1
    1a30:	08 95       	ret
	protected_led_on(mindex);
    1a32:	0e 94 be 0c 	call	0x197c	; 0x197c <_Z16protected_led_onh>
    1a36:	08 95       	ret

00001a38 <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1a38:	90 91 dd 03 	lds	r25, 0x03DD
    1a3c:	91 11       	cpse	r25, r1
    1a3e:	08 95       	ret
	protected_led_off(mindex);
    1a40:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_Z17protected_led_offh>
    1a44:	08 95       	ret

00001a46 <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    1a46:	66 23       	and	r22, r22
    1a48:	19 f4       	brne	.+6      	; 0x1a50 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    1a4a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_Z7led_offh>
    1a4e:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    1a50:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_Z6led_onh>
    1a54:	08 95       	ret

00001a56 <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1a56:	90 91 dd 03 	lds	r25, 0x03DD
    1a5a:	91 11       	cpse	r25, r1
    1a5c:	08 95       	ret
	protected_set_led( mindex, value );
    1a5e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_Z17protected_set_ledhh>
    1a62:	08 95       	ret

00001a64 <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    1a64:	66 23       	and	r22, r22
    1a66:	69 f0       	breq	.+26     	; 0x1a82 <_Z19protected_show_bytehh+0x1e>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1a68:	87 ff       	sbrs	r24, 7
    1a6a:	20 c0       	rjmp	.+64     	; 0x1aac <_Z19protected_show_bytehh+0x48>
    1a6c:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1a6e:	86 ff       	sbrs	r24, 6
    1a70:	20 c0       	rjmp	.+64     	; 0x1ab2 <_Z19protected_show_bytehh+0x4e>
    1a72:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1a74:	85 ff       	sbrs	r24, 5
    1a76:	20 c0       	rjmp	.+64     	; 0x1ab8 <_Z19protected_show_bytehh+0x54>
    1a78:	5d 9a       	sbi	0x0b, 5	; 11
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    1a7a:	84 fd       	sbrc	r24, 4
    1a7c:	0d c0       	rjmp	.+26     	; 0x1a98 <_Z19protected_show_bytehh+0x34>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1a7e:	5e 98       	cbi	0x0b, 6	; 11
    1a80:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1a82:	83 ff       	sbrs	r24, 3
    1a84:	0b c0       	rjmp	.+22     	; 0x1a9c <_Z19protected_show_bytehh+0x38>
    1a86:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1a88:	82 ff       	sbrs	r24, 2
    1a8a:	0b c0       	rjmp	.+22     	; 0x1aa2 <_Z19protected_show_bytehh+0x3e>
    1a8c:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1a8e:	81 ff       	sbrs	r24, 1
    1a90:	0b c0       	rjmp	.+22     	; 0x1aa8 <_Z19protected_show_bytehh+0x44>
    1a92:	5d 9a       	sbi	0x0b, 5	; 11
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1a94:	80 ff       	sbrs	r24, 0
    1a96:	f3 cf       	rjmp	.-26     	; 0x1a7e <_Z19protected_show_bytehh+0x1a>
    1a98:	5e 9a       	sbi	0x0b, 6	; 11
    1a9a:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1a9c:	59 98       	cbi	0x0b, 1	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1a9e:	82 fd       	sbrc	r24, 2
    1aa0:	f5 cf       	rjmp	.-22     	; 0x1a8c <_Z19protected_show_bytehh+0x28>
    1aa2:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1aa4:	81 fd       	sbrc	r24, 1
    1aa6:	f5 cf       	rjmp	.-22     	; 0x1a92 <_Z19protected_show_bytehh+0x2e>
    1aa8:	5d 98       	cbi	0x0b, 5	; 11
    1aaa:	f4 cf       	rjmp	.-24     	; 0x1a94 <_Z19protected_show_bytehh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1aac:	59 98       	cbi	0x0b, 1	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1aae:	86 fd       	sbrc	r24, 6
    1ab0:	e0 cf       	rjmp	.-64     	; 0x1a72 <_Z19protected_show_bytehh+0xe>
    1ab2:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1ab4:	85 fd       	sbrc	r24, 5
    1ab6:	e0 cf       	rjmp	.-64     	; 0x1a78 <_Z19protected_show_bytehh+0x14>
    1ab8:	5d 98       	cbi	0x0b, 5	; 11
    1aba:	df cf       	rjmp	.-66     	; 0x1a7a <_Z19protected_show_bytehh+0x16>

00001abc <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    1abc:	90 91 dd 03 	lds	r25, 0x03DD
    1ac0:	99 23       	and	r25, r25
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    1ac4:	80 91 dc 03 	lds	r24, 0x03DC
	}
    protected_show_byte( result, mHiNibble );
    1ac8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_Z19protected_show_bytehh>
}
    1acc:	08 95       	ret

00001ace <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1ace:	90 91 dd 03 	lds	r25, 0x03DD
    1ad2:	99 23       	and	r25, r25
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <_Z18show_result_toggleh+0xe>
    1ad6:	93 30       	cpi	r25, 0x03	; 3
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <_Z18show_result_toggleh+0xe>
    1ada:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    1adc:	90 91 09 01 	lds	r25, 0x0109
    1ae0:	99 23       	and	r25, r25
    1ae2:	59 f4       	brne	.+22     	; 0x1afa <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 91 09 01 	lds	r25, 0x0109
    1af0:	91 11       	cpse	r25, r1
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	80 93 09 01 	sts	0x0109, r24
    1af8:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_Z19protected_show_bytehh>
    1b00:	f4 cf       	rjmp	.-24     	; 0x1aea <_Z18show_result_toggleh+0x1c>

00001b02 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    1b02:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    1b04:	95 81       	ldd	r25, Z+5	; 0x05
    1b06:	9f 70       	andi	r25, 0x0F	; 15
    1b08:	90 93 dd 03 	sts	0x03DD, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    1b0c:	86 81       	ldd	r24, Z+6	; 0x06
    1b0e:	8f 70       	andi	r24, 0x0F	; 15
    1b10:	80 93 dc 03 	sts	0x03DC, r24

	switch (System_LED_Control.systemMode)
    1b14:	92 30       	cpi	r25, 0x02	; 2
    1b16:	81 f0       	breq	.+32     	; 0x1b38 <_Z21can_parse_led_requestP4sCAN+0x36>
    1b18:	93 30       	cpi	r25, 0x03	; 3
    1b1a:	39 f0       	breq	.+14     	; 0x1b2a <_Z21can_parse_led_requestP4sCAN+0x28>
    1b1c:	91 30       	cpi	r25, 0x01	; 1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <_Z21can_parse_led_requestP4sCAN+0x20>
    1b20:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_Z9show_bytehh>
									  break;
    1b28:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    1b2a:	80 91 6e 03 	lds	r24, 0x036E
    1b2e:	80 93 dc 03 	sts	0x03DC, r24
									  show_result_toggle( MyInstance );
    1b32:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_Z18show_result_toggleh>
    1b36:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    1b38:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_Z11strobe_ledsh>
									  break;
    1b3c:	08 95       	ret

00001b3e <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    1b3e:	80 91 dd 03 	lds	r24, 0x03DD
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	d9 f0       	breq	.+54     	; 0x1b7c <_Z19led_timeslice_100msv+0x3e>
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	49 f0       	breq	.+18     	; 0x1b5c <_Z19led_timeslice_100msv+0x1e>
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <_Z19led_timeslice_100msv+0x12>
    1b4e:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    1b50:	80 91 dc 03 	lds	r24, 0x03DC
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_Z9show_bytehh>
									  break;
    1b5a:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    1b5c:	80 91 0a 01 	lds	r24, 0x010A
    1b60:	98 2f       	mov	r25, r24
    1b62:	91 50       	subi	r25, 0x01	; 1
    1b64:	90 93 0a 01 	sts	0x010A, r25
    1b68:	88 23       	and	r24, r24
    1b6a:	89 f7       	brne	.-30     	; 0x1b4e <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    1b6c:	8a e0       	ldi	r24, 0x0A	; 10
    1b6e:	80 93 0a 01 	sts	0x010A, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    1b72:	80 91 6e 03 	lds	r24, 0x036E
    1b76:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_Z18show_result_toggleh>
    1b7a:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    1b7c:	80 91 dc 03 	lds	r24, 0x03DC
    1b80:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_Z11strobe_ledsh>
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	19 f7       	brne	.-58     	; 0x1b4e <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    1b88:	90 91 dc 03 	lds	r25, 0x03DC
    1b8c:	99 23       	and	r25, r25
    1b8e:	19 f4       	brne	.+6      	; 0x1b96 <_Z19led_timeslice_100msv+0x58>
    1b90:	80 93 dc 03 	sts	0x03DC, r24
    1b94:	08 95       	ret
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	fb cf       	rjmp	.-10     	; 0x1b90 <_Z19led_timeslice_100msv+0x52>

00001b9a <set_spi_isr_callback>:
			  which has a system message ID
******************************************************************************/
void set_spi_isr_callback( BOOL (*mCallback)(void) )
{
	//printf("set_spi_isr_callback(%d)\n", mCallback);
	spi_isr_call_back = mCallback;
    1b9a:	90 93 e0 03 	sts	0x03E0, r25
    1b9e:	80 93 df 03 	sts	0x03DF, r24
}
    1ba2:	08 95       	ret

00001ba4 <__vector_26>:
//#include "rpi_spi.h"
//#include "servos.h"

/******* SPI Transfer Complete ISR ***************/
ISR ( SPI_STC_vect )
{	
    1ba4:	1f 92       	push	r1
    1ba6:	0f 92       	push	r0
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	0f 92       	push	r0
    1bac:	11 24       	eor	r1, r1
    1bae:	8f 93       	push	r24
//	if (spi_isr_call_back)
//		spi_isr_call_back();

	SPSR &= 0x7F;
    1bb0:	8d b5       	in	r24, 0x2d	; 45
    1bb2:	8f 77       	andi	r24, 0x7F	; 127
    1bb4:	8d bd       	out	0x2d, r24	; 45
//test_rx_response( SPDR );		here for the PiCamScan board
}
    1bb6:	8f 91       	pop	r24
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <_Z16SPI_SlaveReceivev>:

char SPI_SlaveReceive(void) 
{
	/* Wait for reception complete */ 
	while(!(SPSR & (1<<SPIF)));
    1bc2:	0d b4       	in	r0, 0x2d	; 45
    1bc4:	07 fe       	sbrs	r0, 7
    1bc6:	fd cf       	rjmp	.-6      	; 0x1bc2 <_Z16SPI_SlaveReceivev>
	/* Return data register */ 
	return SPDR;
    1bc8:	8e b5       	in	r24, 0x2e	; 46
}
    1bca:	08 95       	ret

00001bcc <spi_setBitOrder>:

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <spi_setBitOrder+0xc>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    1bd0:	8c b5       	in	r24, 0x2c	; 44
    1bd2:	8f 7d       	andi	r24, 0xDF	; 223
    1bd4:	8c bd       	out	0x2c, r24	; 44
    1bd6:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    1bd8:	8c b5       	in	r24, 0x2c	; 44
    1bda:	80 62       	ori	r24, 0x20	; 32
    1bdc:	8c bd       	out	0x2c, r24	; 44
    1bde:	08 95       	ret

00001be0 <spi_setDataMode>:
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1be0:	9c b5       	in	r25, 0x2c	; 44
    1be2:	93 7f       	andi	r25, 0xF3	; 243
    1be4:	98 2b       	or	r25, r24
    1be6:	9c bd       	out	0x2c, r25	; 44
}
    1be8:	08 95       	ret

00001bea <spi_setClockDivider>:

// Sets BaudRate:
/* rate:  [0..7]  */
void spi_setClockDivider( uint8_t rate )
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK)   | (rate & SPI_CLOCK_MASK);
    1bea:	2c b5       	in	r18, 0x2c	; 44
    1bec:	98 2f       	mov	r25, r24
    1bee:	93 70       	andi	r25, 0x03	; 3
    1bf0:	2c 7f       	andi	r18, 0xFC	; 252
    1bf2:	92 2b       	or	r25, r18
    1bf4:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    1bf6:	2d b5       	in	r18, 0x2d	; 45
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	95 95       	asr	r25
    1bfc:	87 95       	ror	r24
    1bfe:	95 95       	asr	r25
    1c00:	87 95       	ror	r24
    1c02:	81 70       	andi	r24, 0x01	; 1
    1c04:	2e 7f       	andi	r18, 0xFE	; 254
    1c06:	82 2b       	or	r24, r18
    1c08:	8d bd       	out	0x2d, r24	; 45
}
    1c0a:	08 95       	ret

00001c0c <_Z7pin_ddrhh>:
  /************************ WARNING!! *****************************
   No need to modify MCUCR reigsters.  Default is '0' which means
   the SPI to use regular MISO/MOSI, not the alternate pins 
   NOTE: The Serial Progamming always uses the Alternate pins.
   ****************************************************************/
  if (mAlternatePins)
    1c0c:	88 23       	and	r24, r24
    1c0e:	59 f0       	breq	.+22     	; 0x1c26 <_Z7pin_ddrhh+0x1a>
  {
  	MCUCR |= (1<<SPIPS); 				        // Clear for MOSI.  Set for MOSI_A
    1c10:	85 b7       	in	r24, 0x35	; 53
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	85 bf       	out	0x35, r24	; 53
	if (mMaster)
    1c16:	66 23       	and	r22, r22
    1c18:	71 f0       	breq	.+28     	; 0x1c36 <_Z7pin_ddrhh+0x2a>
	{
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD &= ~MISO_A;
    1c1a:	52 98       	cbi	0x0a, 2	; 10
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD |= MOSI_A|SCK_A;
    1c1c:	8a b1       	in	r24, 0x0a	; 10
    1c1e:	88 61       	ori	r24, 0x18	; 24
    1c20:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;	
    1c22:	38 98       	cbi	0x07, 0	; 7
    1c24:	08 95       	ret
	}  
  }
  else
  {
  	  //MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
	  if (mMaster)
    1c26:	66 23       	and	r22, r22
    1c28:	61 f4       	brne	.+24     	; 0x1c42 <_Z7pin_ddrhh+0x36>
		  DDRB |= (MOSI|SCK);
		  DDRD |= SS;
	  } else {
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRB |= MISO;
    1c2a:	20 9a       	sbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB &= ~(MOSI|SCK);
    1c2c:	84 b1       	in	r24, 0x04	; 4
    1c2e:	8d 77       	andi	r24, 0x7D	; 125
    1c30:	84 b9       	out	0x04, r24	; 4
		  DDRD &= ~SS;		  
    1c32:	53 98       	cbi	0x0a, 3	; 10
    1c34:	08 95       	ret
		  DDRC &= ~SS_A;	
	}
	else {	
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD |= MISO_A;
    1c36:	52 9a       	sbi	0x0a, 2	; 10

		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD &= ~(MOSI_A|SCK_A);
    1c38:	8a b1       	in	r24, 0x0a	; 10
    1c3a:	87 7e       	andi	r24, 0xE7	; 231
    1c3c:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;
    1c3e:	38 98       	cbi	0x07, 0	; 7
    1c40:	08 95       	ret
  	  //MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
	  if (mMaster)
	  {
		  /* Set MISO,SS input, all others output */
		  // OUTPUTS (MISO)
		  DDRB &= ~MISO;
    1c42:	20 98       	cbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB |= (MOSI|SCK);
    1c44:	84 b1       	in	r24, 0x04	; 4
    1c46:	82 68       	ori	r24, 0x82	; 130
    1c48:	84 b9       	out	0x04, r24	; 4
		  DDRD |= SS;
    1c4a:	53 9a       	sbi	0x0a, 3	; 10
    1c4c:	08 95       	ret

00001c4e <spi_init>:
	
	mbit_order	:	[MSGFIRST,LSBFIRST]  
	mSPI_Mode	:	SPI mode [SPI_MODE0..SPI_MODE3]
****************************************************************************/
void spi_init( BOOL mAlternatePins, BOOL mMaster, uint8_t mbit_order, uint8_t mSPI_Mode )
{
    1c4e:	1f 93       	push	r17
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <spi_init+0x8>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	16 2f       	mov	r17, r22
	pin_ddr(mAlternatePins, mMaster);
    1c5c:	2a 83       	std	Y+2, r18	; 0x02
    1c5e:	49 83       	std	Y+1, r20	; 0x01
    1c60:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_Z7pin_ddrhh>
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1c64:	8c b5       	in	r24, 0x2c	; 44
    1c66:	83 7f       	andi	r24, 0xF3	; 243
    1c68:	2a 81       	ldd	r18, Y+2	; 0x02
    1c6a:	82 2b       	or	r24, r18
    1c6c:	8c bd       	out	0x2c, r24	; 44
}

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    1c6e:	49 81       	ldd	r20, Y+1	; 0x01
    1c70:	41 30       	cpi	r20, 0x01	; 1
    1c72:	a1 f0       	breq	.+40     	; 0x1c9c <spi_init+0x4e>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    1c74:	8c b5       	in	r24, 0x2c	; 44
    1c76:	8f 7d       	andi	r24, 0xDF	; 223
    1c78:	8c bd       	out	0x2c, r24	; 44
	spi_setBitOrder( mbit_order );		// LIS3d & CMR3000 (accel & gyro) both require msb first.

	// Warning: if the SS pin ever becomes a LOW INPUT then SPI 
	// automatically switches to Slave, so the data direction of 
	// the SS pin MUST be kept as OUTPUT.
	if (mMaster)
    1c7a:	11 23       	and	r17, r17
    1c7c:	a1 f4       	brne	.+40     	; 0x1ca6 <spi_init+0x58>
	{
	  SPCR |= (1<<MSTR);		// Master SPI
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
	} else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
    1c7e:	8c b5       	in	r24, 0x2c	; 44
    1c80:	8f 7e       	andi	r24, 0xEF	; 239
    1c82:	8c bd       	out	0x2c, r24	; 44
  return SPDR;
}

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    1c84:	8c b5       	in	r24, 0x2c	; 44
    1c86:	80 68       	ori	r24, 0x80	; 128
    1c88:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
	} else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
	  spi_attachInterrupt();
	}
	SPCR |= (1<<SPE);				// Enable SPI Module
    1c8a:	8c b5       	in	r24, 0x2c	; 44
    1c8c:	80 64       	ori	r24, 0x40	; 64
    1c8e:	8c bd       	out	0x2c, r24	; 44
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	1f 91       	pop	r17
    1c9a:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    1c9c:	8c b5       	in	r24, 0x2c	; 44
    1c9e:	80 62       	ori	r24, 0x20	; 32
    1ca0:	8c bd       	out	0x2c, r24	; 44
	spi_setBitOrder( mbit_order );		// LIS3d & CMR3000 (accel & gyro) both require msb first.

	// Warning: if the SS pin ever becomes a LOW INPUT then SPI 
	// automatically switches to Slave, so the data direction of 
	// the SS pin MUST be kept as OUTPUT.
	if (mMaster)
    1ca2:	11 23       	and	r17, r17
    1ca4:	61 f3       	breq	.-40     	; 0x1c7e <spi_init+0x30>
	{
	  SPCR |= (1<<MSTR);		// Master SPI
    1ca6:	8c b5       	in	r24, 0x2c	; 44
    1ca8:	80 61       	ori	r24, 0x10	; 16
    1caa:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <spi_setClockDivider>
    1cb2:	eb cf       	rjmp	.-42     	; 0x1c8a <spi_init+0x3c>

00001cb4 <spi_transfer>:
	SPCR |= (1<<SPE);				// Enable SPI Module
}

byte spi_transfer(byte _data) 
{
  SPDR = _data;
    1cb4:	8e bd       	out	0x2e, r24	; 46
  // 0xC0 = (1<<SPIF) | (1<<WCOL)
  while (! (SPSR&0xC0) ) {};
    1cb6:	8d b5       	in	r24, 0x2d	; 45
    1cb8:	80 7c       	andi	r24, 0xC0	; 192
    1cba:	e9 f3       	breq	.-6      	; 0x1cb6 <spi_transfer+0x2>
  return SPDR;
    1cbc:	8e b5       	in	r24, 0x2e	; 46
}
    1cbe:	08 95       	ret

00001cc0 <spi_attachInterrupt>:

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    1cc0:	8c b5       	in	r24, 0x2c	; 44
    1cc2:	80 68       	ori	r24, 0x80	; 128
    1cc4:	8c bd       	out	0x2c, r24	; 44
}
    1cc6:	08 95       	ret

00001cc8 <spi_detachInterrupt>:

void spi_detachInterrupt() 
{
  SPCR &= ~(1<<SPIE);
    1cc8:	8c b5       	in	r24, 0x2c	; 44
    1cca:	8f 77       	andi	r24, 0x7F	; 127
    1ccc:	8c bd       	out	0x2c, r24	; 44
}
    1cce:	08 95       	ret

00001cd0 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1cd0:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1cd2:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1cd4:	90 93 89 00 	sts	0x0089, r25
    1cd8:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    1cdc:	2f bf       	out	0x3f, r18	; 63
}
    1cde:	08 95       	ret

00001ce0 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1ce0:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    1ce2:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    1ce4:	90 93 8b 00 	sts	0x008B, r25
    1ce8:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    1cec:	2f bf       	out	0x3f, r18	; 63
}
    1cee:	08 95       	ret

00001cf0 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	7b 01       	movw	r14, r22
    1cfa:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1cfc:	20 91 0d 01 	lds	r18, 0x010D
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	74 e2       	ldi	r23, 0x24	; 36
    1d0a:	84 ef       	ldi	r24, 0xF4	; 244
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodsi4>
    1d12:	ca 01       	movw	r24, r20
    1d14:	b9 01       	movw	r22, r18
    1d16:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__floatsisf>
    1d1a:	a8 01       	movw	r20, r16
    1d1c:	97 01       	movw	r18, r14
    1d1e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__divsf3>
    1d22:	0e 94 be 12 	call	0x257c	; 0x257c <__fixunssfsi>
	return Top;
}
    1d26:	cb 01       	movw	r24, r22
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	08 95       	ret

00001d32 <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    1d32:	90 93 0f 01 	sts	0x010F, r25
    1d36:	80 93 0e 01 	sts	0x010E, r24
	ICR1 = TOP;
    1d3a:	90 93 87 00 	sts	0x0087, r25
    1d3e:	80 93 86 00 	sts	0x0086, r24
}
    1d42:	08 95       	ret

00001d44 <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	9b 01       	movw	r18, r22
    1d4e:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	74 e2       	ldi	r23, 0x24	; 36
    1d54:	84 e7       	ldi	r24, 0x74	; 116
    1d56:	9b e4       	ldi	r25, 0x4B	; 75
    1d58:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__divsf3>
    1d5c:	8b 01       	movw	r16, r22
    1d5e:	d8 2f       	mov	r29, r24
    1d60:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1d62:	9e 01       	movw	r18, r28
    1d64:	71 2f       	mov	r23, r17
    1d66:	83 2f       	mov	r24, r19
    1d68:	92 2f       	mov	r25, r18
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <_Z16select_prescalerf+0x38>
    1d7a:	41 c0       	rjmp	.+130    	; 0x1dfe <_Z16select_prescalerf+0xba>
    1d7c:	9e 01       	movw	r18, r28
    1d7e:	60 2f       	mov	r22, r16
    1d80:	71 2f       	mov	r23, r17
    1d82:	83 2f       	mov	r24, r19
    1d84:	92 2f       	mov	r25, r18
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	5e e3       	ldi	r21, 0x3E	; 62
    1d8e:	0e 94 92 14 	call	0x2924	; 0x2924 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	b4 f5       	brge	.+108    	; 0x1e0e <_Z16select_prescalerf+0xca>
    1da2:	9e 01       	movw	r18, r28
    1da4:	60 2f       	mov	r22, r16
    1da6:	71 2f       	mov	r23, r17
    1da8:	83 2f       	mov	r24, r19
    1daa:	92 2f       	mov	r25, r18
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5c e3       	ldi	r21, 0x3C	; 60
    1db4:	0e 94 92 14 	call	0x2924	; 0x2924 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	4f e7       	ldi	r20, 0x7F	; 127
    1dbe:	57 e4       	ldi	r21, 0x47	; 71
    1dc0:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__gtsf2>
    1dc4:	18 16       	cp	r1, r24
    1dc6:	4c f5       	brge	.+82     	; 0x1e1a <_Z16select_prescalerf+0xd6>
    1dc8:	9e 01       	movw	r18, r28
    1dca:	60 2f       	mov	r22, r16
    1dcc:	71 2f       	mov	r23, r17
    1dce:	83 2f       	mov	r24, r19
    1dd0:	92 2f       	mov	r25, r18
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5b e3       	ldi	r21, 0x3B	; 59
    1dda:	0e 94 92 14 	call	0x2924	; 0x2924 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	9c f4       	brge	.+38     	; 0x1e14 <_Z16select_prescalerf+0xd0>
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    1df2:	c9 01       	movw	r24, r18
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    1dfe:	21 e0       	ldi	r18, 0x01	; 1
    1e00:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    1e02:	c9 01       	movw	r24, r18
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1e0e:	28 e0       	ldi	r18, 0x08	; 8
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	ef cf       	rjmp	.-34     	; 0x1df2 <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	31 e0       	ldi	r19, 0x01	; 1
    1e18:	ec cf       	rjmp	.-40     	; 0x1df2 <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    1e1a:	20 e4       	ldi	r18, 0x40	; 64
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	e9 cf       	rjmp	.-46     	; 0x1df2 <_Z16select_prescalerf+0xae>

00001e20 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1e20:	80 34       	cpi	r24, 0x40	; 64
    1e22:	91 05       	cpc	r25, r1
    1e24:	d9 f0       	breq	.+54     	; 0x1e5c <_Z20get_tccr1b_prescalert+0x3c>
    1e26:	81 34       	cpi	r24, 0x41	; 65
    1e28:	91 05       	cpc	r25, r1
    1e2a:	50 f0       	brcs	.+20     	; 0x1e40 <_Z20get_tccr1b_prescalert+0x20>
    1e2c:	21 e0       	ldi	r18, 0x01	; 1
    1e2e:	80 30       	cpi	r24, 0x00	; 0
    1e30:	92 07       	cpc	r25, r18
    1e32:	81 f0       	breq	.+32     	; 0x1e54 <_Z20get_tccr1b_prescalert+0x34>
    1e34:	24 e0       	ldi	r18, 0x04	; 4
    1e36:	80 30       	cpi	r24, 0x00	; 0
    1e38:	92 07       	cpc	r25, r18
    1e3a:	51 f0       	breq	.+20     	; 0x1e50 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	49 f0       	breq	.+18     	; 0x1e58 <_Z20get_tccr1b_prescalert+0x38>
    1e46:	88 30       	cpi	r24, 0x08	; 8
    1e48:	91 05       	cpc	r25, r1
    1e4a:	c1 f7       	brne	.-16     	; 0x1e3c <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    1e4e:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    1e50:	85 e0       	ldi	r24, 0x05	; 5
    1e52:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	08 95       	ret

00001e60 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    1e60:	ef 92       	push	r14
    1e62:	ff 92       	push	r15
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	7b 01       	movw	r14, r22
    1e6a:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1e6c:	20 91 0d 01 	lds	r18, 0x010D
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	74 e2       	ldi	r23, 0x24	; 36
    1e7a:	84 ef       	ldi	r24, 0xF4	; 244
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodsi4>
    1e82:	ca 01       	movw	r24, r20
    1e84:	b9 01       	movw	r22, r18
    1e86:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__floatsisf>
    1e8a:	a8 01       	movw	r20, r16
    1e8c:	97 01       	movw	r18, r14
    1e8e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__divsf3>
    1e92:	0e 94 be 12 	call	0x257c	; 0x257c <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    1e96:	70 93 0f 01 	sts	0x010F, r23
    1e9a:	60 93 0e 01 	sts	0x010E, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    1e9e:	70 93 87 00 	sts	0x0087, r23
    1ea2:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	08 95       	ret

00001eb0 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	7b 01       	movw	r14, r22
    1ebe:	8c 01       	movw	r16, r24
    1ec0:	c4 2f       	mov	r28, r20
    1ec2:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    1ec4:	41 11       	cpse	r20, r1
    1ec6:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    1ec8:	d1 11       	cpse	r29, r1
    1eca:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    1ecc:	80 91 64 00 	lds	r24, 0x0064
    1ed0:	87 7e       	andi	r24, 0xE7	; 231
    1ed2:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1ed6:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1ed8:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1eda:	10 92 89 00 	sts	0x0089, r1
    1ede:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    1ee2:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1ee4:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1ee6:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    1ee8:	10 92 8b 00 	sts	0x008B, r1
    1eec:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    1ef0:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1ef2:	20 91 0d 01 	lds	r18, 0x010D
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	74 e2       	ldi	r23, 0x24	; 36
    1f00:	84 ef       	ldi	r24, 0xF4	; 244
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodsi4>
    1f08:	ca 01       	movw	r24, r20
    1f0a:	b9 01       	movw	r22, r18
    1f0c:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__floatsisf>
    1f10:	a8 01       	movw	r20, r16
    1f12:	97 01       	movw	r18, r14
    1f14:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__divsf3>
    1f18:	0e 94 be 12 	call	0x257c	; 0x257c <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    1f1c:	70 93 0f 01 	sts	0x010F, r23
    1f20:	60 93 0e 01 	sts	0x010E, r22
	ICR1 = TOP;
    1f24:	70 93 87 00 	sts	0x0087, r23
    1f28:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    1f2c:	cc 23       	and	r28, r28
    1f2e:	c1 f4       	brne	.+48     	; 0x1f60 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    1f30:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    1f32:	d1 11       	cpse	r29, r1
    1f34:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    1f36:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_Z16select_prescalerf>
    1f42:	80 93 0d 01 	sts	0x010D, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z20get_tccr1b_prescalert>
    1f4c:	88 61       	ori	r24, 0x18	; 24
    1f4e:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    1f60:	82 e8       	ldi	r24, 0x82	; 130
    1f62:	e7 cf       	rjmp	.-50     	; 0x1f32 <_Z8pwm_initfhh+0x82>

00001f64 <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    1f64:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    1f68:	29 2f       	mov	r18, r25
    1f6a:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    1f6c:	88 23       	and	r24, r24
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    1f70:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    1f72:	90 93 80 00 	sts	0x0080, r25
}
    1f76:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    1f78:	92 2f       	mov	r25, r18
    1f7a:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    1f7c:	90 93 80 00 	sts	0x0080, r25
}
    1f80:	08 95       	ret

00001f82 <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    1f82:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    1f86:	29 2f       	mov	r18, r25
    1f88:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    1f8a:	88 23       	and	r24, r24
    1f8c:	21 f4       	brne	.+8      	; 0x1f96 <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    1f8e:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    1f90:	90 93 80 00 	sts	0x0080, r25
}
    1f94:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    1f96:	92 2f       	mov	r25, r18
    1f98:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    1f9a:	90 93 80 00 	sts	0x0080, r25
}
    1f9e:	08 95       	ret

00001fa0 <_Z9set_dutyAf>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_dutyA( float mDuty )
{
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	7b 01       	movw	r14, r22
    1faa:	8c 01       	movw	r16, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	a9 01       	movw	r20, r18
    1fb2:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__ltsf2>
    1fb6:	87 ff       	sbrs	r24, 7
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <_Z9set_dutyAf+0x22>
    1fba:	17 fb       	bst	r17, 7
    1fbc:	10 95       	com	r17
    1fbe:	17 f9       	bld	r17, 7
    1fc0:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    1fc2:	60 91 0e 01 	lds	r22, 0x010E
    1fc6:	70 91 0f 01 	lds	r23, 0x010F
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__floatunsisf>
    1fd2:	a8 01       	movw	r20, r16
    1fd4:	97 01       	movw	r18, r14
    1fd6:	0e 94 92 14 	call	0x2924	; 0x2924 <__mulsf3>
    1fda:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <ceil>
    1fde:	0e 94 be 12 	call	0x257c	; 0x257c <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1fe2:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1fe4:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1fe6:	70 93 89 00 	sts	0x0089, r23
    1fea:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    1fee:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	08 95       	ret

00001ffa <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	7b 01       	movw	r14, r22
    2004:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	a9 01       	movw	r20, r18
    200c:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__ltsf2>
    2010:	87 ff       	sbrs	r24, 7
    2012:	04 c0       	rjmp	.+8      	; 0x201c <_Z9set_dutyBf+0x22>
    2014:	17 fb       	bst	r17, 7
    2016:	10 95       	com	r17
    2018:	17 f9       	bld	r17, 7
    201a:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    201c:	60 91 0e 01 	lds	r22, 0x010E
    2020:	70 91 0f 01 	lds	r23, 0x010F
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__floatunsisf>
    202c:	a8 01       	movw	r20, r16
    202e:	97 01       	movw	r18, r14
    2030:	0e 94 92 14 	call	0x2924	; 0x2924 <__mulsf3>
    2034:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <ceil>
    2038:	0e 94 be 12 	call	0x257c	; 0x257c <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    203c:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    203e:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2040:	70 93 8b 00 	sts	0x008B, r23
    2044:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    2048:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	08 95       	ret

00002054 <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    2058:	10 92 e1 03 	sts	0x03E1, r1
    205c:	10 92 e2 03 	sts	0x03E2, r1
    2060:	10 92 e3 03 	sts	0x03E3, r1
    2064:	10 92 e4 03 	sts	0x03E4, r1
    2068:	80 91 e1 03 	lds	r24, 0x03E1
    206c:	90 91 e2 03 	lds	r25, 0x03E2
    2070:	a0 91 e3 03 	lds	r26, 0x03E3
    2074:	b0 91 e4 03 	lds	r27, 0x03E4
    2078:	82 17       	cp	r24, r18
    207a:	93 07       	cpc	r25, r19
    207c:	a4 07       	cpc	r26, r20
    207e:	b5 07       	cpc	r27, r21
    2080:	04 f5       	brge	.+64     	; 0x20c2 <_Z5delayl+0x6e>
    2082:	80 91 e1 03 	lds	r24, 0x03E1
    2086:	90 91 e2 03 	lds	r25, 0x03E2
    208a:	a0 91 e3 03 	lds	r26, 0x03E3
    208e:	b0 91 e4 03 	lds	r27, 0x03E4
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	a1 1d       	adc	r26, r1
    2096:	b1 1d       	adc	r27, r1
    2098:	80 93 e1 03 	sts	0x03E1, r24
    209c:	90 93 e2 03 	sts	0x03E2, r25
    20a0:	a0 93 e3 03 	sts	0x03E3, r26
    20a4:	b0 93 e4 03 	sts	0x03E4, r27
    20a8:	80 91 e1 03 	lds	r24, 0x03E1
    20ac:	90 91 e2 03 	lds	r25, 0x03E2
    20b0:	a0 91 e3 03 	lds	r26, 0x03E3
    20b4:	b0 91 e4 03 	lds	r27, 0x03E4
    20b8:	82 17       	cp	r24, r18
    20ba:	93 07       	cpc	r25, r19
    20bc:	a4 07       	cpc	r26, r20
    20be:	b5 07       	cpc	r27, r21
    20c0:	04 f3       	brlt	.-64     	; 0x2082 <_Z5delayl+0x2e>
    20c2:	08 95       	ret

000020c4 <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    20c8:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    20ca:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    20cc:	8e ef       	ldi	r24, 0xFE	; 254
    20ce:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    20d0:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    20d2:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    20d4:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    20d6:	10 92 64 00 	sts	0x0064, r1
}
    20da:	08 95       	ret

000020dc <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    20e0:	93 e0       	ldi	r25, 0x03	; 3
    20e2:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    20e4:	9a ef       	ldi	r25, 0xFA	; 250
    20e6:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    20e8:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    20ec:	10 92 e8 03 	sts	0x03E8, r1
    20f0:	10 92 e7 03 	sts	0x03E7, r1
	/******************* PERIPHERAL INIT  ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    20f4:	08 95       	ret

000020f6 <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 93 eb 03 	sts	0x03EB, r24
}
    20fc:	08 95       	ret

000020fe <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    20fe:	10 92 eb 03 	sts	0x03EB, r1
}
    2102:	08 95       	ret

00002104 <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    2104:	20 91 e7 03 	lds	r18, 0x03E7
    2108:	30 91 e8 03 	lds	r19, 0x03E8
    210c:	c9 01       	movw	r24, r18
    210e:	65 e0       	ldi	r22, 0x05	; 5
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__divmodhi4>
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	39 f4       	brne	.+14     	; 0x2128 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    211a:	c9 01       	movw	r24, r18
    211c:	6a e0       	ldi	r22, 0x0A	; 10
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__divmodhi4>
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	09 f0       	breq	.+2      	; 0x212a <_Z15System_Dispatchv+0x26>
    2128:	08 95       	ret
		{
			can_instance_timeslice();
    212a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    212e:	80 91 e7 03 	lds	r24, 0x03E7
    2132:	90 91 e8 03 	lds	r25, 0x03E8
    2136:	64 e1       	ldi	r22, 0x14	; 20
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__divmodhi4>
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	99 f7       	brne	.-26     	; 0x2128 <_Z15System_Dispatchv+0x24>
			{	
				can_board_timeslice();
    2142:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    2146:	80 91 e7 03 	lds	r24, 0x03E7
    214a:	90 91 e8 03 	lds	r25, 0x03E8
    214e:	62 e3       	ldi	r22, 0x32	; 50
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__divmodhi4>
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	39 f7       	brne	.-50     	; 0x2128 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    215a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_Z19led_timeslice_100msv>
    215e:	08 95       	ret

00002160 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    2160:	1f 92       	push	r1
    2162:	0f 92       	push	r0
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	0f 92       	push	r0
    2168:	11 24       	eor	r1, r1
    216a:	2f 93       	push	r18
    216c:	3f 93       	push	r19
    216e:	4f 93       	push	r20
    2170:	5f 93       	push	r21
    2172:	6f 93       	push	r22
    2174:	7f 93       	push	r23
    2176:	8f 93       	push	r24
    2178:	9f 93       	push	r25
    217a:	af 93       	push	r26
    217c:	bf 93       	push	r27
    217e:	ef 93       	push	r30
    2180:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    2182:	80 91 ec 03 	lds	r24, 0x03EC
    2186:	88 23       	and	r24, r24
    2188:	41 f1       	breq	.+80     	; 0x21da <__vector_15+0x7a>
    218a:	10 92 ec 03 	sts	0x03EC, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    218e:	80 91 eb 03 	lds	r24, 0x03EB
    2192:	88 23       	and	r24, r24
    2194:	49 f1       	breq	.+82     	; 0x21e8 <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    2196:	80 91 e5 03 	lds	r24, 0x03E5
    219a:	90 91 e6 03 	lds	r25, 0x03E6
    219e:	9c 01       	movw	r18, r24
    21a0:	2f 5f       	subi	r18, 0xFF	; 255
    21a2:	3f 4f       	sbci	r19, 0xFF	; 255
    21a4:	30 93 e6 03 	sts	0x03E6, r19
    21a8:	20 93 e5 03 	sts	0x03E5, r18
    21ac:	6a e0       	ldi	r22, 0x0A	; 10
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodhi4>
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	31 f1       	breq	.+76     	; 0x2204 <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    21b8:	ff 91       	pop	r31
    21ba:	ef 91       	pop	r30
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	7f 91       	pop	r23
    21c6:	6f 91       	pop	r22
    21c8:	5f 91       	pop	r21
    21ca:	4f 91       	pop	r20
    21cc:	3f 91       	pop	r19
    21ce:	2f 91       	pop	r18
    21d0:	0f 90       	pop	r0
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	0f 90       	pop	r0
    21d6:	1f 90       	pop	r1
    21d8:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	80 93 ec 03 	sts	0x03EC, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    21e0:	80 91 eb 03 	lds	r24, 0x03EB
    21e4:	88 23       	and	r24, r24
    21e6:	b9 f6       	brne	.-82     	; 0x2196 <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    21e8:	80 91 e7 03 	lds	r24, 0x03E7
    21ec:	90 91 e8 03 	lds	r25, 0x03E8
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	90 93 e8 03 	sts	0x03E8, r25
    21f6:	80 93 e7 03 	sts	0x03E7, r24
		System_Dispatch();
    21fa:	0e 94 82 10 	call	0x2104	; 0x2104 <_Z15System_Dispatchv>
		OS_Dispatch();
    21fe:	0e 94 c1 03 	call	0x782	; 0x782 <_Z11OS_Dispatchv>
    2202:	da cf       	rjmp	.-76     	; 0x21b8 <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    2204:	10 92 e6 03 	sts	0x03E6, r1
    2208:	10 92 e5 03 	sts	0x03E5, r1
			OS_Event_TIC_Counter++;
    220c:	80 91 e7 03 	lds	r24, 0x03E7
    2210:	90 91 e8 03 	lds	r25, 0x03E8
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	90 93 e8 03 	sts	0x03E8, r25
    221a:	80 93 e7 03 	sts	0x03E7, r24
			OS_Dispatch();
    221e:	0e 94 c1 03 	call	0x782	; 0x782 <_Z11OS_Dispatchv>
    2222:	ca cf       	rjmp	.-108    	; 0x21b8 <__vector_15+0x58>

00002224 <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    222c:	9a ef       	ldi	r25, 0xFA	; 250
    222e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    2230:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    2234:	10 92 e8 03 	sts	0x03E8, r1
    2238:	10 92 e7 03 	sts	0x03E7, r1
}
    223c:	08 95       	ret

0000223e <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    223e:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    2240:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    2242:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    2244:	85 81       	ldd	r24, Z+5	; 0x05
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	d9 f0       	breq	.+54     	; 0x2280 <_Z27can_parse_configure_requestP4sCAN+0x42>
    224a:	83 30       	cpi	r24, 0x03	; 3
    224c:	71 f0       	breq	.+28     	; 0x226a <_Z27can_parse_configure_requestP4sCAN+0x2c>
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	09 f0       	breq	.+2      	; 0x2254 <_Z27can_parse_configure_requestP4sCAN+0x16>
    2252:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    2254:	89 2f       	mov	r24, r25
    2256:	80 95       	com	r24
    2258:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    225a:	92 23       	and	r25, r18
    225c:	20 91 ed 03 	lds	r18, 0x03ED
    2260:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    2262:	89 23       	and	r24, r25
    2264:	80 93 ed 03 	sts	0x03ED, r24
				 break;
    2268:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    226a:	89 2f       	mov	r24, r25
    226c:	80 95       	com	r24
    226e:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    2270:	92 23       	and	r25, r18
    2272:	20 91 ef 03 	lds	r18, 0x03EF
    2276:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    2278:	89 23       	and	r24, r25
    227a:	80 93 ef 03 	sts	0x03EF, r24
    227e:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    2280:	89 2f       	mov	r24, r25
    2282:	80 95       	com	r24
    2284:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    2286:	92 23       	and	r25, r18
    2288:	20 91 ee 03 	lds	r18, 0x03EE
    228c:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    228e:	89 23       	and	r24, r25
    2290:	80 93 ee 03 	sts	0x03EE, r24
				 break;
    2294:	08 95       	ret

00002296 <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    2296:	10 92 ed 03 	sts	0x03ED, r1
	config_byte_2 = 0;		// no reports
    229a:	10 92 ee 03 	sts	0x03EE, r1
	config_byte_3 = 0;		// 
    229e:	10 92 ef 03 	sts	0x03EF, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    22a2:	82 e4       	ldi	r24, 0x42	; 66
    22a4:	80 93 f0 03 	sts	0x03F0, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    22a8:	10 92 70 03 	sts	0x0370, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    22ac:	80 91 f1 03 	lds	r24, 0x03F1
    22b0:	81 60       	ori	r24, 0x01	; 1
    22b2:	80 93 f1 03 	sts	0x03F1, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    22b6:	10 92 6f 03 	sts	0x036F, r1
	MyInstance 		 = 0x98;
    22ba:	88 e9       	ldi	r24, 0x98	; 152
    22bc:	80 93 6e 03 	sts	0x036E, r24
	
	//led_on(4);
}
    22c0:	08 95       	ret

000022c2 <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    22c2:	80 91 f1 03 	lds	r24, 0x03F1
							// and b/c it's better the user knows when it's read.
	//led_off(4);
	
	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    22c6:	80 fd       	sbrc	r24, 0
    22c8:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    22ca:	0e 94 4b 11 	call	0x2296	; 0x2296 <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    22ce:	0e 94 a5 01 	call	0x34a	; 0x34a <_Z25app_default_configurationv>
    22d2:	08 95       	ret

000022d4 <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    22d4:	20 91 6e 03 	lds	r18, 0x036E
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    22d8:	f9 99       	sbic	0x1f, 1	; 31
    22da:	fe cf       	rjmp	.-4      	; 0x22d8 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    22dc:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    22de:	92 bd       	out	0x22, r25	; 34
    22e0:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    22e2:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	fa 9a       	sbi	0x1f, 2	; 31
    22ea:	f9 9a       	sbi	0x1f, 1	; 31
    22ec:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    22ee:	9c 01       	movw	r18, r24
    22f0:	2f 5f       	subi	r18, 0xFF	; 255
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
}
    22f4:	c9 01       	movw	r24, r18
    22f6:	08 95       	ret

000022f8 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22f8:	f9 99       	sbic	0x1f, 1	; 31
    22fa:	fe cf       	rjmp	.-4      	; 0x22f8 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22fc:	92 bd       	out	0x22, r25	; 34
    22fe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2300:	f8 9a       	sbi	0x1f, 0	; 31
    2302:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    2304:	20 93 6e 03 	sts	0x036E, r18
    return mEEPROMAddress+1;    
    2308:	9c 01       	movw	r18, r24
    230a:	2f 5f       	subi	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
}
    230e:	c9 01       	movw	r24, r18
    2310:	08 95       	ret

00002312 <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    2312:	20 91 6f 03 	lds	r18, 0x036F
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2316:	f9 99       	sbic	0x1f, 1	; 31
    2318:	fe cf       	rjmp	.-4      	; 0x2316 <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    231a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    231c:	92 bd       	out	0x22, r25	; 34
    231e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2320:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	fa 9a       	sbi	0x1f, 2	; 31
    2328:	f9 9a       	sbi	0x1f, 1	; 31
    232a:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    232c:	9c 01       	movw	r18, r24
    232e:	2f 5f       	subi	r18, 0xFF	; 255
    2330:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2332:	c9 01       	movw	r24, r18
    2334:	08 95       	ret

00002336 <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2336:	f9 99       	sbic	0x1f, 1	; 31
    2338:	fe cf       	rjmp	.-4      	; 0x2336 <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    233a:	92 bd       	out	0x22, r25	; 34
    233c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    233e:	f8 9a       	sbi	0x1f, 0	; 31
    2340:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    2342:	20 93 6f 03 	sts	0x036F, r18
    return mEEPROMAddress+1;
    2346:	9c 01       	movw	r18, r24
    2348:	2f 5f       	subi	r18, 0xFF	; 255
    234a:	3f 4f       	sbci	r19, 0xFF	; 255
}
    234c:	c9 01       	movw	r24, r18
    234e:	08 95       	ret

00002350 <_Z25save_configuration_eepromPh>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	byte* address = addr;
	eeprom_write_byte( addr++, ~config_byte_1 );
    2350:	9c 01       	movw	r18, r24
    2352:	2f 5f       	subi	r18, 0xFF	; 255
    2354:	3f 4f       	sbci	r19, 0xFF	; 255
    2356:	40 91 ed 03 	lds	r20, 0x03ED
    235a:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    235c:	f9 99       	sbic	0x1f, 1	; 31
    235e:	fe cf       	rjmp	.-4      	; 0x235c <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2360:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2362:	92 bd       	out	0x22, r25	; 34
    2364:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2366:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	fa 9a       	sbi	0x1f, 2	; 31
    236e:	f9 9a       	sbi	0x1f, 1	; 31
    2370:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    2372:	c9 01       	movw	r24, r18
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	40 91 ee 03 	lds	r20, 0x03EE
    237a:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    237c:	f9 99       	sbic	0x1f, 1	; 31
    237e:	fe cf       	rjmp	.-4      	; 0x237c <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2380:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2382:	32 bd       	out	0x22, r19	; 34
    2384:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2386:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	fa 9a       	sbi	0x1f, 2	; 31
    238e:	f9 9a       	sbi	0x1f, 1	; 31
    2390:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    2392:	9c 01       	movw	r18, r24
    2394:	2f 5f       	subi	r18, 0xFF	; 255
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	40 91 ef 03 	lds	r20, 0x03EF
    239c:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    239e:	f9 99       	sbic	0x1f, 1	; 31
    23a0:	fe cf       	rjmp	.-4      	; 0x239e <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    23a2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23a4:	92 bd       	out	0x22, r25	; 34
    23a6:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    23a8:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	fa 9a       	sbi	0x1f, 2	; 31
    23b0:	f9 9a       	sbi	0x1f, 1	; 31
    23b2:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    23b4:	c9 01       	movw	r24, r18
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	40 91 f0 03 	lds	r20, 0x03F0
    23bc:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    23be:	f9 99       	sbic	0x1f, 1	; 31
    23c0:	fe cf       	rjmp	.-4      	; 0x23be <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    23c2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23c4:	32 bd       	out	0x22, r19	; 34
    23c6:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    23c8:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	fa 9a       	sbi	0x1f, 2	; 31
    23d0:	f9 9a       	sbi	0x1f, 1	; 31
    23d2:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    23d4:	9c 01       	movw	r18, r24
    23d6:	2f 5f       	subi	r18, 0xFF	; 255
    23d8:	3f 4f       	sbci	r19, 0xFF	; 255
    23da:	40 91 f1 03 	lds	r20, 0x03F1
    23de:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    23e0:	f9 99       	sbic	0x1f, 1	; 31
    23e2:	fe cf       	rjmp	.-4      	; 0x23e0 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    23e4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23e6:	92 bd       	out	0x22, r25	; 34
    23e8:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    23ea:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	fa 9a       	sbi	0x1f, 2	; 31
    23f2:	f9 9a       	sbi	0x1f, 1	; 31
    23f4:	0f be       	out	0x3f, r0	; 63
	okay_to_read_cal = true;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	80 93 18 02 	sts	0x0218, r24
	return addr;
}
    23fc:	c9 01       	movw	r24, r18
    23fe:	08 95       	ret

00002400 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    2408:	0e 94 89 11 	call	0x2312	; 0x2312 <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    240c:	0e 94 a8 11 	call	0x2350	; 0x2350 <_Z25save_configuration_eepromPh>
}
    2410:	08 95       	ret

00002412 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    2412:	f8 94       	cli
	return save_configuration();
    2414:	0e 94 00 12 	call	0x2400	; 0x2400 <_Z18save_configurationv>
	sei();
}
    2418:	08 95       	ret

0000241a <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    241a:	22 e1       	ldi	r18, 0x12	; 18
    241c:	84 33       	cpi	r24, 0x34	; 52
    241e:	92 07       	cpc	r25, r18
    2420:	11 f0       	breq	.+4      	; 0x2426 <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    2422:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    2424:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    2426:	80 91 f1 03 	lds	r24, 0x03F1
    242a:	8e 7f       	andi	r24, 0xFE	; 254
    242c:	80 93 f1 03 	sts	0x03F1, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    2430:	f8 94       	cli
    2432:	0e 94 00 12 	call	0x2400	; 0x2400 <_Z18save_configurationv>
    2436:	78 94       	sei
		retval = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	08 95       	ret

0000243c <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    243c:	9c 01       	movw	r18, r24
    243e:	2f 5f       	subi	r18, 0xFF	; 255
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2442:	f9 99       	sbic	0x1f, 1	; 31
    2444:	fe cf       	rjmp	.-4      	; 0x2442 <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2446:	92 bd       	out	0x22, r25	; 34
    2448:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    244a:	f8 9a       	sbi	0x1f, 0	; 31
    244c:	80 b5       	in	r24, 0x20	; 32
    244e:	80 95       	com	r24
    2450:	80 93 ed 03 	sts	0x03ED, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    2454:	c9 01       	movw	r24, r18
    2456:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2458:	f9 99       	sbic	0x1f, 1	; 31
    245a:	fe cf       	rjmp	.-4      	; 0x2458 <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    245c:	32 bd       	out	0x22, r19	; 34
    245e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2460:	f8 9a       	sbi	0x1f, 0	; 31
    2462:	20 b5       	in	r18, 0x20	; 32
    2464:	20 95       	com	r18
    2466:	20 93 ee 03 	sts	0x03EE, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    246a:	9c 01       	movw	r18, r24
    246c:	2f 5f       	subi	r18, 0xFF	; 255
    246e:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2470:	f9 99       	sbic	0x1f, 1	; 31
    2472:	fe cf       	rjmp	.-4      	; 0x2470 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2474:	92 bd       	out	0x22, r25	; 34
    2476:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2478:	f8 9a       	sbi	0x1f, 0	; 31
    247a:	80 b5       	in	r24, 0x20	; 32
    247c:	80 95       	com	r24
    247e:	80 93 ef 03 	sts	0x03EF, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    2482:	c9 01       	movw	r24, r18
    2484:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2486:	f9 99       	sbic	0x1f, 1	; 31
    2488:	fe cf       	rjmp	.-4      	; 0x2486 <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    248a:	32 bd       	out	0x22, r19	; 34
    248c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    248e:	f8 9a       	sbi	0x1f, 0	; 31
    2490:	20 b5       	in	r18, 0x20	; 32
    2492:	20 95       	com	r18
    2494:	20 93 f0 03 	sts	0x03F0, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    2498:	9c 01       	movw	r18, r24
    249a:	2f 5f       	subi	r18, 0xFF	; 255
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    249e:	f9 99       	sbic	0x1f, 1	; 31
    24a0:	fe cf       	rjmp	.-4      	; 0x249e <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    24a2:	92 bd       	out	0x22, r25	; 34
    24a4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    24a6:	f8 9a       	sbi	0x1f, 0	; 31
    24a8:	80 b5       	in	r24, 0x20	; 32
    24aa:	80 95       	com	r24
    24ac:	80 93 f1 03 	sts	0x03F1, r24
	return addr;
}
    24b0:	c9 01       	movw	r24, r18
    24b2:	08 95       	ret

000024b4 <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    24bc:	0e 94 9b 11 	call	0x2336	; 0x2336 <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    24c0:	0e 94 1e 12 	call	0x243c	; 0x243c <_Z25read_configuration_eepromPh>
}
    24c4:	08 95       	ret

000024c6 <__vector_27>:
/**************** VARIABLES *************************************/
word LightSensorSample [2];
byte next_channel = 0;

ISR ( ADC_vect )
{
    24c6:	1f 92       	push	r1
    24c8:	0f 92       	push	r0
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	0f 92       	push	r0
    24ce:	11 24       	eor	r1, r1
    24d0:	2f 93       	push	r18
    24d2:	3f 93       	push	r19
    24d4:	8f 93       	push	r24
    24d6:	9f 93       	push	r25
	word result = ADCL;
    24d8:	20 91 78 00 	lds	r18, 0x0078
	result      += (ADCH<<8);
    24dc:	30 91 79 00 	lds	r19, 0x0079
	switch(next_channel)
    24e0:	80 91 f6 03 	lds	r24, 0x03F6
    24e4:	88 23       	and	r24, r24
    24e6:	21 f5       	brne	.+72     	; 0x2530 <__vector_27+0x6a>
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
    24e8:	80 91 f4 03 	lds	r24, 0x03F4
    24ec:	90 91 f5 03 	lds	r25, 0x03F5
    24f0:	90 93 f3 03 	sts	0x03F3, r25
    24f4:	80 93 f2 03 	sts	0x03F2, r24
byte next_channel = 0;

ISR ( ADC_vect )
{
	word result = ADCL;
	result      += (ADCH<<8);
    24f8:	93 2f       	mov	r25, r19
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	82 0f       	add	r24, r18
    24fe:	91 1d       	adc	r25, r1
	switch(next_channel)
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
			LightSensorSample[1] = result;
    2500:	90 93 f5 03 	sts	0x03F5, r25
    2504:	80 93 f4 03 	sts	0x03F4, r24
			next_channel = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	80 93 f6 03 	sts	0x03F6, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
			ADMUX = POT_MUX;		// Select POT	
    250e:	82 e4       	ldi	r24, 0x42	; 66
    2510:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    2514:	80 91 7a 00 	lds	r24, 0x007A
    2518:	80 64       	ori	r24, 0x40	; 64
    251a:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    251e:	9f 91       	pop	r25
    2520:	8f 91       	pop	r24
    2522:	3f 91       	pop	r19
    2524:	2f 91       	pop	r18
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	0f 90       	pop	r0
    252c:	1f 90       	pop	r1
    252e:	18 95       	reti
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
    2530:	10 92 f6 03 	sts	0x03F6, r1
    2534:	ec cf       	rjmp	.-40     	; 0x250e <__vector_27+0x48>

00002536 <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    2536:	ea e7       	ldi	r30, 0x7A	; 122
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	88 7f       	andi	r24, 0xF8	; 248
    253e:	80 83       	st	Z, r24
}
    2540:	08 95       	ret

00002542 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83;
    2542:	8b e9       	ldi	r24, 0x9B	; 155
    2544:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    2548:	ee e7       	ldi	r30, 0x7E	; 126
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	84 60       	ori	r24, 0x04	; 4
    2550:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    2552:	ef e7       	ldi	r30, 0x7F	; 127
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	83 60       	ori	r24, 0x03	; 3
    255a:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    255c:	80 ea       	ldi	r24, 0xA0	; 160
    255e:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    2562:	82 e4       	ldi	r24, 0x42	; 66
    2564:	80 93 7c 00 	sts	0x007C, r24
}
    2568:	08 95       	ret

0000256a <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    256a:	82 e4       	ldi	r24, 0x42	; 66
    256c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    2570:	ea e7       	ldi	r30, 0x7A	; 122
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	80 64       	ori	r24, 0x40	; 64
    2578:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    257a:	08 95       	ret

0000257c <__fixunssfsi>:
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	7b 01       	movw	r14, r22
    2586:	8c 01       	movw	r16, r24
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	5f e4       	ldi	r21, 0x4F	; 79
    2590:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__gesf2>
    2594:	87 fd       	sbrc	r24, 7
    2596:	11 c0       	rjmp	.+34     	; 0x25ba <__fixunssfsi+0x3e>
    2598:	c8 01       	movw	r24, r16
    259a:	b7 01       	movw	r22, r14
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	5f e4       	ldi	r21, 0x4F	; 79
    25a4:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__subsf3>
    25a8:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__fixsfsi>
    25ac:	9b 01       	movw	r18, r22
    25ae:	ac 01       	movw	r20, r24
    25b0:	20 50       	subi	r18, 0x00	; 0
    25b2:	30 40       	sbci	r19, 0x00	; 0
    25b4:	40 40       	sbci	r20, 0x00	; 0
    25b6:	50 48       	sbci	r21, 0x80	; 128
    25b8:	06 c0       	rjmp	.+12     	; 0x25c6 <__fixunssfsi+0x4a>
    25ba:	c8 01       	movw	r24, r16
    25bc:	b7 01       	movw	r22, r14
    25be:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__fixsfsi>
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	b9 01       	movw	r22, r18
    25c8:	ca 01       	movw	r24, r20
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	08 95       	ret

000025d4 <_fpadd_parts>:
    25d4:	a0 e0       	ldi	r26, 0x00	; 0
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e0 ef       	ldi	r30, 0xF0	; 240
    25da:	f2 e1       	ldi	r31, 0x12	; 18
    25dc:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__prologue_saves__+0x8>
    25e0:	fc 01       	movw	r30, r24
    25e2:	ea 01       	movw	r28, r20
    25e4:	80 81       	ld	r24, Z
    25e6:	82 30       	cpi	r24, 0x02	; 2
    25e8:	08 f4       	brcc	.+2      	; 0x25ec <_fpadd_parts+0x18>
    25ea:	38 c1       	rjmp	.+624    	; 0x285c <_fpadd_parts+0x288>
    25ec:	db 01       	movw	r26, r22
    25ee:	9c 91       	ld	r25, X
    25f0:	92 30       	cpi	r25, 0x02	; 2
    25f2:	08 f4       	brcc	.+2      	; 0x25f6 <_fpadd_parts+0x22>
    25f4:	30 c1       	rjmp	.+608    	; 0x2856 <_fpadd_parts+0x282>
    25f6:	84 30       	cpi	r24, 0x04	; 4
    25f8:	59 f4       	brne	.+22     	; 0x2610 <_fpadd_parts+0x3c>
    25fa:	94 30       	cpi	r25, 0x04	; 4
    25fc:	09 f0       	breq	.+2      	; 0x2600 <_fpadd_parts+0x2c>
    25fe:	2e c1       	rjmp	.+604    	; 0x285c <_fpadd_parts+0x288>
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	11 96       	adiw	r26, 0x01	; 1
    2604:	8c 91       	ld	r24, X
    2606:	11 97       	sbiw	r26, 0x01	; 1
    2608:	98 17       	cp	r25, r24
    260a:	09 f0       	breq	.+2      	; 0x260e <_fpadd_parts+0x3a>
    260c:	21 c1       	rjmp	.+578    	; 0x2850 <_fpadd_parts+0x27c>
    260e:	26 c1       	rjmp	.+588    	; 0x285c <_fpadd_parts+0x288>
    2610:	94 30       	cpi	r25, 0x04	; 4
    2612:	09 f4       	brne	.+2      	; 0x2616 <_fpadd_parts+0x42>
    2614:	20 c1       	rjmp	.+576    	; 0x2856 <_fpadd_parts+0x282>
    2616:	92 30       	cpi	r25, 0x02	; 2
    2618:	b1 f4       	brne	.+44     	; 0x2646 <_fpadd_parts+0x72>
    261a:	82 30       	cpi	r24, 0x02	; 2
    261c:	09 f0       	breq	.+2      	; 0x2620 <_fpadd_parts+0x4c>
    261e:	1e c1       	rjmp	.+572    	; 0x285c <_fpadd_parts+0x288>
    2620:	ca 01       	movw	r24, r20
    2622:	af 01       	movw	r20, r30
    2624:	28 e0       	ldi	r18, 0x08	; 8
    2626:	da 01       	movw	r26, r20
    2628:	0d 90       	ld	r0, X+
    262a:	ad 01       	movw	r20, r26
    262c:	dc 01       	movw	r26, r24
    262e:	0d 92       	st	X+, r0
    2630:	cd 01       	movw	r24, r26
    2632:	21 50       	subi	r18, 0x01	; 1
    2634:	c1 f7       	brne	.-16     	; 0x2626 <_fpadd_parts+0x52>
    2636:	db 01       	movw	r26, r22
    2638:	11 96       	adiw	r26, 0x01	; 1
    263a:	8c 91       	ld	r24, X
    263c:	11 97       	sbiw	r26, 0x01	; 1
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	89 23       	and	r24, r25
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	0a c1       	rjmp	.+532    	; 0x285a <_fpadd_parts+0x286>
    2646:	82 30       	cpi	r24, 0x02	; 2
    2648:	09 f4       	brne	.+2      	; 0x264c <_fpadd_parts+0x78>
    264a:	05 c1       	rjmp	.+522    	; 0x2856 <_fpadd_parts+0x282>
    264c:	c2 80       	ldd	r12, Z+2	; 0x02
    264e:	d3 80       	ldd	r13, Z+3	; 0x03
    2650:	db 01       	movw	r26, r22
    2652:	12 96       	adiw	r26, 0x02	; 2
    2654:	6d 90       	ld	r6, X+
    2656:	7c 90       	ld	r7, X
    2658:	13 97       	sbiw	r26, 0x03	; 3
    265a:	24 81       	ldd	r18, Z+4	; 0x04
    265c:	35 81       	ldd	r19, Z+5	; 0x05
    265e:	46 81       	ldd	r20, Z+6	; 0x06
    2660:	57 81       	ldd	r21, Z+7	; 0x07
    2662:	14 96       	adiw	r26, 0x04	; 4
    2664:	ed 90       	ld	r14, X+
    2666:	fd 90       	ld	r15, X+
    2668:	0d 91       	ld	r16, X+
    266a:	1c 91       	ld	r17, X
    266c:	17 97       	sbiw	r26, 0x07	; 7
    266e:	c6 01       	movw	r24, r12
    2670:	86 19       	sub	r24, r6
    2672:	97 09       	sbc	r25, r7
    2674:	5c 01       	movw	r10, r24
    2676:	97 ff       	sbrs	r25, 7
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <_fpadd_parts+0xae>
    267a:	aa 24       	eor	r10, r10
    267c:	bb 24       	eor	r11, r11
    267e:	a8 1a       	sub	r10, r24
    2680:	b9 0a       	sbc	r11, r25
    2682:	b0 e2       	ldi	r27, 0x20	; 32
    2684:	ab 16       	cp	r10, r27
    2686:	b1 04       	cpc	r11, r1
    2688:	0c f0       	brlt	.+2      	; 0x268c <_fpadd_parts+0xb8>
    268a:	61 c0       	rjmp	.+194    	; 0x274e <_fpadd_parts+0x17a>
    268c:	18 16       	cp	r1, r24
    268e:	19 06       	cpc	r1, r25
    2690:	6c f5       	brge	.+90     	; 0x26ec <_fpadd_parts+0x118>
    2692:	37 01       	movw	r6, r14
    2694:	48 01       	movw	r8, r16
    2696:	0a 2c       	mov	r0, r10
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <_fpadd_parts+0xce>
    269a:	96 94       	lsr	r9
    269c:	87 94       	ror	r8
    269e:	77 94       	ror	r7
    26a0:	67 94       	ror	r6
    26a2:	0a 94       	dec	r0
    26a4:	d2 f7       	brpl	.-12     	; 0x269a <_fpadd_parts+0xc6>
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	0a 2c       	mov	r0, r10
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <_fpadd_parts+0xe6>
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	aa 1f       	adc	r26, r26
    26b8:	bb 1f       	adc	r27, r27
    26ba:	0a 94       	dec	r0
    26bc:	d2 f7       	brpl	.-12     	; 0x26b2 <_fpadd_parts+0xde>
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	a1 09       	sbc	r26, r1
    26c2:	b1 09       	sbc	r27, r1
    26c4:	8e 21       	and	r24, r14
    26c6:	9f 21       	and	r25, r15
    26c8:	a0 23       	and	r26, r16
    26ca:	b1 23       	and	r27, r17
    26cc:	ee 24       	eor	r14, r14
    26ce:	ff 24       	eor	r15, r15
    26d0:	87 01       	movw	r16, r14
    26d2:	e3 94       	inc	r14
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	a1 05       	cpc	r26, r1
    26d8:	b1 05       	cpc	r27, r1
    26da:	19 f4       	brne	.+6      	; 0x26e2 <_fpadd_parts+0x10e>
    26dc:	ee 24       	eor	r14, r14
    26de:	ff 24       	eor	r15, r15
    26e0:	87 01       	movw	r16, r14
    26e2:	e6 28       	or	r14, r6
    26e4:	f7 28       	or	r15, r7
    26e6:	08 29       	or	r16, r8
    26e8:	19 29       	or	r17, r9
    26ea:	3c c0       	rjmp	.+120    	; 0x2764 <_fpadd_parts+0x190>
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	d1 f1       	breq	.+116    	; 0x2764 <_fpadd_parts+0x190>
    26f0:	ca 0c       	add	r12, r10
    26f2:	db 1c       	adc	r13, r11
    26f4:	39 01       	movw	r6, r18
    26f6:	4a 01       	movw	r8, r20
    26f8:	0a 2c       	mov	r0, r10
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <_fpadd_parts+0x130>
    26fc:	96 94       	lsr	r9
    26fe:	87 94       	ror	r8
    2700:	77 94       	ror	r7
    2702:	67 94       	ror	r6
    2704:	0a 94       	dec	r0
    2706:	d2 f7       	brpl	.-12     	; 0x26fc <_fpadd_parts+0x128>
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	0a 2c       	mov	r0, r10
    2712:	04 c0       	rjmp	.+8      	; 0x271c <_fpadd_parts+0x148>
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	aa 1f       	adc	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	0a 94       	dec	r0
    271e:	d2 f7       	brpl	.-12     	; 0x2714 <_fpadd_parts+0x140>
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	a1 09       	sbc	r26, r1
    2724:	b1 09       	sbc	r27, r1
    2726:	82 23       	and	r24, r18
    2728:	93 23       	and	r25, r19
    272a:	a4 23       	and	r26, r20
    272c:	b5 23       	and	r27, r21
    272e:	21 e0       	ldi	r18, 0x01	; 1
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	a1 05       	cpc	r26, r1
    273a:	b1 05       	cpc	r27, r1
    273c:	19 f4       	brne	.+6      	; 0x2744 <_fpadd_parts+0x170>
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	a9 01       	movw	r20, r18
    2744:	26 29       	or	r18, r6
    2746:	37 29       	or	r19, r7
    2748:	48 29       	or	r20, r8
    274a:	59 29       	or	r21, r9
    274c:	0b c0       	rjmp	.+22     	; 0x2764 <_fpadd_parts+0x190>
    274e:	6c 14       	cp	r6, r12
    2750:	7d 04       	cpc	r7, r13
    2752:	24 f4       	brge	.+8      	; 0x275c <_fpadd_parts+0x188>
    2754:	ee 24       	eor	r14, r14
    2756:	ff 24       	eor	r15, r15
    2758:	87 01       	movw	r16, r14
    275a:	04 c0       	rjmp	.+8      	; 0x2764 <_fpadd_parts+0x190>
    275c:	63 01       	movw	r12, r6
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	a9 01       	movw	r20, r18
    2764:	81 81       	ldd	r24, Z+1	; 0x01
    2766:	fb 01       	movw	r30, r22
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	89 17       	cp	r24, r25
    276c:	09 f4       	brne	.+2      	; 0x2770 <_fpadd_parts+0x19c>
    276e:	45 c0       	rjmp	.+138    	; 0x27fa <_fpadd_parts+0x226>
    2770:	88 23       	and	r24, r24
    2772:	49 f0       	breq	.+18     	; 0x2786 <_fpadd_parts+0x1b2>
    2774:	d8 01       	movw	r26, r16
    2776:	c7 01       	movw	r24, r14
    2778:	82 1b       	sub	r24, r18
    277a:	93 0b       	sbc	r25, r19
    277c:	a4 0b       	sbc	r26, r20
    277e:	b5 0b       	sbc	r27, r21
    2780:	9c 01       	movw	r18, r24
    2782:	ad 01       	movw	r20, r26
    2784:	04 c0       	rjmp	.+8      	; 0x278e <_fpadd_parts+0x1ba>
    2786:	2e 19       	sub	r18, r14
    2788:	3f 09       	sbc	r19, r15
    278a:	40 0b       	sbc	r20, r16
    278c:	51 0b       	sbc	r21, r17
    278e:	57 fd       	sbrc	r21, 7
    2790:	04 c0       	rjmp	.+8      	; 0x279a <_fpadd_parts+0x1c6>
    2792:	19 82       	std	Y+1, r1	; 0x01
    2794:	db 82       	std	Y+3, r13	; 0x03
    2796:	ca 82       	std	Y+2, r12	; 0x02
    2798:	0b c0       	rjmp	.+22     	; 0x27b0 <_fpadd_parts+0x1dc>
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	db 82       	std	Y+3, r13	; 0x03
    27a0:	ca 82       	std	Y+2, r12	; 0x02
    27a2:	50 95       	com	r21
    27a4:	40 95       	com	r20
    27a6:	30 95       	com	r19
    27a8:	21 95       	neg	r18
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	4f 4f       	sbci	r20, 0xFF	; 255
    27ae:	5f 4f       	sbci	r21, 0xFF	; 255
    27b0:	2c 83       	std	Y+4, r18	; 0x04
    27b2:	3d 83       	std	Y+5, r19	; 0x05
    27b4:	4e 83       	std	Y+6, r20	; 0x06
    27b6:	5f 83       	std	Y+7, r21	; 0x07
    27b8:	0d c0       	rjmp	.+26     	; 0x27d4 <_fpadd_parts+0x200>
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	aa 1f       	adc	r26, r26
    27c0:	bb 1f       	adc	r27, r27
    27c2:	8c 83       	std	Y+4, r24	; 0x04
    27c4:	9d 83       	std	Y+5, r25	; 0x05
    27c6:	ae 83       	std	Y+6, r26	; 0x06
    27c8:	bf 83       	std	Y+7, r27	; 0x07
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
    27d6:	9d 81       	ldd	r25, Y+5	; 0x05
    27d8:	ae 81       	ldd	r26, Y+6	; 0x06
    27da:	bf 81       	ldd	r27, Y+7	; 0x07
    27dc:	9c 01       	movw	r18, r24
    27de:	ad 01       	movw	r20, r26
    27e0:	21 50       	subi	r18, 0x01	; 1
    27e2:	30 40       	sbci	r19, 0x00	; 0
    27e4:	40 40       	sbci	r20, 0x00	; 0
    27e6:	50 40       	sbci	r21, 0x00	; 0
    27e8:	2f 3f       	cpi	r18, 0xFF	; 255
    27ea:	ef ef       	ldi	r30, 0xFF	; 255
    27ec:	3e 07       	cpc	r19, r30
    27ee:	ef ef       	ldi	r30, 0xFF	; 255
    27f0:	4e 07       	cpc	r20, r30
    27f2:	ef e3       	ldi	r30, 0x3F	; 63
    27f4:	5e 07       	cpc	r21, r30
    27f6:	08 f3       	brcs	.-62     	; 0x27ba <_fpadd_parts+0x1e6>
    27f8:	0b c0       	rjmp	.+22     	; 0x2810 <_fpadd_parts+0x23c>
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	db 82       	std	Y+3, r13	; 0x03
    27fe:	ca 82       	std	Y+2, r12	; 0x02
    2800:	2e 0d       	add	r18, r14
    2802:	3f 1d       	adc	r19, r15
    2804:	40 1f       	adc	r20, r16
    2806:	51 1f       	adc	r21, r17
    2808:	2c 83       	std	Y+4, r18	; 0x04
    280a:	3d 83       	std	Y+5, r19	; 0x05
    280c:	4e 83       	std	Y+6, r20	; 0x06
    280e:	5f 83       	std	Y+7, r21	; 0x07
    2810:	83 e0       	ldi	r24, 0x03	; 3
    2812:	88 83       	st	Y, r24
    2814:	2c 81       	ldd	r18, Y+4	; 0x04
    2816:	3d 81       	ldd	r19, Y+5	; 0x05
    2818:	4e 81       	ldd	r20, Y+6	; 0x06
    281a:	5f 81       	ldd	r21, Y+7	; 0x07
    281c:	57 ff       	sbrs	r21, 7
    281e:	1d c0       	rjmp	.+58     	; 0x285a <_fpadd_parts+0x286>
    2820:	da 01       	movw	r26, r20
    2822:	c9 01       	movw	r24, r18
    2824:	81 70       	andi	r24, 0x01	; 1
    2826:	90 70       	andi	r25, 0x00	; 0
    2828:	a0 70       	andi	r26, 0x00	; 0
    282a:	b0 70       	andi	r27, 0x00	; 0
    282c:	56 95       	lsr	r21
    282e:	47 95       	ror	r20
    2830:	37 95       	ror	r19
    2832:	27 95       	ror	r18
    2834:	82 2b       	or	r24, r18
    2836:	93 2b       	or	r25, r19
    2838:	a4 2b       	or	r26, r20
    283a:	b5 2b       	or	r27, r21
    283c:	8c 83       	std	Y+4, r24	; 0x04
    283e:	9d 83       	std	Y+5, r25	; 0x05
    2840:	ae 83       	std	Y+6, r26	; 0x06
    2842:	bf 83       	std	Y+7, r27	; 0x07
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	9b 81       	ldd	r25, Y+3	; 0x03
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	9b 83       	std	Y+3, r25	; 0x03
    284c:	8a 83       	std	Y+2, r24	; 0x02
    284e:	05 c0       	rjmp	.+10     	; 0x285a <_fpadd_parts+0x286>
    2850:	e0 e1       	ldi	r30, 0x10	; 16
    2852:	f1 e0       	ldi	r31, 0x01	; 1
    2854:	03 c0       	rjmp	.+6      	; 0x285c <_fpadd_parts+0x288>
    2856:	fb 01       	movw	r30, r22
    2858:	01 c0       	rjmp	.+2      	; 0x285c <_fpadd_parts+0x288>
    285a:	fe 01       	movw	r30, r28
    285c:	cf 01       	movw	r24, r30
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	ee e0       	ldi	r30, 0x0E	; 14
    2864:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__epilogue_restores__+0x8>

00002868 <__addsf3>:
    2868:	a0 e2       	ldi	r26, 0x20	; 32
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ea e3       	ldi	r30, 0x3A	; 58
    286e:	f4 e1       	ldi	r31, 0x14	; 20
    2870:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__prologue_saves__+0x18>
    2874:	69 83       	std	Y+1, r22	; 0x01
    2876:	7a 83       	std	Y+2, r23	; 0x02
    2878:	8b 83       	std	Y+3, r24	; 0x03
    287a:	9c 83       	std	Y+4, r25	; 0x04
    287c:	2d 83       	std	Y+5, r18	; 0x05
    287e:	3e 83       	std	Y+6, r19	; 0x06
    2880:	4f 83       	std	Y+7, r20	; 0x07
    2882:	58 87       	std	Y+8, r21	; 0x08
    2884:	89 e0       	ldi	r24, 0x09	; 9
    2886:	e8 2e       	mov	r14, r24
    2888:	f1 2c       	mov	r15, r1
    288a:	ec 0e       	add	r14, r28
    288c:	fd 1e       	adc	r15, r29
    288e:	ce 01       	movw	r24, r28
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	b7 01       	movw	r22, r14
    2894:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2898:	8e 01       	movw	r16, r28
    289a:	0f 5e       	subi	r16, 0xEF	; 239
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	ce 01       	movw	r24, r28
    28a0:	05 96       	adiw	r24, 0x05	; 5
    28a2:	b8 01       	movw	r22, r16
    28a4:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    28a8:	c7 01       	movw	r24, r14
    28aa:	b8 01       	movw	r22, r16
    28ac:	ae 01       	movw	r20, r28
    28ae:	47 5e       	subi	r20, 0xE7	; 231
    28b0:	5f 4f       	sbci	r21, 0xFF	; 255
    28b2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_fpadd_parts>
    28b6:	0e 94 4e 18 	call	0x309c	; 0x309c <__pack_f>
    28ba:	a0 96       	adiw	r28, 0x20	; 32
    28bc:	e6 e0       	ldi	r30, 0x06	; 6
    28be:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x18>

000028c2 <__subsf3>:
    28c2:	a0 e2       	ldi	r26, 0x20	; 32
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e7 e6       	ldi	r30, 0x67	; 103
    28c8:	f4 e1       	ldi	r31, 0x14	; 20
    28ca:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__prologue_saves__+0x18>
    28ce:	69 83       	std	Y+1, r22	; 0x01
    28d0:	7a 83       	std	Y+2, r23	; 0x02
    28d2:	8b 83       	std	Y+3, r24	; 0x03
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	2d 83       	std	Y+5, r18	; 0x05
    28d8:	3e 83       	std	Y+6, r19	; 0x06
    28da:	4f 83       	std	Y+7, r20	; 0x07
    28dc:	58 87       	std	Y+8, r21	; 0x08
    28de:	8e 01       	movw	r16, r28
    28e0:	07 5f       	subi	r16, 0xF7	; 247
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	ce 01       	movw	r24, r28
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	b8 01       	movw	r22, r16
    28ea:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    28ee:	91 e1       	ldi	r25, 0x11	; 17
    28f0:	e9 2e       	mov	r14, r25
    28f2:	f1 2c       	mov	r15, r1
    28f4:	ec 0e       	add	r14, r28
    28f6:	fd 1e       	adc	r15, r29
    28f8:	ce 01       	movw	r24, r28
    28fa:	05 96       	adiw	r24, 0x05	; 5
    28fc:	b7 01       	movw	r22, r14
    28fe:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2902:	8a 89       	ldd	r24, Y+18	; 0x12
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	89 27       	eor	r24, r25
    2908:	8a 8b       	std	Y+18, r24	; 0x12
    290a:	c8 01       	movw	r24, r16
    290c:	b7 01       	movw	r22, r14
    290e:	ae 01       	movw	r20, r28
    2910:	47 5e       	subi	r20, 0xE7	; 231
    2912:	5f 4f       	sbci	r21, 0xFF	; 255
    2914:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_fpadd_parts>
    2918:	0e 94 4e 18 	call	0x309c	; 0x309c <__pack_f>
    291c:	a0 96       	adiw	r28, 0x20	; 32
    291e:	e6 e0       	ldi	r30, 0x06	; 6
    2920:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x18>

00002924 <__mulsf3>:
    2924:	a0 e2       	ldi	r26, 0x20	; 32
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e8 e9       	ldi	r30, 0x98	; 152
    292a:	f4 e1       	ldi	r31, 0x14	; 20
    292c:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <__prologue_saves__>
    2930:	69 83       	std	Y+1, r22	; 0x01
    2932:	7a 83       	std	Y+2, r23	; 0x02
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	9c 83       	std	Y+4, r25	; 0x04
    2938:	2d 83       	std	Y+5, r18	; 0x05
    293a:	3e 83       	std	Y+6, r19	; 0x06
    293c:	4f 83       	std	Y+7, r20	; 0x07
    293e:	58 87       	std	Y+8, r21	; 0x08
    2940:	ce 01       	movw	r24, r28
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	be 01       	movw	r22, r28
    2946:	67 5f       	subi	r22, 0xF7	; 247
    2948:	7f 4f       	sbci	r23, 0xFF	; 255
    294a:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    294e:	ce 01       	movw	r24, r28
    2950:	05 96       	adiw	r24, 0x05	; 5
    2952:	be 01       	movw	r22, r28
    2954:	6f 5e       	subi	r22, 0xEF	; 239
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    295c:	99 85       	ldd	r25, Y+9	; 0x09
    295e:	92 30       	cpi	r25, 0x02	; 2
    2960:	78 f0       	brcs	.+30     	; 0x2980 <__mulsf3+0x5c>
    2962:	89 89       	ldd	r24, Y+17	; 0x11
    2964:	82 30       	cpi	r24, 0x02	; 2
    2966:	c0 f0       	brcs	.+48     	; 0x2998 <__mulsf3+0x74>
    2968:	94 30       	cpi	r25, 0x04	; 4
    296a:	19 f4       	brne	.+6      	; 0x2972 <__mulsf3+0x4e>
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	41 f4       	brne	.+16     	; 0x2980 <__mulsf3+0x5c>
    2970:	cb c0       	rjmp	.+406    	; 0x2b08 <__mulsf3+0x1e4>
    2972:	84 30       	cpi	r24, 0x04	; 4
    2974:	19 f4       	brne	.+6      	; 0x297c <__mulsf3+0x58>
    2976:	92 30       	cpi	r25, 0x02	; 2
    2978:	79 f4       	brne	.+30     	; 0x2998 <__mulsf3+0x74>
    297a:	c6 c0       	rjmp	.+396    	; 0x2b08 <__mulsf3+0x1e4>
    297c:	92 30       	cpi	r25, 0x02	; 2
    297e:	51 f4       	brne	.+20     	; 0x2994 <__mulsf3+0x70>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	2a 85       	ldd	r18, Y+10	; 0x0a
    2984:	9a 89       	ldd	r25, Y+18	; 0x12
    2986:	29 17       	cp	r18, r25
    2988:	09 f4       	brne	.+2      	; 0x298c <__mulsf3+0x68>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	8a 87       	std	Y+10, r24	; 0x0a
    298e:	ce 01       	movw	r24, r28
    2990:	09 96       	adiw	r24, 0x09	; 9
    2992:	bc c0       	rjmp	.+376    	; 0x2b0c <__mulsf3+0x1e8>
    2994:	82 30       	cpi	r24, 0x02	; 2
    2996:	51 f4       	brne	.+20     	; 0x29ac <__mulsf3+0x88>
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	2a 85       	ldd	r18, Y+10	; 0x0a
    299c:	9a 89       	ldd	r25, Y+18	; 0x12
    299e:	29 17       	cp	r18, r25
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <__mulsf3+0x80>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	8a 8b       	std	Y+18, r24	; 0x12
    29a6:	ce 01       	movw	r24, r28
    29a8:	41 96       	adiw	r24, 0x11	; 17
    29aa:	b0 c0       	rjmp	.+352    	; 0x2b0c <__mulsf3+0x1e8>
    29ac:	6d 84       	ldd	r6, Y+13	; 0x0d
    29ae:	7e 84       	ldd	r7, Y+14	; 0x0e
    29b0:	8f 84       	ldd	r8, Y+15	; 0x0f
    29b2:	98 88       	ldd	r9, Y+16	; 0x10
    29b4:	ed 88       	ldd	r14, Y+21	; 0x15
    29b6:	fe 88       	ldd	r15, Y+22	; 0x16
    29b8:	0f 89       	ldd	r16, Y+23	; 0x17
    29ba:	18 8d       	ldd	r17, Y+24	; 0x18
    29bc:	e0 e2       	ldi	r30, 0x20	; 32
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	dc 01       	movw	r26, r24
    29c6:	aa 24       	eor	r10, r10
    29c8:	bb 24       	eor	r11, r11
    29ca:	65 01       	movw	r12, r10
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	a9 01       	movw	r20, r18
    29d2:	b3 01       	movw	r22, r6
    29d4:	61 70       	andi	r22, 0x01	; 1
    29d6:	70 70       	andi	r23, 0x00	; 0
    29d8:	61 15       	cp	r22, r1
    29da:	71 05       	cpc	r23, r1
    29dc:	d1 f0       	breq	.+52     	; 0x2a12 <__mulsf3+0xee>
    29de:	2e 0d       	add	r18, r14
    29e0:	3f 1d       	adc	r19, r15
    29e2:	40 1f       	adc	r20, r16
    29e4:	51 1f       	adc	r21, r17
    29e6:	15 01       	movw	r2, r10
    29e8:	26 01       	movw	r4, r12
    29ea:	28 0e       	add	r2, r24
    29ec:	39 1e       	adc	r3, r25
    29ee:	4a 1e       	adc	r4, r26
    29f0:	5b 1e       	adc	r5, r27
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e0       	ldi	r26, 0x00	; 0
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	2e 15       	cp	r18, r14
    29fc:	3f 05       	cpc	r19, r15
    29fe:	40 07       	cpc	r20, r16
    2a00:	51 07       	cpc	r21, r17
    2a02:	18 f0       	brcs	.+6      	; 0x2a0a <__mulsf3+0xe6>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	dc 01       	movw	r26, r24
    2a0a:	82 0d       	add	r24, r2
    2a0c:	93 1d       	adc	r25, r3
    2a0e:	a4 1d       	adc	r26, r4
    2a10:	b5 1d       	adc	r27, r5
    2a12:	aa 0c       	add	r10, r10
    2a14:	bb 1c       	adc	r11, r11
    2a16:	cc 1c       	adc	r12, r12
    2a18:	dd 1c       	adc	r13, r13
    2a1a:	17 ff       	sbrs	r17, 7
    2a1c:	09 c0       	rjmp	.+18     	; 0x2a30 <__mulsf3+0x10c>
    2a1e:	61 e0       	ldi	r22, 0x01	; 1
    2a20:	26 2e       	mov	r2, r22
    2a22:	31 2c       	mov	r3, r1
    2a24:	41 2c       	mov	r4, r1
    2a26:	51 2c       	mov	r5, r1
    2a28:	a2 28       	or	r10, r2
    2a2a:	b3 28       	or	r11, r3
    2a2c:	c4 28       	or	r12, r4
    2a2e:	d5 28       	or	r13, r5
    2a30:	31 97       	sbiw	r30, 0x01	; 1
    2a32:	49 f0       	breq	.+18     	; 0x2a46 <__mulsf3+0x122>
    2a34:	ee 0c       	add	r14, r14
    2a36:	ff 1c       	adc	r15, r15
    2a38:	00 1f       	adc	r16, r16
    2a3a:	11 1f       	adc	r17, r17
    2a3c:	96 94       	lsr	r9
    2a3e:	87 94       	ror	r8
    2a40:	77 94       	ror	r7
    2a42:	67 94       	ror	r6
    2a44:	c6 cf       	rjmp	.-116    	; 0x29d2 <__mulsf3+0xae>
    2a46:	6b 89       	ldd	r22, Y+19	; 0x13
    2a48:	7c 89       	ldd	r23, Y+20	; 0x14
    2a4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a4e:	6e 0f       	add	r22, r30
    2a50:	7f 1f       	adc	r23, r31
    2a52:	6e 5f       	subi	r22, 0xFE	; 254
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	7c 8f       	std	Y+28, r23	; 0x1c
    2a58:	6b 8f       	std	Y+27, r22	; 0x1b
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	ea 85       	ldd	r30, Y+10	; 0x0a
    2a5e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a60:	e7 17       	cp	r30, r23
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <__mulsf3+0x142>
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	6a 8f       	std	Y+26, r22	; 0x1a
    2a68:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2a6a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2a6c:	10 c0       	rjmp	.+32     	; 0x2a8e <__mulsf3+0x16a>
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e1 70       	andi	r30, 0x01	; 1
    2a72:	f0 70       	andi	r31, 0x00	; 0
    2a74:	30 97       	sbiw	r30, 0x00	; 0
    2a76:	29 f0       	breq	.+10     	; 0x2a82 <__mulsf3+0x15e>
    2a78:	56 95       	lsr	r21
    2a7a:	47 95       	ror	r20
    2a7c:	37 95       	ror	r19
    2a7e:	27 95       	ror	r18
    2a80:	50 68       	ori	r21, 0x80	; 128
    2a82:	b6 95       	lsr	r27
    2a84:	a7 95       	ror	r26
    2a86:	97 95       	ror	r25
    2a88:	87 95       	ror	r24
    2a8a:	6f 5f       	subi	r22, 0xFF	; 255
    2a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8e:	b7 fd       	sbrc	r27, 7
    2a90:	ee cf       	rjmp	.-36     	; 0x2a6e <__mulsf3+0x14a>
    2a92:	0c c0       	rjmp	.+24     	; 0x2aac <__mulsf3+0x188>
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	57 fd       	sbrc	r21, 7
    2a9e:	81 60       	ori	r24, 0x01	; 1
    2aa0:	22 0f       	add	r18, r18
    2aa2:	33 1f       	adc	r19, r19
    2aa4:	44 1f       	adc	r20, r20
    2aa6:	55 1f       	adc	r21, r21
    2aa8:	61 50       	subi	r22, 0x01	; 1
    2aaa:	70 40       	sbci	r23, 0x00	; 0
    2aac:	80 30       	cpi	r24, 0x00	; 0
    2aae:	e0 e0       	ldi	r30, 0x00	; 0
    2ab0:	9e 07       	cpc	r25, r30
    2ab2:	e0 e0       	ldi	r30, 0x00	; 0
    2ab4:	ae 07       	cpc	r26, r30
    2ab6:	e0 e4       	ldi	r30, 0x40	; 64
    2ab8:	be 07       	cpc	r27, r30
    2aba:	60 f3       	brcs	.-40     	; 0x2a94 <__mulsf3+0x170>
    2abc:	6b 8f       	std	Y+27, r22	; 0x1b
    2abe:	7c 8f       	std	Y+28, r23	; 0x1c
    2ac0:	6f e7       	ldi	r22, 0x7F	; 127
    2ac2:	e6 2e       	mov	r14, r22
    2ac4:	f1 2c       	mov	r15, r1
    2ac6:	01 2d       	mov	r16, r1
    2ac8:	11 2d       	mov	r17, r1
    2aca:	e8 22       	and	r14, r24
    2acc:	f9 22       	and	r15, r25
    2ace:	0a 23       	and	r16, r26
    2ad0:	1b 23       	and	r17, r27
    2ad2:	60 e4       	ldi	r22, 0x40	; 64
    2ad4:	e6 16       	cp	r14, r22
    2ad6:	f1 04       	cpc	r15, r1
    2ad8:	01 05       	cpc	r16, r1
    2ada:	11 05       	cpc	r17, r1
    2adc:	61 f4       	brne	.+24     	; 0x2af6 <__mulsf3+0x1d2>
    2ade:	87 fd       	sbrc	r24, 7
    2ae0:	0a c0       	rjmp	.+20     	; 0x2af6 <__mulsf3+0x1d2>
    2ae2:	21 15       	cp	r18, r1
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	41 05       	cpc	r20, r1
    2ae8:	51 05       	cpc	r21, r1
    2aea:	29 f0       	breq	.+10     	; 0x2af6 <__mulsf3+0x1d2>
    2aec:	80 5c       	subi	r24, 0xC0	; 192
    2aee:	9f 4f       	sbci	r25, 0xFF	; 255
    2af0:	af 4f       	sbci	r26, 0xFF	; 255
    2af2:	bf 4f       	sbci	r27, 0xFF	; 255
    2af4:	80 78       	andi	r24, 0x80	; 128
    2af6:	8d 8f       	std	Y+29, r24	; 0x1d
    2af8:	9e 8f       	std	Y+30, r25	; 0x1e
    2afa:	af 8f       	std	Y+31, r26	; 0x1f
    2afc:	b8 a3       	std	Y+32, r27	; 0x20
    2afe:	83 e0       	ldi	r24, 0x03	; 3
    2b00:	89 8f       	std	Y+25, r24	; 0x19
    2b02:	ce 01       	movw	r24, r28
    2b04:	49 96       	adiw	r24, 0x19	; 25
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <__mulsf3+0x1e8>
    2b08:	80 e1       	ldi	r24, 0x10	; 16
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	0e 94 4e 18 	call	0x309c	; 0x309c <__pack_f>
    2b10:	a0 96       	adiw	r28, 0x20	; 32
    2b12:	e2 e1       	ldi	r30, 0x12	; 18
    2b14:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__epilogue_restores__>

00002b18 <__divsf3>:
    2b18:	a8 e1       	ldi	r26, 0x18	; 24
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e2 e9       	ldi	r30, 0x92	; 146
    2b1e:	f5 e1       	ldi	r31, 0x15	; 21
    2b20:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__prologue_saves__+0x10>
    2b24:	69 83       	std	Y+1, r22	; 0x01
    2b26:	7a 83       	std	Y+2, r23	; 0x02
    2b28:	8b 83       	std	Y+3, r24	; 0x03
    2b2a:	9c 83       	std	Y+4, r25	; 0x04
    2b2c:	2d 83       	std	Y+5, r18	; 0x05
    2b2e:	3e 83       	std	Y+6, r19	; 0x06
    2b30:	4f 83       	std	Y+7, r20	; 0x07
    2b32:	58 87       	std	Y+8, r21	; 0x08
    2b34:	8e 01       	movw	r16, r28
    2b36:	07 5f       	subi	r16, 0xF7	; 247
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	01 96       	adiw	r24, 0x01	; 1
    2b3e:	b8 01       	movw	r22, r16
    2b40:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2b44:	81 e1       	ldi	r24, 0x11	; 17
    2b46:	e8 2e       	mov	r14, r24
    2b48:	f1 2c       	mov	r15, r1
    2b4a:	ec 0e       	add	r14, r28
    2b4c:	fd 1e       	adc	r15, r29
    2b4e:	ce 01       	movw	r24, r28
    2b50:	05 96       	adiw	r24, 0x05	; 5
    2b52:	b7 01       	movw	r22, r14
    2b54:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2b58:	99 85       	ldd	r25, Y+9	; 0x09
    2b5a:	92 30       	cpi	r25, 0x02	; 2
    2b5c:	08 f4       	brcc	.+2      	; 0x2b60 <__divsf3+0x48>
    2b5e:	83 c0       	rjmp	.+262    	; 0x2c66 <__divsf3+0x14e>
    2b60:	89 89       	ldd	r24, Y+17	; 0x11
    2b62:	82 30       	cpi	r24, 0x02	; 2
    2b64:	08 f4       	brcc	.+2      	; 0x2b68 <__divsf3+0x50>
    2b66:	7b c0       	rjmp	.+246    	; 0x2c5e <__divsf3+0x146>
    2b68:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b6a:	3a 89       	ldd	r19, Y+18	; 0x12
    2b6c:	23 27       	eor	r18, r19
    2b6e:	2a 87       	std	Y+10, r18	; 0x0a
    2b70:	94 30       	cpi	r25, 0x04	; 4
    2b72:	11 f0       	breq	.+4      	; 0x2b78 <__divsf3+0x60>
    2b74:	92 30       	cpi	r25, 0x02	; 2
    2b76:	21 f4       	brne	.+8      	; 0x2b80 <__divsf3+0x68>
    2b78:	98 17       	cp	r25, r24
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <__divsf3+0x66>
    2b7c:	6c c0       	rjmp	.+216    	; 0x2c56 <__divsf3+0x13e>
    2b7e:	71 c0       	rjmp	.+226    	; 0x2c62 <__divsf3+0x14a>
    2b80:	84 30       	cpi	r24, 0x04	; 4
    2b82:	39 f4       	brne	.+14     	; 0x2b92 <__divsf3+0x7a>
    2b84:	1d 86       	std	Y+13, r1	; 0x0d
    2b86:	1e 86       	std	Y+14, r1	; 0x0e
    2b88:	1f 86       	std	Y+15, r1	; 0x0f
    2b8a:	18 8a       	std	Y+16, r1	; 0x10
    2b8c:	1c 86       	std	Y+12, r1	; 0x0c
    2b8e:	1b 86       	std	Y+11, r1	; 0x0b
    2b90:	6a c0       	rjmp	.+212    	; 0x2c66 <__divsf3+0x14e>
    2b92:	82 30       	cpi	r24, 0x02	; 2
    2b94:	19 f4       	brne	.+6      	; 0x2b9c <__divsf3+0x84>
    2b96:	84 e0       	ldi	r24, 0x04	; 4
    2b98:	89 87       	std	Y+9, r24	; 0x09
    2b9a:	65 c0       	rjmp	.+202    	; 0x2c66 <__divsf3+0x14e>
    2b9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ba0:	2b 89       	ldd	r18, Y+19	; 0x13
    2ba2:	3c 89       	ldd	r19, Y+20	; 0x14
    2ba4:	82 1b       	sub	r24, r18
    2ba6:	93 0b       	sbc	r25, r19
    2ba8:	9c 87       	std	Y+12, r25	; 0x0c
    2baa:	8b 87       	std	Y+11, r24	; 0x0b
    2bac:	2d 85       	ldd	r18, Y+13	; 0x0d
    2bae:	3e 85       	ldd	r19, Y+14	; 0x0e
    2bb0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2bb2:	58 89       	ldd	r21, Y+16	; 0x10
    2bb4:	ed 88       	ldd	r14, Y+21	; 0x15
    2bb6:	fe 88       	ldd	r15, Y+22	; 0x16
    2bb8:	0f 89       	ldd	r16, Y+23	; 0x17
    2bba:	18 8d       	ldd	r17, Y+24	; 0x18
    2bbc:	2e 15       	cp	r18, r14
    2bbe:	3f 05       	cpc	r19, r15
    2bc0:	40 07       	cpc	r20, r16
    2bc2:	51 07       	cpc	r21, r17
    2bc4:	38 f4       	brcc	.+14     	; 0x2bd4 <__divsf3+0xbc>
    2bc6:	22 0f       	add	r18, r18
    2bc8:	33 1f       	adc	r19, r19
    2bca:	44 1f       	adc	r20, r20
    2bcc:	55 1f       	adc	r21, r21
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	9c 87       	std	Y+12, r25	; 0x0c
    2bd2:	8b 87       	std	Y+11, r24	; 0x0b
    2bd4:	6f e1       	ldi	r22, 0x1F	; 31
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	a1 2c       	mov	r10, r1
    2bda:	b1 2c       	mov	r11, r1
    2bdc:	c1 2c       	mov	r12, r1
    2bde:	a0 e4       	ldi	r26, 0x40	; 64
    2be0:	da 2e       	mov	r13, r26
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	dc 01       	movw	r26, r24
    2be8:	2e 15       	cp	r18, r14
    2bea:	3f 05       	cpc	r19, r15
    2bec:	40 07       	cpc	r20, r16
    2bee:	51 07       	cpc	r21, r17
    2bf0:	40 f0       	brcs	.+16     	; 0x2c02 <__divsf3+0xea>
    2bf2:	8a 29       	or	r24, r10
    2bf4:	9b 29       	or	r25, r11
    2bf6:	ac 29       	or	r26, r12
    2bf8:	bd 29       	or	r27, r13
    2bfa:	2e 19       	sub	r18, r14
    2bfc:	3f 09       	sbc	r19, r15
    2bfe:	40 0b       	sbc	r20, r16
    2c00:	51 0b       	sbc	r21, r17
    2c02:	d6 94       	lsr	r13
    2c04:	c7 94       	ror	r12
    2c06:	b7 94       	ror	r11
    2c08:	a7 94       	ror	r10
    2c0a:	22 0f       	add	r18, r18
    2c0c:	33 1f       	adc	r19, r19
    2c0e:	44 1f       	adc	r20, r20
    2c10:	55 1f       	adc	r21, r21
    2c12:	61 50       	subi	r22, 0x01	; 1
    2c14:	70 40       	sbci	r23, 0x00	; 0
    2c16:	41 f7       	brne	.-48     	; 0x2be8 <__divsf3+0xd0>
    2c18:	6f e7       	ldi	r22, 0x7F	; 127
    2c1a:	e6 2e       	mov	r14, r22
    2c1c:	f1 2c       	mov	r15, r1
    2c1e:	01 2d       	mov	r16, r1
    2c20:	11 2d       	mov	r17, r1
    2c22:	e8 22       	and	r14, r24
    2c24:	f9 22       	and	r15, r25
    2c26:	0a 23       	and	r16, r26
    2c28:	1b 23       	and	r17, r27
    2c2a:	60 e4       	ldi	r22, 0x40	; 64
    2c2c:	e6 16       	cp	r14, r22
    2c2e:	f1 04       	cpc	r15, r1
    2c30:	01 05       	cpc	r16, r1
    2c32:	11 05       	cpc	r17, r1
    2c34:	61 f4       	brne	.+24     	; 0x2c4e <__divsf3+0x136>
    2c36:	87 fd       	sbrc	r24, 7
    2c38:	0a c0       	rjmp	.+20     	; 0x2c4e <__divsf3+0x136>
    2c3a:	21 15       	cp	r18, r1
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	41 05       	cpc	r20, r1
    2c40:	51 05       	cpc	r21, r1
    2c42:	29 f0       	breq	.+10     	; 0x2c4e <__divsf3+0x136>
    2c44:	80 5c       	subi	r24, 0xC0	; 192
    2c46:	9f 4f       	sbci	r25, 0xFF	; 255
    2c48:	af 4f       	sbci	r26, 0xFF	; 255
    2c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4c:	80 78       	andi	r24, 0x80	; 128
    2c4e:	8d 87       	std	Y+13, r24	; 0x0d
    2c50:	9e 87       	std	Y+14, r25	; 0x0e
    2c52:	af 87       	std	Y+15, r26	; 0x0f
    2c54:	b8 8b       	std	Y+16, r27	; 0x10
    2c56:	8e 01       	movw	r16, r28
    2c58:	07 5f       	subi	r16, 0xF7	; 247
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	04 c0       	rjmp	.+8      	; 0x2c66 <__divsf3+0x14e>
    2c5e:	87 01       	movw	r16, r14
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <__divsf3+0x14e>
    2c62:	00 e1       	ldi	r16, 0x10	; 16
    2c64:	11 e0       	ldi	r17, 0x01	; 1
    2c66:	c8 01       	movw	r24, r16
    2c68:	0e 94 4e 18 	call	0x309c	; 0x309c <__pack_f>
    2c6c:	68 96       	adiw	r28, 0x18	; 24
    2c6e:	ea e0       	ldi	r30, 0x0A	; 10
    2c70:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__epilogue_restores__+0x10>

00002c74 <__gtsf2>:
    2c74:	a8 e1       	ldi	r26, 0x18	; 24
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e0 e4       	ldi	r30, 0x40	; 64
    2c7a:	f6 e1       	ldi	r31, 0x16	; 22
    2c7c:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__prologue_saves__+0x18>
    2c80:	69 83       	std	Y+1, r22	; 0x01
    2c82:	7a 83       	std	Y+2, r23	; 0x02
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    2c86:	9c 83       	std	Y+4, r25	; 0x04
    2c88:	2d 83       	std	Y+5, r18	; 0x05
    2c8a:	3e 83       	std	Y+6, r19	; 0x06
    2c8c:	4f 83       	std	Y+7, r20	; 0x07
    2c8e:	58 87       	std	Y+8, r21	; 0x08
    2c90:	8e 01       	movw	r16, r28
    2c92:	07 5f       	subi	r16, 0xF7	; 247
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	ce 01       	movw	r24, r28
    2c98:	01 96       	adiw	r24, 0x01	; 1
    2c9a:	b8 01       	movw	r22, r16
    2c9c:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2ca0:	81 e1       	ldi	r24, 0x11	; 17
    2ca2:	e8 2e       	mov	r14, r24
    2ca4:	f1 2c       	mov	r15, r1
    2ca6:	ec 0e       	add	r14, r28
    2ca8:	fd 1e       	adc	r15, r29
    2caa:	ce 01       	movw	r24, r28
    2cac:	05 96       	adiw	r24, 0x05	; 5
    2cae:	b7 01       	movw	r22, r14
    2cb0:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2cb4:	89 85       	ldd	r24, Y+9	; 0x09
    2cb6:	82 30       	cpi	r24, 0x02	; 2
    2cb8:	40 f0       	brcs	.+16     	; 0x2cca <__gtsf2+0x56>
    2cba:	89 89       	ldd	r24, Y+17	; 0x11
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	28 f0       	brcs	.+10     	; 0x2cca <__gtsf2+0x56>
    2cc0:	c8 01       	movw	r24, r16
    2cc2:	b7 01       	movw	r22, r14
    2cc4:	0e 94 84 19 	call	0x3308	; 0x3308 <__fpcmp_parts_f>
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <__gtsf2+0x58>
    2cca:	8f ef       	ldi	r24, 0xFF	; 255
    2ccc:	68 96       	adiw	r28, 0x18	; 24
    2cce:	e6 e0       	ldi	r30, 0x06	; 6
    2cd0:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x18>

00002cd4 <__gesf2>:
    2cd4:	a8 e1       	ldi	r26, 0x18	; 24
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e0 e7       	ldi	r30, 0x70	; 112
    2cda:	f6 e1       	ldi	r31, 0x16	; 22
    2cdc:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__prologue_saves__+0x18>
    2ce0:	69 83       	std	Y+1, r22	; 0x01
    2ce2:	7a 83       	std	Y+2, r23	; 0x02
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	2d 83       	std	Y+5, r18	; 0x05
    2cea:	3e 83       	std	Y+6, r19	; 0x06
    2cec:	4f 83       	std	Y+7, r20	; 0x07
    2cee:	58 87       	std	Y+8, r21	; 0x08
    2cf0:	8e 01       	movw	r16, r28
    2cf2:	07 5f       	subi	r16, 0xF7	; 247
    2cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	01 96       	adiw	r24, 0x01	; 1
    2cfa:	b8 01       	movw	r22, r16
    2cfc:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2d00:	81 e1       	ldi	r24, 0x11	; 17
    2d02:	e8 2e       	mov	r14, r24
    2d04:	f1 2c       	mov	r15, r1
    2d06:	ec 0e       	add	r14, r28
    2d08:	fd 1e       	adc	r15, r29
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	05 96       	adiw	r24, 0x05	; 5
    2d0e:	b7 01       	movw	r22, r14
    2d10:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2d14:	89 85       	ldd	r24, Y+9	; 0x09
    2d16:	82 30       	cpi	r24, 0x02	; 2
    2d18:	40 f0       	brcs	.+16     	; 0x2d2a <__gesf2+0x56>
    2d1a:	89 89       	ldd	r24, Y+17	; 0x11
    2d1c:	82 30       	cpi	r24, 0x02	; 2
    2d1e:	28 f0       	brcs	.+10     	; 0x2d2a <__gesf2+0x56>
    2d20:	c8 01       	movw	r24, r16
    2d22:	b7 01       	movw	r22, r14
    2d24:	0e 94 84 19 	call	0x3308	; 0x3308 <__fpcmp_parts_f>
    2d28:	01 c0       	rjmp	.+2      	; 0x2d2c <__gesf2+0x58>
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	68 96       	adiw	r28, 0x18	; 24
    2d2e:	e6 e0       	ldi	r30, 0x06	; 6
    2d30:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x18>

00002d34 <__ltsf2>:
    2d34:	a8 e1       	ldi	r26, 0x18	; 24
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e0 ea       	ldi	r30, 0xA0	; 160
    2d3a:	f6 e1       	ldi	r31, 0x16	; 22
    2d3c:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__prologue_saves__+0x18>
    2d40:	69 83       	std	Y+1, r22	; 0x01
    2d42:	7a 83       	std	Y+2, r23	; 0x02
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	9c 83       	std	Y+4, r25	; 0x04
    2d48:	2d 83       	std	Y+5, r18	; 0x05
    2d4a:	3e 83       	std	Y+6, r19	; 0x06
    2d4c:	4f 83       	std	Y+7, r20	; 0x07
    2d4e:	58 87       	std	Y+8, r21	; 0x08
    2d50:	8e 01       	movw	r16, r28
    2d52:	07 5f       	subi	r16, 0xF7	; 247
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	b8 01       	movw	r22, r16
    2d5c:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2d60:	81 e1       	ldi	r24, 0x11	; 17
    2d62:	e8 2e       	mov	r14, r24
    2d64:	f1 2c       	mov	r15, r1
    2d66:	ec 0e       	add	r14, r28
    2d68:	fd 1e       	adc	r15, r29
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	05 96       	adiw	r24, 0x05	; 5
    2d6e:	b7 01       	movw	r22, r14
    2d70:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	82 30       	cpi	r24, 0x02	; 2
    2d78:	40 f0       	brcs	.+16     	; 0x2d8a <__ltsf2+0x56>
    2d7a:	89 89       	ldd	r24, Y+17	; 0x11
    2d7c:	82 30       	cpi	r24, 0x02	; 2
    2d7e:	28 f0       	brcs	.+10     	; 0x2d8a <__ltsf2+0x56>
    2d80:	c8 01       	movw	r24, r16
    2d82:	b7 01       	movw	r22, r14
    2d84:	0e 94 84 19 	call	0x3308	; 0x3308 <__fpcmp_parts_f>
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <__ltsf2+0x58>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	68 96       	adiw	r28, 0x18	; 24
    2d8e:	e6 e0       	ldi	r30, 0x06	; 6
    2d90:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x18>

00002d94 <__floatsisf>:
    2d94:	a8 e0       	ldi	r26, 0x08	; 8
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e0 ed       	ldi	r30, 0xD0	; 208
    2d9a:	f6 e1       	ldi	r31, 0x16	; 22
    2d9c:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__prologue_saves__+0x18>
    2da0:	7b 01       	movw	r14, r22
    2da2:	8c 01       	movw	r16, r24
    2da4:	83 e0       	ldi	r24, 0x03	; 3
    2da6:	89 83       	std	Y+1, r24	; 0x01
    2da8:	d8 01       	movw	r26, r16
    2daa:	c7 01       	movw	r24, r14
    2dac:	88 27       	eor	r24, r24
    2dae:	b7 fd       	sbrc	r27, 7
    2db0:	83 95       	inc	r24
    2db2:	99 27       	eor	r25, r25
    2db4:	aa 27       	eor	r26, r26
    2db6:	bb 27       	eor	r27, r27
    2db8:	28 2f       	mov	r18, r24
    2dba:	8a 83       	std	Y+2, r24	; 0x02
    2dbc:	e1 14       	cp	r14, r1
    2dbe:	f1 04       	cpc	r15, r1
    2dc0:	01 05       	cpc	r16, r1
    2dc2:	11 05       	cpc	r17, r1
    2dc4:	19 f4       	brne	.+6      	; 0x2dcc <__floatsisf+0x38>
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	37 c0       	rjmp	.+110    	; 0x2e3a <__floatsisf+0xa6>
    2dcc:	8e e1       	ldi	r24, 0x1E	; 30
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
    2dd4:	22 23       	and	r18, r18
    2dd6:	89 f0       	breq	.+34     	; 0x2dfa <__floatsisf+0x66>
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	e8 16       	cp	r14, r24
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	f8 06       	cpc	r15, r24
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	08 07       	cpc	r16, r24
    2de4:	80 e8       	ldi	r24, 0x80	; 128
    2de6:	18 07       	cpc	r17, r24
    2de8:	69 f1       	breq	.+90     	; 0x2e44 <__floatsisf+0xb0>
    2dea:	10 95       	com	r17
    2dec:	00 95       	com	r16
    2dee:	f0 94       	com	r15
    2df0:	e0 94       	com	r14
    2df2:	e1 1c       	adc	r14, r1
    2df4:	f1 1c       	adc	r15, r1
    2df6:	01 1d       	adc	r16, r1
    2df8:	11 1d       	adc	r17, r1
    2dfa:	ed 82       	std	Y+5, r14	; 0x05
    2dfc:	fe 82       	std	Y+6, r15	; 0x06
    2dfe:	0f 83       	std	Y+7, r16	; 0x07
    2e00:	18 87       	std	Y+8, r17	; 0x08
    2e02:	c8 01       	movw	r24, r16
    2e04:	b7 01       	movw	r22, r14
    2e06:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__clzsi2>
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	21 50       	subi	r18, 0x01	; 1
    2e0e:	30 40       	sbci	r19, 0x00	; 0
    2e10:	12 16       	cp	r1, r18
    2e12:	13 06       	cpc	r1, r19
    2e14:	94 f4       	brge	.+36     	; 0x2e3a <__floatsisf+0xa6>
    2e16:	02 2e       	mov	r0, r18
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <__floatsisf+0x8e>
    2e1a:	ee 0c       	add	r14, r14
    2e1c:	ff 1c       	adc	r15, r15
    2e1e:	00 1f       	adc	r16, r16
    2e20:	11 1f       	adc	r17, r17
    2e22:	0a 94       	dec	r0
    2e24:	d2 f7       	brpl	.-12     	; 0x2e1a <__floatsisf+0x86>
    2e26:	ed 82       	std	Y+5, r14	; 0x05
    2e28:	fe 82       	std	Y+6, r15	; 0x06
    2e2a:	0f 83       	std	Y+7, r16	; 0x07
    2e2c:	18 87       	std	Y+8, r17	; 0x08
    2e2e:	8e e1       	ldi	r24, 0x1E	; 30
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	82 1b       	sub	r24, r18
    2e34:	93 0b       	sbc	r25, r19
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	0e 94 4e 18 	call	0x309c	; 0x309c <__pack_f>
    2e42:	04 c0       	rjmp	.+8      	; 0x2e4c <__floatsisf+0xb8>
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	9f ec       	ldi	r25, 0xCF	; 207
    2e4c:	28 96       	adiw	r28, 0x08	; 8
    2e4e:	e6 e0       	ldi	r30, 0x06	; 6
    2e50:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x18>

00002e54 <__fixsfsi>:
    2e54:	ac e0       	ldi	r26, 0x0C	; 12
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e0 e3       	ldi	r30, 0x30	; 48
    2e5a:	f7 e1       	ldi	r31, 0x17	; 23
    2e5c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__+0x20>
    2e60:	69 83       	std	Y+1, r22	; 0x01
    2e62:	7a 83       	std	Y+2, r23	; 0x02
    2e64:	8b 83       	std	Y+3, r24	; 0x03
    2e66:	9c 83       	std	Y+4, r25	; 0x04
    2e68:	ce 01       	movw	r24, r28
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	be 01       	movw	r22, r28
    2e6e:	6b 5f       	subi	r22, 0xFB	; 251
    2e70:	7f 4f       	sbci	r23, 0xFF	; 255
    2e72:	0e 94 1b 19 	call	0x3236	; 0x3236 <__unpack_f>
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	82 30       	cpi	r24, 0x02	; 2
    2e7a:	81 f1       	breq	.+96     	; 0x2edc <__fixsfsi+0x88>
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	70 f1       	brcs	.+92     	; 0x2edc <__fixsfsi+0x88>
    2e80:	84 30       	cpi	r24, 0x04	; 4
    2e82:	21 f4       	brne	.+8      	; 0x2e8c <__fixsfsi+0x38>
    2e84:	8e 81       	ldd	r24, Y+6	; 0x06
    2e86:	88 23       	and	r24, r24
    2e88:	69 f1       	breq	.+90     	; 0x2ee4 <__fixsfsi+0x90>
    2e8a:	0a c0       	rjmp	.+20     	; 0x2ea0 <__fixsfsi+0x4c>
    2e8c:	2f 81       	ldd	r18, Y+7	; 0x07
    2e8e:	38 85       	ldd	r19, Y+8	; 0x08
    2e90:	37 fd       	sbrc	r19, 7
    2e92:	24 c0       	rjmp	.+72     	; 0x2edc <__fixsfsi+0x88>
    2e94:	6e 81       	ldd	r22, Y+6	; 0x06
    2e96:	2f 31       	cpi	r18, 0x1F	; 31
    2e98:	31 05       	cpc	r19, r1
    2e9a:	3c f0       	brlt	.+14     	; 0x2eaa <__fixsfsi+0x56>
    2e9c:	66 23       	and	r22, r22
    2e9e:	11 f1       	breq	.+68     	; 0x2ee4 <__fixsfsi+0x90>
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e0       	ldi	r20, 0x00	; 0
    2ea6:	50 e8       	ldi	r21, 0x80	; 128
    2ea8:	21 c0       	rjmp	.+66     	; 0x2eec <__fixsfsi+0x98>
    2eaa:	8e e1       	ldi	r24, 0x1E	; 30
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	82 1b       	sub	r24, r18
    2eb0:	93 0b       	sbc	r25, r19
    2eb2:	29 85       	ldd	r18, Y+9	; 0x09
    2eb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2eb6:	4b 85       	ldd	r20, Y+11	; 0x0b
    2eb8:	5c 85       	ldd	r21, Y+12	; 0x0c
    2eba:	04 c0       	rjmp	.+8      	; 0x2ec4 <__fixsfsi+0x70>
    2ebc:	56 95       	lsr	r21
    2ebe:	47 95       	ror	r20
    2ec0:	37 95       	ror	r19
    2ec2:	27 95       	ror	r18
    2ec4:	8a 95       	dec	r24
    2ec6:	d2 f7       	brpl	.-12     	; 0x2ebc <__fixsfsi+0x68>
    2ec8:	66 23       	and	r22, r22
    2eca:	81 f0       	breq	.+32     	; 0x2eec <__fixsfsi+0x98>
    2ecc:	50 95       	com	r21
    2ece:	40 95       	com	r20
    2ed0:	30 95       	com	r19
    2ed2:	21 95       	neg	r18
    2ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eda:	08 c0       	rjmp	.+16     	; 0x2eec <__fixsfsi+0x98>
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	a9 01       	movw	r20, r18
    2ee2:	04 c0       	rjmp	.+8      	; 0x2eec <__fixsfsi+0x98>
    2ee4:	2f ef       	ldi	r18, 0xFF	; 255
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f ef       	ldi	r20, 0xFF	; 255
    2eea:	5f e7       	ldi	r21, 0x7F	; 127
    2eec:	b9 01       	movw	r22, r18
    2eee:	ca 01       	movw	r24, r20
    2ef0:	2c 96       	adiw	r28, 0x0c	; 12
    2ef2:	e2 e0       	ldi	r30, 0x02	; 2
    2ef4:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__+0x20>

00002ef8 <__floatunsisf>:
    2ef8:	a8 e0       	ldi	r26, 0x08	; 8
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e2 e8       	ldi	r30, 0x82	; 130
    2efe:	f7 e1       	ldi	r31, 0x17	; 23
    2f00:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__prologue_saves__+0x14>
    2f04:	7b 01       	movw	r14, r22
    2f06:	8c 01       	movw	r16, r24
    2f08:	1a 82       	std	Y+2, r1	; 0x02
    2f0a:	61 15       	cp	r22, r1
    2f0c:	71 05       	cpc	r23, r1
    2f0e:	81 05       	cpc	r24, r1
    2f10:	91 05       	cpc	r25, r1
    2f12:	19 f4       	brne	.+6      	; 0x2f1a <__floatunsisf+0x22>
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	5f c0       	rjmp	.+190    	; 0x2fd8 <__floatunsisf+0xe0>
    2f1a:	83 e0       	ldi	r24, 0x03	; 3
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	8e e1       	ldi	r24, 0x1E	; 30
    2f20:	c8 2e       	mov	r12, r24
    2f22:	d1 2c       	mov	r13, r1
    2f24:	dc 82       	std	Y+4, r13	; 0x04
    2f26:	cb 82       	std	Y+3, r12	; 0x03
    2f28:	ed 82       	std	Y+5, r14	; 0x05
    2f2a:	fe 82       	std	Y+6, r15	; 0x06
    2f2c:	0f 83       	std	Y+7, r16	; 0x07
    2f2e:	18 87       	std	Y+8, r17	; 0x08
    2f30:	c8 01       	movw	r24, r16
    2f32:	b7 01       	movw	r22, r14
    2f34:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__clzsi2>
    2f38:	fc 01       	movw	r30, r24
    2f3a:	31 97       	sbiw	r30, 0x01	; 1
    2f3c:	f7 ff       	sbrs	r31, 7
    2f3e:	3a c0       	rjmp	.+116    	; 0x2fb4 <__floatunsisf+0xbc>
    2f40:	aa 27       	eor	r26, r26
    2f42:	bb 27       	eor	r27, r27
    2f44:	ae 1b       	sub	r26, r30
    2f46:	bf 0b       	sbc	r27, r31
    2f48:	21 e0       	ldi	r18, 0x01	; 1
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	50 e0       	ldi	r21, 0x00	; 0
    2f50:	0a 2e       	mov	r0, r26
    2f52:	04 c0       	rjmp	.+8      	; 0x2f5c <__floatunsisf+0x64>
    2f54:	22 0f       	add	r18, r18
    2f56:	33 1f       	adc	r19, r19
    2f58:	44 1f       	adc	r20, r20
    2f5a:	55 1f       	adc	r21, r21
    2f5c:	0a 94       	dec	r0
    2f5e:	d2 f7       	brpl	.-12     	; 0x2f54 <__floatunsisf+0x5c>
    2f60:	21 50       	subi	r18, 0x01	; 1
    2f62:	30 40       	sbci	r19, 0x00	; 0
    2f64:	40 40       	sbci	r20, 0x00	; 0
    2f66:	50 40       	sbci	r21, 0x00	; 0
    2f68:	2e 21       	and	r18, r14
    2f6a:	3f 21       	and	r19, r15
    2f6c:	40 23       	and	r20, r16
    2f6e:	51 23       	and	r21, r17
    2f70:	61 e0       	ldi	r22, 0x01	; 1
    2f72:	70 e0       	ldi	r23, 0x00	; 0
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	21 15       	cp	r18, r1
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	41 05       	cpc	r20, r1
    2f7e:	51 05       	cpc	r21, r1
    2f80:	19 f4       	brne	.+6      	; 0x2f88 <__floatunsisf+0x90>
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	cb 01       	movw	r24, r22
    2f88:	04 c0       	rjmp	.+8      	; 0x2f92 <__floatunsisf+0x9a>
    2f8a:	16 95       	lsr	r17
    2f8c:	07 95       	ror	r16
    2f8e:	f7 94       	ror	r15
    2f90:	e7 94       	ror	r14
    2f92:	aa 95       	dec	r26
    2f94:	d2 f7       	brpl	.-12     	; 0x2f8a <__floatunsisf+0x92>
    2f96:	e6 2a       	or	r14, r22
    2f98:	f7 2a       	or	r15, r23
    2f9a:	08 2b       	or	r16, r24
    2f9c:	19 2b       	or	r17, r25
    2f9e:	ed 82       	std	Y+5, r14	; 0x05
    2fa0:	fe 82       	std	Y+6, r15	; 0x06
    2fa2:	0f 83       	std	Y+7, r16	; 0x07
    2fa4:	18 87       	std	Y+8, r17	; 0x08
    2fa6:	8e e1       	ldi	r24, 0x1E	; 30
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	8e 1b       	sub	r24, r30
    2fac:	9f 0b       	sbc	r25, r31
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
    2fb2:	12 c0       	rjmp	.+36     	; 0x2fd8 <__floatunsisf+0xe0>
    2fb4:	30 97       	sbiw	r30, 0x00	; 0
    2fb6:	81 f0       	breq	.+32     	; 0x2fd8 <__floatunsisf+0xe0>
    2fb8:	0e 2e       	mov	r0, r30
    2fba:	04 c0       	rjmp	.+8      	; 0x2fc4 <__floatunsisf+0xcc>
    2fbc:	ee 0c       	add	r14, r14
    2fbe:	ff 1c       	adc	r15, r15
    2fc0:	00 1f       	adc	r16, r16
    2fc2:	11 1f       	adc	r17, r17
    2fc4:	0a 94       	dec	r0
    2fc6:	d2 f7       	brpl	.-12     	; 0x2fbc <__floatunsisf+0xc4>
    2fc8:	ed 82       	std	Y+5, r14	; 0x05
    2fca:	fe 82       	std	Y+6, r15	; 0x06
    2fcc:	0f 83       	std	Y+7, r16	; 0x07
    2fce:	18 87       	std	Y+8, r17	; 0x08
    2fd0:	ce 1a       	sub	r12, r30
    2fd2:	df 0a       	sbc	r13, r31
    2fd4:	dc 82       	std	Y+4, r13	; 0x04
    2fd6:	cb 82       	std	Y+3, r12	; 0x03
    2fd8:	ce 01       	movw	r24, r28
    2fda:	01 96       	adiw	r24, 0x01	; 1
    2fdc:	0e 94 4e 18 	call	0x309c	; 0x309c <__pack_f>
    2fe0:	28 96       	adiw	r28, 0x08	; 8
    2fe2:	e8 e0       	ldi	r30, 0x08	; 8
    2fe4:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__epilogue_restores__+0x14>

00002fe8 <__clzsi2>:
    2fe8:	af 92       	push	r10
    2fea:	bf 92       	push	r11
    2fec:	cf 92       	push	r12
    2fee:	df 92       	push	r13
    2ff0:	ef 92       	push	r14
    2ff2:	ff 92       	push	r15
    2ff4:	0f 93       	push	r16
    2ff6:	1f 93       	push	r17
    2ff8:	7b 01       	movw	r14, r22
    2ffa:	8c 01       	movw	r16, r24
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	e8 16       	cp	r14, r24
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	f8 06       	cpc	r15, r24
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	08 07       	cpc	r16, r24
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	18 07       	cpc	r17, r24
    300c:	58 f4       	brcc	.+22     	; 0x3024 <__clzsi2+0x3c>
    300e:	ef ef       	ldi	r30, 0xFF	; 255
    3010:	ee 16       	cp	r14, r30
    3012:	f1 04       	cpc	r15, r1
    3014:	01 05       	cpc	r16, r1
    3016:	11 05       	cpc	r17, r1
    3018:	09 f0       	breq	.+2      	; 0x301c <__clzsi2+0x34>
    301a:	90 f4       	brcc	.+36     	; 0x3040 <__clzsi2+0x58>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	dc 01       	movw	r26, r24
    3022:	17 c0       	rjmp	.+46     	; 0x3052 <__clzsi2+0x6a>
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	ef 16       	cp	r14, r31
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	ff 06       	cpc	r15, r31
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	0f 07       	cpc	r16, r31
    3030:	f1 e0       	ldi	r31, 0x01	; 1
    3032:	1f 07       	cpc	r17, r31
    3034:	50 f4       	brcc	.+20     	; 0x304a <__clzsi2+0x62>
    3036:	80 e1       	ldi	r24, 0x10	; 16
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	a0 e0       	ldi	r26, 0x00	; 0
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	09 c0       	rjmp	.+18     	; 0x3052 <__clzsi2+0x6a>
    3040:	88 e0       	ldi	r24, 0x08	; 8
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	a0 e0       	ldi	r26, 0x00	; 0
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <__clzsi2+0x6a>
    304a:	88 e1       	ldi	r24, 0x18	; 24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a0 e0       	ldi	r26, 0x00	; 0
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	20 e2       	ldi	r18, 0x20	; 32
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	28 1b       	sub	r18, r24
    305c:	39 0b       	sbc	r19, r25
    305e:	4a 0b       	sbc	r20, r26
    3060:	5b 0b       	sbc	r21, r27
    3062:	57 01       	movw	r10, r14
    3064:	68 01       	movw	r12, r16
    3066:	04 c0       	rjmp	.+8      	; 0x3070 <__clzsi2+0x88>
    3068:	d6 94       	lsr	r13
    306a:	c7 94       	ror	r12
    306c:	b7 94       	ror	r11
    306e:	a7 94       	ror	r10
    3070:	8a 95       	dec	r24
    3072:	d2 f7       	brpl	.-12     	; 0x3068 <__clzsi2+0x80>
    3074:	d6 01       	movw	r26, r12
    3076:	c5 01       	movw	r24, r10
    3078:	88 5e       	subi	r24, 0xE8	; 232
    307a:	9e 4f       	sbci	r25, 0xFE	; 254
    307c:	fc 01       	movw	r30, r24
    307e:	80 81       	ld	r24, Z
    3080:	28 1b       	sub	r18, r24
    3082:	31 09       	sbc	r19, r1
    3084:	41 09       	sbc	r20, r1
    3086:	51 09       	sbc	r21, r1
    3088:	c9 01       	movw	r24, r18
    308a:	1f 91       	pop	r17
    308c:	0f 91       	pop	r16
    308e:	ff 90       	pop	r15
    3090:	ef 90       	pop	r14
    3092:	df 90       	pop	r13
    3094:	cf 90       	pop	r12
    3096:	bf 90       	pop	r11
    3098:	af 90       	pop	r10
    309a:	08 95       	ret

0000309c <__pack_f>:
    309c:	ef 92       	push	r14
    309e:	ff 92       	push	r15
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	fc 01       	movw	r30, r24
    30aa:	24 81       	ldd	r18, Z+4	; 0x04
    30ac:	35 81       	ldd	r19, Z+5	; 0x05
    30ae:	46 81       	ldd	r20, Z+6	; 0x06
    30b0:	57 81       	ldd	r21, Z+7	; 0x07
    30b2:	61 81       	ldd	r22, Z+1	; 0x01
    30b4:	80 81       	ld	r24, Z
    30b6:	82 30       	cpi	r24, 0x02	; 2
    30b8:	20 f4       	brcc	.+8      	; 0x30c2 <__pack_f+0x26>
    30ba:	40 61       	ori	r20, 0x10	; 16
    30bc:	ef ef       	ldi	r30, 0xFF	; 255
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	a3 c0       	rjmp	.+326    	; 0x3208 <__pack_f+0x16c>
    30c2:	84 30       	cpi	r24, 0x04	; 4
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <__pack_f+0x2c>
    30c6:	9b c0       	rjmp	.+310    	; 0x31fe <__pack_f+0x162>
    30c8:	82 30       	cpi	r24, 0x02	; 2
    30ca:	09 f4       	brne	.+2      	; 0x30ce <__pack_f+0x32>
    30cc:	92 c0       	rjmp	.+292    	; 0x31f2 <__pack_f+0x156>
    30ce:	21 15       	cp	r18, r1
    30d0:	31 05       	cpc	r19, r1
    30d2:	41 05       	cpc	r20, r1
    30d4:	51 05       	cpc	r21, r1
    30d6:	09 f4       	brne	.+2      	; 0x30da <__pack_f+0x3e>
    30d8:	8f c0       	rjmp	.+286    	; 0x31f8 <__pack_f+0x15c>
    30da:	02 80       	ldd	r0, Z+2	; 0x02
    30dc:	f3 81       	ldd	r31, Z+3	; 0x03
    30de:	e0 2d       	mov	r30, r0
    30e0:	7f ef       	ldi	r23, 0xFF	; 255
    30e2:	e2 38       	cpi	r30, 0x82	; 130
    30e4:	f7 07       	cpc	r31, r23
    30e6:	0c f0       	brlt	.+2      	; 0x30ea <__pack_f+0x4e>
    30e8:	5a c0       	rjmp	.+180    	; 0x319e <__pack_f+0x102>
    30ea:	c2 e8       	ldi	r28, 0x82	; 130
    30ec:	df ef       	ldi	r29, 0xFF	; 255
    30ee:	ce 1b       	sub	r28, r30
    30f0:	df 0b       	sbc	r29, r31
    30f2:	ca 31       	cpi	r28, 0x1A	; 26
    30f4:	d1 05       	cpc	r29, r1
    30f6:	6c f5       	brge	.+90     	; 0x3152 <__pack_f+0xb6>
    30f8:	79 01       	movw	r14, r18
    30fa:	8a 01       	movw	r16, r20
    30fc:	0c 2e       	mov	r0, r28
    30fe:	04 c0       	rjmp	.+8      	; 0x3108 <__pack_f+0x6c>
    3100:	16 95       	lsr	r17
    3102:	07 95       	ror	r16
    3104:	f7 94       	ror	r15
    3106:	e7 94       	ror	r14
    3108:	0a 94       	dec	r0
    310a:	d2 f7       	brpl	.-12     	; 0x3100 <__pack_f+0x64>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e0       	ldi	r26, 0x00	; 0
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	0c 2e       	mov	r0, r28
    3116:	04 c0       	rjmp	.+8      	; 0x3120 <__pack_f+0x84>
    3118:	88 0f       	add	r24, r24
    311a:	99 1f       	adc	r25, r25
    311c:	aa 1f       	adc	r26, r26
    311e:	bb 1f       	adc	r27, r27
    3120:	0a 94       	dec	r0
    3122:	d2 f7       	brpl	.-12     	; 0x3118 <__pack_f+0x7c>
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	a1 09       	sbc	r26, r1
    3128:	b1 09       	sbc	r27, r1
    312a:	82 23       	and	r24, r18
    312c:	93 23       	and	r25, r19
    312e:	a4 23       	and	r26, r20
    3130:	b5 23       	and	r27, r21
    3132:	21 e0       	ldi	r18, 0x01	; 1
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e0       	ldi	r20, 0x00	; 0
    3138:	50 e0       	ldi	r21, 0x00	; 0
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	a1 05       	cpc	r26, r1
    313e:	b1 05       	cpc	r27, r1
    3140:	19 f4       	brne	.+6      	; 0x3148 <__pack_f+0xac>
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	a9 01       	movw	r20, r18
    3148:	2e 29       	or	r18, r14
    314a:	3f 29       	or	r19, r15
    314c:	40 2b       	or	r20, r16
    314e:	51 2b       	or	r21, r17
    3150:	03 c0       	rjmp	.+6      	; 0x3158 <__pack_f+0xbc>
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	a9 01       	movw	r20, r18
    3158:	da 01       	movw	r26, r20
    315a:	c9 01       	movw	r24, r18
    315c:	8f 77       	andi	r24, 0x7F	; 127
    315e:	90 70       	andi	r25, 0x00	; 0
    3160:	a0 70       	andi	r26, 0x00	; 0
    3162:	b0 70       	andi	r27, 0x00	; 0
    3164:	80 34       	cpi	r24, 0x40	; 64
    3166:	91 05       	cpc	r25, r1
    3168:	a1 05       	cpc	r26, r1
    316a:	b1 05       	cpc	r27, r1
    316c:	39 f4       	brne	.+14     	; 0x317c <__pack_f+0xe0>
    316e:	27 ff       	sbrs	r18, 7
    3170:	09 c0       	rjmp	.+18     	; 0x3184 <__pack_f+0xe8>
    3172:	20 5c       	subi	r18, 0xC0	; 192
    3174:	3f 4f       	sbci	r19, 0xFF	; 255
    3176:	4f 4f       	sbci	r20, 0xFF	; 255
    3178:	5f 4f       	sbci	r21, 0xFF	; 255
    317a:	04 c0       	rjmp	.+8      	; 0x3184 <__pack_f+0xe8>
    317c:	21 5c       	subi	r18, 0xC1	; 193
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	4f 4f       	sbci	r20, 0xFF	; 255
    3182:	5f 4f       	sbci	r21, 0xFF	; 255
    3184:	e1 e0       	ldi	r30, 0x01	; 1
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	20 30       	cpi	r18, 0x00	; 0
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	38 07       	cpc	r19, r24
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	48 07       	cpc	r20, r24
    3192:	80 e4       	ldi	r24, 0x40	; 64
    3194:	58 07       	cpc	r21, r24
    3196:	28 f5       	brcc	.+74     	; 0x31e2 <__pack_f+0x146>
    3198:	e0 e0       	ldi	r30, 0x00	; 0
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	22 c0       	rjmp	.+68     	; 0x31e2 <__pack_f+0x146>
    319e:	e0 38       	cpi	r30, 0x80	; 128
    31a0:	f1 05       	cpc	r31, r1
    31a2:	6c f5       	brge	.+90     	; 0x31fe <__pack_f+0x162>
    31a4:	e1 58       	subi	r30, 0x81	; 129
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	da 01       	movw	r26, r20
    31aa:	c9 01       	movw	r24, r18
    31ac:	8f 77       	andi	r24, 0x7F	; 127
    31ae:	90 70       	andi	r25, 0x00	; 0
    31b0:	a0 70       	andi	r26, 0x00	; 0
    31b2:	b0 70       	andi	r27, 0x00	; 0
    31b4:	80 34       	cpi	r24, 0x40	; 64
    31b6:	91 05       	cpc	r25, r1
    31b8:	a1 05       	cpc	r26, r1
    31ba:	b1 05       	cpc	r27, r1
    31bc:	39 f4       	brne	.+14     	; 0x31cc <__pack_f+0x130>
    31be:	27 ff       	sbrs	r18, 7
    31c0:	09 c0       	rjmp	.+18     	; 0x31d4 <__pack_f+0x138>
    31c2:	20 5c       	subi	r18, 0xC0	; 192
    31c4:	3f 4f       	sbci	r19, 0xFF	; 255
    31c6:	4f 4f       	sbci	r20, 0xFF	; 255
    31c8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ca:	04 c0       	rjmp	.+8      	; 0x31d4 <__pack_f+0x138>
    31cc:	21 5c       	subi	r18, 0xC1	; 193
    31ce:	3f 4f       	sbci	r19, 0xFF	; 255
    31d0:	4f 4f       	sbci	r20, 0xFF	; 255
    31d2:	5f 4f       	sbci	r21, 0xFF	; 255
    31d4:	57 ff       	sbrs	r21, 7
    31d6:	05 c0       	rjmp	.+10     	; 0x31e2 <__pack_f+0x146>
    31d8:	56 95       	lsr	r21
    31da:	47 95       	ror	r20
    31dc:	37 95       	ror	r19
    31de:	27 95       	ror	r18
    31e0:	31 96       	adiw	r30, 0x01	; 1
    31e2:	87 e0       	ldi	r24, 0x07	; 7
    31e4:	56 95       	lsr	r21
    31e6:	47 95       	ror	r20
    31e8:	37 95       	ror	r19
    31ea:	27 95       	ror	r18
    31ec:	8a 95       	dec	r24
    31ee:	d1 f7       	brne	.-12     	; 0x31e4 <__pack_f+0x148>
    31f0:	0b c0       	rjmp	.+22     	; 0x3208 <__pack_f+0x16c>
    31f2:	e0 e0       	ldi	r30, 0x00	; 0
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	05 c0       	rjmp	.+10     	; 0x3202 <__pack_f+0x166>
    31f8:	e0 e0       	ldi	r30, 0x00	; 0
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	05 c0       	rjmp	.+10     	; 0x3208 <__pack_f+0x16c>
    31fe:	ef ef       	ldi	r30, 0xFF	; 255
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	a9 01       	movw	r20, r18
    3208:	8e 2f       	mov	r24, r30
    320a:	87 95       	ror	r24
    320c:	88 27       	eor	r24, r24
    320e:	87 95       	ror	r24
    3210:	94 2f       	mov	r25, r20
    3212:	9f 77       	andi	r25, 0x7F	; 127
    3214:	67 95       	ror	r22
    3216:	66 27       	eor	r22, r22
    3218:	67 95       	ror	r22
    321a:	e6 95       	lsr	r30
    321c:	a9 2f       	mov	r26, r25
    321e:	a8 2b       	or	r26, r24
    3220:	fe 2f       	mov	r31, r30
    3222:	f6 2b       	or	r31, r22
    3224:	62 2f       	mov	r22, r18
    3226:	73 2f       	mov	r23, r19
    3228:	8a 2f       	mov	r24, r26
    322a:	9f 2f       	mov	r25, r31
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	e6 e0       	ldi	r30, 0x06	; 6
    3232:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x18>

00003236 <__unpack_f>:
    3236:	dc 01       	movw	r26, r24
    3238:	fb 01       	movw	r30, r22
    323a:	2c 91       	ld	r18, X
    323c:	11 96       	adiw	r26, 0x01	; 1
    323e:	3c 91       	ld	r19, X
    3240:	11 97       	sbiw	r26, 0x01	; 1
    3242:	12 96       	adiw	r26, 0x02	; 2
    3244:	8c 91       	ld	r24, X
    3246:	12 97       	sbiw	r26, 0x02	; 2
    3248:	48 2f       	mov	r20, r24
    324a:	4f 77       	andi	r20, 0x7F	; 127
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	98 2f       	mov	r25, r24
    3250:	99 1f       	adc	r25, r25
    3252:	99 27       	eor	r25, r25
    3254:	99 1f       	adc	r25, r25
    3256:	13 96       	adiw	r26, 0x03	; 3
    3258:	6c 91       	ld	r22, X
    325a:	13 97       	sbiw	r26, 0x03	; 3
    325c:	86 2f       	mov	r24, r22
    325e:	88 0f       	add	r24, r24
    3260:	89 2b       	or	r24, r25
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	66 1f       	adc	r22, r22
    3266:	66 27       	eor	r22, r22
    3268:	66 1f       	adc	r22, r22
    326a:	61 83       	std	Z+1, r22	; 0x01
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	39 f5       	brne	.+78     	; 0x32be <__unpack_f+0x88>
    3270:	21 15       	cp	r18, r1
    3272:	31 05       	cpc	r19, r1
    3274:	41 05       	cpc	r20, r1
    3276:	51 05       	cpc	r21, r1
    3278:	11 f4       	brne	.+4      	; 0x327e <__unpack_f+0x48>
    327a:	82 e0       	ldi	r24, 0x02	; 2
    327c:	29 c0       	rjmp	.+82     	; 0x32d0 <__unpack_f+0x9a>
    327e:	82 e8       	ldi	r24, 0x82	; 130
    3280:	9f ef       	ldi	r25, 0xFF	; 255
    3282:	93 83       	std	Z+3, r25	; 0x03
    3284:	82 83       	std	Z+2, r24	; 0x02
    3286:	67 e0       	ldi	r22, 0x07	; 7
    3288:	22 0f       	add	r18, r18
    328a:	33 1f       	adc	r19, r19
    328c:	44 1f       	adc	r20, r20
    328e:	55 1f       	adc	r21, r21
    3290:	6a 95       	dec	r22
    3292:	d1 f7       	brne	.-12     	; 0x3288 <__unpack_f+0x52>
    3294:	83 e0       	ldi	r24, 0x03	; 3
    3296:	80 83       	st	Z, r24
    3298:	09 c0       	rjmp	.+18     	; 0x32ac <__unpack_f+0x76>
    329a:	22 0f       	add	r18, r18
    329c:	33 1f       	adc	r19, r19
    329e:	44 1f       	adc	r20, r20
    32a0:	55 1f       	adc	r21, r21
    32a2:	82 81       	ldd	r24, Z+2	; 0x02
    32a4:	93 81       	ldd	r25, Z+3	; 0x03
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	93 83       	std	Z+3, r25	; 0x03
    32aa:	82 83       	std	Z+2, r24	; 0x02
    32ac:	20 30       	cpi	r18, 0x00	; 0
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	38 07       	cpc	r19, r24
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	48 07       	cpc	r20, r24
    32b6:	80 e4       	ldi	r24, 0x40	; 64
    32b8:	58 07       	cpc	r21, r24
    32ba:	78 f3       	brcs	.-34     	; 0x329a <__unpack_f+0x64>
    32bc:	20 c0       	rjmp	.+64     	; 0x32fe <__unpack_f+0xc8>
    32be:	8f 3f       	cpi	r24, 0xFF	; 255
    32c0:	91 05       	cpc	r25, r1
    32c2:	79 f4       	brne	.+30     	; 0x32e2 <__unpack_f+0xac>
    32c4:	21 15       	cp	r18, r1
    32c6:	31 05       	cpc	r19, r1
    32c8:	41 05       	cpc	r20, r1
    32ca:	51 05       	cpc	r21, r1
    32cc:	19 f4       	brne	.+6      	; 0x32d4 <__unpack_f+0x9e>
    32ce:	84 e0       	ldi	r24, 0x04	; 4
    32d0:	80 83       	st	Z, r24
    32d2:	08 95       	ret
    32d4:	44 ff       	sbrs	r20, 4
    32d6:	03 c0       	rjmp	.+6      	; 0x32de <__unpack_f+0xa8>
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	80 83       	st	Z, r24
    32dc:	10 c0       	rjmp	.+32     	; 0x32fe <__unpack_f+0xc8>
    32de:	10 82       	st	Z, r1
    32e0:	0e c0       	rjmp	.+28     	; 0x32fe <__unpack_f+0xc8>
    32e2:	8f 57       	subi	r24, 0x7F	; 127
    32e4:	90 40       	sbci	r25, 0x00	; 0
    32e6:	93 83       	std	Z+3, r25	; 0x03
    32e8:	82 83       	std	Z+2, r24	; 0x02
    32ea:	83 e0       	ldi	r24, 0x03	; 3
    32ec:	80 83       	st	Z, r24
    32ee:	87 e0       	ldi	r24, 0x07	; 7
    32f0:	22 0f       	add	r18, r18
    32f2:	33 1f       	adc	r19, r19
    32f4:	44 1f       	adc	r20, r20
    32f6:	55 1f       	adc	r21, r21
    32f8:	8a 95       	dec	r24
    32fa:	d1 f7       	brne	.-12     	; 0x32f0 <__unpack_f+0xba>
    32fc:	50 64       	ori	r21, 0x40	; 64
    32fe:	24 83       	std	Z+4, r18	; 0x04
    3300:	35 83       	std	Z+5, r19	; 0x05
    3302:	46 83       	std	Z+6, r20	; 0x06
    3304:	57 83       	std	Z+7, r21	; 0x07
    3306:	08 95       	ret

00003308 <__fpcmp_parts_f>:
    3308:	fc 01       	movw	r30, r24
    330a:	db 01       	movw	r26, r22
    330c:	90 81       	ld	r25, Z
    330e:	92 30       	cpi	r25, 0x02	; 2
    3310:	08 f4       	brcc	.+2      	; 0x3314 <__fpcmp_parts_f+0xc>
    3312:	49 c0       	rjmp	.+146    	; 0x33a6 <__fpcmp_parts_f+0x9e>
    3314:	8c 91       	ld	r24, X
    3316:	82 30       	cpi	r24, 0x02	; 2
    3318:	08 f4       	brcc	.+2      	; 0x331c <__fpcmp_parts_f+0x14>
    331a:	45 c0       	rjmp	.+138    	; 0x33a6 <__fpcmp_parts_f+0x9e>
    331c:	94 30       	cpi	r25, 0x04	; 4
    331e:	51 f4       	brne	.+20     	; 0x3334 <__fpcmp_parts_f+0x2c>
    3320:	61 81       	ldd	r22, Z+1	; 0x01
    3322:	84 30       	cpi	r24, 0x04	; 4
    3324:	b1 f5       	brne	.+108    	; 0x3392 <__fpcmp_parts_f+0x8a>
    3326:	11 96       	adiw	r26, 0x01	; 1
    3328:	2c 91       	ld	r18, X
    332a:	11 97       	sbiw	r26, 0x01	; 1
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	26 1b       	sub	r18, r22
    3330:	31 09       	sbc	r19, r1
    3332:	41 c0       	rjmp	.+130    	; 0x33b6 <__fpcmp_parts_f+0xae>
    3334:	84 30       	cpi	r24, 0x04	; 4
    3336:	21 f0       	breq	.+8      	; 0x3340 <__fpcmp_parts_f+0x38>
    3338:	92 30       	cpi	r25, 0x02	; 2
    333a:	41 f4       	brne	.+16     	; 0x334c <__fpcmp_parts_f+0x44>
    333c:	82 30       	cpi	r24, 0x02	; 2
    333e:	b1 f1       	breq	.+108    	; 0x33ac <__fpcmp_parts_f+0xa4>
    3340:	11 96       	adiw	r26, 0x01	; 1
    3342:	8c 91       	ld	r24, X
    3344:	11 97       	sbiw	r26, 0x01	; 1
    3346:	88 23       	and	r24, r24
    3348:	a1 f1       	breq	.+104    	; 0x33b2 <__fpcmp_parts_f+0xaa>
    334a:	2d c0       	rjmp	.+90     	; 0x33a6 <__fpcmp_parts_f+0x9e>
    334c:	61 81       	ldd	r22, Z+1	; 0x01
    334e:	82 30       	cpi	r24, 0x02	; 2
    3350:	01 f1       	breq	.+64     	; 0x3392 <__fpcmp_parts_f+0x8a>
    3352:	11 96       	adiw	r26, 0x01	; 1
    3354:	8c 91       	ld	r24, X
    3356:	11 97       	sbiw	r26, 0x01	; 1
    3358:	68 17       	cp	r22, r24
    335a:	d9 f4       	brne	.+54     	; 0x3392 <__fpcmp_parts_f+0x8a>
    335c:	22 81       	ldd	r18, Z+2	; 0x02
    335e:	33 81       	ldd	r19, Z+3	; 0x03
    3360:	12 96       	adiw	r26, 0x02	; 2
    3362:	8d 91       	ld	r24, X+
    3364:	9c 91       	ld	r25, X
    3366:	13 97       	sbiw	r26, 0x03	; 3
    3368:	82 17       	cp	r24, r18
    336a:	93 07       	cpc	r25, r19
    336c:	94 f0       	brlt	.+36     	; 0x3392 <__fpcmp_parts_f+0x8a>
    336e:	28 17       	cp	r18, r24
    3370:	39 07       	cpc	r19, r25
    3372:	bc f0       	brlt	.+46     	; 0x33a2 <__fpcmp_parts_f+0x9a>
    3374:	24 81       	ldd	r18, Z+4	; 0x04
    3376:	35 81       	ldd	r19, Z+5	; 0x05
    3378:	46 81       	ldd	r20, Z+6	; 0x06
    337a:	57 81       	ldd	r21, Z+7	; 0x07
    337c:	14 96       	adiw	r26, 0x04	; 4
    337e:	8d 91       	ld	r24, X+
    3380:	9d 91       	ld	r25, X+
    3382:	0d 90       	ld	r0, X+
    3384:	bc 91       	ld	r27, X
    3386:	a0 2d       	mov	r26, r0
    3388:	82 17       	cp	r24, r18
    338a:	93 07       	cpc	r25, r19
    338c:	a4 07       	cpc	r26, r20
    338e:	b5 07       	cpc	r27, r21
    3390:	18 f4       	brcc	.+6      	; 0x3398 <__fpcmp_parts_f+0x90>
    3392:	66 23       	and	r22, r22
    3394:	41 f0       	breq	.+16     	; 0x33a6 <__fpcmp_parts_f+0x9e>
    3396:	0d c0       	rjmp	.+26     	; 0x33b2 <__fpcmp_parts_f+0xaa>
    3398:	28 17       	cp	r18, r24
    339a:	39 07       	cpc	r19, r25
    339c:	4a 07       	cpc	r20, r26
    339e:	5b 07       	cpc	r21, r27
    33a0:	28 f4       	brcc	.+10     	; 0x33ac <__fpcmp_parts_f+0xa4>
    33a2:	66 23       	and	r22, r22
    33a4:	31 f0       	breq	.+12     	; 0x33b2 <__fpcmp_parts_f+0xaa>
    33a6:	21 e0       	ldi	r18, 0x01	; 1
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	05 c0       	rjmp	.+10     	; 0x33b6 <__fpcmp_parts_f+0xae>
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <__fpcmp_parts_f+0xae>
    33b2:	2f ef       	ldi	r18, 0xFF	; 255
    33b4:	3f ef       	ldi	r19, 0xFF	; 255
    33b6:	c9 01       	movw	r24, r18
    33b8:	08 95       	ret

000033ba <__udivmodhi4>:
    33ba:	aa 1b       	sub	r26, r26
    33bc:	bb 1b       	sub	r27, r27
    33be:	51 e1       	ldi	r21, 0x11	; 17
    33c0:	07 c0       	rjmp	.+14     	; 0x33d0 <__udivmodhi4_ep>

000033c2 <__udivmodhi4_loop>:
    33c2:	aa 1f       	adc	r26, r26
    33c4:	bb 1f       	adc	r27, r27
    33c6:	a6 17       	cp	r26, r22
    33c8:	b7 07       	cpc	r27, r23
    33ca:	10 f0       	brcs	.+4      	; 0x33d0 <__udivmodhi4_ep>
    33cc:	a6 1b       	sub	r26, r22
    33ce:	b7 0b       	sbc	r27, r23

000033d0 <__udivmodhi4_ep>:
    33d0:	88 1f       	adc	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	5a 95       	dec	r21
    33d6:	a9 f7       	brne	.-22     	; 0x33c2 <__udivmodhi4_loop>
    33d8:	80 95       	com	r24
    33da:	90 95       	com	r25
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	08 95       	ret

000033e2 <__divmodhi4>:
    33e2:	97 fb       	bst	r25, 7
    33e4:	09 2e       	mov	r0, r25
    33e6:	07 26       	eor	r0, r23
    33e8:	0a d0       	rcall	.+20     	; 0x33fe <__divmodhi4_neg1>
    33ea:	77 fd       	sbrc	r23, 7
    33ec:	04 d0       	rcall	.+8      	; 0x33f6 <__divmodhi4_neg2>
    33ee:	e5 df       	rcall	.-54     	; 0x33ba <__udivmodhi4>
    33f0:	06 d0       	rcall	.+12     	; 0x33fe <__divmodhi4_neg1>
    33f2:	00 20       	and	r0, r0
    33f4:	1a f4       	brpl	.+6      	; 0x33fc <__divmodhi4_exit>

000033f6 <__divmodhi4_neg2>:
    33f6:	70 95       	com	r23
    33f8:	61 95       	neg	r22
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255

000033fc <__divmodhi4_exit>:
    33fc:	08 95       	ret

000033fe <__divmodhi4_neg1>:
    33fe:	f6 f7       	brtc	.-4      	; 0x33fc <__divmodhi4_exit>
    3400:	90 95       	com	r25
    3402:	81 95       	neg	r24
    3404:	9f 4f       	sbci	r25, 0xFF	; 255
    3406:	08 95       	ret

00003408 <__divmodsi4>:
    3408:	97 fb       	bst	r25, 7
    340a:	09 2e       	mov	r0, r25
    340c:	05 26       	eor	r0, r21
    340e:	0e d0       	rcall	.+28     	; 0x342c <__divmodsi4_neg1>
    3410:	57 fd       	sbrc	r21, 7
    3412:	04 d0       	rcall	.+8      	; 0x341c <__divmodsi4_neg2>
    3414:	14 d0       	rcall	.+40     	; 0x343e <__udivmodsi4>
    3416:	0a d0       	rcall	.+20     	; 0x342c <__divmodsi4_neg1>
    3418:	00 1c       	adc	r0, r0
    341a:	38 f4       	brcc	.+14     	; 0x342a <__divmodsi4_exit>

0000341c <__divmodsi4_neg2>:
    341c:	50 95       	com	r21
    341e:	40 95       	com	r20
    3420:	30 95       	com	r19
    3422:	21 95       	neg	r18
    3424:	3f 4f       	sbci	r19, 0xFF	; 255
    3426:	4f 4f       	sbci	r20, 0xFF	; 255
    3428:	5f 4f       	sbci	r21, 0xFF	; 255

0000342a <__divmodsi4_exit>:
    342a:	08 95       	ret

0000342c <__divmodsi4_neg1>:
    342c:	f6 f7       	brtc	.-4      	; 0x342a <__divmodsi4_exit>
    342e:	90 95       	com	r25
    3430:	80 95       	com	r24
    3432:	70 95       	com	r23
    3434:	61 95       	neg	r22
    3436:	7f 4f       	sbci	r23, 0xFF	; 255
    3438:	8f 4f       	sbci	r24, 0xFF	; 255
    343a:	9f 4f       	sbci	r25, 0xFF	; 255
    343c:	08 95       	ret

0000343e <__udivmodsi4>:
    343e:	a1 e2       	ldi	r26, 0x21	; 33
    3440:	1a 2e       	mov	r1, r26
    3442:	aa 1b       	sub	r26, r26
    3444:	bb 1b       	sub	r27, r27
    3446:	fd 01       	movw	r30, r26
    3448:	0d c0       	rjmp	.+26     	; 0x3464 <__udivmodsi4_ep>

0000344a <__udivmodsi4_loop>:
    344a:	aa 1f       	adc	r26, r26
    344c:	bb 1f       	adc	r27, r27
    344e:	ee 1f       	adc	r30, r30
    3450:	ff 1f       	adc	r31, r31
    3452:	a2 17       	cp	r26, r18
    3454:	b3 07       	cpc	r27, r19
    3456:	e4 07       	cpc	r30, r20
    3458:	f5 07       	cpc	r31, r21
    345a:	20 f0       	brcs	.+8      	; 0x3464 <__udivmodsi4_ep>
    345c:	a2 1b       	sub	r26, r18
    345e:	b3 0b       	sbc	r27, r19
    3460:	e4 0b       	sbc	r30, r20
    3462:	f5 0b       	sbc	r31, r21

00003464 <__udivmodsi4_ep>:
    3464:	66 1f       	adc	r22, r22
    3466:	77 1f       	adc	r23, r23
    3468:	88 1f       	adc	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	1a 94       	dec	r1
    346e:	69 f7       	brne	.-38     	; 0x344a <__udivmodsi4_loop>
    3470:	60 95       	com	r22
    3472:	70 95       	com	r23
    3474:	80 95       	com	r24
    3476:	90 95       	com	r25
    3478:	9b 01       	movw	r18, r22
    347a:	ac 01       	movw	r20, r24
    347c:	bd 01       	movw	r22, r26
    347e:	cf 01       	movw	r24, r30
    3480:	08 95       	ret

00003482 <__prologue_saves__>:
    3482:	2f 92       	push	r2
    3484:	3f 92       	push	r3
    3486:	4f 92       	push	r4
    3488:	5f 92       	push	r5
    348a:	6f 92       	push	r6
    348c:	7f 92       	push	r7
    348e:	8f 92       	push	r8
    3490:	9f 92       	push	r9
    3492:	af 92       	push	r10
    3494:	bf 92       	push	r11
    3496:	cf 92       	push	r12
    3498:	df 92       	push	r13
    349a:	ef 92       	push	r14
    349c:	ff 92       	push	r15
    349e:	0f 93       	push	r16
    34a0:	1f 93       	push	r17
    34a2:	cf 93       	push	r28
    34a4:	df 93       	push	r29
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	ca 1b       	sub	r28, r26
    34ac:	db 0b       	sbc	r29, r27
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	09 94       	ijmp

000034ba <__epilogue_restores__>:
    34ba:	2a 88       	ldd	r2, Y+18	; 0x12
    34bc:	39 88       	ldd	r3, Y+17	; 0x11
    34be:	48 88       	ldd	r4, Y+16	; 0x10
    34c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    34c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    34c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    34c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    34c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    34ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    34cc:	b9 84       	ldd	r11, Y+9	; 0x09
    34ce:	c8 84       	ldd	r12, Y+8	; 0x08
    34d0:	df 80       	ldd	r13, Y+7	; 0x07
    34d2:	ee 80       	ldd	r14, Y+6	; 0x06
    34d4:	fd 80       	ldd	r15, Y+5	; 0x05
    34d6:	0c 81       	ldd	r16, Y+4	; 0x04
    34d8:	1b 81       	ldd	r17, Y+3	; 0x03
    34da:	aa 81       	ldd	r26, Y+2	; 0x02
    34dc:	b9 81       	ldd	r27, Y+1	; 0x01
    34de:	ce 0f       	add	r28, r30
    34e0:	d1 1d       	adc	r29, r1
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	ed 01       	movw	r28, r26
    34ee:	08 95       	ret

000034f0 <ceil>:
    34f0:	3b d0       	rcall	.+118    	; 0x3568 <__fp_trunc>
    34f2:	80 f0       	brcs	.+32     	; 0x3514 <ceil+0x24>
    34f4:	9f 37       	cpi	r25, 0x7F	; 127
    34f6:	40 f4       	brcc	.+16     	; 0x3508 <ceil+0x18>
    34f8:	91 11       	cpse	r25, r1
    34fa:	0e f4       	brtc	.+2      	; 0x34fe <ceil+0xe>
    34fc:	4d c0       	rjmp	.+154    	; 0x3598 <__fp_szero>
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	80 e8       	ldi	r24, 0x80	; 128
    3504:	9f e3       	ldi	r25, 0x3F	; 63
    3506:	08 95       	ret
    3508:	26 f0       	brts	.+8      	; 0x3512 <ceil+0x22>
    350a:	1b 16       	cp	r1, r27
    350c:	61 1d       	adc	r22, r1
    350e:	71 1d       	adc	r23, r1
    3510:	81 1d       	adc	r24, r1
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <__fp_mintl>
    3514:	1b c0       	rjmp	.+54     	; 0x354c <__fp_mpack>

00003516 <__fp_mintl>:
    3516:	88 23       	and	r24, r24
    3518:	71 f4       	brne	.+28     	; 0x3536 <__fp_mintl+0x20>
    351a:	77 23       	and	r23, r23
    351c:	21 f0       	breq	.+8      	; 0x3526 <__fp_mintl+0x10>
    351e:	98 50       	subi	r25, 0x08	; 8
    3520:	87 2b       	or	r24, r23
    3522:	76 2f       	mov	r23, r22
    3524:	07 c0       	rjmp	.+14     	; 0x3534 <__fp_mintl+0x1e>
    3526:	66 23       	and	r22, r22
    3528:	11 f4       	brne	.+4      	; 0x352e <__fp_mintl+0x18>
    352a:	99 27       	eor	r25, r25
    352c:	0d c0       	rjmp	.+26     	; 0x3548 <__fp_mintl+0x32>
    352e:	90 51       	subi	r25, 0x10	; 16
    3530:	86 2b       	or	r24, r22
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	2a f0       	brmi	.+10     	; 0x3542 <__fp_mintl+0x2c>
    3538:	9a 95       	dec	r25
    353a:	66 0f       	add	r22, r22
    353c:	77 1f       	adc	r23, r23
    353e:	88 1f       	adc	r24, r24
    3540:	da f7       	brpl	.-10     	; 0x3538 <__fp_mintl+0x22>
    3542:	88 0f       	add	r24, r24
    3544:	96 95       	lsr	r25
    3546:	87 95       	ror	r24
    3548:	97 f9       	bld	r25, 7
    354a:	08 95       	ret

0000354c <__fp_mpack>:
    354c:	9f 3f       	cpi	r25, 0xFF	; 255
    354e:	31 f0       	breq	.+12     	; 0x355c <__fp_mpack_finite+0xc>

00003550 <__fp_mpack_finite>:
    3550:	91 50       	subi	r25, 0x01	; 1
    3552:	20 f4       	brcc	.+8      	; 0x355c <__fp_mpack_finite+0xc>
    3554:	87 95       	ror	r24
    3556:	77 95       	ror	r23
    3558:	67 95       	ror	r22
    355a:	b7 95       	ror	r27
    355c:	88 0f       	add	r24, r24
    355e:	91 1d       	adc	r25, r1
    3560:	96 95       	lsr	r25
    3562:	87 95       	ror	r24
    3564:	97 f9       	bld	r25, 7
    3566:	08 95       	ret

00003568 <__fp_trunc>:
    3568:	25 d0       	rcall	.+74     	; 0x35b4 <__fp_splitA>
    356a:	a0 f0       	brcs	.+40     	; 0x3594 <__fp_trunc+0x2c>
    356c:	be e7       	ldi	r27, 0x7E	; 126
    356e:	b9 17       	cp	r27, r25
    3570:	88 f4       	brcc	.+34     	; 0x3594 <__fp_trunc+0x2c>
    3572:	bb 27       	eor	r27, r27
    3574:	9f 38       	cpi	r25, 0x8F	; 143
    3576:	60 f4       	brcc	.+24     	; 0x3590 <__fp_trunc+0x28>
    3578:	16 16       	cp	r1, r22
    357a:	b1 1d       	adc	r27, r1
    357c:	67 2f       	mov	r22, r23
    357e:	78 2f       	mov	r23, r24
    3580:	88 27       	eor	r24, r24
    3582:	98 5f       	subi	r25, 0xF8	; 248
    3584:	f7 cf       	rjmp	.-18     	; 0x3574 <__fp_trunc+0xc>
    3586:	86 95       	lsr	r24
    3588:	77 95       	ror	r23
    358a:	67 95       	ror	r22
    358c:	b1 1d       	adc	r27, r1
    358e:	93 95       	inc	r25
    3590:	96 39       	cpi	r25, 0x96	; 150
    3592:	c8 f3       	brcs	.-14     	; 0x3586 <__fp_trunc+0x1e>
    3594:	08 95       	ret

00003596 <__fp_zero>:
    3596:	e8 94       	clt

00003598 <__fp_szero>:
    3598:	bb 27       	eor	r27, r27
    359a:	66 27       	eor	r22, r22
    359c:	77 27       	eor	r23, r23
    359e:	cb 01       	movw	r24, r22
    35a0:	97 f9       	bld	r25, 7
    35a2:	08 95       	ret

000035a4 <__fp_split3>:
    35a4:	57 fd       	sbrc	r21, 7
    35a6:	90 58       	subi	r25, 0x80	; 128
    35a8:	44 0f       	add	r20, r20
    35aa:	55 1f       	adc	r21, r21
    35ac:	59 f0       	breq	.+22     	; 0x35c4 <__fp_splitA+0x10>
    35ae:	5f 3f       	cpi	r21, 0xFF	; 255
    35b0:	71 f0       	breq	.+28     	; 0x35ce <__fp_splitA+0x1a>
    35b2:	47 95       	ror	r20

000035b4 <__fp_splitA>:
    35b4:	88 0f       	add	r24, r24
    35b6:	97 fb       	bst	r25, 7
    35b8:	99 1f       	adc	r25, r25
    35ba:	61 f0       	breq	.+24     	; 0x35d4 <__fp_splitA+0x20>
    35bc:	9f 3f       	cpi	r25, 0xFF	; 255
    35be:	79 f0       	breq	.+30     	; 0x35de <__fp_splitA+0x2a>
    35c0:	87 95       	ror	r24
    35c2:	08 95       	ret
    35c4:	12 16       	cp	r1, r18
    35c6:	13 06       	cpc	r1, r19
    35c8:	14 06       	cpc	r1, r20
    35ca:	55 1f       	adc	r21, r21
    35cc:	f2 cf       	rjmp	.-28     	; 0x35b2 <__fp_split3+0xe>
    35ce:	46 95       	lsr	r20
    35d0:	f1 df       	rcall	.-30     	; 0x35b4 <__fp_splitA>
    35d2:	08 c0       	rjmp	.+16     	; 0x35e4 <__fp_splitA+0x30>
    35d4:	16 16       	cp	r1, r22
    35d6:	17 06       	cpc	r1, r23
    35d8:	18 06       	cpc	r1, r24
    35da:	99 1f       	adc	r25, r25
    35dc:	f1 cf       	rjmp	.-30     	; 0x35c0 <__fp_splitA+0xc>
    35de:	86 95       	lsr	r24
    35e0:	71 05       	cpc	r23, r1
    35e2:	61 05       	cpc	r22, r1
    35e4:	08 94       	sec
    35e6:	08 95       	ret

000035e8 <_exit>:
    35e8:	f8 94       	cli

000035ea <__stop_program>:
    35ea:	ff cf       	rjmp	.-2      	; 0x35ea <__stop_program>
