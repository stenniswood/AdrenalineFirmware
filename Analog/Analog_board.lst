
Analog_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  00003722  000037b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003722  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e0  00800218  00800218  000038ce  2**0
                  ALLOC
  3 .stab         00000de0  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e0  00000000  00000000  00004955  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001381  00000000  00000000  00004d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000075b6  00000000  00000000  000060b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e2f  00000000  00000000  0000d66c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b35  00000000  00000000  0001049b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cd0  00000000  00000000  00014fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000219a  00000000  00000000  00015ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d21  00000000  00000000  00017e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000974  00000000  00000000  0001ab5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002c8  00000000  00000000  0001b4cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_23>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__vector_26>
      6c:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e2       	ldi	r30, 0x22	; 34
      a0:	f7 e3       	ldi	r31, 0x37	; 55
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a8 31       	cpi	r26, 0x18	; 24
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a8 e1       	ldi	r26, 0x18	; 24
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a8 3f       	cpi	r26, 0xF8	; 248
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 b9 00 	call	0x172	; 0x172 <main>
      c2:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z16can_send_configsv>:
// 		Maybe a sign error somewhere top nibble is taken as signed char.
//		Or the receiver buffer wasn't getting serviced properly.

void can_send_configs()
{
	if (okay_to_read_cal)	read_configuration();
      ca:	80 91 18 02 	lds	r24, 0x0218
      ce:	88 23       	and	r24, r24
      d0:	11 f0       	breq	.+4      	; 0xd6 <_Z16can_send_configsv+0xc>
      d2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_Z18read_configurationv>
    msg1.id 	 = create_CAN_eid( 0x123, MyInstance );
      d6:	83 e2       	ldi	r24, 0x23	; 35
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	60 91 6f 03 	lds	r22, 0x036F
      de:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
      e2:	60 93 34 03 	sts	0x0334, r22
      e6:	70 93 35 03 	sts	0x0335, r23
      ea:	80 93 36 03 	sts	0x0336, r24
      ee:	90 93 37 03 	sts	0x0337, r25
    msg1.data[0] = config_byte_1;
      f2:	80 91 ee 03 	lds	r24, 0x03EE
      f6:	80 93 39 03 	sts	0x0339, r24
    msg1.data[1] = config_byte_2;
      fa:	80 91 ef 03 	lds	r24, 0x03EF
      fe:	80 93 3a 03 	sts	0x033A, r24
    msg1.data[2] = config_byte_3;
     102:	80 91 f0 03 	lds	r24, 0x03F0
     106:	80 93 3b 03 	sts	0x033B, r24
    msg1.data[3] = config_byte_4;    
     10a:	80 91 f1 03 	lds	r24, 0x03F1
     10e:	80 93 3c 03 	sts	0x033C, r24
    msg1.data[4] = sys_config_byte; 
     112:	80 91 f2 03 	lds	r24, 0x03F2
     116:	80 93 3d 03 	sts	0x033D, r24
    msg1.header.DLC = 5;
     11a:	80 91 38 03 	lds	r24, 0x0338
     11e:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     120:	8a 60       	ori	r24, 0x0A	; 10
     122:	80 93 38 03 	sts	0x0338, r24
    can_send_msg( 0, &msg1 );
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	64 e3       	ldi	r22, 0x34	; 52
     12a:	73 e0       	ldi	r23, 0x03	; 3
     12c:	0e 94 75 07 	call	0xeea	; 0xeea <_Z12can_send_msghP4sCAN>
}
     130:	08 95       	ret

00000132 <_Z4initv>:

void init()
{
 	cli();
     132:	f8 94       	cli
    chip_init  ( );	    			/* Chip initialization			*/
     134:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_Z9chip_initv>
	init_leds  ( );
     138:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_Z9init_ledsv>
	delay	   (1000000);			// ~ 2 sec
     13c:	60 e4       	ldi	r22, 0x40	; 64
     13e:	72 e4       	ldi	r23, 0x42	; 66
     140:	8f e0       	ldi	r24, 0x0F	; 15
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z5delayl>
	read_configuration   ( );
     148:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_Z18read_configurationv>
	can_init   (CAN_250K_BAUD);		/* Enables Mob0 for Reception!	*/	
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	0e 94 c2 07 	call	0xf84	; 0xf84 <_Z8can_inith>
	
//	config_init		 ( );
	can_instance_init( );
     152:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z17can_instance_initv>
	an_init    		 ( );						/* Analog SPI module init 		*/
     156:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z7an_initv>

    set_rx_callback			( can_file_message );
     15a:	8a ec       	ldi	r24, 0xCA	; 202
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 9b 04 	call	0x936	; 0x936 <_Z15set_rx_callbackPFvP4sCANE>
	set_configure_callback	( config_change    );
     162:	86 e5       	ldi	r24, 0x56	; 86
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_Z22set_configure_callbackPFvhE>
	sei		   ( );
     16a:	78 94       	sei

	OS_InitTask();	
     16c:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z11OS_InitTaskv>
}
     170:	08 95       	ret

00000172 <main>:
	Mask of Active signals - 8 bytes (4 x 16 bit mask Analog Chip 1,2,3,4)
	Right now read all and send all!
*/
int main(void)
{	
	init();
     172:	0e 94 99 00 	call	0x132	; 0x132 <_Z4initv>

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
     176:	80 91 f2 03 	lds	r24, 0x03F2
    while (1)
    {
		/* OS_Dispatch reads ALL ACTIVE ANALOG SIGNALS.
			sends CAN report msgs periodically */		
		if (isSysConfigured(CAN_NEW_BOARD))		
     17a:	80 fd       	sbrc	r24, 0
     17c:	07 c0       	rjmp	.+14     	; 0x18c <main+0x1a>
			led_on(4);
		else 
			led_off(4);
     17e:	84 e0       	ldi	r24, 0x04	; 4
     180:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_Z7led_offh>
     184:	80 91 f2 03 	lds	r24, 0x03F2
	init();
    while (1)
    {
		/* OS_Dispatch reads ALL ACTIVE ANALOG SIGNALS.
			sends CAN report msgs periodically */		
		if (isSysConfigured(CAN_NEW_BOARD))		
     188:	80 ff       	sbrs	r24, 0
     18a:	f9 cf       	rjmp	.-14     	; 0x17e <main+0xc>
			led_on(4);
     18c:	84 e0       	ldi	r24, 0x04	; 4
     18e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z6led_onh>
     192:	f1 cf       	rjmp	.-30     	; 0x176 <main+0x4>

00000194 <_Z16can_file_messageP4sCAN>:


void can_file_message( sCAN* mMsg )
{
	// Analog board is mostly a transmitter!
}
     194:	08 95       	ret

00000196 <_Z19can_prep_analog_msgP4sCANjh>:
/* Package up the Analog readings into CAN message 
	1 Channel per CAN message.
	Optionally may have the derivative of the channel.
*/
void can_prep_analog_msg( sCAN* mMsg, uint16_t mReading, byte mMeasurementIndex )
{
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	df 93       	push	r29
     1a0:	cf 93       	push	r28
     1a2:	0f 92       	push	r0
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	7c 01       	movw	r14, r24
     1aa:	16 2f       	mov	r17, r22
     1ac:	07 2f       	mov	r16, r23
    mMsg->id 	  = create_CAN_eid(ID_ANALOG_MEASUREMENT, MyInstance); 
     1ae:	80 ea       	ldi	r24, 0xA0	; 160
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	60 91 6f 03 	lds	r22, 0x036F
     1b6:	49 83       	std	Y+1, r20	; 0x01
     1b8:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
     1bc:	dc 01       	movw	r26, r24
     1be:	cb 01       	movw	r24, r22
     1c0:	f7 01       	movw	r30, r14
     1c2:	80 83       	st	Z, r24
     1c4:	91 83       	std	Z+1, r25	; 0x01
     1c6:	a2 83       	std	Z+2, r26	; 0x02
     1c8:	b3 83       	std	Z+3, r27	; 0x03
    mMsg->data[0] = mMeasurementIndex;
     1ca:	49 81       	ldd	r20, Y+1	; 0x01
     1cc:	45 83       	std	Z+5, r20	; 0x05
    mMsg->data[1] = hi(mReading);
     1ce:	06 83       	std	Z+6, r16	; 0x06
    mMsg->data[2] = lo(mReading);     
     1d0:	17 83       	std	Z+7, r17	; 0x07
    mMsg->header.DLC = 3;
     1d2:	84 81       	ldd	r24, Z+4	; 0x04
     1d4:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     1d6:	86 60       	ori	r24, 0x06	; 6
     1d8:	84 83       	std	Z+4, r24	; 0x04
    //mMsg->data[0] = mCounter;   
}
     1da:	0f 90       	pop	r0
     1dc:	cf 91       	pop	r28
     1de:	df 91       	pop	r29
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	08 95       	ret

000001ea <_Z30can_prep_analog_derivative_msgP4sCANhjj>:

void can_prep_analog_derivative_msg( sCAN* mMsg, 
							byte     mMeasurementIndex,
							uint16_t mReading, 
							uint16_t mReadingPrev )
{
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	ec 01       	movw	r28, r24
     1fa:	d6 2e       	mov	r13, r22
     1fc:	8a 01       	movw	r16, r20
     1fe:	79 01       	movw	r14, r18
    mMsg->id 	  = create_CAN_eid(ID_ANALOG_MEASUREMENT, MyInstance); 
     200:	80 ea       	ldi	r24, 0xA0	; 160
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	60 91 6f 03 	lds	r22, 0x036F
     208:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
     20c:	68 83       	st	Y, r22
     20e:	79 83       	std	Y+1, r23	; 0x01
     210:	8a 83       	std	Y+2, r24	; 0x02
     212:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = mMeasurementIndex;
     214:	dd 82       	std	Y+5, r13	; 0x05
    mMsg->data[1] = hi(mReading  );
     216:	1e 83       	std	Y+6, r17	; 0x06
    mMsg->data[2] = lo(mReading  );     
     218:	0f 83       	std	Y+7, r16	; 0x07
    short diff = (mReading - mReadingPrev);
     21a:	0e 19       	sub	r16, r14
     21c:	1f 09       	sbc	r17, r15
    mMsg->data[3] = hi(diff);   
     21e:	18 87       	std	Y+8, r17	; 0x08
    mMsg->data[4] = lo(diff);   
     220:	09 87       	std	Y+9, r16	; 0x09
    mMsg->header.DLC = 5;
     222:	8c 81       	ldd	r24, Y+4	; 0x04
     224:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     226:	8a 60       	ori	r24, 0x0A	; 10
     228:	8c 83       	std	Y+4, r24	; 0x04
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	08 95       	ret

0000023a <_Z20can_send_analog_msgsv>:
	64 channels * 2 bytes package = 128 bytes 
	/ 8 = 16 CAN msgs minimum.

*/
void can_send_analog_msgs( )
{
     23a:	2f 92       	push	r2
     23c:	3f 92       	push	r3
     23e:	4f 92       	push	r4
     240:	5f 92       	push	r5
     242:	6f 92       	push	r6
     244:	7f 92       	push	r7
     246:	9f 92       	push	r9
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	cf 92       	push	r12
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	63 e0       	ldi	r22, 0x03	; 3
     25e:	66 2e       	mov	r6, r22
     260:	71 2c       	mov	r7, r1
	byte configd;
	byte test;
	for (int chip=0; chip<4; chip++)
     262:	aa 24       	eor	r10, r10
     264:	bb 24       	eor	r11, r11
	{
		configd = isConfigured( (1<<chip) );
     266:	51 e0       	ldi	r21, 0x01	; 1
     268:	45 2e       	mov	r4, r21
     26a:	51 2c       	mov	r5, r1
		if ( configd ) 
     26c:	40 e1       	ldi	r20, 0x10	; 16
     26e:	24 2e       	mov	r2, r20
     270:	31 2c       	mov	r3, r1
{
	byte configd;
	byte test;
	for (int chip=0; chip<4; chip++)
	{
		configd = isConfigured( (1<<chip) );
     272:	c2 01       	movw	r24, r4
     274:	0a 2c       	mov	r0, r10
     276:	02 c0       	rjmp	.+4      	; 0x27c <_Z20can_send_analog_msgsv+0x42>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	0a 94       	dec	r0
     27e:	e2 f7       	brpl	.-8      	; 0x278 <_Z20can_send_analog_msgsv+0x3e>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     280:	20 91 ee 03 	lds	r18, 0x03EE
     284:	28 23       	and	r18, r24
		if ( configd ) 
     286:	09 f4       	brne	.+2      	; 0x28a <_Z20can_send_analog_msgsv+0x50>
     288:	4c c0       	rjmp	.+152    	; 0x322 <_Z20can_send_analog_msgsv+0xe8>
     28a:	c1 01       	movw	r24, r2
     28c:	0a 2c       	mov	r0, r10
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_Z20can_send_analog_msgsv+0x5a>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	0a 94       	dec	r0
     296:	e2 f7       	brpl	.-8      	; 0x290 <_Z20can_send_analog_msgsv+0x56>
     298:	98 2e       	mov	r9, r24
/* 4 Chips;  16 channels each.  = 64 channels total for Analog board. 
	64 channels * 2 bytes package = 128 bytes 
	/ 8 = 16 CAN msgs minimum.

*/
void can_send_analog_msgs( )
     29a:	c3 01       	movw	r24, r6
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	8c 01       	movw	r16, r24
     2a2:	0e 5c       	subi	r16, 0xCE	; 206
     2a4:	1d 4f       	sbci	r17, 0xFD	; 253
     2a6:	22 eb       	ldi	r18, 0xB2	; 178
     2a8:	e2 2e       	mov	r14, r18
     2aa:	22 e0       	ldi	r18, 0x02	; 2
     2ac:	f2 2e       	mov	r15, r18
     2ae:	e8 0e       	add	r14, r24
     2b0:	f9 1e       	adc	r15, r25
     2b2:	68 01       	movw	r12, r16
     2b4:	c3 e0       	ldi	r28, 0x03	; 3
     2b6:	d0 e0       	ldi	r29, 0x00	; 0
     2b8:	1c c0       	rjmp	.+56     	; 0x2f2 <_Z20can_send_analog_msgsv+0xb8>
				if ( isConfigured(test) )
				{
					can_prep_analog_derivative_msg( &tcan, 
									chan,
									Readings[chip*16+chan],
									ReadingsPrev[chip*16+chan] );
     2ba:	f8 01       	movw	r30, r16
     2bc:	40 81       	ld	r20, Z
     2be:	51 81       	ldd	r21, Z+1	; 0x01
     2c0:	f7 01       	movw	r30, r14
     2c2:	20 81       	ld	r18, Z
     2c4:	31 81       	ldd	r19, Z+1	; 0x01
     2c6:	89 e1       	ldi	r24, 0x19	; 25
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	6c 2f       	mov	r22, r28
     2cc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z30can_prep_analog_derivative_msgP4sCANhjj>
					can_send_msg( 0, &tcan );
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	69 e1       	ldi	r22, 0x19	; 25
     2d4:	72 e0       	ldi	r23, 0x02	; 2
     2d6:	0e 94 75 07 	call	0xeea	; 0xeea <_Z12can_send_msghP4sCAN>
	byte test;
	for (int chip=0; chip<4; chip++)
	{
		configd = isConfigured( (1<<chip) );
		if ( configd ) 
			for (int chan=3; chan<9; chan++)
     2da:	21 96       	adiw	r28, 0x01	; 1
     2dc:	0e 5f       	subi	r16, 0xFE	; 254
     2de:	1f 4f       	sbci	r17, 0xFF	; 255
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	e8 0e       	add	r14, r24
     2e6:	f9 1e       	adc	r15, r25
     2e8:	c8 0e       	add	r12, r24
     2ea:	d9 1e       	adc	r13, r25
     2ec:	c9 30       	cpi	r28, 0x09	; 9
     2ee:	d1 05       	cpc	r29, r1
     2f0:	c1 f0       	breq	.+48     	; 0x322 <_Z20can_send_analog_msgsv+0xe8>
			{
				delay(50000);
     2f2:	60 e5       	ldi	r22, 0x50	; 80
     2f4:	73 ec       	ldi	r23, 0xC3	; 195
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z5delayl>
     2fe:	80 91 ee 03 	lds	r24, 0x03EE
     302:	89 21       	and	r24, r9
				test = (MODE_SEND_DERIVATIVES_1<<chip);
				if ( isConfigured(test) )
     304:	d1 f6       	brne	.-76     	; 0x2ba <_Z20can_send_analog_msgsv+0x80>
									ReadingsPrev[chip*16+chan] );
					can_send_msg( 0, &tcan );
				}
				else 
				{
					can_prep_analog_msg ( &tcan, Readings[chip*16+chan], chan );
     306:	f6 01       	movw	r30, r12
     308:	60 81       	ld	r22, Z
     30a:	71 81       	ldd	r23, Z+1	; 0x01
     30c:	89 e1       	ldi	r24, 0x19	; 25
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	4c 2f       	mov	r20, r28
     312:	0e 94 cb 00 	call	0x196	; 0x196 <_Z19can_prep_analog_msgP4sCANjh>
					//can_send_msg_no_wait( 0, &tcan );
					can_send_msg( 0, &tcan );
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	69 e1       	ldi	r22, 0x19	; 25
     31a:	72 e0       	ldi	r23, 0x02	; 2
     31c:	0e 94 75 07 	call	0xeea	; 0xeea <_Z12can_send_msghP4sCAN>
     320:	dc cf       	rjmp	.-72     	; 0x2da <_Z20can_send_analog_msgsv+0xa0>
*/
void can_send_analog_msgs( )
{
	byte configd;
	byte test;
	for (int chip=0; chip<4; chip++)
     322:	08 94       	sec
     324:	a1 1c       	adc	r10, r1
     326:	b1 1c       	adc	r11, r1
     328:	e0 e1       	ldi	r30, 0x10	; 16
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	6e 0e       	add	r6, r30
     32e:	7f 1e       	adc	r7, r31
     330:	f4 e0       	ldi	r31, 0x04	; 4
     332:	af 16       	cp	r10, r31
     334:	b1 04       	cpc	r11, r1
     336:	09 f0       	breq	.+2      	; 0x33a <_Z20can_send_analog_msgsv+0x100>
     338:	9c cf       	rjmp	.-200    	; 0x272 <_Z20can_send_analog_msgsv+0x38>
					//can_send_msg_no_wait( 0, &tcan );
					can_send_msg( 0, &tcan );
				}
			}
	}
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	7f 90       	pop	r7
     352:	6f 90       	pop	r6
     354:	5f 90       	pop	r5
     356:	4f 90       	pop	r4
     358:	3f 90       	pop	r3
     35a:	2f 90       	pop	r2
     35c:	08 95       	ret

0000035e <_Z12can_send_onehh>:

void can_send_one(byte mChip, byte mchan)
{
	byte index = 0;
	byte test = (MODE_SEND_DERIVATIVES_1<<mChip);
     35e:	e8 2f       	mov	r30, r24
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	20 e1       	ldi	r18, 0x10	; 16
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <_Z12can_send_onehh+0xe>
     368:	22 0f       	add	r18, r18
     36a:	33 1f       	adc	r19, r19
     36c:	8a 95       	dec	r24
     36e:	e2 f7       	brpl	.-8      	; 0x368 <_Z12can_send_onehh+0xa>
     370:	80 91 ee 03 	lds	r24, 0x03EE
     374:	82 23       	and	r24, r18
	if ( isConfigured(test) )
     376:	e9 f4       	brne	.+58     	; 0x3b2 <_Z12can_send_onehh+0x54>
		can_send_msg( 0, &tcan );
	}
	else 
	{
		index = (mChip<<4) | mchan;	
		can_prep_analog_msg ( &tcan, Readings[mChip*16+mchan], index );
     378:	cf 01       	movw	r24, r30
     37a:	82 95       	swap	r24
     37c:	92 95       	swap	r25
     37e:	90 7f       	andi	r25, 0xF0	; 240
     380:	98 27       	eor	r25, r24
     382:	80 7f       	andi	r24, 0xF0	; 240
     384:	98 27       	eor	r25, r24
     386:	fc 01       	movw	r30, r24
     388:	e6 0f       	add	r30, r22
     38a:	f1 1d       	adc	r31, r1
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	ee 5c       	subi	r30, 0xCE	; 206
     392:	fd 4f       	sbci	r31, 0xFD	; 253
     394:	20 81       	ld	r18, Z
     396:	31 81       	ldd	r19, Z+1	; 0x01
						ReadingsPrev[mChip*16+mchan] );
		can_send_msg( 0, &tcan );
	}
	else 
	{
		index = (mChip<<4) | mchan;	
     398:	46 2f       	mov	r20, r22
     39a:	48 2b       	or	r20, r24
		can_prep_analog_msg ( &tcan, Readings[mChip*16+mchan], index );
     39c:	89 e1       	ldi	r24, 0x19	; 25
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	b9 01       	movw	r22, r18
     3a2:	0e 94 cb 00 	call	0x196	; 0x196 <_Z19can_prep_analog_msgP4sCANjh>
		can_send_msg( 0, &tcan );
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	69 e1       	ldi	r22, 0x19	; 25
     3aa:	72 e0       	ldi	r23, 0x02	; 2
     3ac:	0e 94 75 07 	call	0xeea	; 0xeea <_Z12can_send_msghP4sCAN>
     3b0:	08 95       	ret
	byte test = (MODE_SEND_DERIVATIVES_1<<mChip);
	if ( isConfigured(test) )
	{
		can_prep_analog_derivative_msg( &tcan, mchan,
						Readings[mChip*16+mchan],
						ReadingsPrev[mChip*16+mchan] );
     3b2:	cf 01       	movw	r24, r30
     3b4:	82 95       	swap	r24
     3b6:	92 95       	swap	r25
     3b8:	90 7f       	andi	r25, 0xF0	; 240
     3ba:	98 27       	eor	r25, r24
     3bc:	80 7f       	andi	r24, 0xF0	; 240
     3be:	98 27       	eor	r25, r24
     3c0:	86 0f       	add	r24, r22
     3c2:	91 1d       	adc	r25, r1
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	dc 01       	movw	r26, r24
     3ca:	ae 5c       	subi	r26, 0xCE	; 206
     3cc:	bd 4f       	sbci	r27, 0xFD	; 253
     3ce:	4d 91       	ld	r20, X+
     3d0:	5c 91       	ld	r21, X
     3d2:	dc 01       	movw	r26, r24
     3d4:	ae 54       	subi	r26, 0x4E	; 78
     3d6:	bd 4f       	sbci	r27, 0xFD	; 253
     3d8:	2d 91       	ld	r18, X+
     3da:	3c 91       	ld	r19, X
     3dc:	89 e1       	ldi	r24, 0x19	; 25
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z30can_prep_analog_derivative_msgP4sCANhjj>
		can_send_msg( 0, &tcan );
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	69 e1       	ldi	r22, 0x19	; 25
     3e8:	72 e0       	ldi	r23, 0x02	; 2
     3ea:	0e 94 75 07 	call	0xeea	; 0xeea <_Z12can_send_msghP4sCAN>
     3ee:	08 95       	ret

000003f0 <_Z18can_send_timeslicev>:
     3f0:	80 91 ee 03 	lds	r24, 0x03EE
     3f4:	8f 70       	andi	r24, 0x0F	; 15
{
	byte configd;
	static byte chip    = 0;
	static byte channel = 0;

	if (isConfigured(0x0F)==0)		// None configured...
     3f6:	09 f4       	brne	.+2      	; 0x3fa <_Z18can_send_timeslicev+0xa>
     3f8:	08 95       	ret
		return;
	
	led_on(2);		
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z6led_onh>
	can_send_one( chip, channel );
     400:	80 91 29 02 	lds	r24, 0x0229
     404:	60 91 28 02 	lds	r22, 0x0228
     408:	0e 94 af 01 	call	0x35e	; 0x35e <_Z12can_send_onehh>
	led_on(2);
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z6led_onh>
	  	
	channel++;
     412:	80 91 28 02 	lds	r24, 0x0228
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	80 93 28 02 	sts	0x0228, r24
	if (channel > 15)
     41c:	80 31       	cpi	r24, 0x10	; 16
     41e:	60 f3       	brcs	.-40     	; 0x3f8 <_Z18can_send_timeslicev+0x8>
	{		
		channel = 0;
     420:	10 92 28 02 	sts	0x0228, r1
     424:	90 91 29 02 	lds	r25, 0x0229
     428:	50 91 ee 03 	lds	r21, 0x03EE

		// Next Chip!
		do {
			chip++;
			if (chip>3) chip = 0;
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	0a c0       	rjmp	.+20     	; 0x446 <_Z18can_send_timeslicev+0x56>
     432:	c9 01       	movw	r24, r18
     434:	04 2e       	mov	r0, r20
     436:	02 c0       	rjmp	.+4      	; 0x43c <_Z18can_send_timeslicev+0x4c>
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	0a 94       	dec	r0
     43e:	e2 f7       	brpl	.-8      	; 0x438 <_Z18can_send_timeslicev+0x48>
     440:	94 2f       	mov	r25, r20
     442:	85 23       	and	r24, r21
	if (channel > 15)
	{		
		channel = 0;

		// Next Chip!
		do {
     444:	49 f4       	brne	.+18     	; 0x458 <_Z18can_send_timeslicev+0x68>
			chip++;
     446:	49 2f       	mov	r20, r25
     448:	4f 5f       	subi	r20, 0xFF	; 255
			if (chip>3) chip = 0;
     44a:	44 30       	cpi	r20, 0x04	; 4
     44c:	90 f3       	brcs	.-28     	; 0x432 <_Z18can_send_timeslicev+0x42>
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	85 23       	and	r24, r21
	if (channel > 15)
	{		
		channel = 0;

		// Next Chip!
		do {
     456:	b9 f3       	breq	.-18     	; 0x446 <_Z18can_send_timeslicev+0x56>
     458:	40 93 29 02 	sts	0x0229, r20
     45c:	08 95       	ret

0000045e <_Z17can_init_test_msgv>:
	}		
}

void can_init_test_msg()
{
    msg1.id 	 = create_CAN_eid( ID_ANALOG_MEASUREMENT, MyInstance );
     45e:	80 ea       	ldi	r24, 0xA0	; 160
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	60 91 6f 03 	lds	r22, 0x036F
     466:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
     46a:	60 93 34 03 	sts	0x0334, r22
     46e:	70 93 35 03 	sts	0x0335, r23
     472:	80 93 36 03 	sts	0x0336, r24
     476:	90 93 37 03 	sts	0x0337, r25
    msg1.data[0] = 0xA0;
     47a:	80 ea       	ldi	r24, 0xA0	; 160
     47c:	80 93 39 03 	sts	0x0339, r24
    msg1.data[1] = 0x55;
     480:	85 e5       	ldi	r24, 0x55	; 85
     482:	80 93 3a 03 	sts	0x033A, r24
    msg1.data[2] = 0xA1;
     486:	91 ea       	ldi	r25, 0xA1	; 161
     488:	90 93 3b 03 	sts	0x033B, r25
    msg1.data[3] = 0x55;    
     48c:	80 93 3c 03 	sts	0x033C, r24
    msg1.header.DLC = 4;
     490:	80 91 38 03 	lds	r24, 0x0338
     494:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     496:	88 60       	ori	r24, 0x08	; 8
     498:	80 93 38 03 	sts	0x0338, r24
}
     49c:	08 95       	ret

0000049e <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
*******************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0x01;		// Enable just chip #1
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 ee 03 	sts	0x03EE, r24
	config_byte_2 = 0x81;
     4a4:	81 e8       	ldi	r24, 0x81	; 129
     4a6:	80 93 ef 03 	sts	0x03EF, r24
	
}
     4aa:	08 95       	ret

000004ac <_Z13config_changeh>:
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
	{
	}
}
     4ac:	08 95       	ret

000004ae <_Z8save_calv>:
***********************************************************/
byte* save_cal()
{
	//byte* addr = CONFIGURATION_EEPROM_ADDRESS;
	//save_instance_eeprom();
	byte* addr = save_configuration();
     4ae:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z18save_configurationv>
//	addr = save_configuration_eeprom	(addr);
	return addr;
};
     4b2:	08 95       	ret

000004b4 <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	//byte* addr = CONFIGURATION_EEPROM_ADDRESS;
	byte*  addr = read_configuration();
     4b4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_Z18read_configurationv>
//	addr        = read_configuration_eeprom(addr);
	return addr;
};
     4b8:	08 95       	ret

000004ba <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     4ba:	80 91 ef 03 	lds	r24, 0x03EF
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	80 7f       	andi	r24, 0xF0	; 240
     4c2:	90 70       	andi	r25, 0x00	; 0
     4c4:	80 32       	cpi	r24, 0x20	; 32
     4c6:	91 05       	cpc	r25, r1
     4c8:	91 f0       	breq	.+36     	; 0x4ee <_Z13getReportRatev+0x34>
     4ca:	81 32       	cpi	r24, 0x21	; 33
     4cc:	91 05       	cpc	r25, r1
     4ce:	44 f0       	brlt	.+16     	; 0x4e0 <_Z13getReportRatev+0x26>
     4d0:	80 34       	cpi	r24, 0x40	; 64
     4d2:	91 05       	cpc	r25, r1
     4d4:	51 f0       	breq	.+20     	; 0x4ea <_Z13getReportRatev+0x30>
     4d6:	80 38       	cpi	r24, 0x80	; 128
     4d8:	91 05       	cpc	r25, r1
     4da:	29 f4       	brne	.+10     	; 0x4e6 <_Z13getReportRatev+0x2c>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
     4dc:	84 e1       	ldi	r24, 0x14	; 20
     4de:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     4e0:	80 31       	cpi	r24, 0x10	; 16
     4e2:	91 05       	cpc	r25, r1
     4e4:	31 f0       	breq	.+12     	; 0x4f2 <_Z13getReportRatev+0x38>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
     4ea:	8a e0       	ldi	r24, 0x0A	; 10
     4ec:	08 95       	ret
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
     4ee:	84 e0       	ldi	r24, 0x04	; 4
     4f0:	08 95       	ret
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
     4f2:	82 e0       	ldi	r24, 0x02	; 2
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
	default: return -1;  break;
	}
}	
     4f4:	08 95       	ret

000004f6 <_Z18isReportingEnabledv>:

BOOL isReportingEnabled()
{
	if ( (config_byte_2 & 0xF0) != MODE_SEND_UPDATES_NONE )
     4f6:	90 91 ef 03 	lds	r25, 0x03EF
     4fa:	90 7f       	andi	r25, 0xF0	; 240
		return TRUE;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	09 f4       	brne	.+2      	; 0x502 <__stack+0x3>
     500:	80 e0       	ldi	r24, 0x00	; 0
	else
		return FALSE;
}
     502:	08 95       	ret

00000504 <_Z22enable_pin_change_intsv>:
}

void enable_pin_change_ints()
{
	// ENABLE PIN CHANGE INTERRUPT:
	PCICR |= 0x02;		// pcint[8..15]
     504:	e8 e6       	ldi	r30, 0x68	; 104
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	82 60       	ori	r24, 0x02	; 2
     50c:	80 83       	st	Z, r24
}
     50e:	08 95       	ret

00000510 <_Z23disable_pin_change_intsv>:
void disable_pin_change_ints()
{
	// DISABLE PIN CHANGE INTERRUPT:
	PCICR &= ~(0x02);	// pcint[8..15]
     510:	e8 e6       	ldi	r30, 0x68	; 104
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	8d 7f       	andi	r24, 0xFD	; 253
     518:	80 83       	st	Z, r24
}
     51a:	08 95       	ret

0000051c <_Z11select_chiph>:

void select_chip(byte mChip)		
{
	switch (mChip)
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	59 f0       	breq	.+22     	; 0x536 <_Z11select_chiph+0x1a>
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	28 f0       	brcs	.+10     	; 0x52e <_Z11select_chiph+0x12>
     524:	82 30       	cpi	r24, 0x02	; 2
     526:	49 f0       	breq	.+18     	; 0x53a <_Z11select_chiph+0x1e>
     528:	83 30       	cpi	r24, 0x03	; 3
     52a:	19 f0       	breq	.+6      	; 0x532 <_Z11select_chiph+0x16>
     52c:	08 95       	ret
	{
	case 0 : CS_PORT &= ~(1<<CS_A1);			 break;
     52e:	2b 98       	cbi	0x05, 3	; 5
     530:	08 95       	ret
	case 1 : CS_PORT &= ~(1<<CS_A2);			 break;
	case 2 : CS_PORT &= ~(1<<CS_A3);			 break;
	case 3 : CS_PORT &= ~(1<<CS_A4);			 break;
     532:	2e 98       	cbi	0x05, 6	; 5
     534:	08 95       	ret
void select_chip(byte mChip)		
{
	switch (mChip)
	{
	case 0 : CS_PORT &= ~(1<<CS_A1);			 break;
	case 1 : CS_PORT &= ~(1<<CS_A2);			 break;
     536:	2c 98       	cbi	0x05, 4	; 5
     538:	08 95       	ret
	case 2 : CS_PORT &= ~(1<<CS_A3);			 break;
     53a:	2d 98       	cbi	0x05, 5	; 5
     53c:	08 95       	ret

0000053e <_Z13deselect_chiph>:
	}
}

void deselect_chip( byte mChip )
{
	switch (mChip)
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	59 f0       	breq	.+22     	; 0x558 <_Z13deselect_chiph+0x1a>
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	28 f0       	brcs	.+10     	; 0x550 <_Z13deselect_chiph+0x12>
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	49 f0       	breq	.+18     	; 0x55c <_Z13deselect_chiph+0x1e>
     54a:	83 30       	cpi	r24, 0x03	; 3
     54c:	19 f0       	breq	.+6      	; 0x554 <_Z13deselect_chiph+0x16>
     54e:	08 95       	ret
	{
	case 0 : CS_PORT |= (1<<CS_A1);			 break;
     550:	2b 9a       	sbi	0x05, 3	; 5
     552:	08 95       	ret
	case 1 : CS_PORT |= (1<<CS_A2);			 break;
	case 2 : CS_PORT |= (1<<CS_A3);			 break;
	case 3 : CS_PORT |= (1<<CS_A4);			 break;
     554:	2e 9a       	sbi	0x05, 6	; 5
     556:	08 95       	ret
void deselect_chip( byte mChip )
{
	switch (mChip)
	{
	case 0 : CS_PORT |= (1<<CS_A1);			 break;
	case 1 : CS_PORT |= (1<<CS_A2);			 break;
     558:	2c 9a       	sbi	0x05, 4	; 5
     55a:	08 95       	ret
	case 2 : CS_PORT |= (1<<CS_A3);			 break;
     55c:	2d 9a       	sbi	0x05, 5	; 5
     55e:	08 95       	ret

00000560 <_Z8an_reseth>:
		an_averaging_off( i );
	}
}

void an_reset(byte mChip)		
{
     560:	cf 93       	push	r28
     562:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     564:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
	spi_transfer( 0x10 );	// hard reset.	
     568:	80 e1       	ldi	r24, 0x10	; 16
     56a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
	deselect_chip(mChip);
     56e:	8c 2f       	mov	r24, r28
     570:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
}
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <_Z12an_reset_allv>:
}

void an_reset_all()  
{
	for (int i=0; i<4; i++)
		an_reset(i);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 b0 02 	call	0x560	; 0x560 <_Z8an_reseth>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 b0 02 	call	0x560	; 0x560 <_Z8an_reseth>
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 b0 02 	call	0x560	; 0x560 <_Z8an_reseth>
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 b0 02 	call	0x560	; 0x560 <_Z8an_reseth>
}
     590:	08 95       	ret

00000592 <_Z17get_chip_readingsh>:
	spi_transfer( 0x10 );	// hard reset.	
	deselect_chip(mChip);
}

void get_chip_readings( byte mChip )
{
     592:	9f 92       	push	r9
     594:	af 92       	push	r10
     596:	bf 92       	push	r11
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	b8 2e       	mov	r11, r24
	select_chip(mChip);
	spi_transfer( 0x10 );	// hard reset.	
	deselect_chip(mChip);
}

void get_chip_readings( byte mChip )
     5aa:	08 2f       	mov	r16, r24
     5ac:	10 e0       	ldi	r17, 0x00	; 0
     5ae:	00 0f       	add	r16, r16
     5b0:	11 1f       	adc	r17, r17
     5b2:	02 95       	swap	r16
     5b4:	12 95       	swap	r17
     5b6:	10 7f       	andi	r17, 0xF0	; 240
     5b8:	10 27       	eor	r17, r16
     5ba:	00 7f       	andi	r16, 0xF0	; 240
     5bc:	10 27       	eor	r17, r16
     5be:	92 eb       	ldi	r25, 0xB2	; 178
     5c0:	e9 2e       	mov	r14, r25
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	f9 2e       	mov	r15, r25
     5c6:	e0 0e       	add	r14, r16
     5c8:	f1 1e       	adc	r15, r17
     5ca:	0e 5c       	subi	r16, 0xCE	; 206
     5cc:	1d 4f       	sbci	r17, 0xFD	; 253
     5ce:	c0 e1       	ldi	r28, 0x10	; 16
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
{
	// READ RESULT:
	for (int c=0; c<16; c++)
	{
		select_chip(mChip);
     5d2:	8b 2d       	mov	r24, r11
     5d4:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
		byte upper = spi_transfer( 0x00 );
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
     5de:	98 2e       	mov	r9, r24
		deselect_chip(mChip);
     5e0:	8b 2d       	mov	r24, r11
     5e2:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
		
		select_chip(mChip);
     5e6:	8b 2d       	mov	r24, r11
     5e8:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
		byte lower = spi_transfer( 0x00 );
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
     5f2:	a8 2e       	mov	r10, r24
		deselect_chip(mChip);
     5f4:	8b 2d       	mov	r24, r11
     5f6:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
		
		word result = (((word)upper)<<8) + (lower);
     5fa:	d9 2c       	mov	r13, r9
     5fc:	cc 24       	eor	r12, r12
     5fe:	96 01       	movw	r18, r12
     600:	2a 0d       	add	r18, r10
     602:	31 1d       	adc	r19, r1
		result = (result>>2);

		// STORE RESULT : 
		ReadingsPrev[mChip*16+c] = Readings[mChip*16+c];
     604:	f8 01       	movw	r30, r16
     606:	40 81       	ld	r20, Z
     608:	51 81       	ldd	r21, Z+1	; 0x01
     60a:	f7 01       	movw	r30, r14
     60c:	41 93       	st	Z+, r20
     60e:	51 93       	st	Z+, r21
     610:	7f 01       	movw	r14, r30
		select_chip(mChip);
		byte lower = spi_transfer( 0x00 );
		deselect_chip(mChip);
		
		word result = (((word)upper)<<8) + (lower);
		result = (result>>2);
     612:	36 95       	lsr	r19
     614:	27 95       	ror	r18
     616:	36 95       	lsr	r19
     618:	27 95       	ror	r18

		// STORE RESULT : 
		ReadingsPrev[mChip*16+c] = Readings[mChip*16+c];
		Readings    [mChip*16+c] = result;
     61a:	f8 01       	movw	r30, r16
     61c:	21 93       	st	Z+, r18
     61e:	31 93       	st	Z+, r19
     620:	8f 01       	movw	r16, r30
     622:	21 97       	sbiw	r28, 0x01	; 1
}

void get_chip_readings( byte mChip )
{
	// READ RESULT:
	for (int c=0; c<16; c++)
     624:	b1 f6       	brne	.-84     	; 0x5d2 <_Z17get_chip_readingsh+0x40>

		// STORE RESULT : 
		ReadingsPrev[mChip*16+c] = Readings[mChip*16+c];
		Readings    [mChip*16+c] = result;
	}
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	bf 90       	pop	r11
     638:	af 90       	pop	r10
     63a:	9f 90       	pop	r9
     63c:	08 95       	ret

0000063e <_Z13an_conversionhh>:

/*
	mChannel - [0 to 15]
*/
void an_conversion(byte mChip, byte mChannel)
{
     63e:	1f 93       	push	r17
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	0f 92       	push	r0
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	18 2f       	mov	r17, r24
	select_chip(mChip);
     64c:	69 83       	std	Y+1, r22	; 0x01
     64e:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
	byte channel   = (mChannel<<3);
     652:	69 81       	ldd	r22, Y+1	; 0x01
     654:	86 2f       	mov	r24, r22
     656:	88 0f       	add	r24, r24
     658:	88 0f       	add	r24, r24
     65a:	88 0f       	add	r24, r24
	byte scan_mode = SCAN_0_to_N;
	spi_transfer( 0x80|channel|scan_mode );
     65c:	80 68       	ori	r24, 0x80	; 128
     65e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
	deselect_chip(mChip);
     662:	81 2f       	mov	r24, r17
     664:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
     668:	14 30       	cpi	r17, 0x04	; 4
     66a:	80 f4       	brcc	.+32     	; 0x68c <_Z13an_conversionhh+0x4e>
     66c:	e1 2f       	mov	r30, r17
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	ee 5f       	subi	r30, 0xFE	; 254
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	90 81       	ld	r25, Z
		case 1 : eoc_bit = 0x20; break;
		case 2 : eoc_bit = 0x40; break;
		case 3 : eoc_bit = 0x80; break;
		default: eoc_bit = 0x10; break;
	}
	while (EOC_PORT & eoc_bit) {   };
     676:	88 b1       	in	r24, 0x08	; 8
     678:	89 23       	and	r24, r25
     67a:	e9 f7       	brne	.-6      	; 0x676 <_Z13an_conversionhh+0x38>

	// READ RESULTS:
	get_chip_readings( mChip );
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 c9 02 	call	0x592	; 0x592 <_Z17get_chip_readingsh>

}
     682:	0f 90       	pop	r0
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	1f 91       	pop	r17
     68a:	08 95       	ret
{
	select_chip(mChip);
	byte channel   = (mChannel<<3);
	byte scan_mode = SCAN_0_to_N;
	spi_transfer( 0x80|channel|scan_mode );
	deselect_chip(mChip);
     68c:	90 e1       	ldi	r25, 0x10	; 16
     68e:	f3 cf       	rjmp	.-26     	; 0x676 <_Z13an_conversionhh+0x38>

00000690 <_Z8an_setuph>:
	get_chip_readings( mChip );

}

void an_setup( byte mChip )
{
     690:	cf 93       	push	r28
     692:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     694:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
	byte clock_mode = CLK_INT_AIN;
	byte ref_mode 	= REF_ALWAYS_ON;
	spi_transfer( 0x40| clock_mode | ref_mode );
     698:	88 e6       	ldi	r24, 0x68	; 104
     69a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
	deselect_chip(mChip);	
     69e:	8c 2f       	mov	r24, r28
     6a0:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
} 
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <_Z16an_averaging_offh>:

void an_averaging_off( byte mChip )
{
     6a8:	cf 93       	push	r28
     6aa:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     6ac:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
	spi_transfer( 0x20 );
     6b0:	80 e2       	ldi	r24, 0x20	; 32
     6b2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
	deselect_chip(mChip);	
     6b6:	8c 2f       	mov	r24, r28
     6b8:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
}
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <_Z16an_configure_allv>:
	for (int i=0; i<4; i++)
		an_reset(i);
}

void an_configure_all()  
{
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
	for (int i=0; i<4; i++)
     6c4:	c0 e0       	ldi	r28, 0x00	; 0
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		an_conversion   ( i, 0 );
     6c8:	8c 2f       	mov	r24, r28
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	0e 94 1f 03 	call	0x63e	; 0x63e <_Z13an_conversionhh>
		an_setup        ( i );
     6d0:	8c 2f       	mov	r24, r28
     6d2:	0e 94 48 03 	call	0x690	; 0x690 <_Z8an_setuph>
		an_averaging_off( i );
     6d6:	8c 2f       	mov	r24, r28
     6d8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_Z16an_averaging_offh>
		an_reset(i);
}

void an_configure_all()  
{
	for (int i=0; i<4; i++)
     6dc:	21 96       	adiw	r28, 0x01	; 1
     6de:	c4 30       	cpi	r28, 0x04	; 4
     6e0:	d1 05       	cpc	r29, r1
     6e2:	91 f7       	brne	.-28     	; 0x6c8 <_Z16an_configure_allv+0x8>
	{
		an_conversion   ( i, 0 );
		an_setup        ( i );
		an_averaging_off( i );
	}
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <_Z7an_initv>:

	// Maxim 11621 : 	
	// CS idles high
	// SCLK idles low.  10Mhz or less.
	// CPOL==CPHA  (must equal)
	spi_init( FALSE, TRUE, MSBFIRST, SPI_MODE0 );
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <spi_init>

	// 1 means output;  0 means input;	
	CS_DDR |= CS_DDR_MASK;		// Outputs!
     6f6:	84 b1       	in	r24, 0x04	; 4
     6f8:	88 67       	ori	r24, 0x78	; 120
     6fa:	84 b9       	out	0x04, r24	; 4
	CS_DDR |= 0x80;				// SCLK Output!
     6fc:	27 9a       	sbi	0x04, 7	; 4
	CS_DDR &= 0xFE;
     6fe:	20 98       	cbi	0x04, 0	; 4
	PORTB |= 0x01;
     700:	28 9a       	sbi	0x05, 0	; 5

	EOC_DDR &= ~EOC_DDR_MASK;	// Inputs!
     702:	87 b1       	in	r24, 0x07	; 7
     704:	8f 70       	andi	r24, 0x0F	; 15
     706:	87 b9       	out	0x07, r24	; 7
	an_reset_all();
     708:	0e 94 bc 02 	call	0x578	; 0x578 <_Z12an_reset_allv>
	an_configure_all();
     70c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z16an_configure_allv>
	
	//enable_pin_change_ints();
}
     710:	08 95       	ret

00000712 <_Z15an_averaging_onhh>:
	spi_transfer( 0x20 );
	deselect_chip(mChip);	
}

void an_averaging_on( byte mChip, byte mAverageMask )
{
     712:	1f 93       	push	r17
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	0f 92       	push	r0
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	18 2f       	mov	r17, r24
	select_chip(mChip);
     720:	69 83       	std	Y+1, r22	; 0x01
     722:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
	// Not implemented the number results for scan mode 10 - single channel averaging.
	spi_transfer( 0x20| AVG_ON | mAverageMask );
     726:	69 81       	ldd	r22, Y+1	; 0x01
     728:	86 2f       	mov	r24, r22
     72a:	80 63       	ori	r24, 0x30	; 48
     72c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
	deselect_chip(mChip);	
     730:	81 2f       	mov	r24, r17
     732:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
}
     736:	0f 90       	pop	r0
     738:	cf 91       	pop	r28
     73a:	df 91       	pop	r29
     73c:	1f 91       	pop	r17
     73e:	08 95       	ret

00000740 <_Z7an_readh>:

word an_read( byte mChip )		
{
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	c8 2f       	mov	r28, r24
	select_chip(mChip);
     748:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z11select_chiph>
	byte upper = spi_transfer( 0x00 );
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
     752:	18 2f       	mov	r17, r24
	byte lower = spi_transfer( 0x00 );
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <spi_transfer>
     75a:	d8 2f       	mov	r29, r24
	deselect_chip(mChip);	
     75c:	8c 2f       	mov	r24, r28
     75e:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z13deselect_chiph>
	word result = (upper<<8);
     762:	51 2f       	mov	r21, r17
     764:	40 e0       	ldi	r20, 0x00	; 0
	result |= lower;
     766:	2d 2f       	mov	r18, r29
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	24 2b       	or	r18, r20
     76c:	35 2b       	or	r19, r21
	return (result>>2);		// 10 bits
     76e:	36 95       	lsr	r19
     770:	27 95       	ror	r18
     772:	36 95       	lsr	r19
     774:	27 95       	ror	r18
}
     776:	c9 01       	movw	r24, r18
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	08 95       	ret

00000780 <_Z13an_start_readh>:
		// 10 bit data:          dddd dddd dd
		// 2 trailing zeros:			     00

	// Start a conversion by writing byte to the conversion register.
	static byte channel = 15;		// loops 0 thru 7 (same on all 4 chips!)
	an_conversion(mChip, channel);
     780:	6f e0       	ldi	r22, 0x0F	; 15
     782:	0e 94 1f 03 	call	0x63e	; 0x63e <_Z13an_conversionhh>
}
     786:	08 95       	ret

00000788 <_Z12an_start_allv>:

// Read from the Maxim 11624 chips
void an_start_all()
{
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
	for (int i=0; i<4; i++)
     790:	c0 e0       	ldi	r28, 0x00	; 0
     792:	d0 e0       	ldi	r29, 0x00	; 0
	{
		byte configd = isConfigured( 1<<i );
     794:	01 e0       	ldi	r16, 0x01	; 1
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	c8 01       	movw	r24, r16
     79a:	0c 2e       	mov	r0, r28
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <_Z12an_start_allv+0x1a>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <_Z12an_start_allv+0x16>
     7a6:	20 91 ee 03 	lds	r18, 0x03EE
     7aa:	28 23       	and	r18, r24
		if (configd)
     7ac:	49 f4       	brne	.+18     	; 0x7c0 <_Z12an_start_allv+0x38>
}

// Read from the Maxim 11624 chips
void an_start_all()
{
	for (int i=0; i<4; i++)
     7ae:	21 96       	adiw	r28, 0x01	; 1
     7b0:	c4 30       	cpi	r28, 0x04	; 4
     7b2:	d1 05       	cpc	r29, r1
     7b4:	89 f7       	brne	.-30     	; 0x798 <_Z12an_start_allv+0x10>
	{
		byte configd = isConfigured( 1<<i );
		if (configd)
			an_start_read(i);
	}
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret
{
	for (int i=0; i<4; i++)
	{
		byte configd = isConfigured( 1<<i );
		if (configd)
			an_start_read(i);
     7c0:	8c 2f       	mov	r24, r28
     7c2:	0e 94 c0 03 	call	0x780	; 0x780 <_Z13an_start_readh>
     7c6:	f3 cf       	rjmp	.-26     	; 0x7ae <_Z12an_start_allv+0x26>

000007c8 <_Z12get_readingsh>:
	}
}

void get_readings(byte mChip)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
		if (configd)
			an_start_read(i);
	}
}

void get_readings(byte mChip)
     7d0:	08 2f       	mov	r16, r24
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	00 0f       	add	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	02 95       	swap	r16
     7da:	12 95       	swap	r17
     7dc:	10 7f       	andi	r17, 0xF0	; 240
     7de:	10 27       	eor	r17, r16
     7e0:	00 7f       	andi	r16, 0xF0	; 240
     7e2:	10 27       	eor	r17, r16
     7e4:	0e 5c       	subi	r16, 0xCE	; 206
     7e6:	1d 4f       	sbci	r17, 0xFD	; 253
     7e8:	c0 e1       	ldi	r28, 0x10	; 16
     7ea:	d0 e0       	ldi	r29, 0x00	; 0
{
	for (int r=0; r<16; r++)
		Readings[mChip*16+r] = an_read(0);
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 a0 03 	call	0x740	; 0x740 <_Z7an_readh>
     7f2:	f8 01       	movw	r30, r16
     7f4:	81 93       	st	Z+, r24
     7f6:	91 93       	st	Z+, r25
     7f8:	8f 01       	movw	r16, r30
     7fa:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void get_readings(byte mChip)
{
	for (int r=0; r<16; r++)
     7fc:	b9 f7       	brne	.-18     	; 0x7ec <_Z12get_readingsh+0x24>
		Readings[mChip*16+r] = an_read(0);
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	08 95       	ret

00000808 <__vector_23>:
#define CHIP_TWO   0x20
#define CHIP_THREE 0x40
#define CHIP_FOUR  0x80

ISR ( PCINT1_vect ) /* PCINT[8..15] */
{ 
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	11 24       	eor	r1, r1
     812:	2f 93       	push	r18
     814:	3f 93       	push	r19
     816:	4f 93       	push	r20
     818:	5f 93       	push	r21
     81a:	6f 93       	push	r22
     81c:	7f 93       	push	r23
     81e:	8f 93       	push	r24
     820:	9f 93       	push	r25
     822:	af 93       	push	r26
     824:	bf 93       	push	r27
     826:	ef 93       	push	r30
     828:	ff 93       	push	r31
	int chip=-1;
	if ((EOC_IN & CHIP_ONE) == 0)
     82a:	34 9b       	sbis	0x06, 4	; 6
     82c:	1a c0       	rjmp	.+52     	; 0x862 <__vector_23+0x5a>
	{   
		chip = 0;
		get_chip_readings( chip );
	}
	if ((EOC_IN & CHIP_TWO) == 0)
     82e:	35 9b       	sbis	0x06, 5	; 6
     830:	1d c0       	rjmp	.+58     	; 0x86c <__vector_23+0x64>
	{   
		chip = 1;
		get_chip_readings( chip );		
	}
	if ((EOC_IN & CHIP_THREE) == 0)
     832:	36 9b       	sbis	0x06, 6	; 6
     834:	20 c0       	rjmp	.+64     	; 0x876 <__vector_23+0x6e>
	{   
		chip = 2;
		get_chip_readings( chip );		
	}
	if ((EOC_IN & CHIP_FOUR) == 0)
     836:	37 99       	sbic	0x06, 7	; 6
     838:	03 c0       	rjmp	.+6      	; 0x840 <__vector_23+0x38>
	{   
		chip = 3;
		get_chip_readings( chip );
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	0e 94 c9 02 	call	0x592	; 0x592 <_Z17get_chip_readingsh>
	}
}
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	bf 91       	pop	r27
     846:	af 91       	pop	r26
     848:	9f 91       	pop	r25
     84a:	8f 91       	pop	r24
     84c:	7f 91       	pop	r23
     84e:	6f 91       	pop	r22
     850:	5f 91       	pop	r21
     852:	4f 91       	pop	r20
     854:	3f 91       	pop	r19
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti
{ 
	int chip=-1;
	if ((EOC_IN & CHIP_ONE) == 0)
	{   
		chip = 0;
		get_chip_readings( chip );
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 c9 02 	call	0x592	; 0x592 <_Z17get_chip_readingsh>
	}
	if ((EOC_IN & CHIP_TWO) == 0)
     868:	35 99       	sbic	0x06, 5	; 6
     86a:	e3 cf       	rjmp	.-58     	; 0x832 <__vector_23+0x2a>
	{   
		chip = 1;
		get_chip_readings( chip );		
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	0e 94 c9 02 	call	0x592	; 0x592 <_Z17get_chip_readingsh>
	}
	if ((EOC_IN & CHIP_THREE) == 0)
     872:	36 99       	sbic	0x06, 6	; 6
     874:	e0 cf       	rjmp	.-64     	; 0x836 <__vector_23+0x2e>
	{   
		chip = 2;
		get_chip_readings( chip );		
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 c9 02 	call	0x592	; 0x592 <_Z17get_chip_readingsh>
     87c:	dc cf       	rjmp	.-72     	; 0x836 <__vector_23+0x2e>

0000087e <_Z16analog_timeslicev>:

static short ReportCounter = 1;		// when zero sends update
void analog_timeslice()
{
	// Time To Report:
	if (isReportingEnabled())
     87e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z18isReportingEnabledv>
     882:	88 23       	and	r24, r24
     884:	61 f0       	breq	.+24     	; 0x89e <_Z16analog_timeslicev+0x20>
	{
		ReportCounter--;
     886:	80 91 00 01 	lds	r24, 0x0100
     88a:	90 91 01 01 	lds	r25, 0x0101
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	90 93 01 01 	sts	0x0101, r25
     894:	80 93 00 01 	sts	0x0100, r24
		if (ReportCounter<=0)
     898:	18 16       	cp	r1, r24
     89a:	19 06       	cpc	r1, r25
     89c:	0c f4       	brge	.+2      	; 0x8a0 <_Z16analog_timeslicev+0x22>
     89e:	08 95       	ret
		{
			//led_on(4);		
			ReportCounter = getReportRate();	// Refill 
     8a0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z13getReportRatev>
     8a4:	80 93 00 01 	sts	0x0100, r24
     8a8:	10 92 01 01 	sts	0x0101, r1

			// Initiate a conversion for each active chip  (isr will handle data)
			an_start_all();
     8ac:	0e 94 c4 03 	call	0x788	; 0x788 <_Z12an_start_allv>
     8b0:	08 95       	ret

000008b2 <_Z11OS_Dispatchv>:
{	
	if ((OS_Event_TIC_Counter % 5) == 0)	// 5ms tasks
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
     8b2:	20 91 e8 03 	lds	r18, 0x03E8
     8b6:	30 91 e9 03 	lds	r19, 0x03E9
     8ba:	c9 01       	movw	r24, r18
     8bc:	6a e0       	ldi	r22, 0x0A	; 10
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__divmodhi4>
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	41 f1       	breq	.+80     	; 0x918 <_Z11OS_Dispatchv+0x66>
	{
		analog_timeslice();  // ~1.2ms per chip (15 channels); 4chips=~5ms	
	}
	if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
     8c8:	c9 01       	movw	r24, r18
     8ca:	64 e1       	ldi	r22, 0x14	; 20
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__divmodhi4>
     8d2:	00 97       	sbiw	r24, 0x00	; 0
     8d4:	d1 f0       	breq	.+52     	; 0x90a <_Z11OS_Dispatchv+0x58>
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{
		
	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
     8d6:	c9 01       	movw	r24, r18
     8d8:	64 e6       	ldi	r22, 0x64	; 100
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__divmodhi4>
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <_Z11OS_Dispatchv+0x34>
     8e4:	08 95       	ret
	{
		// send CAN msgs
		//can_send_analog_msgs();
		can_send_configs();
     8e6:	0e 94 65 00 	call	0xca	; 0xca <_Z16can_send_configsv>
		if (t) {
     8ea:	80 91 32 03 	lds	r24, 0x0332
     8ee:	90 91 33 03 	lds	r25, 0x0333
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	c1 f4       	brne	.+48     	; 0x926 <_Z11OS_Dispatchv+0x74>
			led_on(3);
			t = 0;
		} else {
			led_off(3);
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_Z7led_offh>
			t = 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	90 93 33 03 	sts	0x0333, r25
     904:	80 93 32 03 	sts	0x0332, r24
     908:	08 95       	ret
	{
		analog_timeslice();  // ~1.2ms per chip (15 channels); 4chips=~5ms	
	}
	if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
	{
		can_send_timeslice();
     90a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z18can_send_timeslicev>
     90e:	20 91 e8 03 	lds	r18, 0x03E8
     912:	30 91 e9 03 	lds	r19, 0x03E9
     916:	df cf       	rjmp	.-66     	; 0x8d6 <_Z11OS_Dispatchv+0x24>
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
	{
		analog_timeslice();  // ~1.2ms per chip (15 channels); 4chips=~5ms	
     918:	0e 94 3f 04 	call	0x87e	; 0x87e <_Z16analog_timeslicev>
     91c:	20 91 e8 03 	lds	r18, 0x03E8
     920:	30 91 e9 03 	lds	r19, 0x03E9
     924:	d1 cf       	rjmp	.-94     	; 0x8c8 <_Z11OS_Dispatchv+0x16>
	{
		// send CAN msgs
		//can_send_analog_msgs();
		can_send_configs();
		if (t) {
			led_on(3);
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z6led_onh>
			t = 0;
     92c:	10 92 33 03 	sts	0x0333, r1
     930:	10 92 32 03 	sts	0x0332, r1
     934:	08 95       	ret

00000936 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
     936:	90 93 6c 03 	sts	0x036C, r25
     93a:	80 93 6b 03 	sts	0x036B, r24
}
     93e:	08 95       	ret

00000940 <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
     940:	90 93 6e 03 	sts	0x036E, r25
     944:	80 93 6d 03 	sts	0x036D, r24
}
     948:	08 95       	ret

0000094a <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
     94e:	ed ee       	ldi	r30, 0xED	; 237
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     954:	82 95       	swap	r24
     956:	80 7f       	andi	r24, 0xF0	; 240
     958:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
     95a:	c1 ef       	ldi	r28, 0xF1	; 241
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	38 81       	ld	r19, Y
     960:	cb 01       	movw	r24, r22
     962:	80 7e       	andi	r24, 0xE0	; 224
     964:	90 70       	andi	r25, 0x00	; 0
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	92 95       	swap	r25
     96c:	82 95       	swap	r24
     96e:	8f 70       	andi	r24, 0x0F	; 15
     970:	89 27       	eor	r24, r25
     972:	9f 70       	andi	r25, 0x0F	; 15
     974:	89 27       	eor	r24, r25
     976:	38 7f       	andi	r19, 0xF8	; 248
     978:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
     97a:	a0 ef       	ldi	r26, 0xF0	; 240
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	8c 91       	ld	r24, X
     980:	66 0f       	add	r22, r22
     982:	66 0f       	add	r22, r22
     984:	66 0f       	add	r22, r22
     986:	87 70       	andi	r24, 0x07	; 7
     988:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
     98a:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
     98c:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
     98e:	a5 ef       	ldi	r26, 0xF5	; 245
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	8c 91       	ld	r24, X
     994:	87 60       	ori	r24, 0x07	; 7
     996:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
     998:	a4 ef       	ldi	r26, 0xF4	; 244
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	8c 91       	ld	r24, X
     99e:	88 6f       	ori	r24, 0xF8	; 248
     9a0:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     9a2:	20 83       	st	Z, r18
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     9aa:	ed ee       	ldi	r30, 0xED	; 237
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     9b0:	82 95       	swap	r24
     9b2:	80 7f       	andi	r24, 0xF0	; 240
     9b4:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
     9b6:	a5 ef       	ldi	r26, 0xF5	; 245
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	8c 91       	ld	r24, X
     9bc:	88 7f       	andi	r24, 0xF8	; 248
     9be:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
     9c0:	a4 ef       	ldi	r26, 0xF4	; 244
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	8c 91       	ld	r24, X
     9c6:	87 70       	andi	r24, 0x07	; 7
     9c8:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     9ca:	90 83       	st	Z, r25
}
     9cc:	08 95       	ret

000009ce <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
     9ce:	25 2f       	mov	r18, r21
     9d0:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     9d2:	ed ee       	ldi	r30, 0xED	; 237
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     9d8:	82 95       	swap	r24
     9da:	80 7f       	andi	r24, 0xF0	; 240
     9dc:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
     9de:	86 2f       	mov	r24, r22
     9e0:	82 95       	swap	r24
     9e2:	86 95       	lsr	r24
     9e4:	87 70       	andi	r24, 0x07	; 7
     9e6:	44 0f       	add	r20, r20
     9e8:	44 0f       	add	r20, r20
     9ea:	44 0f       	add	r20, r20
     9ec:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     9ee:	c9 01       	movw	r24, r18
     9f0:	80 7e       	andi	r24, 0xE0	; 224
     9f2:	9f 71       	andi	r25, 0x1F	; 31
     9f4:	96 95       	lsr	r25
     9f6:	87 95       	ror	r24
     9f8:	92 95       	swap	r25
     9fa:	82 95       	swap	r24
     9fc:	8f 70       	andi	r24, 0x0F	; 15
     9fe:	89 27       	eor	r24, r25
     a00:	9f 70       	andi	r25, 0x0F	; 15
     a02:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
     a04:	22 0f       	add	r18, r18
     a06:	22 0f       	add	r18, r18
     a08:	22 0f       	add	r18, r18
     a0a:	37 2f       	mov	r19, r23
     a0c:	32 95       	swap	r19
     a0e:	36 95       	lsr	r19
     a10:	37 70       	andi	r19, 0x07	; 7
     a12:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
     a14:	77 0f       	add	r23, r23
     a16:	77 0f       	add	r23, r23
     a18:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
     a1a:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
     a1e:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     a22:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
     a26:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
     a2a:	50 83       	st	Z, r21
}
     a2c:	08 95       	ret

00000a2e <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	f8 2e       	mov	r15, r24
     a3a:	8b 01       	movw	r16, r22
     a3c:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
     a44:	c7 2f       	mov	r28, r23
     a46:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
     a48:	c8 01       	movw	r24, r16
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
     a50:	27 2f       	mov	r18, r23
     a52:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     a54:	ed ee       	ldi	r30, 0xED	; 237
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     a5a:	f2 94       	swap	r15
     a5c:	b0 ef       	ldi	r27, 0xF0	; 240
     a5e:	fb 22       	and	r15, r27
     a60:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
     a62:	43 ef       	ldi	r20, 0xF3	; 243
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	da 01       	movw	r26, r20
     a68:	6c 91       	ld	r22, X
     a6a:	8d 2f       	mov	r24, r29
     a6c:	82 95       	swap	r24
     a6e:	86 95       	lsr	r24
     a70:	87 70       	andi	r24, 0x07	; 7
     a72:	68 7f       	andi	r22, 0xF8	; 248
     a74:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     a76:	ce 01       	movw	r24, r28
     a78:	80 7e       	andi	r24, 0xE0	; 224
     a7a:	9f 71       	andi	r25, 0x1F	; 31
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24
     a80:	92 95       	swap	r25
     a82:	82 95       	swap	r24
     a84:	8f 70       	andi	r24, 0x0F	; 15
     a86:	89 27       	eor	r24, r25
     a88:	9f 70       	andi	r25, 0x0F	; 15
     a8a:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
     a8c:	a1 ef       	ldi	r26, 0xF1	; 241
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	7c 91       	ld	r23, X
     a92:	fc 2e       	mov	r15, r28
     a94:	ff 0c       	add	r15, r15
     a96:	ff 0c       	add	r15, r15
     a98:	ff 0c       	add	r15, r15
     a9a:	77 70       	andi	r23, 0x07	; 7
     a9c:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
     a9e:	ea 01       	movw	r28, r20
     aa0:	68 83       	st	Y, r22
	CANIDT2 = idt2;
     aa2:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     aa6:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
     aa8:	c7 ef       	ldi	r28, 0xF7	; 247
     aaa:	d0 e0       	ldi	r29, 0x00	; 0
     aac:	48 81       	ld	r20, Y
     aae:	83 2f       	mov	r24, r19
     ab0:	82 95       	swap	r24
     ab2:	86 95       	lsr	r24
     ab4:	87 70       	andi	r24, 0x07	; 7
     ab6:	48 7f       	andi	r20, 0xF8	; 248
     ab8:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
     aba:	c9 01       	movw	r24, r18
     abc:	80 7e       	andi	r24, 0xE0	; 224
     abe:	9f 71       	andi	r25, 0x1F	; 31
     ac0:	96 95       	lsr	r25
     ac2:	87 95       	ror	r24
     ac4:	92 95       	swap	r25
     ac6:	82 95       	swap	r24
     ac8:	8f 70       	andi	r24, 0x0F	; 15
     aca:	89 27       	eor	r24, r25
     acc:	9f 70       	andi	r25, 0x0F	; 15
     ace:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
     ad0:	a5 ef       	ldi	r26, 0xF5	; 245
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	5c 91       	ld	r21, X
     ad6:	22 0f       	add	r18, r18
     ad8:	22 0f       	add	r18, r18
     ada:	22 0f       	add	r18, r18
     adc:	57 70       	andi	r21, 0x07	; 7
     ade:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
     ae0:	48 83       	st	Y, r20
	CANIDM2 = idm2;
     ae2:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
     ae6:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
     ae8:	00 83       	st	Z, r16
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	08 95       	ret

00000af6 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
     af6:	ed ee       	ldi	r30, 0xED	; 237
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     afc:	82 95       	swap	r24
     afe:	80 7f       	andi	r24, 0xF0	; 240
     b00:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
     b02:	a7 ef       	ldi	r26, 0xF7	; 247
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	8c 91       	ld	r24, X
     b08:	88 7f       	andi	r24, 0xF8	; 248
     b0a:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
     b0c:	a6 ef       	ldi	r26, 0xF6	; 246
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	8c 91       	ld	r24, X
     b12:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
     b14:	a5 ef       	ldi	r26, 0xF5	; 245
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	8c 91       	ld	r24, X
     b1a:	87 70       	andi	r24, 0x07	; 7
     b1c:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     b1e:	90 83       	st	Z, r25
}
     b20:	08 95       	ret

00000b22 <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     b22:	ed ee       	ldi	r30, 0xED	; 237
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b28:	82 95       	swap	r24
     b2a:	80 7f       	andi	r24, 0xF0	; 240
     b2c:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     b2e:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     b32:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     b36:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     b3a:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     b3e:	90 83       	st	Z, r25
}
     b40:	08 95       	ret

00000b42 <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     b42:	ed ee       	ldi	r30, 0xED	; 237
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b48:	82 95       	swap	r24
     b4a:	80 7f       	andi	r24, 0xF0	; 240
     b4c:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
     b4e:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
     b52:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
     b56:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
     b5a:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
     b5e:	90 83       	st	Z, r25
}
     b60:	08 95       	ret

00000b62 <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
     b68:	ed ee       	ldi	r30, 0xED	; 237
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
     b6e:	38 2f       	mov	r19, r24
     b70:	32 95       	swap	r19
     b72:	30 7f       	andi	r19, 0xF0	; 240
     b74:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
     b76:	ce ed       	ldi	r28, 0xDE	; 222
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	98 81       	ld	r25, Y
     b7c:	a1 e0       	ldi	r26, 0x01	; 1
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <_Z21can_setup_receive_mobhssh+0x24>
     b82:	aa 0f       	add	r26, r26
     b84:	bb 1f       	adc	r27, r27
     b86:	8a 95       	dec	r24
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <_Z21can_setup_receive_mobhssh+0x20>
     b8a:	9a 2b       	or	r25, r26
     b8c:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     b8e:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b90:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     b92:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     b96:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     b9a:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     b9e:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     ba2:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
     ba4:	20 69       	ori	r18, 0x90	; 144
     ba6:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
     baa:	a8 ed       	ldi	r26, 0xD8	; 216
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	8c 91       	ld	r24, X
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
     bb4:	10 83       	st	Z, r17
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	08 95       	ret

00000bbe <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	28 e0       	ldi	r18, 0x08	; 8
     bd6:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
     bda:	60 91 6f 03 	lds	r22, 0x036F
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	28 e0       	ldi	r18, 0x08	; 8
     bf2:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     bf6:	cd ee       	ldi	r28, 0xED	; 237
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     bfa:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     bfc:	80 e3       	ldi	r24, 0x30	; 48
     bfe:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     c00:	05 ef       	ldi	r16, 0xF5	; 245
     c02:	10 e0       	ldi	r17, 0x00	; 0
     c04:	f8 01       	movw	r30, r16
     c06:	80 81       	ld	r24, Z
     c08:	88 7f       	andi	r24, 0xF8	; 248
     c0a:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     c0c:	84 ef       	ldi	r24, 0xF4	; 244
     c0e:	e8 2e       	mov	r14, r24
     c10:	f1 2c       	mov	r15, r1
     c12:	f7 01       	movw	r30, r14
     c14:	80 81       	ld	r24, Z
     c16:	87 70       	andi	r24, 0x07	; 7
     c18:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     c1a:	98 83       	st	Y, r25
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	63 e2       	ldi	r22, 0x23	; 35
     c20:	7c ef       	ldi	r23, 0xFC	; 252
     c22:	43 e2       	ldi	r20, 0x23	; 35
     c24:	5c ef       	ldi	r21, 0xFC	; 252
     c26:	0e 94 17 05 	call	0xa2e	; 0xa2e <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
     c2a:	85 e0       	ldi	r24, 0x05	; 5
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	28 e0       	ldi	r18, 0x08	; 8
     c36:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     c3a:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     c3c:	80 e5       	ldi	r24, 0x50	; 80
     c3e:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     c40:	f8 01       	movw	r30, r16
     c42:	80 81       	ld	r24, Z
     c44:	88 7f       	andi	r24, 0xF8	; 248
     c46:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     c48:	f7 01       	movw	r30, r14
     c4a:	80 81       	ld	r24, Z
     c4c:	87 70       	andi	r24, 0x07	; 7
     c4e:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     c50:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
     c52:	85 e0       	ldi	r24, 0x05	; 5
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	7c ef       	ldi	r23, 0xFC	; 252
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	5c ef       	ldi	r21, 0xFC	; 252
     c5c:	0e 94 17 05 	call	0xa2e	; 0xa2e <_Z20can_add_id_to_filterhtt>
}
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	08 95       	ret

00000c6e <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
     c6e:	ed ee       	ldi	r30, 0xED	; 237
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
     c74:	82 95       	swap	r24
     c76:	80 7f       	andi	r24, 0xF0	; 240
     c78:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
     c7a:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     c7e:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
     c82:	90 83       	st	Z, r25
}
     c84:	08 95       	ret

00000c86 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
     c86:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
     c88:	40 91 f3 00 	lds	r20, 0x00F3
     c8c:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
     c8e:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
     c92:	80 91 f1 00 	lds	r24, 0x00F1
     c96:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
     c98:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
     c9c:	ba 01       	movw	r22, r20
     c9e:	76 95       	lsr	r23
     ca0:	67 95       	ror	r22
     ca2:	76 95       	lsr	r23
     ca4:	67 95       	ror	r22
     ca6:	76 95       	lsr	r23
     ca8:	67 95       	ror	r22
     caa:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
     cac:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
     cae:	22 0f       	add	r18, r18
     cb0:	33 1f       	adc	r19, r19
     cb2:	22 95       	swap	r18
     cb4:	32 95       	swap	r19
     cb6:	30 7f       	andi	r19, 0xF0	; 240
     cb8:	32 27       	eor	r19, r18
     cba:	20 7f       	andi	r18, 0xF0	; 240
     cbc:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
     cbe:	54 2f       	mov	r21, r20
     cc0:	44 27       	eor	r20, r20
     cc2:	52 95       	swap	r21
     cc4:	55 0f       	add	r21, r21
     cc6:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     cc8:	24 2b       	or	r18, r20
     cca:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
     ccc:	ac 01       	movw	r20, r24
     cce:	56 95       	lsr	r21
     cd0:	47 95       	ror	r20
     cd2:	56 95       	lsr	r21
     cd4:	47 95       	ror	r20
     cd6:	56 95       	lsr	r21
     cd8:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     cda:	24 2b       	or	r18, r20
     cdc:	35 2b       	or	r19, r21
     cde:	32 83       	std	Z+2, r19	; 0x02
     ce0:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
     ce2:	82 95       	swap	r24
     ce4:	88 0f       	add	r24, r24
     ce6:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
     ce8:	a6 95       	lsr	r26
     cea:	a6 95       	lsr	r26
     cec:	a6 95       	lsr	r26
     cee:	a8 2b       	or	r26, r24
     cf0:	a3 83       	std	Z+3, r26	; 0x03
}
     cf2:	08 95       	ret

00000cf4 <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
     cfa:	0e 94 43 06 	call	0xc86	; 0xc86 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
     cfe:	80 91 ef 00 	lds	r24, 0x00EF
     d02:	8f 70       	andi	r24, 0x0F	; 15
     d04:	28 2f       	mov	r18, r24
     d06:	22 0f       	add	r18, r18
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	91 7e       	andi	r25, 0xE1	; 225
     d0c:	92 2b       	or	r25, r18
     d0e:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
     d10:	48 2f       	mov	r20, r24
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	41 15       	cp	r20, r1
     d16:	51 05       	cpc	r21, r1
     d18:	59 f0       	breq	.+22     	; 0xd30 <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
     d1a:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
     d20:	90 91 fa 00 	lds	r25, 0x00FA
     d24:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     d26:	2f 5f       	subi	r18, 0xFF	; 255
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	24 17       	cp	r18, r20
     d2c:	35 07       	cpc	r19, r21
     d2e:	c4 f3       	brlt	.-16     	; 0xd20 <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	cf 93       	push	r28
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
     d5a:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
     d5e:	40 91 ec 00 	lds	r20, 0x00EC
     d62:	42 95       	swap	r20
     d64:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     d66:	4f 30       	cpi	r20, 0x0F	; 15
     d68:	09 f4       	brne	.+2      	; 0xd6c <__vector_18+0x36>
     d6a:	87 c0       	rjmp	.+270    	; 0xe7a <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
     d6c:	80 91 ec 00 	lds	r24, 0x00EC
     d70:	80 7f       	andi	r24, 0xF0	; 240
     d72:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
     d76:	80 91 ee 00 	lds	r24, 0x00EE
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	8f 71       	andi	r24, 0x1F	; 31
     d7e:	90 70       	andi	r25, 0x00	; 0
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	09 f4       	brne	.+2      	; 0xd86 <__vector_18+0x50>
     d84:	40 c0       	rjmp	.+128    	; 0xe06 <__vector_18+0xd0>
		 byte st = CANSTMOB;
     d86:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	82 ff       	sbrs	r24, 2
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <__vector_18+0x64>
     d90:	20 91 ee 00 	lds	r18, 0x00EE
     d94:	2f 7e       	andi	r18, 0xEF	; 239
     d96:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
     d9a:	9c 01       	movw	r18, r24
     d9c:	23 70       	andi	r18, 0x03	; 3
     d9e:	30 70       	andi	r19, 0x00	; 0
     da0:	21 15       	cp	r18, r1
     da2:	31 05       	cpc	r19, r1
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__vector_18+0x7a>
     da6:	20 91 ee 00 	lds	r18, 0x00EE
     daa:	27 7f       	andi	r18, 0xF7	; 247
     dac:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
     db0:	81 ff       	sbrs	r24, 1
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <__vector_18+0x88>
     db4:	20 91 ee 00 	lds	r18, 0x00EE
     db8:	2b 7f       	andi	r18, 0xFB	; 251
     dba:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
     dbe:	80 ff       	sbrs	r24, 0
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <__vector_18+0x96>
     dc2:	80 91 ee 00 	lds	r24, 0x00EE
     dc6:	8d 7f       	andi	r24, 0xFD	; 253
     dc8:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
     dcc:	45 30       	cpi	r20, 0x05	; 5
     dce:	09 f4       	brne	.+2      	; 0xdd2 <__vector_18+0x9c>
     dd0:	4b c0       	rjmp	.+150    	; 0xe68 <__vector_18+0x132>
     dd2:	41 30       	cpi	r20, 0x01	; 1
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <__vector_18+0xa2>
     dd6:	48 c0       	rjmp	.+144    	; 0xe68 <__vector_18+0x132>
     dd8:	43 30       	cpi	r20, 0x03	; 3
     dda:	09 f4       	brne	.+2      	; 0xdde <__vector_18+0xa8>
     ddc:	45 c0       	rjmp	.+138    	; 0xe68 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
     dde:	c0 93 ed 00 	sts	0x00ED, r28
}
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	cf 91       	pop	r28
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
     e06:	80 91 ee 00 	lds	r24, 0x00EE
     e0a:	85 fd       	sbrc	r24, 5
     e0c:	13 c0       	rjmp	.+38     	; 0xe34 <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
     e0e:	80 91 ee 00 	lds	r24, 0x00EE
     e12:	86 ff       	sbrs	r24, 6
     e14:	e4 cf       	rjmp	.-56     	; 0xdde <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
     e16:	e0 91 6d 03 	lds	r30, 0x036D
     e1a:	f0 91 6e 03 	lds	r31, 0x036E
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	09 f0       	breq	.+2      	; 0xe24 <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
     e22:	09 95       	icall

		TransmittedSuccesfully = TRUE;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 62 03 	sts	0x0362, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
     e2a:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
     e2e:	10 92 ee 00 	sts	0x00EE, r1
     e32:	d5 cf       	rjmp	.-86     	; 0xdde <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 93 61 03 	sts	0x0361, r24
       	can_retrieve_data( &LastReceivedMsg );
     e3a:	82 e5       	ldi	r24, 0x52	; 82
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
     e42:	82 e5       	ldi	r24, 0x52	; 82
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
     e4a:	88 23       	and	r24, r24
     e4c:	69 f4       	brne	.+26     	; 0xe68 <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
     e4e:	82 e5       	ldi	r24, 0x52	; 82
     e50:	93 e0       	ldi	r25, 0x03	; 3
     e52:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
     e56:	e0 91 6b 03 	lds	r30, 0x036B
     e5a:	f0 91 6c 03 	lds	r31, 0x036C
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	19 f0       	breq	.+6      	; 0xe68 <__vector_18+0x132>
    	   		rx_call_back( &LastReceivedMsg );
     e62:	82 e5       	ldi	r24, 0x52	; 82
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
     e68:	88 e9       	ldi	r24, 0x98	; 152
     e6a:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
     e6e:	80 91 ee 00 	lds	r24, 0x00EE
     e72:	8f 7d       	andi	r24, 0xDF	; 223
     e74:	80 93 ee 00 	sts	0x00EE, r24
     e78:	b2 cf       	rjmp	.-156    	; 0xdde <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     e7a:	80 91 da 00 	lds	r24, 0x00DA
     e7e:	80 93 da 00 	sts	0x00DA, r24
     e82:	af cf       	rjmp	.-162    	; 0xde2 <__vector_18+0xac>

00000e84 <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
     e8a:	98 2f       	mov	r25, r24
     e8c:	92 95       	swap	r25
     e8e:	90 7f       	andi	r25, 0xF0	; 240
   cli();
     e90:	f8 94       	cli
   CANPAGE = page;
     e92:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
     e96:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
     e9a:	48 81       	ld	r20, Y
     e9c:	59 81       	ldd	r21, Y+1	; 0x01
     e9e:	6a 81       	ldd	r22, Y+2	; 0x02
     ea0:	7b 81       	ldd	r23, Y+3	; 0x03
     ea2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	86 95       	lsr	r24
     eaa:	8f 70       	andi	r24, 0x0F	; 15
     eac:	79 f0       	breq	.+30     	; 0xecc <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
     eae:	fe 01       	movw	r30, r28
     eb0:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
     eb6:	21 91       	ld	r18, Z+
     eb8:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	2c 81       	ldd	r18, Y+4	; 0x04
     ec0:	26 95       	lsr	r18
     ec2:	2f 70       	andi	r18, 0x0F	; 15
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	ac f3       	brlt	.-22     	; 0xeb6 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
     ecc:	80 91 f0 00 	lds	r24, 0x00F0
     ed0:	8b 7f       	andi	r24, 0xFB	; 251
     ed2:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	86 95       	lsr	r24
     eda:	8f 70       	andi	r24, 0x0F	; 15
     edc:	80 65       	ori	r24, 0x50	; 80
     ede:	80 93 ef 00 	sts	0x00EF, r24
   sei();
     ee2:	78 94       	sei
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
     eea:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
     eee:	80 91 ee 00 	lds	r24, 0x00EE
     ef2:	86 ff       	sbrs	r24, 6
     ef4:	fc cf       	rjmp	.-8      	; 0xeee <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
     ef6:	08 95       	ret

00000ef8 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     ef8:	20 91 f8 00 	lds	r18, 0x00F8
     efc:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
     efe:	40 91 f9 00 	lds	r20, 0x00F9
     f02:	94 2f       	mov	r25, r20
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	28 2b       	or	r18, r24
     f08:	39 2b       	or	r19, r25
  return retval;
}
     f0a:	c9 01       	movw	r24, r18
     f0c:	08 95       	ret

00000f0e <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
     f14:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_Z17can_retrieve_dataP4sCAN>
     f18:	8f 70       	andi	r24, 0x0F	; 15
     f1a:	88 0f       	add	r24, r24
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	91 7e       	andi	r25, 0xE1	; 225
     f20:	98 2b       	or	r25, r24
     f22:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     f24:	80 91 f8 00 	lds	r24, 0x00F8
     f28:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
     f2a:	40 91 f9 00 	lds	r20, 0x00F9
     f2e:	34 2f       	mov	r19, r20
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	82 2b       	or	r24, r18
     f34:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
     f36:	9e 87       	std	Y+14, r25	; 0x0e
     f38:	8d 87       	std	Y+13, r24	; 0x0d
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	61 f0       	breq	.+24     	; 0xf5c <_Z8set_baudh+0x1c>
     f44:	84 30       	cpi	r24, 0x04	; 4
     f46:	30 f0       	brcs	.+12     	; 0xf54 <_Z8set_baudh+0x14>
     f48:	85 30       	cpi	r24, 0x05	; 5
     f4a:	d1 f0       	breq	.+52     	; 0xf80 <_Z8set_baudh+0x40>
     f4c:	85 30       	cpi	r24, 0x05	; 5
     f4e:	80 f4       	brcc	.+32     	; 0xf70 <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
     f50:	82 e1       	ldi	r24, 0x12	; 18
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 f0       	breq	.+36     	; 0xf7c <_Z8set_baudh+0x3c>
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	71 f0       	breq	.+28     	; 0xf78 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
     f5c:	8e e0       	ldi	r24, 0x0E	; 14
     f5e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
     f62:	84 e0       	ldi	r24, 0x04	; 4
     f64:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
     f68:	83 e1       	ldi	r24, 0x13	; 19
     f6a:	80 93 e4 00 	sts	0x00E4, r24
     f6e:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f70:	86 30       	cpi	r24, 0x06	; 6
     f72:	a1 f7       	brne	.-24     	; 0xf5c <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
     f74:	86 e2       	ldi	r24, 0x26	; 38
     f76:	f3 cf       	rjmp	.-26     	; 0xf5e <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     f78:	86 e0       	ldi	r24, 0x06	; 6
     f7a:	f1 cf       	rjmp	.-30     	; 0xf5e <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	ef cf       	rjmp	.-34     	; 0xf5e <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
     f80:	8e e1       	ldi	r24, 0x1E	; 30
     f82:	ed cf       	rjmp	.-38     	; 0xf5e <_Z8set_baudh+0x1e>

00000f84 <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
     f8a:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     f8e:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
     f90:	29 2f       	mov	r18, r25
     f92:	22 95       	swap	r18
     f94:	20 7f       	andi	r18, 0xF0	; 240
     f96:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
     f9a:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     f9e:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     fa2:	9f 5f       	subi	r25, 0xFF	; 255
     fa4:	96 30       	cpi	r25, 0x06	; 6
     fa6:	a1 f7       	brne	.-24     	; 0xf90 <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
     fa8:	90 ea       	ldi	r25, 0xA0	; 160
     faa:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
     fae:	0e 94 a0 07 	call	0xf40	; 0xf40 <_Z8set_baudh>
   can_init_mobs();
     fb2:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
     fb6:	80 91 d9 00 	lds	r24, 0x00D9
     fba:	82 ff       	sbrs	r24, 2
     fbc:	fc cf       	rjmp	.-8      	; 0xfb6 <_Z8can_inith+0x32>
   }
   //sei();
}
     fbe:	08 95       	ret

00000fc0 <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
     fc0:	88 23       	and	r24, r24
     fc2:	51 f4       	brne	.+20     	; 0xfd8 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
     fd0:	83 e1       	ldi	r24, 0x13	; 19
     fd2:	80 93 e4 00 	sts	0x00E4, r24
     fd6:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
     fd8:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
     fdc:	8c e0       	ldi	r24, 0x0C	; 12
     fde:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
     fe2:	86 e3       	ldi	r24, 0x36	; 54
     fe4:	80 93 e4 00 	sts	0x00E4, r24
     fe8:	08 95       	ret

00000fea <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
     fea:	88 23       	and	r24, r24
     fec:	51 f4       	brne	.+20     	; 0x1002 <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
     ffa:	83 e1       	ldi	r24, 0x13	; 19
     ffc:	80 93 e4 00 	sts	0x00E4, r24
    1000:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    1008:	8c e0       	ldi	r24, 0x0C	; 12
    100a:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    100e:	87 e3       	ldi	r24, 0x37	; 55
    1010:	80 93 e4 00 	sts	0x00E4, r24
    1014:	08 95       	ret

00001016 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1016:	88 23       	and	r24, r24
    1018:	51 f4       	brne	.+20     	; 0x102e <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    101a:	8e e0       	ldi	r24, 0x0E	; 14
    101c:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    1026:	83 e1       	ldi	r24, 0x13	; 19
    1028:	80 93 e4 00 	sts	0x00E4, r24
    102c:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    102e:	86 e0       	ldi	r24, 0x06	; 6
    1030:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    1034:	8c e0       	ldi	r24, 0x0C	; 12
    1036:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    103a:	87 e3       	ldi	r24, 0x37	; 55
    103c:	80 93 e4 00 	sts	0x00E4, r24
    1040:	08 95       	ret

00001042 <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1042:	88 23       	and	r24, r24
    1044:	51 f4       	brne	.+20     	; 0x105a <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    1046:	82 e1       	ldi	r24, 0x12	; 18
    1048:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    104c:	84 e0       	ldi	r24, 0x04	; 4
    104e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    1052:	83 e1       	ldi	r24, 0x13	; 19
    1054:	80 93 e4 00 	sts	0x00E4, r24
    1058:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    105a:	88 e0       	ldi	r24, 0x08	; 8
    105c:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    1060:	8c e0       	ldi	r24, 0x0C	; 12
    1062:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    1066:	87 e3       	ldi	r24, 0x37	; 55
    1068:	80 93 e4 00 	sts	0x00E4, r24
    106c:	08 95       	ret

0000106e <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    106e:	88 23       	and	r24, r24
    1070:	51 f4       	brne	.+20     	; 0x1086 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    1072:	8e e1       	ldi	r24, 0x1E	; 30
    1074:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    107e:	83 e1       	ldi	r24, 0x13	; 19
    1080:	80 93 e4 00 	sts	0x00E4, r24
    1084:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    1086:	8e e0       	ldi	r24, 0x0E	; 14
    1088:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    108c:	8c e0       	ldi	r24, 0x0C	; 12
    108e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    1092:	87 e3       	ldi	r24, 0x37	; 55
    1094:	80 93 e4 00 	sts	0x00E4, r24
    1098:	08 95       	ret

0000109a <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    109a:	88 23       	and	r24, r24
    109c:	51 f4       	brne	.+20     	; 0x10b2 <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    109e:	86 e2       	ldi	r24, 0x26	; 38
    10a0:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    10a4:	84 e0       	ldi	r24, 0x04	; 4
    10a6:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    10aa:	83 e1       	ldi	r24, 0x13	; 19
    10ac:	80 93 e4 00 	sts	0x00E4, r24
    10b0:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    10b2:	82 e1       	ldi	r24, 0x12	; 18
    10b4:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    10b8:	8c e0       	ldi	r24, 0x0C	; 12
    10ba:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    10be:	87 e3       	ldi	r24, 0x37	; 55
    10c0:	80 93 e4 00 	sts	0x00E4, r24
    10c4:	08 95       	ret

000010c6 <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    10c6:	83 e9       	ldi	r24, 0x93	; 147
    10c8:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    10cc:	ee e7       	ldi	r30, 0x7E	; 126
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	88 60       	ori	r24, 0x08	; 8
    10d4:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	80 93 7b 00 	sts	0x007B, r24
}
    10dc:	08 95       	ret

000010de <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
    10de:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
    10e8:	e3 e4       	ldi	r30, 0x43	; 67
    10ea:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
    10ee:	80 91 7a 00 	lds	r24, 0x007A
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
    10f8:	80 91 7a 00 	lds	r24, 0x007A
    10fc:	86 fd       	sbrc	r24, 6
    10fe:	fc cf       	rjmp	.-8      	; 0x10f8 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
    1100:	80 91 78 00 	lds	r24, 0x0078
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	ba 01       	movw	r22, r20
    110c:	6f 70       	andi	r22, 0x0F	; 15
    110e:	70 70       	andi	r23, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <_Z18pick_random_numberv+0x38>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	6a 95       	dec	r22
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <_Z18pick_random_numberv+0x34>
		result |= (tmp);
    111a:	28 2b       	or	r18, r24
    111c:	39 2b       	or	r19, r25
		tmp = ADCH;  
    111e:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    1122:	4f 5f       	subi	r20, 0xFF	; 255
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	40 31       	cpi	r20, 0x10	; 16
    1128:	51 05       	cpc	r21, r1
    112a:	f9 f6       	brne	.-66     	; 0x10ea <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
    112c:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
    112e:	c9 01       	movw	r24, r18
    1130:	08 95       	ret

00001132 <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	28 e0       	ldi	r18, 0x08	; 8
    113e:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	63 e2       	ldi	r22, 0x23	; 35
    114c:	7c ef       	ldi	r23, 0xFC	; 252
    114e:	43 e2       	ldi	r20, 0x23	; 35
    1150:	5c ef       	ldi	r21, 0xFC	; 252
    1152:	0e 94 17 05 	call	0xa2e	; 0xa2e <_Z20can_add_id_to_filterhtt>
}
    1156:	08 95       	ret

00001158 <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    1158:	83 e9       	ldi	r24, 0x93	; 147
    115a:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    115e:	80 91 7e 00 	lds	r24, 0x007E
    1162:	88 60       	ori	r24, 0x08	; 8
    1164:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    1168:	80 e8       	ldi	r24, 0x80	; 128
    116a:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
    116e:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	90 93 73 03 	sts	0x0373, r25
    1178:	80 93 72 03 	sts	0x0372, r24
    117c:	80 93 74 03 	sts	0x0374, r24

	// put adc back into mode for POT
	adc_init();
    1180:	0e 94 3c 13 	call	0x2678	; 0x2678 <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    1184:	80 91 70 03 	lds	r24, 0x0370
    1188:	88 23       	and	r24, r24
    118a:	51 f0       	breq	.+20     	; 0x11a0 <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	80 93 70 03 	sts	0x0370, r24
    1192:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    1194:	80 93 77 03 	sts	0x0377, r24
	init_complete = TRUE;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 71 03 	sts	0x0371, r24
}
    119e:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME : 
		init_path = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 77 03 	sts	0x0377, r24
		setup_instance_claim_mob();
    11a6:	0e 94 99 08 	call	0x1132	; 0x1132 <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    11aa:	10 92 6f 03 	sts	0x036F, r1
    11ae:	80 91 77 03 	lds	r24, 0x0377
    11b2:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    11b4:	80 93 77 03 	sts	0x0377, r24
	init_complete = TRUE;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 71 03 	sts	0x0371, r24
}
    11be:	08 95       	ret

000011c0 <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    11c6:	83 e2       	ldi	r24, 0x23	; 35
    11c8:	9c ef       	ldi	r25, 0xFC	; 252
    11ca:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    11ce:	68 83       	st	Y, r22
    11d0:	79 83       	std	Y+1, r23	; 0x01
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    11d6:	80 91 6f 03 	lds	r24, 0x036F
    11da:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    11dc:	80 91 70 03 	lds	r24, 0x0370
    11e0:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    11e2:	80 91 74 03 	lds	r24, 0x0374
    11e6:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    11e8:	80 91 77 03 	lds	r24, 0x0377
    11ec:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    11ee:	80 91 78 03 	lds	r24, 0x0378
    11f2:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    11f4:	80 91 f2 03 	lds	r24, 0x03F2
    11f8:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    11fe:	8e 60       	ori	r24, 0x0E	; 14
    1200:	8c 83       	std	Y+4, r24	; 0x04
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <_Z22can_instance_timeslicev>:



void can_instance_timeslice()
{
	ts_state = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 78 03 	sts	0x0378, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    120e:	40 91 70 03 	lds	r20, 0x0370
    1212:	41 30       	cpi	r20, 0x01	; 1
    1214:	59 f1       	breq	.+86     	; 0x126c <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    1216:	80 91 71 03 	lds	r24, 0x0371
    121a:	88 23       	and	r24, r24
    121c:	39 f1       	breq	.+78     	; 0x126c <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    121e:	80 91 72 03 	lds	r24, 0x0372
    1222:	90 91 73 03 	lds	r25, 0x0373
    1226:	9c 01       	movw	r18, r24
    1228:	21 50       	subi	r18, 0x01	; 1
    122a:	30 40       	sbci	r19, 0x00	; 0
    122c:	30 93 73 03 	sts	0x0373, r19
    1230:	20 93 72 03 	sts	0x0372, r18
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	d1 f4       	brne	.+52     	; 0x126c <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	90 93 73 03 	sts	0x0373, r25
    1240:	80 93 72 03 	sts	0x0372, r24
	ts_state   = 2;
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	80 93 78 03 	sts	0x0378, r24

	if (Confirmed==NOT_CLAIMED)
    124a:	44 23       	and	r20, r20
    124c:	91 f0       	breq	.+36     	; 0x1272 <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    124e:	42 30       	cpi	r20, 0x02	; 2
    1250:	09 f4       	brne	.+2      	; 0x1254 <_Z22can_instance_timeslicev+0x4c>
    1252:	5a c0       	rjmp	.+180    	; 0x1308 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    1254:	40 32       	cpi	r20, 0x20	; 32
    1256:	39 f1       	breq	.+78     	; 0x12a6 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
    1258:	40 38       	cpi	r20, 0x80	; 128
    125a:	09 f4       	brne	.+2      	; 0x125e <_Z22can_instance_timeslicev+0x56>
    125c:	47 c0       	rjmp	.+142    	; 0x12ec <_Z22can_instance_timeslicev+0xe4>

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    125e:	40 34       	cpi	r20, 0x40	; 64
    1260:	31 f0       	breq	.+12     	; 0x126e <_Z22can_instance_timeslicev+0x66>
    1262:	80 91 78 03 	lds	r24, 0x0378
    1266:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
    1268:	80 93 78 03 	sts	0x0378, r24
    126c:	08 95       	ret

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    126e:	86 e8       	ldi	r24, 0x86	; 134
    1270:	fb cf       	rjmp	.-10     	; 0x1268 <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state   = 2;

	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	80 93 78 03 	sts	0x0378, r24
		Confirmed = CLAIM_PENDING;
    1278:	80 e2       	ldi	r24, 0x20	; 32
    127a:	80 93 70 03 	sts	0x0370, r24
		can_prep_instance_request( &msg2, rand_instance );
    127e:	83 e4       	ldi	r24, 0x43	; 67
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	60 91 74 03 	lds	r22, 0x0374
    1286:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	63 e4       	ldi	r22, 0x43	; 67
    128e:	73 e0       	ldi	r23, 0x03	; 3
    1290:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    1294:	8c e2       	ldi	r24, 0x2C	; 44
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	90 93 76 03 	sts	0x0376, r25
    129c:	80 93 75 03 	sts	0x0375, r24
    12a0:	40 91 70 03 	lds	r20, 0x0370
    12a4:	d4 cf       	rjmp	.-88     	; 0x124e <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	80 93 78 03 	sts	0x0378, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT 
		cli();
    12ac:	f8 94       	cli
		byte restore = CANPAGE;
    12ae:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    12b2:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    12b6:	80 91 ee 00 	lds	r24, 0x00EE
    12ba:	86 ff       	sbrs	r24, 6
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	80 93 70 03 	sts	0x0370, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in with same ID, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    12c4:	80 91 75 03 	lds	r24, 0x0375
    12c8:	90 91 76 03 	lds	r25, 0x0376
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	90 93 76 03 	sts	0x0376, r25
    12d2:	80 93 75 03 	sts	0x0375, r24
		if (timeout_10ms_mult == 0)
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	19 f4       	brne	.+6      	; 0x12e0 <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
    12da:	84 e0       	ldi	r24, 0x04	; 4
    12dc:	80 93 70 03 	sts	0x0370, r24
		}
		CANPAGE = restore;
    12e0:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    12e4:	78 94       	sei
    12e6:	40 91 70 03 	lds	r20, 0x0370
    12ea:	b6 cf       	rjmp	.-148    	; 0x1258 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state  = 5;
    12ec:	85 e0       	ldi	r24, 0x05	; 5
    12ee:	80 93 78 03 	sts	0x0378, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 93 70 03 	sts	0x0370, r24
		
		cli();  save_configuration();  sei();
    12f8:	f8 94       	cli
    12fa:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z18save_configurationv>
    12fe:	78 94       	sei
    1300:	80 91 78 03 	lds	r24, 0x0378
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	b0 cf       	rjmp	.-160    	; 0x1268 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    1308:	87 e0       	ldi	r24, 0x07	; 7
    130a:	80 93 78 03 	sts	0x0378, r24
		Confirmed = CLAIMED;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 70 03 	sts	0x0370, r24
		can_prep_instance_request( &msg2, MyInstance );
    1314:	83 e4       	ldi	r24, 0x43	; 67
    1316:	93 e0       	ldi	r25, 0x03	; 3
    1318:	60 91 6f 03 	lds	r22, 0x036F
    131c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	63 e4       	ldi	r22, 0x43	; 67
    1324:	73 e0       	ldi	r23, 0x03	; 3
    1326:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
    132a:	40 91 70 03 	lds	r20, 0x0370
    132e:	92 cf       	rjmp	.-220    	; 0x1254 <_Z22can_instance_timeslicev+0x4c>

00001330 <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    1336:	84 e2       	ldi	r24, 0x24	; 36
    1338:	9c ef       	ldi	r25, 0xFC	; 252
    133a:	60 91 6f 03 	lds	r22, 0x036F
    133e:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1342:	68 83       	st	Y, r22
    1344:	79 83       	std	Y+1, r23	; 0x01
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    134a:	80 91 6f 03 	lds	r24, 0x036F
    134e:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1354:	82 60       	ori	r24, 0x02	; 2
    1356:	8c 83       	std	Y+4, r24	; 0x04
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    135e:	fc 01       	movw	r30, r24
    1360:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    1362:	90 91 6f 03 	lds	r25, 0x036F
    1366:	89 17       	cp	r24, r25
    1368:	18 f0       	brcs	.+6      	; 0x1370 <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	80 93 6f 03 	sts	0x036F, r24
    1370:	08 95       	ret

00001372 <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    1372:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	78 2f       	mov	r23, r24
    1378:	89 2f       	mov	r24, r25
    137a:	92 2f       	mov	r25, r18
    137c:	08 95       	ret

0000137e <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    137e:	38 2f       	mov	r19, r24
    1380:	26 2f       	mov	r18, r22
    1382:	87 2f       	mov	r24, r23
    1384:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    1386:	63 2f       	mov	r22, r19
    1388:	72 2f       	mov	r23, r18
    138a:	08 95       	ret

0000138c <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    138c:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    138e:	08 95       	ret

00001390 <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    1390:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    1392:	08 95       	ret

00001394 <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    1394:	89 2f       	mov	r24, r25
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	08 95       	ret

0000139a <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    139a:	e1 e0       	ldi	r30, 0x01	; 1
    139c:	62 17       	cp	r22, r18
    139e:	73 07       	cpc	r23, r19
    13a0:	84 07       	cpc	r24, r20
    13a2:	95 07       	cpc	r25, r21
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <_Z5match6idTypeS_+0xe>
    13a6:	e0 e0       	ldi	r30, 0x00	; 0
}
    13a8:	8e 2f       	mov	r24, r30
    13aa:	08 95       	ret

000013ac <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	62 13       	cpse	r22, r18
    13b0:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    13b2:	08 95       	ret

000013b4 <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    13b4:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    13b6:	27 2f       	mov	r18, r23
    13b8:	38 2f       	mov	r19, r24
    13ba:	69 2f       	mov	r22, r25
    13bc:	74 2f       	mov	r23, r20
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	26 17       	cp	r18, r22
    13c2:	37 07       	cpc	r19, r23
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <_Z8id_match6idTypeS_+0x14>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
}
    13c8:	08 95       	ret

000013ca <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	49 13       	cpse	r20, r25
    13ce:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    13d0:	08 95       	ret

000013d2 <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    13d2:	90 93 7f 03 	sts	0x037F, r25
    13d6:	80 93 7e 03 	sts	0x037E, r24
}
    13da:	08 95       	ret

000013dc <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    13e2:	81 e1       	ldi	r24, 0x11	; 17
    13e4:	9c ef       	ldi	r25, 0xFC	; 252
    13e6:	60 91 6f 03 	lds	r22, 0x036F
    13ea:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    13ee:	68 83       	st	Y, r22
    13f0:	79 83       	std	Y+1, r23	; 0x01
    13f2:	8a 83       	std	Y+2, r24	; 0x02
    13f4:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    13fa:	80 91 6f 03 	lds	r24, 0x036F
    13fe:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    1400:	80 91 79 03 	lds	r24, 0x0379
    1404:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    1406:	80 91 7a 03 	lds	r24, 0x037A
    140a:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	8c 83       	std	Y+4, r24	; 0x04
}
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    1420:	82 e1       	ldi	r24, 0x12	; 18
    1422:	9c ef       	ldi	r25, 0xFC	; 252
    1424:	60 91 6f 03 	lds	r22, 0x036F
    1428:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    142c:	68 83       	st	Y, r22
    142e:	79 83       	std	Y+1, r23	; 0x01
    1430:	8a 83       	std	Y+2, r24	; 0x02
    1432:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    1438:	81 e4       	ldi	r24, 0x41	; 65
    143a:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    1440:	9f e0       	ldi	r25, 0x0F	; 15
    1442:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    1444:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    1446:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    144c:	8c 60       	ori	r24, 0x0C	; 12
    144e:	8c 83       	std	Y+4, r24	; 0x04
}
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    145c:	83 e1       	ldi	r24, 0x13	; 19
    145e:	9c ef       	ldi	r25, 0xFC	; 252
    1460:	60 91 6f 03 	lds	r22, 0x036F
    1464:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1468:	68 83       	st	Y, r22
    146a:	79 83       	std	Y+1, r23	; 0x01
    146c:	8a 83       	std	Y+2, r24	; 0x02
    146e:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    1474:	86 e5       	ldi	r24, 0x56	; 86
    1476:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    1478:	88 e7       	ldi	r24, 0x78	; 120
    147a:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    147c:	8c e9       	ldi	r24, 0x9C	; 156
    147e:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    1480:	8e ed       	ldi	r24, 0xDE	; 222
    1482:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1488:	8a 60       	ori	r24, 0x0A	; 10
    148a:	8c 83       	std	Y+4, r24	; 0x04
}
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	08 95       	ret

00001492 <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    1498:	84 e1       	ldi	r24, 0x14	; 20
    149a:	9c ef       	ldi	r25, 0xFC	; 252
    149c:	60 91 6f 03 	lds	r22, 0x036F
    14a0:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    14a4:	68 83       	st	Y, r22
    14a6:	79 83       	std	Y+1, r23	; 0x01
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    14ac:	80 91 7b 03 	lds	r24, 0x037B
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    14b4:	de 01       	movw	r26, r28
    14b6:	16 96       	adiw	r26, 0x06	; 6
    14b8:	9c 01       	movw	r18, r24
    14ba:	28 5f       	subi	r18, 0xF8	; 248
    14bc:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    14be:	fc 01       	movw	r30, r24
    14c0:	e4 58       	subi	r30, 0x84	; 132
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	e4 91       	lpm	r30, Z+
    14c6:	ed 93       	st	X+, r30
    14c8:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    14ca:	82 17       	cp	r24, r18
    14cc:	93 07       	cpc	r25, r19
    14ce:	b9 f7       	brne	.-18     	; 0x14be <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    14d4:	82 61       	ori	r24, 0x12	; 18
    14d6:	8c 83       	std	Y+4, r24	; 0x04
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    14de:	80 91 80 03 	lds	r24, 0x0380
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	d9 f0       	breq	.+54     	; 0x151c <_Z24can_board_presence_replyv+0x3e>
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	28 f0       	brcs	.+10     	; 0x14f4 <_Z24can_board_presence_replyv+0x16>
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	09 f1       	breq	.+66     	; 0x1530 <_Z24can_board_presence_replyv+0x52>
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	59 f0       	breq	.+22     	; 0x1508 <_Z24can_board_presence_replyv+0x2a>
    14f2:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    14f4:	83 e4       	ldi	r24, 0x43	; 67
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	63 e4       	ldi	r22, 0x43	; 67
    1500:	73 e0       	ldi	r23, 0x03	; 3
    1502:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1506:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    1508:	83 e4       	ldi	r24, 0x43	; 67
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	0e 94 49 0a 	call	0x1492	; 0x1492 <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	63 e4       	ldi	r22, 0x43	; 67
    1514:	73 e0       	ldi	r23, 0x03	; 3
    1516:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
    151a:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    151c:	83 e4       	ldi	r24, 0x43	; 67
    151e:	93 e0       	ldi	r25, 0x03	; 3
    1520:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	63 e4       	ldi	r22, 0x43	; 67
    1528:	73 e0       	ldi	r23, 0x03	; 3
    152a:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    152e:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    1530:	83 e4       	ldi	r24, 0x43	; 67
    1532:	93 e0       	ldi	r25, 0x03	; 3
    1534:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	63 e4       	ldi	r22, 0x43	; 67
    153c:	73 e0       	ldi	r23, 0x03	; 3
    153e:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1542:	08 95       	ret

00001544 <_Z19can_board_timeslicev>:
{	
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    1544:	80 91 7c 03 	lds	r24, 0x037C
    1548:	80 fd       	sbrc	r24, 0
    154a:	59 c0       	rjmp	.+178    	; 0x15fe <_Z19can_board_timeslicev+0xba>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    154c:	81 fd       	sbrc	r24, 1
    154e:	4c c0       	rjmp	.+152    	; 0x15e8 <_Z19can_board_timeslicev+0xa4>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    1550:	82 fd       	sbrc	r24, 2
    1552:	35 c0       	rjmp	.+106    	; 0x15be <_Z19can_board_timeslicev+0x7a>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
    1554:	83 fd       	sbrc	r24, 3
    1556:	26 c0       	rjmp	.+76     	; 0x15a4 <_Z19can_board_timeslicev+0x60>
		save_configuration();
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    1558:	84 fd       	sbrc	r24, 4
    155a:	1a c0       	rjmp	.+52     	; 0x1590 <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    155c:	85 ff       	sbrs	r24, 5
    155e:	0d c0       	rjmp	.+26     	; 0x157a <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)
    1560:	80 91 07 01 	lds	r24, 0x0107
    1564:	90 91 08 01 	lds	r25, 0x0108
    1568:	9c 01       	movw	r18, r24
    156a:	21 50       	subi	r18, 0x01	; 1
    156c:	30 40       	sbci	r19, 0x00	; 0
    156e:	30 93 08 01 	sts	0x0108, r19
    1572:	20 93 07 01 	sts	0x0107, r18
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	09 f0       	breq	.+2      	; 0x157c <_Z19can_board_timeslicev+0x38>
    157a:	08 95       	ret
		{
			cli();
    157c:	f8 94       	cli
			can_board_presence_reply( );
    157e:	0e 94 6f 0a 	call	0x14de	; 0x14de <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    1582:	80 91 7c 03 	lds	r24, 0x037C
    1586:	8f 7d       	andi	r24, 0xDF	; 223
    1588:	80 93 7c 03 	sts	0x037C, r24
			sei();
    158c:	78 94       	sei
    158e:	08 95       	ret
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    1590:	f8 94       	cli
		save_cal();
    1592:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z8save_calv>
		System_Send_Status &= (~0x10);
    1596:	80 91 7c 03 	lds	r24, 0x037C
    159a:	8f 7e       	andi	r24, 0xEF	; 239
    159c:	80 93 7c 03 	sts	0x037C, r24
		sei();
    15a0:	78 94       	sei
    15a2:	dc cf       	rjmp	.-72     	; 0x155c <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
		cli();
    15a4:	f8 94       	cli
		save_configuration();
    15a6:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z18save_configurationv>
		led_on(4);
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z6led_onh>
		System_Send_Status &= (~0x08);
    15b0:	80 91 7c 03 	lds	r24, 0x037C
    15b4:	87 7f       	andi	r24, 0xF7	; 247
    15b6:	80 93 7c 03 	sts	0x037C, r24
		sei();
    15ba:	78 94       	sei
    15bc:	cd cf       	rjmp	.-102    	; 0x1558 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    15be:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    15c0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    15c4:	83 e4       	ldi	r24, 0x43	; 67
    15c6:	93 e0       	ldi	r25, 0x03	; 3
    15c8:	60 91 6f 03 	lds	r22, 0x036F
    15cc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	63 e4       	ldi	r22, 0x43	; 67
    15d4:	73 e0       	ldi	r23, 0x03	; 3
    15d6:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    15da:	80 91 7c 03 	lds	r24, 0x037C
    15de:	8b 7f       	andi	r24, 0xFB	; 251
    15e0:	80 93 7c 03 	sts	0x037C, r24
		sei();
    15e4:	78 94       	sei
    15e6:	b6 cf       	rjmp	.-148    	; 0x1554 <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	63 e4       	ldi	r22, 0x43	; 67
    15ec:	73 e0       	ldi	r23, 0x03	; 3
    15ee:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    15f2:	80 91 7c 03 	lds	r24, 0x037C
    15f6:	8d 7f       	andi	r24, 0xFD	; 253
    15f8:	80 93 7c 03 	sts	0x037C, r24
    15fc:	a9 cf       	rjmp	.-174    	; 0x1550 <_Z19can_board_timeslicev+0xc>
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	64 e3       	ldi	r22, 0x34	; 52
    1602:	73 e0       	ldi	r23, 0x03	; 3
    1604:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    1608:	80 91 7c 03 	lds	r24, 0x037C
    160c:	8e 7f       	andi	r24, 0xFE	; 254
    160e:	80 93 7c 03 	sts	0x037C, r24
    1612:	9c cf       	rjmp	.-200    	; 0x154c <_Z19can_board_timeslicev+0x8>

00001614 <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    161a:	87 e2       	ldi	r24, 0x27	; 39
    161c:	9c ef       	ldi	r25, 0xFC	; 252
    161e:	60 91 6f 03 	lds	r22, 0x036F
    1622:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1626:	68 83       	st	Y, r22
    1628:	79 83       	std	Y+1, r23	; 0x01
    162a:	8a 83       	std	Y+2, r24	; 0x02
    162c:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    162e:	80 91 ee 03 	lds	r24, 0x03EE
    1632:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    1634:	80 91 ef 03 	lds	r24, 0x03EF
    1638:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    163a:	80 91 f0 03 	lds	r24, 0x03F0
    163e:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    1640:	80 91 f1 03 	lds	r24, 0x03F1
    1644:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    164a:	88 60       	ori	r24, 0x08	; 8
    164c:	8c 83       	std	Y+4, r24	; 0x04
}
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    165a:	85 e1       	ldi	r24, 0x15	; 21
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	60 91 6f 03 	lds	r22, 0x036F
    1662:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	68 81       	ld	r22, Y
    166c:	79 81       	ldd	r23, Y+1	; 0x01
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	9b 81       	ldd	r25, Y+3	; 0x03
    1672:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
    1676:	88 23       	and	r24, r24
    1678:	39 f0       	breq	.+14     	; 0x1688 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
    167a:	ce 01       	movw	r24, r28
    167c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    1680:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    1688:	85 e1       	ldi	r24, 0x15	; 21
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	6f ef       	ldi	r22, 0xFF	; 255
    168e:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1692:	9b 01       	movw	r18, r22
    1694:	ac 01       	movw	r20, r24
    1696:	68 81       	ld	r22, Y
    1698:	79 81       	ldd	r23, Y+1	; 0x01
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    16a2:	88 23       	and	r24, r24
    16a4:	51 f7       	brne	.-44     	; 0x167a <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
		return TRUE;
	}
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    16a6:	80 e1       	ldi	r24, 0x10	; 16
    16a8:	9c ef       	ldi	r25, 0xFC	; 252
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    16b0:	9b 01       	movw	r18, r22
    16b2:	ac 01       	movw	r20, r24
    16b4:	68 81       	ld	r22, Y
    16b6:	79 81       	ldd	r23, Y+1	; 0x01
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z8id_match6idTypeS_>
    16c0:	88 23       	and	r24, r24
    16c2:	91 f0       	breq	.+36     	; 0x16e8 <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.
			Need to delay by the instance number of timeslices.
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    16c4:	80 91 7c 03 	lds	r24, 0x037C
    16c8:	80 62       	ori	r24, 0x20	; 32
    16ca:	80 93 7c 03 	sts	0x037C, r24
		Board_presence_response_type = mMsg->data[0];
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	80 93 80 03 	sts	0x0380, r24
		Board_presence_delay 		 = MyInstance;
    16d4:	80 91 6f 03 	lds	r24, 0x036F
    16d8:	80 93 07 01 	sts	0x0107, r24
    16dc:	10 92 08 01 	sts	0x0108, r1
		return TRUE;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    16e8:	82 e2       	ldi	r24, 0x22	; 34
    16ea:	9c ef       	ldi	r25, 0xFC	; 252
    16ec:	60 91 6f 03 	lds	r22, 0x036F
    16f0:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    16f4:	9b 01       	movw	r18, r22
    16f6:	ac 01       	movw	r20, r24
    16f8:	68 81       	ld	r22, Y
    16fa:	79 81       	ldd	r23, Y+1	; 0x01
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
    1704:	88 23       	and	r24, r24
    1706:	f1 f0       	breq	.+60     	; 0x1744 <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	84 ff       	sbrs	r24, 4
    170c:	14 c0       	rjmp	.+40     	; 0x1736 <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 ); 
    170e:	84 e3       	ldi	r24, 0x34	; 52
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 0a 0b 	call	0x1614	; 0x1614 <_Z18can_prep_configureP4sCAN>
			System_Send_Status = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 7c 03 	sts	0x037C, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    171c:	e0 91 7e 03 	lds	r30, 0x037E
    1720:	f0 91 7f 03 	lds	r31, 0x037F
    1724:	30 97       	sbiw	r30, 0x00	; 0
    1726:	19 f1       	breq	.+70     	; 0x176e <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	8f 70       	andi	r24, 0x0F	; 15
    172c:	09 95       	icall
		return TRUE;
    172e:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 ); 
			System_Send_Status = 1;
		} else {
			can_parse_configure_request( mMsg );	// in configuration.c
    1736:	ce 01       	movw	r24, r28
    1738:	0e 94 ba 11 	call	0x2374	; 0x2374 <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    173c:	88 e0       	ldi	r24, 0x08	; 8
    173e:	80 93 7c 03 	sts	0x037C, r24
    1742:	ec cf       	rjmp	.-40     	; 0x171c <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1744:	81 e2       	ldi	r24, 0x21	; 33
    1746:	9c ef       	ldi	r25, 0xFC	; 252
    1748:	60 91 6f 03 	lds	r22, 0x036F
    174c:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1750:	9b 01       	movw	r18, r22
    1752:	ac 01       	movw	r20, r24
    1754:	68 81       	ld	r22, Y
    1756:	79 81       	ldd	r23, Y+1	; 0x01
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	9b 81       	ldd	r25, Y+3	; 0x03
    175c:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
    1760:	88 23       	and	r24, r24
    1762:	39 f0       	breq	.+14     	; 0x1772 <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    1764:	88 e0       	ldi	r24, 0x08	; 8
    1766:	80 93 7c 03 	sts	0x037C, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	8a cf       	rjmp	.-236    	; 0x1682 <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	88 cf       	rjmp	.-240    	; 0x1682 <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    1772:	81 e2       	ldi	r24, 0x21	; 33
    1774:	9c ef       	ldi	r25, 0xFC	; 252
    1776:	6f ef       	ldi	r22, 0xFF	; 255
    1778:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	68 81       	ld	r22, Y
    1782:	79 81       	ldd	r23, Y+1	; 0x01
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	9b 81       	ldd	r25, Y+3	; 0x03
    1788:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    178c:	88 23       	and	r24, r24
    178e:	51 f7       	brne	.-44     	; 0x1764 <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    1790:	85 e2       	ldi	r24, 0x25	; 37
    1792:	9c ef       	ldi	r25, 0xFC	; 252
    1794:	60 91 6f 03 	lds	r22, 0x036F
    1798:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    179c:	9b 01       	movw	r18, r22
    179e:	ac 01       	movw	r20, r24
    17a0:	68 81       	ld	r22, Y
    17a2:	79 81       	ldd	r23, Y+1	; 0x01
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
    17ac:	88 23       	and	r24, r24
    17ae:	49 f5       	brne	.+82     	; 0x1802 <_Z23can_board_msg_responderP4sCAN+0x1ae>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    17b0:	86 e2       	ldi	r24, 0x26	; 38
    17b2:	9c ef       	ldi	r25, 0xFC	; 252
    17b4:	60 91 6f 03 	lds	r22, 0x036F
    17b8:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    17bc:	9b 01       	movw	r18, r22
    17be:	ac 01       	movw	r20, r24
    17c0:	68 81       	ld	r22, Y
    17c2:	79 81       	ldd	r23, Y+1	; 0x01
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
    17cc:	88 23       	and	r24, r24
    17ce:	79 f1       	breq	.+94     	; 0x182e <_Z23can_board_msg_responderP4sCAN+0x1da>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	8e 71       	andi	r24, 0x1E	; 30
    17d4:	84 30       	cpi	r24, 0x04	; 4
    17d6:	59 f6       	brne	.-106    	; 0x176e <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    17d8:	3d 81       	ldd	r19, Y+5	; 0x05
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	82 2b       	or	r24, r18
    17e2:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    17e4:	22 e1       	ldi	r18, 0x12	; 18
    17e6:	84 33       	cpi	r24, 0x34	; 52
    17e8:	92 07       	cpc	r25, r18
    17ea:	09 f6       	brne	.-126    	; 0x176e <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    17ec:	85 e5       	ldi	r24, 0x55	; 85
    17ee:	80 93 77 03 	sts	0x0377, r24
				init_complete = FALSE;
    17f2:	10 92 71 03 	sts	0x0371, r1
				Confirmed     = NOT_CLAIMED;
    17f6:	10 92 70 03 	sts	0x0370, r1
				can_instance_init();		// This fires off the sequencing right away.
    17fa:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	40 cf       	rjmp	.-384    	; 0x1682 <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	80 93 70 03 	sts	0x0370, r24
		MyInstance = mMsg->data[0];
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	80 93 6f 03 	sts	0x036F, r24
		System_Send_Status |= 0x08;
    180e:	80 91 7c 03 	lds	r24, 0x037C
    1812:	88 60       	ori	r24, 0x08	; 8
    1814:	80 93 7c 03 	sts	0x037C, r24
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    181e:	60 91 6f 03 	lds	r22, 0x036F
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z26can_add_instance_to_filterht>
		return TRUE;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	2a cf       	rjmp	.-428    	; 0x1682 <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    182e:	86 e2       	ldi	r24, 0x26	; 38
    1830:	9c ef       	ldi	r25, 0xFC	; 252
    1832:	6f ef       	ldi	r22, 0xFF	; 255
    1834:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	68 81       	ld	r22, Y
    183e:	79 81       	ldd	r23, Y+1	; 0x01
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z5match6idTypeS_>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    1848:	88 23       	and	r24, r24
    184a:	11 f6       	brne	.-124    	; 0x17d0 <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    184c:	83 e2       	ldi	r24, 0x23	; 35
    184e:	9c ef       	ldi	r25, 0xFC	; 252
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z14create_CAN_eidth>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	68 81       	ld	r22, Y
    185c:	79 81       	ldd	r23, Y+1	; 0x01
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	9b 81       	ldd	r25, Y+3	; 0x03
    1862:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z8id_match6idTypeS_>
    1866:	88 23       	and	r24, r24
    1868:	09 f4       	brne	.+2      	; 0x186c <_Z23can_board_msg_responderP4sCAN+0x218>
    186a:	0b cf       	rjmp	.-490    	; 0x1682 <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	80 91 6f 03 	lds	r24, 0x036F
    1872:	98 17       	cp	r25, r24
    1874:	09 f0       	breq	.+2      	; 0x1878 <_Z23can_board_msg_responderP4sCAN+0x224>
    1876:	7b cf       	rjmp	.-266    	; 0x176e <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    1878:	80 91 70 03 	lds	r24, 0x0370
    187c:	80 32       	cpi	r24, 0x20	; 32
    187e:	41 f0       	breq	.+16     	; 0x1890 <_Z23can_board_msg_responderP4sCAN+0x23c>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    1880:	88 23       	and	r24, r24
    1882:	09 f0       	breq	.+2      	; 0x1886 <_Z23can_board_msg_responderP4sCAN+0x232>
    1884:	74 cf       	rjmp	.-280    	; 0x176e <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    1886:	ce 01       	movw	r24, r28
    1888:	0e 94 af 09 	call	0x135e	; 0x135e <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	f9 ce       	rjmp	.-526    	; 0x1682 <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    1890:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    189a:	80 91 ef 00 	lds	r24, 0x00EF
    189e:	8f 73       	andi	r24, 0x3F	; 63
    18a0:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    18a4:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    18a8:	10 92 70 03 	sts	0x0370, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    18ac:	ce 01       	movw	r24, r28
    18ae:	0e 94 af 09 	call	0x135e	; 0x135e <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	e6 ce       	rjmp	.-564    	; 0x1682 <_Z23can_board_msg_responderP4sCAN+0x2e>

000018b6 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	7b 01       	movw	r14, r22
    18c4:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    18c6:	c0 e0       	ldi	r28, 0x00	; 0
    18c8:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    18ca:	ce 01       	movw	r24, r28
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	8c 0f       	add	r24, r28
    18d2:	9d 1f       	adc	r25, r29
    18d4:	fc 01       	movw	r30, r24
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	e8 0f       	add	r30, r24
    18e0:	f9 1f       	adc	r31, r25
    18e2:	ef 57       	subi	r30, 0x7F	; 127
    18e4:	fc 4f       	sbci	r31, 0xFC	; 252
    18e6:	20 81       	ld	r18, Z
    18e8:	31 81       	ldd	r19, Z+1	; 0x01
    18ea:	42 81       	ldd	r20, Z+2	; 0x02
    18ec:	53 81       	ldd	r21, Z+3	; 0x03
    18ee:	c8 01       	movw	r24, r16
    18f0:	b7 01       	movw	r22, r14
    18f2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z8id_match6idTypeS_>
    18f6:	88 23       	and	r24, r24
    18f8:	61 f4       	brne	.+24     	; 0x1912 <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    18fa:	21 96       	adiw	r28, 0x01	; 1
    18fc:	c6 30       	cpi	r28, 0x06	; 6
    18fe:	d1 05       	cpc	r29, r1
    1900:	21 f7       	brne	.-56     	; 0x18ca <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    1902:	8f ef       	ldi	r24, 0xFF	; 255
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    1912:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    1922:	28 2f       	mov	r18, r24
    1924:	39 2f       	mov	r19, r25
    1926:	d9 01       	movw	r26, r18
    1928:	86 2f       	mov	r24, r22
    192a:	97 2f       	mov	r25, r23
    192c:	fc 01       	movw	r30, r24
    192e:	8f e0       	ldi	r24, 0x0F	; 15
    1930:	01 90       	ld	r0, Z+
    1932:	0d 92       	st	X+, r0
    1934:	81 50       	subi	r24, 0x01	; 1
    1936:	e1 f7       	brne	.-8      	; 0x1930 <_Z12copy_can_msgP4sCANS0_+0xe>
}
    1938:	08 95       	ret

0000193a <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    193a:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    193c:	80 91 db 03 	lds	r24, 0x03DB
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9c 01       	movw	r18, r24
    1944:	22 0f       	add	r18, r18
    1946:	33 1f       	adc	r19, r19
    1948:	28 0f       	add	r18, r24
    194a:	39 1f       	adc	r19, r25
    194c:	c9 01       	movw	r24, r18
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	8f 57       	subi	r24, 0x7F	; 127
    195c:	9c 4f       	sbci	r25, 0xFC	; 252
    195e:	0e 94 91 0c 	call	0x1922	; 0x1922 <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    1962:	80 91 db 03 	lds	r24, 0x03DB
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	80 93 db 03 	sts	0x03DB, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    196c:	86 30       	cpi	r24, 0x06	; 6
    196e:	10 f0       	brcs	.+4      	; 0x1974 <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    1970:	10 92 db 03 	sts	0x03DB, r1
    1974:	08 95       	ret

00001976 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    197c:	68 81       	ld	r22, Y
    197e:	79 81       	ldd	r23, Y+1	; 0x01
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    1988:	8f 3f       	cpi	r24, 0xFF	; 255
    198a:	a9 f0       	breq	.+42     	; 0x19b6 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9c 01       	movw	r18, r24
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	28 0f       	add	r18, r24
    1996:	39 1f       	adc	r19, r25
    1998:	c9 01       	movw	r24, r18
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
    19a6:	8f 57       	subi	r24, 0x7F	; 127
    19a8:	9c 4f       	sbci	r25, 0xFC	; 252
    19aa:	be 01       	movw	r22, r28
    19ac:	0e 94 91 0c 	call	0x1922	; 0x1922 <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    19b6:	80 91 db 03 	lds	r24, 0x03DB
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c 01       	movw	r18, r24
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	28 0f       	add	r18, r24
    19c4:	39 1f       	adc	r19, r25
    19c6:	c9 01       	movw	r24, r18
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	82 0f       	add	r24, r18
    19d2:	93 1f       	adc	r25, r19
    19d4:	8f 57       	subi	r24, 0x7F	; 127
    19d6:	9c 4f       	sbci	r25, 0xFC	; 252
    19d8:	be 01       	movw	r22, r28
    19da:	0e 94 91 0c 	call	0x1922	; 0x1922 <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    19de:	80 91 db 03 	lds	r24, 0x03DB
    19e2:	8f 5f       	subi	r24, 0xFF	; 255
    19e4:	80 93 db 03 	sts	0x03DB, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    19e8:	86 30       	cpi	r24, 0x06	; 6
    19ea:	10 f3       	brcs	.-60     	; 0x19b0 <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    19ec:	10 92 db 03 	sts	0x03DB, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <_Z12QueueMessageP4sCAN>:
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    19f6:	20 91 f1 03 	lds	r18, 0x03F1
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    19fa:	21 fd       	sbrc	r18, 1
    19fc:	03 c0       	rjmp	.+6      	; 0x1a04 <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    19fe:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_Z17addMailboxHistoryP4sCAN>
    1a02:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    1a04:	0e 94 9d 0c 	call	0x193a	; 0x193a <_Z16addNormalHistoryP4sCAN>
    1a08:	08 95       	ret

00001a0a <_Z15RetrieveMessagev>:
    1a0a:	80 91 f1 03 	lds	r24, 0x03F1
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1a0e:	81 ff       	sbrs	r24, 1
    1a10:	1b c0       	rjmp	.+54     	; 0x1a48 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    1a12:	20 91 dc 03 	lds	r18, 0x03DC
    1a16:	80 91 db 03 	lds	r24, 0x03DB
    1a1a:	28 17       	cp	r18, r24
    1a1c:	c9 f0       	breq	.+50     	; 0x1a50 <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    1a1e:	82 2f       	mov	r24, r18
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
    1a22:	80 93 dc 03 	sts	0x03DC, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1a26:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    1a28:	c9 01       	movw	r24, r18
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	82 0f       	add	r24, r18
    1a30:	93 1f       	adc	r25, r19
    1a32:	9c 01       	movw	r18, r24
    1a34:	22 0f       	add	r18, r18
    1a36:	33 1f       	adc	r19, r19
    1a38:	22 0f       	add	r18, r18
    1a3a:	33 1f       	adc	r19, r19
    1a3c:	28 0f       	add	r18, r24
    1a3e:	39 1f       	adc	r19, r25
    1a40:	2f 57       	subi	r18, 0x7F	; 127
    1a42:	3c 4f       	sbci	r19, 0xFC	; 252
		}
	}
	return NULL;
}
    1a44:	c9 01       	movw	r24, r18
    1a46:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
}
    1a4c:	c9 01       	movw	r24, r18
    1a4e:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    1a50:	10 92 dc 03 	sts	0x03DC, r1
			RxHead = 0;
    1a54:	10 92 db 03 	sts	0x03DB, r1
			return NULL;
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	f3 cf       	rjmp	.-26     	; 0x1a44 <_Z15RetrieveMessagev+0x3a>

00001a5e <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	ac 01       	movw	r20, r24
    1a62:	44 0f       	add	r20, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	48 0f       	add	r20, r24
    1a68:	59 1f       	adc	r21, r25
    1a6a:	9a 01       	movw	r18, r20
    1a6c:	22 0f       	add	r18, r18
    1a6e:	33 1f       	adc	r19, r19
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	24 0f       	add	r18, r20
    1a76:	35 1f       	adc	r19, r21
    1a78:	2f 57       	subi	r18, 0x7F	; 127
    1a7a:	3c 4f       	sbci	r19, 0xFC	; 252
}
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	08 95       	ret

00001a80 <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    1a80:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_Z15RetrieveMessagev>
	if (msg)
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <_Z15CAN_Q_Timeslicev+0x10>
	{
		SET_LED_2();
    1a88:	5d 9a       	sbi	0x0b, 5	; 11
    1a8a:	20 91 f1 03 	lds	r18, 0x03F1
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1a8e:	21 ff       	sbrs	r18, 1
    1a90:	08 95       	ret
			can_file_message( msg );
    1a92:	0e 94 ca 00 	call	0x194	; 0x194 <_Z16can_file_messageP4sCAN>
    1a96:	08 95       	ret

00001a98 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    1a98:	10 92 de 03 	sts	0x03DE, r1
	System_LED_Control.pattern    = 0;
    1a9c:	10 92 dd 03 	sts	0x03DD, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    1aa0:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    1aa2:	55 9a       	sbi	0x0a, 5	; 10
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    1aa4:	57 9a       	sbi	0x0a, 7	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    1aa6:	51 9a       	sbi	0x0a, 1	; 10
#endif
  	RESET_LED_1();
    1aa8:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_2();
    1aaa:	5d 98       	cbi	0x0b, 5	; 11
	RESET_LED_3();
    1aac:	5f 98       	cbi	0x0b, 7	; 11
	RESET_LED_4();
    1aae:	59 98       	cbi	0x0b, 1	; 11
}
    1ab0:	08 95       	ret

00001ab2 <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	69 f0       	breq	.+26     	; 0x1ad0 <_Z16protected_led_onh+0x1e>
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	28 f0       	brcs	.+10     	; 0x1ac4 <_Z16protected_led_onh+0x12>
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	59 f0       	breq	.+22     	; 0x1ad4 <_Z16protected_led_onh+0x22>
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	29 f0       	breq	.+10     	; 0x1acc <_Z16protected_led_onh+0x1a>
    1ac2:	08 95       	ret
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	e9 f7       	brne	.-6      	; 0x1ac2 <_Z16protected_led_onh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
    1ac8:	5e 9a       	sbi	0x0b, 6	; 11
    1aca:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    1acc:	59 9a       	sbi	0x0b, 1	; 11
    1ace:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
    1ad0:	5d 9a       	sbi	0x0b, 5	; 11
    1ad2:	08 95       	ret
   case 3:  SET_LED_3();  break;
    1ad4:	5f 9a       	sbi	0x0b, 7	; 11
    1ad6:	08 95       	ret

00001ad8 <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	69 f0       	breq	.+26     	; 0x1af6 <_Z17protected_led_offh+0x1e>
    1adc:	83 30       	cpi	r24, 0x03	; 3
    1ade:	28 f0       	brcs	.+10     	; 0x1aea <_Z17protected_led_offh+0x12>
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	59 f0       	breq	.+22     	; 0x1afa <_Z17protected_led_offh+0x22>
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	29 f0       	breq	.+10     	; 0x1af2 <_Z17protected_led_offh+0x1a>
    1ae8:	08 95       	ret
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	e9 f7       	brne	.-6      	; 0x1ae8 <_Z17protected_led_offh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
    1aee:	5e 98       	cbi	0x0b, 6	; 11
    1af0:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    1af2:	59 98       	cbi	0x0b, 1	; 11
    1af4:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
    1af6:	5d 98       	cbi	0x0b, 5	; 11
    1af8:	08 95       	ret
   case 3:  RESET_LED_3();  break;
    1afa:	5f 98       	cbi	0x0b, 7	; 11
    1afc:	08 95       	ret

00001afe <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1afe:	90 91 de 03 	lds	r25, 0x03DE
    1b02:	99 23       	and	r25, r25
    1b04:	21 f0       	breq	.+8      	; 0x1b0e <_Z11strobe_ledsh+0x10>
    1b06:	92 30       	cpi	r25, 0x02	; 2
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	08 95       	ret
    1b0e:	90 91 0c 01 	lds	r25, 0x010C
    1b12:	29 2f       	mov	r18, r25
    1b14:	21 50       	subi	r18, 0x01	; 1
    1b16:	20 93 0c 01 	sts	0x010C, r18
    1b1a:	99 23       	and	r25, r25
    1b1c:	b1 f7       	brne	.-20     	; 0x1b0a <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    1b1e:	9a e0       	ldi	r25, 0x0A	; 10
    1b20:	90 93 0c 01 	sts	0x010C, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    1b24:	88 23       	and	r24, r24
    1b26:	79 f0       	breq	.+30     	; 0x1b46 <_Z11strobe_ledsh+0x48>
    1b28:	80 91 0b 01 	lds	r24, 0x010B
    1b2c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_Z16protected_led_onh>
		i++;
    1b30:	80 91 0b 01 	lds	r24, 0x010B
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	80 93 0b 01 	sts	0x010B, r24
		if (i>=5)  { i=1; return TRUE; }
    1b3a:	85 30       	cpi	r24, 0x05	; 5
    1b3c:	78 f0       	brcs	.+30     	; 0x1b5c <_Z11strobe_ledsh+0x5e>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 0b 01 	sts	0x010B, r24
    1b44:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    1b46:	80 91 0b 01 	lds	r24, 0x010B
    1b4a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_Z17protected_led_offh>
		i++;
    1b4e:	80 91 0b 01 	lds	r24, 0x010B
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	80 93 0b 01 	sts	0x010B, r24
		if (i>=5)  { i=1; return TRUE; }
    1b58:	85 30       	cpi	r24, 0x05	; 5
    1b5a:	88 f7       	brcc	.-30     	; 0x1b3e <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
}
    1b5e:	08 95       	ret

00001b60 <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b60:	90 91 de 03 	lds	r25, 0x03DE
    1b64:	91 11       	cpse	r25, r1
    1b66:	08 95       	ret
	protected_led_on(mindex);
    1b68:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_Z16protected_led_onh>
    1b6c:	08 95       	ret

00001b6e <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b6e:	90 91 de 03 	lds	r25, 0x03DE
    1b72:	91 11       	cpse	r25, r1
    1b74:	08 95       	ret
	protected_led_off(mindex);
    1b76:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_Z17protected_led_offh>
    1b7a:	08 95       	ret

00001b7c <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    1b7c:	66 23       	and	r22, r22
    1b7e:	19 f4       	brne	.+6      	; 0x1b86 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    1b80:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_Z7led_offh>
    1b84:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    1b86:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z6led_onh>
    1b8a:	08 95       	ret

00001b8c <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b8c:	90 91 de 03 	lds	r25, 0x03DE
    1b90:	91 11       	cpse	r25, r1
    1b92:	08 95       	ret
	protected_set_led( mindex, value );
    1b94:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_Z17protected_set_ledhh>
    1b98:	08 95       	ret

00001b9a <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    1b9a:	66 23       	and	r22, r22
    1b9c:	69 f0       	breq	.+26     	; 0x1bb8 <_Z19protected_show_bytehh+0x1e>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1b9e:	87 ff       	sbrs	r24, 7
    1ba0:	20 c0       	rjmp	.+64     	; 0x1be2 <_Z19protected_show_bytehh+0x48>
    1ba2:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1ba4:	86 ff       	sbrs	r24, 6
    1ba6:	20 c0       	rjmp	.+64     	; 0x1be8 <_Z19protected_show_bytehh+0x4e>
    1ba8:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1baa:	85 ff       	sbrs	r24, 5
    1bac:	20 c0       	rjmp	.+64     	; 0x1bee <_Z19protected_show_bytehh+0x54>
    1bae:	5d 9a       	sbi	0x0b, 5	; 11
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    1bb0:	84 fd       	sbrc	r24, 4
    1bb2:	0d c0       	rjmp	.+26     	; 0x1bce <_Z19protected_show_bytehh+0x34>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1bb4:	5e 98       	cbi	0x0b, 6	; 11
    1bb6:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1bb8:	83 ff       	sbrs	r24, 3
    1bba:	0b c0       	rjmp	.+22     	; 0x1bd2 <_Z19protected_show_bytehh+0x38>
    1bbc:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1bbe:	82 ff       	sbrs	r24, 2
    1bc0:	0b c0       	rjmp	.+22     	; 0x1bd8 <_Z19protected_show_bytehh+0x3e>
    1bc2:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bc4:	81 ff       	sbrs	r24, 1
    1bc6:	0b c0       	rjmp	.+22     	; 0x1bde <_Z19protected_show_bytehh+0x44>
    1bc8:	5d 9a       	sbi	0x0b, 5	; 11
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1bca:	80 ff       	sbrs	r24, 0
    1bcc:	f3 cf       	rjmp	.-26     	; 0x1bb4 <_Z19protected_show_bytehh+0x1a>
    1bce:	5e 9a       	sbi	0x0b, 6	; 11
    1bd0:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1bd2:	59 98       	cbi	0x0b, 1	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1bd4:	82 fd       	sbrc	r24, 2
    1bd6:	f5 cf       	rjmp	.-22     	; 0x1bc2 <_Z19protected_show_bytehh+0x28>
    1bd8:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bda:	81 fd       	sbrc	r24, 1
    1bdc:	f5 cf       	rjmp	.-22     	; 0x1bc8 <_Z19protected_show_bytehh+0x2e>
    1bde:	5d 98       	cbi	0x0b, 5	; 11
    1be0:	f4 cf       	rjmp	.-24     	; 0x1bca <_Z19protected_show_bytehh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1be2:	59 98       	cbi	0x0b, 1	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1be4:	86 fd       	sbrc	r24, 6
    1be6:	e0 cf       	rjmp	.-64     	; 0x1ba8 <_Z19protected_show_bytehh+0xe>
    1be8:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bea:	85 fd       	sbrc	r24, 5
    1bec:	e0 cf       	rjmp	.-64     	; 0x1bae <_Z19protected_show_bytehh+0x14>
    1bee:	5d 98       	cbi	0x0b, 5	; 11
    1bf0:	df cf       	rjmp	.-66     	; 0x1bb0 <_Z19protected_show_bytehh+0x16>

00001bf2 <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    1bf2:	90 91 de 03 	lds	r25, 0x03DE
    1bf6:	99 23       	and	r25, r25
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    1bfa:	80 91 dd 03 	lds	r24, 0x03DD
	}
    protected_show_byte( result, mHiNibble );
    1bfe:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z19protected_show_bytehh>
}
    1c02:	08 95       	ret

00001c04 <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1c04:	90 91 de 03 	lds	r25, 0x03DE
    1c08:	99 23       	and	r25, r25
    1c0a:	19 f0       	breq	.+6      	; 0x1c12 <_Z18show_result_toggleh+0xe>
    1c0c:	93 30       	cpi	r25, 0x03	; 3
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <_Z18show_result_toggleh+0xe>
    1c10:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    1c12:	90 91 09 01 	lds	r25, 0x0109
    1c16:	99 23       	and	r25, r25
    1c18:	59 f4       	brne	.+22     	; 0x1c30 <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 91 09 01 	lds	r25, 0x0109
    1c26:	91 11       	cpse	r25, r1
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	80 93 09 01 	sts	0x0109, r24
    1c2e:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    1c30:	61 e0       	ldi	r22, 0x01	; 1
    1c32:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z19protected_show_bytehh>
    1c36:	f4 cf       	rjmp	.-24     	; 0x1c20 <_Z18show_result_toggleh+0x1c>

00001c38 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    1c38:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    1c3a:	95 81       	ldd	r25, Z+5	; 0x05
    1c3c:	9f 70       	andi	r25, 0x0F	; 15
    1c3e:	90 93 de 03 	sts	0x03DE, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    1c42:	86 81       	ldd	r24, Z+6	; 0x06
    1c44:	8f 70       	andi	r24, 0x0F	; 15
    1c46:	80 93 dd 03 	sts	0x03DD, r24

	switch (System_LED_Control.systemMode)
    1c4a:	92 30       	cpi	r25, 0x02	; 2
    1c4c:	81 f0       	breq	.+32     	; 0x1c6e <_Z21can_parse_led_requestP4sCAN+0x36>
    1c4e:	93 30       	cpi	r25, 0x03	; 3
    1c50:	39 f0       	breq	.+14     	; 0x1c60 <_Z21can_parse_led_requestP4sCAN+0x28>
    1c52:	91 30       	cpi	r25, 0x01	; 1
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <_Z21can_parse_led_requestP4sCAN+0x20>
    1c56:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_Z9show_bytehh>
									  break;
    1c5e:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    1c60:	80 91 6f 03 	lds	r24, 0x036F
    1c64:	80 93 dd 03 	sts	0x03DD, r24
									  show_result_toggle( MyInstance );
    1c68:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z18show_result_toggleh>
    1c6c:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    1c6e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_Z11strobe_ledsh>
									  break;
    1c72:	08 95       	ret

00001c74 <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    1c74:	80 91 de 03 	lds	r24, 0x03DE
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	d9 f0       	breq	.+54     	; 0x1cb2 <_Z19led_timeslice_100msv+0x3e>
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	49 f0       	breq	.+18     	; 0x1c92 <_Z19led_timeslice_100msv+0x1e>
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <_Z19led_timeslice_100msv+0x12>
    1c84:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    1c86:	80 91 dd 03 	lds	r24, 0x03DD
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_Z9show_bytehh>
									  break;
    1c90:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    1c92:	80 91 0a 01 	lds	r24, 0x010A
    1c96:	98 2f       	mov	r25, r24
    1c98:	91 50       	subi	r25, 0x01	; 1
    1c9a:	90 93 0a 01 	sts	0x010A, r25
    1c9e:	88 23       	and	r24, r24
    1ca0:	89 f7       	brne	.-30     	; 0x1c84 <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    1ca2:	8a e0       	ldi	r24, 0x0A	; 10
    1ca4:	80 93 0a 01 	sts	0x010A, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    1ca8:	80 91 6f 03 	lds	r24, 0x036F
    1cac:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z18show_result_toggleh>
    1cb0:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    1cb2:	80 91 dd 03 	lds	r24, 0x03DD
    1cb6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_Z11strobe_ledsh>
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	19 f7       	brne	.-58     	; 0x1c84 <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    1cbe:	90 91 dd 03 	lds	r25, 0x03DD
    1cc2:	99 23       	and	r25, r25
    1cc4:	19 f4       	brne	.+6      	; 0x1ccc <_Z19led_timeslice_100msv+0x58>
    1cc6:	80 93 dd 03 	sts	0x03DD, r24
    1cca:	08 95       	ret
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	fb cf       	rjmp	.-10     	; 0x1cc6 <_Z19led_timeslice_100msv+0x52>

00001cd0 <set_spi_isr_callback>:
			  which has a system message ID
******************************************************************************/
void set_spi_isr_callback( BOOL (*mCallback)(void) )
{
	//printf("set_spi_isr_callback(%d)\n", mCallback);
	spi_isr_call_back = mCallback;
    1cd0:	90 93 e1 03 	sts	0x03E1, r25
    1cd4:	80 93 e0 03 	sts	0x03E0, r24
}
    1cd8:	08 95       	ret

00001cda <__vector_26>:
//#include "rpi_spi.h"
//#include "servos.h"

/******* SPI Transfer Complete ISR ***************/
ISR ( SPI_STC_vect )
{	
    1cda:	1f 92       	push	r1
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	0f 92       	push	r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	8f 93       	push	r24
//	if (spi_isr_call_back)
//		spi_isr_call_back();

	SPSR &= 0x7F;
    1ce6:	8d b5       	in	r24, 0x2d	; 45
    1ce8:	8f 77       	andi	r24, 0x7F	; 127
    1cea:	8d bd       	out	0x2d, r24	; 45
//test_rx_response( SPDR );		here for the PiCamScan board
}
    1cec:	8f 91       	pop	r24
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <_Z16SPI_SlaveReceivev>:

char SPI_SlaveReceive(void) 
{
	/* Wait for reception complete */ 
	while(!(SPSR & (1<<SPIF)));
    1cf8:	0d b4       	in	r0, 0x2d	; 45
    1cfa:	07 fe       	sbrs	r0, 7
    1cfc:	fd cf       	rjmp	.-6      	; 0x1cf8 <_Z16SPI_SlaveReceivev>
	/* Return data register */ 
	return SPDR;
    1cfe:	8e b5       	in	r24, 0x2e	; 46
}
    1d00:	08 95       	ret

00001d02 <spi_setBitOrder>:

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	21 f0       	breq	.+8      	; 0x1d0e <spi_setBitOrder+0xc>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    1d06:	8c b5       	in	r24, 0x2c	; 44
    1d08:	8f 7d       	andi	r24, 0xDF	; 223
    1d0a:	8c bd       	out	0x2c, r24	; 44
    1d0c:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    1d0e:	8c b5       	in	r24, 0x2c	; 44
    1d10:	80 62       	ori	r24, 0x20	; 32
    1d12:	8c bd       	out	0x2c, r24	; 44
    1d14:	08 95       	ret

00001d16 <spi_setDataMode>:
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1d16:	9c b5       	in	r25, 0x2c	; 44
    1d18:	93 7f       	andi	r25, 0xF3	; 243
    1d1a:	98 2b       	or	r25, r24
    1d1c:	9c bd       	out	0x2c, r25	; 44
}
    1d1e:	08 95       	ret

00001d20 <spi_setClockDivider>:

// Sets BaudRate:
/* rate:  [0..7]  */
void spi_setClockDivider( uint8_t rate )
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK)   | (rate & SPI_CLOCK_MASK);
    1d20:	2c b5       	in	r18, 0x2c	; 44
    1d22:	98 2f       	mov	r25, r24
    1d24:	93 70       	andi	r25, 0x03	; 3
    1d26:	2c 7f       	andi	r18, 0xFC	; 252
    1d28:	92 2b       	or	r25, r18
    1d2a:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    1d2c:	2d b5       	in	r18, 0x2d	; 45
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	95 95       	asr	r25
    1d32:	87 95       	ror	r24
    1d34:	95 95       	asr	r25
    1d36:	87 95       	ror	r24
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	2e 7f       	andi	r18, 0xFE	; 254
    1d3c:	82 2b       	or	r24, r18
    1d3e:	8d bd       	out	0x2d, r24	; 45
}
    1d40:	08 95       	ret

00001d42 <_Z7pin_ddrhh>:
  /************************ WARNING!! *****************************
   No need to modify MCUCR reigsters.  Default is '0' which means
   the SPI to use regular MISO/MOSI, not the alternate pins 
   NOTE: The Serial Progamming always uses the Alternate pins.
   ****************************************************************/
  if (mAlternatePins)
    1d42:	88 23       	and	r24, r24
    1d44:	59 f0       	breq	.+22     	; 0x1d5c <_Z7pin_ddrhh+0x1a>
  {
  	MCUCR |= (1<<SPIPS); 				        // Clear for MOSI.  Set for MOSI_A
    1d46:	85 b7       	in	r24, 0x35	; 53
    1d48:	80 68       	ori	r24, 0x80	; 128
    1d4a:	85 bf       	out	0x35, r24	; 53
	if (mMaster)
    1d4c:	66 23       	and	r22, r22
    1d4e:	71 f0       	breq	.+28     	; 0x1d6c <_Z7pin_ddrhh+0x2a>
	{
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD &= ~MISO_A;
    1d50:	52 98       	cbi	0x0a, 2	; 10
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD |= MOSI_A|SCK_A;
    1d52:	8a b1       	in	r24, 0x0a	; 10
    1d54:	88 61       	ori	r24, 0x18	; 24
    1d56:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;	
    1d58:	38 98       	cbi	0x07, 0	; 7
    1d5a:	08 95       	ret
	}  
  }
  else
  {
  	  //MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
	  if (mMaster)
    1d5c:	66 23       	and	r22, r22
    1d5e:	61 f4       	brne	.+24     	; 0x1d78 <_Z7pin_ddrhh+0x36>
		  DDRB |= (MOSI|SCK);
		  DDRD |= SS;
	  } else {
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRB |= MISO;
    1d60:	20 9a       	sbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB &= ~(MOSI|SCK);
    1d62:	84 b1       	in	r24, 0x04	; 4
    1d64:	8d 77       	andi	r24, 0x7D	; 125
    1d66:	84 b9       	out	0x04, r24	; 4
		  DDRD &= ~SS;		  
    1d68:	53 98       	cbi	0x0a, 3	; 10
    1d6a:	08 95       	ret
		  DDRC &= ~SS_A;	
	}
	else {	
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD |= MISO_A;
    1d6c:	52 9a       	sbi	0x0a, 2	; 10

		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD &= ~(MOSI_A|SCK_A);
    1d6e:	8a b1       	in	r24, 0x0a	; 10
    1d70:	87 7e       	andi	r24, 0xE7	; 231
    1d72:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;
    1d74:	38 98       	cbi	0x07, 0	; 7
    1d76:	08 95       	ret
  	  //MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
	  if (mMaster)
	  {
		  /* Set MISO,SS input, all others output */
		  // OUTPUTS (MISO)
		  DDRB &= ~MISO;
    1d78:	20 98       	cbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB |= (MOSI|SCK);
    1d7a:	84 b1       	in	r24, 0x04	; 4
    1d7c:	82 68       	ori	r24, 0x82	; 130
    1d7e:	84 b9       	out	0x04, r24	; 4
		  DDRD |= SS;
    1d80:	53 9a       	sbi	0x0a, 3	; 10
    1d82:	08 95       	ret

00001d84 <spi_init>:
	
	mbit_order	:	[MSGFIRST,LSBFIRST]  
	mSPI_Mode	:	SPI mode [SPI_MODE0..SPI_MODE3]
****************************************************************************/
void spi_init( BOOL mAlternatePins, BOOL mMaster, uint8_t mbit_order, uint8_t mSPI_Mode )
{
    1d84:	1f 93       	push	r17
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <spi_init+0x8>
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	16 2f       	mov	r17, r22
	pin_ddr(mAlternatePins, mMaster);
    1d92:	2a 83       	std	Y+2, r18	; 0x02
    1d94:	49 83       	std	Y+1, r20	; 0x01
    1d96:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_Z7pin_ddrhh>
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1d9a:	8c b5       	in	r24, 0x2c	; 44
    1d9c:	83 7f       	andi	r24, 0xF3	; 243
    1d9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1da0:	82 2b       	or	r24, r18
    1da2:	8c bd       	out	0x2c, r24	; 44
}

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    1da4:	49 81       	ldd	r20, Y+1	; 0x01
    1da6:	41 30       	cpi	r20, 0x01	; 1
    1da8:	a1 f0       	breq	.+40     	; 0x1dd2 <spi_init+0x4e>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    1daa:	8c b5       	in	r24, 0x2c	; 44
    1dac:	8f 7d       	andi	r24, 0xDF	; 223
    1dae:	8c bd       	out	0x2c, r24	; 44
	spi_setBitOrder( mbit_order );		// LIS3d & CMR3000 (accel & gyro) both require msb first.

	// Warning: if the SS pin ever becomes a LOW INPUT then SPI 
	// automatically switches to Slave, so the data direction of 
	// the SS pin MUST be kept as OUTPUT.
	if (mMaster)
    1db0:	11 23       	and	r17, r17
    1db2:	a1 f4       	brne	.+40     	; 0x1ddc <spi_init+0x58>
	{
	  SPCR |= (1<<MSTR);		// Master SPI
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
	} else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
    1db4:	8c b5       	in	r24, 0x2c	; 44
    1db6:	8f 7e       	andi	r24, 0xEF	; 239
    1db8:	8c bd       	out	0x2c, r24	; 44
  return SPDR;
}

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    1dba:	8c b5       	in	r24, 0x2c	; 44
    1dbc:	80 68       	ori	r24, 0x80	; 128
    1dbe:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
	} else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
	  spi_attachInterrupt();
	}
	SPCR |= (1<<SPE);				// Enable SPI Module
    1dc0:	8c b5       	in	r24, 0x2c	; 44
    1dc2:	80 64       	ori	r24, 0x40	; 64
    1dc4:	8c bd       	out	0x2c, r24	; 44
}
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	1f 91       	pop	r17
    1dd0:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    1dd2:	8c b5       	in	r24, 0x2c	; 44
    1dd4:	80 62       	ori	r24, 0x20	; 32
    1dd6:	8c bd       	out	0x2c, r24	; 44
	spi_setBitOrder( mbit_order );		// LIS3d & CMR3000 (accel & gyro) both require msb first.

	// Warning: if the SS pin ever becomes a LOW INPUT then SPI 
	// automatically switches to Slave, so the data direction of 
	// the SS pin MUST be kept as OUTPUT.
	if (mMaster)
    1dd8:	11 23       	and	r17, r17
    1dda:	61 f3       	breq	.-40     	; 0x1db4 <spi_init+0x30>
	{
	  SPCR |= (1<<MSTR);		// Master SPI
    1ddc:	8c b5       	in	r24, 0x2c	; 44
    1dde:	80 61       	ori	r24, 0x10	; 16
    1de0:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <spi_setClockDivider>
    1de8:	eb cf       	rjmp	.-42     	; 0x1dc0 <spi_init+0x3c>

00001dea <spi_transfer>:
	SPCR |= (1<<SPE);				// Enable SPI Module
}

byte spi_transfer(byte _data) 
{
  SPDR = _data;
    1dea:	8e bd       	out	0x2e, r24	; 46
  // 0xC0 = (1<<SPIF) | (1<<WCOL)
  while (! (SPSR&0xC0) ) {};
    1dec:	8d b5       	in	r24, 0x2d	; 45
    1dee:	80 7c       	andi	r24, 0xC0	; 192
    1df0:	e9 f3       	breq	.-6      	; 0x1dec <spi_transfer+0x2>
  return SPDR;
    1df2:	8e b5       	in	r24, 0x2e	; 46
}
    1df4:	08 95       	ret

00001df6 <spi_attachInterrupt>:

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    1df6:	8c b5       	in	r24, 0x2c	; 44
    1df8:	80 68       	ori	r24, 0x80	; 128
    1dfa:	8c bd       	out	0x2c, r24	; 44
}
    1dfc:	08 95       	ret

00001dfe <spi_detachInterrupt>:

void spi_detachInterrupt() 
{
  SPCR &= ~(1<<SPIE);
    1dfe:	8c b5       	in	r24, 0x2c	; 44
    1e00:	8f 77       	andi	r24, 0x7F	; 127
    1e02:	8c bd       	out	0x2c, r24	; 44
}
    1e04:	08 95       	ret

00001e06 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1e06:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1e08:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1e0a:	90 93 89 00 	sts	0x0089, r25
    1e0e:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    1e12:	2f bf       	out	0x3f, r18	; 63
}
    1e14:	08 95       	ret

00001e16 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1e16:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    1e18:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    1e1a:	90 93 8b 00 	sts	0x008B, r25
    1e1e:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    1e22:	2f bf       	out	0x3f, r18	; 63
}
    1e24:	08 95       	ret

00001e26 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	7b 01       	movw	r14, r22
    1e30:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1e32:	20 91 0d 01 	lds	r18, 0x010D
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	74 e2       	ldi	r23, 0x24	; 36
    1e40:	84 ef       	ldi	r24, 0xF4	; 244
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 9f 1a 	call	0x353e	; 0x353e <__divmodsi4>
    1e48:	ca 01       	movw	r24, r20
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	0e 94 65 17 	call	0x2eca	; 0x2eca <__floatsisf>
    1e50:	a8 01       	movw	r20, r16
    1e52:	97 01       	movw	r18, r14
    1e54:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divsf3>
    1e58:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixunssfsi>
	return Top;
}
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	08 95       	ret

00001e68 <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    1e68:	90 93 0f 01 	sts	0x010F, r25
    1e6c:	80 93 0e 01 	sts	0x010E, r24
	ICR1 = TOP;
    1e70:	90 93 87 00 	sts	0x0087, r25
    1e74:	80 93 86 00 	sts	0x0086, r24
}
    1e78:	08 95       	ret

00001e7a <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	9b 01       	movw	r18, r22
    1e84:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	74 e2       	ldi	r23, 0x24	; 36
    1e8a:	84 e7       	ldi	r24, 0x74	; 116
    1e8c:	9b e4       	ldi	r25, 0x4B	; 75
    1e8e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divsf3>
    1e92:	8b 01       	movw	r16, r22
    1e94:	d8 2f       	mov	r29, r24
    1e96:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1e98:	9e 01       	movw	r18, r28
    1e9a:	71 2f       	mov	r23, r17
    1e9c:	83 2f       	mov	r24, r19
    1e9e:	92 2f       	mov	r25, r18
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <_Z16select_prescalerf+0x38>
    1eb0:	41 c0       	rjmp	.+130    	; 0x1f34 <_Z16select_prescalerf+0xba>
    1eb2:	9e 01       	movw	r18, r28
    1eb4:	60 2f       	mov	r22, r16
    1eb6:	71 2f       	mov	r23, r17
    1eb8:	83 2f       	mov	r24, r19
    1eba:	92 2f       	mov	r25, r18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	5e e3       	ldi	r21, 0x3E	; 62
    1ec4:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	b4 f5       	brge	.+108    	; 0x1f44 <_Z16select_prescalerf+0xca>
    1ed8:	9e 01       	movw	r18, r28
    1eda:	60 2f       	mov	r22, r16
    1edc:	71 2f       	mov	r23, r17
    1ede:	83 2f       	mov	r24, r19
    1ee0:	92 2f       	mov	r25, r18
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e8       	ldi	r20, 0x80	; 128
    1ee8:	5c e3       	ldi	r21, 0x3C	; 60
    1eea:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <_Z16select_prescalerf+0xd6>
    1efe:	9e 01       	movw	r18, r28
    1f00:	60 2f       	mov	r22, r16
    1f02:	71 2f       	mov	r23, r17
    1f04:	83 2f       	mov	r24, r19
    1f06:	92 2f       	mov	r25, r18
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5b e3       	ldi	r21, 0x3B	; 59
    1f10:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	9c f4       	brge	.+38     	; 0x1f4a <_Z16select_prescalerf+0xd0>
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    1f28:	c9 01       	movw	r24, r18
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    1f34:	21 e0       	ldi	r18, 0x01	; 1
    1f36:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    1f38:	c9 01       	movw	r24, r18
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1f44:	28 e0       	ldi	r18, 0x08	; 8
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	ef cf       	rjmp	.-34     	; 0x1f28 <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	31 e0       	ldi	r19, 0x01	; 1
    1f4e:	ec cf       	rjmp	.-40     	; 0x1f28 <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    1f50:	20 e4       	ldi	r18, 0x40	; 64
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	e9 cf       	rjmp	.-46     	; 0x1f28 <_Z16select_prescalerf+0xae>

00001f56 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1f56:	80 34       	cpi	r24, 0x40	; 64
    1f58:	91 05       	cpc	r25, r1
    1f5a:	d9 f0       	breq	.+54     	; 0x1f92 <_Z20get_tccr1b_prescalert+0x3c>
    1f5c:	81 34       	cpi	r24, 0x41	; 65
    1f5e:	91 05       	cpc	r25, r1
    1f60:	50 f0       	brcs	.+20     	; 0x1f76 <_Z20get_tccr1b_prescalert+0x20>
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	80 30       	cpi	r24, 0x00	; 0
    1f66:	92 07       	cpc	r25, r18
    1f68:	81 f0       	breq	.+32     	; 0x1f8a <_Z20get_tccr1b_prescalert+0x34>
    1f6a:	24 e0       	ldi	r18, 0x04	; 4
    1f6c:	80 30       	cpi	r24, 0x00	; 0
    1f6e:	92 07       	cpc	r25, r18
    1f70:	51 f0       	breq	.+20     	; 0x1f86 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	49 f0       	breq	.+18     	; 0x1f8e <_Z20get_tccr1b_prescalert+0x38>
    1f7c:	88 30       	cpi	r24, 0x08	; 8
    1f7e:	91 05       	cpc	r25, r1
    1f80:	c1 f7       	brne	.-16     	; 0x1f72 <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    1f82:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    1f84:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    1f86:	85 e0       	ldi	r24, 0x05	; 5
    1f88:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    1f8a:	84 e0       	ldi	r24, 0x04	; 4
    1f8c:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	08 95       	ret

00001f96 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	7b 01       	movw	r14, r22
    1fa0:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1fa2:	20 91 0d 01 	lds	r18, 0x010D
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	74 e2       	ldi	r23, 0x24	; 36
    1fb0:	84 ef       	ldi	r24, 0xF4	; 244
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 9f 1a 	call	0x353e	; 0x353e <__divmodsi4>
    1fb8:	ca 01       	movw	r24, r20
    1fba:	b9 01       	movw	r22, r18
    1fbc:	0e 94 65 17 	call	0x2eca	; 0x2eca <__floatsisf>
    1fc0:	a8 01       	movw	r20, r16
    1fc2:	97 01       	movw	r18, r14
    1fc4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divsf3>
    1fc8:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    1fcc:	70 93 0f 01 	sts	0x010F, r23
    1fd0:	60 93 0e 01 	sts	0x010E, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    1fd4:	70 93 87 00 	sts	0x0087, r23
    1fd8:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	08 95       	ret

00001fe6 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	7b 01       	movw	r14, r22
    1ff4:	8c 01       	movw	r16, r24
    1ff6:	c4 2f       	mov	r28, r20
    1ff8:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    1ffa:	41 11       	cpse	r20, r1
    1ffc:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    1ffe:	d1 11       	cpse	r29, r1
    2000:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    2002:	80 91 64 00 	lds	r24, 0x0064
    2006:	87 7e       	andi	r24, 0xE7	; 231
    2008:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    200c:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    200e:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    2010:	10 92 89 00 	sts	0x0089, r1
    2014:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    2018:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    201a:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    201c:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    201e:	10 92 8b 00 	sts	0x008B, r1
    2022:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    2026:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    2028:	20 91 0d 01 	lds	r18, 0x010D
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	74 e2       	ldi	r23, 0x24	; 36
    2036:	84 ef       	ldi	r24, 0xF4	; 244
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 9f 1a 	call	0x353e	; 0x353e <__divmodsi4>
    203e:	ca 01       	movw	r24, r20
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 65 17 	call	0x2eca	; 0x2eca <__floatsisf>
    2046:	a8 01       	movw	r20, r16
    2048:	97 01       	movw	r18, r14
    204a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divsf3>
    204e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    2052:	70 93 0f 01 	sts	0x010F, r23
    2056:	60 93 0e 01 	sts	0x010E, r22
	ICR1 = TOP;
    205a:	70 93 87 00 	sts	0x0087, r23
    205e:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    2062:	cc 23       	and	r28, r28
    2064:	c1 f4       	brne	.+48     	; 0x2096 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    2066:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    2068:	d1 11       	cpse	r29, r1
    206a:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    206c:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    2070:	c8 01       	movw	r24, r16
    2072:	b7 01       	movw	r22, r14
    2074:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <_Z16select_prescalerf>
    2078:	80 93 0d 01 	sts	0x010D, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_Z20get_tccr1b_prescalert>
    2082:	88 61       	ori	r24, 0x18	; 24
    2084:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    2096:	82 e8       	ldi	r24, 0x82	; 130
    2098:	e7 cf       	rjmp	.-50     	; 0x2068 <_Z8pwm_initfhh+0x82>

0000209a <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    209a:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    209e:	29 2f       	mov	r18, r25
    20a0:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    20a2:	88 23       	and	r24, r24
    20a4:	21 f4       	brne	.+8      	; 0x20ae <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    20a6:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    20a8:	90 93 80 00 	sts	0x0080, r25
}
    20ac:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    20ae:	92 2f       	mov	r25, r18
    20b0:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    20b2:	90 93 80 00 	sts	0x0080, r25
}
    20b6:	08 95       	ret

000020b8 <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    20b8:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    20bc:	29 2f       	mov	r18, r25
    20be:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    20c0:	88 23       	and	r24, r24
    20c2:	21 f4       	brne	.+8      	; 0x20cc <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    20c4:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    20c6:	90 93 80 00 	sts	0x0080, r25
}
    20ca:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    20cc:	92 2f       	mov	r25, r18
    20ce:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    20d0:	90 93 80 00 	sts	0x0080, r25
}
    20d4:	08 95       	ret

000020d6 <_Z9set_dutyAf>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_dutyA( float mDuty )
{
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	7b 01       	movw	r14, r22
    20e0:	8c 01       	movw	r16, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	a9 01       	movw	r20, r18
    20e8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__ltsf2>
    20ec:	87 ff       	sbrs	r24, 7
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <_Z9set_dutyAf+0x22>
    20f0:	17 fb       	bst	r17, 7
    20f2:	10 95       	com	r17
    20f4:	17 f9       	bld	r17, 7
    20f6:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    20f8:	60 91 0e 01 	lds	r22, 0x010E
    20fc:	70 91 0f 01 	lds	r23, 0x010F
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 17 18 	call	0x302e	; 0x302e <__floatunsisf>
    2108:	a8 01       	movw	r20, r16
    210a:	97 01       	movw	r18, r14
    210c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__mulsf3>
    2110:	0e 94 13 1b 	call	0x3626	; 0x3626 <ceil>
    2114:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    2118:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    211a:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    211c:	70 93 89 00 	sts	0x0089, r23
    2120:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    2124:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	08 95       	ret

00002130 <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	7b 01       	movw	r14, r22
    213a:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	a9 01       	movw	r20, r18
    2142:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__ltsf2>
    2146:	87 ff       	sbrs	r24, 7
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <_Z9set_dutyBf+0x22>
    214a:	17 fb       	bst	r17, 7
    214c:	10 95       	com	r17
    214e:	17 f9       	bld	r17, 7
    2150:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    2152:	60 91 0e 01 	lds	r22, 0x010E
    2156:	70 91 0f 01 	lds	r23, 0x010F
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 17 18 	call	0x302e	; 0x302e <__floatunsisf>
    2162:	a8 01       	movw	r20, r16
    2164:	97 01       	movw	r18, r14
    2166:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__mulsf3>
    216a:	0e 94 13 1b 	call	0x3626	; 0x3626 <ceil>
    216e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2172:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    2174:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2176:	70 93 8b 00 	sts	0x008B, r23
    217a:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    217e:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    2180:	1f 91       	pop	r17
    2182:	0f 91       	pop	r16
    2184:	ff 90       	pop	r15
    2186:	ef 90       	pop	r14
    2188:	08 95       	ret

0000218a <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    218a:	9b 01       	movw	r18, r22
    218c:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    218e:	10 92 e2 03 	sts	0x03E2, r1
    2192:	10 92 e3 03 	sts	0x03E3, r1
    2196:	10 92 e4 03 	sts	0x03E4, r1
    219a:	10 92 e5 03 	sts	0x03E5, r1
    219e:	80 91 e2 03 	lds	r24, 0x03E2
    21a2:	90 91 e3 03 	lds	r25, 0x03E3
    21a6:	a0 91 e4 03 	lds	r26, 0x03E4
    21aa:	b0 91 e5 03 	lds	r27, 0x03E5
    21ae:	82 17       	cp	r24, r18
    21b0:	93 07       	cpc	r25, r19
    21b2:	a4 07       	cpc	r26, r20
    21b4:	b5 07       	cpc	r27, r21
    21b6:	04 f5       	brge	.+64     	; 0x21f8 <_Z5delayl+0x6e>
    21b8:	80 91 e2 03 	lds	r24, 0x03E2
    21bc:	90 91 e3 03 	lds	r25, 0x03E3
    21c0:	a0 91 e4 03 	lds	r26, 0x03E4
    21c4:	b0 91 e5 03 	lds	r27, 0x03E5
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	a1 1d       	adc	r26, r1
    21cc:	b1 1d       	adc	r27, r1
    21ce:	80 93 e2 03 	sts	0x03E2, r24
    21d2:	90 93 e3 03 	sts	0x03E3, r25
    21d6:	a0 93 e4 03 	sts	0x03E4, r26
    21da:	b0 93 e5 03 	sts	0x03E5, r27
    21de:	80 91 e2 03 	lds	r24, 0x03E2
    21e2:	90 91 e3 03 	lds	r25, 0x03E3
    21e6:	a0 91 e4 03 	lds	r26, 0x03E4
    21ea:	b0 91 e5 03 	lds	r27, 0x03E5
    21ee:	82 17       	cp	r24, r18
    21f0:	93 07       	cpc	r25, r19
    21f2:	a4 07       	cpc	r26, r20
    21f4:	b5 07       	cpc	r27, r21
    21f6:	04 f3       	brlt	.-64     	; 0x21b8 <_Z5delayl+0x2e>
    21f8:	08 95       	ret

000021fa <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    21fe:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    2200:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    2202:	8e ef       	ldi	r24, 0xFE	; 254
    2204:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    2206:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    2208:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    220a:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    220c:	10 92 64 00 	sts	0x0064, r1
}
    2210:	08 95       	ret

00002212 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    2216:	93 e0       	ldi	r25, 0x03	; 3
    2218:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    221a:	9a ef       	ldi	r25, 0xFA	; 250
    221c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    221e:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    2222:	10 92 e9 03 	sts	0x03E9, r1
    2226:	10 92 e8 03 	sts	0x03E8, r1
	/******************* PERIPHERAL INIT ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    222a:	08 95       	ret

0000222c <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	80 93 ec 03 	sts	0x03EC, r24
}
    2232:	08 95       	ret

00002234 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    2234:	10 92 ec 03 	sts	0x03EC, r1
}
    2238:	08 95       	ret

0000223a <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    223a:	20 91 e8 03 	lds	r18, 0x03E8
    223e:	30 91 e9 03 	lds	r19, 0x03E9
    2242:	c9 01       	movw	r24, r18
    2244:	65 e0       	ldi	r22, 0x05	; 5
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__divmodhi4>
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	39 f4       	brne	.+14     	; 0x225e <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    2250:	c9 01       	movw	r24, r18
    2252:	6a e0       	ldi	r22, 0x0A	; 10
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__divmodhi4>
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	09 f0       	breq	.+2      	; 0x2260 <_Z15System_Dispatchv+0x26>
    225e:	08 95       	ret
		{
			can_instance_timeslice();
    2260:	0e 94 04 09 	call	0x1208	; 0x1208 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    2264:	80 91 e8 03 	lds	r24, 0x03E8
    2268:	90 91 e9 03 	lds	r25, 0x03E9
    226c:	64 e1       	ldi	r22, 0x14	; 20
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__divmodhi4>
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	99 f7       	brne	.-26     	; 0x225e <_Z15System_Dispatchv+0x24>
			{
				can_board_timeslice();
    2278:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    227c:	80 91 e8 03 	lds	r24, 0x03E8
    2280:	90 91 e9 03 	lds	r25, 0x03E9
    2284:	62 e3       	ldi	r22, 0x32	; 50
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__divmodhi4>
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	39 f7       	brne	.-50     	; 0x225e <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    2290:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <_Z19led_timeslice_100msv>
    2294:	08 95       	ret

00002296 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    2296:	1f 92       	push	r1
    2298:	0f 92       	push	r0
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	0f 92       	push	r0
    229e:	11 24       	eor	r1, r1
    22a0:	2f 93       	push	r18
    22a2:	3f 93       	push	r19
    22a4:	4f 93       	push	r20
    22a6:	5f 93       	push	r21
    22a8:	6f 93       	push	r22
    22aa:	7f 93       	push	r23
    22ac:	8f 93       	push	r24
    22ae:	9f 93       	push	r25
    22b0:	af 93       	push	r26
    22b2:	bf 93       	push	r27
    22b4:	ef 93       	push	r30
    22b6:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    22b8:	80 91 ed 03 	lds	r24, 0x03ED
    22bc:	88 23       	and	r24, r24
    22be:	41 f1       	breq	.+80     	; 0x2310 <__vector_15+0x7a>
    22c0:	10 92 ed 03 	sts	0x03ED, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    22c4:	80 91 ec 03 	lds	r24, 0x03EC
    22c8:	88 23       	and	r24, r24
    22ca:	49 f1       	breq	.+82     	; 0x231e <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    22cc:	80 91 e6 03 	lds	r24, 0x03E6
    22d0:	90 91 e7 03 	lds	r25, 0x03E7
    22d4:	9c 01       	movw	r18, r24
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
    22da:	30 93 e7 03 	sts	0x03E7, r19
    22de:	20 93 e6 03 	sts	0x03E6, r18
    22e2:	6a e0       	ldi	r22, 0x0A	; 10
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__udivmodhi4>
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	31 f1       	breq	.+76     	; 0x233a <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    22ee:	ff 91       	pop	r31
    22f0:	ef 91       	pop	r30
    22f2:	bf 91       	pop	r27
    22f4:	af 91       	pop	r26
    22f6:	9f 91       	pop	r25
    22f8:	8f 91       	pop	r24
    22fa:	7f 91       	pop	r23
    22fc:	6f 91       	pop	r22
    22fe:	5f 91       	pop	r21
    2300:	4f 91       	pop	r20
    2302:	3f 91       	pop	r19
    2304:	2f 91       	pop	r18
    2306:	0f 90       	pop	r0
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	0f 90       	pop	r0
    230c:	1f 90       	pop	r1
    230e:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	80 93 ed 03 	sts	0x03ED, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    2316:	80 91 ec 03 	lds	r24, 0x03EC
    231a:	88 23       	and	r24, r24
    231c:	b9 f6       	brne	.-82     	; 0x22cc <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    231e:	80 91 e8 03 	lds	r24, 0x03E8
    2322:	90 91 e9 03 	lds	r25, 0x03E9
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	90 93 e9 03 	sts	0x03E9, r25
    232c:	80 93 e8 03 	sts	0x03E8, r24
		System_Dispatch();
    2330:	0e 94 1d 11 	call	0x223a	; 0x223a <_Z15System_Dispatchv>
		OS_Dispatch();
    2334:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_Z11OS_Dispatchv>
    2338:	da cf       	rjmp	.-76     	; 0x22ee <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    233a:	10 92 e7 03 	sts	0x03E7, r1
    233e:	10 92 e6 03 	sts	0x03E6, r1
			OS_Event_TIC_Counter++;
    2342:	80 91 e8 03 	lds	r24, 0x03E8
    2346:	90 91 e9 03 	lds	r25, 0x03E9
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	90 93 e9 03 	sts	0x03E9, r25
    2350:	80 93 e8 03 	sts	0x03E8, r24
			OS_Dispatch();
    2354:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_Z11OS_Dispatchv>
    2358:	ca cf       	rjmp	.-108    	; 0x22ee <__vector_15+0x58>

0000235a <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    235e:	93 e0       	ldi	r25, 0x03	; 3
    2360:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    2362:	9a ef       	ldi	r25, 0xFA	; 250
    2364:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    2366:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    236a:	10 92 e9 03 	sts	0x03E9, r1
    236e:	10 92 e8 03 	sts	0x03E8, r1
}
    2372:	08 95       	ret

00002374 <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    2374:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    2376:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    2378:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    237a:	85 81       	ldd	r24, Z+5	; 0x05
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	d9 f0       	breq	.+54     	; 0x23b6 <_Z27can_parse_configure_requestP4sCAN+0x42>
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	71 f0       	breq	.+28     	; 0x23a0 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	09 f0       	breq	.+2      	; 0x238a <_Z27can_parse_configure_requestP4sCAN+0x16>
    2388:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    238a:	89 2f       	mov	r24, r25
    238c:	80 95       	com	r24
    238e:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    2390:	92 23       	and	r25, r18
    2392:	20 91 ee 03 	lds	r18, 0x03EE
    2396:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    2398:	89 23       	and	r24, r25
    239a:	80 93 ee 03 	sts	0x03EE, r24
				 break;
    239e:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    23a0:	89 2f       	mov	r24, r25
    23a2:	80 95       	com	r24
    23a4:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    23a6:	92 23       	and	r25, r18
    23a8:	20 91 f0 03 	lds	r18, 0x03F0
    23ac:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    23ae:	89 23       	and	r24, r25
    23b0:	80 93 f0 03 	sts	0x03F0, r24
    23b4:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    23b6:	89 2f       	mov	r24, r25
    23b8:	80 95       	com	r24
    23ba:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    23bc:	92 23       	and	r25, r18
    23be:	20 91 ef 03 	lds	r18, 0x03EF
    23c2:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    23c4:	89 23       	and	r24, r25
    23c6:	80 93 ef 03 	sts	0x03EF, r24
				 break;
    23ca:	08 95       	ret

000023cc <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    23cc:	10 92 ee 03 	sts	0x03EE, r1
	config_byte_2 = 0;		// no reports
    23d0:	10 92 ef 03 	sts	0x03EF, r1
	config_byte_3 = 0;		// 
    23d4:	10 92 f0 03 	sts	0x03F0, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    23d8:	82 e4       	ldi	r24, 0x42	; 66
    23da:	80 93 f1 03 	sts	0x03F1, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    23de:	10 92 71 03 	sts	0x0371, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    23e2:	80 91 f2 03 	lds	r24, 0x03F2
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	80 93 f2 03 	sts	0x03F2, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    23ec:	10 92 70 03 	sts	0x0370, r1
	MyInstance 		 = 0x98;
    23f0:	88 e9       	ldi	r24, 0x98	; 152
    23f2:	80 93 6f 03 	sts	0x036F, r24
	
	//led_on(4);
}
    23f6:	08 95       	ret

000023f8 <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    23f8:	80 91 f2 03 	lds	r24, 0x03F2
							// and b/c it's better the user knows when it's read.
	//led_off(4);
	
	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    23fc:	80 fd       	sbrc	r24, 0
    23fe:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    2400:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    2404:	0e 94 4f 02 	call	0x49e	; 0x49e <_Z25app_default_configurationv>
    2408:	08 95       	ret

0000240a <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    240a:	20 91 6f 03 	lds	r18, 0x036F
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    240e:	f9 99       	sbic	0x1f, 1	; 31
    2410:	fe cf       	rjmp	.-4      	; 0x240e <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2412:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2414:	92 bd       	out	0x22, r25	; 34
    2416:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2418:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	fa 9a       	sbi	0x1f, 2	; 31
    2420:	f9 9a       	sbi	0x1f, 1	; 31
    2422:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    2424:	9c 01       	movw	r18, r24
    2426:	2f 5f       	subi	r18, 0xFF	; 255
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
}
    242a:	c9 01       	movw	r24, r18
    242c:	08 95       	ret

0000242e <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    242e:	f9 99       	sbic	0x1f, 1	; 31
    2430:	fe cf       	rjmp	.-4      	; 0x242e <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2432:	92 bd       	out	0x22, r25	; 34
    2434:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2436:	f8 9a       	sbi	0x1f, 0	; 31
    2438:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    243a:	20 93 6f 03 	sts	0x036F, r18
    return mEEPROMAddress+1;    
    243e:	9c 01       	movw	r18, r24
    2440:	2f 5f       	subi	r18, 0xFF	; 255
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2444:	c9 01       	movw	r24, r18
    2446:	08 95       	ret

00002448 <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    2448:	20 91 70 03 	lds	r18, 0x0370
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    244c:	f9 99       	sbic	0x1f, 1	; 31
    244e:	fe cf       	rjmp	.-4      	; 0x244c <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2450:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2452:	92 bd       	out	0x22, r25	; 34
    2454:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2456:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	fa 9a       	sbi	0x1f, 2	; 31
    245e:	f9 9a       	sbi	0x1f, 1	; 31
    2460:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    2462:	9c 01       	movw	r18, r24
    2464:	2f 5f       	subi	r18, 0xFF	; 255
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2468:	c9 01       	movw	r24, r18
    246a:	08 95       	ret

0000246c <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    246c:	f9 99       	sbic	0x1f, 1	; 31
    246e:	fe cf       	rjmp	.-4      	; 0x246c <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2470:	92 bd       	out	0x22, r25	; 34
    2472:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2474:	f8 9a       	sbi	0x1f, 0	; 31
    2476:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    2478:	20 93 70 03 	sts	0x0370, r18
    return mEEPROMAddress+1;
    247c:	9c 01       	movw	r18, r24
    247e:	2f 5f       	subi	r18, 0xFF	; 255
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2482:	c9 01       	movw	r24, r18
    2484:	08 95       	ret

00002486 <_Z25save_configuration_eepromPh>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	byte* address = addr;
	eeprom_write_byte( addr++, ~config_byte_1 );
    2486:	9c 01       	movw	r18, r24
    2488:	2f 5f       	subi	r18, 0xFF	; 255
    248a:	3f 4f       	sbci	r19, 0xFF	; 255
    248c:	40 91 ee 03 	lds	r20, 0x03EE
    2490:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2492:	f9 99       	sbic	0x1f, 1	; 31
    2494:	fe cf       	rjmp	.-4      	; 0x2492 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2496:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2498:	92 bd       	out	0x22, r25	; 34
    249a:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    249c:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	fa 9a       	sbi	0x1f, 2	; 31
    24a4:	f9 9a       	sbi	0x1f, 1	; 31
    24a6:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    24a8:	c9 01       	movw	r24, r18
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	40 91 ef 03 	lds	r20, 0x03EF
    24b0:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    24b2:	f9 99       	sbic	0x1f, 1	; 31
    24b4:	fe cf       	rjmp	.-4      	; 0x24b2 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    24b6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    24b8:	32 bd       	out	0x22, r19	; 34
    24ba:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    24bc:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	fa 9a       	sbi	0x1f, 2	; 31
    24c4:	f9 9a       	sbi	0x1f, 1	; 31
    24c6:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    24c8:	9c 01       	movw	r18, r24
    24ca:	2f 5f       	subi	r18, 0xFF	; 255
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	40 91 f0 03 	lds	r20, 0x03F0
    24d2:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    24d4:	f9 99       	sbic	0x1f, 1	; 31
    24d6:	fe cf       	rjmp	.-4      	; 0x24d4 <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    24d8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    24da:	92 bd       	out	0x22, r25	; 34
    24dc:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    24de:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	fa 9a       	sbi	0x1f, 2	; 31
    24e6:	f9 9a       	sbi	0x1f, 1	; 31
    24e8:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    24ea:	c9 01       	movw	r24, r18
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	40 91 f1 03 	lds	r20, 0x03F1
    24f2:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    24f4:	f9 99       	sbic	0x1f, 1	; 31
    24f6:	fe cf       	rjmp	.-4      	; 0x24f4 <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    24f8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    24fa:	32 bd       	out	0x22, r19	; 34
    24fc:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    24fe:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	fa 9a       	sbi	0x1f, 2	; 31
    2506:	f9 9a       	sbi	0x1f, 1	; 31
    2508:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    250a:	9c 01       	movw	r18, r24
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	40 91 f2 03 	lds	r20, 0x03F2
    2514:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2516:	f9 99       	sbic	0x1f, 1	; 31
    2518:	fe cf       	rjmp	.-4      	; 0x2516 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    251a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    251c:	92 bd       	out	0x22, r25	; 34
    251e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2520:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	fa 9a       	sbi	0x1f, 2	; 31
    2528:	f9 9a       	sbi	0x1f, 1	; 31
    252a:	0f be       	out	0x3f, r0	; 63
	okay_to_read_cal = true;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 18 02 	sts	0x0218, r24
	return addr;
}
    2532:	c9 01       	movw	r24, r18
    2534:	08 95       	ret

00002536 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 05 12 	call	0x240a	; 0x240a <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    253e:	0e 94 24 12 	call	0x2448	; 0x2448 <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    2542:	0e 94 43 12 	call	0x2486	; 0x2486 <_Z25save_configuration_eepromPh>
}
    2546:	08 95       	ret

00002548 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    2548:	f8 94       	cli
	return save_configuration();
    254a:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z18save_configurationv>
	sei();
}
    254e:	08 95       	ret

00002550 <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    2550:	22 e1       	ldi	r18, 0x12	; 18
    2552:	84 33       	cpi	r24, 0x34	; 52
    2554:	92 07       	cpc	r25, r18
    2556:	11 f0       	breq	.+4      	; 0x255c <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    2558:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    255a:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    255c:	80 91 f2 03 	lds	r24, 0x03F2
    2560:	8e 7f       	andi	r24, 0xFE	; 254
    2562:	80 93 f2 03 	sts	0x03F2, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    2566:	f8 94       	cli
    2568:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z18save_configurationv>
    256c:	78 94       	sei
		retval = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	08 95       	ret

00002572 <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    2572:	9c 01       	movw	r18, r24
    2574:	2f 5f       	subi	r18, 0xFF	; 255
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2578:	f9 99       	sbic	0x1f, 1	; 31
    257a:	fe cf       	rjmp	.-4      	; 0x2578 <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    257c:	92 bd       	out	0x22, r25	; 34
    257e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2580:	f8 9a       	sbi	0x1f, 0	; 31
    2582:	80 b5       	in	r24, 0x20	; 32
    2584:	80 95       	com	r24
    2586:	80 93 ee 03 	sts	0x03EE, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    258a:	c9 01       	movw	r24, r18
    258c:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    258e:	f9 99       	sbic	0x1f, 1	; 31
    2590:	fe cf       	rjmp	.-4      	; 0x258e <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2592:	32 bd       	out	0x22, r19	; 34
    2594:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2596:	f8 9a       	sbi	0x1f, 0	; 31
    2598:	20 b5       	in	r18, 0x20	; 32
    259a:	20 95       	com	r18
    259c:	20 93 ef 03 	sts	0x03EF, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    25a0:	9c 01       	movw	r18, r24
    25a2:	2f 5f       	subi	r18, 0xFF	; 255
    25a4:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25a6:	f9 99       	sbic	0x1f, 1	; 31
    25a8:	fe cf       	rjmp	.-4      	; 0x25a6 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    25aa:	92 bd       	out	0x22, r25	; 34
    25ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    25ae:	f8 9a       	sbi	0x1f, 0	; 31
    25b0:	80 b5       	in	r24, 0x20	; 32
    25b2:	80 95       	com	r24
    25b4:	80 93 f0 03 	sts	0x03F0, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    25b8:	c9 01       	movw	r24, r18
    25ba:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25bc:	f9 99       	sbic	0x1f, 1	; 31
    25be:	fe cf       	rjmp	.-4      	; 0x25bc <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    25c0:	32 bd       	out	0x22, r19	; 34
    25c2:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    25c4:	f8 9a       	sbi	0x1f, 0	; 31
    25c6:	20 b5       	in	r18, 0x20	; 32
    25c8:	20 95       	com	r18
    25ca:	20 93 f1 03 	sts	0x03F1, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    25ce:	9c 01       	movw	r18, r24
    25d0:	2f 5f       	subi	r18, 0xFF	; 255
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25d4:	f9 99       	sbic	0x1f, 1	; 31
    25d6:	fe cf       	rjmp	.-4      	; 0x25d4 <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    25d8:	92 bd       	out	0x22, r25	; 34
    25da:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    25dc:	f8 9a       	sbi	0x1f, 0	; 31
    25de:	80 b5       	in	r24, 0x20	; 32
    25e0:	80 95       	com	r24
    25e2:	80 93 f2 03 	sts	0x03F2, r24
	return addr;
}
    25e6:	c9 01       	movw	r24, r18
    25e8:	08 95       	ret

000025ea <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 17 12 	call	0x242e	; 0x242e <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    25f2:	0e 94 36 12 	call	0x246c	; 0x246c <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    25f6:	0e 94 b9 12 	call	0x2572	; 0x2572 <_Z25read_configuration_eepromPh>
}
    25fa:	08 95       	ret

000025fc <__vector_27>:
/**************** VARIABLES *************************************/
word LightSensorSample [2];
byte next_channel = 0;

ISR ( ADC_vect )
{
    25fc:	1f 92       	push	r1
    25fe:	0f 92       	push	r0
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	0f 92       	push	r0
    2604:	11 24       	eor	r1, r1
    2606:	2f 93       	push	r18
    2608:	3f 93       	push	r19
    260a:	8f 93       	push	r24
    260c:	9f 93       	push	r25
	word result = ADCL;
    260e:	20 91 78 00 	lds	r18, 0x0078
	result      += (ADCH<<8);
    2612:	30 91 79 00 	lds	r19, 0x0079
	switch(next_channel)
    2616:	80 91 f7 03 	lds	r24, 0x03F7
    261a:	88 23       	and	r24, r24
    261c:	21 f5       	brne	.+72     	; 0x2666 <__vector_27+0x6a>
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
    261e:	80 91 f5 03 	lds	r24, 0x03F5
    2622:	90 91 f6 03 	lds	r25, 0x03F6
    2626:	90 93 f4 03 	sts	0x03F4, r25
    262a:	80 93 f3 03 	sts	0x03F3, r24
byte next_channel = 0;

ISR ( ADC_vect )
{
	word result = ADCL;
	result      += (ADCH<<8);
    262e:	93 2f       	mov	r25, r19
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	82 0f       	add	r24, r18
    2634:	91 1d       	adc	r25, r1
	switch(next_channel)
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
			LightSensorSample[1] = result;
    2636:	90 93 f6 03 	sts	0x03F6, r25
    263a:	80 93 f5 03 	sts	0x03F5, r24
			next_channel = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	80 93 f7 03 	sts	0x03F7, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
			ADMUX = POT_MUX;		// Select POT	
    2644:	82 e4       	ldi	r24, 0x42	; 66
    2646:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    264a:	80 91 7a 00 	lds	r24, 0x007A
    264e:	80 64       	ori	r24, 0x40	; 64
    2650:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	3f 91       	pop	r19
    265a:	2f 91       	pop	r18
    265c:	0f 90       	pop	r0
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	0f 90       	pop	r0
    2662:	1f 90       	pop	r1
    2664:	18 95       	reti
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
    2666:	10 92 f7 03 	sts	0x03F7, r1
    266a:	ec cf       	rjmp	.-40     	; 0x2644 <__vector_27+0x48>

0000266c <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    266c:	ea e7       	ldi	r30, 0x7A	; 122
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	88 7f       	andi	r24, 0xF8	; 248
    2674:	80 83       	st	Z, r24
}
    2676:	08 95       	ret

00002678 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83;
    2678:	8b e9       	ldi	r24, 0x9B	; 155
    267a:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    267e:	ee e7       	ldi	r30, 0x7E	; 126
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	84 60       	ori	r24, 0x04	; 4
    2686:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    2688:	ef e7       	ldi	r30, 0x7F	; 127
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	83 60       	ori	r24, 0x03	; 3
    2690:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    2692:	80 ea       	ldi	r24, 0xA0	; 160
    2694:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    2698:	82 e4       	ldi	r24, 0x42	; 66
    269a:	80 93 7c 00 	sts	0x007C, r24
}
    269e:	08 95       	ret

000026a0 <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    26a0:	82 e4       	ldi	r24, 0x42	; 66
    26a2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    26a6:	ea e7       	ldi	r30, 0x7A	; 122
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	80 64       	ori	r24, 0x40	; 64
    26ae:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    26b0:	08 95       	ret

000026b2 <__fixunssfsi>:
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	7b 01       	movw	r14, r22
    26bc:	8c 01       	movw	r16, r24
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	5f e4       	ldi	r21, 0x4F	; 79
    26c6:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__gesf2>
    26ca:	87 fd       	sbrc	r24, 7
    26cc:	11 c0       	rjmp	.+34     	; 0x26f0 <__fixunssfsi+0x3e>
    26ce:	c8 01       	movw	r24, r16
    26d0:	b7 01       	movw	r22, r14
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	5f e4       	ldi	r21, 0x4F	; 79
    26da:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__subsf3>
    26de:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__fixsfsi>
    26e2:	9b 01       	movw	r18, r22
    26e4:	ac 01       	movw	r20, r24
    26e6:	20 50       	subi	r18, 0x00	; 0
    26e8:	30 40       	sbci	r19, 0x00	; 0
    26ea:	40 40       	sbci	r20, 0x00	; 0
    26ec:	50 48       	sbci	r21, 0x80	; 128
    26ee:	06 c0       	rjmp	.+12     	; 0x26fc <__fixunssfsi+0x4a>
    26f0:	c8 01       	movw	r24, r16
    26f2:	b7 01       	movw	r22, r14
    26f4:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__fixsfsi>
    26f8:	9b 01       	movw	r18, r22
    26fa:	ac 01       	movw	r20, r24
    26fc:	b9 01       	movw	r22, r18
    26fe:	ca 01       	movw	r24, r20
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	08 95       	ret

0000270a <_fpadd_parts>:
    270a:	a0 e0       	ldi	r26, 0x00	; 0
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	eb e8       	ldi	r30, 0x8B	; 139
    2710:	f3 e1       	ldi	r31, 0x13	; 19
    2712:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__+0x8>
    2716:	fc 01       	movw	r30, r24
    2718:	ea 01       	movw	r28, r20
    271a:	80 81       	ld	r24, Z
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	08 f4       	brcc	.+2      	; 0x2722 <_fpadd_parts+0x18>
    2720:	38 c1       	rjmp	.+624    	; 0x2992 <_fpadd_parts+0x288>
    2722:	db 01       	movw	r26, r22
    2724:	9c 91       	ld	r25, X
    2726:	92 30       	cpi	r25, 0x02	; 2
    2728:	08 f4       	brcc	.+2      	; 0x272c <_fpadd_parts+0x22>
    272a:	30 c1       	rjmp	.+608    	; 0x298c <_fpadd_parts+0x282>
    272c:	84 30       	cpi	r24, 0x04	; 4
    272e:	59 f4       	brne	.+22     	; 0x2746 <_fpadd_parts+0x3c>
    2730:	94 30       	cpi	r25, 0x04	; 4
    2732:	09 f0       	breq	.+2      	; 0x2736 <_fpadd_parts+0x2c>
    2734:	2e c1       	rjmp	.+604    	; 0x2992 <_fpadd_parts+0x288>
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	8c 91       	ld	r24, X
    273c:	11 97       	sbiw	r26, 0x01	; 1
    273e:	98 17       	cp	r25, r24
    2740:	09 f0       	breq	.+2      	; 0x2744 <_fpadd_parts+0x3a>
    2742:	21 c1       	rjmp	.+578    	; 0x2986 <_fpadd_parts+0x27c>
    2744:	26 c1       	rjmp	.+588    	; 0x2992 <_fpadd_parts+0x288>
    2746:	94 30       	cpi	r25, 0x04	; 4
    2748:	09 f4       	brne	.+2      	; 0x274c <_fpadd_parts+0x42>
    274a:	20 c1       	rjmp	.+576    	; 0x298c <_fpadd_parts+0x282>
    274c:	92 30       	cpi	r25, 0x02	; 2
    274e:	b1 f4       	brne	.+44     	; 0x277c <_fpadd_parts+0x72>
    2750:	82 30       	cpi	r24, 0x02	; 2
    2752:	09 f0       	breq	.+2      	; 0x2756 <_fpadd_parts+0x4c>
    2754:	1e c1       	rjmp	.+572    	; 0x2992 <_fpadd_parts+0x288>
    2756:	ca 01       	movw	r24, r20
    2758:	af 01       	movw	r20, r30
    275a:	28 e0       	ldi	r18, 0x08	; 8
    275c:	da 01       	movw	r26, r20
    275e:	0d 90       	ld	r0, X+
    2760:	ad 01       	movw	r20, r26
    2762:	dc 01       	movw	r26, r24
    2764:	0d 92       	st	X+, r0
    2766:	cd 01       	movw	r24, r26
    2768:	21 50       	subi	r18, 0x01	; 1
    276a:	c1 f7       	brne	.-16     	; 0x275c <_fpadd_parts+0x52>
    276c:	db 01       	movw	r26, r22
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	8c 91       	ld	r24, X
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	89 23       	and	r24, r25
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	0a c1       	rjmp	.+532    	; 0x2990 <_fpadd_parts+0x286>
    277c:	82 30       	cpi	r24, 0x02	; 2
    277e:	09 f4       	brne	.+2      	; 0x2782 <_fpadd_parts+0x78>
    2780:	05 c1       	rjmp	.+522    	; 0x298c <_fpadd_parts+0x282>
    2782:	c2 80       	ldd	r12, Z+2	; 0x02
    2784:	d3 80       	ldd	r13, Z+3	; 0x03
    2786:	db 01       	movw	r26, r22
    2788:	12 96       	adiw	r26, 0x02	; 2
    278a:	6d 90       	ld	r6, X+
    278c:	7c 90       	ld	r7, X
    278e:	13 97       	sbiw	r26, 0x03	; 3
    2790:	24 81       	ldd	r18, Z+4	; 0x04
    2792:	35 81       	ldd	r19, Z+5	; 0x05
    2794:	46 81       	ldd	r20, Z+6	; 0x06
    2796:	57 81       	ldd	r21, Z+7	; 0x07
    2798:	14 96       	adiw	r26, 0x04	; 4
    279a:	ed 90       	ld	r14, X+
    279c:	fd 90       	ld	r15, X+
    279e:	0d 91       	ld	r16, X+
    27a0:	1c 91       	ld	r17, X
    27a2:	17 97       	sbiw	r26, 0x07	; 7
    27a4:	c6 01       	movw	r24, r12
    27a6:	86 19       	sub	r24, r6
    27a8:	97 09       	sbc	r25, r7
    27aa:	5c 01       	movw	r10, r24
    27ac:	97 ff       	sbrs	r25, 7
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <_fpadd_parts+0xae>
    27b0:	aa 24       	eor	r10, r10
    27b2:	bb 24       	eor	r11, r11
    27b4:	a8 1a       	sub	r10, r24
    27b6:	b9 0a       	sbc	r11, r25
    27b8:	b0 e2       	ldi	r27, 0x20	; 32
    27ba:	ab 16       	cp	r10, r27
    27bc:	b1 04       	cpc	r11, r1
    27be:	0c f0       	brlt	.+2      	; 0x27c2 <_fpadd_parts+0xb8>
    27c0:	61 c0       	rjmp	.+194    	; 0x2884 <_fpadd_parts+0x17a>
    27c2:	18 16       	cp	r1, r24
    27c4:	19 06       	cpc	r1, r25
    27c6:	6c f5       	brge	.+90     	; 0x2822 <_fpadd_parts+0x118>
    27c8:	37 01       	movw	r6, r14
    27ca:	48 01       	movw	r8, r16
    27cc:	0a 2c       	mov	r0, r10
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <_fpadd_parts+0xce>
    27d0:	96 94       	lsr	r9
    27d2:	87 94       	ror	r8
    27d4:	77 94       	ror	r7
    27d6:	67 94       	ror	r6
    27d8:	0a 94       	dec	r0
    27da:	d2 f7       	brpl	.-12     	; 0x27d0 <_fpadd_parts+0xc6>
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 e0       	ldi	r26, 0x00	; 0
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	0a 2c       	mov	r0, r10
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <_fpadd_parts+0xe6>
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	aa 1f       	adc	r26, r26
    27ee:	bb 1f       	adc	r27, r27
    27f0:	0a 94       	dec	r0
    27f2:	d2 f7       	brpl	.-12     	; 0x27e8 <_fpadd_parts+0xde>
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	a1 09       	sbc	r26, r1
    27f8:	b1 09       	sbc	r27, r1
    27fa:	8e 21       	and	r24, r14
    27fc:	9f 21       	and	r25, r15
    27fe:	a0 23       	and	r26, r16
    2800:	b1 23       	and	r27, r17
    2802:	ee 24       	eor	r14, r14
    2804:	ff 24       	eor	r15, r15
    2806:	87 01       	movw	r16, r14
    2808:	e3 94       	inc	r14
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	a1 05       	cpc	r26, r1
    280e:	b1 05       	cpc	r27, r1
    2810:	19 f4       	brne	.+6      	; 0x2818 <_fpadd_parts+0x10e>
    2812:	ee 24       	eor	r14, r14
    2814:	ff 24       	eor	r15, r15
    2816:	87 01       	movw	r16, r14
    2818:	e6 28       	or	r14, r6
    281a:	f7 28       	or	r15, r7
    281c:	08 29       	or	r16, r8
    281e:	19 29       	or	r17, r9
    2820:	3c c0       	rjmp	.+120    	; 0x289a <_fpadd_parts+0x190>
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	d1 f1       	breq	.+116    	; 0x289a <_fpadd_parts+0x190>
    2826:	ca 0c       	add	r12, r10
    2828:	db 1c       	adc	r13, r11
    282a:	39 01       	movw	r6, r18
    282c:	4a 01       	movw	r8, r20
    282e:	0a 2c       	mov	r0, r10
    2830:	04 c0       	rjmp	.+8      	; 0x283a <_fpadd_parts+0x130>
    2832:	96 94       	lsr	r9
    2834:	87 94       	ror	r8
    2836:	77 94       	ror	r7
    2838:	67 94       	ror	r6
    283a:	0a 94       	dec	r0
    283c:	d2 f7       	brpl	.-12     	; 0x2832 <_fpadd_parts+0x128>
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e0       	ldi	r26, 0x00	; 0
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	0a 2c       	mov	r0, r10
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <_fpadd_parts+0x148>
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	aa 1f       	adc	r26, r26
    2850:	bb 1f       	adc	r27, r27
    2852:	0a 94       	dec	r0
    2854:	d2 f7       	brpl	.-12     	; 0x284a <_fpadd_parts+0x140>
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	a1 09       	sbc	r26, r1
    285a:	b1 09       	sbc	r27, r1
    285c:	82 23       	and	r24, r18
    285e:	93 23       	and	r25, r19
    2860:	a4 23       	and	r26, r20
    2862:	b5 23       	and	r27, r21
    2864:	21 e0       	ldi	r18, 0x01	; 1
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	a1 05       	cpc	r26, r1
    2870:	b1 05       	cpc	r27, r1
    2872:	19 f4       	brne	.+6      	; 0x287a <_fpadd_parts+0x170>
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	a9 01       	movw	r20, r18
    287a:	26 29       	or	r18, r6
    287c:	37 29       	or	r19, r7
    287e:	48 29       	or	r20, r8
    2880:	59 29       	or	r21, r9
    2882:	0b c0       	rjmp	.+22     	; 0x289a <_fpadd_parts+0x190>
    2884:	6c 14       	cp	r6, r12
    2886:	7d 04       	cpc	r7, r13
    2888:	24 f4       	brge	.+8      	; 0x2892 <_fpadd_parts+0x188>
    288a:	ee 24       	eor	r14, r14
    288c:	ff 24       	eor	r15, r15
    288e:	87 01       	movw	r16, r14
    2890:	04 c0       	rjmp	.+8      	; 0x289a <_fpadd_parts+0x190>
    2892:	63 01       	movw	r12, r6
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	a9 01       	movw	r20, r18
    289a:	81 81       	ldd	r24, Z+1	; 0x01
    289c:	fb 01       	movw	r30, r22
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	89 17       	cp	r24, r25
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <_fpadd_parts+0x19c>
    28a4:	45 c0       	rjmp	.+138    	; 0x2930 <_fpadd_parts+0x226>
    28a6:	88 23       	and	r24, r24
    28a8:	49 f0       	breq	.+18     	; 0x28bc <_fpadd_parts+0x1b2>
    28aa:	d8 01       	movw	r26, r16
    28ac:	c7 01       	movw	r24, r14
    28ae:	82 1b       	sub	r24, r18
    28b0:	93 0b       	sbc	r25, r19
    28b2:	a4 0b       	sbc	r26, r20
    28b4:	b5 0b       	sbc	r27, r21
    28b6:	9c 01       	movw	r18, r24
    28b8:	ad 01       	movw	r20, r26
    28ba:	04 c0       	rjmp	.+8      	; 0x28c4 <_fpadd_parts+0x1ba>
    28bc:	2e 19       	sub	r18, r14
    28be:	3f 09       	sbc	r19, r15
    28c0:	40 0b       	sbc	r20, r16
    28c2:	51 0b       	sbc	r21, r17
    28c4:	57 fd       	sbrc	r21, 7
    28c6:	04 c0       	rjmp	.+8      	; 0x28d0 <_fpadd_parts+0x1c6>
    28c8:	19 82       	std	Y+1, r1	; 0x01
    28ca:	db 82       	std	Y+3, r13	; 0x03
    28cc:	ca 82       	std	Y+2, r12	; 0x02
    28ce:	0b c0       	rjmp	.+22     	; 0x28e6 <_fpadd_parts+0x1dc>
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	db 82       	std	Y+3, r13	; 0x03
    28d6:	ca 82       	std	Y+2, r12	; 0x02
    28d8:	50 95       	com	r21
    28da:	40 95       	com	r20
    28dc:	30 95       	com	r19
    28de:	21 95       	neg	r18
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	4f 4f       	sbci	r20, 0xFF	; 255
    28e4:	5f 4f       	sbci	r21, 0xFF	; 255
    28e6:	2c 83       	std	Y+4, r18	; 0x04
    28e8:	3d 83       	std	Y+5, r19	; 0x05
    28ea:	4e 83       	std	Y+6, r20	; 0x06
    28ec:	5f 83       	std	Y+7, r21	; 0x07
    28ee:	0d c0       	rjmp	.+26     	; 0x290a <_fpadd_parts+0x200>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	aa 1f       	adc	r26, r26
    28f6:	bb 1f       	adc	r27, r27
    28f8:	8c 83       	std	Y+4, r24	; 0x04
    28fa:	9d 83       	std	Y+5, r25	; 0x05
    28fc:	ae 83       	std	Y+6, r26	; 0x06
    28fe:	bf 83       	std	Y+7, r27	; 0x07
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9b 83       	std	Y+3, r25	; 0x03
    2908:	8a 83       	std	Y+2, r24	; 0x02
    290a:	8c 81       	ldd	r24, Y+4	; 0x04
    290c:	9d 81       	ldd	r25, Y+5	; 0x05
    290e:	ae 81       	ldd	r26, Y+6	; 0x06
    2910:	bf 81       	ldd	r27, Y+7	; 0x07
    2912:	9c 01       	movw	r18, r24
    2914:	ad 01       	movw	r20, r26
    2916:	21 50       	subi	r18, 0x01	; 1
    2918:	30 40       	sbci	r19, 0x00	; 0
    291a:	40 40       	sbci	r20, 0x00	; 0
    291c:	50 40       	sbci	r21, 0x00	; 0
    291e:	2f 3f       	cpi	r18, 0xFF	; 255
    2920:	ef ef       	ldi	r30, 0xFF	; 255
    2922:	3e 07       	cpc	r19, r30
    2924:	ef ef       	ldi	r30, 0xFF	; 255
    2926:	4e 07       	cpc	r20, r30
    2928:	ef e3       	ldi	r30, 0x3F	; 63
    292a:	5e 07       	cpc	r21, r30
    292c:	08 f3       	brcs	.-62     	; 0x28f0 <_fpadd_parts+0x1e6>
    292e:	0b c0       	rjmp	.+22     	; 0x2946 <_fpadd_parts+0x23c>
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	db 82       	std	Y+3, r13	; 0x03
    2934:	ca 82       	std	Y+2, r12	; 0x02
    2936:	2e 0d       	add	r18, r14
    2938:	3f 1d       	adc	r19, r15
    293a:	40 1f       	adc	r20, r16
    293c:	51 1f       	adc	r21, r17
    293e:	2c 83       	std	Y+4, r18	; 0x04
    2940:	3d 83       	std	Y+5, r19	; 0x05
    2942:	4e 83       	std	Y+6, r20	; 0x06
    2944:	5f 83       	std	Y+7, r21	; 0x07
    2946:	83 e0       	ldi	r24, 0x03	; 3
    2948:	88 83       	st	Y, r24
    294a:	2c 81       	ldd	r18, Y+4	; 0x04
    294c:	3d 81       	ldd	r19, Y+5	; 0x05
    294e:	4e 81       	ldd	r20, Y+6	; 0x06
    2950:	5f 81       	ldd	r21, Y+7	; 0x07
    2952:	57 ff       	sbrs	r21, 7
    2954:	1d c0       	rjmp	.+58     	; 0x2990 <_fpadd_parts+0x286>
    2956:	da 01       	movw	r26, r20
    2958:	c9 01       	movw	r24, r18
    295a:	81 70       	andi	r24, 0x01	; 1
    295c:	90 70       	andi	r25, 0x00	; 0
    295e:	a0 70       	andi	r26, 0x00	; 0
    2960:	b0 70       	andi	r27, 0x00	; 0
    2962:	56 95       	lsr	r21
    2964:	47 95       	ror	r20
    2966:	37 95       	ror	r19
    2968:	27 95       	ror	r18
    296a:	82 2b       	or	r24, r18
    296c:	93 2b       	or	r25, r19
    296e:	a4 2b       	or	r26, r20
    2970:	b5 2b       	or	r27, r21
    2972:	8c 83       	std	Y+4, r24	; 0x04
    2974:	9d 83       	std	Y+5, r25	; 0x05
    2976:	ae 83       	std	Y+6, r26	; 0x06
    2978:	bf 83       	std	Y+7, r27	; 0x07
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	9b 83       	std	Y+3, r25	; 0x03
    2982:	8a 83       	std	Y+2, r24	; 0x02
    2984:	05 c0       	rjmp	.+10     	; 0x2990 <_fpadd_parts+0x286>
    2986:	e0 e1       	ldi	r30, 0x10	; 16
    2988:	f1 e0       	ldi	r31, 0x01	; 1
    298a:	03 c0       	rjmp	.+6      	; 0x2992 <_fpadd_parts+0x288>
    298c:	fb 01       	movw	r30, r22
    298e:	01 c0       	rjmp	.+2      	; 0x2992 <_fpadd_parts+0x288>
    2990:	fe 01       	movw	r30, r28
    2992:	cf 01       	movw	r24, r30
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	ee e0       	ldi	r30, 0x0E	; 14
    299a:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__+0x8>

0000299e <__addsf3>:
    299e:	a0 e2       	ldi	r26, 0x20	; 32
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e5 ed       	ldi	r30, 0xD5	; 213
    29a4:	f4 e1       	ldi	r31, 0x14	; 20
    29a6:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__+0x18>
    29aa:	69 83       	std	Y+1, r22	; 0x01
    29ac:	7a 83       	std	Y+2, r23	; 0x02
    29ae:	8b 83       	std	Y+3, r24	; 0x03
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	2d 83       	std	Y+5, r18	; 0x05
    29b4:	3e 83       	std	Y+6, r19	; 0x06
    29b6:	4f 83       	std	Y+7, r20	; 0x07
    29b8:	58 87       	std	Y+8, r21	; 0x08
    29ba:	89 e0       	ldi	r24, 0x09	; 9
    29bc:	e8 2e       	mov	r14, r24
    29be:	f1 2c       	mov	r15, r1
    29c0:	ec 0e       	add	r14, r28
    29c2:	fd 1e       	adc	r15, r29
    29c4:	ce 01       	movw	r24, r28
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	b7 01       	movw	r22, r14
    29ca:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    29ce:	8e 01       	movw	r16, r28
    29d0:	0f 5e       	subi	r16, 0xEF	; 239
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	ce 01       	movw	r24, r28
    29d6:	05 96       	adiw	r24, 0x05	; 5
    29d8:	b8 01       	movw	r22, r16
    29da:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    29de:	c7 01       	movw	r24, r14
    29e0:	b8 01       	movw	r22, r16
    29e2:	ae 01       	movw	r20, r28
    29e4:	47 5e       	subi	r20, 0xE7	; 231
    29e6:	5f 4f       	sbci	r21, 0xFF	; 255
    29e8:	0e 94 85 13 	call	0x270a	; 0x270a <_fpadd_parts>
    29ec:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__pack_f>
    29f0:	a0 96       	adiw	r28, 0x20	; 32
    29f2:	e6 e0       	ldi	r30, 0x06	; 6
    29f4:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x18>

000029f8 <__subsf3>:
    29f8:	a0 e2       	ldi	r26, 0x20	; 32
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e2 e0       	ldi	r30, 0x02	; 2
    29fe:	f5 e1       	ldi	r31, 0x15	; 21
    2a00:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__+0x18>
    2a04:	69 83       	std	Y+1, r22	; 0x01
    2a06:	7a 83       	std	Y+2, r23	; 0x02
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	9c 83       	std	Y+4, r25	; 0x04
    2a0c:	2d 83       	std	Y+5, r18	; 0x05
    2a0e:	3e 83       	std	Y+6, r19	; 0x06
    2a10:	4f 83       	std	Y+7, r20	; 0x07
    2a12:	58 87       	std	Y+8, r21	; 0x08
    2a14:	8e 01       	movw	r16, r28
    2a16:	07 5f       	subi	r16, 0xF7	; 247
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	b8 01       	movw	r22, r16
    2a20:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2a24:	91 e1       	ldi	r25, 0x11	; 17
    2a26:	e9 2e       	mov	r14, r25
    2a28:	f1 2c       	mov	r15, r1
    2a2a:	ec 0e       	add	r14, r28
    2a2c:	fd 1e       	adc	r15, r29
    2a2e:	ce 01       	movw	r24, r28
    2a30:	05 96       	adiw	r24, 0x05	; 5
    2a32:	b7 01       	movw	r22, r14
    2a34:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2a38:	8a 89       	ldd	r24, Y+18	; 0x12
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	89 27       	eor	r24, r25
    2a3e:	8a 8b       	std	Y+18, r24	; 0x12
    2a40:	c8 01       	movw	r24, r16
    2a42:	b7 01       	movw	r22, r14
    2a44:	ae 01       	movw	r20, r28
    2a46:	47 5e       	subi	r20, 0xE7	; 231
    2a48:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4a:	0e 94 85 13 	call	0x270a	; 0x270a <_fpadd_parts>
    2a4e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__pack_f>
    2a52:	a0 96       	adiw	r28, 0x20	; 32
    2a54:	e6 e0       	ldi	r30, 0x06	; 6
    2a56:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x18>

00002a5a <__mulsf3>:
    2a5a:	a0 e2       	ldi	r26, 0x20	; 32
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e3 e3       	ldi	r30, 0x33	; 51
    2a60:	f5 e1       	ldi	r31, 0x15	; 21
    2a62:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__prologue_saves__>
    2a66:	69 83       	std	Y+1, r22	; 0x01
    2a68:	7a 83       	std	Y+2, r23	; 0x02
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
    2a6c:	9c 83       	std	Y+4, r25	; 0x04
    2a6e:	2d 83       	std	Y+5, r18	; 0x05
    2a70:	3e 83       	std	Y+6, r19	; 0x06
    2a72:	4f 83       	std	Y+7, r20	; 0x07
    2a74:	58 87       	std	Y+8, r21	; 0x08
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	be 01       	movw	r22, r28
    2a7c:	67 5f       	subi	r22, 0xF7	; 247
    2a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a80:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2a84:	ce 01       	movw	r24, r28
    2a86:	05 96       	adiw	r24, 0x05	; 5
    2a88:	be 01       	movw	r22, r28
    2a8a:	6f 5e       	subi	r22, 0xEF	; 239
    2a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8e:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2a92:	99 85       	ldd	r25, Y+9	; 0x09
    2a94:	92 30       	cpi	r25, 0x02	; 2
    2a96:	78 f0       	brcs	.+30     	; 0x2ab6 <__mulsf3+0x5c>
    2a98:	89 89       	ldd	r24, Y+17	; 0x11
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	c0 f0       	brcs	.+48     	; 0x2ace <__mulsf3+0x74>
    2a9e:	94 30       	cpi	r25, 0x04	; 4
    2aa0:	19 f4       	brne	.+6      	; 0x2aa8 <__mulsf3+0x4e>
    2aa2:	82 30       	cpi	r24, 0x02	; 2
    2aa4:	41 f4       	brne	.+16     	; 0x2ab6 <__mulsf3+0x5c>
    2aa6:	cb c0       	rjmp	.+406    	; 0x2c3e <__mulsf3+0x1e4>
    2aa8:	84 30       	cpi	r24, 0x04	; 4
    2aaa:	19 f4       	brne	.+6      	; 0x2ab2 <__mulsf3+0x58>
    2aac:	92 30       	cpi	r25, 0x02	; 2
    2aae:	79 f4       	brne	.+30     	; 0x2ace <__mulsf3+0x74>
    2ab0:	c6 c0       	rjmp	.+396    	; 0x2c3e <__mulsf3+0x1e4>
    2ab2:	92 30       	cpi	r25, 0x02	; 2
    2ab4:	51 f4       	brne	.+20     	; 0x2aca <__mulsf3+0x70>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	2a 85       	ldd	r18, Y+10	; 0x0a
    2aba:	9a 89       	ldd	r25, Y+18	; 0x12
    2abc:	29 17       	cp	r18, r25
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <__mulsf3+0x68>
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	8a 87       	std	Y+10, r24	; 0x0a
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	09 96       	adiw	r24, 0x09	; 9
    2ac8:	bc c0       	rjmp	.+376    	; 0x2c42 <__mulsf3+0x1e8>
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	51 f4       	brne	.+20     	; 0x2ae2 <__mulsf3+0x88>
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ad2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad4:	29 17       	cp	r18, r25
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <__mulsf3+0x80>
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	8a 8b       	std	Y+18, r24	; 0x12
    2adc:	ce 01       	movw	r24, r28
    2ade:	41 96       	adiw	r24, 0x11	; 17
    2ae0:	b0 c0       	rjmp	.+352    	; 0x2c42 <__mulsf3+0x1e8>
    2ae2:	6d 84       	ldd	r6, Y+13	; 0x0d
    2ae4:	7e 84       	ldd	r7, Y+14	; 0x0e
    2ae6:	8f 84       	ldd	r8, Y+15	; 0x0f
    2ae8:	98 88       	ldd	r9, Y+16	; 0x10
    2aea:	ed 88       	ldd	r14, Y+21	; 0x15
    2aec:	fe 88       	ldd	r15, Y+22	; 0x16
    2aee:	0f 89       	ldd	r16, Y+23	; 0x17
    2af0:	18 8d       	ldd	r17, Y+24	; 0x18
    2af2:	e0 e2       	ldi	r30, 0x20	; 32
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	dc 01       	movw	r26, r24
    2afc:	aa 24       	eor	r10, r10
    2afe:	bb 24       	eor	r11, r11
    2b00:	65 01       	movw	r12, r10
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	a9 01       	movw	r20, r18
    2b08:	b3 01       	movw	r22, r6
    2b0a:	61 70       	andi	r22, 0x01	; 1
    2b0c:	70 70       	andi	r23, 0x00	; 0
    2b0e:	61 15       	cp	r22, r1
    2b10:	71 05       	cpc	r23, r1
    2b12:	d1 f0       	breq	.+52     	; 0x2b48 <__mulsf3+0xee>
    2b14:	2e 0d       	add	r18, r14
    2b16:	3f 1d       	adc	r19, r15
    2b18:	40 1f       	adc	r20, r16
    2b1a:	51 1f       	adc	r21, r17
    2b1c:	15 01       	movw	r2, r10
    2b1e:	26 01       	movw	r4, r12
    2b20:	28 0e       	add	r2, r24
    2b22:	39 1e       	adc	r3, r25
    2b24:	4a 1e       	adc	r4, r26
    2b26:	5b 1e       	adc	r5, r27
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a0 e0       	ldi	r26, 0x00	; 0
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	2e 15       	cp	r18, r14
    2b32:	3f 05       	cpc	r19, r15
    2b34:	40 07       	cpc	r20, r16
    2b36:	51 07       	cpc	r21, r17
    2b38:	18 f0       	brcs	.+6      	; 0x2b40 <__mulsf3+0xe6>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	dc 01       	movw	r26, r24
    2b40:	82 0d       	add	r24, r2
    2b42:	93 1d       	adc	r25, r3
    2b44:	a4 1d       	adc	r26, r4
    2b46:	b5 1d       	adc	r27, r5
    2b48:	aa 0c       	add	r10, r10
    2b4a:	bb 1c       	adc	r11, r11
    2b4c:	cc 1c       	adc	r12, r12
    2b4e:	dd 1c       	adc	r13, r13
    2b50:	17 ff       	sbrs	r17, 7
    2b52:	09 c0       	rjmp	.+18     	; 0x2b66 <__mulsf3+0x10c>
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	26 2e       	mov	r2, r22
    2b58:	31 2c       	mov	r3, r1
    2b5a:	41 2c       	mov	r4, r1
    2b5c:	51 2c       	mov	r5, r1
    2b5e:	a2 28       	or	r10, r2
    2b60:	b3 28       	or	r11, r3
    2b62:	c4 28       	or	r12, r4
    2b64:	d5 28       	or	r13, r5
    2b66:	31 97       	sbiw	r30, 0x01	; 1
    2b68:	49 f0       	breq	.+18     	; 0x2b7c <__mulsf3+0x122>
    2b6a:	ee 0c       	add	r14, r14
    2b6c:	ff 1c       	adc	r15, r15
    2b6e:	00 1f       	adc	r16, r16
    2b70:	11 1f       	adc	r17, r17
    2b72:	96 94       	lsr	r9
    2b74:	87 94       	ror	r8
    2b76:	77 94       	ror	r7
    2b78:	67 94       	ror	r6
    2b7a:	c6 cf       	rjmp	.-116    	; 0x2b08 <__mulsf3+0xae>
    2b7c:	6b 89       	ldd	r22, Y+19	; 0x13
    2b7e:	7c 89       	ldd	r23, Y+20	; 0x14
    2b80:	eb 85       	ldd	r30, Y+11	; 0x0b
    2b82:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b84:	6e 0f       	add	r22, r30
    2b86:	7f 1f       	adc	r23, r31
    2b88:	6e 5f       	subi	r22, 0xFE	; 254
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	7c 8f       	std	Y+28, r23	; 0x1c
    2b8e:	6b 8f       	std	Y+27, r22	; 0x1b
    2b90:	61 e0       	ldi	r22, 0x01	; 1
    2b92:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b94:	7a 89       	ldd	r23, Y+18	; 0x12
    2b96:	e7 17       	cp	r30, r23
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <__mulsf3+0x142>
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	6a 8f       	std	Y+26, r22	; 0x1a
    2b9e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2ba0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2ba2:	10 c0       	rjmp	.+32     	; 0x2bc4 <__mulsf3+0x16a>
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	e1 70       	andi	r30, 0x01	; 1
    2ba8:	f0 70       	andi	r31, 0x00	; 0
    2baa:	30 97       	sbiw	r30, 0x00	; 0
    2bac:	29 f0       	breq	.+10     	; 0x2bb8 <__mulsf3+0x15e>
    2bae:	56 95       	lsr	r21
    2bb0:	47 95       	ror	r20
    2bb2:	37 95       	ror	r19
    2bb4:	27 95       	ror	r18
    2bb6:	50 68       	ori	r21, 0x80	; 128
    2bb8:	b6 95       	lsr	r27
    2bba:	a7 95       	ror	r26
    2bbc:	97 95       	ror	r25
    2bbe:	87 95       	ror	r24
    2bc0:	6f 5f       	subi	r22, 0xFF	; 255
    2bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc4:	b7 fd       	sbrc	r27, 7
    2bc6:	ee cf       	rjmp	.-36     	; 0x2ba4 <__mulsf3+0x14a>
    2bc8:	0c c0       	rjmp	.+24     	; 0x2be2 <__mulsf3+0x188>
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	aa 1f       	adc	r26, r26
    2bd0:	bb 1f       	adc	r27, r27
    2bd2:	57 fd       	sbrc	r21, 7
    2bd4:	81 60       	ori	r24, 0x01	; 1
    2bd6:	22 0f       	add	r18, r18
    2bd8:	33 1f       	adc	r19, r19
    2bda:	44 1f       	adc	r20, r20
    2bdc:	55 1f       	adc	r21, r21
    2bde:	61 50       	subi	r22, 0x01	; 1
    2be0:	70 40       	sbci	r23, 0x00	; 0
    2be2:	80 30       	cpi	r24, 0x00	; 0
    2be4:	e0 e0       	ldi	r30, 0x00	; 0
    2be6:	9e 07       	cpc	r25, r30
    2be8:	e0 e0       	ldi	r30, 0x00	; 0
    2bea:	ae 07       	cpc	r26, r30
    2bec:	e0 e4       	ldi	r30, 0x40	; 64
    2bee:	be 07       	cpc	r27, r30
    2bf0:	60 f3       	brcs	.-40     	; 0x2bca <__mulsf3+0x170>
    2bf2:	6b 8f       	std	Y+27, r22	; 0x1b
    2bf4:	7c 8f       	std	Y+28, r23	; 0x1c
    2bf6:	6f e7       	ldi	r22, 0x7F	; 127
    2bf8:	e6 2e       	mov	r14, r22
    2bfa:	f1 2c       	mov	r15, r1
    2bfc:	01 2d       	mov	r16, r1
    2bfe:	11 2d       	mov	r17, r1
    2c00:	e8 22       	and	r14, r24
    2c02:	f9 22       	and	r15, r25
    2c04:	0a 23       	and	r16, r26
    2c06:	1b 23       	and	r17, r27
    2c08:	60 e4       	ldi	r22, 0x40	; 64
    2c0a:	e6 16       	cp	r14, r22
    2c0c:	f1 04       	cpc	r15, r1
    2c0e:	01 05       	cpc	r16, r1
    2c10:	11 05       	cpc	r17, r1
    2c12:	61 f4       	brne	.+24     	; 0x2c2c <__mulsf3+0x1d2>
    2c14:	87 fd       	sbrc	r24, 7
    2c16:	0a c0       	rjmp	.+20     	; 0x2c2c <__mulsf3+0x1d2>
    2c18:	21 15       	cp	r18, r1
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	41 05       	cpc	r20, r1
    2c1e:	51 05       	cpc	r21, r1
    2c20:	29 f0       	breq	.+10     	; 0x2c2c <__mulsf3+0x1d2>
    2c22:	80 5c       	subi	r24, 0xC0	; 192
    2c24:	9f 4f       	sbci	r25, 0xFF	; 255
    2c26:	af 4f       	sbci	r26, 0xFF	; 255
    2c28:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2a:	80 78       	andi	r24, 0x80	; 128
    2c2c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c30:	af 8f       	std	Y+31, r26	; 0x1f
    2c32:	b8 a3       	std	Y+32, r27	; 0x20
    2c34:	83 e0       	ldi	r24, 0x03	; 3
    2c36:	89 8f       	std	Y+25, r24	; 0x19
    2c38:	ce 01       	movw	r24, r28
    2c3a:	49 96       	adiw	r24, 0x19	; 25
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <__mulsf3+0x1e8>
    2c3e:	80 e1       	ldi	r24, 0x10	; 16
    2c40:	91 e0       	ldi	r25, 0x01	; 1
    2c42:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__pack_f>
    2c46:	a0 96       	adiw	r28, 0x20	; 32
    2c48:	e2 e1       	ldi	r30, 0x12	; 18
    2c4a:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__epilogue_restores__>

00002c4e <__divsf3>:
    2c4e:	a8 e1       	ldi	r26, 0x18	; 24
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	ed e2       	ldi	r30, 0x2D	; 45
    2c54:	f6 e1       	ldi	r31, 0x16	; 22
    2c56:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__prologue_saves__+0x10>
    2c5a:	69 83       	std	Y+1, r22	; 0x01
    2c5c:	7a 83       	std	Y+2, r23	; 0x02
    2c5e:	8b 83       	std	Y+3, r24	; 0x03
    2c60:	9c 83       	std	Y+4, r25	; 0x04
    2c62:	2d 83       	std	Y+5, r18	; 0x05
    2c64:	3e 83       	std	Y+6, r19	; 0x06
    2c66:	4f 83       	std	Y+7, r20	; 0x07
    2c68:	58 87       	std	Y+8, r21	; 0x08
    2c6a:	8e 01       	movw	r16, r28
    2c6c:	07 5f       	subi	r16, 0xF7	; 247
    2c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c70:	ce 01       	movw	r24, r28
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	b8 01       	movw	r22, r16
    2c76:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2c7a:	81 e1       	ldi	r24, 0x11	; 17
    2c7c:	e8 2e       	mov	r14, r24
    2c7e:	f1 2c       	mov	r15, r1
    2c80:	ec 0e       	add	r14, r28
    2c82:	fd 1e       	adc	r15, r29
    2c84:	ce 01       	movw	r24, r28
    2c86:	05 96       	adiw	r24, 0x05	; 5
    2c88:	b7 01       	movw	r22, r14
    2c8a:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2c8e:	99 85       	ldd	r25, Y+9	; 0x09
    2c90:	92 30       	cpi	r25, 0x02	; 2
    2c92:	08 f4       	brcc	.+2      	; 0x2c96 <__divsf3+0x48>
    2c94:	83 c0       	rjmp	.+262    	; 0x2d9c <__divsf3+0x14e>
    2c96:	89 89       	ldd	r24, Y+17	; 0x11
    2c98:	82 30       	cpi	r24, 0x02	; 2
    2c9a:	08 f4       	brcc	.+2      	; 0x2c9e <__divsf3+0x50>
    2c9c:	7b c0       	rjmp	.+246    	; 0x2d94 <__divsf3+0x146>
    2c9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ca0:	3a 89       	ldd	r19, Y+18	; 0x12
    2ca2:	23 27       	eor	r18, r19
    2ca4:	2a 87       	std	Y+10, r18	; 0x0a
    2ca6:	94 30       	cpi	r25, 0x04	; 4
    2ca8:	11 f0       	breq	.+4      	; 0x2cae <__divsf3+0x60>
    2caa:	92 30       	cpi	r25, 0x02	; 2
    2cac:	21 f4       	brne	.+8      	; 0x2cb6 <__divsf3+0x68>
    2cae:	98 17       	cp	r25, r24
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <__divsf3+0x66>
    2cb2:	6c c0       	rjmp	.+216    	; 0x2d8c <__divsf3+0x13e>
    2cb4:	71 c0       	rjmp	.+226    	; 0x2d98 <__divsf3+0x14a>
    2cb6:	84 30       	cpi	r24, 0x04	; 4
    2cb8:	39 f4       	brne	.+14     	; 0x2cc8 <__divsf3+0x7a>
    2cba:	1d 86       	std	Y+13, r1	; 0x0d
    2cbc:	1e 86       	std	Y+14, r1	; 0x0e
    2cbe:	1f 86       	std	Y+15, r1	; 0x0f
    2cc0:	18 8a       	std	Y+16, r1	; 0x10
    2cc2:	1c 86       	std	Y+12, r1	; 0x0c
    2cc4:	1b 86       	std	Y+11, r1	; 0x0b
    2cc6:	6a c0       	rjmp	.+212    	; 0x2d9c <__divsf3+0x14e>
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	19 f4       	brne	.+6      	; 0x2cd2 <__divsf3+0x84>
    2ccc:	84 e0       	ldi	r24, 0x04	; 4
    2cce:	89 87       	std	Y+9, r24	; 0x09
    2cd0:	65 c0       	rjmp	.+202    	; 0x2d9c <__divsf3+0x14e>
    2cd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cd6:	2b 89       	ldd	r18, Y+19	; 0x13
    2cd8:	3c 89       	ldd	r19, Y+20	; 0x14
    2cda:	82 1b       	sub	r24, r18
    2cdc:	93 0b       	sbc	r25, r19
    2cde:	9c 87       	std	Y+12, r25	; 0x0c
    2ce0:	8b 87       	std	Y+11, r24	; 0x0b
    2ce2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ce4:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ce6:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ce8:	58 89       	ldd	r21, Y+16	; 0x10
    2cea:	ed 88       	ldd	r14, Y+21	; 0x15
    2cec:	fe 88       	ldd	r15, Y+22	; 0x16
    2cee:	0f 89       	ldd	r16, Y+23	; 0x17
    2cf0:	18 8d       	ldd	r17, Y+24	; 0x18
    2cf2:	2e 15       	cp	r18, r14
    2cf4:	3f 05       	cpc	r19, r15
    2cf6:	40 07       	cpc	r20, r16
    2cf8:	51 07       	cpc	r21, r17
    2cfa:	38 f4       	brcc	.+14     	; 0x2d0a <__divsf3+0xbc>
    2cfc:	22 0f       	add	r18, r18
    2cfe:	33 1f       	adc	r19, r19
    2d00:	44 1f       	adc	r20, r20
    2d02:	55 1f       	adc	r21, r21
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	9c 87       	std	Y+12, r25	; 0x0c
    2d08:	8b 87       	std	Y+11, r24	; 0x0b
    2d0a:	6f e1       	ldi	r22, 0x1F	; 31
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	a1 2c       	mov	r10, r1
    2d10:	b1 2c       	mov	r11, r1
    2d12:	c1 2c       	mov	r12, r1
    2d14:	a0 e4       	ldi	r26, 0x40	; 64
    2d16:	da 2e       	mov	r13, r26
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	2e 15       	cp	r18, r14
    2d20:	3f 05       	cpc	r19, r15
    2d22:	40 07       	cpc	r20, r16
    2d24:	51 07       	cpc	r21, r17
    2d26:	40 f0       	brcs	.+16     	; 0x2d38 <__divsf3+0xea>
    2d28:	8a 29       	or	r24, r10
    2d2a:	9b 29       	or	r25, r11
    2d2c:	ac 29       	or	r26, r12
    2d2e:	bd 29       	or	r27, r13
    2d30:	2e 19       	sub	r18, r14
    2d32:	3f 09       	sbc	r19, r15
    2d34:	40 0b       	sbc	r20, r16
    2d36:	51 0b       	sbc	r21, r17
    2d38:	d6 94       	lsr	r13
    2d3a:	c7 94       	ror	r12
    2d3c:	b7 94       	ror	r11
    2d3e:	a7 94       	ror	r10
    2d40:	22 0f       	add	r18, r18
    2d42:	33 1f       	adc	r19, r19
    2d44:	44 1f       	adc	r20, r20
    2d46:	55 1f       	adc	r21, r21
    2d48:	61 50       	subi	r22, 0x01	; 1
    2d4a:	70 40       	sbci	r23, 0x00	; 0
    2d4c:	41 f7       	brne	.-48     	; 0x2d1e <__divsf3+0xd0>
    2d4e:	6f e7       	ldi	r22, 0x7F	; 127
    2d50:	e6 2e       	mov	r14, r22
    2d52:	f1 2c       	mov	r15, r1
    2d54:	01 2d       	mov	r16, r1
    2d56:	11 2d       	mov	r17, r1
    2d58:	e8 22       	and	r14, r24
    2d5a:	f9 22       	and	r15, r25
    2d5c:	0a 23       	and	r16, r26
    2d5e:	1b 23       	and	r17, r27
    2d60:	60 e4       	ldi	r22, 0x40	; 64
    2d62:	e6 16       	cp	r14, r22
    2d64:	f1 04       	cpc	r15, r1
    2d66:	01 05       	cpc	r16, r1
    2d68:	11 05       	cpc	r17, r1
    2d6a:	61 f4       	brne	.+24     	; 0x2d84 <__divsf3+0x136>
    2d6c:	87 fd       	sbrc	r24, 7
    2d6e:	0a c0       	rjmp	.+20     	; 0x2d84 <__divsf3+0x136>
    2d70:	21 15       	cp	r18, r1
    2d72:	31 05       	cpc	r19, r1
    2d74:	41 05       	cpc	r20, r1
    2d76:	51 05       	cpc	r21, r1
    2d78:	29 f0       	breq	.+10     	; 0x2d84 <__divsf3+0x136>
    2d7a:	80 5c       	subi	r24, 0xC0	; 192
    2d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7e:	af 4f       	sbci	r26, 0xFF	; 255
    2d80:	bf 4f       	sbci	r27, 0xFF	; 255
    2d82:	80 78       	andi	r24, 0x80	; 128
    2d84:	8d 87       	std	Y+13, r24	; 0x0d
    2d86:	9e 87       	std	Y+14, r25	; 0x0e
    2d88:	af 87       	std	Y+15, r26	; 0x0f
    2d8a:	b8 8b       	std	Y+16, r27	; 0x10
    2d8c:	8e 01       	movw	r16, r28
    2d8e:	07 5f       	subi	r16, 0xF7	; 247
    2d90:	1f 4f       	sbci	r17, 0xFF	; 255
    2d92:	04 c0       	rjmp	.+8      	; 0x2d9c <__divsf3+0x14e>
    2d94:	87 01       	movw	r16, r14
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <__divsf3+0x14e>
    2d98:	00 e1       	ldi	r16, 0x10	; 16
    2d9a:	11 e0       	ldi	r17, 0x01	; 1
    2d9c:	c8 01       	movw	r24, r16
    2d9e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__pack_f>
    2da2:	68 96       	adiw	r28, 0x18	; 24
    2da4:	ea e0       	ldi	r30, 0x0A	; 10
    2da6:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__epilogue_restores__+0x10>

00002daa <__gtsf2>:
    2daa:	a8 e1       	ldi	r26, 0x18	; 24
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	eb ed       	ldi	r30, 0xDB	; 219
    2db0:	f6 e1       	ldi	r31, 0x16	; 22
    2db2:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__+0x18>
    2db6:	69 83       	std	Y+1, r22	; 0x01
    2db8:	7a 83       	std	Y+2, r23	; 0x02
    2dba:	8b 83       	std	Y+3, r24	; 0x03
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	2d 83       	std	Y+5, r18	; 0x05
    2dc0:	3e 83       	std	Y+6, r19	; 0x06
    2dc2:	4f 83       	std	Y+7, r20	; 0x07
    2dc4:	58 87       	std	Y+8, r21	; 0x08
    2dc6:	8e 01       	movw	r16, r28
    2dc8:	07 5f       	subi	r16, 0xF7	; 247
    2dca:	1f 4f       	sbci	r17, 0xFF	; 255
    2dcc:	ce 01       	movw	r24, r28
    2dce:	01 96       	adiw	r24, 0x01	; 1
    2dd0:	b8 01       	movw	r22, r16
    2dd2:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2dd6:	81 e1       	ldi	r24, 0x11	; 17
    2dd8:	e8 2e       	mov	r14, r24
    2dda:	f1 2c       	mov	r15, r1
    2ddc:	ec 0e       	add	r14, r28
    2dde:	fd 1e       	adc	r15, r29
    2de0:	ce 01       	movw	r24, r28
    2de2:	05 96       	adiw	r24, 0x05	; 5
    2de4:	b7 01       	movw	r22, r14
    2de6:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	40 f0       	brcs	.+16     	; 0x2e00 <__gtsf2+0x56>
    2df0:	89 89       	ldd	r24, Y+17	; 0x11
    2df2:	82 30       	cpi	r24, 0x02	; 2
    2df4:	28 f0       	brcs	.+10     	; 0x2e00 <__gtsf2+0x56>
    2df6:	c8 01       	movw	r24, r16
    2df8:	b7 01       	movw	r22, r14
    2dfa:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fpcmp_parts_f>
    2dfe:	01 c0       	rjmp	.+2      	; 0x2e02 <__gtsf2+0x58>
    2e00:	8f ef       	ldi	r24, 0xFF	; 255
    2e02:	68 96       	adiw	r28, 0x18	; 24
    2e04:	e6 e0       	ldi	r30, 0x06	; 6
    2e06:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x18>

00002e0a <__gesf2>:
    2e0a:	a8 e1       	ldi	r26, 0x18	; 24
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	eb e0       	ldi	r30, 0x0B	; 11
    2e10:	f7 e1       	ldi	r31, 0x17	; 23
    2e12:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__+0x18>
    2e16:	69 83       	std	Y+1, r22	; 0x01
    2e18:	7a 83       	std	Y+2, r23	; 0x02
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	2d 83       	std	Y+5, r18	; 0x05
    2e20:	3e 83       	std	Y+6, r19	; 0x06
    2e22:	4f 83       	std	Y+7, r20	; 0x07
    2e24:	58 87       	std	Y+8, r21	; 0x08
    2e26:	8e 01       	movw	r16, r28
    2e28:	07 5f       	subi	r16, 0xF7	; 247
    2e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	01 96       	adiw	r24, 0x01	; 1
    2e30:	b8 01       	movw	r22, r16
    2e32:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2e36:	81 e1       	ldi	r24, 0x11	; 17
    2e38:	e8 2e       	mov	r14, r24
    2e3a:	f1 2c       	mov	r15, r1
    2e3c:	ec 0e       	add	r14, r28
    2e3e:	fd 1e       	adc	r15, r29
    2e40:	ce 01       	movw	r24, r28
    2e42:	05 96       	adiw	r24, 0x05	; 5
    2e44:	b7 01       	movw	r22, r14
    2e46:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2e4a:	89 85       	ldd	r24, Y+9	; 0x09
    2e4c:	82 30       	cpi	r24, 0x02	; 2
    2e4e:	40 f0       	brcs	.+16     	; 0x2e60 <__gesf2+0x56>
    2e50:	89 89       	ldd	r24, Y+17	; 0x11
    2e52:	82 30       	cpi	r24, 0x02	; 2
    2e54:	28 f0       	brcs	.+10     	; 0x2e60 <__gesf2+0x56>
    2e56:	c8 01       	movw	r24, r16
    2e58:	b7 01       	movw	r22, r14
    2e5a:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fpcmp_parts_f>
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <__gesf2+0x58>
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	68 96       	adiw	r28, 0x18	; 24
    2e64:	e6 e0       	ldi	r30, 0x06	; 6
    2e66:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x18>

00002e6a <__ltsf2>:
    2e6a:	a8 e1       	ldi	r26, 0x18	; 24
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	eb e3       	ldi	r30, 0x3B	; 59
    2e70:	f7 e1       	ldi	r31, 0x17	; 23
    2e72:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__+0x18>
    2e76:	69 83       	std	Y+1, r22	; 0x01
    2e78:	7a 83       	std	Y+2, r23	; 0x02
    2e7a:	8b 83       	std	Y+3, r24	; 0x03
    2e7c:	9c 83       	std	Y+4, r25	; 0x04
    2e7e:	2d 83       	std	Y+5, r18	; 0x05
    2e80:	3e 83       	std	Y+6, r19	; 0x06
    2e82:	4f 83       	std	Y+7, r20	; 0x07
    2e84:	58 87       	std	Y+8, r21	; 0x08
    2e86:	8e 01       	movw	r16, r28
    2e88:	07 5f       	subi	r16, 0xF7	; 247
    2e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	b8 01       	movw	r22, r16
    2e92:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2e96:	81 e1       	ldi	r24, 0x11	; 17
    2e98:	e8 2e       	mov	r14, r24
    2e9a:	f1 2c       	mov	r15, r1
    2e9c:	ec 0e       	add	r14, r28
    2e9e:	fd 1e       	adc	r15, r29
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	05 96       	adiw	r24, 0x05	; 5
    2ea4:	b7 01       	movw	r22, r14
    2ea6:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2eaa:	89 85       	ldd	r24, Y+9	; 0x09
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	40 f0       	brcs	.+16     	; 0x2ec0 <__ltsf2+0x56>
    2eb0:	89 89       	ldd	r24, Y+17	; 0x11
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	28 f0       	brcs	.+10     	; 0x2ec0 <__ltsf2+0x56>
    2eb6:	c8 01       	movw	r24, r16
    2eb8:	b7 01       	movw	r22, r14
    2eba:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fpcmp_parts_f>
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <__ltsf2+0x58>
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	68 96       	adiw	r28, 0x18	; 24
    2ec4:	e6 e0       	ldi	r30, 0x06	; 6
    2ec6:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x18>

00002eca <__floatsisf>:
    2eca:	a8 e0       	ldi	r26, 0x08	; 8
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	eb e6       	ldi	r30, 0x6B	; 107
    2ed0:	f7 e1       	ldi	r31, 0x17	; 23
    2ed2:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__+0x18>
    2ed6:	7b 01       	movw	r14, r22
    2ed8:	8c 01       	movw	r16, r24
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	89 83       	std	Y+1, r24	; 0x01
    2ede:	d8 01       	movw	r26, r16
    2ee0:	c7 01       	movw	r24, r14
    2ee2:	88 27       	eor	r24, r24
    2ee4:	b7 fd       	sbrc	r27, 7
    2ee6:	83 95       	inc	r24
    2ee8:	99 27       	eor	r25, r25
    2eea:	aa 27       	eor	r26, r26
    2eec:	bb 27       	eor	r27, r27
    2eee:	28 2f       	mov	r18, r24
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
    2ef2:	e1 14       	cp	r14, r1
    2ef4:	f1 04       	cpc	r15, r1
    2ef6:	01 05       	cpc	r16, r1
    2ef8:	11 05       	cpc	r17, r1
    2efa:	19 f4       	brne	.+6      	; 0x2f02 <__floatsisf+0x38>
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	37 c0       	rjmp	.+110    	; 0x2f70 <__floatsisf+0xa6>
    2f02:	8e e1       	ldi	r24, 0x1E	; 30
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
    2f0a:	22 23       	and	r18, r18
    2f0c:	89 f0       	breq	.+34     	; 0x2f30 <__floatsisf+0x66>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	e8 16       	cp	r14, r24
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	f8 06       	cpc	r15, r24
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	08 07       	cpc	r16, r24
    2f1a:	80 e8       	ldi	r24, 0x80	; 128
    2f1c:	18 07       	cpc	r17, r24
    2f1e:	69 f1       	breq	.+90     	; 0x2f7a <__floatsisf+0xb0>
    2f20:	10 95       	com	r17
    2f22:	00 95       	com	r16
    2f24:	f0 94       	com	r15
    2f26:	e0 94       	com	r14
    2f28:	e1 1c       	adc	r14, r1
    2f2a:	f1 1c       	adc	r15, r1
    2f2c:	01 1d       	adc	r16, r1
    2f2e:	11 1d       	adc	r17, r1
    2f30:	ed 82       	std	Y+5, r14	; 0x05
    2f32:	fe 82       	std	Y+6, r15	; 0x06
    2f34:	0f 83       	std	Y+7, r16	; 0x07
    2f36:	18 87       	std	Y+8, r17	; 0x08
    2f38:	c8 01       	movw	r24, r16
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	0e 94 8f 18 	call	0x311e	; 0x311e <__clzsi2>
    2f40:	9c 01       	movw	r18, r24
    2f42:	21 50       	subi	r18, 0x01	; 1
    2f44:	30 40       	sbci	r19, 0x00	; 0
    2f46:	12 16       	cp	r1, r18
    2f48:	13 06       	cpc	r1, r19
    2f4a:	94 f4       	brge	.+36     	; 0x2f70 <__floatsisf+0xa6>
    2f4c:	02 2e       	mov	r0, r18
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <__floatsisf+0x8e>
    2f50:	ee 0c       	add	r14, r14
    2f52:	ff 1c       	adc	r15, r15
    2f54:	00 1f       	adc	r16, r16
    2f56:	11 1f       	adc	r17, r17
    2f58:	0a 94       	dec	r0
    2f5a:	d2 f7       	brpl	.-12     	; 0x2f50 <__floatsisf+0x86>
    2f5c:	ed 82       	std	Y+5, r14	; 0x05
    2f5e:	fe 82       	std	Y+6, r15	; 0x06
    2f60:	0f 83       	std	Y+7, r16	; 0x07
    2f62:	18 87       	std	Y+8, r17	; 0x08
    2f64:	8e e1       	ldi	r24, 0x1E	; 30
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	82 1b       	sub	r24, r18
    2f6a:	93 0b       	sbc	r25, r19
    2f6c:	9c 83       	std	Y+4, r25	; 0x04
    2f6e:	8b 83       	std	Y+3, r24	; 0x03
    2f70:	ce 01       	movw	r24, r28
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__pack_f>
    2f78:	04 c0       	rjmp	.+8      	; 0x2f82 <__floatsisf+0xb8>
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	9f ec       	ldi	r25, 0xCF	; 207
    2f82:	28 96       	adiw	r28, 0x08	; 8
    2f84:	e6 e0       	ldi	r30, 0x06	; 6
    2f86:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x18>

00002f8a <__fixsfsi>:
    2f8a:	ac e0       	ldi	r26, 0x0C	; 12
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	eb ec       	ldi	r30, 0xCB	; 203
    2f90:	f7 e1       	ldi	r31, 0x17	; 23
    2f92:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__prologue_saves__+0x20>
    2f96:	69 83       	std	Y+1, r22	; 0x01
    2f98:	7a 83       	std	Y+2, r23	; 0x02
    2f9a:	8b 83       	std	Y+3, r24	; 0x03
    2f9c:	9c 83       	std	Y+4, r25	; 0x04
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	be 01       	movw	r22, r28
    2fa4:	6b 5f       	subi	r22, 0xFB	; 251
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa8:	0e 94 b6 19 	call	0x336c	; 0x336c <__unpack_f>
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	82 30       	cpi	r24, 0x02	; 2
    2fb0:	81 f1       	breq	.+96     	; 0x3012 <__fixsfsi+0x88>
    2fb2:	82 30       	cpi	r24, 0x02	; 2
    2fb4:	70 f1       	brcs	.+92     	; 0x3012 <__fixsfsi+0x88>
    2fb6:	84 30       	cpi	r24, 0x04	; 4
    2fb8:	21 f4       	brne	.+8      	; 0x2fc2 <__fixsfsi+0x38>
    2fba:	8e 81       	ldd	r24, Y+6	; 0x06
    2fbc:	88 23       	and	r24, r24
    2fbe:	69 f1       	breq	.+90     	; 0x301a <__fixsfsi+0x90>
    2fc0:	0a c0       	rjmp	.+20     	; 0x2fd6 <__fixsfsi+0x4c>
    2fc2:	2f 81       	ldd	r18, Y+7	; 0x07
    2fc4:	38 85       	ldd	r19, Y+8	; 0x08
    2fc6:	37 fd       	sbrc	r19, 7
    2fc8:	24 c0       	rjmp	.+72     	; 0x3012 <__fixsfsi+0x88>
    2fca:	6e 81       	ldd	r22, Y+6	; 0x06
    2fcc:	2f 31       	cpi	r18, 0x1F	; 31
    2fce:	31 05       	cpc	r19, r1
    2fd0:	3c f0       	brlt	.+14     	; 0x2fe0 <__fixsfsi+0x56>
    2fd2:	66 23       	and	r22, r22
    2fd4:	11 f1       	breq	.+68     	; 0x301a <__fixsfsi+0x90>
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	50 e8       	ldi	r21, 0x80	; 128
    2fde:	21 c0       	rjmp	.+66     	; 0x3022 <__fixsfsi+0x98>
    2fe0:	8e e1       	ldi	r24, 0x1E	; 30
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	82 1b       	sub	r24, r18
    2fe6:	93 0b       	sbc	r25, r19
    2fe8:	29 85       	ldd	r18, Y+9	; 0x09
    2fea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fec:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fee:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <__fixsfsi+0x70>
    2ff2:	56 95       	lsr	r21
    2ff4:	47 95       	ror	r20
    2ff6:	37 95       	ror	r19
    2ff8:	27 95       	ror	r18
    2ffa:	8a 95       	dec	r24
    2ffc:	d2 f7       	brpl	.-12     	; 0x2ff2 <__fixsfsi+0x68>
    2ffe:	66 23       	and	r22, r22
    3000:	81 f0       	breq	.+32     	; 0x3022 <__fixsfsi+0x98>
    3002:	50 95       	com	r21
    3004:	40 95       	com	r20
    3006:	30 95       	com	r19
    3008:	21 95       	neg	r18
    300a:	3f 4f       	sbci	r19, 0xFF	; 255
    300c:	4f 4f       	sbci	r20, 0xFF	; 255
    300e:	5f 4f       	sbci	r21, 0xFF	; 255
    3010:	08 c0       	rjmp	.+16     	; 0x3022 <__fixsfsi+0x98>
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	a9 01       	movw	r20, r18
    3018:	04 c0       	rjmp	.+8      	; 0x3022 <__fixsfsi+0x98>
    301a:	2f ef       	ldi	r18, 0xFF	; 255
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f ef       	ldi	r20, 0xFF	; 255
    3020:	5f e7       	ldi	r21, 0x7F	; 127
    3022:	b9 01       	movw	r22, r18
    3024:	ca 01       	movw	r24, r20
    3026:	2c 96       	adiw	r28, 0x0c	; 12
    3028:	e2 e0       	ldi	r30, 0x02	; 2
    302a:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__epilogue_restores__+0x20>

0000302e <__floatunsisf>:
    302e:	a8 e0       	ldi	r26, 0x08	; 8
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	ed e1       	ldi	r30, 0x1D	; 29
    3034:	f8 e1       	ldi	r31, 0x18	; 24
    3036:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x14>
    303a:	7b 01       	movw	r14, r22
    303c:	8c 01       	movw	r16, r24
    303e:	1a 82       	std	Y+2, r1	; 0x02
    3040:	61 15       	cp	r22, r1
    3042:	71 05       	cpc	r23, r1
    3044:	81 05       	cpc	r24, r1
    3046:	91 05       	cpc	r25, r1
    3048:	19 f4       	brne	.+6      	; 0x3050 <__floatunsisf+0x22>
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	89 83       	std	Y+1, r24	; 0x01
    304e:	5f c0       	rjmp	.+190    	; 0x310e <__floatunsisf+0xe0>
    3050:	83 e0       	ldi	r24, 0x03	; 3
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	8e e1       	ldi	r24, 0x1E	; 30
    3056:	c8 2e       	mov	r12, r24
    3058:	d1 2c       	mov	r13, r1
    305a:	dc 82       	std	Y+4, r13	; 0x04
    305c:	cb 82       	std	Y+3, r12	; 0x03
    305e:	ed 82       	std	Y+5, r14	; 0x05
    3060:	fe 82       	std	Y+6, r15	; 0x06
    3062:	0f 83       	std	Y+7, r16	; 0x07
    3064:	18 87       	std	Y+8, r17	; 0x08
    3066:	c8 01       	movw	r24, r16
    3068:	b7 01       	movw	r22, r14
    306a:	0e 94 8f 18 	call	0x311e	; 0x311e <__clzsi2>
    306e:	fc 01       	movw	r30, r24
    3070:	31 97       	sbiw	r30, 0x01	; 1
    3072:	f7 ff       	sbrs	r31, 7
    3074:	3a c0       	rjmp	.+116    	; 0x30ea <__floatunsisf+0xbc>
    3076:	aa 27       	eor	r26, r26
    3078:	bb 27       	eor	r27, r27
    307a:	ae 1b       	sub	r26, r30
    307c:	bf 0b       	sbc	r27, r31
    307e:	21 e0       	ldi	r18, 0x01	; 1
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	0a 2e       	mov	r0, r26
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <__floatunsisf+0x64>
    308a:	22 0f       	add	r18, r18
    308c:	33 1f       	adc	r19, r19
    308e:	44 1f       	adc	r20, r20
    3090:	55 1f       	adc	r21, r21
    3092:	0a 94       	dec	r0
    3094:	d2 f7       	brpl	.-12     	; 0x308a <__floatunsisf+0x5c>
    3096:	21 50       	subi	r18, 0x01	; 1
    3098:	30 40       	sbci	r19, 0x00	; 0
    309a:	40 40       	sbci	r20, 0x00	; 0
    309c:	50 40       	sbci	r21, 0x00	; 0
    309e:	2e 21       	and	r18, r14
    30a0:	3f 21       	and	r19, r15
    30a2:	40 23       	and	r20, r16
    30a4:	51 23       	and	r21, r17
    30a6:	61 e0       	ldi	r22, 0x01	; 1
    30a8:	70 e0       	ldi	r23, 0x00	; 0
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	21 15       	cp	r18, r1
    30b0:	31 05       	cpc	r19, r1
    30b2:	41 05       	cpc	r20, r1
    30b4:	51 05       	cpc	r21, r1
    30b6:	19 f4       	brne	.+6      	; 0x30be <__floatunsisf+0x90>
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	cb 01       	movw	r24, r22
    30be:	04 c0       	rjmp	.+8      	; 0x30c8 <__floatunsisf+0x9a>
    30c0:	16 95       	lsr	r17
    30c2:	07 95       	ror	r16
    30c4:	f7 94       	ror	r15
    30c6:	e7 94       	ror	r14
    30c8:	aa 95       	dec	r26
    30ca:	d2 f7       	brpl	.-12     	; 0x30c0 <__floatunsisf+0x92>
    30cc:	e6 2a       	or	r14, r22
    30ce:	f7 2a       	or	r15, r23
    30d0:	08 2b       	or	r16, r24
    30d2:	19 2b       	or	r17, r25
    30d4:	ed 82       	std	Y+5, r14	; 0x05
    30d6:	fe 82       	std	Y+6, r15	; 0x06
    30d8:	0f 83       	std	Y+7, r16	; 0x07
    30da:	18 87       	std	Y+8, r17	; 0x08
    30dc:	8e e1       	ldi	r24, 0x1E	; 30
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	8e 1b       	sub	r24, r30
    30e2:	9f 0b       	sbc	r25, r31
    30e4:	9c 83       	std	Y+4, r25	; 0x04
    30e6:	8b 83       	std	Y+3, r24	; 0x03
    30e8:	12 c0       	rjmp	.+36     	; 0x310e <__floatunsisf+0xe0>
    30ea:	30 97       	sbiw	r30, 0x00	; 0
    30ec:	81 f0       	breq	.+32     	; 0x310e <__floatunsisf+0xe0>
    30ee:	0e 2e       	mov	r0, r30
    30f0:	04 c0       	rjmp	.+8      	; 0x30fa <__floatunsisf+0xcc>
    30f2:	ee 0c       	add	r14, r14
    30f4:	ff 1c       	adc	r15, r15
    30f6:	00 1f       	adc	r16, r16
    30f8:	11 1f       	adc	r17, r17
    30fa:	0a 94       	dec	r0
    30fc:	d2 f7       	brpl	.-12     	; 0x30f2 <__floatunsisf+0xc4>
    30fe:	ed 82       	std	Y+5, r14	; 0x05
    3100:	fe 82       	std	Y+6, r15	; 0x06
    3102:	0f 83       	std	Y+7, r16	; 0x07
    3104:	18 87       	std	Y+8, r17	; 0x08
    3106:	ce 1a       	sub	r12, r30
    3108:	df 0a       	sbc	r13, r31
    310a:	dc 82       	std	Y+4, r13	; 0x04
    310c:	cb 82       	std	Y+3, r12	; 0x03
    310e:	ce 01       	movw	r24, r28
    3110:	01 96       	adiw	r24, 0x01	; 1
    3112:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__pack_f>
    3116:	28 96       	adiw	r28, 0x08	; 8
    3118:	e8 e0       	ldi	r30, 0x08	; 8
    311a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x14>

0000311e <__clzsi2>:
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	7b 01       	movw	r14, r22
    3130:	8c 01       	movw	r16, r24
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	e8 16       	cp	r14, r24
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	f8 06       	cpc	r15, r24
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	08 07       	cpc	r16, r24
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	18 07       	cpc	r17, r24
    3142:	58 f4       	brcc	.+22     	; 0x315a <__clzsi2+0x3c>
    3144:	ef ef       	ldi	r30, 0xFF	; 255
    3146:	ee 16       	cp	r14, r30
    3148:	f1 04       	cpc	r15, r1
    314a:	01 05       	cpc	r16, r1
    314c:	11 05       	cpc	r17, r1
    314e:	09 f0       	breq	.+2      	; 0x3152 <__clzsi2+0x34>
    3150:	90 f4       	brcc	.+36     	; 0x3176 <__clzsi2+0x58>
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	dc 01       	movw	r26, r24
    3158:	17 c0       	rjmp	.+46     	; 0x3188 <__clzsi2+0x6a>
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	ef 16       	cp	r14, r31
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	ff 06       	cpc	r15, r31
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	0f 07       	cpc	r16, r31
    3166:	f1 e0       	ldi	r31, 0x01	; 1
    3168:	1f 07       	cpc	r17, r31
    316a:	50 f4       	brcc	.+20     	; 0x3180 <__clzsi2+0x62>
    316c:	80 e1       	ldi	r24, 0x10	; 16
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a0 e0       	ldi	r26, 0x00	; 0
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <__clzsi2+0x6a>
    3176:	88 e0       	ldi	r24, 0x08	; 8
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	a0 e0       	ldi	r26, 0x00	; 0
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <__clzsi2+0x6a>
    3180:	88 e1       	ldi	r24, 0x18	; 24
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	a0 e0       	ldi	r26, 0x00	; 0
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	20 e2       	ldi	r18, 0x20	; 32
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	28 1b       	sub	r18, r24
    3192:	39 0b       	sbc	r19, r25
    3194:	4a 0b       	sbc	r20, r26
    3196:	5b 0b       	sbc	r21, r27
    3198:	57 01       	movw	r10, r14
    319a:	68 01       	movw	r12, r16
    319c:	04 c0       	rjmp	.+8      	; 0x31a6 <__clzsi2+0x88>
    319e:	d6 94       	lsr	r13
    31a0:	c7 94       	ror	r12
    31a2:	b7 94       	ror	r11
    31a4:	a7 94       	ror	r10
    31a6:	8a 95       	dec	r24
    31a8:	d2 f7       	brpl	.-12     	; 0x319e <__clzsi2+0x80>
    31aa:	d6 01       	movw	r26, r12
    31ac:	c5 01       	movw	r24, r10
    31ae:	88 5e       	subi	r24, 0xE8	; 232
    31b0:	9e 4f       	sbci	r25, 0xFE	; 254
    31b2:	fc 01       	movw	r30, r24
    31b4:	80 81       	ld	r24, Z
    31b6:	28 1b       	sub	r18, r24
    31b8:	31 09       	sbc	r19, r1
    31ba:	41 09       	sbc	r20, r1
    31bc:	51 09       	sbc	r21, r1
    31be:	c9 01       	movw	r24, r18
    31c0:	1f 91       	pop	r17
    31c2:	0f 91       	pop	r16
    31c4:	ff 90       	pop	r15
    31c6:	ef 90       	pop	r14
    31c8:	df 90       	pop	r13
    31ca:	cf 90       	pop	r12
    31cc:	bf 90       	pop	r11
    31ce:	af 90       	pop	r10
    31d0:	08 95       	ret

000031d2 <__pack_f>:
    31d2:	ef 92       	push	r14
    31d4:	ff 92       	push	r15
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	fc 01       	movw	r30, r24
    31e0:	24 81       	ldd	r18, Z+4	; 0x04
    31e2:	35 81       	ldd	r19, Z+5	; 0x05
    31e4:	46 81       	ldd	r20, Z+6	; 0x06
    31e6:	57 81       	ldd	r21, Z+7	; 0x07
    31e8:	61 81       	ldd	r22, Z+1	; 0x01
    31ea:	80 81       	ld	r24, Z
    31ec:	82 30       	cpi	r24, 0x02	; 2
    31ee:	20 f4       	brcc	.+8      	; 0x31f8 <__pack_f+0x26>
    31f0:	40 61       	ori	r20, 0x10	; 16
    31f2:	ef ef       	ldi	r30, 0xFF	; 255
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	a3 c0       	rjmp	.+326    	; 0x333e <__pack_f+0x16c>
    31f8:	84 30       	cpi	r24, 0x04	; 4
    31fa:	09 f4       	brne	.+2      	; 0x31fe <__pack_f+0x2c>
    31fc:	9b c0       	rjmp	.+310    	; 0x3334 <__pack_f+0x162>
    31fe:	82 30       	cpi	r24, 0x02	; 2
    3200:	09 f4       	brne	.+2      	; 0x3204 <__pack_f+0x32>
    3202:	92 c0       	rjmp	.+292    	; 0x3328 <__pack_f+0x156>
    3204:	21 15       	cp	r18, r1
    3206:	31 05       	cpc	r19, r1
    3208:	41 05       	cpc	r20, r1
    320a:	51 05       	cpc	r21, r1
    320c:	09 f4       	brne	.+2      	; 0x3210 <__pack_f+0x3e>
    320e:	8f c0       	rjmp	.+286    	; 0x332e <__pack_f+0x15c>
    3210:	02 80       	ldd	r0, Z+2	; 0x02
    3212:	f3 81       	ldd	r31, Z+3	; 0x03
    3214:	e0 2d       	mov	r30, r0
    3216:	7f ef       	ldi	r23, 0xFF	; 255
    3218:	e2 38       	cpi	r30, 0x82	; 130
    321a:	f7 07       	cpc	r31, r23
    321c:	0c f0       	brlt	.+2      	; 0x3220 <__pack_f+0x4e>
    321e:	5a c0       	rjmp	.+180    	; 0x32d4 <__pack_f+0x102>
    3220:	c2 e8       	ldi	r28, 0x82	; 130
    3222:	df ef       	ldi	r29, 0xFF	; 255
    3224:	ce 1b       	sub	r28, r30
    3226:	df 0b       	sbc	r29, r31
    3228:	ca 31       	cpi	r28, 0x1A	; 26
    322a:	d1 05       	cpc	r29, r1
    322c:	6c f5       	brge	.+90     	; 0x3288 <__pack_f+0xb6>
    322e:	79 01       	movw	r14, r18
    3230:	8a 01       	movw	r16, r20
    3232:	0c 2e       	mov	r0, r28
    3234:	04 c0       	rjmp	.+8      	; 0x323e <__pack_f+0x6c>
    3236:	16 95       	lsr	r17
    3238:	07 95       	ror	r16
    323a:	f7 94       	ror	r15
    323c:	e7 94       	ror	r14
    323e:	0a 94       	dec	r0
    3240:	d2 f7       	brpl	.-12     	; 0x3236 <__pack_f+0x64>
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 e0       	ldi	r26, 0x00	; 0
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	0c 2e       	mov	r0, r28
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <__pack_f+0x84>
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	aa 1f       	adc	r26, r26
    3254:	bb 1f       	adc	r27, r27
    3256:	0a 94       	dec	r0
    3258:	d2 f7       	brpl	.-12     	; 0x324e <__pack_f+0x7c>
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	a1 09       	sbc	r26, r1
    325e:	b1 09       	sbc	r27, r1
    3260:	82 23       	and	r24, r18
    3262:	93 23       	and	r25, r19
    3264:	a4 23       	and	r26, r20
    3266:	b5 23       	and	r27, r21
    3268:	21 e0       	ldi	r18, 0x01	; 1
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e0       	ldi	r20, 0x00	; 0
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	a1 05       	cpc	r26, r1
    3274:	b1 05       	cpc	r27, r1
    3276:	19 f4       	brne	.+6      	; 0x327e <__pack_f+0xac>
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	a9 01       	movw	r20, r18
    327e:	2e 29       	or	r18, r14
    3280:	3f 29       	or	r19, r15
    3282:	40 2b       	or	r20, r16
    3284:	51 2b       	or	r21, r17
    3286:	03 c0       	rjmp	.+6      	; 0x328e <__pack_f+0xbc>
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	a9 01       	movw	r20, r18
    328e:	da 01       	movw	r26, r20
    3290:	c9 01       	movw	r24, r18
    3292:	8f 77       	andi	r24, 0x7F	; 127
    3294:	90 70       	andi	r25, 0x00	; 0
    3296:	a0 70       	andi	r26, 0x00	; 0
    3298:	b0 70       	andi	r27, 0x00	; 0
    329a:	80 34       	cpi	r24, 0x40	; 64
    329c:	91 05       	cpc	r25, r1
    329e:	a1 05       	cpc	r26, r1
    32a0:	b1 05       	cpc	r27, r1
    32a2:	39 f4       	brne	.+14     	; 0x32b2 <__pack_f+0xe0>
    32a4:	27 ff       	sbrs	r18, 7
    32a6:	09 c0       	rjmp	.+18     	; 0x32ba <__pack_f+0xe8>
    32a8:	20 5c       	subi	r18, 0xC0	; 192
    32aa:	3f 4f       	sbci	r19, 0xFF	; 255
    32ac:	4f 4f       	sbci	r20, 0xFF	; 255
    32ae:	5f 4f       	sbci	r21, 0xFF	; 255
    32b0:	04 c0       	rjmp	.+8      	; 0x32ba <__pack_f+0xe8>
    32b2:	21 5c       	subi	r18, 0xC1	; 193
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	4f 4f       	sbci	r20, 0xFF	; 255
    32b8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ba:	e1 e0       	ldi	r30, 0x01	; 1
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	20 30       	cpi	r18, 0x00	; 0
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	38 07       	cpc	r19, r24
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	48 07       	cpc	r20, r24
    32c8:	80 e4       	ldi	r24, 0x40	; 64
    32ca:	58 07       	cpc	r21, r24
    32cc:	28 f5       	brcc	.+74     	; 0x3318 <__pack_f+0x146>
    32ce:	e0 e0       	ldi	r30, 0x00	; 0
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	22 c0       	rjmp	.+68     	; 0x3318 <__pack_f+0x146>
    32d4:	e0 38       	cpi	r30, 0x80	; 128
    32d6:	f1 05       	cpc	r31, r1
    32d8:	6c f5       	brge	.+90     	; 0x3334 <__pack_f+0x162>
    32da:	e1 58       	subi	r30, 0x81	; 129
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	da 01       	movw	r26, r20
    32e0:	c9 01       	movw	r24, r18
    32e2:	8f 77       	andi	r24, 0x7F	; 127
    32e4:	90 70       	andi	r25, 0x00	; 0
    32e6:	a0 70       	andi	r26, 0x00	; 0
    32e8:	b0 70       	andi	r27, 0x00	; 0
    32ea:	80 34       	cpi	r24, 0x40	; 64
    32ec:	91 05       	cpc	r25, r1
    32ee:	a1 05       	cpc	r26, r1
    32f0:	b1 05       	cpc	r27, r1
    32f2:	39 f4       	brne	.+14     	; 0x3302 <__pack_f+0x130>
    32f4:	27 ff       	sbrs	r18, 7
    32f6:	09 c0       	rjmp	.+18     	; 0x330a <__pack_f+0x138>
    32f8:	20 5c       	subi	r18, 0xC0	; 192
    32fa:	3f 4f       	sbci	r19, 0xFF	; 255
    32fc:	4f 4f       	sbci	r20, 0xFF	; 255
    32fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3300:	04 c0       	rjmp	.+8      	; 0x330a <__pack_f+0x138>
    3302:	21 5c       	subi	r18, 0xC1	; 193
    3304:	3f 4f       	sbci	r19, 0xFF	; 255
    3306:	4f 4f       	sbci	r20, 0xFF	; 255
    3308:	5f 4f       	sbci	r21, 0xFF	; 255
    330a:	57 ff       	sbrs	r21, 7
    330c:	05 c0       	rjmp	.+10     	; 0x3318 <__pack_f+0x146>
    330e:	56 95       	lsr	r21
    3310:	47 95       	ror	r20
    3312:	37 95       	ror	r19
    3314:	27 95       	ror	r18
    3316:	31 96       	adiw	r30, 0x01	; 1
    3318:	87 e0       	ldi	r24, 0x07	; 7
    331a:	56 95       	lsr	r21
    331c:	47 95       	ror	r20
    331e:	37 95       	ror	r19
    3320:	27 95       	ror	r18
    3322:	8a 95       	dec	r24
    3324:	d1 f7       	brne	.-12     	; 0x331a <__pack_f+0x148>
    3326:	0b c0       	rjmp	.+22     	; 0x333e <__pack_f+0x16c>
    3328:	e0 e0       	ldi	r30, 0x00	; 0
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	05 c0       	rjmp	.+10     	; 0x3338 <__pack_f+0x166>
    332e:	e0 e0       	ldi	r30, 0x00	; 0
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	05 c0       	rjmp	.+10     	; 0x333e <__pack_f+0x16c>
    3334:	ef ef       	ldi	r30, 0xFF	; 255
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	a9 01       	movw	r20, r18
    333e:	8e 2f       	mov	r24, r30
    3340:	87 95       	ror	r24
    3342:	88 27       	eor	r24, r24
    3344:	87 95       	ror	r24
    3346:	94 2f       	mov	r25, r20
    3348:	9f 77       	andi	r25, 0x7F	; 127
    334a:	67 95       	ror	r22
    334c:	66 27       	eor	r22, r22
    334e:	67 95       	ror	r22
    3350:	e6 95       	lsr	r30
    3352:	a9 2f       	mov	r26, r25
    3354:	a8 2b       	or	r26, r24
    3356:	fe 2f       	mov	r31, r30
    3358:	f6 2b       	or	r31, r22
    335a:	62 2f       	mov	r22, r18
    335c:	73 2f       	mov	r23, r19
    335e:	8a 2f       	mov	r24, r26
    3360:	9f 2f       	mov	r25, r31
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	e6 e0       	ldi	r30, 0x06	; 6
    3368:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x18>

0000336c <__unpack_f>:
    336c:	dc 01       	movw	r26, r24
    336e:	fb 01       	movw	r30, r22
    3370:	2c 91       	ld	r18, X
    3372:	11 96       	adiw	r26, 0x01	; 1
    3374:	3c 91       	ld	r19, X
    3376:	11 97       	sbiw	r26, 0x01	; 1
    3378:	12 96       	adiw	r26, 0x02	; 2
    337a:	8c 91       	ld	r24, X
    337c:	12 97       	sbiw	r26, 0x02	; 2
    337e:	48 2f       	mov	r20, r24
    3380:	4f 77       	andi	r20, 0x7F	; 127
    3382:	50 e0       	ldi	r21, 0x00	; 0
    3384:	98 2f       	mov	r25, r24
    3386:	99 1f       	adc	r25, r25
    3388:	99 27       	eor	r25, r25
    338a:	99 1f       	adc	r25, r25
    338c:	13 96       	adiw	r26, 0x03	; 3
    338e:	6c 91       	ld	r22, X
    3390:	13 97       	sbiw	r26, 0x03	; 3
    3392:	86 2f       	mov	r24, r22
    3394:	88 0f       	add	r24, r24
    3396:	89 2b       	or	r24, r25
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	66 1f       	adc	r22, r22
    339c:	66 27       	eor	r22, r22
    339e:	66 1f       	adc	r22, r22
    33a0:	61 83       	std	Z+1, r22	; 0x01
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	39 f5       	brne	.+78     	; 0x33f4 <__unpack_f+0x88>
    33a6:	21 15       	cp	r18, r1
    33a8:	31 05       	cpc	r19, r1
    33aa:	41 05       	cpc	r20, r1
    33ac:	51 05       	cpc	r21, r1
    33ae:	11 f4       	brne	.+4      	; 0x33b4 <__unpack_f+0x48>
    33b0:	82 e0       	ldi	r24, 0x02	; 2
    33b2:	29 c0       	rjmp	.+82     	; 0x3406 <__unpack_f+0x9a>
    33b4:	82 e8       	ldi	r24, 0x82	; 130
    33b6:	9f ef       	ldi	r25, 0xFF	; 255
    33b8:	93 83       	std	Z+3, r25	; 0x03
    33ba:	82 83       	std	Z+2, r24	; 0x02
    33bc:	67 e0       	ldi	r22, 0x07	; 7
    33be:	22 0f       	add	r18, r18
    33c0:	33 1f       	adc	r19, r19
    33c2:	44 1f       	adc	r20, r20
    33c4:	55 1f       	adc	r21, r21
    33c6:	6a 95       	dec	r22
    33c8:	d1 f7       	brne	.-12     	; 0x33be <__unpack_f+0x52>
    33ca:	83 e0       	ldi	r24, 0x03	; 3
    33cc:	80 83       	st	Z, r24
    33ce:	09 c0       	rjmp	.+18     	; 0x33e2 <__unpack_f+0x76>
    33d0:	22 0f       	add	r18, r18
    33d2:	33 1f       	adc	r19, r19
    33d4:	44 1f       	adc	r20, r20
    33d6:	55 1f       	adc	r21, r21
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	93 83       	std	Z+3, r25	; 0x03
    33e0:	82 83       	std	Z+2, r24	; 0x02
    33e2:	20 30       	cpi	r18, 0x00	; 0
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	38 07       	cpc	r19, r24
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	48 07       	cpc	r20, r24
    33ec:	80 e4       	ldi	r24, 0x40	; 64
    33ee:	58 07       	cpc	r21, r24
    33f0:	78 f3       	brcs	.-34     	; 0x33d0 <__unpack_f+0x64>
    33f2:	20 c0       	rjmp	.+64     	; 0x3434 <__unpack_f+0xc8>
    33f4:	8f 3f       	cpi	r24, 0xFF	; 255
    33f6:	91 05       	cpc	r25, r1
    33f8:	79 f4       	brne	.+30     	; 0x3418 <__unpack_f+0xac>
    33fa:	21 15       	cp	r18, r1
    33fc:	31 05       	cpc	r19, r1
    33fe:	41 05       	cpc	r20, r1
    3400:	51 05       	cpc	r21, r1
    3402:	19 f4       	brne	.+6      	; 0x340a <__unpack_f+0x9e>
    3404:	84 e0       	ldi	r24, 0x04	; 4
    3406:	80 83       	st	Z, r24
    3408:	08 95       	ret
    340a:	44 ff       	sbrs	r20, 4
    340c:	03 c0       	rjmp	.+6      	; 0x3414 <__unpack_f+0xa8>
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	80 83       	st	Z, r24
    3412:	10 c0       	rjmp	.+32     	; 0x3434 <__unpack_f+0xc8>
    3414:	10 82       	st	Z, r1
    3416:	0e c0       	rjmp	.+28     	; 0x3434 <__unpack_f+0xc8>
    3418:	8f 57       	subi	r24, 0x7F	; 127
    341a:	90 40       	sbci	r25, 0x00	; 0
    341c:	93 83       	std	Z+3, r25	; 0x03
    341e:	82 83       	std	Z+2, r24	; 0x02
    3420:	83 e0       	ldi	r24, 0x03	; 3
    3422:	80 83       	st	Z, r24
    3424:	87 e0       	ldi	r24, 0x07	; 7
    3426:	22 0f       	add	r18, r18
    3428:	33 1f       	adc	r19, r19
    342a:	44 1f       	adc	r20, r20
    342c:	55 1f       	adc	r21, r21
    342e:	8a 95       	dec	r24
    3430:	d1 f7       	brne	.-12     	; 0x3426 <__unpack_f+0xba>
    3432:	50 64       	ori	r21, 0x40	; 64
    3434:	24 83       	std	Z+4, r18	; 0x04
    3436:	35 83       	std	Z+5, r19	; 0x05
    3438:	46 83       	std	Z+6, r20	; 0x06
    343a:	57 83       	std	Z+7, r21	; 0x07
    343c:	08 95       	ret

0000343e <__fpcmp_parts_f>:
    343e:	fc 01       	movw	r30, r24
    3440:	db 01       	movw	r26, r22
    3442:	90 81       	ld	r25, Z
    3444:	92 30       	cpi	r25, 0x02	; 2
    3446:	08 f4       	brcc	.+2      	; 0x344a <__fpcmp_parts_f+0xc>
    3448:	49 c0       	rjmp	.+146    	; 0x34dc <__fpcmp_parts_f+0x9e>
    344a:	8c 91       	ld	r24, X
    344c:	82 30       	cpi	r24, 0x02	; 2
    344e:	08 f4       	brcc	.+2      	; 0x3452 <__fpcmp_parts_f+0x14>
    3450:	45 c0       	rjmp	.+138    	; 0x34dc <__fpcmp_parts_f+0x9e>
    3452:	94 30       	cpi	r25, 0x04	; 4
    3454:	51 f4       	brne	.+20     	; 0x346a <__fpcmp_parts_f+0x2c>
    3456:	61 81       	ldd	r22, Z+1	; 0x01
    3458:	84 30       	cpi	r24, 0x04	; 4
    345a:	b1 f5       	brne	.+108    	; 0x34c8 <__fpcmp_parts_f+0x8a>
    345c:	11 96       	adiw	r26, 0x01	; 1
    345e:	2c 91       	ld	r18, X
    3460:	11 97       	sbiw	r26, 0x01	; 1
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	26 1b       	sub	r18, r22
    3466:	31 09       	sbc	r19, r1
    3468:	41 c0       	rjmp	.+130    	; 0x34ec <__fpcmp_parts_f+0xae>
    346a:	84 30       	cpi	r24, 0x04	; 4
    346c:	21 f0       	breq	.+8      	; 0x3476 <__fpcmp_parts_f+0x38>
    346e:	92 30       	cpi	r25, 0x02	; 2
    3470:	41 f4       	brne	.+16     	; 0x3482 <__fpcmp_parts_f+0x44>
    3472:	82 30       	cpi	r24, 0x02	; 2
    3474:	b1 f1       	breq	.+108    	; 0x34e2 <__fpcmp_parts_f+0xa4>
    3476:	11 96       	adiw	r26, 0x01	; 1
    3478:	8c 91       	ld	r24, X
    347a:	11 97       	sbiw	r26, 0x01	; 1
    347c:	88 23       	and	r24, r24
    347e:	a1 f1       	breq	.+104    	; 0x34e8 <__fpcmp_parts_f+0xaa>
    3480:	2d c0       	rjmp	.+90     	; 0x34dc <__fpcmp_parts_f+0x9e>
    3482:	61 81       	ldd	r22, Z+1	; 0x01
    3484:	82 30       	cpi	r24, 0x02	; 2
    3486:	01 f1       	breq	.+64     	; 0x34c8 <__fpcmp_parts_f+0x8a>
    3488:	11 96       	adiw	r26, 0x01	; 1
    348a:	8c 91       	ld	r24, X
    348c:	11 97       	sbiw	r26, 0x01	; 1
    348e:	68 17       	cp	r22, r24
    3490:	d9 f4       	brne	.+54     	; 0x34c8 <__fpcmp_parts_f+0x8a>
    3492:	22 81       	ldd	r18, Z+2	; 0x02
    3494:	33 81       	ldd	r19, Z+3	; 0x03
    3496:	12 96       	adiw	r26, 0x02	; 2
    3498:	8d 91       	ld	r24, X+
    349a:	9c 91       	ld	r25, X
    349c:	13 97       	sbiw	r26, 0x03	; 3
    349e:	82 17       	cp	r24, r18
    34a0:	93 07       	cpc	r25, r19
    34a2:	94 f0       	brlt	.+36     	; 0x34c8 <__fpcmp_parts_f+0x8a>
    34a4:	28 17       	cp	r18, r24
    34a6:	39 07       	cpc	r19, r25
    34a8:	bc f0       	brlt	.+46     	; 0x34d8 <__fpcmp_parts_f+0x9a>
    34aa:	24 81       	ldd	r18, Z+4	; 0x04
    34ac:	35 81       	ldd	r19, Z+5	; 0x05
    34ae:	46 81       	ldd	r20, Z+6	; 0x06
    34b0:	57 81       	ldd	r21, Z+7	; 0x07
    34b2:	14 96       	adiw	r26, 0x04	; 4
    34b4:	8d 91       	ld	r24, X+
    34b6:	9d 91       	ld	r25, X+
    34b8:	0d 90       	ld	r0, X+
    34ba:	bc 91       	ld	r27, X
    34bc:	a0 2d       	mov	r26, r0
    34be:	82 17       	cp	r24, r18
    34c0:	93 07       	cpc	r25, r19
    34c2:	a4 07       	cpc	r26, r20
    34c4:	b5 07       	cpc	r27, r21
    34c6:	18 f4       	brcc	.+6      	; 0x34ce <__fpcmp_parts_f+0x90>
    34c8:	66 23       	and	r22, r22
    34ca:	41 f0       	breq	.+16     	; 0x34dc <__fpcmp_parts_f+0x9e>
    34cc:	0d c0       	rjmp	.+26     	; 0x34e8 <__fpcmp_parts_f+0xaa>
    34ce:	28 17       	cp	r18, r24
    34d0:	39 07       	cpc	r19, r25
    34d2:	4a 07       	cpc	r20, r26
    34d4:	5b 07       	cpc	r21, r27
    34d6:	28 f4       	brcc	.+10     	; 0x34e2 <__fpcmp_parts_f+0xa4>
    34d8:	66 23       	and	r22, r22
    34da:	31 f0       	breq	.+12     	; 0x34e8 <__fpcmp_parts_f+0xaa>
    34dc:	21 e0       	ldi	r18, 0x01	; 1
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	05 c0       	rjmp	.+10     	; 0x34ec <__fpcmp_parts_f+0xae>
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	02 c0       	rjmp	.+4      	; 0x34ec <__fpcmp_parts_f+0xae>
    34e8:	2f ef       	ldi	r18, 0xFF	; 255
    34ea:	3f ef       	ldi	r19, 0xFF	; 255
    34ec:	c9 01       	movw	r24, r18
    34ee:	08 95       	ret

000034f0 <__udivmodhi4>:
    34f0:	aa 1b       	sub	r26, r26
    34f2:	bb 1b       	sub	r27, r27
    34f4:	51 e1       	ldi	r21, 0x11	; 17
    34f6:	07 c0       	rjmp	.+14     	; 0x3506 <__udivmodhi4_ep>

000034f8 <__udivmodhi4_loop>:
    34f8:	aa 1f       	adc	r26, r26
    34fa:	bb 1f       	adc	r27, r27
    34fc:	a6 17       	cp	r26, r22
    34fe:	b7 07       	cpc	r27, r23
    3500:	10 f0       	brcs	.+4      	; 0x3506 <__udivmodhi4_ep>
    3502:	a6 1b       	sub	r26, r22
    3504:	b7 0b       	sbc	r27, r23

00003506 <__udivmodhi4_ep>:
    3506:	88 1f       	adc	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	5a 95       	dec	r21
    350c:	a9 f7       	brne	.-22     	; 0x34f8 <__udivmodhi4_loop>
    350e:	80 95       	com	r24
    3510:	90 95       	com	r25
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	08 95       	ret

00003518 <__divmodhi4>:
    3518:	97 fb       	bst	r25, 7
    351a:	09 2e       	mov	r0, r25
    351c:	07 26       	eor	r0, r23
    351e:	0a d0       	rcall	.+20     	; 0x3534 <__divmodhi4_neg1>
    3520:	77 fd       	sbrc	r23, 7
    3522:	04 d0       	rcall	.+8      	; 0x352c <__divmodhi4_neg2>
    3524:	e5 df       	rcall	.-54     	; 0x34f0 <__udivmodhi4>
    3526:	06 d0       	rcall	.+12     	; 0x3534 <__divmodhi4_neg1>
    3528:	00 20       	and	r0, r0
    352a:	1a f4       	brpl	.+6      	; 0x3532 <__divmodhi4_exit>

0000352c <__divmodhi4_neg2>:
    352c:	70 95       	com	r23
    352e:	61 95       	neg	r22
    3530:	7f 4f       	sbci	r23, 0xFF	; 255

00003532 <__divmodhi4_exit>:
    3532:	08 95       	ret

00003534 <__divmodhi4_neg1>:
    3534:	f6 f7       	brtc	.-4      	; 0x3532 <__divmodhi4_exit>
    3536:	90 95       	com	r25
    3538:	81 95       	neg	r24
    353a:	9f 4f       	sbci	r25, 0xFF	; 255
    353c:	08 95       	ret

0000353e <__divmodsi4>:
    353e:	97 fb       	bst	r25, 7
    3540:	09 2e       	mov	r0, r25
    3542:	05 26       	eor	r0, r21
    3544:	0e d0       	rcall	.+28     	; 0x3562 <__divmodsi4_neg1>
    3546:	57 fd       	sbrc	r21, 7
    3548:	04 d0       	rcall	.+8      	; 0x3552 <__divmodsi4_neg2>
    354a:	14 d0       	rcall	.+40     	; 0x3574 <__udivmodsi4>
    354c:	0a d0       	rcall	.+20     	; 0x3562 <__divmodsi4_neg1>
    354e:	00 1c       	adc	r0, r0
    3550:	38 f4       	brcc	.+14     	; 0x3560 <__divmodsi4_exit>

00003552 <__divmodsi4_neg2>:
    3552:	50 95       	com	r21
    3554:	40 95       	com	r20
    3556:	30 95       	com	r19
    3558:	21 95       	neg	r18
    355a:	3f 4f       	sbci	r19, 0xFF	; 255
    355c:	4f 4f       	sbci	r20, 0xFF	; 255
    355e:	5f 4f       	sbci	r21, 0xFF	; 255

00003560 <__divmodsi4_exit>:
    3560:	08 95       	ret

00003562 <__divmodsi4_neg1>:
    3562:	f6 f7       	brtc	.-4      	; 0x3560 <__divmodsi4_exit>
    3564:	90 95       	com	r25
    3566:	80 95       	com	r24
    3568:	70 95       	com	r23
    356a:	61 95       	neg	r22
    356c:	7f 4f       	sbci	r23, 0xFF	; 255
    356e:	8f 4f       	sbci	r24, 0xFF	; 255
    3570:	9f 4f       	sbci	r25, 0xFF	; 255
    3572:	08 95       	ret

00003574 <__udivmodsi4>:
    3574:	a1 e2       	ldi	r26, 0x21	; 33
    3576:	1a 2e       	mov	r1, r26
    3578:	aa 1b       	sub	r26, r26
    357a:	bb 1b       	sub	r27, r27
    357c:	fd 01       	movw	r30, r26
    357e:	0d c0       	rjmp	.+26     	; 0x359a <__udivmodsi4_ep>

00003580 <__udivmodsi4_loop>:
    3580:	aa 1f       	adc	r26, r26
    3582:	bb 1f       	adc	r27, r27
    3584:	ee 1f       	adc	r30, r30
    3586:	ff 1f       	adc	r31, r31
    3588:	a2 17       	cp	r26, r18
    358a:	b3 07       	cpc	r27, r19
    358c:	e4 07       	cpc	r30, r20
    358e:	f5 07       	cpc	r31, r21
    3590:	20 f0       	brcs	.+8      	; 0x359a <__udivmodsi4_ep>
    3592:	a2 1b       	sub	r26, r18
    3594:	b3 0b       	sbc	r27, r19
    3596:	e4 0b       	sbc	r30, r20
    3598:	f5 0b       	sbc	r31, r21

0000359a <__udivmodsi4_ep>:
    359a:	66 1f       	adc	r22, r22
    359c:	77 1f       	adc	r23, r23
    359e:	88 1f       	adc	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	1a 94       	dec	r1
    35a4:	69 f7       	brne	.-38     	; 0x3580 <__udivmodsi4_loop>
    35a6:	60 95       	com	r22
    35a8:	70 95       	com	r23
    35aa:	80 95       	com	r24
    35ac:	90 95       	com	r25
    35ae:	9b 01       	movw	r18, r22
    35b0:	ac 01       	movw	r20, r24
    35b2:	bd 01       	movw	r22, r26
    35b4:	cf 01       	movw	r24, r30
    35b6:	08 95       	ret

000035b8 <__prologue_saves__>:
    35b8:	2f 92       	push	r2
    35ba:	3f 92       	push	r3
    35bc:	4f 92       	push	r4
    35be:	5f 92       	push	r5
    35c0:	6f 92       	push	r6
    35c2:	7f 92       	push	r7
    35c4:	8f 92       	push	r8
    35c6:	9f 92       	push	r9
    35c8:	af 92       	push	r10
    35ca:	bf 92       	push	r11
    35cc:	cf 92       	push	r12
    35ce:	df 92       	push	r13
    35d0:	ef 92       	push	r14
    35d2:	ff 92       	push	r15
    35d4:	0f 93       	push	r16
    35d6:	1f 93       	push	r17
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	ca 1b       	sub	r28, r26
    35e2:	db 0b       	sbc	r29, r27
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	09 94       	ijmp

000035f0 <__epilogue_restores__>:
    35f0:	2a 88       	ldd	r2, Y+18	; 0x12
    35f2:	39 88       	ldd	r3, Y+17	; 0x11
    35f4:	48 88       	ldd	r4, Y+16	; 0x10
    35f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    35f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    35fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    35fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    35fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3600:	aa 84       	ldd	r10, Y+10	; 0x0a
    3602:	b9 84       	ldd	r11, Y+9	; 0x09
    3604:	c8 84       	ldd	r12, Y+8	; 0x08
    3606:	df 80       	ldd	r13, Y+7	; 0x07
    3608:	ee 80       	ldd	r14, Y+6	; 0x06
    360a:	fd 80       	ldd	r15, Y+5	; 0x05
    360c:	0c 81       	ldd	r16, Y+4	; 0x04
    360e:	1b 81       	ldd	r17, Y+3	; 0x03
    3610:	aa 81       	ldd	r26, Y+2	; 0x02
    3612:	b9 81       	ldd	r27, Y+1	; 0x01
    3614:	ce 0f       	add	r28, r30
    3616:	d1 1d       	adc	r29, r1
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	ed 01       	movw	r28, r26
    3624:	08 95       	ret

00003626 <ceil>:
    3626:	3b d0       	rcall	.+118    	; 0x369e <__fp_trunc>
    3628:	80 f0       	brcs	.+32     	; 0x364a <ceil+0x24>
    362a:	9f 37       	cpi	r25, 0x7F	; 127
    362c:	40 f4       	brcc	.+16     	; 0x363e <ceil+0x18>
    362e:	91 11       	cpse	r25, r1
    3630:	0e f4       	brtc	.+2      	; 0x3634 <ceil+0xe>
    3632:	4d c0       	rjmp	.+154    	; 0x36ce <__fp_szero>
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	70 e0       	ldi	r23, 0x00	; 0
    3638:	80 e8       	ldi	r24, 0x80	; 128
    363a:	9f e3       	ldi	r25, 0x3F	; 63
    363c:	08 95       	ret
    363e:	26 f0       	brts	.+8      	; 0x3648 <ceil+0x22>
    3640:	1b 16       	cp	r1, r27
    3642:	61 1d       	adc	r22, r1
    3644:	71 1d       	adc	r23, r1
    3646:	81 1d       	adc	r24, r1
    3648:	01 c0       	rjmp	.+2      	; 0x364c <__fp_mintl>
    364a:	1b c0       	rjmp	.+54     	; 0x3682 <__fp_mpack>

0000364c <__fp_mintl>:
    364c:	88 23       	and	r24, r24
    364e:	71 f4       	brne	.+28     	; 0x366c <__fp_mintl+0x20>
    3650:	77 23       	and	r23, r23
    3652:	21 f0       	breq	.+8      	; 0x365c <__fp_mintl+0x10>
    3654:	98 50       	subi	r25, 0x08	; 8
    3656:	87 2b       	or	r24, r23
    3658:	76 2f       	mov	r23, r22
    365a:	07 c0       	rjmp	.+14     	; 0x366a <__fp_mintl+0x1e>
    365c:	66 23       	and	r22, r22
    365e:	11 f4       	brne	.+4      	; 0x3664 <__fp_mintl+0x18>
    3660:	99 27       	eor	r25, r25
    3662:	0d c0       	rjmp	.+26     	; 0x367e <__fp_mintl+0x32>
    3664:	90 51       	subi	r25, 0x10	; 16
    3666:	86 2b       	or	r24, r22
    3668:	70 e0       	ldi	r23, 0x00	; 0
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	2a f0       	brmi	.+10     	; 0x3678 <__fp_mintl+0x2c>
    366e:	9a 95       	dec	r25
    3670:	66 0f       	add	r22, r22
    3672:	77 1f       	adc	r23, r23
    3674:	88 1f       	adc	r24, r24
    3676:	da f7       	brpl	.-10     	; 0x366e <__fp_mintl+0x22>
    3678:	88 0f       	add	r24, r24
    367a:	96 95       	lsr	r25
    367c:	87 95       	ror	r24
    367e:	97 f9       	bld	r25, 7
    3680:	08 95       	ret

00003682 <__fp_mpack>:
    3682:	9f 3f       	cpi	r25, 0xFF	; 255
    3684:	31 f0       	breq	.+12     	; 0x3692 <__fp_mpack_finite+0xc>

00003686 <__fp_mpack_finite>:
    3686:	91 50       	subi	r25, 0x01	; 1
    3688:	20 f4       	brcc	.+8      	; 0x3692 <__fp_mpack_finite+0xc>
    368a:	87 95       	ror	r24
    368c:	77 95       	ror	r23
    368e:	67 95       	ror	r22
    3690:	b7 95       	ror	r27
    3692:	88 0f       	add	r24, r24
    3694:	91 1d       	adc	r25, r1
    3696:	96 95       	lsr	r25
    3698:	87 95       	ror	r24
    369a:	97 f9       	bld	r25, 7
    369c:	08 95       	ret

0000369e <__fp_trunc>:
    369e:	25 d0       	rcall	.+74     	; 0x36ea <__fp_splitA>
    36a0:	a0 f0       	brcs	.+40     	; 0x36ca <__fp_trunc+0x2c>
    36a2:	be e7       	ldi	r27, 0x7E	; 126
    36a4:	b9 17       	cp	r27, r25
    36a6:	88 f4       	brcc	.+34     	; 0x36ca <__fp_trunc+0x2c>
    36a8:	bb 27       	eor	r27, r27
    36aa:	9f 38       	cpi	r25, 0x8F	; 143
    36ac:	60 f4       	brcc	.+24     	; 0x36c6 <__fp_trunc+0x28>
    36ae:	16 16       	cp	r1, r22
    36b0:	b1 1d       	adc	r27, r1
    36b2:	67 2f       	mov	r22, r23
    36b4:	78 2f       	mov	r23, r24
    36b6:	88 27       	eor	r24, r24
    36b8:	98 5f       	subi	r25, 0xF8	; 248
    36ba:	f7 cf       	rjmp	.-18     	; 0x36aa <__fp_trunc+0xc>
    36bc:	86 95       	lsr	r24
    36be:	77 95       	ror	r23
    36c0:	67 95       	ror	r22
    36c2:	b1 1d       	adc	r27, r1
    36c4:	93 95       	inc	r25
    36c6:	96 39       	cpi	r25, 0x96	; 150
    36c8:	c8 f3       	brcs	.-14     	; 0x36bc <__fp_trunc+0x1e>
    36ca:	08 95       	ret

000036cc <__fp_zero>:
    36cc:	e8 94       	clt

000036ce <__fp_szero>:
    36ce:	bb 27       	eor	r27, r27
    36d0:	66 27       	eor	r22, r22
    36d2:	77 27       	eor	r23, r23
    36d4:	cb 01       	movw	r24, r22
    36d6:	97 f9       	bld	r25, 7
    36d8:	08 95       	ret

000036da <__fp_split3>:
    36da:	57 fd       	sbrc	r21, 7
    36dc:	90 58       	subi	r25, 0x80	; 128
    36de:	44 0f       	add	r20, r20
    36e0:	55 1f       	adc	r21, r21
    36e2:	59 f0       	breq	.+22     	; 0x36fa <__fp_splitA+0x10>
    36e4:	5f 3f       	cpi	r21, 0xFF	; 255
    36e6:	71 f0       	breq	.+28     	; 0x3704 <__fp_splitA+0x1a>
    36e8:	47 95       	ror	r20

000036ea <__fp_splitA>:
    36ea:	88 0f       	add	r24, r24
    36ec:	97 fb       	bst	r25, 7
    36ee:	99 1f       	adc	r25, r25
    36f0:	61 f0       	breq	.+24     	; 0x370a <__fp_splitA+0x20>
    36f2:	9f 3f       	cpi	r25, 0xFF	; 255
    36f4:	79 f0       	breq	.+30     	; 0x3714 <__fp_splitA+0x2a>
    36f6:	87 95       	ror	r24
    36f8:	08 95       	ret
    36fa:	12 16       	cp	r1, r18
    36fc:	13 06       	cpc	r1, r19
    36fe:	14 06       	cpc	r1, r20
    3700:	55 1f       	adc	r21, r21
    3702:	f2 cf       	rjmp	.-28     	; 0x36e8 <__fp_split3+0xe>
    3704:	46 95       	lsr	r20
    3706:	f1 df       	rcall	.-30     	; 0x36ea <__fp_splitA>
    3708:	08 c0       	rjmp	.+16     	; 0x371a <__fp_splitA+0x30>
    370a:	16 16       	cp	r1, r22
    370c:	17 06       	cpc	r1, r23
    370e:	18 06       	cpc	r1, r24
    3710:	99 1f       	adc	r25, r25
    3712:	f1 cf       	rjmp	.-30     	; 0x36f6 <__fp_splitA+0xc>
    3714:	86 95       	lsr	r24
    3716:	71 05       	cpc	r23, r1
    3718:	61 05       	cpc	r22, r1
    371a:	08 94       	sec
    371c:	08 95       	ret

0000371e <_exit>:
    371e:	f8 94       	cli

00003720 <__stop_program>:
    3720:	ff cf       	rjmp	.-2      	; 0x3720 <__stop_program>
