
Analog_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  000030ee  00003182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015d  00800214  00800214  00003296  2**0
                  ALLOC
  3 .stab         00000de0  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e0  00000000  00000000  0000431d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000011ce  00000000  00000000  000046fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006dba  00000000  00000000  000058cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002c52  00000000  00000000  0000c685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000044be  00000000  00000000  0000f2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b80  00000000  00000000  00013798  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001e20  00000000  00000000  00014318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000027d8  00000000  00000000  00016138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000980  00000000  00000000  00018910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000220  00000000  00000000  00019290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_26>
      6c:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	f0 e3       	ldi	r31, 0x30	; 48
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a4 31       	cpi	r26, 0x14	; 20
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a4 e1       	ldi	r26, 0x14	; 20
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a1 37       	cpi	r26, 0x71	; 113
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 8c 00 	call	0x118	; 0x118 <main>
      c2:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z14send_test_msgsv>:
// 		Maybe a sign error somewhere top nibble is taken as signed char.
//		Or the receiver buffer wasn't getting serviced properly.
byte a = 0x11;
void send_test_msgs()
{
	a = 0x00;
      ca:	10 92 00 01 	sts	0x0100, r1
	while (1) 
	{
		a -= 0x11;			// Count down to distinguish clearly from the led_test_pattern()!
      ce:	80 91 00 01 	lds	r24, 0x0100
      d2:	81 51       	subi	r24, 0x11	; 17
      d4:	80 93 00 01 	sts	0x0100, r24
		msg1.data[0] = a;
      d8:	80 93 b2 02 	sts	0x02B2, r24
		led_on(1);	led_off(2); led_off(3);
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_Z6led_onh>
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z7led_offh>
      e8:	83 e0       	ldi	r24, 0x03	; 3
      ea:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z7led_offh>
		can_send_msg( 0, &msg1 );
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	6d ea       	ldi	r22, 0xAD	; 173
      f2:	72 e0       	ldi	r23, 0x02	; 2
      f4:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12can_send_msghP4sCAN>
		delay  (one_second/2);
      f8:	60 e4       	ldi	r22, 0x40	; 64
      fa:	7d e0       	ldi	r23, 0x0D	; 13
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z5delayl>
		led_off(1);
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z7led_offh>
		delay  (one_second/2);
     10a:	60 e4       	ldi	r22, 0x40	; 64
     10c:	7d e0       	ldi	r23, 0x0D	; 13
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z5delayl>
     116:	db cf       	rjmp	.-74     	; 0xce <_Z14send_test_msgsv+0x4>

00000118 <main>:
	Right now read all and send all!
*/

int main(void)
{	
 	cli();
     118:	f8 94       	cli
    chip_init();    /* Chip initialization			*/
     11a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_Z9chip_initv>
	init_leds();
     11e:	0e 94 27 0a 	call	0x144e	; 0x144e <_Z9init_ledsv>
	read_cal();
     122:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z8read_calv>
	can_init(CAN_250K_BAUD);		/* Enables Mob0 for Reception!	*/	
     126:	83 e0       	ldi	r24, 0x03	; 3
     128:	0e 94 a3 04 	call	0x946	; 0x946 <_Z8can_inith>
	config_init();
     12c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z11config_initv>
	can_instance_init();
     130:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z17can_instance_initv>
	
	an_init();		/* Analog SPI module init 		*/
     134:	0e 94 25 01 	call	0x24a	; 0x24a <_Z7an_initv>
	can_init_test_msg();
     138:	0e 94 05 01 	call	0x20a	; 0x20a <_Z17can_init_test_msgv>

	sei();
     13c:	78 94       	sei
	
	/* TEST B)  Button boards configured as receivers;  LEDs showing upper nibble.
		1 Analog board on network will transmit a message.			*/
	send_test_msgs();
     13e:	0e 94 65 00 	call	0xca	; 0xca <_Z14send_test_msgsv>

    while (1)
    {  	  
		// READ ALL ACTIVE ANALOG SIGNALS:
		an_read_actives();
     142:	0e 94 2c 01 	call	0x258	; 0x258 <_Z15an_read_activesv>
		
		// TRANSMIT ACTIVE SIGNALS
		can_send_analog_msgs();
     146:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z20can_send_analog_msgsv>

		/* Send about every 1 second */
		delay( one_second );
     14a:	60 e8       	ldi	r22, 0x80	; 128
     14c:	7a e1       	ldi	r23, 0x1A	; 26
     14e:	86 e0       	ldi	r24, 0x06	; 6
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z5delayl>
     156:	f5 cf       	rjmp	.-22     	; 0x142 <main+0x2a>

00000158 <_Z16can_file_messageP4sCAN>:


void can_file_message( sCAN* mMsg )
{
	// Analog board is mostly a transmitter!
}
     158:	08 95       	ret

0000015a <_Z19can_prep_analog_msgP4sCANhPj>:

/* Package up the Analog readings into CAN message 
	3 Samples per CAN message.
*/
void can_prep_analog_msg( sCAN* mMsg, uint8_t mStartIndex, uint16_t* mReadings )
{
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	f6 2e       	mov	r15, r22
     168:	8a 01       	movw	r16, r20
    mMsg->id 	  = create_CAN_eid(ID_ANALOG_MEASUREMENT, MyInstance); 
     16a:	80 ea       	ldi	r24, 0xA0	; 160
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	60 91 e8 02 	lds	r22, 0x02E8
     172:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	88 83       	st	Y, r24
     17c:	99 83       	std	Y+1, r25	; 0x01
     17e:	aa 83       	std	Y+2, r26	; 0x02
     180:	bb 83       	std	Y+3, r27	; 0x03
    mMsg->data[0] = mStartIndex;
     182:	fd 82       	std	Y+5, r15	; 0x05

    mMsg->data[1] = hi(mReadings[mStartIndex]  );
     184:	ef 2d       	mov	r30, r15
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	df 01       	movw	r26, r30
     18a:	aa 0f       	add	r26, r26
     18c:	bb 1f       	adc	r27, r27
     18e:	a0 0f       	add	r26, r16
     190:	b1 1f       	adc	r27, r17
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	8c 91       	ld	r24, X
     196:	11 97       	sbiw	r26, 0x01	; 1
     198:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = lo(mReadings[mStartIndex]  ); 
     19a:	8c 91       	ld	r24, X
     19c:	8f 83       	std	Y+7, r24	; 0x07
    
    mMsg->data[3] = hi(mReadings[mStartIndex+1]);   
     19e:	df 01       	movw	r26, r30
     1a0:	11 96       	adiw	r26, 0x01	; 1
     1a2:	aa 0f       	add	r26, r26
     1a4:	bb 1f       	adc	r27, r27
     1a6:	a0 0f       	add	r26, r16
     1a8:	b1 1f       	adc	r27, r17
     1aa:	11 96       	adiw	r26, 0x01	; 1
     1ac:	8c 91       	ld	r24, X
     1ae:	11 97       	sbiw	r26, 0x01	; 1
     1b0:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = lo(mReadings[mStartIndex+1]);
     1b2:	8c 91       	ld	r24, X
     1b4:	89 87       	std	Y+9, r24	; 0x09
    
    mMsg->data[5] = hi(mReadings[mStartIndex+2]);
     1b6:	32 96       	adiw	r30, 0x02	; 2
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 0f       	add	r30, r16
     1be:	f1 1f       	adc	r31, r17
     1c0:	81 81       	ldd	r24, Z+1	; 0x01
     1c2:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->data[6] = lo(mReadings[mStartIndex+2]);
     1c4:	80 81       	ld	r24, Z
     1c6:	8b 87       	std	Y+11, r24	; 0x0b

    mMsg->header.DLC = 7;
     1c8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ca:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     1cc:	8e 60       	ori	r24, 0x0E	; 14
     1ce:	8c 83       	std	Y+4, r24	; 0x04
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	08 95       	ret

000001dc <_Z20can_send_analog_msgsv>:

void can_send_analog_msgs( )
{
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
	for (int i=0; i<8; i+=3)
     1e0:	c0 e0       	ldi	r28, 0x00	; 0
     1e2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		can_prep_analog_msg( &tcan, i, Readings );
     1e4:	84 e1       	ldi	r24, 0x14	; 20
     1e6:	92 e0       	ldi	r25, 0x02	; 2
     1e8:	6c 2f       	mov	r22, r28
     1ea:	4b e2       	ldi	r20, 0x2B	; 43
     1ec:	52 e0       	ldi	r21, 0x02	; 2
     1ee:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z19can_prep_analog_msgP4sCANhPj>
		can_send_msg( 0, &tcan );
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	64 e1       	ldi	r22, 0x14	; 20
     1f6:	72 e0       	ldi	r23, 0x02	; 2
     1f8:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12can_send_msghP4sCAN>
    mMsg->header.rtr = 0;
}

void can_send_analog_msgs( )
{
	for (int i=0; i<8; i+=3)
     1fc:	23 96       	adiw	r28, 0x03	; 3
     1fe:	c9 30       	cpi	r28, 0x09	; 9
     200:	d1 05       	cpc	r29, r1
     202:	81 f7       	brne	.-32     	; 0x1e4 <_Z20can_send_analog_msgsv+0x8>
	{
		can_prep_analog_msg( &tcan, i, Readings );
		can_send_msg( 0, &tcan );
	}
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <_Z17can_init_test_msgv>:

void can_init_test_msg()
{
    msg1.id 	 = create_CAN_eid( ID_ANALOG_MEASUREMENT, MyInstance );
     20a:	80 ea       	ldi	r24, 0xA0	; 160
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	60 91 e8 02 	lds	r22, 0x02E8
     212:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     216:	60 93 ad 02 	sts	0x02AD, r22
     21a:	70 93 ae 02 	sts	0x02AE, r23
     21e:	80 93 af 02 	sts	0x02AF, r24
     222:	90 93 b0 02 	sts	0x02B0, r25
    msg1.data[0] = 0xA0;
     226:	80 ea       	ldi	r24, 0xA0	; 160
     228:	80 93 b2 02 	sts	0x02B2, r24
    msg1.data[1] = 0x55;
     22c:	85 e5       	ldi	r24, 0x55	; 85
     22e:	80 93 b3 02 	sts	0x02B3, r24
    msg1.data[2] = 0xA1;
     232:	91 ea       	ldi	r25, 0xA1	; 161
     234:	90 93 b4 02 	sts	0x02B4, r25
    msg1.data[3] = 0x55;
     238:	80 93 b5 02 	sts	0x02B5, r24
    
    msg1.header.DLC = 4;
     23c:	80 91 b1 02 	lds	r24, 0x02B1
     240:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     242:	88 60       	ori	r24, 0x08	; 8
     244:	80 93 b1 02 	sts	0x02B1, r24
}
     248:	08 95       	ret

0000024a <_Z7an_initv>:

void an_init()
{
	// Analog board uses alternate MISO_A pins.  TRUE
	// And is the master.  						 TRUE
	spi_init( TRUE, TRUE, MSBFIRST, SPI_MODE0 );
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	0e 94 9a 0b 	call	0x1734	; 0x1734 <spi_init>
}
     256:	08 95       	ret

00000258 <_Z15an_read_activesv>:

// Read from the Maxim 11624 chips
void an_read_actives()		
{
		
}
     258:	08 95       	ret

0000025a <_Z16an_apply_filtersv>:

void an_apply_filters()
{

}
     25a:	08 95       	ret

0000025c <_Z11OS_Dispatchv>:
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{

	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
     25c:	80 91 61 03 	lds	r24, 0x0361
     260:	90 91 62 03 	lds	r25, 0x0362
     264:	64 e6       	ldi	r22, 0x64	; 100
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__divmodhi4>
     26c:	00 97       	sbiw	r24, 0x00	; 0
     26e:	79 f4       	brne	.+30     	; 0x28e <_Z11OS_Dispatchv+0x32>
	{
		if (t) {
     270:	80 91 ab 02 	lds	r24, 0x02AB
     274:	90 91 ac 02 	lds	r25, 0x02AC
     278:	00 97       	sbiw	r24, 0x00	; 0
     27a:	51 f4       	brne	.+20     	; 0x290 <_Z11OS_Dispatchv+0x34>
			led_on(3);
			t = 0;
		} else {
			led_off(3);
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z7led_offh>
			t = 1;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	90 93 ac 02 	sts	0x02AC, r25
     28a:	80 93 ab 02 	sts	0x02AB, r24
     28e:	08 95       	ret

	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
	{
		if (t) {
			led_on(3);
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_Z6led_onh>
			t = 0;
     296:	10 92 ac 02 	sts	0x02AC, r1
     29a:	10 92 ab 02 	sts	0x02AB, r1
     29e:	08 95       	ret

000002a0 <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
*******************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0;
     2a0:	10 92 67 03 	sts	0x0367, r1
	config_byte_2 = 0;
     2a4:	10 92 68 03 	sts	0x0368, r1
}
     2a8:	08 95       	ret

000002aa <_Z13config_changeh>:
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
	{
	}
}
     2aa:	08 95       	ret

000002ac <_Z8save_calv>:
***********************************************************/
byte* save_cal()
{
	//byte* addr = CONFIGURATION_EEPROM_ADDRESS;
	//save_instance_eeprom();
	byte* addr = save_configuration();
     2ac:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z18save_configurationv>
//	addr = save_configuration_eeprom	(addr);
	return addr;
};
     2b0:	08 95       	ret

000002b2 <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	//byte* addr = CONFIGURATION_EEPROM_ADDRESS;
	byte* addr = read_configuration();
     2b2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_Z18read_configurationv>
	addr = read_configuration_eeprom(addr);
     2b6:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_Z25read_configuration_eepromPh>
	return addr;
};
     2ba:	08 95       	ret

000002bc <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     2bc:	80 91 68 03 	lds	r24, 0x0368
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	80 7f       	andi	r24, 0xF0	; 240
     2c4:	90 70       	andi	r25, 0x00	; 0
     2c6:	80 32       	cpi	r24, 0x20	; 32
     2c8:	91 05       	cpc	r25, r1
     2ca:	91 f0       	breq	.+36     	; 0x2f0 <_Z13getReportRatev+0x34>
     2cc:	81 32       	cpi	r24, 0x21	; 33
     2ce:	91 05       	cpc	r25, r1
     2d0:	44 f0       	brlt	.+16     	; 0x2e2 <_Z13getReportRatev+0x26>
     2d2:	80 34       	cpi	r24, 0x40	; 64
     2d4:	91 05       	cpc	r25, r1
     2d6:	51 f0       	breq	.+20     	; 0x2ec <_Z13getReportRatev+0x30>
     2d8:	80 38       	cpi	r24, 0x80	; 128
     2da:	91 05       	cpc	r25, r1
     2dc:	29 f4       	brne	.+10     	; 0x2e8 <_Z13getReportRatev+0x2c>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
     2de:	84 e1       	ldi	r24, 0x14	; 20
     2e0:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     2e2:	80 31       	cpi	r24, 0x10	; 16
     2e4:	91 05       	cpc	r25, r1
     2e6:	31 f0       	breq	.+12     	; 0x2f4 <_Z13getReportRatev+0x38>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
     2e8:	8f ef       	ldi	r24, 0xFF	; 255
     2ea:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
     2ec:	8a e0       	ldi	r24, 0x0A	; 10
     2ee:	08 95       	ret
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
     2f0:	84 e0       	ldi	r24, 0x04	; 4
     2f2:	08 95       	ret
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return  2; 	break;
     2f4:	82 e0       	ldi	r24, 0x02	; 2
	case MODE_SEND_UPDATES_20ms :	return  4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
	default: return -1;  break;
	}
}	
     2f6:	08 95       	ret

000002f8 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
     2f8:	90 93 e5 02 	sts	0x02E5, r25
     2fc:	80 93 e4 02 	sts	0x02E4, r24
}
     300:	08 95       	ret

00000302 <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
     302:	90 93 e7 02 	sts	0x02E7, r25
     306:	80 93 e6 02 	sts	0x02E6, r24
}
     30a:	08 95       	ret

0000030c <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
     310:	ed ee       	ldi	r30, 0xED	; 237
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     316:	82 95       	swap	r24
     318:	80 7f       	andi	r24, 0xF0	; 240
     31a:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
     31c:	c1 ef       	ldi	r28, 0xF1	; 241
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	38 81       	ld	r19, Y
     322:	cb 01       	movw	r24, r22
     324:	80 7e       	andi	r24, 0xE0	; 224
     326:	90 70       	andi	r25, 0x00	; 0
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	92 95       	swap	r25
     32e:	82 95       	swap	r24
     330:	8f 70       	andi	r24, 0x0F	; 15
     332:	89 27       	eor	r24, r25
     334:	9f 70       	andi	r25, 0x0F	; 15
     336:	89 27       	eor	r24, r25
     338:	38 7f       	andi	r19, 0xF8	; 248
     33a:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
     33c:	a0 ef       	ldi	r26, 0xF0	; 240
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	8c 91       	ld	r24, X
     342:	66 0f       	add	r22, r22
     344:	66 0f       	add	r22, r22
     346:	66 0f       	add	r22, r22
     348:	87 70       	andi	r24, 0x07	; 7
     34a:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
     34c:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
     34e:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
     350:	a5 ef       	ldi	r26, 0xF5	; 245
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	8c 91       	ld	r24, X
     356:	87 60       	ori	r24, 0x07	; 7
     358:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
     35a:	a4 ef       	ldi	r26, 0xF4	; 244
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	8c 91       	ld	r24, X
     360:	88 6f       	ori	r24, 0xF8	; 248
     362:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     364:	20 83       	st	Z, r18
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     36c:	ed ee       	ldi	r30, 0xED	; 237
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     372:	82 95       	swap	r24
     374:	80 7f       	andi	r24, 0xF0	; 240
     376:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
     378:	a5 ef       	ldi	r26, 0xF5	; 245
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	8c 91       	ld	r24, X
     37e:	88 7f       	andi	r24, 0xF8	; 248
     380:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
     382:	a4 ef       	ldi	r26, 0xF4	; 244
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	8c 91       	ld	r24, X
     388:	87 70       	andi	r24, 0x07	; 7
     38a:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     38c:	90 83       	st	Z, r25
}
     38e:	08 95       	ret

00000390 <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
     390:	25 2f       	mov	r18, r21
     392:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     394:	ed ee       	ldi	r30, 0xED	; 237
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     39a:	82 95       	swap	r24
     39c:	80 7f       	andi	r24, 0xF0	; 240
     39e:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
     3a0:	86 2f       	mov	r24, r22
     3a2:	82 95       	swap	r24
     3a4:	86 95       	lsr	r24
     3a6:	87 70       	andi	r24, 0x07	; 7
     3a8:	44 0f       	add	r20, r20
     3aa:	44 0f       	add	r20, r20
     3ac:	44 0f       	add	r20, r20
     3ae:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     3b0:	c9 01       	movw	r24, r18
     3b2:	80 7e       	andi	r24, 0xE0	; 224
     3b4:	9f 71       	andi	r25, 0x1F	; 31
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	92 95       	swap	r25
     3bc:	82 95       	swap	r24
     3be:	8f 70       	andi	r24, 0x0F	; 15
     3c0:	89 27       	eor	r24, r25
     3c2:	9f 70       	andi	r25, 0x0F	; 15
     3c4:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
     3c6:	22 0f       	add	r18, r18
     3c8:	22 0f       	add	r18, r18
     3ca:	22 0f       	add	r18, r18
     3cc:	37 2f       	mov	r19, r23
     3ce:	32 95       	swap	r19
     3d0:	36 95       	lsr	r19
     3d2:	37 70       	andi	r19, 0x07	; 7
     3d4:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
     3d6:	77 0f       	add	r23, r23
     3d8:	77 0f       	add	r23, r23
     3da:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
     3dc:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
     3e0:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     3e4:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
     3e8:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
     3ec:	50 83       	st	Z, r21
}
     3ee:	08 95       	ret

000003f0 <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	f8 2e       	mov	r15, r24
     3fc:	8b 01       	movw	r16, r22
     3fe:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     406:	c7 2f       	mov	r28, r23
     408:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
     40a:	c8 01       	movw	r24, r16
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     412:	27 2f       	mov	r18, r23
     414:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     416:	ed ee       	ldi	r30, 0xED	; 237
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     41c:	f2 94       	swap	r15
     41e:	b0 ef       	ldi	r27, 0xF0	; 240
     420:	fb 22       	and	r15, r27
     422:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
     424:	43 ef       	ldi	r20, 0xF3	; 243
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	da 01       	movw	r26, r20
     42a:	6c 91       	ld	r22, X
     42c:	8d 2f       	mov	r24, r29
     42e:	82 95       	swap	r24
     430:	86 95       	lsr	r24
     432:	87 70       	andi	r24, 0x07	; 7
     434:	68 7f       	andi	r22, 0xF8	; 248
     436:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     438:	ce 01       	movw	r24, r28
     43a:	80 7e       	andi	r24, 0xE0	; 224
     43c:	9f 71       	andi	r25, 0x1F	; 31
     43e:	96 95       	lsr	r25
     440:	87 95       	ror	r24
     442:	92 95       	swap	r25
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	89 27       	eor	r24, r25
     44a:	9f 70       	andi	r25, 0x0F	; 15
     44c:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
     44e:	a1 ef       	ldi	r26, 0xF1	; 241
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	7c 91       	ld	r23, X
     454:	fc 2e       	mov	r15, r28
     456:	ff 0c       	add	r15, r15
     458:	ff 0c       	add	r15, r15
     45a:	ff 0c       	add	r15, r15
     45c:	77 70       	andi	r23, 0x07	; 7
     45e:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
     460:	ea 01       	movw	r28, r20
     462:	68 83       	st	Y, r22
	CANIDT2 = idt2;
     464:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     468:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
     46a:	c7 ef       	ldi	r28, 0xF7	; 247
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	48 81       	ld	r20, Y
     470:	83 2f       	mov	r24, r19
     472:	82 95       	swap	r24
     474:	86 95       	lsr	r24
     476:	87 70       	andi	r24, 0x07	; 7
     478:	48 7f       	andi	r20, 0xF8	; 248
     47a:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
     47c:	c9 01       	movw	r24, r18
     47e:	80 7e       	andi	r24, 0xE0	; 224
     480:	9f 71       	andi	r25, 0x1F	; 31
     482:	96 95       	lsr	r25
     484:	87 95       	ror	r24
     486:	92 95       	swap	r25
     488:	82 95       	swap	r24
     48a:	8f 70       	andi	r24, 0x0F	; 15
     48c:	89 27       	eor	r24, r25
     48e:	9f 70       	andi	r25, 0x0F	; 15
     490:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
     492:	a5 ef       	ldi	r26, 0xF5	; 245
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	5c 91       	ld	r21, X
     498:	22 0f       	add	r18, r18
     49a:	22 0f       	add	r18, r18
     49c:	22 0f       	add	r18, r18
     49e:	57 70       	andi	r21, 0x07	; 7
     4a0:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
     4a2:	48 83       	st	Y, r20
	CANIDM2 = idm2;
     4a4:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
     4a8:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
     4aa:	00 83       	st	Z, r16
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	08 95       	ret

000004b8 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
     4b8:	ed ee       	ldi	r30, 0xED	; 237
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     4be:	82 95       	swap	r24
     4c0:	80 7f       	andi	r24, 0xF0	; 240
     4c2:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
     4c4:	a7 ef       	ldi	r26, 0xF7	; 247
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	8c 91       	ld	r24, X
     4ca:	88 7f       	andi	r24, 0xF8	; 248
     4cc:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
     4ce:	a6 ef       	ldi	r26, 0xF6	; 246
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	8c 91       	ld	r24, X
     4d4:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
     4d6:	a5 ef       	ldi	r26, 0xF5	; 245
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	8c 91       	ld	r24, X
     4dc:	87 70       	andi	r24, 0x07	; 7
     4de:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     4e0:	90 83       	st	Z, r25
}
     4e2:	08 95       	ret

000004e4 <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     4e4:	ed ee       	ldi	r30, 0xED	; 237
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     4ea:	82 95       	swap	r24
     4ec:	80 7f       	andi	r24, 0xF0	; 240
     4ee:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     4f0:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     4f4:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     4f8:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     4fc:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     500:	90 83       	st	Z, r25
}
     502:	08 95       	ret

00000504 <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     504:	ed ee       	ldi	r30, 0xED	; 237
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     50a:	82 95       	swap	r24
     50c:	80 7f       	andi	r24, 0xF0	; 240
     50e:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
     510:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
     514:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
     518:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
     51c:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
     520:	90 83       	st	Z, r25
}
     522:	08 95       	ret

00000524 <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
     52a:	ed ee       	ldi	r30, 0xED	; 237
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
     530:	38 2f       	mov	r19, r24
     532:	32 95       	swap	r19
     534:	30 7f       	andi	r19, 0xF0	; 240
     536:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
     538:	ce ed       	ldi	r28, 0xDE	; 222
     53a:	d0 e0       	ldi	r29, 0x00	; 0
     53c:	98 81       	ld	r25, Y
     53e:	a1 e0       	ldi	r26, 0x01	; 1
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	02 c0       	rjmp	.+4      	; 0x548 <_Z21can_setup_receive_mobhssh+0x24>
     544:	aa 0f       	add	r26, r26
     546:	bb 1f       	adc	r27, r27
     548:	8a 95       	dec	r24
     54a:	e2 f7       	brpl	.-8      	; 0x544 <_Z21can_setup_receive_mobhssh+0x20>
     54c:	9a 2b       	or	r25, r26
     54e:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     550:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     552:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     554:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     558:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     55c:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     560:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     564:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
     566:	20 69       	ori	r18, 0x90	; 144
     568:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
     56c:	a8 ed       	ldi	r26, 0xD8	; 216
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	8c 91       	ld	r24, X
     572:	82 60       	ori	r24, 0x02	; 2
     574:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
     576:	10 83       	st	Z, r17
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	08 95       	ret

00000580 <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	28 e0       	ldi	r18, 0x08	; 8
     598:	0e 94 92 02 	call	0x524	; 0x524 <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
     59c:	60 91 e8 02 	lds	r22, 0x02E8
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 86 01 	call	0x30c	; 0x30c <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	28 e0       	ldi	r18, 0x08	; 8
     5b4:	0e 94 92 02 	call	0x524	; 0x524 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     5b8:	cd ee       	ldi	r28, 0xED	; 237
     5ba:	d0 e0       	ldi	r29, 0x00	; 0
     5bc:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     5be:	80 e3       	ldi	r24, 0x30	; 48
     5c0:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     5c2:	05 ef       	ldi	r16, 0xF5	; 245
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	f8 01       	movw	r30, r16
     5c8:	80 81       	ld	r24, Z
     5ca:	88 7f       	andi	r24, 0xF8	; 248
     5cc:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     5ce:	84 ef       	ldi	r24, 0xF4	; 244
     5d0:	e8 2e       	mov	r14, r24
     5d2:	f1 2c       	mov	r15, r1
     5d4:	f7 01       	movw	r30, r14
     5d6:	80 81       	ld	r24, Z
     5d8:	87 70       	andi	r24, 0x07	; 7
     5da:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     5dc:	98 83       	st	Y, r25
   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	63 e2       	ldi	r22, 0x23	; 35
     5e2:	7c ef       	ldi	r23, 0xFC	; 252
     5e4:	43 e2       	ldi	r20, 0x23	; 35
     5e6:	5c ef       	ldi	r21, 0xFC	; 252
     5e8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
     5ec:	85 e0       	ldi	r24, 0x05	; 5
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	28 e0       	ldi	r18, 0x08	; 8
     5f8:	0e 94 92 02 	call	0x524	; 0x524 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     5fc:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     5fe:	80 e5       	ldi	r24, 0x50	; 80
     600:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     602:	f8 01       	movw	r30, r16
     604:	80 81       	ld	r24, Z
     606:	88 7f       	andi	r24, 0xF8	; 248
     608:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     60a:	f7 01       	movw	r30, r14
     60c:	80 81       	ld	r24, Z
     60e:	87 70       	andi	r24, 0x07	; 7
     610:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     612:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
     614:	85 e0       	ldi	r24, 0x05	; 5
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	7c ef       	ldi	r23, 0xFC	; 252
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	5c ef       	ldi	r21, 0xFC	; 252
     61e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z20can_add_id_to_filterhtt>
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	08 95       	ret

00000630 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
     630:	ed ee       	ldi	r30, 0xED	; 237
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
     636:	82 95       	swap	r24
     638:	80 7f       	andi	r24, 0xF0	; 240
     63a:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
     63c:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     640:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
     644:	90 83       	st	Z, r25
}
     646:	08 95       	ret

00000648 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
     648:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
     64a:	40 91 f3 00 	lds	r20, 0x00F3
     64e:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
     650:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
     654:	80 91 f1 00 	lds	r24, 0x00F1
     658:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
     65a:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
     65e:	ba 01       	movw	r22, r20
     660:	76 95       	lsr	r23
     662:	67 95       	ror	r22
     664:	76 95       	lsr	r23
     666:	67 95       	ror	r22
     668:	76 95       	lsr	r23
     66a:	67 95       	ror	r22
     66c:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
     66e:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	22 95       	swap	r18
     676:	32 95       	swap	r19
     678:	30 7f       	andi	r19, 0xF0	; 240
     67a:	32 27       	eor	r19, r18
     67c:	20 7f       	andi	r18, 0xF0	; 240
     67e:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
     680:	54 2f       	mov	r21, r20
     682:	44 27       	eor	r20, r20
     684:	52 95       	swap	r21
     686:	55 0f       	add	r21, r21
     688:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     68a:	24 2b       	or	r18, r20
     68c:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
     68e:	ac 01       	movw	r20, r24
     690:	56 95       	lsr	r21
     692:	47 95       	ror	r20
     694:	56 95       	lsr	r21
     696:	47 95       	ror	r20
     698:	56 95       	lsr	r21
     69a:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     69c:	24 2b       	or	r18, r20
     69e:	35 2b       	or	r19, r21
     6a0:	32 83       	std	Z+2, r19	; 0x02
     6a2:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
     6a4:	82 95       	swap	r24
     6a6:	88 0f       	add	r24, r24
     6a8:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
     6aa:	a6 95       	lsr	r26
     6ac:	a6 95       	lsr	r26
     6ae:	a6 95       	lsr	r26
     6b0:	a8 2b       	or	r26, r24
     6b2:	a3 83       	std	Z+3, r26	; 0x03
}
     6b4:	08 95       	ret

000006b6 <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
     6bc:	0e 94 24 03 	call	0x648	; 0x648 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
     6c0:	80 91 ef 00 	lds	r24, 0x00EF
     6c4:	8f 70       	andi	r24, 0x0F	; 15
     6c6:	28 2f       	mov	r18, r24
     6c8:	22 0f       	add	r18, r18
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	91 7e       	andi	r25, 0xE1	; 225
     6ce:	92 2b       	or	r25, r18
     6d0:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
     6d2:	48 2f       	mov	r20, r24
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	41 15       	cp	r20, r1
     6d8:	51 05       	cpc	r21, r1
     6da:	59 f0       	breq	.+22     	; 0x6f2 <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
     6dc:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
     6e2:	90 91 fa 00 	lds	r25, 0x00FA
     6e6:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     6e8:	2f 5f       	subi	r18, 0xFF	; 255
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
     6ec:	24 17       	cp	r18, r20
     6ee:	35 07       	cpc	r19, r21
     6f0:	c4 f3       	brlt	.-16     	; 0x6e2 <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	4f 93       	push	r20
     708:	5f 93       	push	r21
     70a:	6f 93       	push	r22
     70c:	7f 93       	push	r23
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	cf 93       	push	r28
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
     71c:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
     720:	40 91 ec 00 	lds	r20, 0x00EC
     724:	42 95       	swap	r20
     726:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     728:	4f 30       	cpi	r20, 0x0F	; 15
     72a:	09 f4       	brne	.+2      	; 0x72e <__vector_18+0x36>
     72c:	87 c0       	rjmp	.+270    	; 0x83c <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
     72e:	80 91 ec 00 	lds	r24, 0x00EC
     732:	80 7f       	andi	r24, 0xF0	; 240
     734:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
     738:	80 91 ee 00 	lds	r24, 0x00EE
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	8f 71       	andi	r24, 0x1F	; 31
     740:	90 70       	andi	r25, 0x00	; 0
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	09 f4       	brne	.+2      	; 0x748 <__vector_18+0x50>
     746:	40 c0       	rjmp	.+128    	; 0x7c8 <__vector_18+0xd0>
		 byte st = CANSTMOB;
     748:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	82 ff       	sbrs	r24, 2
     750:	05 c0       	rjmp	.+10     	; 0x75c <__vector_18+0x64>
     752:	20 91 ee 00 	lds	r18, 0x00EE
     756:	2f 7e       	andi	r18, 0xEF	; 239
     758:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
     75c:	9c 01       	movw	r18, r24
     75e:	23 70       	andi	r18, 0x03	; 3
     760:	30 70       	andi	r19, 0x00	; 0
     762:	21 15       	cp	r18, r1
     764:	31 05       	cpc	r19, r1
     766:	29 f0       	breq	.+10     	; 0x772 <__vector_18+0x7a>
     768:	20 91 ee 00 	lds	r18, 0x00EE
     76c:	27 7f       	andi	r18, 0xF7	; 247
     76e:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
     772:	81 ff       	sbrs	r24, 1
     774:	05 c0       	rjmp	.+10     	; 0x780 <__vector_18+0x88>
     776:	20 91 ee 00 	lds	r18, 0x00EE
     77a:	2b 7f       	andi	r18, 0xFB	; 251
     77c:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
     780:	80 ff       	sbrs	r24, 0
     782:	05 c0       	rjmp	.+10     	; 0x78e <__vector_18+0x96>
     784:	80 91 ee 00 	lds	r24, 0x00EE
     788:	8d 7f       	andi	r24, 0xFD	; 253
     78a:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
     78e:	45 30       	cpi	r20, 0x05	; 5
     790:	09 f4       	brne	.+2      	; 0x794 <__vector_18+0x9c>
     792:	4b c0       	rjmp	.+150    	; 0x82a <__vector_18+0x132>
     794:	41 30       	cpi	r20, 0x01	; 1
     796:	09 f4       	brne	.+2      	; 0x79a <__vector_18+0xa2>
     798:	48 c0       	rjmp	.+144    	; 0x82a <__vector_18+0x132>
     79a:	43 30       	cpi	r20, 0x03	; 3
     79c:	09 f4       	brne	.+2      	; 0x7a0 <__vector_18+0xa8>
     79e:	45 c0       	rjmp	.+138    	; 0x82a <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
     7a0:	c0 93 ed 00 	sts	0x00ED, r28
}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	cf 91       	pop	r28
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
     7c8:	80 91 ee 00 	lds	r24, 0x00EE
     7cc:	85 fd       	sbrc	r24, 5
     7ce:	13 c0       	rjmp	.+38     	; 0x7f6 <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
     7d0:	80 91 ee 00 	lds	r24, 0x00EE
     7d4:	86 ff       	sbrs	r24, 6
     7d6:	e4 cf       	rjmp	.-56     	; 0x7a0 <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
     7d8:	e0 91 e6 02 	lds	r30, 0x02E6
     7dc:	f0 91 e7 02 	lds	r31, 0x02E7
     7e0:	30 97       	sbiw	r30, 0x00	; 0
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
     7e4:	09 95       	icall

		TransmittedSuccesfully = TRUE;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 db 02 	sts	0x02DB, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
     7ec:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
     7f0:	10 92 ee 00 	sts	0x00EE, r1
     7f4:	d5 cf       	rjmp	.-86     	; 0x7a0 <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 da 02 	sts	0x02DA, r24
       	can_retrieve_data( &LastReceivedMsg );
     7fc:	8b ec       	ldi	r24, 0xCB	; 203
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
     804:	8b ec       	ldi	r24, 0xCB	; 203
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 08 08 	call	0x1010	; 0x1010 <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
     80c:	88 23       	and	r24, r24
     80e:	69 f4       	brne	.+26     	; 0x82a <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
     810:	8b ec       	ldi	r24, 0xCB	; 203
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
     818:	e0 91 e4 02 	lds	r30, 0x02E4
     81c:	f0 91 e5 02 	lds	r31, 0x02E5
     820:	30 97       	sbiw	r30, 0x00	; 0
     822:	19 f0       	breq	.+6      	; 0x82a <__vector_18+0x132>
    	   		rx_call_back(&LastReceivedMsg);
     824:	8b ec       	ldi	r24, 0xCB	; 203
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
     82a:	88 e9       	ldi	r24, 0x98	; 152
     82c:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
     830:	80 91 ee 00 	lds	r24, 0x00EE
     834:	8f 7d       	andi	r24, 0xDF	; 223
     836:	80 93 ee 00 	sts	0x00EE, r24
     83a:	b2 cf       	rjmp	.-156    	; 0x7a0 <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     83c:	80 91 da 00 	lds	r24, 0x00DA
     840:	80 93 da 00 	sts	0x00DA, r24
     844:	af cf       	rjmp	.-162    	; 0x7a4 <__vector_18+0xac>

00000846 <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
     84c:	98 2f       	mov	r25, r24
     84e:	92 95       	swap	r25
     850:	90 7f       	andi	r25, 0xF0	; 240
   cli();
     852:	f8 94       	cli
   CANPAGE = page;
     854:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
     858:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
     85c:	48 81       	ld	r20, Y
     85e:	59 81       	ldd	r21, Y+1	; 0x01
     860:	6a 81       	ldd	r22, Y+2	; 0x02
     862:	7b 81       	ldd	r23, Y+3	; 0x03
     864:	0e 94 c8 01 	call	0x390	; 0x390 <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	86 95       	lsr	r24
     86c:	8f 70       	andi	r24, 0x0F	; 15
     86e:	79 f0       	breq	.+30     	; 0x88e <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
     870:	fe 01       	movw	r30, r28
     872:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
     878:	21 91       	ld	r18, Z+
     87a:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	2c 81       	ldd	r18, Y+4	; 0x04
     882:	26 95       	lsr	r18
     884:	2f 70       	andi	r18, 0x0F	; 15
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	82 17       	cp	r24, r18
     88a:	93 07       	cpc	r25, r19
     88c:	ac f3       	brlt	.-22     	; 0x878 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
     88e:	80 91 f0 00 	lds	r24, 0x00F0
     892:	8b 7f       	andi	r24, 0xFB	; 251
     894:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
     898:	8c 81       	ldd	r24, Y+4	; 0x04
     89a:	86 95       	lsr	r24
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	80 65       	ori	r24, 0x50	; 80
     8a0:	80 93 ef 00 	sts	0x00EF, r24
   sei();
     8a4:	78 94       	sei
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
     8ac:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
     8b0:	80 91 ee 00 	lds	r24, 0x00EE
     8b4:	86 ff       	sbrs	r24, 6
     8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
     8b8:	08 95       	ret

000008ba <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     8ba:	20 91 f8 00 	lds	r18, 0x00F8
     8be:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
     8c0:	40 91 f9 00 	lds	r20, 0x00F9
     8c4:	94 2f       	mov	r25, r20
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	28 2b       	or	r18, r24
     8ca:	39 2b       	or	r19, r25
  return retval;
}
     8cc:	c9 01       	movw	r24, r18
     8ce:	08 95       	ret

000008d0 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
     8d6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z17can_retrieve_dataP4sCAN>
     8da:	8f 70       	andi	r24, 0x0F	; 15
     8dc:	88 0f       	add	r24, r24
     8de:	9c 81       	ldd	r25, Y+4	; 0x04
     8e0:	91 7e       	andi	r25, 0xE1	; 225
     8e2:	98 2b       	or	r25, r24
     8e4:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     8e6:	80 91 f8 00 	lds	r24, 0x00F8
     8ea:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
     8ec:	40 91 f9 00 	lds	r20, 0x00F9
     8f0:	34 2f       	mov	r19, r20
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	82 2b       	or	r24, r18
     8f6:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
     8f8:	9e 87       	std	Y+14, r25	; 0x0e
     8fa:	8d 87       	std	Y+13, r24	; 0x0d
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	61 f0       	breq	.+24     	; 0x91e <_Z8set_baudh+0x1c>
     906:	84 30       	cpi	r24, 0x04	; 4
     908:	30 f0       	brcs	.+12     	; 0x916 <_Z8set_baudh+0x14>
     90a:	85 30       	cpi	r24, 0x05	; 5
     90c:	d1 f0       	breq	.+52     	; 0x942 <_Z8set_baudh+0x40>
     90e:	85 30       	cpi	r24, 0x05	; 5
     910:	80 f4       	brcc	.+32     	; 0x932 <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
     912:	82 e1       	ldi	r24, 0x12	; 18
     914:	05 c0       	rjmp	.+10     	; 0x920 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	91 f0       	breq	.+36     	; 0x93e <_Z8set_baudh+0x3c>
     91a:	82 30       	cpi	r24, 0x02	; 2
     91c:	71 f0       	breq	.+28     	; 0x93a <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
     91e:	8e e0       	ldi	r24, 0x0E	; 14
     920:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
     92a:	83 e1       	ldi	r24, 0x13	; 19
     92c:	80 93 e4 00 	sts	0x00E4, r24
     930:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     932:	86 30       	cpi	r24, 0x06	; 6
     934:	a1 f7       	brne	.-24     	; 0x91e <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
     936:	86 e2       	ldi	r24, 0x26	; 38
     938:	f3 cf       	rjmp	.-26     	; 0x920 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     93a:	86 e0       	ldi	r24, 0x06	; 6
     93c:	f1 cf       	rjmp	.-30     	; 0x920 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	ef cf       	rjmp	.-34     	; 0x920 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
     942:	8e e1       	ldi	r24, 0x1E	; 30
     944:	ed cf       	rjmp	.-38     	; 0x920 <_Z8set_baudh+0x1e>

00000946 <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
     94c:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     950:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
     952:	29 2f       	mov	r18, r25
     954:	22 95       	swap	r18
     956:	20 7f       	andi	r18, 0xF0	; 240
     958:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
     95c:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     960:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     964:	9f 5f       	subi	r25, 0xFF	; 255
     966:	96 30       	cpi	r25, 0x06	; 6
     968:	a1 f7       	brne	.-24     	; 0x952 <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
     96a:	90 ea       	ldi	r25, 0xA0	; 160
     96c:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
     970:	0e 94 81 04 	call	0x902	; 0x902 <_Z8set_baudh>
   can_init_mobs();
     974:	0e 94 c0 02 	call	0x580	; 0x580 <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
     978:	80 91 d9 00 	lds	r24, 0x00D9
     97c:	82 ff       	sbrs	r24, 2
     97e:	fc cf       	rjmp	.-8      	; 0x978 <_Z8can_inith+0x32>
   }
   //sei();
}
     980:	08 95       	ret

00000982 <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
     982:	88 23       	and	r24, r24
     984:	51 f4       	brne	.+20     	; 0x99a <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
     992:	83 e1       	ldi	r24, 0x13	; 19
     994:	80 93 e4 00 	sts	0x00E4, r24
     998:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
     99a:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
     99e:	8c e0       	ldi	r24, 0x0C	; 12
     9a0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
     9a4:	86 e3       	ldi	r24, 0x36	; 54
     9a6:	80 93 e4 00 	sts	0x00E4, r24
     9aa:	08 95       	ret

000009ac <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
     9ac:	88 23       	and	r24, r24
     9ae:	51 f4       	brne	.+20     	; 0x9c4 <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     9b0:	86 e0       	ldi	r24, 0x06	; 6
     9b2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
     9bc:	83 e1       	ldi	r24, 0x13	; 19
     9be:	80 93 e4 00 	sts	0x00E4, r24
     9c2:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
     9ca:	8c e0       	ldi	r24, 0x0C	; 12
     9cc:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
     9d0:	87 e3       	ldi	r24, 0x37	; 55
     9d2:	80 93 e4 00 	sts	0x00E4, r24
     9d6:	08 95       	ret

000009d8 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
     9d8:	88 23       	and	r24, r24
     9da:	51 f4       	brne	.+20     	; 0x9f0 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
     9dc:	8e e0       	ldi	r24, 0x0E	; 14
     9de:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
     9e8:	83 e1       	ldi	r24, 0x13	; 19
     9ea:	80 93 e4 00 	sts	0x00E4, r24
     9ee:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
     9f0:	86 e0       	ldi	r24, 0x06	; 6
     9f2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
     9f6:	8c e0       	ldi	r24, 0x0C	; 12
     9f8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
     9fc:	87 e3       	ldi	r24, 0x37	; 55
     9fe:	80 93 e4 00 	sts	0x00E4, r24
     a02:	08 95       	ret

00000a04 <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
     a04:	88 23       	and	r24, r24
     a06:	51 f4       	brne	.+20     	; 0xa1c <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
     a08:	82 e1       	ldi	r24, 0x12	; 18
     a0a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
     a14:	83 e1       	ldi	r24, 0x13	; 19
     a16:	80 93 e4 00 	sts	0x00E4, r24
     a1a:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
     a22:	8c e0       	ldi	r24, 0x0C	; 12
     a24:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
     a28:	87 e3       	ldi	r24, 0x37	; 55
     a2a:	80 93 e4 00 	sts	0x00E4, r24
     a2e:	08 95       	ret

00000a30 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
     a30:	88 23       	and	r24, r24
     a32:	51 f4       	brne	.+20     	; 0xa48 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
     a34:	8e e1       	ldi	r24, 0x1E	; 30
     a36:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
     a40:	83 e1       	ldi	r24, 0x13	; 19
     a42:	80 93 e4 00 	sts	0x00E4, r24
     a46:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
     a48:	8e e0       	ldi	r24, 0x0E	; 14
     a4a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
     a4e:	8c e0       	ldi	r24, 0x0C	; 12
     a50:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
     a54:	87 e3       	ldi	r24, 0x37	; 55
     a56:	80 93 e4 00 	sts	0x00E4, r24
     a5a:	08 95       	ret

00000a5c <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
     a5c:	88 23       	and	r24, r24
     a5e:	51 f4       	brne	.+20     	; 0xa74 <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
     a60:	86 e2       	ldi	r24, 0x26	; 38
     a62:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
     a6c:	83 e1       	ldi	r24, 0x13	; 19
     a6e:	80 93 e4 00 	sts	0x00E4, r24
     a72:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
     a74:	82 e1       	ldi	r24, 0x12	; 18
     a76:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
     a7a:	8c e0       	ldi	r24, 0x0C	; 12
     a7c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
     a80:	87 e3       	ldi	r24, 0x37	; 55
     a82:	80 93 e4 00 	sts	0x00E4, r24
     a86:	08 95       	ret

00000a88 <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
     a88:	83 e9       	ldi	r24, 0x93	; 147
     a8a:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
     a8e:	ee e7       	ldi	r30, 0x7E	; 126
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	88 60       	ori	r24, 0x08	; 8
     a96:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
     a98:	80 e8       	ldi	r24, 0x80	; 128
     a9a:	80 93 7b 00 	sts	0x007B, r24
}
     a9e:	08 95       	ret

00000aa0 <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
     aa0:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
     aaa:	e3 e4       	ldi	r30, 0x43	; 67
     aac:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
     ab0:	80 91 7a 00 	lds	r24, 0x007A
     ab4:	80 64       	ori	r24, 0x40	; 64
     ab6:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
     aba:	80 91 7a 00 	lds	r24, 0x007A
     abe:	86 fd       	sbrc	r24, 6
     ac0:	fc cf       	rjmp	.-8      	; 0xaba <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
     ac2:	80 91 78 00 	lds	r24, 0x0078
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	81 70       	andi	r24, 0x01	; 1
     aca:	90 70       	andi	r25, 0x00	; 0
     acc:	ba 01       	movw	r22, r20
     ace:	6f 70       	andi	r22, 0x0F	; 15
     ad0:	70 70       	andi	r23, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <_Z18pick_random_numberv+0x38>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	6a 95       	dec	r22
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <_Z18pick_random_numberv+0x34>
		result |= (tmp);
     adc:	28 2b       	or	r18, r24
     ade:	39 2b       	or	r19, r25
		tmp = ADCH;  
     ae0:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
     ae4:	4f 5f       	subi	r20, 0xFF	; 255
     ae6:	5f 4f       	sbci	r21, 0xFF	; 255
     ae8:	40 31       	cpi	r20, 0x10	; 16
     aea:	51 05       	cpc	r21, r1
     aec:	f9 f6       	brne	.-66     	; 0xaac <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
     aee:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
     af0:	c9 01       	movw	r24, r18
     af2:	08 95       	ret

00000af4 <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	28 e0       	ldi	r18, 0x08	; 8
     b00:	0e 94 92 02 	call	0x524	; 0x524 <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	63 e2       	ldi	r22, 0x23	; 35
     b0e:	7c ef       	ldi	r23, 0xFC	; 252
     b10:	43 e2       	ldi	r20, 0x23	; 35
     b12:	5c ef       	ldi	r21, 0xFC	; 252
     b14:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z20can_add_id_to_filterhtt>
}
     b18:	08 95       	ret

00000b1a <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
     b1a:	83 e9       	ldi	r24, 0x93	; 147
     b1c:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
     b20:	80 91 7e 00 	lds	r24, 0x007E
     b24:	88 60       	ori	r24, 0x08	; 8
     b26:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
     b30:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 ec 02 	sts	0x02EC, r25
     b3a:	80 93 eb 02 	sts	0x02EB, r24
     b3e:	80 93 ed 02 	sts	0x02ED, r24

	// put adc back into mode for POT
	adc_init();
     b42:	0e 94 22 10 	call	0x2044	; 0x2044 <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
     b46:	80 91 e9 02 	lds	r24, 0x02E9
     b4a:	88 23       	and	r24, r24
     b4c:	51 f0       	breq	.+20     	; 0xb62 <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	80 93 e9 02 	sts	0x02E9, r24
     b54:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
     b56:	80 93 f0 02 	sts	0x02F0, r24
	init_complete = TRUE;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 ea 02 	sts	0x02EA, r24
}
     b60:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME
		init_path = 1;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 f0 02 	sts	0x02F0, r24
		setup_instance_claim_mob();
     b68:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
     b6c:	10 92 e8 02 	sts	0x02E8, r1
     b70:	80 91 f0 02 	lds	r24, 0x02F0
     b74:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
     b76:	80 93 f0 02 	sts	0x02F0, r24
	init_complete = TRUE;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 ea 02 	sts	0x02EA, r24
}
     b80:	08 95       	ret

00000b82 <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
     b88:	83 e2       	ldi	r24, 0x23	; 35
     b8a:	9c ef       	ldi	r25, 0xFC	; 252
     b8c:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     b90:	68 83       	st	Y, r22
     b92:	79 83       	std	Y+1, r23	; 0x01
     b94:	8a 83       	std	Y+2, r24	; 0x02
     b96:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
     b98:	80 91 e8 02 	lds	r24, 0x02E8
     b9c:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
     b9e:	80 91 e9 02 	lds	r24, 0x02E9
     ba2:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
     ba4:	80 91 ed 02 	lds	r24, 0x02ED
     ba8:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
     baa:	80 91 f0 02 	lds	r24, 0x02F0
     bae:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
     bb0:	80 91 f1 02 	lds	r24, 0x02F1
     bb4:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
     bb6:	80 91 6b 03 	lds	r24, 0x036B
     bba:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     bc0:	8e 60       	ori	r24, 0x0E	; 14
     bc2:	8c 83       	std	Y+4, r24	; 0x04
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_Z22can_instance_timeslicev>:

byte ts_state = 0;

void can_instance_timeslice()
{
	ts_state = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 f1 02 	sts	0x02F1, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
     bd0:	40 91 e9 02 	lds	r20, 0x02E9
     bd4:	41 30       	cpi	r20, 0x01	; 1
     bd6:	59 f1       	breq	.+86     	; 0xc2e <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
     bd8:	80 91 ea 02 	lds	r24, 0x02EA
     bdc:	88 23       	and	r24, r24
     bde:	39 f1       	breq	.+78     	; 0xc2e <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
     be0:	80 91 eb 02 	lds	r24, 0x02EB
     be4:	90 91 ec 02 	lds	r25, 0x02EC
     be8:	9c 01       	movw	r18, r24
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	30 40       	sbci	r19, 0x00	; 0
     bee:	30 93 ec 02 	sts	0x02EC, r19
     bf2:	20 93 eb 02 	sts	0x02EB, r18
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	d1 f4       	brne	.+52     	; 0xc2e <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 ec 02 	sts	0x02EC, r25
     c02:	80 93 eb 02 	sts	0x02EB, r24
	ts_state = 2;
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	80 93 f1 02 	sts	0x02F1, r24
	
	if (Confirmed==NOT_CLAIMED)
     c0c:	44 23       	and	r20, r20
     c0e:	91 f0       	breq	.+36     	; 0xc34 <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
     c10:	42 30       	cpi	r20, 0x02	; 2
     c12:	09 f4       	brne	.+2      	; 0xc16 <_Z22can_instance_timeslicev+0x4c>
     c14:	5a c0       	rjmp	.+180    	; 0xcca <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
     c16:	40 32       	cpi	r20, 0x20	; 32
     c18:	39 f1       	breq	.+78     	; 0xc68 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
     c1a:	40 38       	cpi	r20, 0x80	; 128
     c1c:	09 f4       	brne	.+2      	; 0xc20 <_Z22can_instance_timeslicev+0x56>
     c1e:	47 c0       	rjmp	.+142    	; 0xcae <_Z22can_instance_timeslicev+0xe4>
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
     c20:	40 34       	cpi	r20, 0x40	; 64
     c22:	31 f0       	breq	.+12     	; 0xc30 <_Z22can_instance_timeslicev+0x66>
     c24:	80 91 f1 02 	lds	r24, 0x02F1
     c28:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
     c2a:	80 93 f1 02 	sts	0x02F1, r24
     c2e:	08 95       	ret
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
     c30:	86 e8       	ldi	r24, 0x86	; 134
     c32:	fb cf       	rjmp	.-10     	; 0xc2a <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state = 2;
	
	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	80 93 f1 02 	sts	0x02F1, r24
		Confirmed = CLAIM_PENDING;
     c3a:	80 e2       	ldi	r24, 0x20	; 32
     c3c:	80 93 e9 02 	sts	0x02E9, r24
		can_prep_instance_request( &msg2, rand_instance );
     c40:	8c eb       	ldi	r24, 0xBC	; 188
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	60 91 ed 02 	lds	r22, 0x02ED
     c48:	0e 94 c1 05 	call	0xb82	; 0xb82 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	6c eb       	ldi	r22, 0xBC	; 188
     c50:	72 e0       	ldi	r23, 0x02	; 2
     c52:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
     c56:	8c e2       	ldi	r24, 0x2C	; 44
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	90 93 ef 02 	sts	0x02EF, r25
     c5e:	80 93 ee 02 	sts	0x02EE, r24
     c62:	40 91 e9 02 	lds	r20, 0x02E9
     c66:	d4 cf       	rjmp	.-88     	; 0xc10 <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	80 93 f1 02 	sts	0x02F1, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT
		cli();
     c6e:	f8 94       	cli
		byte restore = CANPAGE;
     c70:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
     c74:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
     c78:	80 91 ee 00 	lds	r24, 0x00EE
     c7c:	86 ff       	sbrs	r24, 6
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	80 93 e9 02 	sts	0x02E9, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
     c86:	80 91 ee 02 	lds	r24, 0x02EE
     c8a:	90 91 ef 02 	lds	r25, 0x02EF
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	90 93 ef 02 	sts	0x02EF, r25
     c94:	80 93 ee 02 	sts	0x02EE, r24
		if (timeout_10ms_mult == 0)
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	19 f4       	brne	.+6      	; 0xca2 <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	80 93 e9 02 	sts	0x02E9, r24
		}
		CANPAGE = restore;
     ca2:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
     ca6:	78 94       	sei
     ca8:	40 91 e9 02 	lds	r20, 0x02E9
     cac:	b6 cf       	rjmp	.-148    	; 0xc1a <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state = 5;
     cae:	85 e0       	ldi	r24, 0x05	; 5
     cb0:	80 93 f1 02 	sts	0x02F1, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 e9 02 	sts	0x02E9, r24
		cli();  save_configuration();  sei();
     cba:	f8 94       	cli
     cbc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z18save_configurationv>
     cc0:	78 94       	sei
     cc2:	80 91 f1 02 	lds	r24, 0x02F1
     cc6:	80 68       	ori	r24, 0x80	; 128
     cc8:	b0 cf       	rjmp	.-160    	; 0xc2a <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
     cca:	87 e0       	ldi	r24, 0x07	; 7
     ccc:	80 93 f1 02 	sts	0x02F1, r24
		Confirmed = CLAIMED;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 e9 02 	sts	0x02E9, r24
		can_prep_instance_request( &msg2, MyInstance );
     cd6:	8c eb       	ldi	r24, 0xBC	; 188
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	60 91 e8 02 	lds	r22, 0x02E8
     cde:	0e 94 c1 05 	call	0xb82	; 0xb82 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	6c eb       	ldi	r22, 0xBC	; 188
     ce6:	72 e0       	ldi	r23, 0x02	; 2
     ce8:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
     cec:	40 91 e9 02 	lds	r20, 0x02E9
     cf0:	92 cf       	rjmp	.-220    	; 0xc16 <_Z22can_instance_timeslicev+0x4c>

00000cf2 <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
     cf8:	84 e2       	ldi	r24, 0x24	; 36
     cfa:	9c ef       	ldi	r25, 0xFC	; 252
     cfc:	60 91 e8 02 	lds	r22, 0x02E8
     d00:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     d04:	68 83       	st	Y, r22
     d06:	79 83       	std	Y+1, r23	; 0x01
     d08:	8a 83       	std	Y+2, r24	; 0x02
     d0a:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
     d0c:	80 91 e8 02 	lds	r24, 0x02E8
     d10:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	8c 83       	std	Y+4, r24	; 0x04
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
     d20:	fc 01       	movw	r30, r24
     d22:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
     d24:	90 91 e8 02 	lds	r25, 0x02E8
     d28:	89 17       	cp	r24, r25
     d2a:	18 f0       	brcs	.+6      	; 0xd32 <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	80 93 e8 02 	sts	0x02E8, r24
     d32:	08 95       	ret

00000d34 <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
     d34:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	78 2f       	mov	r23, r24
     d3a:	89 2f       	mov	r24, r25
     d3c:	92 2f       	mov	r25, r18
     d3e:	08 95       	ret

00000d40 <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
     d40:	38 2f       	mov	r19, r24
     d42:	26 2f       	mov	r18, r22
     d44:	87 2f       	mov	r24, r23
     d46:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
     d48:	63 2f       	mov	r22, r19
     d4a:	72 2f       	mov	r23, r18
     d4c:	08 95       	ret

00000d4e <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
     d4e:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
     d50:	08 95       	ret

00000d52 <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
     d52:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
     d54:	08 95       	ret

00000d56 <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
     d56:	89 2f       	mov	r24, r25
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	08 95       	ret

00000d5c <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
     d5c:	e1 e0       	ldi	r30, 0x01	; 1
     d5e:	62 17       	cp	r22, r18
     d60:	73 07       	cpc	r23, r19
     d62:	84 07       	cpc	r24, r20
     d64:	95 07       	cpc	r25, r21
     d66:	09 f0       	breq	.+2      	; 0xd6a <_Z5match6idTypeS_+0xe>
     d68:	e0 e0       	ldi	r30, 0x00	; 0
}
     d6a:	8e 2f       	mov	r24, r30
     d6c:	08 95       	ret

00000d6e <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	62 13       	cpse	r22, r18
     d72:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
     d74:	08 95       	ret

00000d76 <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
     d76:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
     d78:	27 2f       	mov	r18, r23
     d7a:	38 2f       	mov	r19, r24
     d7c:	69 2f       	mov	r22, r25
     d7e:	74 2f       	mov	r23, r20
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	26 17       	cp	r18, r22
     d84:	37 07       	cpc	r19, r23
     d86:	09 f0       	breq	.+2      	; 0xd8a <_Z8id_match6idTypeS_+0x14>
     d88:	80 e0       	ldi	r24, 0x00	; 0
}
     d8a:	08 95       	ret

00000d8c <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	49 13       	cpse	r20, r25
     d90:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
     d92:	08 95       	ret

00000d94 <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
     d94:	90 93 f8 02 	sts	0x02F8, r25
     d98:	80 93 f7 02 	sts	0x02F7, r24
}
     d9c:	08 95       	ret

00000d9e <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
     da4:	81 e1       	ldi	r24, 0x11	; 17
     da6:	9c ef       	ldi	r25, 0xFC	; 252
     da8:	60 91 e8 02 	lds	r22, 0x02E8
     dac:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     db0:	68 83       	st	Y, r22
     db2:	79 83       	std	Y+1, r23	; 0x01
     db4:	8a 83       	std	Y+2, r24	; 0x02
     db6:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
     dbc:	80 91 e8 02 	lds	r24, 0x02E8
     dc0:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
     dc2:	80 91 f2 02 	lds	r24, 0x02F2
     dc6:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
     dc8:	80 91 f3 02 	lds	r24, 0x02F3
     dcc:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
     dd2:	88 60       	ori	r24, 0x08	; 8
     dd4:	8c 83       	std	Y+4, r24	; 0x04
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
     de2:	82 e1       	ldi	r24, 0x12	; 18
     de4:	9c ef       	ldi	r25, 0xFC	; 252
     de6:	60 91 e8 02 	lds	r22, 0x02E8
     dea:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     dee:	68 83       	st	Y, r22
     df0:	79 83       	std	Y+1, r23	; 0x01
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
     dfa:	81 e4       	ldi	r24, 0x41	; 65
     dfc:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
     e02:	9f e0       	ldi	r25, 0x0F	; 15
     e04:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
     e06:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
     e08:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
     e0e:	8c 60       	ori	r24, 0x0C	; 12
     e10:	8c 83       	std	Y+4, r24	; 0x04
}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
     e1e:	83 e1       	ldi	r24, 0x13	; 19
     e20:	9c ef       	ldi	r25, 0xFC	; 252
     e22:	60 91 e8 02 	lds	r22, 0x02E8
     e26:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     e2a:	68 83       	st	Y, r22
     e2c:	79 83       	std	Y+1, r23	; 0x01
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
     e32:	83 e0       	ldi	r24, 0x03	; 3
     e34:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
     e36:	86 e5       	ldi	r24, 0x56	; 86
     e38:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
     e3a:	88 e7       	ldi	r24, 0x78	; 120
     e3c:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
     e3e:	8c e9       	ldi	r24, 0x9C	; 156
     e40:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
     e42:	8e ed       	ldi	r24, 0xDE	; 222
     e44:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     e4a:	8a 60       	ori	r24, 0x0A	; 10
     e4c:	8c 83       	std	Y+4, r24	; 0x04
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
     e5a:	84 e1       	ldi	r24, 0x14	; 20
     e5c:	9c ef       	ldi	r25, 0xFC	; 252
     e5e:	60 91 e8 02 	lds	r22, 0x02E8
     e62:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     e66:	68 83       	st	Y, r22
     e68:	79 83       	std	Y+1, r23	; 0x01
     e6a:	8a 83       	std	Y+2, r24	; 0x02
     e6c:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
     e6e:	80 91 f4 02 	lds	r24, 0x02F4
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
     e76:	de 01       	movw	r26, r28
     e78:	16 96       	adiw	r26, 0x06	; 6
     e7a:	9c 01       	movw	r18, r24
     e7c:	28 5f       	subi	r18, 0xF8	; 248
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
     e80:	fc 01       	movw	r30, r24
     e82:	e4 58       	subi	r30, 0x84	; 132
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	e4 91       	lpm	r30, Z+
     e88:	ed 93       	st	X+, r30
     e8a:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
     e8c:	82 17       	cp	r24, r18
     e8e:	93 07       	cpc	r25, r19
     e90:	b9 f7       	brne	.-18     	; 0xe80 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     e96:	82 61       	ori	r24, 0x12	; 18
     e98:	8c 83       	std	Y+4, r24	; 0x04
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
     ea0:	80 91 f9 02 	lds	r24, 0x02F9
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	d9 f0       	breq	.+54     	; 0xede <_Z24can_board_presence_replyv+0x3e>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	28 f0       	brcs	.+10     	; 0xeb6 <_Z24can_board_presence_replyv+0x16>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	09 f1       	breq	.+66     	; 0xef2 <_Z24can_board_presence_replyv+0x52>
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	59 f0       	breq	.+22     	; 0xeca <_Z24can_board_presence_replyv+0x2a>
     eb4:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
     eb6:	8c eb       	ldi	r24, 0xBC	; 188
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	6c eb       	ldi	r22, 0xBC	; 188
     ec2:	72 e0       	ldi	r23, 0x02	; 2
     ec4:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
			break;
     ec8:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
     eca:	8c eb       	ldi	r24, 0xBC	; 188
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	0e 94 2a 07 	call	0xe54	; 0xe54 <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	6c eb       	ldi	r22, 0xBC	; 188
     ed6:	72 e0       	ldi	r23, 0x02	; 2
     ed8:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
     edc:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
     ede:	8c eb       	ldi	r24, 0xBC	; 188
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0e 94 ee 06 	call	0xddc	; 0xddc <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	6c eb       	ldi	r22, 0xBC	; 188
     eea:	72 e0       	ldi	r23, 0x02	; 2
     eec:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
			break;
     ef0:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
     ef2:	8c eb       	ldi	r24, 0xBC	; 188
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	6c eb       	ldi	r22, 0xBC	; 188
     efe:	72 e0       	ldi	r23, 0x02	; 2
     f00:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
			break;
     f04:	08 95       	ret

00000f06 <_Z19can_board_timeslicev>:
{	
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
     f06:	80 91 f5 02 	lds	r24, 0x02F5
     f0a:	80 fd       	sbrc	r24, 0
     f0c:	56 c0       	rjmp	.+172    	; 0xfba <_Z19can_board_timeslicev+0xb4>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
     f0e:	81 fd       	sbrc	r24, 1
     f10:	49 c0       	rjmp	.+146    	; 0xfa4 <_Z19can_board_timeslicev+0x9e>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
     f12:	82 fd       	sbrc	r24, 2
     f14:	32 c0       	rjmp	.+100    	; 0xf7a <_Z19can_board_timeslicev+0x74>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
     f16:	83 fd       	sbrc	r24, 3
     f18:	26 c0       	rjmp	.+76     	; 0xf66 <_Z19can_board_timeslicev+0x60>
		cli();
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
     f1a:	84 fd       	sbrc	r24, 4
     f1c:	1a c0       	rjmp	.+52     	; 0xf52 <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
     f1e:	85 ff       	sbrs	r24, 5
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)		
     f22:	80 91 02 01 	lds	r24, 0x0102
     f26:	90 91 03 01 	lds	r25, 0x0103
     f2a:	9c 01       	movw	r18, r24
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	30 40       	sbci	r19, 0x00	; 0
     f30:	30 93 03 01 	sts	0x0103, r19
     f34:	20 93 02 01 	sts	0x0102, r18
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	09 f0       	breq	.+2      	; 0xf3e <_Z19can_board_timeslicev+0x38>
     f3c:	08 95       	ret
		{
			cli();
     f3e:	f8 94       	cli
			can_board_presence_reply( );
     f40:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
     f44:	80 91 f5 02 	lds	r24, 0x02F5
     f48:	8f 7d       	andi	r24, 0xDF	; 223
     f4a:	80 93 f5 02 	sts	0x02F5, r24
			sei();
     f4e:	78 94       	sei
     f50:	08 95       	ret
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
     f52:	f8 94       	cli
		save_cal();
     f54:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z8save_calv>
		System_Send_Status &= (~0x10);
     f58:	80 91 f5 02 	lds	r24, 0x02F5
     f5c:	8f 7e       	andi	r24, 0xEF	; 239
     f5e:	80 93 f5 02 	sts	0x02F5, r24
		sei();
     f62:	78 94       	sei
     f64:	dc cf       	rjmp	.-72     	; 0xf1e <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
		cli();
     f66:	f8 94       	cli
		save_configuration();
     f68:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z18save_configurationv>
		System_Send_Status &= (~0x08);
     f6c:	80 91 f5 02 	lds	r24, 0x02F5
     f70:	87 7f       	andi	r24, 0xF7	; 247
     f72:	80 93 f5 02 	sts	0x02F5, r24
		sei();
     f76:	78 94       	sei
     f78:	d0 cf       	rjmp	.-96     	; 0xf1a <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
     f7a:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
     f7c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
     f80:	8c eb       	ldi	r24, 0xBC	; 188
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	60 91 e8 02 	lds	r22, 0x02E8
     f88:	0e 94 c1 05 	call	0xb82	; 0xb82 <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	6c eb       	ldi	r22, 0xBC	; 188
     f90:	72 e0       	ldi	r23, 0x02	; 2
     f92:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
     f96:	80 91 f5 02 	lds	r24, 0x02F5
     f9a:	8b 7f       	andi	r24, 0xFB	; 251
     f9c:	80 93 f5 02 	sts	0x02F5, r24
		sei();
     fa0:	78 94       	sei
     fa2:	b9 cf       	rjmp	.-142    	; 0xf16 <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	6c eb       	ldi	r22, 0xBC	; 188
     fa8:	72 e0       	ldi	r23, 0x02	; 2
     faa:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
     fae:	80 91 f5 02 	lds	r24, 0x02F5
     fb2:	8d 7f       	andi	r24, 0xFD	; 253
     fb4:	80 93 f5 02 	sts	0x02F5, r24
     fb8:	ac cf       	rjmp	.-168    	; 0xf12 <_Z19can_board_timeslicev+0xc>
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	6d ea       	ldi	r22, 0xAD	; 173
     fbe:	72 e0       	ldi	r23, 0x02	; 2
     fc0:	0e 94 23 04 	call	0x846	; 0x846 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
     fc4:	80 91 f5 02 	lds	r24, 0x02F5
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	80 93 f5 02 	sts	0x02F5, r24
     fce:	9f cf       	rjmp	.-194    	; 0xf0e <_Z19can_board_timeslicev+0x8>

00000fd0 <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
     fd6:	87 e2       	ldi	r24, 0x27	; 39
     fd8:	9c ef       	ldi	r25, 0xFC	; 252
     fda:	60 91 e8 02 	lds	r22, 0x02E8
     fde:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
     fe2:	68 83       	st	Y, r22
     fe4:	79 83       	std	Y+1, r23	; 0x01
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
     fea:	80 91 67 03 	lds	r24, 0x0367
     fee:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
     ff0:	80 91 68 03 	lds	r24, 0x0368
     ff4:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
     ff6:	80 91 69 03 	lds	r24, 0x0369
     ffa:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
     ffc:	80 91 6a 03 	lds	r24, 0x036A
    1000:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1006:	88 60       	ori	r24, 0x08	; 8
    1008:	8c 83       	std	Y+4, r24	; 0x04
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    1016:	85 e1       	ldi	r24, 0x15	; 21
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	60 91 e8 02 	lds	r22, 0x02E8
    101e:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	68 81       	ld	r22, Y
    1028:	79 81       	ldd	r23, Y+1	; 0x01
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
    1032:	88 23       	and	r24, r24
    1034:	39 f0       	breq	.+14     	; 0x1044 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    103c:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    1044:	85 e1       	ldi	r24, 0x15	; 21
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	6f ef       	ldi	r22, 0xFF	; 255
    104a:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    104e:	9b 01       	movw	r18, r22
    1050:	ac 01       	movw	r20, r24
    1052:	68 81       	ld	r22, Y
    1054:	79 81       	ldd	r23, Y+1	; 0x01
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    105e:	88 23       	and	r24, r24
    1060:	51 f7       	brne	.-44     	; 0x1036 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
		return TRUE;
	} else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    1062:	80 e1       	ldi	r24, 0x10	; 16
    1064:	9c ef       	ldi	r25, 0xFC	; 252
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    106c:	9b 01       	movw	r18, r22
    106e:	ac 01       	movw	r20, r24
    1070:	68 81       	ld	r22, Y
    1072:	79 81       	ldd	r23, Y+1	; 0x01
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	0e 94 bb 06 	call	0xd76	; 0xd76 <_Z8id_match6idTypeS_>
    107c:	88 23       	and	r24, r24
    107e:	91 f0       	breq	.+36     	; 0x10a4 <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.  
			Need to delay by the instance number of timeslices.  
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    1080:	80 91 f5 02 	lds	r24, 0x02F5
    1084:	80 62       	ori	r24, 0x20	; 32
    1086:	80 93 f5 02 	sts	0x02F5, r24
		Board_presence_response_type = mMsg->data[0];
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	80 93 f9 02 	sts	0x02F9, r24
		Board_presence_delay 		 = MyInstance;
    1090:	80 91 e8 02 	lds	r24, 0x02E8
    1094:	80 93 02 01 	sts	0x0102, r24
    1098:	10 92 03 01 	sts	0x0103, r1
		return TRUE;
    109c:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    10a4:	82 e2       	ldi	r24, 0x22	; 34
    10a6:	9c ef       	ldi	r25, 0xFC	; 252
    10a8:	60 91 e8 02 	lds	r22, 0x02E8
    10ac:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    10b0:	9b 01       	movw	r18, r22
    10b2:	ac 01       	movw	r20, r24
    10b4:	68 81       	ld	r22, Y
    10b6:	79 81       	ldd	r23, Y+1	; 0x01
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
    10c0:	88 23       	and	r24, r24
    10c2:	f1 f0       	breq	.+60     	; 0x1100 <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	84 ff       	sbrs	r24, 4
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 ); 
    10ca:	8d ea       	ldi	r24, 0xAD	; 173
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_Z18can_prep_configureP4sCAN>
			System_Send_Status=1;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	80 93 f5 02 	sts	0x02F5, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    10d8:	e0 91 f7 02 	lds	r30, 0x02F7
    10dc:	f0 91 f8 02 	lds	r31, 0x02F8
    10e0:	30 97       	sbiw	r30, 0x00	; 0
    10e2:	19 f1       	breq	.+70     	; 0x112a <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	8f 70       	andi	r24, 0x0F	; 15
    10e8:	09 95       	icall
		return TRUE;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 ); 
			System_Send_Status=1;
		} else {
			can_parse_configure_request( mMsg );	// in configuration.c
    10f2:	ce 01       	movw	r24, r28
    10f4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    10f8:	88 e0       	ldi	r24, 0x08	; 8
    10fa:	80 93 f5 02 	sts	0x02F5, r24
    10fe:	ec cf       	rjmp	.-40     	; 0x10d8 <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1100:	81 e2       	ldi	r24, 0x21	; 33
    1102:	9c ef       	ldi	r25, 0xFC	; 252
    1104:	60 91 e8 02 	lds	r22, 0x02E8
    1108:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    110c:	9b 01       	movw	r18, r22
    110e:	ac 01       	movw	r20, r24
    1110:	68 81       	ld	r22, Y
    1112:	79 81       	ldd	r23, Y+1	; 0x01
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
    111c:	88 23       	and	r24, r24
    111e:	39 f0       	breq	.+14     	; 0x112e <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	80 93 f5 02 	sts	0x02F5, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	8a cf       	rjmp	.-236    	; 0x103e <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	88 cf       	rjmp	.-240    	; 0x103e <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    112e:	81 e2       	ldi	r24, 0x21	; 33
    1130:	9c ef       	ldi	r25, 0xFC	; 252
    1132:	6f ef       	ldi	r22, 0xFF	; 255
    1134:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    1138:	9b 01       	movw	r18, r22
    113a:	ac 01       	movw	r20, r24
    113c:	68 81       	ld	r22, Y
    113e:	79 81       	ldd	r23, Y+1	; 0x01
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1148:	88 23       	and	r24, r24
    114a:	51 f7       	brne	.-44     	; 0x1120 <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    114c:	85 e2       	ldi	r24, 0x25	; 37
    114e:	9c ef       	ldi	r25, 0xFC	; 252
    1150:	60 91 e8 02 	lds	r22, 0x02E8
    1154:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	68 81       	ld	r22, Y
    115e:	79 81       	ldd	r23, Y+1	; 0x01
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	9b 81       	ldd	r25, Y+3	; 0x03
    1164:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
    1168:	88 23       	and	r24, r24
    116a:	49 f5       	brne	.+82     	; 0x11be <_Z23can_board_msg_responderP4sCAN+0x1ae>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    116c:	86 e2       	ldi	r24, 0x26	; 38
    116e:	9c ef       	ldi	r25, 0xFC	; 252
    1170:	60 91 e8 02 	lds	r22, 0x02E8
    1174:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	68 81       	ld	r22, Y
    117e:	79 81       	ldd	r23, Y+1	; 0x01
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
    1188:	88 23       	and	r24, r24
    118a:	61 f1       	breq	.+88     	; 0x11e4 <_Z23can_board_msg_responderP4sCAN+0x1d4>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	8e 71       	andi	r24, 0x1E	; 30
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	59 f6       	brne	.-106    	; 0x112a <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    1194:	3d 81       	ldd	r19, Y+5	; 0x05
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	82 2b       	or	r24, r18
    119e:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    11a0:	22 e1       	ldi	r18, 0x12	; 18
    11a2:	84 33       	cpi	r24, 0x34	; 52
    11a4:	92 07       	cpc	r25, r18
    11a6:	09 f6       	brne	.-126    	; 0x112a <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    11a8:	85 e5       	ldi	r24, 0x55	; 85
    11aa:	80 93 f0 02 	sts	0x02F0, r24
				init_complete = FALSE;
    11ae:	10 92 ea 02 	sts	0x02EA, r1
				Confirmed     = NOT_CLAIMED;
    11b2:	10 92 e9 02 	sts	0x02E9, r1
				can_instance_init();		// This fires off the sequencing right away.
    11b6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	40 cf       	rjmp	.-384    	; 0x103e <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 e9 02 	sts	0x02E9, r24
		MyInstance = mMsg->data[0];
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	80 93 e8 02 	sts	0x02E8, r24
		save_configuration();
    11ca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z18save_configurationv>
   		can_remove_instance_from_filter( 1 );
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    11d4:	60 91 e8 02 	lds	r22, 0x02E8
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	0e 94 86 01 	call	0x30c	; 0x30c <_Z26can_add_instance_to_filterht>
		return TRUE;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	2d cf       	rjmp	.-422    	; 0x103e <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    11e4:	86 e2       	ldi	r24, 0x26	; 38
    11e6:	9c ef       	ldi	r25, 0xFC	; 252
    11e8:	6f ef       	ldi	r22, 0xFF	; 255
    11ea:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	68 81       	ld	r22, Y
    11f4:	79 81       	ldd	r23, Y+1	; 0x01
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z5match6idTypeS_>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    11fe:	88 23       	and	r24, r24
    1200:	29 f6       	brne	.-118    	; 0x118c <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    1202:	83 e2       	ldi	r24, 0x23	; 35
    1204:	9c ef       	ldi	r25, 0xFC	; 252
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z14create_CAN_eidth>
    120c:	9b 01       	movw	r18, r22
    120e:	ac 01       	movw	r20, r24
    1210:	68 81       	ld	r22, Y
    1212:	79 81       	ldd	r23, Y+1	; 0x01
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	0e 94 bb 06 	call	0xd76	; 0xd76 <_Z8id_match6idTypeS_>
    121c:	88 23       	and	r24, r24
    121e:	09 f4       	brne	.+2      	; 0x1222 <_Z23can_board_msg_responderP4sCAN+0x212>
    1220:	0e cf       	rjmp	.-484    	; 0x103e <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	80 91 e8 02 	lds	r24, 0x02E8
    1228:	98 17       	cp	r25, r24
    122a:	09 f0       	breq	.+2      	; 0x122e <_Z23can_board_msg_responderP4sCAN+0x21e>
    122c:	7e cf       	rjmp	.-260    	; 0x112a <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    122e:	80 91 e9 02 	lds	r24, 0x02E9
    1232:	80 32       	cpi	r24, 0x20	; 32
    1234:	41 f0       	breq	.+16     	; 0x1246 <_Z23can_board_msg_responderP4sCAN+0x236>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    1236:	88 23       	and	r24, r24
    1238:	09 f0       	breq	.+2      	; 0x123c <_Z23can_board_msg_responderP4sCAN+0x22c>
    123a:	77 cf       	rjmp	.-274    	; 0x112a <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    123c:	ce 01       	movw	r24, r28
    123e:	0e 94 90 06 	call	0xd20	; 0xd20 <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	fc ce       	rjmp	.-520    	; 0x103e <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    1246:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    124a:	80 e3       	ldi	r24, 0x30	; 48
    124c:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    1250:	80 91 ef 00 	lds	r24, 0x00EF
    1254:	8f 73       	andi	r24, 0x3F	; 63
    1256:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    125a:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    125e:	10 92 e9 02 	sts	0x02E9, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    1262:	ce 01       	movw	r24, r28
    1264:	0e 94 90 06 	call	0xd20	; 0xd20 <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	e9 ce       	rjmp	.-558    	; 0x103e <_Z23can_board_msg_responderP4sCAN+0x2e>

0000126c <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    1280:	ce 01       	movw	r24, r28
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	8c 0f       	add	r24, r28
    1288:	9d 1f       	adc	r25, r29
    128a:	fc 01       	movw	r30, r24
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	e8 0f       	add	r30, r24
    1296:	f9 1f       	adc	r31, r25
    1298:	e6 50       	subi	r30, 0x06	; 6
    129a:	fd 4f       	sbci	r31, 0xFD	; 253
    129c:	20 81       	ld	r18, Z
    129e:	31 81       	ldd	r19, Z+1	; 0x01
    12a0:	42 81       	ldd	r20, Z+2	; 0x02
    12a2:	53 81       	ldd	r21, Z+3	; 0x03
    12a4:	c8 01       	movw	r24, r16
    12a6:	b7 01       	movw	r22, r14
    12a8:	0e 94 bb 06 	call	0xd76	; 0xd76 <_Z8id_match6idTypeS_>
    12ac:	88 23       	and	r24, r24
    12ae:	61 f4       	brne	.+24     	; 0x12c8 <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    12b0:	21 96       	adiw	r28, 0x01	; 1
    12b2:	c6 30       	cpi	r28, 0x06	; 6
    12b4:	d1 05       	cpc	r29, r1
    12b6:	21 f7       	brne	.-56     	; 0x1280 <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    12c8:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	08 95       	ret

000012d8 <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    12d8:	28 2f       	mov	r18, r24
    12da:	39 2f       	mov	r19, r25
    12dc:	d9 01       	movw	r26, r18
    12de:	86 2f       	mov	r24, r22
    12e0:	97 2f       	mov	r25, r23
    12e2:	fc 01       	movw	r30, r24
    12e4:	8f e0       	ldi	r24, 0x0F	; 15
    12e6:	01 90       	ld	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	81 50       	subi	r24, 0x01	; 1
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <_Z12copy_can_msgP4sCANS0_+0xe>
}
    12ee:	08 95       	ret

000012f0 <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    12f0:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    12f2:	80 91 54 03 	lds	r24, 0x0354
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 01       	movw	r18, r24
    12fa:	22 0f       	add	r18, r18
    12fc:	33 1f       	adc	r19, r19
    12fe:	28 0f       	add	r18, r24
    1300:	39 1f       	adc	r19, r25
    1302:	c9 01       	movw	r24, r18
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	86 50       	subi	r24, 0x06	; 6
    1312:	9d 4f       	sbci	r25, 0xFD	; 253
    1314:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    1318:	80 91 54 03 	lds	r24, 0x0354
    131c:	8f 5f       	subi	r24, 0xFF	; 255
    131e:	80 93 54 03 	sts	0x0354, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    1322:	86 30       	cpi	r24, 0x06	; 6
    1324:	10 f0       	brcs	.+4      	; 0x132a <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    1326:	10 92 54 03 	sts	0x0354, r1
    132a:	08 95       	ret

0000132c <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    1332:	68 81       	ld	r22, Y
    1334:	79 81       	ldd	r23, Y+1	; 0x01
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	0e 94 36 09 	call	0x126c	; 0x126c <_Z11FindMailBox6idType>
	if (index == 0xFF)
    133e:	8f 3f       	cpi	r24, 0xFF	; 255
    1340:	a9 f0       	breq	.+42     	; 0x136c <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 01       	movw	r18, r24
    1346:	22 0f       	add	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	28 0f       	add	r18, r24
    134c:	39 1f       	adc	r19, r25
    134e:	c9 01       	movw	r24, r18
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	86 50       	subi	r24, 0x06	; 6
    135e:	9d 4f       	sbci	r25, 0xFD	; 253
    1360:	be 01       	movw	r22, r28
    1362:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    136c:	80 91 54 03 	lds	r24, 0x0354
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9c 01       	movw	r18, r24
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	28 0f       	add	r18, r24
    137a:	39 1f       	adc	r19, r25
    137c:	c9 01       	movw	r24, r18
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	82 0f       	add	r24, r18
    1388:	93 1f       	adc	r25, r19
    138a:	86 50       	subi	r24, 0x06	; 6
    138c:	9d 4f       	sbci	r25, 0xFD	; 253
    138e:	be 01       	movw	r22, r28
    1390:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    1394:	80 91 54 03 	lds	r24, 0x0354
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	80 93 54 03 	sts	0x0354, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    139e:	86 30       	cpi	r24, 0x06	; 6
    13a0:	10 f3       	brcs	.-60     	; 0x1366 <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    13a2:	10 92 54 03 	sts	0x0354, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <_Z12QueueMessageP4sCAN>:
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    13ac:	20 91 6a 03 	lds	r18, 0x036A
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    13b0:	21 fd       	sbrc	r18, 1
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    13b4:	0e 94 96 09 	call	0x132c	; 0x132c <_Z17addMailboxHistoryP4sCAN>
    13b8:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    13ba:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z16addNormalHistoryP4sCAN>
    13be:	08 95       	ret

000013c0 <_Z15RetrieveMessagev>:
    13c0:	80 91 6a 03 	lds	r24, 0x036A
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    13c4:	81 ff       	sbrs	r24, 1
    13c6:	1b c0       	rjmp	.+54     	; 0x13fe <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    13c8:	20 91 55 03 	lds	r18, 0x0355
    13cc:	80 91 54 03 	lds	r24, 0x0354
    13d0:	28 17       	cp	r18, r24
    13d2:	c9 f0       	breq	.+50     	; 0x1406 <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    13d4:	82 2f       	mov	r24, r18
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 55 03 	sts	0x0355, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    13dc:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    13de:	c9 01       	movw	r24, r18
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	9c 01       	movw	r18, r24
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	28 0f       	add	r18, r24
    13f4:	39 1f       	adc	r19, r25
    13f6:	26 50       	subi	r18, 0x06	; 6
    13f8:	3d 4f       	sbci	r19, 0xFD	; 253
		}
	}
	return NULL;
}
    13fa:	c9 01       	movw	r24, r18
    13fc:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
}
    1402:	c9 01       	movw	r24, r18
    1404:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    1406:	10 92 55 03 	sts	0x0355, r1
			RxHead = 0;
    140a:	10 92 54 03 	sts	0x0354, r1
			return NULL;
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	f3 cf       	rjmp	.-26     	; 0x13fa <_Z15RetrieveMessagev+0x3a>

00001414 <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	ac 01       	movw	r20, r24
    1418:	44 0f       	add	r20, r20
    141a:	55 1f       	adc	r21, r21
    141c:	48 0f       	add	r20, r24
    141e:	59 1f       	adc	r21, r25
    1420:	9a 01       	movw	r18, r20
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	24 0f       	add	r18, r20
    142c:	35 1f       	adc	r19, r21
    142e:	26 50       	subi	r18, 0x06	; 6
    1430:	3d 4f       	sbci	r19, 0xFD	; 253
}
    1432:	c9 01       	movw	r24, r18
    1434:	08 95       	ret

00001436 <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    1436:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_Z15RetrieveMessagev>
	if (msg)
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	21 f0       	breq	.+8      	; 0x1446 <_Z15CAN_Q_Timeslicev+0x10>
	{
		SET_LED_2();
    143e:	5e 9a       	sbi	0x0b, 6	; 11
    1440:	20 91 6a 03 	lds	r18, 0x036A
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1444:	21 ff       	sbrs	r18, 1
    1446:	08 95       	ret
			can_file_message( msg );
    1448:	0e 94 ac 00 	call	0x158	; 0x158 <_Z16can_file_messageP4sCAN>
    144c:	08 95       	ret

0000144e <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    144e:	10 92 57 03 	sts	0x0357, r1
	System_LED_Control.pattern    = 0;
    1452:	10 92 56 03 	sts	0x0356, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    1456:	55 9a       	sbi	0x0a, 5	; 10
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    1458:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    145a:	57 9a       	sbi	0x0a, 7	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
#endif
  	RESET_LED_1();
    145c:	5d 98       	cbi	0x0b, 5	; 11
	RESET_LED_2();
    145e:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_3();
    1460:	5f 98       	cbi	0x0b, 7	; 11
	RESET_LED_4();
}
    1462:	08 95       	ret

00001464 <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	49 f0       	breq	.+18     	; 0x147a <_Z16protected_led_onh+0x16>
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	29 f0       	breq	.+10     	; 0x1476 <_Z16protected_led_onh+0x12>
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	09 f0       	breq	.+2      	; 0x1472 <_Z16protected_led_onh+0xe>
    1470:	08 95       	ret
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
    1472:	5d 9a       	sbi	0x0b, 5	; 11
    1474:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
    1476:	5f 9a       	sbi	0x0b, 7	; 11
    1478:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
    147a:	5e 9a       	sbi	0x0b, 6	; 11
    147c:	08 95       	ret

0000147e <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	49 f0       	breq	.+18     	; 0x1494 <_Z17protected_led_offh+0x16>
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	29 f0       	breq	.+10     	; 0x1490 <_Z17protected_led_offh+0x12>
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	09 f0       	breq	.+2      	; 0x148c <_Z17protected_led_offh+0xe>
    148a:	08 95       	ret
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
    148c:	5d 98       	cbi	0x0b, 5	; 11
    148e:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
    1490:	5f 98       	cbi	0x0b, 7	; 11
    1492:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
    1494:	5e 98       	cbi	0x0b, 6	; 11
    1496:	08 95       	ret

00001498 <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1498:	90 91 57 03 	lds	r25, 0x0357
    149c:	99 23       	and	r25, r25
    149e:	21 f0       	breq	.+8      	; 0x14a8 <_Z11strobe_ledsh+0x10>
    14a0:	92 30       	cpi	r25, 0x02	; 2
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	08 95       	ret
    14a8:	90 91 07 01 	lds	r25, 0x0107
    14ac:	29 2f       	mov	r18, r25
    14ae:	21 50       	subi	r18, 0x01	; 1
    14b0:	20 93 07 01 	sts	0x0107, r18
    14b4:	99 23       	and	r25, r25
    14b6:	b1 f7       	brne	.-20     	; 0x14a4 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    14b8:	9a e0       	ldi	r25, 0x0A	; 10
    14ba:	90 93 07 01 	sts	0x0107, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    14be:	88 23       	and	r24, r24
    14c0:	79 f0       	breq	.+30     	; 0x14e0 <_Z11strobe_ledsh+0x48>
    14c2:	80 91 06 01 	lds	r24, 0x0106
    14c6:	0e 94 32 0a 	call	0x1464	; 0x1464 <_Z16protected_led_onh>
		i++;
    14ca:	80 91 06 01 	lds	r24, 0x0106
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 06 01 	sts	0x0106, r24
		if (i>=5)  { i=1; return TRUE; }
    14d4:	85 30       	cpi	r24, 0x05	; 5
    14d6:	78 f0       	brcs	.+30     	; 0x14f6 <_Z11strobe_ledsh+0x5e>
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	80 93 06 01 	sts	0x0106, r24
    14de:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    14e0:	80 91 06 01 	lds	r24, 0x0106
    14e4:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z17protected_led_offh>
		i++;
    14e8:	80 91 06 01 	lds	r24, 0x0106
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	80 93 06 01 	sts	0x0106, r24
		if (i>=5)  { i=1; return TRUE; }
    14f2:	85 30       	cpi	r24, 0x05	; 5
    14f4:	88 f7       	brcc	.-30     	; 0x14d8 <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
}
    14f8:	08 95       	ret

000014fa <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    14fa:	90 91 57 03 	lds	r25, 0x0357
    14fe:	91 11       	cpse	r25, r1
    1500:	08 95       	ret
	protected_led_on(mindex);
    1502:	0e 94 32 0a 	call	0x1464	; 0x1464 <_Z16protected_led_onh>
    1506:	08 95       	ret

00001508 <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1508:	90 91 57 03 	lds	r25, 0x0357
    150c:	91 11       	cpse	r25, r1
    150e:	08 95       	ret
	protected_led_off(mindex);
    1510:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z17protected_led_offh>
    1514:	08 95       	ret

00001516 <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    1516:	66 23       	and	r22, r22
    1518:	19 f4       	brne	.+6      	; 0x1520 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    151a:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z7led_offh>
    151e:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    1520:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_Z6led_onh>
    1524:	08 95       	ret

00001526 <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1526:	90 91 57 03 	lds	r25, 0x0357
    152a:	91 11       	cpse	r25, r1
    152c:	08 95       	ret
	protected_set_led( mindex, value );
    152e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_Z17protected_set_ledhh>
    1532:	08 95       	ret

00001534 <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    1534:	66 23       	and	r22, r22
    1536:	51 f0       	breq	.+20     	; 0x154c <_Z19protected_show_bytehh+0x18>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1538:	86 ff       	sbrs	r24, 6
    153a:	17 c0       	rjmp	.+46     	; 0x156a <_Z19protected_show_bytehh+0x36>
    153c:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    153e:	85 ff       	sbrs	r24, 5
    1540:	17 c0       	rjmp	.+46     	; 0x1570 <_Z19protected_show_bytehh+0x3c>
    1542:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    1544:	84 fd       	sbrc	r24, 4
    1546:	0a c0       	rjmp	.+20     	; 0x155c <_Z19protected_show_bytehh+0x28>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1548:	5d 98       	cbi	0x0b, 5	; 11
    154a:	08 95       	ret
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    154c:	82 ff       	sbrs	r24, 2
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <_Z19protected_show_bytehh+0x2c>
    1550:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1552:	81 ff       	sbrs	r24, 1
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <_Z19protected_show_bytehh+0x32>
    1556:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1558:	80 ff       	sbrs	r24, 0
    155a:	f6 cf       	rjmp	.-20     	; 0x1548 <_Z19protected_show_bytehh+0x14>
    155c:	5d 9a       	sbi	0x0b, 5	; 11
    155e:	08 95       	ret
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1560:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1562:	81 fd       	sbrc	r24, 1
    1564:	f8 cf       	rjmp	.-16     	; 0x1556 <_Z19protected_show_bytehh+0x22>
    1566:	5e 98       	cbi	0x0b, 6	; 11
    1568:	f7 cf       	rjmp	.-18     	; 0x1558 <_Z19protected_show_bytehh+0x24>
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    156a:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    156c:	85 fd       	sbrc	r24, 5
    156e:	e9 cf       	rjmp	.-46     	; 0x1542 <_Z19protected_show_bytehh+0xe>
    1570:	5e 98       	cbi	0x0b, 6	; 11
    1572:	e8 cf       	rjmp	.-48     	; 0x1544 <_Z19protected_show_bytehh+0x10>

00001574 <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    1574:	90 91 57 03 	lds	r25, 0x0357
    1578:	99 23       	and	r25, r25
    157a:	11 f0       	breq	.+4      	; 0x1580 <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    157c:	80 91 56 03 	lds	r24, 0x0356
	}
    protected_show_byte( result, mHiNibble );
    1580:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z19protected_show_bytehh>
}
    1584:	08 95       	ret

00001586 <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1586:	90 91 57 03 	lds	r25, 0x0357
    158a:	99 23       	and	r25, r25
    158c:	19 f0       	breq	.+6      	; 0x1594 <_Z18show_result_toggleh+0xe>
    158e:	93 30       	cpi	r25, 0x03	; 3
    1590:	09 f0       	breq	.+2      	; 0x1594 <_Z18show_result_toggleh+0xe>
    1592:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    1594:	90 91 04 01 	lds	r25, 0x0104
    1598:	99 23       	and	r25, r25
    159a:	59 f4       	brne	.+22     	; 0x15b2 <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 91 04 01 	lds	r25, 0x0104
    15a8:	91 11       	cpse	r25, r1
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	80 93 04 01 	sts	0x0104, r24
    15b0:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z19protected_show_bytehh>
    15b8:	f4 cf       	rjmp	.-24     	; 0x15a2 <_Z18show_result_toggleh+0x1c>

000015ba <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    15ba:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    15bc:	95 81       	ldd	r25, Z+5	; 0x05
    15be:	9f 70       	andi	r25, 0x0F	; 15
    15c0:	90 93 57 03 	sts	0x0357, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    15c4:	86 81       	ldd	r24, Z+6	; 0x06
    15c6:	8f 70       	andi	r24, 0x0F	; 15
    15c8:	80 93 56 03 	sts	0x0356, r24

	switch (System_LED_Control.systemMode)
    15cc:	92 30       	cpi	r25, 0x02	; 2
    15ce:	81 f0       	breq	.+32     	; 0x15f0 <_Z21can_parse_led_requestP4sCAN+0x36>
    15d0:	93 30       	cpi	r25, 0x03	; 3
    15d2:	39 f0       	breq	.+14     	; 0x15e2 <_Z21can_parse_led_requestP4sCAN+0x28>
    15d4:	91 30       	cpi	r25, 0x01	; 1
    15d6:	09 f0       	breq	.+2      	; 0x15da <_Z21can_parse_led_requestP4sCAN+0x20>
    15d8:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_Z9show_bytehh>
									  break;
    15e0:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    15e2:	80 91 e8 02 	lds	r24, 0x02E8
    15e6:	80 93 56 03 	sts	0x0356, r24
									  show_result_toggle( MyInstance );
    15ea:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_Z18show_result_toggleh>
    15ee:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    15f0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_Z11strobe_ledsh>
									  break;
    15f4:	08 95       	ret

000015f6 <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    15f6:	80 91 57 03 	lds	r24, 0x0357
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	d9 f0       	breq	.+54     	; 0x1634 <_Z19led_timeslice_100msv+0x3e>
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	49 f0       	breq	.+18     	; 0x1614 <_Z19led_timeslice_100msv+0x1e>
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	09 f0       	breq	.+2      	; 0x1608 <_Z19led_timeslice_100msv+0x12>
    1606:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    1608:	80 91 56 03 	lds	r24, 0x0356
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_Z9show_bytehh>
									  break;
    1612:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    1614:	80 91 05 01 	lds	r24, 0x0105
    1618:	98 2f       	mov	r25, r24
    161a:	91 50       	subi	r25, 0x01	; 1
    161c:	90 93 05 01 	sts	0x0105, r25
    1620:	88 23       	and	r24, r24
    1622:	89 f7       	brne	.-30     	; 0x1606 <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    1624:	8a e0       	ldi	r24, 0x0A	; 10
    1626:	80 93 05 01 	sts	0x0105, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    162a:	80 91 e8 02 	lds	r24, 0x02E8
    162e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_Z18show_result_toggleh>
    1632:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    1634:	80 91 56 03 	lds	r24, 0x0356
    1638:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_Z11strobe_ledsh>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	19 f7       	brne	.-58     	; 0x1606 <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    1640:	90 91 56 03 	lds	r25, 0x0356
    1644:	99 23       	and	r25, r25
    1646:	19 f4       	brne	.+6      	; 0x164e <_Z19led_timeslice_100msv+0x58>
    1648:	80 93 56 03 	sts	0x0356, r24
    164c:	08 95       	ret
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	fb cf       	rjmp	.-10     	; 0x1648 <_Z19led_timeslice_100msv+0x52>

00001652 <set_spi_isr_callback>:
			  which has a system message ID
******************************************************************************/
void set_spi_isr_callback( BOOL (*mCallback)(void) )
{
	//printf("set_spi_isr_callback(%d)\n", mCallback);
	spi_isr_call_back = mCallback;
    1652:	90 93 5a 03 	sts	0x035A, r25
    1656:	80 93 59 03 	sts	0x0359, r24
}
    165a:	08 95       	ret

0000165c <__vector_26>:
//#include "rpi_spi.h"
//#include "servos.h"

/******* SPI Transfer Complete ISR ***************/
ISR ( SPI_STC_vect )
{	
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
	spi_isr_call_back();
    167e:	e0 91 59 03 	lds	r30, 0x0359
    1682:	f0 91 5a 03 	lds	r31, 0x035A
    1686:	09 95       	icall
//	test_rx_response( SPDR );	
}
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	bf 91       	pop	r27
    168e:	af 91       	pop	r26
    1690:	9f 91       	pop	r25
    1692:	8f 91       	pop	r24
    1694:	7f 91       	pop	r23
    1696:	6f 91       	pop	r22
    1698:	5f 91       	pop	r21
    169a:	4f 91       	pop	r20
    169c:	3f 91       	pop	r19
    169e:	2f 91       	pop	r18
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	1f 90       	pop	r1
    16a8:	18 95       	reti

000016aa <_Z16SPI_SlaveReceivev>:


char SPI_SlaveReceive(void) 
{
	/* Wait for reception complete */ 
	while(!(SPSR & (1<<SPIF)));
    16aa:	0d b4       	in	r0, 0x2d	; 45
    16ac:	07 fe       	sbrs	r0, 7
    16ae:	fd cf       	rjmp	.-6      	; 0x16aa <_Z16SPI_SlaveReceivev>
	/* Return data register */ 
	return SPDR;
    16b0:	8e b5       	in	r24, 0x2e	; 46
}
    16b2:	08 95       	ret

000016b4 <spi_setBitOrder>:

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	21 f0       	breq	.+8      	; 0x16c0 <spi_setBitOrder+0xc>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    16b8:	8c b5       	in	r24, 0x2c	; 44
    16ba:	8f 7d       	andi	r24, 0xDF	; 223
    16bc:	8c bd       	out	0x2c, r24	; 44
    16be:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    16c0:	8c b5       	in	r24, 0x2c	; 44
    16c2:	80 62       	ori	r24, 0x20	; 32
    16c4:	8c bd       	out	0x2c, r24	; 44
    16c6:	08 95       	ret

000016c8 <spi_setDataMode>:
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    16c8:	9c b5       	in	r25, 0x2c	; 44
    16ca:	93 7f       	andi	r25, 0xF3	; 243
    16cc:	98 2b       	or	r25, r24
    16ce:	9c bd       	out	0x2c, r25	; 44
}
    16d0:	08 95       	ret

000016d2 <spi_setClockDivider>:

// Sets BaudRate:
void spi_setClockDivider( uint8_t rate )
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    16d2:	2c b5       	in	r18, 0x2c	; 44
    16d4:	98 2f       	mov	r25, r24
    16d6:	93 70       	andi	r25, 0x03	; 3
    16d8:	2c 7f       	andi	r18, 0xFC	; 252
    16da:	92 2b       	or	r25, r18
    16dc:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    16de:	2d b5       	in	r18, 0x2d	; 45
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	95 95       	asr	r25
    16e4:	87 95       	ror	r24
    16e6:	95 95       	asr	r25
    16e8:	87 95       	ror	r24
    16ea:	81 70       	andi	r24, 0x01	; 1
    16ec:	2e 7f       	andi	r18, 0xFE	; 254
    16ee:	82 2b       	or	r24, r18
    16f0:	8d bd       	out	0x2d, r24	; 45
}
    16f2:	08 95       	ret

000016f4 <_Z7pin_ddrhh>:
// When the SS pin is set as OUTPUT, it can be used as
// a general purpose output port (it doesn't influence
// SPI operations)
void pin_ddr( BOOL mAlternatePins, BOOL mMaster )
{
  if (mAlternatePins) 
    16f4:	88 23       	and	r24, r24
    16f6:	41 f0       	breq	.+16     	; 0x1708 <_Z7pin_ddrhh+0x14>
  {
	if (mMaster)
    16f8:	66 23       	and	r22, r22
    16fa:	81 f0       	breq	.+32     	; 0x171c <_Z7pin_ddrhh+0x28>
	{
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD &= ~MISO_A;
    16fc:	52 98       	cbi	0x0a, 2	; 10
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD |= MOSI_A|SCK_A;
    16fe:	8a b1       	in	r24, 0x0a	; 10
    1700:	88 61       	ori	r24, 0x18	; 24
    1702:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;	
    1704:	38 98       	cbi	0x07, 0	; 7
    1706:	08 95       	ret
		  DDRC &= ~SS_A;
	}  
  }
  else
  {
	  if (mMaster)
    1708:	66 23       	and	r22, r22
    170a:	71 f4       	brne	.+28     	; 0x1728 <_Z7pin_ddrhh+0x34>
		  DDRC &= ~SS;	

	  } else {
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRB |= MISO;	
    170c:	20 9a       	sbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB &= MOSI|SCK|SS;
    170e:	84 b1       	in	r24, 0x04	; 4
    1710:	8a 78       	andi	r24, 0x8A	; 138
    1712:	84 b9       	out	0x04, r24	; 4
		  DDRD &= SS;
    1714:	8a b1       	in	r24, 0x0a	; 10
    1716:	88 70       	andi	r24, 0x08	; 8
    1718:	8a b9       	out	0x0a, r24	; 10
    171a:	08 95       	ret
		  DDRC &= ~SS_A;	
	}
	else {	
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD |= MISO_A;
    171c:	52 9a       	sbi	0x0a, 2	; 10

		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD &= ~(MOSI_A|SCK_A);
    171e:	8a b1       	in	r24, 0x0a	; 10
    1720:	87 7e       	andi	r24, 0xE7	; 231
    1722:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;
    1724:	38 98       	cbi	0x07, 0	; 7
    1726:	08 95       	ret
  {
	  if (mMaster)
	  {
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD &= ~MISO;
    1728:	50 98       	cbi	0x0a, 0	; 10
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD |= MOSI|SCK;
    172a:	8a b1       	in	r24, 0x0a	; 10
    172c:	82 68       	ori	r24, 0x82	; 130
    172e:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS;	
    1730:	3b 98       	cbi	0x07, 3	; 7
    1732:	08 95       	ret

00001734 <spi_init>:
	
	mbit_order	:	[MSGFIRST,LSBFIRST]  
	mSPI_Mode	:	SPI mode [SPI_MODE0..SPI_MODE3]
****************************************************************************/
void spi_init( BOOL mAlternatePins, BOOL mMaster, uint8_t mbit_order, uint8_t mSPI_Mode )
{
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <spi_init+0xa>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	08 2f       	mov	r16, r24
    1744:	16 2f       	mov	r17, r22
   pin_ddr(mAlternatePins, mMaster);
    1746:	2a 83       	std	Y+2, r18	; 0x02
    1748:	49 83       	std	Y+1, r20	; 0x01
    174a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_Z7pin_ddrhh>
  /************************ WARNING!! *****************************
   No need to modify MCUCR reigsters.  Default is '0' which means
   the SPI to use regular MISO/MOSI, not the alternate pins 
   NOTE: The Serial Progamming always uses the Alternate pins.
   ****************************************************************/
   if (mAlternatePins)
    174e:	2a 81       	ldd	r18, Y+2	; 0x02
    1750:	49 81       	ldd	r20, Y+1	; 0x01
    1752:	00 23       	and	r16, r16
    1754:	f1 f0       	breq	.+60     	; 0x1792 <spi_init+0x5e>
  	  MCUCR |= (1<<SPIPS); 				        // Clear for MOSI.  Set for MOSI_A
    1756:	85 b7       	in	r24, 0x35	; 53
    1758:	80 68       	ori	r24, 0x80	; 128
    175a:	85 bf       	out	0x35, r24	; 53
}

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    175c:	41 30       	cpi	r20, 0x01	; 1
    175e:	f1 f0       	breq	.+60     	; 0x179c <spi_init+0x68>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    1760:	8c b5       	in	r24, 0x2c	; 44
    1762:	8f 7d       	andi	r24, 0xDF	; 223
    1764:	8c bd       	out	0x2c, r24	; 44
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1766:	8c b5       	in	r24, 0x2c	; 44
    1768:	83 7f       	andi	r24, 0xF3	; 243
    176a:	82 2b       	or	r24, r18
    176c:	8c bd       	out	0x2c, r24	; 44
										// CMR3000 wants SPI_MODE0, but sample is done on rising edge as in Mode3

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  if (mMaster)
    176e:	11 23       	and	r17, r17
    1770:	f1 f4       	brne	.+60     	; 0x17ae <spi_init+0x7a>
  {
	  SPCR |= (1<<MSTR);		// Master SPI
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
  } else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
    1772:	8c b5       	in	r24, 0x2c	; 44
    1774:	8f 7e       	andi	r24, 0xEF	; 239
    1776:	8c bd       	out	0x2c, r24	; 44
  return SPDR;
}

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    1778:	8c b5       	in	r24, 0x2c	; 44
    177a:	80 68       	ori	r24, 0x80	; 128
    177c:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
  } else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
	  spi_attachInterrupt();
  }
  SPCR |= (1<<SPE);			// Enable SPI Module
    177e:	8c b5       	in	r24, 0x2c	; 44
    1780:	80 64       	ori	r24, 0x40	; 64
    1782:	8c bd       	out	0x2c, r24	; 44
}
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	08 95       	ret
   NOTE: The Serial Progamming always uses the Alternate pins.
   ****************************************************************/
   if (mAlternatePins)
  	  MCUCR |= (1<<SPIPS); 				        // Clear for MOSI.  Set for MOSI_A
   else
  	  MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
    1792:	85 b7       	in	r24, 0x35	; 53
    1794:	8f 77       	andi	r24, 0x7F	; 127
    1796:	85 bf       	out	0x35, r24	; 53
}

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    1798:	41 30       	cpi	r20, 0x01	; 1
    179a:	11 f7       	brne	.-60     	; 0x1760 <spi_init+0x2c>
      SPCR |= (1<<DORD);
    179c:	8c b5       	in	r24, 0x2c	; 44
    179e:	80 62       	ori	r24, 0x20	; 32
    17a0:	8c bd       	out	0x2c, r24	; 44
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    17a2:	8c b5       	in	r24, 0x2c	; 44
    17a4:	83 7f       	andi	r24, 0xF3	; 243
    17a6:	82 2b       	or	r24, r18
    17a8:	8c bd       	out	0x2c, r24	; 44
										// CMR3000 wants SPI_MODE0, but sample is done on rising edge as in Mode3

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  if (mMaster)
    17aa:	11 23       	and	r17, r17
    17ac:	11 f3       	breq	.-60     	; 0x1772 <spi_init+0x3e>
  {
	  SPCR |= (1<<MSTR);		// Master SPI
    17ae:	8c b5       	in	r24, 0x2c	; 44
    17b0:	80 61       	ori	r24, 0x10	; 16
    17b2:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <spi_setClockDivider>
    17ba:	e1 cf       	rjmp	.-62     	; 0x177e <spi_init+0x4a>

000017bc <spi_transfer>:
  SPCR |= (1<<SPE);			// Enable SPI Module
}

byte spi_transfer(byte _data) 
{
  SPDR = _data; 
    17bc:	8e bd       	out	0x2e, r24	; 46
  while (! (SPSR & (1<<SPIF)) );
    17be:	0d b4       	in	r0, 0x2d	; 45
    17c0:	07 fe       	sbrs	r0, 7
    17c2:	fd cf       	rjmp	.-6      	; 0x17be <spi_transfer+0x2>
  return SPDR;
    17c4:	8e b5       	in	r24, 0x2e	; 46
}
    17c6:	08 95       	ret

000017c8 <spi_attachInterrupt>:

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    17c8:	8c b5       	in	r24, 0x2c	; 44
    17ca:	80 68       	ori	r24, 0x80	; 128
    17cc:	8c bd       	out	0x2c, r24	; 44
}
    17ce:	08 95       	ret

000017d0 <spi_detachInterrupt>:

void spi_detachInterrupt() 
{
  SPCR &= ~(1<<SPIE);
    17d0:	8c b5       	in	r24, 0x2c	; 44
    17d2:	8f 77       	andi	r24, 0x7F	; 127
    17d4:	8c bd       	out	0x2c, r24	; 44
}
    17d6:	08 95       	ret

000017d8 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    17d8:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    17da:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    17dc:	90 93 89 00 	sts	0x0089, r25
    17e0:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    17e4:	2f bf       	out	0x3f, r18	; 63
}
    17e6:	08 95       	ret

000017e8 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    17e8:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    17ea:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    17ec:	90 93 8b 00 	sts	0x008B, r25
    17f0:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    17f4:	2f bf       	out	0x3f, r18	; 63
}
    17f6:	08 95       	ret

000017f8 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	7b 01       	movw	r14, r22
    1802:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1804:	20 91 08 01 	lds	r18, 0x0108
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	74 e2       	ldi	r23, 0x24	; 36
    1812:	84 ef       	ldi	r24, 0xF4	; 244
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__divmodsi4>
    181a:	ca 01       	movw	r24, r20
    181c:	b9 01       	movw	r22, r18
    181e:	0e 94 4b 14 	call	0x2896	; 0x2896 <__floatsisf>
    1822:	a8 01       	movw	r20, r16
    1824:	97 01       	movw	r18, r14
    1826:	0e 94 0d 13 	call	0x261a	; 0x261a <__divsf3>
    182a:	0e 94 3f 10 	call	0x207e	; 0x207e <__fixunssfsi>
	return Top;
}
    182e:	cb 01       	movw	r24, r22
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	08 95       	ret

0000183a <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    183a:	90 93 0a 01 	sts	0x010A, r25
    183e:	80 93 09 01 	sts	0x0109, r24
	ICR1 = TOP;
    1842:	90 93 87 00 	sts	0x0087, r25
    1846:	80 93 86 00 	sts	0x0086, r24
}
    184a:	08 95       	ret

0000184c <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	9b 01       	movw	r18, r22
    1856:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	74 e2       	ldi	r23, 0x24	; 36
    185c:	84 e7       	ldi	r24, 0x74	; 116
    185e:	9b e4       	ldi	r25, 0x4B	; 75
    1860:	0e 94 0d 13 	call	0x261a	; 0x261a <__divsf3>
    1864:	8b 01       	movw	r16, r22
    1866:	d8 2f       	mov	r29, r24
    1868:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    186a:	9e 01       	movw	r18, r28
    186c:	71 2f       	mov	r23, r17
    186e:	83 2f       	mov	r24, r19
    1870:	92 2f       	mov	r25, r18
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	0c f0       	brlt	.+2      	; 0x1884 <_Z16select_prescalerf+0x38>
    1882:	41 c0       	rjmp	.+130    	; 0x1906 <_Z16select_prescalerf+0xba>
    1884:	9e 01       	movw	r18, r28
    1886:	60 2f       	mov	r22, r16
    1888:	71 2f       	mov	r23, r17
    188a:	83 2f       	mov	r24, r19
    188c:	92 2f       	mov	r25, r18
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	5e e3       	ldi	r21, 0x3E	; 62
    1896:	0e 94 13 12 	call	0x2426	; 0x2426 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	57 e4       	ldi	r21, 0x47	; 71
    18a2:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	b4 f5       	brge	.+108    	; 0x1916 <_Z16select_prescalerf+0xca>
    18aa:	9e 01       	movw	r18, r28
    18ac:	60 2f       	mov	r22, r16
    18ae:	71 2f       	mov	r23, r17
    18b0:	83 2f       	mov	r24, r19
    18b2:	92 2f       	mov	r25, r18
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	5c e3       	ldi	r21, 0x3C	; 60
    18bc:	0e 94 13 12 	call	0x2426	; 0x2426 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gtsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	4c f5       	brge	.+82     	; 0x1922 <_Z16select_prescalerf+0xd6>
    18d0:	9e 01       	movw	r18, r28
    18d2:	60 2f       	mov	r22, r16
    18d4:	71 2f       	mov	r23, r17
    18d6:	83 2f       	mov	r24, r19
    18d8:	92 2f       	mov	r25, r18
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5b e3       	ldi	r21, 0x3B	; 59
    18e2:	0e 94 13 12 	call	0x2426	; 0x2426 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	9c f4       	brge	.+38     	; 0x191c <_Z16select_prescalerf+0xd0>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    18fa:	c9 01       	movw	r24, r18
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    1906:	21 e0       	ldi	r18, 0x01	; 1
    1908:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    190a:	c9 01       	movw	r24, r18
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1916:	28 e0       	ldi	r18, 0x08	; 8
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	ef cf       	rjmp	.-34     	; 0x18fa <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	31 e0       	ldi	r19, 0x01	; 1
    1920:	ec cf       	rjmp	.-40     	; 0x18fa <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    1922:	20 e4       	ldi	r18, 0x40	; 64
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	e9 cf       	rjmp	.-46     	; 0x18fa <_Z16select_prescalerf+0xae>

00001928 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1928:	80 34       	cpi	r24, 0x40	; 64
    192a:	91 05       	cpc	r25, r1
    192c:	d9 f0       	breq	.+54     	; 0x1964 <_Z20get_tccr1b_prescalert+0x3c>
    192e:	81 34       	cpi	r24, 0x41	; 65
    1930:	91 05       	cpc	r25, r1
    1932:	50 f0       	brcs	.+20     	; 0x1948 <_Z20get_tccr1b_prescalert+0x20>
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	80 30       	cpi	r24, 0x00	; 0
    1938:	92 07       	cpc	r25, r18
    193a:	81 f0       	breq	.+32     	; 0x195c <_Z20get_tccr1b_prescalert+0x34>
    193c:	24 e0       	ldi	r18, 0x04	; 4
    193e:	80 30       	cpi	r24, 0x00	; 0
    1940:	92 07       	cpc	r25, r18
    1942:	51 f0       	breq	.+20     	; 0x1958 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	49 f0       	breq	.+18     	; 0x1960 <_Z20get_tccr1b_prescalert+0x38>
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	91 05       	cpc	r25, r1
    1952:	c1 f7       	brne	.-16     	; 0x1944 <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    1954:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    1956:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    1958:	85 e0       	ldi	r24, 0x05	; 5
    195a:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	08 95       	ret

00001968 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	7b 01       	movw	r14, r22
    1972:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    1974:	20 91 08 01 	lds	r18, 0x0108
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	74 e2       	ldi	r23, 0x24	; 36
    1982:	84 ef       	ldi	r24, 0xF4	; 244
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__divmodsi4>
    198a:	ca 01       	movw	r24, r20
    198c:	b9 01       	movw	r22, r18
    198e:	0e 94 4b 14 	call	0x2896	; 0x2896 <__floatsisf>
    1992:	a8 01       	movw	r20, r16
    1994:	97 01       	movw	r18, r14
    1996:	0e 94 0d 13 	call	0x261a	; 0x261a <__divsf3>
    199a:	0e 94 3f 10 	call	0x207e	; 0x207e <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    199e:	70 93 0a 01 	sts	0x010A, r23
    19a2:	60 93 09 01 	sts	0x0109, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    19a6:	70 93 87 00 	sts	0x0087, r23
    19aa:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	08 95       	ret

000019b8 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	7b 01       	movw	r14, r22
    19c6:	8c 01       	movw	r16, r24
    19c8:	c4 2f       	mov	r28, r20
    19ca:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    19cc:	41 11       	cpse	r20, r1
    19ce:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    19d0:	d1 11       	cpse	r29, r1
    19d2:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    19d4:	80 91 64 00 	lds	r24, 0x0064
    19d8:	87 7e       	andi	r24, 0xE7	; 231
    19da:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    19de:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    19e0:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    19e2:	10 92 89 00 	sts	0x0089, r1
    19e6:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    19ea:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    19ec:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    19ee:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    19f0:	10 92 8b 00 	sts	0x008B, r1
    19f4:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    19f8:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    19fa:	20 91 08 01 	lds	r18, 0x0108
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	74 e2       	ldi	r23, 0x24	; 36
    1a08:	84 ef       	ldi	r24, 0xF4	; 244
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__divmodsi4>
    1a10:	ca 01       	movw	r24, r20
    1a12:	b9 01       	movw	r22, r18
    1a14:	0e 94 4b 14 	call	0x2896	; 0x2896 <__floatsisf>
    1a18:	a8 01       	movw	r20, r16
    1a1a:	97 01       	movw	r18, r14
    1a1c:	0e 94 0d 13 	call	0x261a	; 0x261a <__divsf3>
    1a20:	0e 94 3f 10 	call	0x207e	; 0x207e <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    1a24:	70 93 0a 01 	sts	0x010A, r23
    1a28:	60 93 09 01 	sts	0x0109, r22
	ICR1 = TOP;
    1a2c:	70 93 87 00 	sts	0x0087, r23
    1a30:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    1a34:	cc 23       	and	r28, r28
    1a36:	c1 f4       	brne	.+48     	; 0x1a68 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    1a38:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    1a3a:	d1 11       	cpse	r29, r1
    1a3c:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    1a3e:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    1a42:	c8 01       	movw	r24, r16
    1a44:	b7 01       	movw	r22, r14
    1a46:	0e 94 26 0c 	call	0x184c	; 0x184c <_Z16select_prescalerf>
    1a4a:	80 93 08 01 	sts	0x0108, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z20get_tccr1b_prescalert>
    1a54:	88 61       	ori	r24, 0x18	; 24
    1a56:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    1a68:	82 e8       	ldi	r24, 0x82	; 130
    1a6a:	e7 cf       	rjmp	.-50     	; 0x1a3a <_Z8pwm_initfhh+0x82>

00001a6c <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    1a6c:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    1a70:	29 2f       	mov	r18, r25
    1a72:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    1a74:	88 23       	and	r24, r24
    1a76:	21 f4       	brne	.+8      	; 0x1a80 <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    1a78:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    1a7a:	90 93 80 00 	sts	0x0080, r25
}
    1a7e:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    1a80:	92 2f       	mov	r25, r18
    1a82:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    1a84:	90 93 80 00 	sts	0x0080, r25
}
    1a88:	08 95       	ret

00001a8a <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    1a8a:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    1a8e:	29 2f       	mov	r18, r25
    1a90:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    1a92:	88 23       	and	r24, r24
    1a94:	21 f4       	brne	.+8      	; 0x1a9e <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    1a96:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    1a98:	90 93 80 00 	sts	0x0080, r25
}
    1a9c:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    1a9e:	92 2f       	mov	r25, r18
    1aa0:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    1aa2:	90 93 80 00 	sts	0x0080, r25
}
    1aa6:	08 95       	ret

00001aa8 <_Z9set_dutyAf>:

/* value must be Positive! */
void set_dutyA( float mDuty )
{
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	7b 01       	movw	r14, r22
    1ab2:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty; 
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	0e 94 1b 14 	call	0x2836	; 0x2836 <__ltsf2>
    1abe:	87 ff       	sbrs	r24, 7
    1ac0:	04 c0       	rjmp	.+8      	; 0x1aca <_Z9set_dutyAf+0x22>
    1ac2:	17 fb       	bst	r17, 7
    1ac4:	10 95       	com	r17
    1ac6:	17 f9       	bld	r17, 7
    1ac8:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    1aca:	60 91 09 01 	lds	r22, 0x0109
    1ace:	70 91 0a 01 	lds	r23, 0x010A
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__floatunsisf>
    1ada:	a8 01       	movw	r20, r16
    1adc:	97 01       	movw	r18, r14
    1ade:	0e 94 13 12 	call	0x2426	; 0x2426 <__mulsf3>
    1ae2:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <ceil>
    1ae6:	0e 94 3f 10 	call	0x207e	; 0x207e <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1aea:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1aec:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1aee:	70 93 89 00 	sts	0x0089, r23
    1af2:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    1af6:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty; 
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	08 95       	ret

00001b02 <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	7b 01       	movw	r14, r22
    1b0c:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	0e 94 1b 14 	call	0x2836	; 0x2836 <__ltsf2>
    1b18:	87 ff       	sbrs	r24, 7
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <_Z9set_dutyBf+0x22>
    1b1c:	17 fb       	bst	r17, 7
    1b1e:	10 95       	com	r17
    1b20:	17 f9       	bld	r17, 7
    1b22:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    1b24:	60 91 09 01 	lds	r22, 0x0109
    1b28:	70 91 0a 01 	lds	r23, 0x010A
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__floatunsisf>
    1b34:	a8 01       	movw	r20, r16
    1b36:	97 01       	movw	r18, r14
    1b38:	0e 94 13 12 	call	0x2426	; 0x2426 <__mulsf3>
    1b3c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <ceil>
    1b40:	0e 94 3f 10 	call	0x207e	; 0x207e <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1b44:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1b46:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    1b48:	70 93 8b 00 	sts	0x008B, r23
    1b4c:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    1b50:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	08 95       	ret

00001b5c <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    1b5c:	9b 01       	movw	r18, r22
    1b5e:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    1b60:	10 92 5b 03 	sts	0x035B, r1
    1b64:	10 92 5c 03 	sts	0x035C, r1
    1b68:	10 92 5d 03 	sts	0x035D, r1
    1b6c:	10 92 5e 03 	sts	0x035E, r1
    1b70:	80 91 5b 03 	lds	r24, 0x035B
    1b74:	90 91 5c 03 	lds	r25, 0x035C
    1b78:	a0 91 5d 03 	lds	r26, 0x035D
    1b7c:	b0 91 5e 03 	lds	r27, 0x035E
    1b80:	82 17       	cp	r24, r18
    1b82:	93 07       	cpc	r25, r19
    1b84:	a4 07       	cpc	r26, r20
    1b86:	b5 07       	cpc	r27, r21
    1b88:	04 f5       	brge	.+64     	; 0x1bca <_Z5delayl+0x6e>
    1b8a:	80 91 5b 03 	lds	r24, 0x035B
    1b8e:	90 91 5c 03 	lds	r25, 0x035C
    1b92:	a0 91 5d 03 	lds	r26, 0x035D
    1b96:	b0 91 5e 03 	lds	r27, 0x035E
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	a1 1d       	adc	r26, r1
    1b9e:	b1 1d       	adc	r27, r1
    1ba0:	80 93 5b 03 	sts	0x035B, r24
    1ba4:	90 93 5c 03 	sts	0x035C, r25
    1ba8:	a0 93 5d 03 	sts	0x035D, r26
    1bac:	b0 93 5e 03 	sts	0x035E, r27
    1bb0:	80 91 5b 03 	lds	r24, 0x035B
    1bb4:	90 91 5c 03 	lds	r25, 0x035C
    1bb8:	a0 91 5d 03 	lds	r26, 0x035D
    1bbc:	b0 91 5e 03 	lds	r27, 0x035E
    1bc0:	82 17       	cp	r24, r18
    1bc2:	93 07       	cpc	r25, r19
    1bc4:	a4 07       	cpc	r26, r20
    1bc6:	b5 07       	cpc	r27, r21
    1bc8:	04 f3       	brlt	.-64     	; 0x1b8a <_Z5delayl+0x2e>
    1bca:	08 95       	ret

00001bcc <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    1bd0:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    1bd2:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    1bd4:	8e ef       	ldi	r24, 0xFE	; 254
    1bd6:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    1bd8:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    1bda:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    1bdc:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    1bde:	10 92 64 00 	sts	0x0064, r1
}
    1be2:	08 95       	ret

00001be4 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    1be8:	93 e0       	ldi	r25, 0x03	; 3
    1bea:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    1bec:	9a ef       	ldi	r25, 0xFA	; 250
    1bee:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    1bf0:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    1bf4:	10 92 62 03 	sts	0x0362, r1
    1bf8:	10 92 61 03 	sts	0x0361, r1
	/******************* PERIPHERAL INIT ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    1bfc:	08 95       	ret

00001bfe <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	80 93 65 03 	sts	0x0365, r24
}
    1c04:	08 95       	ret

00001c06 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    1c06:	10 92 65 03 	sts	0x0365, r1
}
    1c0a:	08 95       	ret

00001c0c <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    1c0c:	20 91 61 03 	lds	r18, 0x0361
    1c10:	30 91 62 03 	lds	r19, 0x0362
    1c14:	c9 01       	movw	r24, r18
    1c16:	65 e0       	ldi	r22, 0x05	; 5
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__divmodhi4>
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	39 f4       	brne	.+14     	; 0x1c30 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    1c22:	c9 01       	movw	r24, r18
    1c24:	6a e0       	ldi	r22, 0x0A	; 10
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__divmodhi4>
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <_Z15System_Dispatchv+0x26>
    1c30:	08 95       	ret
		{
			can_instance_timeslice();
    1c32:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    1c36:	80 91 61 03 	lds	r24, 0x0361
    1c3a:	90 91 62 03 	lds	r25, 0x0362
    1c3e:	64 e1       	ldi	r22, 0x14	; 20
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__divmodhi4>
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	99 f7       	brne	.-26     	; 0x1c30 <_Z15System_Dispatchv+0x24>
			{
				can_board_timeslice();
    1c4a:	0e 94 83 07 	call	0xf06	; 0xf06 <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    1c4e:	80 91 61 03 	lds	r24, 0x0361
    1c52:	90 91 62 03 	lds	r25, 0x0362
    1c56:	62 e3       	ldi	r22, 0x32	; 50
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__divmodhi4>
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	39 f7       	brne	.-50     	; 0x1c30 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    1c62:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_Z19led_timeslice_100msv>
    1c66:	08 95       	ret

00001c68 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	0f 92       	push	r0
    1c70:	11 24       	eor	r1, r1
    1c72:	2f 93       	push	r18
    1c74:	3f 93       	push	r19
    1c76:	4f 93       	push	r20
    1c78:	5f 93       	push	r21
    1c7a:	6f 93       	push	r22
    1c7c:	7f 93       	push	r23
    1c7e:	8f 93       	push	r24
    1c80:	9f 93       	push	r25
    1c82:	af 93       	push	r26
    1c84:	bf 93       	push	r27
    1c86:	ef 93       	push	r30
    1c88:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    1c8a:	80 91 66 03 	lds	r24, 0x0366
    1c8e:	88 23       	and	r24, r24
    1c90:	41 f1       	breq	.+80     	; 0x1ce2 <__vector_15+0x7a>
    1c92:	10 92 66 03 	sts	0x0366, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    1c96:	80 91 65 03 	lds	r24, 0x0365
    1c9a:	88 23       	and	r24, r24
    1c9c:	49 f1       	breq	.+82     	; 0x1cf0 <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    1c9e:	80 91 5f 03 	lds	r24, 0x035F
    1ca2:	90 91 60 03 	lds	r25, 0x0360
    1ca6:	9c 01       	movw	r18, r24
    1ca8:	2f 5f       	subi	r18, 0xFF	; 255
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	30 93 60 03 	sts	0x0360, r19
    1cb0:	20 93 5f 03 	sts	0x035F, r18
    1cb4:	6a e0       	ldi	r22, 0x0A	; 10
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__udivmodhi4>
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	31 f1       	breq	.+76     	; 0x1d0c <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	0f 90       	pop	r0
    1cde:	1f 90       	pop	r1
    1ce0:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 66 03 	sts	0x0366, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    1ce8:	80 91 65 03 	lds	r24, 0x0365
    1cec:	88 23       	and	r24, r24
    1cee:	b9 f6       	brne	.-82     	; 0x1c9e <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    1cf0:	80 91 61 03 	lds	r24, 0x0361
    1cf4:	90 91 62 03 	lds	r25, 0x0362
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	90 93 62 03 	sts	0x0362, r25
    1cfe:	80 93 61 03 	sts	0x0361, r24
		System_Dispatch();
    1d02:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_Z15System_Dispatchv>
		OS_Dispatch();
    1d06:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z11OS_Dispatchv>
    1d0a:	da cf       	rjmp	.-76     	; 0x1cc0 <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    1d0c:	10 92 60 03 	sts	0x0360, r1
    1d10:	10 92 5f 03 	sts	0x035F, r1
			OS_Event_TIC_Counter++;
    1d14:	80 91 61 03 	lds	r24, 0x0361
    1d18:	90 91 62 03 	lds	r25, 0x0362
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	90 93 62 03 	sts	0x0362, r25
    1d22:	80 93 61 03 	sts	0x0361, r24
			OS_Dispatch();
    1d26:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z11OS_Dispatchv>
    1d2a:	ca cf       	rjmp	.-108    	; 0x1cc0 <__vector_15+0x58>

00001d2c <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    1d30:	93 e0       	ldi	r25, 0x03	; 3
    1d32:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    1d34:	9a ef       	ldi	r25, 0xFA	; 250
    1d36:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    1d38:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    1d3c:	10 92 62 03 	sts	0x0362, r1
    1d40:	10 92 61 03 	sts	0x0361, r1
}
    1d44:	08 95       	ret

00001d46 <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    1d46:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    1d48:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    1d4a:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    1d4c:	85 81       	ldd	r24, Z+5	; 0x05
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	d9 f0       	breq	.+54     	; 0x1d88 <_Z27can_parse_configure_requestP4sCAN+0x42>
    1d52:	83 30       	cpi	r24, 0x03	; 3
    1d54:	71 f0       	breq	.+28     	; 0x1d72 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <_Z27can_parse_configure_requestP4sCAN+0x16>
    1d5a:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    1d5c:	89 2f       	mov	r24, r25
    1d5e:	80 95       	com	r24
    1d60:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    1d62:	92 23       	and	r25, r18
    1d64:	20 91 67 03 	lds	r18, 0x0367
    1d68:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    1d6a:	89 23       	and	r24, r25
    1d6c:	80 93 67 03 	sts	0x0367, r24
				 break;
    1d70:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    1d72:	89 2f       	mov	r24, r25
    1d74:	80 95       	com	r24
    1d76:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    1d78:	92 23       	and	r25, r18
    1d7a:	20 91 69 03 	lds	r18, 0x0369
    1d7e:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    1d80:	89 23       	and	r24, r25
    1d82:	80 93 69 03 	sts	0x0369, r24
    1d86:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    1d88:	89 2f       	mov	r24, r25
    1d8a:	80 95       	com	r24
    1d8c:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    1d8e:	92 23       	and	r25, r18
    1d90:	20 91 68 03 	lds	r18, 0x0368
    1d94:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    1d96:	89 23       	and	r24, r25
    1d98:	80 93 68 03 	sts	0x0368, r24
				 break;
    1d9c:	08 95       	ret

00001d9e <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    1d9e:	10 92 67 03 	sts	0x0367, r1
	config_byte_2 = 0;		// no reports
    1da2:	10 92 68 03 	sts	0x0368, r1
	config_byte_3 = 0;		// 
    1da6:	10 92 69 03 	sts	0x0369, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    1daa:	82 e4       	ldi	r24, 0x42	; 66
    1dac:	80 93 6a 03 	sts	0x036A, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    1db0:	10 92 ea 02 	sts	0x02EA, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    1db4:	80 91 6b 03 	lds	r24, 0x036B
    1db8:	81 60       	ori	r24, 0x01	; 1
    1dba:	80 93 6b 03 	sts	0x036B, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    1dbe:	10 92 e9 02 	sts	0x02E9, r1
	MyInstance 		 = 0x98;
    1dc2:	88 e9       	ldi	r24, 0x98	; 152
    1dc4:	80 93 e8 02 	sts	0x02E8, r24
}
    1dc8:	08 95       	ret

00001dca <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    1dca:	80 91 6b 03 	lds	r24, 0x036B
							// b/c BigMotorEn board already does and we should have a consistent interface.
							// and b/c it's better the user knows when it's read.

	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    1dce:	80 fd       	sbrc	r24, 0
    1dd0:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    1dd2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    1dd6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z25app_default_configurationv>
    1dda:	08 95       	ret

00001ddc <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    1ddc:	20 91 e8 02 	lds	r18, 0x02E8
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1de0:	f9 99       	sbic	0x1f, 1	; 31
    1de2:	fe cf       	rjmp	.-4      	; 0x1de0 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1de4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1de6:	92 bd       	out	0x22, r25	; 34
    1de8:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1dea:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	fa 9a       	sbi	0x1f, 2	; 31
    1df2:	f9 9a       	sbi	0x1f, 1	; 31
    1df4:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    1df6:	9c 01       	movw	r18, r24
    1df8:	2f 5f       	subi	r18, 0xFF	; 255
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	08 95       	ret

00001e00 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1e00:	f9 99       	sbic	0x1f, 1	; 31
    1e02:	fe cf       	rjmp	.-4      	; 0x1e00 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1e04:	92 bd       	out	0x22, r25	; 34
    1e06:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1e08:	f8 9a       	sbi	0x1f, 0	; 31
    1e0a:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    1e0c:	20 93 e8 02 	sts	0x02E8, r18
    return mEEPROMAddress+1;    
    1e10:	9c 01       	movw	r18, r24
    1e12:	2f 5f       	subi	r18, 0xFF	; 255
    1e14:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1e16:	c9 01       	movw	r24, r18
    1e18:	08 95       	ret

00001e1a <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    1e1a:	20 91 e9 02 	lds	r18, 0x02E9
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1e1e:	f9 99       	sbic	0x1f, 1	; 31
    1e20:	fe cf       	rjmp	.-4      	; 0x1e1e <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1e22:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1e24:	92 bd       	out	0x22, r25	; 34
    1e26:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1e28:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	fa 9a       	sbi	0x1f, 2	; 31
    1e30:	f9 9a       	sbi	0x1f, 1	; 31
    1e32:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    1e34:	9c 01       	movw	r18, r24
    1e36:	2f 5f       	subi	r18, 0xFF	; 255
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	08 95       	ret

00001e3e <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1e3e:	f9 99       	sbic	0x1f, 1	; 31
    1e40:	fe cf       	rjmp	.-4      	; 0x1e3e <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1e42:	92 bd       	out	0x22, r25	; 34
    1e44:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1e46:	f8 9a       	sbi	0x1f, 0	; 31
    1e48:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    1e4a:	20 93 e9 02 	sts	0x02E9, r18
    return mEEPROMAddress+1;
    1e4e:	9c 01       	movw	r18, r24
    1e50:	2f 5f       	subi	r18, 0xFF	; 255
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1e54:	c9 01       	movw	r24, r18
    1e56:	08 95       	ret

00001e58 <_Z25save_configuration_eepromPh>:
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	eeprom_write_byte( addr++, ~config_byte_1 );
    1e58:	9c 01       	movw	r18, r24
    1e5a:	2f 5f       	subi	r18, 0xFF	; 255
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	40 91 67 03 	lds	r20, 0x0367
    1e62:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1e64:	f9 99       	sbic	0x1f, 1	; 31
    1e66:	fe cf       	rjmp	.-4      	; 0x1e64 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1e68:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1e6a:	92 bd       	out	0x22, r25	; 34
    1e6c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1e6e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	fa 9a       	sbi	0x1f, 2	; 31
    1e76:	f9 9a       	sbi	0x1f, 1	; 31
    1e78:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	40 91 68 03 	lds	r20, 0x0368
    1e82:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1e84:	f9 99       	sbic	0x1f, 1	; 31
    1e86:	fe cf       	rjmp	.-4      	; 0x1e84 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1e88:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1e8a:	32 bd       	out	0x22, r19	; 34
    1e8c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    1e8e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	fa 9a       	sbi	0x1f, 2	; 31
    1e96:	f9 9a       	sbi	0x1f, 1	; 31
    1e98:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	2f 5f       	subi	r18, 0xFF	; 255
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	40 91 69 03 	lds	r20, 0x0369
    1ea4:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1ea6:	f9 99       	sbic	0x1f, 1	; 31
    1ea8:	fe cf       	rjmp	.-4      	; 0x1ea6 <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1eaa:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1eac:	92 bd       	out	0x22, r25	; 34
    1eae:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1eb0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	fa 9a       	sbi	0x1f, 2	; 31
    1eb8:	f9 9a       	sbi	0x1f, 1	; 31
    1eba:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    1ebc:	c9 01       	movw	r24, r18
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	40 91 6a 03 	lds	r20, 0x036A
    1ec4:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1ec6:	f9 99       	sbic	0x1f, 1	; 31
    1ec8:	fe cf       	rjmp	.-4      	; 0x1ec6 <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1eca:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1ecc:	32 bd       	out	0x22, r19	; 34
    1ece:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    1ed0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	fa 9a       	sbi	0x1f, 2	; 31
    1ed8:	f9 9a       	sbi	0x1f, 1	; 31
    1eda:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    1edc:	9c 01       	movw	r18, r24
    1ede:	2f 5f       	subi	r18, 0xFF	; 255
    1ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee2:	40 91 6b 03 	lds	r20, 0x036B
    1ee6:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1ee8:	f9 99       	sbic	0x1f, 1	; 31
    1eea:	fe cf       	rjmp	.-4      	; 0x1ee8 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1eec:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1eee:	92 bd       	out	0x22, r25	; 34
    1ef0:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1ef2:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	fa 9a       	sbi	0x1f, 2	; 31
    1efa:	f9 9a       	sbi	0x1f, 1	; 31
    1efc:	0f be       	out	0x3f, r0	; 63
	return addr;
}
    1efe:	c9 01       	movw	r24, r18
    1f00:	08 95       	ret

00001f02 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    1f0a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    1f0e:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z25save_configuration_eepromPh>
}
    1f12:	08 95       	ret

00001f14 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    1f14:	f8 94       	cli
	return save_configuration();
    1f16:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z18save_configurationv>
	sei();
}
    1f1a:	08 95       	ret

00001f1c <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    1f1c:	22 e1       	ldi	r18, 0x12	; 18
    1f1e:	84 33       	cpi	r24, 0x34	; 52
    1f20:	92 07       	cpc	r25, r18
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    1f24:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    1f26:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    1f28:	80 91 6b 03 	lds	r24, 0x036B
    1f2c:	8e 7f       	andi	r24, 0xFE	; 254
    1f2e:	80 93 6b 03 	sts	0x036B, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    1f32:	f8 94       	cli
    1f34:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z18save_configurationv>
    1f38:	78 94       	sei
		retval = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	08 95       	ret

00001f3e <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    1f3e:	9c 01       	movw	r18, r24
    1f40:	2f 5f       	subi	r18, 0xFF	; 255
    1f42:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f44:	f9 99       	sbic	0x1f, 1	; 31
    1f46:	fe cf       	rjmp	.-4      	; 0x1f44 <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1f48:	92 bd       	out	0x22, r25	; 34
    1f4a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1f4c:	f8 9a       	sbi	0x1f, 0	; 31
    1f4e:	80 b5       	in	r24, 0x20	; 32
    1f50:	80 95       	com	r24
    1f52:	80 93 67 03 	sts	0x0367, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    1f56:	c9 01       	movw	r24, r18
    1f58:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f5a:	f9 99       	sbic	0x1f, 1	; 31
    1f5c:	fe cf       	rjmp	.-4      	; 0x1f5a <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1f5e:	32 bd       	out	0x22, r19	; 34
    1f60:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1f62:	f8 9a       	sbi	0x1f, 0	; 31
    1f64:	20 b5       	in	r18, 0x20	; 32
    1f66:	20 95       	com	r18
    1f68:	20 93 68 03 	sts	0x0368, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    1f6c:	9c 01       	movw	r18, r24
    1f6e:	2f 5f       	subi	r18, 0xFF	; 255
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f72:	f9 99       	sbic	0x1f, 1	; 31
    1f74:	fe cf       	rjmp	.-4      	; 0x1f72 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1f76:	92 bd       	out	0x22, r25	; 34
    1f78:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1f7a:	f8 9a       	sbi	0x1f, 0	; 31
    1f7c:	80 b5       	in	r24, 0x20	; 32
    1f7e:	80 95       	com	r24
    1f80:	80 93 69 03 	sts	0x0369, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    1f84:	c9 01       	movw	r24, r18
    1f86:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f88:	f9 99       	sbic	0x1f, 1	; 31
    1f8a:	fe cf       	rjmp	.-4      	; 0x1f88 <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1f8c:	32 bd       	out	0x22, r19	; 34
    1f8e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1f90:	f8 9a       	sbi	0x1f, 0	; 31
    1f92:	20 b5       	in	r18, 0x20	; 32
    1f94:	20 95       	com	r18
    1f96:	20 93 6a 03 	sts	0x036A, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    1f9a:	9c 01       	movw	r18, r24
    1f9c:	2f 5f       	subi	r18, 0xFF	; 255
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1fa0:	f9 99       	sbic	0x1f, 1	; 31
    1fa2:	fe cf       	rjmp	.-4      	; 0x1fa0 <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1fa4:	92 bd       	out	0x22, r25	; 34
    1fa6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1fa8:	f8 9a       	sbi	0x1f, 0	; 31
    1faa:	80 b5       	in	r24, 0x20	; 32
    1fac:	80 95       	com	r24
    1fae:	80 93 6b 03 	sts	0x036B, r24
	return addr;
}
    1fb2:	c9 01       	movw	r24, r18
    1fb4:	08 95       	ret

00001fb6 <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    1fbe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    1fc2:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_Z25read_configuration_eepromPh>
}
    1fc6:	08 95       	ret

00001fc8 <__vector_27>:
/**************** VARIABLES *************************************/
word LightSensorSample [2];
byte next_channel = 0;

ISR ( ADC_vect )
{
    1fc8:	1f 92       	push	r1
    1fca:	0f 92       	push	r0
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	0f 92       	push	r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	2f 93       	push	r18
    1fd4:	3f 93       	push	r19
    1fd6:	8f 93       	push	r24
    1fd8:	9f 93       	push	r25
	word result = ADCL;
    1fda:	20 91 78 00 	lds	r18, 0x0078
	result      += (ADCH<<8);
    1fde:	30 91 79 00 	lds	r19, 0x0079
	switch(next_channel)
    1fe2:	80 91 70 03 	lds	r24, 0x0370
    1fe6:	88 23       	and	r24, r24
    1fe8:	21 f5       	brne	.+72     	; 0x2032 <__vector_27+0x6a>
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
    1fea:	80 91 6e 03 	lds	r24, 0x036E
    1fee:	90 91 6f 03 	lds	r25, 0x036F
    1ff2:	90 93 6d 03 	sts	0x036D, r25
    1ff6:	80 93 6c 03 	sts	0x036C, r24
byte next_channel = 0;

ISR ( ADC_vect )
{
	word result = ADCL;
	result      += (ADCH<<8);
    1ffa:	93 2f       	mov	r25, r19
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	82 0f       	add	r24, r18
    2000:	91 1d       	adc	r25, r1
	switch(next_channel)
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
			LightSensorSample[1] = result;
    2002:	90 93 6f 03 	sts	0x036F, r25
    2006:	80 93 6e 03 	sts	0x036E, r24
			next_channel = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	80 93 70 03 	sts	0x0370, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
			ADMUX = POT_MUX;		// Select POT	
    2010:	82 e4       	ldi	r24, 0x42	; 66
    2012:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    2016:	80 91 7a 00 	lds	r24, 0x007A
    201a:	80 64       	ori	r24, 0x40	; 64
    201c:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    2020:	9f 91       	pop	r25
    2022:	8f 91       	pop	r24
    2024:	3f 91       	pop	r19
    2026:	2f 91       	pop	r18
    2028:	0f 90       	pop	r0
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	0f 90       	pop	r0
    202e:	1f 90       	pop	r1
    2030:	18 95       	reti
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
    2032:	10 92 70 03 	sts	0x0370, r1
    2036:	ec cf       	rjmp	.-40     	; 0x2010 <__vector_27+0x48>

00002038 <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    2038:	ea e7       	ldi	r30, 0x7A	; 122
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	88 7f       	andi	r24, 0xF8	; 248
    2040:	80 83       	st	Z, r24
}
    2042:	08 95       	ret

00002044 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83;
    2044:	8b e9       	ldi	r24, 0x9B	; 155
    2046:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    204a:	ee e7       	ldi	r30, 0x7E	; 126
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	84 60       	ori	r24, 0x04	; 4
    2052:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    2054:	ef e7       	ldi	r30, 0x7F	; 127
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	83 60       	ori	r24, 0x03	; 3
    205c:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    205e:	80 ea       	ldi	r24, 0xA0	; 160
    2060:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    2064:	82 e4       	ldi	r24, 0x42	; 66
    2066:	80 93 7c 00 	sts	0x007C, r24
}
    206a:	08 95       	ret

0000206c <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    206c:	82 e4       	ldi	r24, 0x42	; 66
    206e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    2072:	ea e7       	ldi	r30, 0x7A	; 122
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 64       	ori	r24, 0x40	; 64
    207a:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    207c:	08 95       	ret

0000207e <__fixunssfsi>:
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	7b 01       	movw	r14, r22
    2088:	8c 01       	movw	r16, r24
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	5f e4       	ldi	r21, 0x4F	; 79
    2092:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__gesf2>
    2096:	87 fd       	sbrc	r24, 7
    2098:	11 c0       	rjmp	.+34     	; 0x20bc <__fixunssfsi+0x3e>
    209a:	c8 01       	movw	r24, r16
    209c:	b7 01       	movw	r22, r14
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	5f e4       	ldi	r21, 0x4F	; 79
    20a6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__subsf3>
    20aa:	0e 94 ab 14 	call	0x2956	; 0x2956 <__fixsfsi>
    20ae:	9b 01       	movw	r18, r22
    20b0:	ac 01       	movw	r20, r24
    20b2:	20 50       	subi	r18, 0x00	; 0
    20b4:	30 40       	sbci	r19, 0x00	; 0
    20b6:	40 40       	sbci	r20, 0x00	; 0
    20b8:	50 48       	sbci	r21, 0x80	; 128
    20ba:	06 c0       	rjmp	.+12     	; 0x20c8 <__fixunssfsi+0x4a>
    20bc:	c8 01       	movw	r24, r16
    20be:	b7 01       	movw	r22, r14
    20c0:	0e 94 ab 14 	call	0x2956	; 0x2956 <__fixsfsi>
    20c4:	9b 01       	movw	r18, r22
    20c6:	ac 01       	movw	r20, r24
    20c8:	b9 01       	movw	r22, r18
    20ca:	ca 01       	movw	r24, r20
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	08 95       	ret

000020d6 <_fpadd_parts>:
    20d6:	a0 e0       	ldi	r26, 0x00	; 0
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e1 e7       	ldi	r30, 0x71	; 113
    20dc:	f0 e1       	ldi	r31, 0x10	; 16
    20de:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__+0x8>
    20e2:	fc 01       	movw	r30, r24
    20e4:	ea 01       	movw	r28, r20
    20e6:	80 81       	ld	r24, Z
    20e8:	82 30       	cpi	r24, 0x02	; 2
    20ea:	08 f4       	brcc	.+2      	; 0x20ee <_fpadd_parts+0x18>
    20ec:	38 c1       	rjmp	.+624    	; 0x235e <_fpadd_parts+0x288>
    20ee:	db 01       	movw	r26, r22
    20f0:	9c 91       	ld	r25, X
    20f2:	92 30       	cpi	r25, 0x02	; 2
    20f4:	08 f4       	brcc	.+2      	; 0x20f8 <_fpadd_parts+0x22>
    20f6:	30 c1       	rjmp	.+608    	; 0x2358 <_fpadd_parts+0x282>
    20f8:	84 30       	cpi	r24, 0x04	; 4
    20fa:	59 f4       	brne	.+22     	; 0x2112 <_fpadd_parts+0x3c>
    20fc:	94 30       	cpi	r25, 0x04	; 4
    20fe:	09 f0       	breq	.+2      	; 0x2102 <_fpadd_parts+0x2c>
    2100:	2e c1       	rjmp	.+604    	; 0x235e <_fpadd_parts+0x288>
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	11 96       	adiw	r26, 0x01	; 1
    2106:	8c 91       	ld	r24, X
    2108:	11 97       	sbiw	r26, 0x01	; 1
    210a:	98 17       	cp	r25, r24
    210c:	09 f0       	breq	.+2      	; 0x2110 <_fpadd_parts+0x3a>
    210e:	21 c1       	rjmp	.+578    	; 0x2352 <_fpadd_parts+0x27c>
    2110:	26 c1       	rjmp	.+588    	; 0x235e <_fpadd_parts+0x288>
    2112:	94 30       	cpi	r25, 0x04	; 4
    2114:	09 f4       	brne	.+2      	; 0x2118 <_fpadd_parts+0x42>
    2116:	20 c1       	rjmp	.+576    	; 0x2358 <_fpadd_parts+0x282>
    2118:	92 30       	cpi	r25, 0x02	; 2
    211a:	b1 f4       	brne	.+44     	; 0x2148 <_fpadd_parts+0x72>
    211c:	82 30       	cpi	r24, 0x02	; 2
    211e:	09 f0       	breq	.+2      	; 0x2122 <_fpadd_parts+0x4c>
    2120:	1e c1       	rjmp	.+572    	; 0x235e <_fpadd_parts+0x288>
    2122:	ca 01       	movw	r24, r20
    2124:	af 01       	movw	r20, r30
    2126:	28 e0       	ldi	r18, 0x08	; 8
    2128:	da 01       	movw	r26, r20
    212a:	0d 90       	ld	r0, X+
    212c:	ad 01       	movw	r20, r26
    212e:	dc 01       	movw	r26, r24
    2130:	0d 92       	st	X+, r0
    2132:	cd 01       	movw	r24, r26
    2134:	21 50       	subi	r18, 0x01	; 1
    2136:	c1 f7       	brne	.-16     	; 0x2128 <_fpadd_parts+0x52>
    2138:	db 01       	movw	r26, r22
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	8c 91       	ld	r24, X
    213e:	11 97       	sbiw	r26, 0x01	; 1
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	89 23       	and	r24, r25
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	0a c1       	rjmp	.+532    	; 0x235c <_fpadd_parts+0x286>
    2148:	82 30       	cpi	r24, 0x02	; 2
    214a:	09 f4       	brne	.+2      	; 0x214e <_fpadd_parts+0x78>
    214c:	05 c1       	rjmp	.+522    	; 0x2358 <_fpadd_parts+0x282>
    214e:	c2 80       	ldd	r12, Z+2	; 0x02
    2150:	d3 80       	ldd	r13, Z+3	; 0x03
    2152:	db 01       	movw	r26, r22
    2154:	12 96       	adiw	r26, 0x02	; 2
    2156:	6d 90       	ld	r6, X+
    2158:	7c 90       	ld	r7, X
    215a:	13 97       	sbiw	r26, 0x03	; 3
    215c:	24 81       	ldd	r18, Z+4	; 0x04
    215e:	35 81       	ldd	r19, Z+5	; 0x05
    2160:	46 81       	ldd	r20, Z+6	; 0x06
    2162:	57 81       	ldd	r21, Z+7	; 0x07
    2164:	14 96       	adiw	r26, 0x04	; 4
    2166:	ed 90       	ld	r14, X+
    2168:	fd 90       	ld	r15, X+
    216a:	0d 91       	ld	r16, X+
    216c:	1c 91       	ld	r17, X
    216e:	17 97       	sbiw	r26, 0x07	; 7
    2170:	c6 01       	movw	r24, r12
    2172:	86 19       	sub	r24, r6
    2174:	97 09       	sbc	r25, r7
    2176:	5c 01       	movw	r10, r24
    2178:	97 ff       	sbrs	r25, 7
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <_fpadd_parts+0xae>
    217c:	aa 24       	eor	r10, r10
    217e:	bb 24       	eor	r11, r11
    2180:	a8 1a       	sub	r10, r24
    2182:	b9 0a       	sbc	r11, r25
    2184:	b0 e2       	ldi	r27, 0x20	; 32
    2186:	ab 16       	cp	r10, r27
    2188:	b1 04       	cpc	r11, r1
    218a:	0c f0       	brlt	.+2      	; 0x218e <_fpadd_parts+0xb8>
    218c:	61 c0       	rjmp	.+194    	; 0x2250 <_fpadd_parts+0x17a>
    218e:	18 16       	cp	r1, r24
    2190:	19 06       	cpc	r1, r25
    2192:	6c f5       	brge	.+90     	; 0x21ee <_fpadd_parts+0x118>
    2194:	37 01       	movw	r6, r14
    2196:	48 01       	movw	r8, r16
    2198:	0a 2c       	mov	r0, r10
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <_fpadd_parts+0xce>
    219c:	96 94       	lsr	r9
    219e:	87 94       	ror	r8
    21a0:	77 94       	ror	r7
    21a2:	67 94       	ror	r6
    21a4:	0a 94       	dec	r0
    21a6:	d2 f7       	brpl	.-12     	; 0x219c <_fpadd_parts+0xc6>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	0a 2c       	mov	r0, r10
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <_fpadd_parts+0xe6>
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	aa 1f       	adc	r26, r26
    21ba:	bb 1f       	adc	r27, r27
    21bc:	0a 94       	dec	r0
    21be:	d2 f7       	brpl	.-12     	; 0x21b4 <_fpadd_parts+0xde>
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	a1 09       	sbc	r26, r1
    21c4:	b1 09       	sbc	r27, r1
    21c6:	8e 21       	and	r24, r14
    21c8:	9f 21       	and	r25, r15
    21ca:	a0 23       	and	r26, r16
    21cc:	b1 23       	and	r27, r17
    21ce:	ee 24       	eor	r14, r14
    21d0:	ff 24       	eor	r15, r15
    21d2:	87 01       	movw	r16, r14
    21d4:	e3 94       	inc	r14
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	a1 05       	cpc	r26, r1
    21da:	b1 05       	cpc	r27, r1
    21dc:	19 f4       	brne	.+6      	; 0x21e4 <_fpadd_parts+0x10e>
    21de:	ee 24       	eor	r14, r14
    21e0:	ff 24       	eor	r15, r15
    21e2:	87 01       	movw	r16, r14
    21e4:	e6 28       	or	r14, r6
    21e6:	f7 28       	or	r15, r7
    21e8:	08 29       	or	r16, r8
    21ea:	19 29       	or	r17, r9
    21ec:	3c c0       	rjmp	.+120    	; 0x2266 <_fpadd_parts+0x190>
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	d1 f1       	breq	.+116    	; 0x2266 <_fpadd_parts+0x190>
    21f2:	ca 0c       	add	r12, r10
    21f4:	db 1c       	adc	r13, r11
    21f6:	39 01       	movw	r6, r18
    21f8:	4a 01       	movw	r8, r20
    21fa:	0a 2c       	mov	r0, r10
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <_fpadd_parts+0x130>
    21fe:	96 94       	lsr	r9
    2200:	87 94       	ror	r8
    2202:	77 94       	ror	r7
    2204:	67 94       	ror	r6
    2206:	0a 94       	dec	r0
    2208:	d2 f7       	brpl	.-12     	; 0x21fe <_fpadd_parts+0x128>
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e0       	ldi	r26, 0x00	; 0
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	0a 2c       	mov	r0, r10
    2214:	04 c0       	rjmp	.+8      	; 0x221e <_fpadd_parts+0x148>
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	aa 1f       	adc	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	0a 94       	dec	r0
    2220:	d2 f7       	brpl	.-12     	; 0x2216 <_fpadd_parts+0x140>
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	a1 09       	sbc	r26, r1
    2226:	b1 09       	sbc	r27, r1
    2228:	82 23       	and	r24, r18
    222a:	93 23       	and	r25, r19
    222c:	a4 23       	and	r26, r20
    222e:	b5 23       	and	r27, r21
    2230:	21 e0       	ldi	r18, 0x01	; 1
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	a1 05       	cpc	r26, r1
    223c:	b1 05       	cpc	r27, r1
    223e:	19 f4       	brne	.+6      	; 0x2246 <_fpadd_parts+0x170>
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	26 29       	or	r18, r6
    2248:	37 29       	or	r19, r7
    224a:	48 29       	or	r20, r8
    224c:	59 29       	or	r21, r9
    224e:	0b c0       	rjmp	.+22     	; 0x2266 <_fpadd_parts+0x190>
    2250:	6c 14       	cp	r6, r12
    2252:	7d 04       	cpc	r7, r13
    2254:	24 f4       	brge	.+8      	; 0x225e <_fpadd_parts+0x188>
    2256:	ee 24       	eor	r14, r14
    2258:	ff 24       	eor	r15, r15
    225a:	87 01       	movw	r16, r14
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <_fpadd_parts+0x190>
    225e:	63 01       	movw	r12, r6
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	a9 01       	movw	r20, r18
    2266:	81 81       	ldd	r24, Z+1	; 0x01
    2268:	fb 01       	movw	r30, r22
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	89 17       	cp	r24, r25
    226e:	09 f4       	brne	.+2      	; 0x2272 <_fpadd_parts+0x19c>
    2270:	45 c0       	rjmp	.+138    	; 0x22fc <_fpadd_parts+0x226>
    2272:	88 23       	and	r24, r24
    2274:	49 f0       	breq	.+18     	; 0x2288 <_fpadd_parts+0x1b2>
    2276:	d8 01       	movw	r26, r16
    2278:	c7 01       	movw	r24, r14
    227a:	82 1b       	sub	r24, r18
    227c:	93 0b       	sbc	r25, r19
    227e:	a4 0b       	sbc	r26, r20
    2280:	b5 0b       	sbc	r27, r21
    2282:	9c 01       	movw	r18, r24
    2284:	ad 01       	movw	r20, r26
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <_fpadd_parts+0x1ba>
    2288:	2e 19       	sub	r18, r14
    228a:	3f 09       	sbc	r19, r15
    228c:	40 0b       	sbc	r20, r16
    228e:	51 0b       	sbc	r21, r17
    2290:	57 fd       	sbrc	r21, 7
    2292:	04 c0       	rjmp	.+8      	; 0x229c <_fpadd_parts+0x1c6>
    2294:	19 82       	std	Y+1, r1	; 0x01
    2296:	db 82       	std	Y+3, r13	; 0x03
    2298:	ca 82       	std	Y+2, r12	; 0x02
    229a:	0b c0       	rjmp	.+22     	; 0x22b2 <_fpadd_parts+0x1dc>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	db 82       	std	Y+3, r13	; 0x03
    22a2:	ca 82       	std	Y+2, r12	; 0x02
    22a4:	50 95       	com	r21
    22a6:	40 95       	com	r20
    22a8:	30 95       	com	r19
    22aa:	21 95       	neg	r18
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	4f 4f       	sbci	r20, 0xFF	; 255
    22b0:	5f 4f       	sbci	r21, 0xFF	; 255
    22b2:	2c 83       	std	Y+4, r18	; 0x04
    22b4:	3d 83       	std	Y+5, r19	; 0x05
    22b6:	4e 83       	std	Y+6, r20	; 0x06
    22b8:	5f 83       	std	Y+7, r21	; 0x07
    22ba:	0d c0       	rjmp	.+26     	; 0x22d6 <_fpadd_parts+0x200>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	aa 1f       	adc	r26, r26
    22c2:	bb 1f       	adc	r27, r27
    22c4:	8c 83       	std	Y+4, r24	; 0x04
    22c6:	9d 83       	std	Y+5, r25	; 0x05
    22c8:	ae 83       	std	Y+6, r26	; 0x06
    22ca:	bf 83       	std	Y+7, r27	; 0x07
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	9b 83       	std	Y+3, r25	; 0x03
    22d4:	8a 83       	std	Y+2, r24	; 0x02
    22d6:	8c 81       	ldd	r24, Y+4	; 0x04
    22d8:	9d 81       	ldd	r25, Y+5	; 0x05
    22da:	ae 81       	ldd	r26, Y+6	; 0x06
    22dc:	bf 81       	ldd	r27, Y+7	; 0x07
    22de:	9c 01       	movw	r18, r24
    22e0:	ad 01       	movw	r20, r26
    22e2:	21 50       	subi	r18, 0x01	; 1
    22e4:	30 40       	sbci	r19, 0x00	; 0
    22e6:	40 40       	sbci	r20, 0x00	; 0
    22e8:	50 40       	sbci	r21, 0x00	; 0
    22ea:	2f 3f       	cpi	r18, 0xFF	; 255
    22ec:	ef ef       	ldi	r30, 0xFF	; 255
    22ee:	3e 07       	cpc	r19, r30
    22f0:	ef ef       	ldi	r30, 0xFF	; 255
    22f2:	4e 07       	cpc	r20, r30
    22f4:	ef e3       	ldi	r30, 0x3F	; 63
    22f6:	5e 07       	cpc	r21, r30
    22f8:	08 f3       	brcs	.-62     	; 0x22bc <_fpadd_parts+0x1e6>
    22fa:	0b c0       	rjmp	.+22     	; 0x2312 <_fpadd_parts+0x23c>
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	db 82       	std	Y+3, r13	; 0x03
    2300:	ca 82       	std	Y+2, r12	; 0x02
    2302:	2e 0d       	add	r18, r14
    2304:	3f 1d       	adc	r19, r15
    2306:	40 1f       	adc	r20, r16
    2308:	51 1f       	adc	r21, r17
    230a:	2c 83       	std	Y+4, r18	; 0x04
    230c:	3d 83       	std	Y+5, r19	; 0x05
    230e:	4e 83       	std	Y+6, r20	; 0x06
    2310:	5f 83       	std	Y+7, r21	; 0x07
    2312:	83 e0       	ldi	r24, 0x03	; 3
    2314:	88 83       	st	Y, r24
    2316:	2c 81       	ldd	r18, Y+4	; 0x04
    2318:	3d 81       	ldd	r19, Y+5	; 0x05
    231a:	4e 81       	ldd	r20, Y+6	; 0x06
    231c:	5f 81       	ldd	r21, Y+7	; 0x07
    231e:	57 ff       	sbrs	r21, 7
    2320:	1d c0       	rjmp	.+58     	; 0x235c <_fpadd_parts+0x286>
    2322:	da 01       	movw	r26, r20
    2324:	c9 01       	movw	r24, r18
    2326:	81 70       	andi	r24, 0x01	; 1
    2328:	90 70       	andi	r25, 0x00	; 0
    232a:	a0 70       	andi	r26, 0x00	; 0
    232c:	b0 70       	andi	r27, 0x00	; 0
    232e:	56 95       	lsr	r21
    2330:	47 95       	ror	r20
    2332:	37 95       	ror	r19
    2334:	27 95       	ror	r18
    2336:	82 2b       	or	r24, r18
    2338:	93 2b       	or	r25, r19
    233a:	a4 2b       	or	r26, r20
    233c:	b5 2b       	or	r27, r21
    233e:	8c 83       	std	Y+4, r24	; 0x04
    2340:	9d 83       	std	Y+5, r25	; 0x05
    2342:	ae 83       	std	Y+6, r26	; 0x06
    2344:	bf 83       	std	Y+7, r27	; 0x07
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	9b 83       	std	Y+3, r25	; 0x03
    234e:	8a 83       	std	Y+2, r24	; 0x02
    2350:	05 c0       	rjmp	.+10     	; 0x235c <_fpadd_parts+0x286>
    2352:	eb e0       	ldi	r30, 0x0B	; 11
    2354:	f1 e0       	ldi	r31, 0x01	; 1
    2356:	03 c0       	rjmp	.+6      	; 0x235e <_fpadd_parts+0x288>
    2358:	fb 01       	movw	r30, r22
    235a:	01 c0       	rjmp	.+2      	; 0x235e <_fpadd_parts+0x288>
    235c:	fe 01       	movw	r30, r28
    235e:	cf 01       	movw	r24, r30
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	ee e0       	ldi	r30, 0x0E	; 14
    2366:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x8>

0000236a <__addsf3>:
    236a:	a0 e2       	ldi	r26, 0x20	; 32
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	eb eb       	ldi	r30, 0xBB	; 187
    2370:	f1 e1       	ldi	r31, 0x11	; 17
    2372:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    2376:	69 83       	std	Y+1, r22	; 0x01
    2378:	7a 83       	std	Y+2, r23	; 0x02
    237a:	8b 83       	std	Y+3, r24	; 0x03
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	2d 83       	std	Y+5, r18	; 0x05
    2380:	3e 83       	std	Y+6, r19	; 0x06
    2382:	4f 83       	std	Y+7, r20	; 0x07
    2384:	58 87       	std	Y+8, r21	; 0x08
    2386:	89 e0       	ldi	r24, 0x09	; 9
    2388:	e8 2e       	mov	r14, r24
    238a:	f1 2c       	mov	r15, r1
    238c:	ec 0e       	add	r14, r28
    238e:	fd 1e       	adc	r15, r29
    2390:	ce 01       	movw	r24, r28
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	b7 01       	movw	r22, r14
    2396:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    239a:	8e 01       	movw	r16, r28
    239c:	0f 5e       	subi	r16, 0xEF	; 239
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	ce 01       	movw	r24, r28
    23a2:	05 96       	adiw	r24, 0x05	; 5
    23a4:	b8 01       	movw	r22, r16
    23a6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    23aa:	c7 01       	movw	r24, r14
    23ac:	b8 01       	movw	r22, r16
    23ae:	ae 01       	movw	r20, r28
    23b0:	47 5e       	subi	r20, 0xE7	; 231
    23b2:	5f 4f       	sbci	r21, 0xFF	; 255
    23b4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_fpadd_parts>
    23b8:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__pack_f>
    23bc:	a0 96       	adiw	r28, 0x20	; 32
    23be:	e6 e0       	ldi	r30, 0x06	; 6
    23c0:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

000023c4 <__subsf3>:
    23c4:	a0 e2       	ldi	r26, 0x20	; 32
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e8 ee       	ldi	r30, 0xE8	; 232
    23ca:	f1 e1       	ldi	r31, 0x11	; 17
    23cc:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    23d0:	69 83       	std	Y+1, r22	; 0x01
    23d2:	7a 83       	std	Y+2, r23	; 0x02
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	2d 83       	std	Y+5, r18	; 0x05
    23da:	3e 83       	std	Y+6, r19	; 0x06
    23dc:	4f 83       	std	Y+7, r20	; 0x07
    23de:	58 87       	std	Y+8, r21	; 0x08
    23e0:	8e 01       	movw	r16, r28
    23e2:	07 5f       	subi	r16, 0xF7	; 247
    23e4:	1f 4f       	sbci	r17, 0xFF	; 255
    23e6:	ce 01       	movw	r24, r28
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	b8 01       	movw	r22, r16
    23ec:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    23f0:	91 e1       	ldi	r25, 0x11	; 17
    23f2:	e9 2e       	mov	r14, r25
    23f4:	f1 2c       	mov	r15, r1
    23f6:	ec 0e       	add	r14, r28
    23f8:	fd 1e       	adc	r15, r29
    23fa:	ce 01       	movw	r24, r28
    23fc:	05 96       	adiw	r24, 0x05	; 5
    23fe:	b7 01       	movw	r22, r14
    2400:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2404:	8a 89       	ldd	r24, Y+18	; 0x12
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	89 27       	eor	r24, r25
    240a:	8a 8b       	std	Y+18, r24	; 0x12
    240c:	c8 01       	movw	r24, r16
    240e:	b7 01       	movw	r22, r14
    2410:	ae 01       	movw	r20, r28
    2412:	47 5e       	subi	r20, 0xE7	; 231
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_fpadd_parts>
    241a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__pack_f>
    241e:	a0 96       	adiw	r28, 0x20	; 32
    2420:	e6 e0       	ldi	r30, 0x06	; 6
    2422:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002426 <__mulsf3>:
    2426:	a0 e2       	ldi	r26, 0x20	; 32
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e9 e1       	ldi	r30, 0x19	; 25
    242c:	f2 e1       	ldi	r31, 0x12	; 18
    242e:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__>
    2432:	69 83       	std	Y+1, r22	; 0x01
    2434:	7a 83       	std	Y+2, r23	; 0x02
    2436:	8b 83       	std	Y+3, r24	; 0x03
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	2d 83       	std	Y+5, r18	; 0x05
    243c:	3e 83       	std	Y+6, r19	; 0x06
    243e:	4f 83       	std	Y+7, r20	; 0x07
    2440:	58 87       	std	Y+8, r21	; 0x08
    2442:	ce 01       	movw	r24, r28
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	be 01       	movw	r22, r28
    2448:	67 5f       	subi	r22, 0xF7	; 247
    244a:	7f 4f       	sbci	r23, 0xFF	; 255
    244c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2450:	ce 01       	movw	r24, r28
    2452:	05 96       	adiw	r24, 0x05	; 5
    2454:	be 01       	movw	r22, r28
    2456:	6f 5e       	subi	r22, 0xEF	; 239
    2458:	7f 4f       	sbci	r23, 0xFF	; 255
    245a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    245e:	99 85       	ldd	r25, Y+9	; 0x09
    2460:	92 30       	cpi	r25, 0x02	; 2
    2462:	78 f0       	brcs	.+30     	; 0x2482 <__mulsf3+0x5c>
    2464:	89 89       	ldd	r24, Y+17	; 0x11
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	c0 f0       	brcs	.+48     	; 0x249a <__mulsf3+0x74>
    246a:	94 30       	cpi	r25, 0x04	; 4
    246c:	19 f4       	brne	.+6      	; 0x2474 <__mulsf3+0x4e>
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	41 f4       	brne	.+16     	; 0x2482 <__mulsf3+0x5c>
    2472:	cb c0       	rjmp	.+406    	; 0x260a <__mulsf3+0x1e4>
    2474:	84 30       	cpi	r24, 0x04	; 4
    2476:	19 f4       	brne	.+6      	; 0x247e <__mulsf3+0x58>
    2478:	92 30       	cpi	r25, 0x02	; 2
    247a:	79 f4       	brne	.+30     	; 0x249a <__mulsf3+0x74>
    247c:	c6 c0       	rjmp	.+396    	; 0x260a <__mulsf3+0x1e4>
    247e:	92 30       	cpi	r25, 0x02	; 2
    2480:	51 f4       	brne	.+20     	; 0x2496 <__mulsf3+0x70>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	2a 85       	ldd	r18, Y+10	; 0x0a
    2486:	9a 89       	ldd	r25, Y+18	; 0x12
    2488:	29 17       	cp	r18, r25
    248a:	09 f4       	brne	.+2      	; 0x248e <__mulsf3+0x68>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	8a 87       	std	Y+10, r24	; 0x0a
    2490:	ce 01       	movw	r24, r28
    2492:	09 96       	adiw	r24, 0x09	; 9
    2494:	bc c0       	rjmp	.+376    	; 0x260e <__mulsf3+0x1e8>
    2496:	82 30       	cpi	r24, 0x02	; 2
    2498:	51 f4       	brne	.+20     	; 0x24ae <__mulsf3+0x88>
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	2a 85       	ldd	r18, Y+10	; 0x0a
    249e:	9a 89       	ldd	r25, Y+18	; 0x12
    24a0:	29 17       	cp	r18, r25
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <__mulsf3+0x80>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	8a 8b       	std	Y+18, r24	; 0x12
    24a8:	ce 01       	movw	r24, r28
    24aa:	41 96       	adiw	r24, 0x11	; 17
    24ac:	b0 c0       	rjmp	.+352    	; 0x260e <__mulsf3+0x1e8>
    24ae:	6d 84       	ldd	r6, Y+13	; 0x0d
    24b0:	7e 84       	ldd	r7, Y+14	; 0x0e
    24b2:	8f 84       	ldd	r8, Y+15	; 0x0f
    24b4:	98 88       	ldd	r9, Y+16	; 0x10
    24b6:	ed 88       	ldd	r14, Y+21	; 0x15
    24b8:	fe 88       	ldd	r15, Y+22	; 0x16
    24ba:	0f 89       	ldd	r16, Y+23	; 0x17
    24bc:	18 8d       	ldd	r17, Y+24	; 0x18
    24be:	e0 e2       	ldi	r30, 0x20	; 32
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	dc 01       	movw	r26, r24
    24c8:	aa 24       	eor	r10, r10
    24ca:	bb 24       	eor	r11, r11
    24cc:	65 01       	movw	r12, r10
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	a9 01       	movw	r20, r18
    24d4:	b3 01       	movw	r22, r6
    24d6:	61 70       	andi	r22, 0x01	; 1
    24d8:	70 70       	andi	r23, 0x00	; 0
    24da:	61 15       	cp	r22, r1
    24dc:	71 05       	cpc	r23, r1
    24de:	d1 f0       	breq	.+52     	; 0x2514 <__mulsf3+0xee>
    24e0:	2e 0d       	add	r18, r14
    24e2:	3f 1d       	adc	r19, r15
    24e4:	40 1f       	adc	r20, r16
    24e6:	51 1f       	adc	r21, r17
    24e8:	15 01       	movw	r2, r10
    24ea:	26 01       	movw	r4, r12
    24ec:	28 0e       	add	r2, r24
    24ee:	39 1e       	adc	r3, r25
    24f0:	4a 1e       	adc	r4, r26
    24f2:	5b 1e       	adc	r5, r27
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e0       	ldi	r26, 0x00	; 0
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	2e 15       	cp	r18, r14
    24fe:	3f 05       	cpc	r19, r15
    2500:	40 07       	cpc	r20, r16
    2502:	51 07       	cpc	r21, r17
    2504:	18 f0       	brcs	.+6      	; 0x250c <__mulsf3+0xe6>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	dc 01       	movw	r26, r24
    250c:	82 0d       	add	r24, r2
    250e:	93 1d       	adc	r25, r3
    2510:	a4 1d       	adc	r26, r4
    2512:	b5 1d       	adc	r27, r5
    2514:	aa 0c       	add	r10, r10
    2516:	bb 1c       	adc	r11, r11
    2518:	cc 1c       	adc	r12, r12
    251a:	dd 1c       	adc	r13, r13
    251c:	17 ff       	sbrs	r17, 7
    251e:	09 c0       	rjmp	.+18     	; 0x2532 <__mulsf3+0x10c>
    2520:	61 e0       	ldi	r22, 0x01	; 1
    2522:	26 2e       	mov	r2, r22
    2524:	31 2c       	mov	r3, r1
    2526:	41 2c       	mov	r4, r1
    2528:	51 2c       	mov	r5, r1
    252a:	a2 28       	or	r10, r2
    252c:	b3 28       	or	r11, r3
    252e:	c4 28       	or	r12, r4
    2530:	d5 28       	or	r13, r5
    2532:	31 97       	sbiw	r30, 0x01	; 1
    2534:	49 f0       	breq	.+18     	; 0x2548 <__mulsf3+0x122>
    2536:	ee 0c       	add	r14, r14
    2538:	ff 1c       	adc	r15, r15
    253a:	00 1f       	adc	r16, r16
    253c:	11 1f       	adc	r17, r17
    253e:	96 94       	lsr	r9
    2540:	87 94       	ror	r8
    2542:	77 94       	ror	r7
    2544:	67 94       	ror	r6
    2546:	c6 cf       	rjmp	.-116    	; 0x24d4 <__mulsf3+0xae>
    2548:	6b 89       	ldd	r22, Y+19	; 0x13
    254a:	7c 89       	ldd	r23, Y+20	; 0x14
    254c:	eb 85       	ldd	r30, Y+11	; 0x0b
    254e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2550:	6e 0f       	add	r22, r30
    2552:	7f 1f       	adc	r23, r31
    2554:	6e 5f       	subi	r22, 0xFE	; 254
    2556:	7f 4f       	sbci	r23, 0xFF	; 255
    2558:	7c 8f       	std	Y+28, r23	; 0x1c
    255a:	6b 8f       	std	Y+27, r22	; 0x1b
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2560:	7a 89       	ldd	r23, Y+18	; 0x12
    2562:	e7 17       	cp	r30, r23
    2564:	09 f4       	brne	.+2      	; 0x2568 <__mulsf3+0x142>
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	6a 8f       	std	Y+26, r22	; 0x1a
    256a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    256c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    256e:	10 c0       	rjmp	.+32     	; 0x2590 <__mulsf3+0x16a>
    2570:	fc 01       	movw	r30, r24
    2572:	e1 70       	andi	r30, 0x01	; 1
    2574:	f0 70       	andi	r31, 0x00	; 0
    2576:	30 97       	sbiw	r30, 0x00	; 0
    2578:	29 f0       	breq	.+10     	; 0x2584 <__mulsf3+0x15e>
    257a:	56 95       	lsr	r21
    257c:	47 95       	ror	r20
    257e:	37 95       	ror	r19
    2580:	27 95       	ror	r18
    2582:	50 68       	ori	r21, 0x80	; 128
    2584:	b6 95       	lsr	r27
    2586:	a7 95       	ror	r26
    2588:	97 95       	ror	r25
    258a:	87 95       	ror	r24
    258c:	6f 5f       	subi	r22, 0xFF	; 255
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	b7 fd       	sbrc	r27, 7
    2592:	ee cf       	rjmp	.-36     	; 0x2570 <__mulsf3+0x14a>
    2594:	0c c0       	rjmp	.+24     	; 0x25ae <__mulsf3+0x188>
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	57 fd       	sbrc	r21, 7
    25a0:	81 60       	ori	r24, 0x01	; 1
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	44 1f       	adc	r20, r20
    25a8:	55 1f       	adc	r21, r21
    25aa:	61 50       	subi	r22, 0x01	; 1
    25ac:	70 40       	sbci	r23, 0x00	; 0
    25ae:	80 30       	cpi	r24, 0x00	; 0
    25b0:	e0 e0       	ldi	r30, 0x00	; 0
    25b2:	9e 07       	cpc	r25, r30
    25b4:	e0 e0       	ldi	r30, 0x00	; 0
    25b6:	ae 07       	cpc	r26, r30
    25b8:	e0 e4       	ldi	r30, 0x40	; 64
    25ba:	be 07       	cpc	r27, r30
    25bc:	60 f3       	brcs	.-40     	; 0x2596 <__mulsf3+0x170>
    25be:	6b 8f       	std	Y+27, r22	; 0x1b
    25c0:	7c 8f       	std	Y+28, r23	; 0x1c
    25c2:	6f e7       	ldi	r22, 0x7F	; 127
    25c4:	e6 2e       	mov	r14, r22
    25c6:	f1 2c       	mov	r15, r1
    25c8:	01 2d       	mov	r16, r1
    25ca:	11 2d       	mov	r17, r1
    25cc:	e8 22       	and	r14, r24
    25ce:	f9 22       	and	r15, r25
    25d0:	0a 23       	and	r16, r26
    25d2:	1b 23       	and	r17, r27
    25d4:	60 e4       	ldi	r22, 0x40	; 64
    25d6:	e6 16       	cp	r14, r22
    25d8:	f1 04       	cpc	r15, r1
    25da:	01 05       	cpc	r16, r1
    25dc:	11 05       	cpc	r17, r1
    25de:	61 f4       	brne	.+24     	; 0x25f8 <__mulsf3+0x1d2>
    25e0:	87 fd       	sbrc	r24, 7
    25e2:	0a c0       	rjmp	.+20     	; 0x25f8 <__mulsf3+0x1d2>
    25e4:	21 15       	cp	r18, r1
    25e6:	31 05       	cpc	r19, r1
    25e8:	41 05       	cpc	r20, r1
    25ea:	51 05       	cpc	r21, r1
    25ec:	29 f0       	breq	.+10     	; 0x25f8 <__mulsf3+0x1d2>
    25ee:	80 5c       	subi	r24, 0xC0	; 192
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	af 4f       	sbci	r26, 0xFF	; 255
    25f4:	bf 4f       	sbci	r27, 0xFF	; 255
    25f6:	80 78       	andi	r24, 0x80	; 128
    25f8:	8d 8f       	std	Y+29, r24	; 0x1d
    25fa:	9e 8f       	std	Y+30, r25	; 0x1e
    25fc:	af 8f       	std	Y+31, r26	; 0x1f
    25fe:	b8 a3       	std	Y+32, r27	; 0x20
    2600:	83 e0       	ldi	r24, 0x03	; 3
    2602:	89 8f       	std	Y+25, r24	; 0x19
    2604:	ce 01       	movw	r24, r28
    2606:	49 96       	adiw	r24, 0x19	; 25
    2608:	02 c0       	rjmp	.+4      	; 0x260e <__mulsf3+0x1e8>
    260a:	8b e0       	ldi	r24, 0x0B	; 11
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__pack_f>
    2612:	a0 96       	adiw	r28, 0x20	; 32
    2614:	e2 e1       	ldi	r30, 0x12	; 18
    2616:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__>

0000261a <__divsf3>:
    261a:	a8 e1       	ldi	r26, 0x18	; 24
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e3 e1       	ldi	r30, 0x13	; 19
    2620:	f3 e1       	ldi	r31, 0x13	; 19
    2622:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x10>
    2626:	69 83       	std	Y+1, r22	; 0x01
    2628:	7a 83       	std	Y+2, r23	; 0x02
    262a:	8b 83       	std	Y+3, r24	; 0x03
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	2d 83       	std	Y+5, r18	; 0x05
    2630:	3e 83       	std	Y+6, r19	; 0x06
    2632:	4f 83       	std	Y+7, r20	; 0x07
    2634:	58 87       	std	Y+8, r21	; 0x08
    2636:	8e 01       	movw	r16, r28
    2638:	07 5f       	subi	r16, 0xF7	; 247
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	ce 01       	movw	r24, r28
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	b8 01       	movw	r22, r16
    2642:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2646:	81 e1       	ldi	r24, 0x11	; 17
    2648:	e8 2e       	mov	r14, r24
    264a:	f1 2c       	mov	r15, r1
    264c:	ec 0e       	add	r14, r28
    264e:	fd 1e       	adc	r15, r29
    2650:	ce 01       	movw	r24, r28
    2652:	05 96       	adiw	r24, 0x05	; 5
    2654:	b7 01       	movw	r22, r14
    2656:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    265a:	99 85       	ldd	r25, Y+9	; 0x09
    265c:	92 30       	cpi	r25, 0x02	; 2
    265e:	08 f4       	brcc	.+2      	; 0x2662 <__divsf3+0x48>
    2660:	83 c0       	rjmp	.+262    	; 0x2768 <__divsf3+0x14e>
    2662:	89 89       	ldd	r24, Y+17	; 0x11
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	08 f4       	brcc	.+2      	; 0x266a <__divsf3+0x50>
    2668:	7b c0       	rjmp	.+246    	; 0x2760 <__divsf3+0x146>
    266a:	2a 85       	ldd	r18, Y+10	; 0x0a
    266c:	3a 89       	ldd	r19, Y+18	; 0x12
    266e:	23 27       	eor	r18, r19
    2670:	2a 87       	std	Y+10, r18	; 0x0a
    2672:	94 30       	cpi	r25, 0x04	; 4
    2674:	11 f0       	breq	.+4      	; 0x267a <__divsf3+0x60>
    2676:	92 30       	cpi	r25, 0x02	; 2
    2678:	21 f4       	brne	.+8      	; 0x2682 <__divsf3+0x68>
    267a:	98 17       	cp	r25, r24
    267c:	09 f0       	breq	.+2      	; 0x2680 <__divsf3+0x66>
    267e:	6c c0       	rjmp	.+216    	; 0x2758 <__divsf3+0x13e>
    2680:	71 c0       	rjmp	.+226    	; 0x2764 <__divsf3+0x14a>
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	39 f4       	brne	.+14     	; 0x2694 <__divsf3+0x7a>
    2686:	1d 86       	std	Y+13, r1	; 0x0d
    2688:	1e 86       	std	Y+14, r1	; 0x0e
    268a:	1f 86       	std	Y+15, r1	; 0x0f
    268c:	18 8a       	std	Y+16, r1	; 0x10
    268e:	1c 86       	std	Y+12, r1	; 0x0c
    2690:	1b 86       	std	Y+11, r1	; 0x0b
    2692:	6a c0       	rjmp	.+212    	; 0x2768 <__divsf3+0x14e>
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	19 f4       	brne	.+6      	; 0x269e <__divsf3+0x84>
    2698:	84 e0       	ldi	r24, 0x04	; 4
    269a:	89 87       	std	Y+9, r24	; 0x09
    269c:	65 c0       	rjmp	.+202    	; 0x2768 <__divsf3+0x14e>
    269e:	8b 85       	ldd	r24, Y+11	; 0x0b
    26a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a2:	2b 89       	ldd	r18, Y+19	; 0x13
    26a4:	3c 89       	ldd	r19, Y+20	; 0x14
    26a6:	82 1b       	sub	r24, r18
    26a8:	93 0b       	sbc	r25, r19
    26aa:	9c 87       	std	Y+12, r25	; 0x0c
    26ac:	8b 87       	std	Y+11, r24	; 0x0b
    26ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    26b0:	3e 85       	ldd	r19, Y+14	; 0x0e
    26b2:	4f 85       	ldd	r20, Y+15	; 0x0f
    26b4:	58 89       	ldd	r21, Y+16	; 0x10
    26b6:	ed 88       	ldd	r14, Y+21	; 0x15
    26b8:	fe 88       	ldd	r15, Y+22	; 0x16
    26ba:	0f 89       	ldd	r16, Y+23	; 0x17
    26bc:	18 8d       	ldd	r17, Y+24	; 0x18
    26be:	2e 15       	cp	r18, r14
    26c0:	3f 05       	cpc	r19, r15
    26c2:	40 07       	cpc	r20, r16
    26c4:	51 07       	cpc	r21, r17
    26c6:	38 f4       	brcc	.+14     	; 0x26d6 <__divsf3+0xbc>
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	44 1f       	adc	r20, r20
    26ce:	55 1f       	adc	r21, r21
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9c 87       	std	Y+12, r25	; 0x0c
    26d4:	8b 87       	std	Y+11, r24	; 0x0b
    26d6:	6f e1       	ldi	r22, 0x1F	; 31
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	a1 2c       	mov	r10, r1
    26dc:	b1 2c       	mov	r11, r1
    26de:	c1 2c       	mov	r12, r1
    26e0:	a0 e4       	ldi	r26, 0x40	; 64
    26e2:	da 2e       	mov	r13, r26
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	dc 01       	movw	r26, r24
    26ea:	2e 15       	cp	r18, r14
    26ec:	3f 05       	cpc	r19, r15
    26ee:	40 07       	cpc	r20, r16
    26f0:	51 07       	cpc	r21, r17
    26f2:	40 f0       	brcs	.+16     	; 0x2704 <__divsf3+0xea>
    26f4:	8a 29       	or	r24, r10
    26f6:	9b 29       	or	r25, r11
    26f8:	ac 29       	or	r26, r12
    26fa:	bd 29       	or	r27, r13
    26fc:	2e 19       	sub	r18, r14
    26fe:	3f 09       	sbc	r19, r15
    2700:	40 0b       	sbc	r20, r16
    2702:	51 0b       	sbc	r21, r17
    2704:	d6 94       	lsr	r13
    2706:	c7 94       	ror	r12
    2708:	b7 94       	ror	r11
    270a:	a7 94       	ror	r10
    270c:	22 0f       	add	r18, r18
    270e:	33 1f       	adc	r19, r19
    2710:	44 1f       	adc	r20, r20
    2712:	55 1f       	adc	r21, r21
    2714:	61 50       	subi	r22, 0x01	; 1
    2716:	70 40       	sbci	r23, 0x00	; 0
    2718:	41 f7       	brne	.-48     	; 0x26ea <__divsf3+0xd0>
    271a:	6f e7       	ldi	r22, 0x7F	; 127
    271c:	e6 2e       	mov	r14, r22
    271e:	f1 2c       	mov	r15, r1
    2720:	01 2d       	mov	r16, r1
    2722:	11 2d       	mov	r17, r1
    2724:	e8 22       	and	r14, r24
    2726:	f9 22       	and	r15, r25
    2728:	0a 23       	and	r16, r26
    272a:	1b 23       	and	r17, r27
    272c:	60 e4       	ldi	r22, 0x40	; 64
    272e:	e6 16       	cp	r14, r22
    2730:	f1 04       	cpc	r15, r1
    2732:	01 05       	cpc	r16, r1
    2734:	11 05       	cpc	r17, r1
    2736:	61 f4       	brne	.+24     	; 0x2750 <__divsf3+0x136>
    2738:	87 fd       	sbrc	r24, 7
    273a:	0a c0       	rjmp	.+20     	; 0x2750 <__divsf3+0x136>
    273c:	21 15       	cp	r18, r1
    273e:	31 05       	cpc	r19, r1
    2740:	41 05       	cpc	r20, r1
    2742:	51 05       	cpc	r21, r1
    2744:	29 f0       	breq	.+10     	; 0x2750 <__divsf3+0x136>
    2746:	80 5c       	subi	r24, 0xC0	; 192
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	af 4f       	sbci	r26, 0xFF	; 255
    274c:	bf 4f       	sbci	r27, 0xFF	; 255
    274e:	80 78       	andi	r24, 0x80	; 128
    2750:	8d 87       	std	Y+13, r24	; 0x0d
    2752:	9e 87       	std	Y+14, r25	; 0x0e
    2754:	af 87       	std	Y+15, r26	; 0x0f
    2756:	b8 8b       	std	Y+16, r27	; 0x10
    2758:	8e 01       	movw	r16, r28
    275a:	07 5f       	subi	r16, 0xF7	; 247
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <__divsf3+0x14e>
    2760:	87 01       	movw	r16, r14
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <__divsf3+0x14e>
    2764:	0b e0       	ldi	r16, 0x0B	; 11
    2766:	11 e0       	ldi	r17, 0x01	; 1
    2768:	c8 01       	movw	r24, r16
    276a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__pack_f>
    276e:	68 96       	adiw	r28, 0x18	; 24
    2770:	ea e0       	ldi	r30, 0x0A	; 10
    2772:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x10>

00002776 <__gtsf2>:
    2776:	a8 e1       	ldi	r26, 0x18	; 24
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e1 ec       	ldi	r30, 0xC1	; 193
    277c:	f3 e1       	ldi	r31, 0x13	; 19
    277e:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    2782:	69 83       	std	Y+1, r22	; 0x01
    2784:	7a 83       	std	Y+2, r23	; 0x02
    2786:	8b 83       	std	Y+3, r24	; 0x03
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	2d 83       	std	Y+5, r18	; 0x05
    278c:	3e 83       	std	Y+6, r19	; 0x06
    278e:	4f 83       	std	Y+7, r20	; 0x07
    2790:	58 87       	std	Y+8, r21	; 0x08
    2792:	8e 01       	movw	r16, r28
    2794:	07 5f       	subi	r16, 0xF7	; 247
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	b8 01       	movw	r22, r16
    279e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    27a2:	81 e1       	ldi	r24, 0x11	; 17
    27a4:	e8 2e       	mov	r14, r24
    27a6:	f1 2c       	mov	r15, r1
    27a8:	ec 0e       	add	r14, r28
    27aa:	fd 1e       	adc	r15, r29
    27ac:	ce 01       	movw	r24, r28
    27ae:	05 96       	adiw	r24, 0x05	; 5
    27b0:	b7 01       	movw	r22, r14
    27b2:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	82 30       	cpi	r24, 0x02	; 2
    27ba:	40 f0       	brcs	.+16     	; 0x27cc <__gtsf2+0x56>
    27bc:	89 89       	ldd	r24, Y+17	; 0x11
    27be:	82 30       	cpi	r24, 0x02	; 2
    27c0:	28 f0       	brcs	.+10     	; 0x27cc <__gtsf2+0x56>
    27c2:	c8 01       	movw	r24, r16
    27c4:	b7 01       	movw	r22, r14
    27c6:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fpcmp_parts_f>
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <__gtsf2+0x58>
    27cc:	8f ef       	ldi	r24, 0xFF	; 255
    27ce:	68 96       	adiw	r28, 0x18	; 24
    27d0:	e6 e0       	ldi	r30, 0x06	; 6
    27d2:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

000027d6 <__gesf2>:
    27d6:	a8 e1       	ldi	r26, 0x18	; 24
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e1 ef       	ldi	r30, 0xF1	; 241
    27dc:	f3 e1       	ldi	r31, 0x13	; 19
    27de:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    27e2:	69 83       	std	Y+1, r22	; 0x01
    27e4:	7a 83       	std	Y+2, r23	; 0x02
    27e6:	8b 83       	std	Y+3, r24	; 0x03
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	2d 83       	std	Y+5, r18	; 0x05
    27ec:	3e 83       	std	Y+6, r19	; 0x06
    27ee:	4f 83       	std	Y+7, r20	; 0x07
    27f0:	58 87       	std	Y+8, r21	; 0x08
    27f2:	8e 01       	movw	r16, r28
    27f4:	07 5f       	subi	r16, 0xF7	; 247
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	ce 01       	movw	r24, r28
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	b8 01       	movw	r22, r16
    27fe:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2802:	81 e1       	ldi	r24, 0x11	; 17
    2804:	e8 2e       	mov	r14, r24
    2806:	f1 2c       	mov	r15, r1
    2808:	ec 0e       	add	r14, r28
    280a:	fd 1e       	adc	r15, r29
    280c:	ce 01       	movw	r24, r28
    280e:	05 96       	adiw	r24, 0x05	; 5
    2810:	b7 01       	movw	r22, r14
    2812:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	82 30       	cpi	r24, 0x02	; 2
    281a:	40 f0       	brcs	.+16     	; 0x282c <__gesf2+0x56>
    281c:	89 89       	ldd	r24, Y+17	; 0x11
    281e:	82 30       	cpi	r24, 0x02	; 2
    2820:	28 f0       	brcs	.+10     	; 0x282c <__gesf2+0x56>
    2822:	c8 01       	movw	r24, r16
    2824:	b7 01       	movw	r22, r14
    2826:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fpcmp_parts_f>
    282a:	01 c0       	rjmp	.+2      	; 0x282e <__gesf2+0x58>
    282c:	8f ef       	ldi	r24, 0xFF	; 255
    282e:	68 96       	adiw	r28, 0x18	; 24
    2830:	e6 e0       	ldi	r30, 0x06	; 6
    2832:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002836 <__ltsf2>:
    2836:	a8 e1       	ldi	r26, 0x18	; 24
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e1 e2       	ldi	r30, 0x21	; 33
    283c:	f4 e1       	ldi	r31, 0x14	; 20
    283e:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    2842:	69 83       	std	Y+1, r22	; 0x01
    2844:	7a 83       	std	Y+2, r23	; 0x02
    2846:	8b 83       	std	Y+3, r24	; 0x03
    2848:	9c 83       	std	Y+4, r25	; 0x04
    284a:	2d 83       	std	Y+5, r18	; 0x05
    284c:	3e 83       	std	Y+6, r19	; 0x06
    284e:	4f 83       	std	Y+7, r20	; 0x07
    2850:	58 87       	std	Y+8, r21	; 0x08
    2852:	8e 01       	movw	r16, r28
    2854:	07 5f       	subi	r16, 0xF7	; 247
    2856:	1f 4f       	sbci	r17, 0xFF	; 255
    2858:	ce 01       	movw	r24, r28
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	b8 01       	movw	r22, r16
    285e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2862:	81 e1       	ldi	r24, 0x11	; 17
    2864:	e8 2e       	mov	r14, r24
    2866:	f1 2c       	mov	r15, r1
    2868:	ec 0e       	add	r14, r28
    286a:	fd 1e       	adc	r15, r29
    286c:	ce 01       	movw	r24, r28
    286e:	05 96       	adiw	r24, 0x05	; 5
    2870:	b7 01       	movw	r22, r14
    2872:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	40 f0       	brcs	.+16     	; 0x288c <__ltsf2+0x56>
    287c:	89 89       	ldd	r24, Y+17	; 0x11
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	28 f0       	brcs	.+10     	; 0x288c <__ltsf2+0x56>
    2882:	c8 01       	movw	r24, r16
    2884:	b7 01       	movw	r22, r14
    2886:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fpcmp_parts_f>
    288a:	01 c0       	rjmp	.+2      	; 0x288e <__ltsf2+0x58>
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	68 96       	adiw	r28, 0x18	; 24
    2890:	e6 e0       	ldi	r30, 0x06	; 6
    2892:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002896 <__floatsisf>:
    2896:	a8 e0       	ldi	r26, 0x08	; 8
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e1 e5       	ldi	r30, 0x51	; 81
    289c:	f4 e1       	ldi	r31, 0x14	; 20
    289e:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    28a2:	7b 01       	movw	r14, r22
    28a4:	8c 01       	movw	r16, r24
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	d8 01       	movw	r26, r16
    28ac:	c7 01       	movw	r24, r14
    28ae:	88 27       	eor	r24, r24
    28b0:	b7 fd       	sbrc	r27, 7
    28b2:	83 95       	inc	r24
    28b4:	99 27       	eor	r25, r25
    28b6:	aa 27       	eor	r26, r26
    28b8:	bb 27       	eor	r27, r27
    28ba:	28 2f       	mov	r18, r24
    28bc:	8a 83       	std	Y+2, r24	; 0x02
    28be:	e1 14       	cp	r14, r1
    28c0:	f1 04       	cpc	r15, r1
    28c2:	01 05       	cpc	r16, r1
    28c4:	11 05       	cpc	r17, r1
    28c6:	19 f4       	brne	.+6      	; 0x28ce <__floatsisf+0x38>
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	37 c0       	rjmp	.+110    	; 0x293c <__floatsisf+0xa6>
    28ce:	8e e1       	ldi	r24, 0x1E	; 30
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9c 83       	std	Y+4, r25	; 0x04
    28d4:	8b 83       	std	Y+3, r24	; 0x03
    28d6:	22 23       	and	r18, r18
    28d8:	89 f0       	breq	.+34     	; 0x28fc <__floatsisf+0x66>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	e8 16       	cp	r14, r24
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	f8 06       	cpc	r15, r24
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	08 07       	cpc	r16, r24
    28e6:	80 e8       	ldi	r24, 0x80	; 128
    28e8:	18 07       	cpc	r17, r24
    28ea:	69 f1       	breq	.+90     	; 0x2946 <__floatsisf+0xb0>
    28ec:	10 95       	com	r17
    28ee:	00 95       	com	r16
    28f0:	f0 94       	com	r15
    28f2:	e0 94       	com	r14
    28f4:	e1 1c       	adc	r14, r1
    28f6:	f1 1c       	adc	r15, r1
    28f8:	01 1d       	adc	r16, r1
    28fa:	11 1d       	adc	r17, r1
    28fc:	ed 82       	std	Y+5, r14	; 0x05
    28fe:	fe 82       	std	Y+6, r15	; 0x06
    2900:	0f 83       	std	Y+7, r16	; 0x07
    2902:	18 87       	std	Y+8, r17	; 0x08
    2904:	c8 01       	movw	r24, r16
    2906:	b7 01       	movw	r22, r14
    2908:	0e 94 75 15 	call	0x2aea	; 0x2aea <__clzsi2>
    290c:	9c 01       	movw	r18, r24
    290e:	21 50       	subi	r18, 0x01	; 1
    2910:	30 40       	sbci	r19, 0x00	; 0
    2912:	12 16       	cp	r1, r18
    2914:	13 06       	cpc	r1, r19
    2916:	94 f4       	brge	.+36     	; 0x293c <__floatsisf+0xa6>
    2918:	02 2e       	mov	r0, r18
    291a:	04 c0       	rjmp	.+8      	; 0x2924 <__floatsisf+0x8e>
    291c:	ee 0c       	add	r14, r14
    291e:	ff 1c       	adc	r15, r15
    2920:	00 1f       	adc	r16, r16
    2922:	11 1f       	adc	r17, r17
    2924:	0a 94       	dec	r0
    2926:	d2 f7       	brpl	.-12     	; 0x291c <__floatsisf+0x86>
    2928:	ed 82       	std	Y+5, r14	; 0x05
    292a:	fe 82       	std	Y+6, r15	; 0x06
    292c:	0f 83       	std	Y+7, r16	; 0x07
    292e:	18 87       	std	Y+8, r17	; 0x08
    2930:	8e e1       	ldi	r24, 0x1E	; 30
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	82 1b       	sub	r24, r18
    2936:	93 0b       	sbc	r25, r19
    2938:	9c 83       	std	Y+4, r25	; 0x04
    293a:	8b 83       	std	Y+3, r24	; 0x03
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__pack_f>
    2944:	04 c0       	rjmp	.+8      	; 0x294e <__floatsisf+0xb8>
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	9f ec       	ldi	r25, 0xCF	; 207
    294e:	28 96       	adiw	r28, 0x08	; 8
    2950:	e6 e0       	ldi	r30, 0x06	; 6
    2952:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002956 <__fixsfsi>:
    2956:	ac e0       	ldi	r26, 0x0C	; 12
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e1 eb       	ldi	r30, 0xB1	; 177
    295c:	f4 e1       	ldi	r31, 0x14	; 20
    295e:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x20>
    2962:	69 83       	std	Y+1, r22	; 0x01
    2964:	7a 83       	std	Y+2, r23	; 0x02
    2966:	8b 83       	std	Y+3, r24	; 0x03
    2968:	9c 83       	std	Y+4, r25	; 0x04
    296a:	ce 01       	movw	r24, r28
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	be 01       	movw	r22, r28
    2970:	6b 5f       	subi	r22, 0xFB	; 251
    2972:	7f 4f       	sbci	r23, 0xFF	; 255
    2974:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__unpack_f>
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	82 30       	cpi	r24, 0x02	; 2
    297c:	81 f1       	breq	.+96     	; 0x29de <__fixsfsi+0x88>
    297e:	82 30       	cpi	r24, 0x02	; 2
    2980:	70 f1       	brcs	.+92     	; 0x29de <__fixsfsi+0x88>
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	21 f4       	brne	.+8      	; 0x298e <__fixsfsi+0x38>
    2986:	8e 81       	ldd	r24, Y+6	; 0x06
    2988:	88 23       	and	r24, r24
    298a:	69 f1       	breq	.+90     	; 0x29e6 <__fixsfsi+0x90>
    298c:	0a c0       	rjmp	.+20     	; 0x29a2 <__fixsfsi+0x4c>
    298e:	2f 81       	ldd	r18, Y+7	; 0x07
    2990:	38 85       	ldd	r19, Y+8	; 0x08
    2992:	37 fd       	sbrc	r19, 7
    2994:	24 c0       	rjmp	.+72     	; 0x29de <__fixsfsi+0x88>
    2996:	6e 81       	ldd	r22, Y+6	; 0x06
    2998:	2f 31       	cpi	r18, 0x1F	; 31
    299a:	31 05       	cpc	r19, r1
    299c:	3c f0       	brlt	.+14     	; 0x29ac <__fixsfsi+0x56>
    299e:	66 23       	and	r22, r22
    29a0:	11 f1       	breq	.+68     	; 0x29e6 <__fixsfsi+0x90>
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	50 e8       	ldi	r21, 0x80	; 128
    29aa:	21 c0       	rjmp	.+66     	; 0x29ee <__fixsfsi+0x98>
    29ac:	8e e1       	ldi	r24, 0x1E	; 30
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	82 1b       	sub	r24, r18
    29b2:	93 0b       	sbc	r25, r19
    29b4:	29 85       	ldd	r18, Y+9	; 0x09
    29b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    29b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    29ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    29bc:	04 c0       	rjmp	.+8      	; 0x29c6 <__fixsfsi+0x70>
    29be:	56 95       	lsr	r21
    29c0:	47 95       	ror	r20
    29c2:	37 95       	ror	r19
    29c4:	27 95       	ror	r18
    29c6:	8a 95       	dec	r24
    29c8:	d2 f7       	brpl	.-12     	; 0x29be <__fixsfsi+0x68>
    29ca:	66 23       	and	r22, r22
    29cc:	81 f0       	breq	.+32     	; 0x29ee <__fixsfsi+0x98>
    29ce:	50 95       	com	r21
    29d0:	40 95       	com	r20
    29d2:	30 95       	com	r19
    29d4:	21 95       	neg	r18
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	4f 4f       	sbci	r20, 0xFF	; 255
    29da:	5f 4f       	sbci	r21, 0xFF	; 255
    29dc:	08 c0       	rjmp	.+16     	; 0x29ee <__fixsfsi+0x98>
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	a9 01       	movw	r20, r18
    29e4:	04 c0       	rjmp	.+8      	; 0x29ee <__fixsfsi+0x98>
    29e6:	2f ef       	ldi	r18, 0xFF	; 255
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f ef       	ldi	r20, 0xFF	; 255
    29ec:	5f e7       	ldi	r21, 0x7F	; 127
    29ee:	b9 01       	movw	r22, r18
    29f0:	ca 01       	movw	r24, r20
    29f2:	2c 96       	adiw	r28, 0x0c	; 12
    29f4:	e2 e0       	ldi	r30, 0x02	; 2
    29f6:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x20>

000029fa <__floatunsisf>:
    29fa:	a8 e0       	ldi	r26, 0x08	; 8
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e3 e0       	ldi	r30, 0x03	; 3
    2a00:	f5 e1       	ldi	r31, 0x15	; 21
    2a02:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__prologue_saves__+0x14>
    2a06:	7b 01       	movw	r14, r22
    2a08:	8c 01       	movw	r16, r24
    2a0a:	1a 82       	std	Y+2, r1	; 0x02
    2a0c:	61 15       	cp	r22, r1
    2a0e:	71 05       	cpc	r23, r1
    2a10:	81 05       	cpc	r24, r1
    2a12:	91 05       	cpc	r25, r1
    2a14:	19 f4       	brne	.+6      	; 0x2a1c <__floatunsisf+0x22>
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	5f c0       	rjmp	.+190    	; 0x2ada <__floatunsisf+0xe0>
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	8e e1       	ldi	r24, 0x1E	; 30
    2a22:	c8 2e       	mov	r12, r24
    2a24:	d1 2c       	mov	r13, r1
    2a26:	dc 82       	std	Y+4, r13	; 0x04
    2a28:	cb 82       	std	Y+3, r12	; 0x03
    2a2a:	ed 82       	std	Y+5, r14	; 0x05
    2a2c:	fe 82       	std	Y+6, r15	; 0x06
    2a2e:	0f 83       	std	Y+7, r16	; 0x07
    2a30:	18 87       	std	Y+8, r17	; 0x08
    2a32:	c8 01       	movw	r24, r16
    2a34:	b7 01       	movw	r22, r14
    2a36:	0e 94 75 15 	call	0x2aea	; 0x2aea <__clzsi2>
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	31 97       	sbiw	r30, 0x01	; 1
    2a3e:	f7 ff       	sbrs	r31, 7
    2a40:	3a c0       	rjmp	.+116    	; 0x2ab6 <__floatunsisf+0xbc>
    2a42:	aa 27       	eor	r26, r26
    2a44:	bb 27       	eor	r27, r27
    2a46:	ae 1b       	sub	r26, r30
    2a48:	bf 0b       	sbc	r27, r31
    2a4a:	21 e0       	ldi	r18, 0x01	; 1
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	0a 2e       	mov	r0, r26
    2a54:	04 c0       	rjmp	.+8      	; 0x2a5e <__floatunsisf+0x64>
    2a56:	22 0f       	add	r18, r18
    2a58:	33 1f       	adc	r19, r19
    2a5a:	44 1f       	adc	r20, r20
    2a5c:	55 1f       	adc	r21, r21
    2a5e:	0a 94       	dec	r0
    2a60:	d2 f7       	brpl	.-12     	; 0x2a56 <__floatunsisf+0x5c>
    2a62:	21 50       	subi	r18, 0x01	; 1
    2a64:	30 40       	sbci	r19, 0x00	; 0
    2a66:	40 40       	sbci	r20, 0x00	; 0
    2a68:	50 40       	sbci	r21, 0x00	; 0
    2a6a:	2e 21       	and	r18, r14
    2a6c:	3f 21       	and	r19, r15
    2a6e:	40 23       	and	r20, r16
    2a70:	51 23       	and	r21, r17
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	21 15       	cp	r18, r1
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	41 05       	cpc	r20, r1
    2a80:	51 05       	cpc	r21, r1
    2a82:	19 f4       	brne	.+6      	; 0x2a8a <__floatunsisf+0x90>
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	cb 01       	movw	r24, r22
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <__floatunsisf+0x9a>
    2a8c:	16 95       	lsr	r17
    2a8e:	07 95       	ror	r16
    2a90:	f7 94       	ror	r15
    2a92:	e7 94       	ror	r14
    2a94:	aa 95       	dec	r26
    2a96:	d2 f7       	brpl	.-12     	; 0x2a8c <__floatunsisf+0x92>
    2a98:	e6 2a       	or	r14, r22
    2a9a:	f7 2a       	or	r15, r23
    2a9c:	08 2b       	or	r16, r24
    2a9e:	19 2b       	or	r17, r25
    2aa0:	ed 82       	std	Y+5, r14	; 0x05
    2aa2:	fe 82       	std	Y+6, r15	; 0x06
    2aa4:	0f 83       	std	Y+7, r16	; 0x07
    2aa6:	18 87       	std	Y+8, r17	; 0x08
    2aa8:	8e e1       	ldi	r24, 0x1E	; 30
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	8e 1b       	sub	r24, r30
    2aae:	9f 0b       	sbc	r25, r31
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
    2ab4:	12 c0       	rjmp	.+36     	; 0x2ada <__floatunsisf+0xe0>
    2ab6:	30 97       	sbiw	r30, 0x00	; 0
    2ab8:	81 f0       	breq	.+32     	; 0x2ada <__floatunsisf+0xe0>
    2aba:	0e 2e       	mov	r0, r30
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <__floatunsisf+0xcc>
    2abe:	ee 0c       	add	r14, r14
    2ac0:	ff 1c       	adc	r15, r15
    2ac2:	00 1f       	adc	r16, r16
    2ac4:	11 1f       	adc	r17, r17
    2ac6:	0a 94       	dec	r0
    2ac8:	d2 f7       	brpl	.-12     	; 0x2abe <__floatunsisf+0xc4>
    2aca:	ed 82       	std	Y+5, r14	; 0x05
    2acc:	fe 82       	std	Y+6, r15	; 0x06
    2ace:	0f 83       	std	Y+7, r16	; 0x07
    2ad0:	18 87       	std	Y+8, r17	; 0x08
    2ad2:	ce 1a       	sub	r12, r30
    2ad4:	df 0a       	sbc	r13, r31
    2ad6:	dc 82       	std	Y+4, r13	; 0x04
    2ad8:	cb 82       	std	Y+3, r12	; 0x03
    2ada:	ce 01       	movw	r24, r28
    2adc:	01 96       	adiw	r24, 0x01	; 1
    2ade:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__pack_f>
    2ae2:	28 96       	adiw	r28, 0x08	; 8
    2ae4:	e8 e0       	ldi	r30, 0x08	; 8
    2ae6:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__epilogue_restores__+0x14>

00002aea <__clzsi2>:
    2aea:	af 92       	push	r10
    2aec:	bf 92       	push	r11
    2aee:	cf 92       	push	r12
    2af0:	df 92       	push	r13
    2af2:	ef 92       	push	r14
    2af4:	ff 92       	push	r15
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
    2afa:	7b 01       	movw	r14, r22
    2afc:	8c 01       	movw	r16, r24
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	e8 16       	cp	r14, r24
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	f8 06       	cpc	r15, r24
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	08 07       	cpc	r16, r24
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	18 07       	cpc	r17, r24
    2b0e:	58 f4       	brcc	.+22     	; 0x2b26 <__clzsi2+0x3c>
    2b10:	ef ef       	ldi	r30, 0xFF	; 255
    2b12:	ee 16       	cp	r14, r30
    2b14:	f1 04       	cpc	r15, r1
    2b16:	01 05       	cpc	r16, r1
    2b18:	11 05       	cpc	r17, r1
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <__clzsi2+0x34>
    2b1c:	90 f4       	brcc	.+36     	; 0x2b42 <__clzsi2+0x58>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	dc 01       	movw	r26, r24
    2b24:	17 c0       	rjmp	.+46     	; 0x2b54 <__clzsi2+0x6a>
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	ef 16       	cp	r14, r31
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	ff 06       	cpc	r15, r31
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	0f 07       	cpc	r16, r31
    2b32:	f1 e0       	ldi	r31, 0x01	; 1
    2b34:	1f 07       	cpc	r17, r31
    2b36:	50 f4       	brcc	.+20     	; 0x2b4c <__clzsi2+0x62>
    2b38:	80 e1       	ldi	r24, 0x10	; 16
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	09 c0       	rjmp	.+18     	; 0x2b54 <__clzsi2+0x6a>
    2b42:	88 e0       	ldi	r24, 0x08	; 8
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 e0       	ldi	r26, 0x00	; 0
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	04 c0       	rjmp	.+8      	; 0x2b54 <__clzsi2+0x6a>
    2b4c:	88 e1       	ldi	r24, 0x18	; 24
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	a0 e0       	ldi	r26, 0x00	; 0
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	20 e2       	ldi	r18, 0x20	; 32
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	28 1b       	sub	r18, r24
    2b5e:	39 0b       	sbc	r19, r25
    2b60:	4a 0b       	sbc	r20, r26
    2b62:	5b 0b       	sbc	r21, r27
    2b64:	57 01       	movw	r10, r14
    2b66:	68 01       	movw	r12, r16
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <__clzsi2+0x88>
    2b6a:	d6 94       	lsr	r13
    2b6c:	c7 94       	ror	r12
    2b6e:	b7 94       	ror	r11
    2b70:	a7 94       	ror	r10
    2b72:	8a 95       	dec	r24
    2b74:	d2 f7       	brpl	.-12     	; 0x2b6a <__clzsi2+0x80>
    2b76:	d6 01       	movw	r26, r12
    2b78:	c5 01       	movw	r24, r10
    2b7a:	8d 5e       	subi	r24, 0xED	; 237
    2b7c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b7e:	fc 01       	movw	r30, r24
    2b80:	80 81       	ld	r24, Z
    2b82:	28 1b       	sub	r18, r24
    2b84:	31 09       	sbc	r19, r1
    2b86:	41 09       	sbc	r20, r1
    2b88:	51 09       	sbc	r21, r1
    2b8a:	c9 01       	movw	r24, r18
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	df 90       	pop	r13
    2b96:	cf 90       	pop	r12
    2b98:	bf 90       	pop	r11
    2b9a:	af 90       	pop	r10
    2b9c:	08 95       	ret

00002b9e <__pack_f>:
    2b9e:	ef 92       	push	r14
    2ba0:	ff 92       	push	r15
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	fc 01       	movw	r30, r24
    2bac:	24 81       	ldd	r18, Z+4	; 0x04
    2bae:	35 81       	ldd	r19, Z+5	; 0x05
    2bb0:	46 81       	ldd	r20, Z+6	; 0x06
    2bb2:	57 81       	ldd	r21, Z+7	; 0x07
    2bb4:	61 81       	ldd	r22, Z+1	; 0x01
    2bb6:	80 81       	ld	r24, Z
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	20 f4       	brcc	.+8      	; 0x2bc4 <__pack_f+0x26>
    2bbc:	40 61       	ori	r20, 0x10	; 16
    2bbe:	ef ef       	ldi	r30, 0xFF	; 255
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	a3 c0       	rjmp	.+326    	; 0x2d0a <__pack_f+0x16c>
    2bc4:	84 30       	cpi	r24, 0x04	; 4
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <__pack_f+0x2c>
    2bc8:	9b c0       	rjmp	.+310    	; 0x2d00 <__pack_f+0x162>
    2bca:	82 30       	cpi	r24, 0x02	; 2
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <__pack_f+0x32>
    2bce:	92 c0       	rjmp	.+292    	; 0x2cf4 <__pack_f+0x156>
    2bd0:	21 15       	cp	r18, r1
    2bd2:	31 05       	cpc	r19, r1
    2bd4:	41 05       	cpc	r20, r1
    2bd6:	51 05       	cpc	r21, r1
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <__pack_f+0x3e>
    2bda:	8f c0       	rjmp	.+286    	; 0x2cfa <__pack_f+0x15c>
    2bdc:	02 80       	ldd	r0, Z+2	; 0x02
    2bde:	f3 81       	ldd	r31, Z+3	; 0x03
    2be0:	e0 2d       	mov	r30, r0
    2be2:	7f ef       	ldi	r23, 0xFF	; 255
    2be4:	e2 38       	cpi	r30, 0x82	; 130
    2be6:	f7 07       	cpc	r31, r23
    2be8:	0c f0       	brlt	.+2      	; 0x2bec <__pack_f+0x4e>
    2bea:	5a c0       	rjmp	.+180    	; 0x2ca0 <__pack_f+0x102>
    2bec:	c2 e8       	ldi	r28, 0x82	; 130
    2bee:	df ef       	ldi	r29, 0xFF	; 255
    2bf0:	ce 1b       	sub	r28, r30
    2bf2:	df 0b       	sbc	r29, r31
    2bf4:	ca 31       	cpi	r28, 0x1A	; 26
    2bf6:	d1 05       	cpc	r29, r1
    2bf8:	6c f5       	brge	.+90     	; 0x2c54 <__pack_f+0xb6>
    2bfa:	79 01       	movw	r14, r18
    2bfc:	8a 01       	movw	r16, r20
    2bfe:	0c 2e       	mov	r0, r28
    2c00:	04 c0       	rjmp	.+8      	; 0x2c0a <__pack_f+0x6c>
    2c02:	16 95       	lsr	r17
    2c04:	07 95       	ror	r16
    2c06:	f7 94       	ror	r15
    2c08:	e7 94       	ror	r14
    2c0a:	0a 94       	dec	r0
    2c0c:	d2 f7       	brpl	.-12     	; 0x2c02 <__pack_f+0x64>
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	a0 e0       	ldi	r26, 0x00	; 0
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	0c 2e       	mov	r0, r28
    2c18:	04 c0       	rjmp	.+8      	; 0x2c22 <__pack_f+0x84>
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	aa 1f       	adc	r26, r26
    2c20:	bb 1f       	adc	r27, r27
    2c22:	0a 94       	dec	r0
    2c24:	d2 f7       	brpl	.-12     	; 0x2c1a <__pack_f+0x7c>
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	a1 09       	sbc	r26, r1
    2c2a:	b1 09       	sbc	r27, r1
    2c2c:	82 23       	and	r24, r18
    2c2e:	93 23       	and	r25, r19
    2c30:	a4 23       	and	r26, r20
    2c32:	b5 23       	and	r27, r21
    2c34:	21 e0       	ldi	r18, 0x01	; 1
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	a1 05       	cpc	r26, r1
    2c40:	b1 05       	cpc	r27, r1
    2c42:	19 f4       	brne	.+6      	; 0x2c4a <__pack_f+0xac>
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	a9 01       	movw	r20, r18
    2c4a:	2e 29       	or	r18, r14
    2c4c:	3f 29       	or	r19, r15
    2c4e:	40 2b       	or	r20, r16
    2c50:	51 2b       	or	r21, r17
    2c52:	03 c0       	rjmp	.+6      	; 0x2c5a <__pack_f+0xbc>
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	a9 01       	movw	r20, r18
    2c5a:	da 01       	movw	r26, r20
    2c5c:	c9 01       	movw	r24, r18
    2c5e:	8f 77       	andi	r24, 0x7F	; 127
    2c60:	90 70       	andi	r25, 0x00	; 0
    2c62:	a0 70       	andi	r26, 0x00	; 0
    2c64:	b0 70       	andi	r27, 0x00	; 0
    2c66:	80 34       	cpi	r24, 0x40	; 64
    2c68:	91 05       	cpc	r25, r1
    2c6a:	a1 05       	cpc	r26, r1
    2c6c:	b1 05       	cpc	r27, r1
    2c6e:	39 f4       	brne	.+14     	; 0x2c7e <__pack_f+0xe0>
    2c70:	27 ff       	sbrs	r18, 7
    2c72:	09 c0       	rjmp	.+18     	; 0x2c86 <__pack_f+0xe8>
    2c74:	20 5c       	subi	r18, 0xC0	; 192
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	4f 4f       	sbci	r20, 0xFF	; 255
    2c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <__pack_f+0xe8>
    2c7e:	21 5c       	subi	r18, 0xC1	; 193
    2c80:	3f 4f       	sbci	r19, 0xFF	; 255
    2c82:	4f 4f       	sbci	r20, 0xFF	; 255
    2c84:	5f 4f       	sbci	r21, 0xFF	; 255
    2c86:	e1 e0       	ldi	r30, 0x01	; 1
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	20 30       	cpi	r18, 0x00	; 0
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	38 07       	cpc	r19, r24
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	48 07       	cpc	r20, r24
    2c94:	80 e4       	ldi	r24, 0x40	; 64
    2c96:	58 07       	cpc	r21, r24
    2c98:	28 f5       	brcc	.+74     	; 0x2ce4 <__pack_f+0x146>
    2c9a:	e0 e0       	ldi	r30, 0x00	; 0
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	22 c0       	rjmp	.+68     	; 0x2ce4 <__pack_f+0x146>
    2ca0:	e0 38       	cpi	r30, 0x80	; 128
    2ca2:	f1 05       	cpc	r31, r1
    2ca4:	6c f5       	brge	.+90     	; 0x2d00 <__pack_f+0x162>
    2ca6:	e1 58       	subi	r30, 0x81	; 129
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	da 01       	movw	r26, r20
    2cac:	c9 01       	movw	r24, r18
    2cae:	8f 77       	andi	r24, 0x7F	; 127
    2cb0:	90 70       	andi	r25, 0x00	; 0
    2cb2:	a0 70       	andi	r26, 0x00	; 0
    2cb4:	b0 70       	andi	r27, 0x00	; 0
    2cb6:	80 34       	cpi	r24, 0x40	; 64
    2cb8:	91 05       	cpc	r25, r1
    2cba:	a1 05       	cpc	r26, r1
    2cbc:	b1 05       	cpc	r27, r1
    2cbe:	39 f4       	brne	.+14     	; 0x2cce <__pack_f+0x130>
    2cc0:	27 ff       	sbrs	r18, 7
    2cc2:	09 c0       	rjmp	.+18     	; 0x2cd6 <__pack_f+0x138>
    2cc4:	20 5c       	subi	r18, 0xC0	; 192
    2cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cca:	5f 4f       	sbci	r21, 0xFF	; 255
    2ccc:	04 c0       	rjmp	.+8      	; 0x2cd6 <__pack_f+0x138>
    2cce:	21 5c       	subi	r18, 0xC1	; 193
    2cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd6:	57 ff       	sbrs	r21, 7
    2cd8:	05 c0       	rjmp	.+10     	; 0x2ce4 <__pack_f+0x146>
    2cda:	56 95       	lsr	r21
    2cdc:	47 95       	ror	r20
    2cde:	37 95       	ror	r19
    2ce0:	27 95       	ror	r18
    2ce2:	31 96       	adiw	r30, 0x01	; 1
    2ce4:	87 e0       	ldi	r24, 0x07	; 7
    2ce6:	56 95       	lsr	r21
    2ce8:	47 95       	ror	r20
    2cea:	37 95       	ror	r19
    2cec:	27 95       	ror	r18
    2cee:	8a 95       	dec	r24
    2cf0:	d1 f7       	brne	.-12     	; 0x2ce6 <__pack_f+0x148>
    2cf2:	0b c0       	rjmp	.+22     	; 0x2d0a <__pack_f+0x16c>
    2cf4:	e0 e0       	ldi	r30, 0x00	; 0
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	05 c0       	rjmp	.+10     	; 0x2d04 <__pack_f+0x166>
    2cfa:	e0 e0       	ldi	r30, 0x00	; 0
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	05 c0       	rjmp	.+10     	; 0x2d0a <__pack_f+0x16c>
    2d00:	ef ef       	ldi	r30, 0xFF	; 255
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	a9 01       	movw	r20, r18
    2d0a:	8e 2f       	mov	r24, r30
    2d0c:	87 95       	ror	r24
    2d0e:	88 27       	eor	r24, r24
    2d10:	87 95       	ror	r24
    2d12:	94 2f       	mov	r25, r20
    2d14:	9f 77       	andi	r25, 0x7F	; 127
    2d16:	67 95       	ror	r22
    2d18:	66 27       	eor	r22, r22
    2d1a:	67 95       	ror	r22
    2d1c:	e6 95       	lsr	r30
    2d1e:	a9 2f       	mov	r26, r25
    2d20:	a8 2b       	or	r26, r24
    2d22:	fe 2f       	mov	r31, r30
    2d24:	f6 2b       	or	r31, r22
    2d26:	62 2f       	mov	r22, r18
    2d28:	73 2f       	mov	r23, r19
    2d2a:	8a 2f       	mov	r24, r26
    2d2c:	9f 2f       	mov	r25, r31
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	e6 e0       	ldi	r30, 0x06	; 6
    2d34:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002d38 <__unpack_f>:
    2d38:	dc 01       	movw	r26, r24
    2d3a:	fb 01       	movw	r30, r22
    2d3c:	2c 91       	ld	r18, X
    2d3e:	11 96       	adiw	r26, 0x01	; 1
    2d40:	3c 91       	ld	r19, X
    2d42:	11 97       	sbiw	r26, 0x01	; 1
    2d44:	12 96       	adiw	r26, 0x02	; 2
    2d46:	8c 91       	ld	r24, X
    2d48:	12 97       	sbiw	r26, 0x02	; 2
    2d4a:	48 2f       	mov	r20, r24
    2d4c:	4f 77       	andi	r20, 0x7F	; 127
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	98 2f       	mov	r25, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	99 27       	eor	r25, r25
    2d56:	99 1f       	adc	r25, r25
    2d58:	13 96       	adiw	r26, 0x03	; 3
    2d5a:	6c 91       	ld	r22, X
    2d5c:	13 97       	sbiw	r26, 0x03	; 3
    2d5e:	86 2f       	mov	r24, r22
    2d60:	88 0f       	add	r24, r24
    2d62:	89 2b       	or	r24, r25
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	66 1f       	adc	r22, r22
    2d68:	66 27       	eor	r22, r22
    2d6a:	66 1f       	adc	r22, r22
    2d6c:	61 83       	std	Z+1, r22	; 0x01
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	39 f5       	brne	.+78     	; 0x2dc0 <__unpack_f+0x88>
    2d72:	21 15       	cp	r18, r1
    2d74:	31 05       	cpc	r19, r1
    2d76:	41 05       	cpc	r20, r1
    2d78:	51 05       	cpc	r21, r1
    2d7a:	11 f4       	brne	.+4      	; 0x2d80 <__unpack_f+0x48>
    2d7c:	82 e0       	ldi	r24, 0x02	; 2
    2d7e:	29 c0       	rjmp	.+82     	; 0x2dd2 <__unpack_f+0x9a>
    2d80:	82 e8       	ldi	r24, 0x82	; 130
    2d82:	9f ef       	ldi	r25, 0xFF	; 255
    2d84:	93 83       	std	Z+3, r25	; 0x03
    2d86:	82 83       	std	Z+2, r24	; 0x02
    2d88:	67 e0       	ldi	r22, 0x07	; 7
    2d8a:	22 0f       	add	r18, r18
    2d8c:	33 1f       	adc	r19, r19
    2d8e:	44 1f       	adc	r20, r20
    2d90:	55 1f       	adc	r21, r21
    2d92:	6a 95       	dec	r22
    2d94:	d1 f7       	brne	.-12     	; 0x2d8a <__unpack_f+0x52>
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	80 83       	st	Z, r24
    2d9a:	09 c0       	rjmp	.+18     	; 0x2dae <__unpack_f+0x76>
    2d9c:	22 0f       	add	r18, r18
    2d9e:	33 1f       	adc	r19, r19
    2da0:	44 1f       	adc	r20, r20
    2da2:	55 1f       	adc	r21, r21
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	93 83       	std	Z+3, r25	; 0x03
    2dac:	82 83       	std	Z+2, r24	; 0x02
    2dae:	20 30       	cpi	r18, 0x00	; 0
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	38 07       	cpc	r19, r24
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	48 07       	cpc	r20, r24
    2db8:	80 e4       	ldi	r24, 0x40	; 64
    2dba:	58 07       	cpc	r21, r24
    2dbc:	78 f3       	brcs	.-34     	; 0x2d9c <__unpack_f+0x64>
    2dbe:	20 c0       	rjmp	.+64     	; 0x2e00 <__unpack_f+0xc8>
    2dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc2:	91 05       	cpc	r25, r1
    2dc4:	79 f4       	brne	.+30     	; 0x2de4 <__unpack_f+0xac>
    2dc6:	21 15       	cp	r18, r1
    2dc8:	31 05       	cpc	r19, r1
    2dca:	41 05       	cpc	r20, r1
    2dcc:	51 05       	cpc	r21, r1
    2dce:	19 f4       	brne	.+6      	; 0x2dd6 <__unpack_f+0x9e>
    2dd0:	84 e0       	ldi	r24, 0x04	; 4
    2dd2:	80 83       	st	Z, r24
    2dd4:	08 95       	ret
    2dd6:	44 ff       	sbrs	r20, 4
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <__unpack_f+0xa8>
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	80 83       	st	Z, r24
    2dde:	10 c0       	rjmp	.+32     	; 0x2e00 <__unpack_f+0xc8>
    2de0:	10 82       	st	Z, r1
    2de2:	0e c0       	rjmp	.+28     	; 0x2e00 <__unpack_f+0xc8>
    2de4:	8f 57       	subi	r24, 0x7F	; 127
    2de6:	90 40       	sbci	r25, 0x00	; 0
    2de8:	93 83       	std	Z+3, r25	; 0x03
    2dea:	82 83       	std	Z+2, r24	; 0x02
    2dec:	83 e0       	ldi	r24, 0x03	; 3
    2dee:	80 83       	st	Z, r24
    2df0:	87 e0       	ldi	r24, 0x07	; 7
    2df2:	22 0f       	add	r18, r18
    2df4:	33 1f       	adc	r19, r19
    2df6:	44 1f       	adc	r20, r20
    2df8:	55 1f       	adc	r21, r21
    2dfa:	8a 95       	dec	r24
    2dfc:	d1 f7       	brne	.-12     	; 0x2df2 <__unpack_f+0xba>
    2dfe:	50 64       	ori	r21, 0x40	; 64
    2e00:	24 83       	std	Z+4, r18	; 0x04
    2e02:	35 83       	std	Z+5, r19	; 0x05
    2e04:	46 83       	std	Z+6, r20	; 0x06
    2e06:	57 83       	std	Z+7, r21	; 0x07
    2e08:	08 95       	ret

00002e0a <__fpcmp_parts_f>:
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	db 01       	movw	r26, r22
    2e0e:	90 81       	ld	r25, Z
    2e10:	92 30       	cpi	r25, 0x02	; 2
    2e12:	08 f4       	brcc	.+2      	; 0x2e16 <__fpcmp_parts_f+0xc>
    2e14:	49 c0       	rjmp	.+146    	; 0x2ea8 <__fpcmp_parts_f+0x9e>
    2e16:	8c 91       	ld	r24, X
    2e18:	82 30       	cpi	r24, 0x02	; 2
    2e1a:	08 f4       	brcc	.+2      	; 0x2e1e <__fpcmp_parts_f+0x14>
    2e1c:	45 c0       	rjmp	.+138    	; 0x2ea8 <__fpcmp_parts_f+0x9e>
    2e1e:	94 30       	cpi	r25, 0x04	; 4
    2e20:	51 f4       	brne	.+20     	; 0x2e36 <__fpcmp_parts_f+0x2c>
    2e22:	61 81       	ldd	r22, Z+1	; 0x01
    2e24:	84 30       	cpi	r24, 0x04	; 4
    2e26:	b1 f5       	brne	.+108    	; 0x2e94 <__fpcmp_parts_f+0x8a>
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	2c 91       	ld	r18, X
    2e2c:	11 97       	sbiw	r26, 0x01	; 1
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	26 1b       	sub	r18, r22
    2e32:	31 09       	sbc	r19, r1
    2e34:	41 c0       	rjmp	.+130    	; 0x2eb8 <__fpcmp_parts_f+0xae>
    2e36:	84 30       	cpi	r24, 0x04	; 4
    2e38:	21 f0       	breq	.+8      	; 0x2e42 <__fpcmp_parts_f+0x38>
    2e3a:	92 30       	cpi	r25, 0x02	; 2
    2e3c:	41 f4       	brne	.+16     	; 0x2e4e <__fpcmp_parts_f+0x44>
    2e3e:	82 30       	cpi	r24, 0x02	; 2
    2e40:	b1 f1       	breq	.+108    	; 0x2eae <__fpcmp_parts_f+0xa4>
    2e42:	11 96       	adiw	r26, 0x01	; 1
    2e44:	8c 91       	ld	r24, X
    2e46:	11 97       	sbiw	r26, 0x01	; 1
    2e48:	88 23       	and	r24, r24
    2e4a:	a1 f1       	breq	.+104    	; 0x2eb4 <__fpcmp_parts_f+0xaa>
    2e4c:	2d c0       	rjmp	.+90     	; 0x2ea8 <__fpcmp_parts_f+0x9e>
    2e4e:	61 81       	ldd	r22, Z+1	; 0x01
    2e50:	82 30       	cpi	r24, 0x02	; 2
    2e52:	01 f1       	breq	.+64     	; 0x2e94 <__fpcmp_parts_f+0x8a>
    2e54:	11 96       	adiw	r26, 0x01	; 1
    2e56:	8c 91       	ld	r24, X
    2e58:	11 97       	sbiw	r26, 0x01	; 1
    2e5a:	68 17       	cp	r22, r24
    2e5c:	d9 f4       	brne	.+54     	; 0x2e94 <__fpcmp_parts_f+0x8a>
    2e5e:	22 81       	ldd	r18, Z+2	; 0x02
    2e60:	33 81       	ldd	r19, Z+3	; 0x03
    2e62:	12 96       	adiw	r26, 0x02	; 2
    2e64:	8d 91       	ld	r24, X+
    2e66:	9c 91       	ld	r25, X
    2e68:	13 97       	sbiw	r26, 0x03	; 3
    2e6a:	82 17       	cp	r24, r18
    2e6c:	93 07       	cpc	r25, r19
    2e6e:	94 f0       	brlt	.+36     	; 0x2e94 <__fpcmp_parts_f+0x8a>
    2e70:	28 17       	cp	r18, r24
    2e72:	39 07       	cpc	r19, r25
    2e74:	bc f0       	brlt	.+46     	; 0x2ea4 <__fpcmp_parts_f+0x9a>
    2e76:	24 81       	ldd	r18, Z+4	; 0x04
    2e78:	35 81       	ldd	r19, Z+5	; 0x05
    2e7a:	46 81       	ldd	r20, Z+6	; 0x06
    2e7c:	57 81       	ldd	r21, Z+7	; 0x07
    2e7e:	14 96       	adiw	r26, 0x04	; 4
    2e80:	8d 91       	ld	r24, X+
    2e82:	9d 91       	ld	r25, X+
    2e84:	0d 90       	ld	r0, X+
    2e86:	bc 91       	ld	r27, X
    2e88:	a0 2d       	mov	r26, r0
    2e8a:	82 17       	cp	r24, r18
    2e8c:	93 07       	cpc	r25, r19
    2e8e:	a4 07       	cpc	r26, r20
    2e90:	b5 07       	cpc	r27, r21
    2e92:	18 f4       	brcc	.+6      	; 0x2e9a <__fpcmp_parts_f+0x90>
    2e94:	66 23       	and	r22, r22
    2e96:	41 f0       	breq	.+16     	; 0x2ea8 <__fpcmp_parts_f+0x9e>
    2e98:	0d c0       	rjmp	.+26     	; 0x2eb4 <__fpcmp_parts_f+0xaa>
    2e9a:	28 17       	cp	r18, r24
    2e9c:	39 07       	cpc	r19, r25
    2e9e:	4a 07       	cpc	r20, r26
    2ea0:	5b 07       	cpc	r21, r27
    2ea2:	28 f4       	brcc	.+10     	; 0x2eae <__fpcmp_parts_f+0xa4>
    2ea4:	66 23       	and	r22, r22
    2ea6:	31 f0       	breq	.+12     	; 0x2eb4 <__fpcmp_parts_f+0xaa>
    2ea8:	21 e0       	ldi	r18, 0x01	; 1
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <__fpcmp_parts_f+0xae>
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <__fpcmp_parts_f+0xae>
    2eb4:	2f ef       	ldi	r18, 0xFF	; 255
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	c9 01       	movw	r24, r18
    2eba:	08 95       	ret

00002ebc <__udivmodhi4>:
    2ebc:	aa 1b       	sub	r26, r26
    2ebe:	bb 1b       	sub	r27, r27
    2ec0:	51 e1       	ldi	r21, 0x11	; 17
    2ec2:	07 c0       	rjmp	.+14     	; 0x2ed2 <__udivmodhi4_ep>

00002ec4 <__udivmodhi4_loop>:
    2ec4:	aa 1f       	adc	r26, r26
    2ec6:	bb 1f       	adc	r27, r27
    2ec8:	a6 17       	cp	r26, r22
    2eca:	b7 07       	cpc	r27, r23
    2ecc:	10 f0       	brcs	.+4      	; 0x2ed2 <__udivmodhi4_ep>
    2ece:	a6 1b       	sub	r26, r22
    2ed0:	b7 0b       	sbc	r27, r23

00002ed2 <__udivmodhi4_ep>:
    2ed2:	88 1f       	adc	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	5a 95       	dec	r21
    2ed8:	a9 f7       	brne	.-22     	; 0x2ec4 <__udivmodhi4_loop>
    2eda:	80 95       	com	r24
    2edc:	90 95       	com	r25
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	08 95       	ret

00002ee4 <__divmodhi4>:
    2ee4:	97 fb       	bst	r25, 7
    2ee6:	09 2e       	mov	r0, r25
    2ee8:	07 26       	eor	r0, r23
    2eea:	0a d0       	rcall	.+20     	; 0x2f00 <__divmodhi4_neg1>
    2eec:	77 fd       	sbrc	r23, 7
    2eee:	04 d0       	rcall	.+8      	; 0x2ef8 <__divmodhi4_neg2>
    2ef0:	e5 df       	rcall	.-54     	; 0x2ebc <__udivmodhi4>
    2ef2:	06 d0       	rcall	.+12     	; 0x2f00 <__divmodhi4_neg1>
    2ef4:	00 20       	and	r0, r0
    2ef6:	1a f4       	brpl	.+6      	; 0x2efe <__divmodhi4_exit>

00002ef8 <__divmodhi4_neg2>:
    2ef8:	70 95       	com	r23
    2efa:	61 95       	neg	r22
    2efc:	7f 4f       	sbci	r23, 0xFF	; 255

00002efe <__divmodhi4_exit>:
    2efe:	08 95       	ret

00002f00 <__divmodhi4_neg1>:
    2f00:	f6 f7       	brtc	.-4      	; 0x2efe <__divmodhi4_exit>
    2f02:	90 95       	com	r25
    2f04:	81 95       	neg	r24
    2f06:	9f 4f       	sbci	r25, 0xFF	; 255
    2f08:	08 95       	ret

00002f0a <__divmodsi4>:
    2f0a:	97 fb       	bst	r25, 7
    2f0c:	09 2e       	mov	r0, r25
    2f0e:	05 26       	eor	r0, r21
    2f10:	0e d0       	rcall	.+28     	; 0x2f2e <__divmodsi4_neg1>
    2f12:	57 fd       	sbrc	r21, 7
    2f14:	04 d0       	rcall	.+8      	; 0x2f1e <__divmodsi4_neg2>
    2f16:	14 d0       	rcall	.+40     	; 0x2f40 <__udivmodsi4>
    2f18:	0a d0       	rcall	.+20     	; 0x2f2e <__divmodsi4_neg1>
    2f1a:	00 1c       	adc	r0, r0
    2f1c:	38 f4       	brcc	.+14     	; 0x2f2c <__divmodsi4_exit>

00002f1e <__divmodsi4_neg2>:
    2f1e:	50 95       	com	r21
    2f20:	40 95       	com	r20
    2f22:	30 95       	com	r19
    2f24:	21 95       	neg	r18
    2f26:	3f 4f       	sbci	r19, 0xFF	; 255
    2f28:	4f 4f       	sbci	r20, 0xFF	; 255
    2f2a:	5f 4f       	sbci	r21, 0xFF	; 255

00002f2c <__divmodsi4_exit>:
    2f2c:	08 95       	ret

00002f2e <__divmodsi4_neg1>:
    2f2e:	f6 f7       	brtc	.-4      	; 0x2f2c <__divmodsi4_exit>
    2f30:	90 95       	com	r25
    2f32:	80 95       	com	r24
    2f34:	70 95       	com	r23
    2f36:	61 95       	neg	r22
    2f38:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3e:	08 95       	ret

00002f40 <__udivmodsi4>:
    2f40:	a1 e2       	ldi	r26, 0x21	; 33
    2f42:	1a 2e       	mov	r1, r26
    2f44:	aa 1b       	sub	r26, r26
    2f46:	bb 1b       	sub	r27, r27
    2f48:	fd 01       	movw	r30, r26
    2f4a:	0d c0       	rjmp	.+26     	; 0x2f66 <__udivmodsi4_ep>

00002f4c <__udivmodsi4_loop>:
    2f4c:	aa 1f       	adc	r26, r26
    2f4e:	bb 1f       	adc	r27, r27
    2f50:	ee 1f       	adc	r30, r30
    2f52:	ff 1f       	adc	r31, r31
    2f54:	a2 17       	cp	r26, r18
    2f56:	b3 07       	cpc	r27, r19
    2f58:	e4 07       	cpc	r30, r20
    2f5a:	f5 07       	cpc	r31, r21
    2f5c:	20 f0       	brcs	.+8      	; 0x2f66 <__udivmodsi4_ep>
    2f5e:	a2 1b       	sub	r26, r18
    2f60:	b3 0b       	sbc	r27, r19
    2f62:	e4 0b       	sbc	r30, r20
    2f64:	f5 0b       	sbc	r31, r21

00002f66 <__udivmodsi4_ep>:
    2f66:	66 1f       	adc	r22, r22
    2f68:	77 1f       	adc	r23, r23
    2f6a:	88 1f       	adc	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	1a 94       	dec	r1
    2f70:	69 f7       	brne	.-38     	; 0x2f4c <__udivmodsi4_loop>
    2f72:	60 95       	com	r22
    2f74:	70 95       	com	r23
    2f76:	80 95       	com	r24
    2f78:	90 95       	com	r25
    2f7a:	9b 01       	movw	r18, r22
    2f7c:	ac 01       	movw	r20, r24
    2f7e:	bd 01       	movw	r22, r26
    2f80:	cf 01       	movw	r24, r30
    2f82:	08 95       	ret

00002f84 <__prologue_saves__>:
    2f84:	2f 92       	push	r2
    2f86:	3f 92       	push	r3
    2f88:	4f 92       	push	r4
    2f8a:	5f 92       	push	r5
    2f8c:	6f 92       	push	r6
    2f8e:	7f 92       	push	r7
    2f90:	8f 92       	push	r8
    2f92:	9f 92       	push	r9
    2f94:	af 92       	push	r10
    2f96:	bf 92       	push	r11
    2f98:	cf 92       	push	r12
    2f9a:	df 92       	push	r13
    2f9c:	ef 92       	push	r14
    2f9e:	ff 92       	push	r15
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	ca 1b       	sub	r28, r26
    2fae:	db 0b       	sbc	r29, r27
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	09 94       	ijmp

00002fbc <__epilogue_restores__>:
    2fbc:	2a 88       	ldd	r2, Y+18	; 0x12
    2fbe:	39 88       	ldd	r3, Y+17	; 0x11
    2fc0:	48 88       	ldd	r4, Y+16	; 0x10
    2fc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fcc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fce:	b9 84       	ldd	r11, Y+9	; 0x09
    2fd0:	c8 84       	ldd	r12, Y+8	; 0x08
    2fd2:	df 80       	ldd	r13, Y+7	; 0x07
    2fd4:	ee 80       	ldd	r14, Y+6	; 0x06
    2fd6:	fd 80       	ldd	r15, Y+5	; 0x05
    2fd8:	0c 81       	ldd	r16, Y+4	; 0x04
    2fda:	1b 81       	ldd	r17, Y+3	; 0x03
    2fdc:	aa 81       	ldd	r26, Y+2	; 0x02
    2fde:	b9 81       	ldd	r27, Y+1	; 0x01
    2fe0:	ce 0f       	add	r28, r30
    2fe2:	d1 1d       	adc	r29, r1
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	ed 01       	movw	r28, r26
    2ff0:	08 95       	ret

00002ff2 <ceil>:
    2ff2:	3b d0       	rcall	.+118    	; 0x306a <__fp_trunc>
    2ff4:	80 f0       	brcs	.+32     	; 0x3016 <ceil+0x24>
    2ff6:	9f 37       	cpi	r25, 0x7F	; 127
    2ff8:	40 f4       	brcc	.+16     	; 0x300a <ceil+0x18>
    2ffa:	91 11       	cpse	r25, r1
    2ffc:	0e f4       	brtc	.+2      	; 0x3000 <ceil+0xe>
    2ffe:	4d c0       	rjmp	.+154    	; 0x309a <__fp_szero>
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	80 e8       	ldi	r24, 0x80	; 128
    3006:	9f e3       	ldi	r25, 0x3F	; 63
    3008:	08 95       	ret
    300a:	26 f0       	brts	.+8      	; 0x3014 <ceil+0x22>
    300c:	1b 16       	cp	r1, r27
    300e:	61 1d       	adc	r22, r1
    3010:	71 1d       	adc	r23, r1
    3012:	81 1d       	adc	r24, r1
    3014:	01 c0       	rjmp	.+2      	; 0x3018 <__fp_mintl>
    3016:	1b c0       	rjmp	.+54     	; 0x304e <__fp_mpack>

00003018 <__fp_mintl>:
    3018:	88 23       	and	r24, r24
    301a:	71 f4       	brne	.+28     	; 0x3038 <__fp_mintl+0x20>
    301c:	77 23       	and	r23, r23
    301e:	21 f0       	breq	.+8      	; 0x3028 <__fp_mintl+0x10>
    3020:	98 50       	subi	r25, 0x08	; 8
    3022:	87 2b       	or	r24, r23
    3024:	76 2f       	mov	r23, r22
    3026:	07 c0       	rjmp	.+14     	; 0x3036 <__fp_mintl+0x1e>
    3028:	66 23       	and	r22, r22
    302a:	11 f4       	brne	.+4      	; 0x3030 <__fp_mintl+0x18>
    302c:	99 27       	eor	r25, r25
    302e:	0d c0       	rjmp	.+26     	; 0x304a <__fp_mintl+0x32>
    3030:	90 51       	subi	r25, 0x10	; 16
    3032:	86 2b       	or	r24, r22
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	2a f0       	brmi	.+10     	; 0x3044 <__fp_mintl+0x2c>
    303a:	9a 95       	dec	r25
    303c:	66 0f       	add	r22, r22
    303e:	77 1f       	adc	r23, r23
    3040:	88 1f       	adc	r24, r24
    3042:	da f7       	brpl	.-10     	; 0x303a <__fp_mintl+0x22>
    3044:	88 0f       	add	r24, r24
    3046:	96 95       	lsr	r25
    3048:	87 95       	ror	r24
    304a:	97 f9       	bld	r25, 7
    304c:	08 95       	ret

0000304e <__fp_mpack>:
    304e:	9f 3f       	cpi	r25, 0xFF	; 255
    3050:	31 f0       	breq	.+12     	; 0x305e <__fp_mpack_finite+0xc>

00003052 <__fp_mpack_finite>:
    3052:	91 50       	subi	r25, 0x01	; 1
    3054:	20 f4       	brcc	.+8      	; 0x305e <__fp_mpack_finite+0xc>
    3056:	87 95       	ror	r24
    3058:	77 95       	ror	r23
    305a:	67 95       	ror	r22
    305c:	b7 95       	ror	r27
    305e:	88 0f       	add	r24, r24
    3060:	91 1d       	adc	r25, r1
    3062:	96 95       	lsr	r25
    3064:	87 95       	ror	r24
    3066:	97 f9       	bld	r25, 7
    3068:	08 95       	ret

0000306a <__fp_trunc>:
    306a:	25 d0       	rcall	.+74     	; 0x30b6 <__fp_splitA>
    306c:	a0 f0       	brcs	.+40     	; 0x3096 <__fp_trunc+0x2c>
    306e:	be e7       	ldi	r27, 0x7E	; 126
    3070:	b9 17       	cp	r27, r25
    3072:	88 f4       	brcc	.+34     	; 0x3096 <__fp_trunc+0x2c>
    3074:	bb 27       	eor	r27, r27
    3076:	9f 38       	cpi	r25, 0x8F	; 143
    3078:	60 f4       	brcc	.+24     	; 0x3092 <__fp_trunc+0x28>
    307a:	16 16       	cp	r1, r22
    307c:	b1 1d       	adc	r27, r1
    307e:	67 2f       	mov	r22, r23
    3080:	78 2f       	mov	r23, r24
    3082:	88 27       	eor	r24, r24
    3084:	98 5f       	subi	r25, 0xF8	; 248
    3086:	f7 cf       	rjmp	.-18     	; 0x3076 <__fp_trunc+0xc>
    3088:	86 95       	lsr	r24
    308a:	77 95       	ror	r23
    308c:	67 95       	ror	r22
    308e:	b1 1d       	adc	r27, r1
    3090:	93 95       	inc	r25
    3092:	96 39       	cpi	r25, 0x96	; 150
    3094:	c8 f3       	brcs	.-14     	; 0x3088 <__fp_trunc+0x1e>
    3096:	08 95       	ret

00003098 <__fp_zero>:
    3098:	e8 94       	clt

0000309a <__fp_szero>:
    309a:	bb 27       	eor	r27, r27
    309c:	66 27       	eor	r22, r22
    309e:	77 27       	eor	r23, r23
    30a0:	cb 01       	movw	r24, r22
    30a2:	97 f9       	bld	r25, 7
    30a4:	08 95       	ret

000030a6 <__fp_split3>:
    30a6:	57 fd       	sbrc	r21, 7
    30a8:	90 58       	subi	r25, 0x80	; 128
    30aa:	44 0f       	add	r20, r20
    30ac:	55 1f       	adc	r21, r21
    30ae:	59 f0       	breq	.+22     	; 0x30c6 <__fp_splitA+0x10>
    30b0:	5f 3f       	cpi	r21, 0xFF	; 255
    30b2:	71 f0       	breq	.+28     	; 0x30d0 <__fp_splitA+0x1a>
    30b4:	47 95       	ror	r20

000030b6 <__fp_splitA>:
    30b6:	88 0f       	add	r24, r24
    30b8:	97 fb       	bst	r25, 7
    30ba:	99 1f       	adc	r25, r25
    30bc:	61 f0       	breq	.+24     	; 0x30d6 <__fp_splitA+0x20>
    30be:	9f 3f       	cpi	r25, 0xFF	; 255
    30c0:	79 f0       	breq	.+30     	; 0x30e0 <__fp_splitA+0x2a>
    30c2:	87 95       	ror	r24
    30c4:	08 95       	ret
    30c6:	12 16       	cp	r1, r18
    30c8:	13 06       	cpc	r1, r19
    30ca:	14 06       	cpc	r1, r20
    30cc:	55 1f       	adc	r21, r21
    30ce:	f2 cf       	rjmp	.-28     	; 0x30b4 <__fp_split3+0xe>
    30d0:	46 95       	lsr	r20
    30d2:	f1 df       	rcall	.-30     	; 0x30b6 <__fp_splitA>
    30d4:	08 c0       	rjmp	.+16     	; 0x30e6 <__fp_splitA+0x30>
    30d6:	16 16       	cp	r1, r22
    30d8:	17 06       	cpc	r1, r23
    30da:	18 06       	cpc	r1, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	f1 cf       	rjmp	.-30     	; 0x30c2 <__fp_splitA+0xc>
    30e0:	86 95       	lsr	r24
    30e2:	71 05       	cpc	r23, r1
    30e4:	61 05       	cpc	r22, r1
    30e6:	08 94       	sec
    30e8:	08 95       	ret

000030ea <_exit>:
    30ea:	f8 94       	cli

000030ec <__stop_program>:
    30ec:	ff cf       	rjmp	.-2      	; 0x30ec <__stop_program>
