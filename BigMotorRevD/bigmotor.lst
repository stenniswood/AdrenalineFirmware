
bigmotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  0000477e  00004812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000477e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000127  0080021e  0080021e  00004930  2**0
                  ALLOC
  3 .stab         00000de0  00000000  00000000  00004930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  00005710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000400  00000000  00000000  000059b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001896  00000000  00000000  00005db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008276  00000000  00000000  0000764b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000031ba  00000000  00000000  0000f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005ace  00000000  00000000  00012a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ec0  00000000  00000000  0001854c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000029a8  00000000  00000000  0001940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003857  00000000  00000000  0001bdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000a3c  00000000  00000000  0001f60b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000378  00000000  00000000  00020047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 d4 19 	jmp	0x33a8	; 0x33a8 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_22>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e7       	ldi	r30, 0x7E	; 126
      a0:	f7 e4       	ldi	r31, 0x47	; 71
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ae 31       	cpi	r26, 0x1E	; 30
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	ae e1       	ldi	r26, 0x1E	; 30
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 34       	cpi	r26, 0x45	; 69
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
      c2:	0c 94 bd 23 	jmp	0x477a	; 0x477a <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z24can_prep_eeprom_dump_msgP4sCANPh>:

bool okay_to_read_cal = false;


void can_prep_eeprom_dump_msg( sCAN* mMsg, byte* addr )
{
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	ec 01       	movw	r28, r24
      d4:	8b 01       	movw	r16, r22
	mMsg->id  = create_CAN_eid( 0x0111, MyInstance );
      d6:	81 e1       	ldi	r24, 0x11	; 17
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	60 91 c3 02 	lds	r22, 0x02C3
      de:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
      e2:	68 83       	st	Y, r22
      e4:	79 83       	std	Y+1, r23	; 0x01
      e6:	8a 83       	std	Y+2, r24	; 0x02
      e8:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = (eeprom_read_byte( addr++ ));
      ea:	98 01       	movw	r18, r16
      ec:	2f 5f       	subi	r18, 0xFF	; 255
      ee:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      f0:	f9 99       	sbic	0x1f, 1	; 31
      f2:	fe cf       	rjmp	.-4      	; 0xf0 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
      f4:	12 bd       	out	0x22, r17	; 34
      f6:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
      f8:	f8 9a       	sbi	0x1f, 0	; 31
      fa:	80 b5       	in	r24, 0x20	; 32
      fc:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (eeprom_read_byte( addr++ ));
      fe:	c9 01       	movw	r24, r18
     100:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     102:	f9 99       	sbic	0x1f, 1	; 31
     104:	fe cf       	rjmp	.-4      	; 0x102 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x38>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     106:	32 bd       	out	0x22, r19	; 34
     108:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     10a:	f8 9a       	sbi	0x1f, 0	; 31
     10c:	20 b5       	in	r18, 0x20	; 32
     10e:	2e 83       	std	Y+6, r18	; 0x06
    mMsg->data[2] = (eeprom_read_byte( addr++ ));
     110:	9c 01       	movw	r18, r24
     112:	2f 5f       	subi	r18, 0xFF	; 255
     114:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     116:	f9 99       	sbic	0x1f, 1	; 31
     118:	fe cf       	rjmp	.-4      	; 0x116 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     11a:	92 bd       	out	0x22, r25	; 34
     11c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     11e:	f8 9a       	sbi	0x1f, 0	; 31
     120:	80 b5       	in	r24, 0x20	; 32
     122:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (eeprom_read_byte( addr++ ));
     124:	c9 01       	movw	r24, r18
     126:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     128:	f9 99       	sbic	0x1f, 1	; 31
     12a:	fe cf       	rjmp	.-4      	; 0x128 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     12c:	32 bd       	out	0x22, r19	; 34
     12e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     130:	f8 9a       	sbi	0x1f, 0	; 31
     132:	20 b5       	in	r18, 0x20	; 32
     134:	28 87       	std	Y+8, r18	; 0x08
    mMsg->data[4] = (eeprom_read_byte( addr++ ));
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     13c:	f9 99       	sbic	0x1f, 1	; 31
     13e:	fe cf       	rjmp	.-4      	; 0x13c <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x72>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     140:	92 bd       	out	0x22, r25	; 34
     142:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     144:	f8 9a       	sbi	0x1f, 0	; 31
     146:	80 b5       	in	r24, 0x20	; 32
     148:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = (eeprom_read_byte( addr++ ));
     14a:	c9 01       	movw	r24, r18
     14c:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     14e:	f9 99       	sbic	0x1f, 1	; 31
     150:	fe cf       	rjmp	.-4      	; 0x14e <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x84>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     152:	32 bd       	out	0x22, r19	; 34
     154:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     156:	f8 9a       	sbi	0x1f, 0	; 31
     158:	20 b5       	in	r18, 0x20	; 32
     15a:	2a 87       	std	Y+10, r18	; 0x0a
    mMsg->data[6] = (eeprom_read_byte( addr++ ));
     15c:	9c 01       	movw	r18, r24
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     162:	f9 99       	sbic	0x1f, 1	; 31
     164:	fe cf       	rjmp	.-4      	; 0x162 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x98>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     166:	92 bd       	out	0x22, r25	; 34
     168:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     16a:	f8 9a       	sbi	0x1f, 0	; 31
     16c:	80 b5       	in	r24, 0x20	; 32
     16e:	8b 87       	std	Y+11, r24	; 0x0b
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     170:	f9 99       	sbic	0x1f, 1	; 31
     172:	fe cf       	rjmp	.-4      	; 0x170 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0xa6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     174:	32 bd       	out	0x22, r19	; 34
     176:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     178:	f8 9a       	sbi	0x1f, 0	; 31
     17a:	80 b5       	in	r24, 0x20	; 32
    mMsg->data[7] = (eeprom_read_byte( addr++ ));
     17c:	8c 87       	std	Y+12, r24	; 0x0c
    mMsg->header.DLC	= 8;
     17e:	8c 81       	ldd	r24, Y+4	; 0x04
     180:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
     182:	80 61       	ori	r24, 0x10	; 16
     184:	8c 83       	std	Y+4, r24	; 0x04
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <_Z25can_prep_eeprom_dump1_msgv>:
void can_prep_eeprom_dump1_msg( )
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
	byte* addr = INSTANCE_EEPROM_ADDRESS;
	can_prep_eeprom_dump_msg( &msg1, addr );
     194:	c8 e8       	ldi	r28, 0x88	; 136
     196:	d2 e0       	ldi	r29, 0x02	; 2
     198:	ce 01       	movw	r24, r28
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 0, &msg1 );
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	be 01       	movw	r22, r28
     1a6:	0e 94 ca 10 	call	0x2194	; 0x2194 <_Z12can_send_msghP4sCAN>
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <_Z25can_prep_eeprom_dump2_msgv>:
void can_prep_eeprom_dump2_msg( )
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
	byte* addr = (byte*)(INSTANCE_EEPROM_ADDRESS+8);
	can_prep_eeprom_dump_msg( &msg2, addr );
     1b4:	c7 e9       	ldi	r28, 0x97	; 151
     1b6:	d2 e0       	ldi	r29, 0x02	; 2
     1b8:	ce 01       	movw	r24, r28
     1ba:	69 e0       	ldi	r22, 0x09	; 9
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 2, &msg2 );
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	be 01       	movw	r22, r28
     1c6:	0e 94 ca 10 	call	0x2194	; 0x2194 <_Z12can_send_msghP4sCAN>
}
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <_Z25can_prep_eeprom_dump3_msgv>:
void can_prep_eeprom_dump3_msg( )
{
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
	byte* addr = (byte*)(INSTANCE_EEPROM_ADDRESS+16);
	can_prep_eeprom_dump_msg( &msg1, addr );
     1d4:	c8 e8       	ldi	r28, 0x88	; 136
     1d6:	d2 e0       	ldi	r29, 0x02	; 2
     1d8:	ce 01       	movw	r24, r28
     1da:	61 e1       	ldi	r22, 0x11	; 17
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 4, &msg1 );
     1e2:	84 e0       	ldi	r24, 0x04	; 4
     1e4:	be 01       	movw	r22, r28
     1e6:	0e 94 ca 10 	call	0x2194	; 0x2194 <_Z12can_send_msghP4sCAN>
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <_Z4initv>:
byte ResetReason = 0x00;

void init()
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
	ResetReason = MCUSR;		
     1f4:	84 b7       	in	r24, 0x34	; 52
     1f6:	80 93 1f 02 	sts	0x021F, r24
 	cli();
     1fa:	f8 94       	cli
    chip_init ();    				// Chip initialization
     1fc:	0e 94 86 19 	call	0x330c	; 0x330c <_Z9chip_initv>
	init_leds ();
     200:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_Z9init_ledsv>
	delay(1000000);					// ~ 2 sec
     204:	60 e4       	ldi	r22, 0x40	; 64
     206:	72 e4       	ldi	r23, 0x42	; 66
     208:	8f e0       	ldi	r24, 0x0F	; 15
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 4e 19 	call	0x329c	; 0x329c <_Z5delayl>
	read_cal();						// Read everything including motor stops.	
     210:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_Z8read_calv>
	// yes can_init() needs MyInstance to be set already for filtering!
	can_init(CAN_250K_BAUD);		/* Enables Mob0 for Reception! */
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	0e 94 17 11 	call	0x222e	; 0x222e <_Z8can_inith>

    // INIT MYINSTANCE:	
	config_init();
     21a:	0e 94 85 1a 	call	0x350a	; 0x350a <_Z11config_initv>
	can_instance_init();
     21e:	0e 94 01 12 	call	0x2402	; 0x2402 <_Z17can_instance_initv>
	
    set_rx_callback			( can_file_message );
     222:	83 e3       	ldi	r24, 0x33	; 51
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15set_rx_callbackPFvP4sCANE>
	set_configure_callback	( config_change    );
     22a:	86 e5       	ldi	r24, 0x56	; 86
     22c:	95 e0       	ldi	r25, 0x05	; 5
     22e:	0e 94 3e 13 	call	0x267c	; 0x267c <_Z22set_configure_callbackPFvhE>
	sei();
     232:	78 94       	sei

	OS_InitTask();
     234:	0e 94 92 19 	call	0x3324	; 0x3324 <_Z11OS_InitTaskv>
	pot_init();	
     238:	0e 94 2e 08 	call	0x105c	; 0x105c <_Z8pot_initv>
	motor_init ();
     23c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_Z10motor_initv>

	can_prep_instance_request( &msg2, 0xBB );
     240:	c7 e9       	ldi	r28, 0x97	; 151
     242:	d2 e0       	ldi	r29, 0x02	; 2
     244:	ce 01       	movw	r24, r28
     246:	6b eb       	ldi	r22, 0xBB	; 187
     248:	0e 94 35 12 	call	0x246a	; 0x246a <_Z25can_prep_instance_requestP4sCANh>
	can_send_msg( 0, &msg2 );
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	be 01       	movw	r22, r28
     250:	0e 94 ca 10 	call	0x2194	; 0x2194 <_Z12can_send_msghP4sCAN>
}
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <main>:
//********** main *****************************************************
word prevPosition = 0;

int main(void)
{
	init();
     25a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z4initv>
    while (1)
    {	
    	// CAN Messaging will directly Start/Stop the motor.
		delay(one_second);
     25e:	60 e8       	ldi	r22, 0x80	; 128
     260:	7a e1       	ldi	r23, 0x1A	; 26
     262:	86 e0       	ldi	r24, 0x06	; 6
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 4e 19 	call	0x329c	; 0x329c <_Z5delayl>
		delay(one_second);
     26a:	60 e8       	ldi	r22, 0x80	; 128
     26c:	7a e1       	ldi	r23, 0x1A	; 26
     26e:	86 e0       	ldi	r24, 0x06	; 6
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 4e 19 	call	0x329c	; 0x329c <_Z5delayl>
     276:	f3 cf       	rjmp	.-26     	; 0x25e <main+0x4>

00000278 <_Z17extract_float_msgPh>:
/**************** VARIABLES *************************************/
uint8_t  size = sizeof(float);

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
     278:	df 93       	push	r29
     27a:	cf 93       	push	r28
     27c:	00 d0       	rcall	.+0      	; 0x27e <_Z17extract_float_msgPh+0x6>
     27e:	00 d0       	rcall	.+0      	; 0x280 <_Z17extract_float_msgPh+0x8>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	a8 2f       	mov	r26, r24
     286:	b9 2f       	mov	r27, r25
     288:	fe 01       	movw	r30, r28
     28a:	31 96       	adiw	r30, 0x01	; 1

/**************** VARIABLES *************************************/
uint8_t  size = sizeof(float);

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
     28c:	ce 01       	movw	r24, r28
     28e:	05 96       	adiw	r24, 0x05	; 5
{
	float_array 	floater;
	for (int i=0; i<4; i++)
		floater.array[i] = mdata[i];
     290:	2d 91       	ld	r18, X+
     292:	21 93       	st	Z+, r18

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
	float_array 	floater;
	for (int i=0; i<4; i++)
     294:	e8 17       	cp	r30, r24
     296:	f9 07       	cpc	r31, r25
     298:	d9 f7       	brne	.-10     	; 0x290 <_Z17extract_float_msgPh+0x18>
		floater.array[i] = mdata[i];
	return floater.value;
}
     29a:	59 81       	ldd	r21, Y+1	; 0x01
     29c:	4a 81       	ldd	r20, Y+2	; 0x02
     29e:	3b 81       	ldd	r19, Y+3	; 0x03
     2a0:	2c 81       	ldd	r18, Y+4	; 0x04
     2a2:	65 2f       	mov	r22, r21
     2a4:	74 2f       	mov	r23, r20
     2a6:	83 2f       	mov	r24, r19
     2a8:	92 2f       	mov	r25, r18
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	cf 91       	pop	r28
     2b4:	df 91       	pop	r29
     2b6:	08 95       	ret

000002b8 <_Z15extract_word_bePh>:
word extract_word_be( byte* mData )
{
     2b8:	fc 01       	movw	r30, r24
	word retval = 0;
	retval |= (mData[0]<<8);
     2ba:	50 81       	ld	r21, Z
     2bc:	40 e0       	ldi	r20, 0x00	; 0
	retval |= mData[1];
     2be:	21 81       	ldd	r18, Z+1	; 0x01
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	24 2b       	or	r18, r20
     2c4:	35 2b       	or	r19, r21
	return retval;
}
     2c6:	c9 01       	movw	r24, r18
     2c8:	08 95       	ret

000002ca <_Z15extract_word_lePh>:
word extract_word_le( byte* mData )
{
     2ca:	fc 01       	movw	r30, r24
	word retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     2cc:	51 81       	ldd	r21, Z+1	; 0x01
     2ce:	40 e0       	ldi	r20, 0x00	; 0
	return retval;
}
word extract_word_le( byte* mData )
{
	word retval = 0;
	retval |= mData[0];
     2d0:	20 81       	ld	r18, Z
     2d2:	30 e0       	ldi	r19, 0x00	; 0
	retval |= (mData[1]<<8 );
     2d4:	24 2b       	or	r18, r20
     2d6:	35 2b       	or	r19, r21
	return retval;
}
     2d8:	c9 01       	movw	r24, r18
     2da:	08 95       	ret

000002dc <_Z19extract_long_int_bePh>:

long int extract_long_int_be( byte* mData)
{
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
     2e6:	61 81       	ldd	r22, Z+1	; 0x01
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	cb 01       	movw	r24, r22
     2f0:	77 27       	eor	r23, r23
     2f2:	66 27       	eor	r22, r22
}

long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
     2f4:	20 81       	ld	r18, Z
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	52 2f       	mov	r21, r18
     2fe:	44 27       	eor	r20, r20
     300:	33 27       	eor	r19, r19
     302:	22 27       	eor	r18, r18
	retval |= (((unsigned long)mData[1])<<16);
     304:	62 2b       	or	r22, r18
     306:	73 2b       	or	r23, r19
     308:	84 2b       	or	r24, r20
     30a:	95 2b       	or	r25, r21
	retval |= (mData[2]<<8);
     30c:	32 81       	ldd	r19, Z+2	; 0x02
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	44 27       	eor	r20, r20
     312:	37 fd       	sbrc	r19, 7
     314:	40 95       	com	r20
     316:	54 2f       	mov	r21, r20
	retval |=  mData[3];
     318:	e3 80       	ldd	r14, Z+3	; 0x03
     31a:	ff 24       	eor	r15, r15
     31c:	00 e0       	ldi	r16, 0x00	; 0
     31e:	10 e0       	ldi	r17, 0x00	; 0
long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
	retval |= (mData[2]<<8);
     320:	2e 29       	or	r18, r14
     322:	3f 29       	or	r19, r15
     324:	40 2b       	or	r20, r16
     326:	51 2b       	or	r21, r17
	retval |=  mData[3];
     328:	26 2b       	or	r18, r22
     32a:	37 2b       	or	r19, r23
     32c:	48 2b       	or	r20, r24
     32e:	59 2b       	or	r21, r25
	return retval;
}
     330:	b9 01       	movw	r22, r18
     332:	ca 01       	movw	r24, r20
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	ff 90       	pop	r15
     33a:	ef 90       	pop	r14
     33c:	08 95       	ret

0000033e <_Z19extract_long_int_lePh>:
long int extract_long_int_le( byte* mData)
{
     33e:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     340:	22 81       	ldd	r18, Z+2	; 0x02
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	a9 01       	movw	r20, r18
     34a:	33 27       	eor	r19, r19
     34c:	22 27       	eor	r18, r18
	retval |= ((long)mData[3]<<24);
     34e:	63 81       	ldd	r22, Z+3	; 0x03
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	96 2f       	mov	r25, r22
     358:	88 27       	eor	r24, r24
     35a:	77 27       	eor	r23, r23
     35c:	66 27       	eor	r22, r22
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     35e:	26 2b       	or	r18, r22
     360:	37 2b       	or	r19, r23
     362:	48 2b       	or	r20, r24
     364:	59 2b       	or	r21, r25
	return retval;
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
     366:	60 81       	ld	r22, Z
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     36e:	26 2b       	or	r18, r22
     370:	37 2b       	or	r19, r23
     372:	48 2b       	or	r20, r24
     374:	59 2b       	or	r21, r25
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     376:	91 81       	ldd	r25, Z+1	; 0x01
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
	retval |= ((long)mData[2])<<16;
	retval |= ((long)mData[3]<<24);
     382:	28 2b       	or	r18, r24
     384:	39 2b       	or	r19, r25
     386:	4a 2b       	or	r20, r26
     388:	5b 2b       	or	r21, r27
	return retval;
}
     38a:	b9 01       	movw	r22, r18
     38c:	ca 01       	movw	r24, r20
     38e:	08 95       	ret

00000390 <_Z17can_proc_tilt_msgP4sCAN>:
}

/* Extract angle from the Message */
#define KConst 0.25
void can_proc_tilt_msg( sCAN* mMsg )
{
     390:	cf 93       	push	r28
     392:	fc 01       	movw	r30, r24
	byte yh  = mMsg->data[3];
	byte yl  = mMsg->data[2];
	short y1  = ((yh<<8) | yl);
     394:	30 85       	ldd	r19, Z+8	; 0x08
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	67 81       	ldd	r22, Z+7	; 0x07
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	62 2b       	or	r22, r18
     39e:	73 2b       	or	r23, r19
	float y2 = ((float)y1 / (16535.0));
     3a0:	88 27       	eor	r24, r24
     3a2:	77 fd       	sbrc	r23, 7
     3a4:	80 95       	com	r24
     3a6:	98 2f       	mov	r25, r24
     3a8:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	3e e2       	ldi	r19, 0x2E	; 46
     3b0:	41 e8       	ldi	r20, 0x81	; 129
     3b2:	56 e4       	ldi	r21, 0x46	; 70
     3b4:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
	// multiply by proportionality constant

	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
     3bc:	8a e0       	ldi	r24, 0x0A	; 10
     3be:	80 93 38 02 	sts	0x0238, r24
	Destination.speed     = fabs(y2);
     3c2:	da 01       	movw	r26, r20
     3c4:	c9 01       	movw	r24, r18
     3c6:	bf 77       	andi	r27, 0x7F	; 127
     3c8:	80 93 53 02 	sts	0x0253, r24
     3cc:	90 93 54 02 	sts	0x0254, r25
     3d0:	a0 93 55 02 	sts	0x0255, r26
     3d4:	b0 93 56 02 	sts	0x0256, r27
	Destination.direction = (y2 > 0);
     3d8:	c1 e0       	ldi	r28, 0x01	; 1
     3da:	ca 01       	movw	r24, r20
     3dc:	b9 01       	movw	r22, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	a9 01       	movw	r20, r18
     3e4:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
     3e8:	18 16       	cp	r1, r24
     3ea:	24 f4       	brge	.+8      	; 0x3f4 <_Z17can_proc_tilt_msgP4sCAN+0x64>
     3ec:	c0 93 52 02 	sts	0x0252, r28
}
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret
	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
	Destination.speed     = fabs(y2);
	Destination.direction = (y2 > 0);
     3f4:	c0 e0       	ldi	r28, 0x00	; 0
     3f6:	c0 93 52 02 	sts	0x0252, r28
}
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <_Z21can_proc_set_stop_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_set_stop_msg( sCAN* mMsg )
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
	if (mMsg->data[0] == 1)
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	f1 f0       	breq	.+60     	; 0x446 <_Z21can_proc_set_stop_msgP4sCAN+0x48>
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
	} else if (mMsg->data[0] == 2)
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	19 f0       	breq	.+6      	; 0x414 <_Z21can_proc_set_stop_msgP4sCAN+0x16>
	//EndPoint1.angle = 0xFFFFFF12;
	//EndPoint2.angle = 0xFFFFFF13;
	//order_stops_by_value();
	//compute_range();
	//save_cal();
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
	} else if (mMsg->data[0] == 2)
	{
		EndPoint2.angle = extract_long_int_be( &(mMsg->data[1]) );
     414:	ce 01       	movw	r24, r28
     416:	06 96       	adiw	r24, 0x06	; 6
     418:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z19extract_long_int_bePh>
     41c:	60 93 28 02 	sts	0x0228, r22
     420:	70 93 29 02 	sts	0x0229, r23
     424:	80 93 2a 02 	sts	0x022A, r24
     428:	90 93 2b 02 	sts	0x022B, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	word retval = 0;
	retval |= (mData[0]<<8);
     42c:	3a 85       	ldd	r19, Y+10	; 0x0a
     42e:	20 e0       	ldi	r18, 0x00	; 0
	retval |= mData[1];
     430:	8b 85       	ldd	r24, Y+11	; 0x0b
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	82 2b       	or	r24, r18
     436:	93 2b       	or	r25, r19
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
	} else if (mMsg->data[0] == 2)
	{
		EndPoint2.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint2.value = extract_word_be	 ( &(mMsg->data[5]) );
     438:	90 93 2d 02 	sts	0x022D, r25
     43c:	80 93 2c 02 	sts	0x022C, r24
	//EndPoint1.angle = 0xFFFFFF12;
	//EndPoint2.angle = 0xFFFFFF13;
	//order_stops_by_value();
	//compute_range();
	//save_cal();
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret
/* Extract angle from the Message */
void can_proc_set_stop_msg( sCAN* mMsg )
{
	if (mMsg->data[0] == 1)
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
     446:	ce 01       	movw	r24, r28
     448:	06 96       	adiw	r24, 0x06	; 6
     44a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z19extract_long_int_bePh>
     44e:	60 93 22 02 	sts	0x0222, r22
     452:	70 93 23 02 	sts	0x0223, r23
     456:	80 93 24 02 	sts	0x0224, r24
     45a:	90 93 25 02 	sts	0x0225, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	word retval = 0;
	retval |= (mData[0]<<8);
     45e:	3a 85       	ldd	r19, Y+10	; 0x0a
     460:	20 e0       	ldi	r18, 0x00	; 0
	retval |= mData[1];
     462:	8b 85       	ldd	r24, Y+11	; 0x0b
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	82 2b       	or	r24, r18
     468:	93 2b       	or	r25, r19
void can_proc_set_stop_msg( sCAN* mMsg )
{
	if (mMsg->data[0] == 1)
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
     46a:	90 93 27 02 	sts	0x0227, r25
     46e:	80 93 26 02 	sts	0x0226, r24
	//EndPoint1.angle = 0xFFFFFF12;
	//EndPoint2.angle = 0xFFFFFF13;
	//order_stops_by_value();
	//compute_range();
	//save_cal();
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <_Z26can_proc_move_to_angle_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_move_to_angle_msg ( sCAN* mMsg )
{
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	ec 01       	movw	r28, r24
	// Angle is a 4 byte signed integer.  
	// It is degrees * 100 
	long int tmp_angle 	 		  = extract_long_int_be( mMsg->data );
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z19extract_long_int_bePh>
	Destination.starting_position = PotSample[1];
     484:	20 91 80 02 	lds	r18, 0x0280
     488:	30 91 81 02 	lds	r19, 0x0281
     48c:	30 93 4f 02 	sts	0x024F, r19
     490:	20 93 4e 02 	sts	0x024E, r18
	Destination.position 		  = convert_to_value(tmp_angle);
     494:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z16convert_to_valuel>
     498:	90 93 51 02 	sts	0x0251, r25
     49c:	80 93 50 02 	sts	0x0250, r24
	
	short spd  = (mMsg->data[4]<<8) + mMsg->data[5];
     4a0:	99 85       	ldd	r25, Y+9	; 0x09
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	2a 85       	ldd	r18, Y+10	; 0x0a
     4a6:	82 0f       	add	r24, r18
     4a8:	91 1d       	adc	r25, r1
	Destination.speed = (spd/100);	    // hundredth percent is sent.
     4aa:	64 e6       	ldi	r22, 0x64	; 100
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodhi4>
     4b2:	88 27       	eor	r24, r24
     4b4:	77 fd       	sbrc	r23, 7
     4b6:	80 95       	com	r24
     4b8:	98 2f       	mov	r25, r24
     4ba:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
     4be:	60 93 53 02 	sts	0x0253, r22
     4c2:	70 93 54 02 	sts	0x0254, r23
     4c6:	80 93 55 02 	sts	0x0255, r24
     4ca:	90 93 56 02 	sts	0x0256, r25
	get_direction_to_destination();
     4ce:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z28get_direction_to_destinationv>
	MotorState = MOTOR_REQUEST_PENDING;
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	80 93 38 02 	sts	0x0238, r24
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <_Z23can_proc_move_speed_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_move_speed_msg( sCAN* mMsg )
{
     4de:	fc 01       	movw	r30, r24
	return floater.value;
}
word extract_word_be( byte* mData )
{
	word retval = 0;
	retval |= (mData[0]<<8);
     4e0:	35 81       	ldd	r19, Z+5	; 0x05
     4e2:	20 e0       	ldi	r18, 0x00	; 0
	retval |= mData[1];
     4e4:	66 81       	ldd	r22, Z+6	; 0x06
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	62 2b       	or	r22, r18
     4ea:	73 2b       	or	r23, r19
{
	// speed is a float
	// Value is a number [-100.00 to 100.00]  * 100  == [-10000..10000]
	// So 10,000 represents 100.00%
	short speed = (short)extract_word_be( mMsg->data );	
	float fspeed = speed;
     4ec:	88 27       	eor	r24, r24
     4ee:	77 fd       	sbrc	r23, 7
     4f0:	80 95       	com	r24
     4f2:	98 2f       	mov	r25, r24
     4f4:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
	Destination.speed = (fspeed / 10000.0);
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e4       	ldi	r19, 0x40	; 64
     4fc:	4c e1       	ldi	r20, 0x1C	; 28
     4fe:	56 e4       	ldi	r21, 0x46	; 70
     500:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
     504:	26 2f       	mov	r18, r22
     506:	37 2f       	mov	r19, r23
     508:	48 2f       	mov	r20, r24
     50a:	59 2f       	mov	r21, r25
     50c:	20 93 53 02 	sts	0x0253, r18
     510:	30 93 54 02 	sts	0x0254, r19
     514:	40 93 55 02 	sts	0x0255, r20
     518:	50 93 56 02 	sts	0x0256, r21
	if (Destination.speed > 0)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	a9 01       	movw	r20, r18
     522:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
     526:	18 16       	cp	r1, r24
     528:	34 f0       	brlt	.+12     	; 0x536 <__stack+0x37>
		Destination.direction = 1;
	else {
		Destination.direction = 0;
     52a:	10 92 52 02 	sts	0x0252, r1
		//Destination.speed = Destination.speed;
	}
	MotorState = MOTOR_REQUEST_PENDING;
     52e:	8a e0       	ldi	r24, 0x0A	; 10
     530:	80 93 38 02 	sts	0x0238, r24
}
     534:	08 95       	ret
	// So 10,000 represents 100.00%
	short speed = (short)extract_word_be( mMsg->data );	
	float fspeed = speed;
	Destination.speed = (fspeed / 10000.0);
	if (Destination.speed > 0)
		Destination.direction = 1;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 52 02 	sts	0x0252, r24
	else {
		Destination.direction = 0;
		//Destination.speed = Destination.speed;
	}
	MotorState = MOTOR_REQUEST_PENDING;
     53c:	8a e0       	ldi	r24, 0x0A	; 10
     53e:	80 93 38 02 	sts	0x0238, r24
}
     542:	08 95       	ret

00000544 <_Z28can_proc_move_dual_speed_msgP4sCAN>:

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
	return floater.value;
}
word extract_word_be( byte* mData )
{
	word retval = 0;
	retval |= (mData[0]<<8);
     54a:	9d 81       	ldd	r25, Y+5	; 0x05
     54c:	80 e0       	ldi	r24, 0x00	; 0
	retval |= mData[1];
     54e:	6e 81       	ldd	r22, Y+6	; 0x06
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	68 2b       	or	r22, r24
     554:	79 2b       	or	r23, r25

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float
     556:	88 27       	eor	r24, r24
     558:	77 fd       	sbrc	r23, 7
     55a:	80 95       	com	r24
     55c:	98 2f       	mov	r25, r24
     55e:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e4       	ldi	r19, 0x40	; 64
     566:	4c e1       	ldi	r20, 0x1C	; 28
     568:	56 e4       	ldi	r21, 0x46	; 70
     56a:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
     56e:	60 93 53 02 	sts	0x0253, r22
     572:	70 93 54 02 	sts	0x0254, r23
     576:	80 93 55 02 	sts	0x0255, r24
     57a:	90 93 56 02 	sts	0x0256, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	word retval = 0;
	retval |= (mData[0]<<8);
     57e:	9f 81       	ldd	r25, Y+7	; 0x07
     580:	80 e0       	ldi	r24, 0x00	; 0
	retval |= mData[1];
     582:	68 85       	ldd	r22, Y+8	; 0x08
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	68 2b       	or	r22, r24
     588:	79 2b       	or	r23, r25
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float

	speed = extract_word_be( &(mMsg->data[2]) );
	Destination.speed2 = ((float)speed / 10000.0);
     58a:	88 27       	eor	r24, r24
     58c:	77 fd       	sbrc	r23, 7
     58e:	80 95       	com	r24
     590:	98 2f       	mov	r25, r24
     592:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e4       	ldi	r19, 0x40	; 64
     59a:	4c e1       	ldi	r20, 0x1C	; 28
     59c:	56 e4       	ldi	r21, 0x46	; 70
     59e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
     5a2:	60 93 57 02 	sts	0x0257, r22
     5a6:	70 93 58 02 	sts	0x0258, r23
     5aa:	80 93 59 02 	sts	0x0259, r24
     5ae:	90 93 5a 02 	sts	0x025A, r25

	// There's no direction for unidirectional mode!
	//Destination.direction = 1;	
	MotorState = MOTOR_REQUEST_PENDING;
     5b2:	8a e0       	ldi	r24, 0x0A	; 10
     5b4:	80 93 38 02 	sts	0x0238, r24
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <_Z29can_proc_max_acceleration_msgP4sCAN>:

void can_proc_max_acceleration_msg ( sCAN* mMsg )
{
}
     5be:	08 95       	ret

000005c0 <_Z13can_prep_stopP4sCANh>:
		Calibrated Stop 1	(POT value & angle)
		Calibrated Stop 2	(POT value & angle)
***********************************************************/
/* For informational purposes, send our travel end points. */
void can_prep_stop( sCAN* mMsg, byte mStopNumber )
{
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
     5c8:	16 2f       	mov	r17, r22
	word  PotValue=0;
	long int Angle=0;
    mMsg->id 	  = create_CAN_eid( 0x00, ID_CALIBRATED_STOP, MyInstance );
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	65 e4       	ldi	r22, 0x45	; 69
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	40 91 c3 02 	lds	r20, 0x02C3
     5d4:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z14create_CAN_eidhth>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	88 83       	st	Y, r24
     5de:	99 83       	std	Y+1, r25	; 0x01
     5e0:	aa 83       	std	Y+2, r26	; 0x02
     5e2:	bb 83       	std	Y+3, r27	; 0x03

    if (mStopNumber==1) {
     5e4:	11 30       	cpi	r17, 0x01	; 1
     5e6:	59 f1       	breq	.+86     	; 0x63e <_Z13can_prep_stopP4sCANh+0x7e>
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
    } else if (mStopNumber==2) { 
     5e8:	12 30       	cpi	r17, 0x02	; 2
     5ea:	a9 f0       	breq	.+42     	; 0x616 <_Z13can_prep_stopP4sCANh+0x56>
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
    	PotValue = EndPoint2.value;
    	Angle    = EndPoint2.angle;
    }
    mMsg->data[0] = mStopNumber;
     5f8:	1d 83       	std	Y+5, r17	; 0x05
	word tmp = hi_word(Angle);
	mMsg->data[1] = hi(tmp);
     5fa:	5e 83       	std	Y+6, r21	; 0x06
	mMsg->data[2] = lo(tmp);	
     5fc:	8f 83       	std	Y+7, r24	; 0x07
	tmp = lo_word(Angle);
	mMsg->data[3] = hi(tmp);
     5fe:	48 87       	std	Y+8, r20	; 0x08
	mMsg->data[4] = lo(tmp);
     600:	39 87       	std	Y+9, r19	; 0x09
	mMsg->data[5] = hi(PotValue);
     602:	2a 87       	std	Y+10, r18	; 0x0a
	mMsg->data[6] = lo(PotValue);
     604:	9b 87       	std	Y+11, r25	; 0x0b
    mMsg->header.DLC = 7;
     606:	8c 81       	ldd	r24, Y+4	; 0x04
     608:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     60a:	8e 60       	ori	r24, 0x0E	; 14
     60c:	8c 83       	std	Y+4, r24	; 0x04
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	08 95       	ret
    if (mStopNumber==1) {
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
    } else if (mStopNumber==2) { 
    	PotValue = EndPoint2.value;
    	Angle    = EndPoint2.angle;
     616:	20 91 28 02 	lds	r18, 0x0228
     61a:	40 91 29 02 	lds	r20, 0x0229
     61e:	82 2f       	mov	r24, r18
     620:	94 2f       	mov	r25, r20
     622:	a0 91 2a 02 	lds	r26, 0x022A
     626:	b0 91 2b 02 	lds	r27, 0x022B
     62a:	cd 01       	movw	r24, r26
     62c:	aa 27       	eor	r26, r26
     62e:	bb 27       	eor	r27, r27
     630:	59 2f       	mov	r21, r25
     632:	32 2f       	mov	r19, r18
     634:	20 91 2d 02 	lds	r18, 0x022D
     638:	90 91 2c 02 	lds	r25, 0x022C
     63c:	dd cf       	rjmp	.-70     	; 0x5f8 <_Z13can_prep_stopP4sCANh+0x38>
	long int Angle=0;
    mMsg->id 	  = create_CAN_eid( 0x00, ID_CALIBRATED_STOP, MyInstance );

    if (mStopNumber==1) {
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
     63e:	20 91 22 02 	lds	r18, 0x0222
     642:	40 91 23 02 	lds	r20, 0x0223
     646:	82 2f       	mov	r24, r18
     648:	94 2f       	mov	r25, r20
     64a:	a0 91 24 02 	lds	r26, 0x0224
     64e:	b0 91 25 02 	lds	r27, 0x0225
     652:	cd 01       	movw	r24, r26
     654:	aa 27       	eor	r26, r26
     656:	bb 27       	eor	r27, r27
     658:	59 2f       	mov	r21, r25
     65a:	32 2f       	mov	r19, r18
     65c:	20 91 27 02 	lds	r18, 0x0227
     660:	90 91 26 02 	lds	r25, 0x0226
     664:	c9 cf       	rjmp	.-110    	; 0x5f8 <_Z13can_prep_stopP4sCANh+0x38>

00000666 <_Z16can_file_messageP4sCAN>:
		Set Stop 1	(Mark the current motor position as Stop 1 - angle given)
#define ID_MOVE_TO_ANGLE				0x0042		 Instance goes with intended Receiver
#define ID_MOVE_SPEED					0x0043
#define ID_SET_MAX_MOTOR_ACCEL			0x0044		*/
void can_file_message( sCAN* mMsg )
{
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
     66c:	80 e4       	ldi	r24, 0x40	; 64
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	60 91 c3 02 	lds	r22, 0x02C3
     674:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	68 81       	ld	r22, Y
     67e:	79 81       	ldd	r23, Y+1	; 0x01
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	9b 81       	ldd	r25, Y+3	; 0x03
     684:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
     688:	88 23       	and	r24, r24
     68a:	e1 f0       	breq	.+56     	; 0x6c4 <_Z16can_file_messageP4sCAN+0x5e>
	{
		// data[0] == [0x1x] means report on the mark stop.
		if ( (mMsg->data[0] & 0x10) == 0x10)
     68c:	8d 81       	ldd	r24, Y+5	; 0x05
     68e:	84 fd       	sbrc	r24, 4
     690:	09 c0       	rjmp	.+18     	; 0x6a4 <_Z16can_file_messageP4sCAN+0x3e>
			can_prep_stop( &msg1, 1 ); 
			can_prep_stop( &msg2, 2 );
			System_Send_Status=0x03;		// buff 1 & 2
		} else {
			// The request has been to set "mark" a stop.
			can_proc_set_stop_msg( mMsg );
     692:	ce 01       	movw	r24, r28
     694:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z21can_proc_set_stop_msgP4sCAN>
			System_Send_Status = 0x10;
     698:	80 e1       	ldi	r24, 0x10	; 16
     69a:	80 93 d0 02 	sts	0x02D0, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
	{
		// data[0] == [0x1x] means report on the mark stop.
		if ( (mMsg->data[0] & 0x10) == 0x10)
		{
			can_prep_stop( &msg1, 1 ); 
     6a4:	88 e8       	ldi	r24, 0x88	; 136
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z13can_prep_stopP4sCANh>
			can_prep_stop( &msg2, 2 );
     6ae:	87 e9       	ldi	r24, 0x97	; 151
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	62 e0       	ldi	r22, 0x02	; 2
     6b4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z13can_prep_stopP4sCANh>
			System_Send_Status=0x03;		// buff 1 & 2
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	80 93 d0 02 	sts	0x02D0, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret
			can_proc_set_stop_msg( mMsg );
			System_Send_Status = 0x10;
			// Save EEPROM occurs in time slice function!
		}
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_TO_ANGLE, MyInstance)) )
     6c4:	81 e4       	ldi	r24, 0x41	; 65
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	60 91 c3 02 	lds	r22, 0x02C3
     6cc:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	68 81       	ld	r22, Y
     6d6:	79 81       	ldd	r23, Y+1	; 0x01
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	9b 81       	ldd	r25, Y+3	; 0x03
     6dc:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
     6e0:	88 23       	and	r24, r24
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <_Z16can_file_messageP4sCAN+0x80>
     6e4:	76 c0       	rjmp	.+236    	; 0x7d2 <_Z16can_file_messageP4sCAN+0x16c>
	{
		// includes a speed:
		can_proc_move_to_angle_msg( mMsg );
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_SPEED, MyInstance)) )	
     6e6:	82 e4       	ldi	r24, 0x42	; 66
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	60 91 c3 02 	lds	r22, 0x02C3
     6ee:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	68 81       	ld	r22, Y
     6f8:	79 81       	ldd	r23, Y+1	; 0x01
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	9b 81       	ldd	r25, Y+3	; 0x03
     6fe:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
     702:	88 23       	and	r24, r24
     704:	09 f0       	breq	.+2      	; 0x708 <_Z16can_file_messageP4sCAN+0xa2>
     706:	6b c0       	rjmp	.+214    	; 0x7de <_Z16can_file_messageP4sCAN+0x178>
	{
		can_proc_move_speed_msg( mMsg );
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
     708:	84 e4       	ldi	r24, 0x44	; 68
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	60 91 c3 02 	lds	r22, 0x02C3
     710:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
     714:	9b 01       	movw	r18, r22
     716:	ac 01       	movw	r20, r24
     718:	68 81       	ld	r22, Y
     71a:	79 81       	ldd	r23, Y+1	; 0x01
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	9b 81       	ldd	r25, Y+3	; 0x03
     720:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
     724:	88 23       	and	r24, r24
     726:	09 f0       	breq	.+2      	; 0x72a <_Z16can_file_messageP4sCAN+0xc4>
     728:	5e c0       	rjmp	.+188    	; 0x7e6 <_Z16can_file_messageP4sCAN+0x180>
	{
		can_proc_move_dual_speed_msg( mMsg );
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_SET_MAX_MOTOR_ACCEL, MyInstance)) )
     72a:	83 e4       	ldi	r24, 0x43	; 67
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	60 91 c3 02 	lds	r22, 0x02C3
     732:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	68 81       	ld	r22, Y
     73c:	79 81       	ldd	r23, Y+1	; 0x01
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	9b 81       	ldd	r25, Y+3	; 0x03
     742:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
     746:	88 23       	and	r24, r24
     748:	09 f0       	breq	.+2      	; 0x74c <_Z16can_file_messageP4sCAN+0xe6>
     74a:	a9 cf       	rjmp	.-174    	; 0x69e <_Z16can_file_messageP4sCAN+0x38>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     74c:	80 91 40 03 	lds	r24, 0x0340
	{
		can_proc_max_acceleration_msg( mMsg );
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
     750:	84 ff       	sbrs	r24, 4
     752:	a5 cf       	rjmp	.-182    	; 0x69e <_Z16can_file_messageP4sCAN+0x38>
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
     754:	81 e7       	ldi	r24, 0x71	; 113
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	68 81       	ld	r22, Y
     764:	79 81       	ldd	r23, Y+1	; 0x01
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	9b 81       	ldd	r25, Y+3	; 0x03
     76a:	0e 94 2f 13 	call	0x265e	; 0x265e <_Z8id_match6idTypeS_>
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_SET_MAX_MOTOR_ACCEL, MyInstance)) )
	{
		can_proc_max_acceleration_msg( mMsg );
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
     76e:	88 23       	and	r24, r24
     770:	09 f4       	brne	.+2      	; 0x774 <_Z16can_file_messageP4sCAN+0x10e>
     772:	95 cf       	rjmp	.-214    	; 0x69e <_Z16can_file_messageP4sCAN+0x38>
#define KConst 0.25
void can_proc_tilt_msg( sCAN* mMsg )
{
	byte yh  = mMsg->data[3];
	byte yl  = mMsg->data[2];
	short y1  = ((yh<<8) | yl);
     774:	98 85       	ldd	r25, Y+8	; 0x08
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	6f 81       	ldd	r22, Y+7	; 0x07
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	68 2b       	or	r22, r24
     77e:	79 2b       	or	r23, r25
	float y2 = ((float)y1 / (16535.0));
     780:	88 27       	eor	r24, r24
     782:	77 fd       	sbrc	r23, 7
     784:	80 95       	com	r24
     786:	98 2f       	mov	r25, r24
     788:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	3e e2       	ldi	r19, 0x2E	; 46
     790:	41 e8       	ldi	r20, 0x81	; 129
     792:	56 e4       	ldi	r21, 0x46	; 70
     794:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
	// multiply by proportionality constant

	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
     79c:	8a e0       	ldi	r24, 0x0A	; 10
     79e:	80 93 38 02 	sts	0x0238, r24
	Destination.speed     = fabs(y2);
     7a2:	da 01       	movw	r26, r20
     7a4:	c9 01       	movw	r24, r18
     7a6:	bf 77       	andi	r27, 0x7F	; 127
     7a8:	80 93 53 02 	sts	0x0253, r24
     7ac:	90 93 54 02 	sts	0x0254, r25
     7b0:	a0 93 55 02 	sts	0x0255, r26
     7b4:	b0 93 56 02 	sts	0x0256, r27
	Destination.direction = (y2 > 0);
     7b8:	c1 e0       	ldi	r28, 0x01	; 1
     7ba:	ca 01       	movw	r24, r20
     7bc:	b9 01       	movw	r22, r18
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	a9 01       	movw	r20, r18
     7c4:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	8c f4       	brge	.+34     	; 0x7ee <_Z16can_file_messageP4sCAN+0x188>
     7cc:	c0 93 52 02 	sts	0x0252, r28
     7d0:	66 cf       	rjmp	.-308    	; 0x69e <_Z16can_file_messageP4sCAN+0x38>
		}
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_TO_ANGLE, MyInstance)) )
	{
		// includes a speed:
		can_proc_move_to_angle_msg( mMsg );
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 3c 02 	call	0x478	; 0x478 <_Z26can_proc_move_to_angle_msgP4sCAN>
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret
		// includes a speed:
		can_proc_move_to_angle_msg( mMsg );
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_SPEED, MyInstance)) )	
	{
		can_proc_move_speed_msg( mMsg );
     7de:	ce 01       	movw	r24, r28
     7e0:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z23can_proc_move_speed_msgP4sCAN>
     7e4:	5c cf       	rjmp	.-328    	; 0x69e <_Z16can_file_messageP4sCAN+0x38>
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
	{
		can_proc_move_dual_speed_msg( mMsg );
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 a2 02 	call	0x544	; 0x544 <_Z28can_proc_move_dual_speed_msgP4sCAN>
     7ec:	58 cf       	rjmp	.-336    	; 0x69e <_Z16can_file_messageP4sCAN+0x38>
	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
	Destination.speed     = fabs(y2);
	Destination.direction = (y2 > 0);
     7ee:	c0 e0       	ldi	r28, 0x00	; 0
     7f0:	ed cf       	rjmp	.-38     	; 0x7cc <_Z16can_file_messageP4sCAN+0x166>

000007f2 <_Z20can_prep_motor_angleP4sCAN>:
    mMsg->header.DLC = 7;
    mMsg->header.rtr = 0;
}

void can_prep_motor_angle( sCAN* mMsg )
{
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
	byte size = 4;
    mMsg->id = create_CAN_eid( ID_MOTOR_ANGLE, MyInstance );
     808:	86 e4       	ldi	r24, 0x46	; 70
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	60 91 c3 02 	lds	r22, 0x02C3
     810:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
     814:	68 83       	st	Y, r22
     816:	79 83       	std	Y+1, r23	; 0x01
     818:	8a 83       	std	Y+2, r24	; 0x02
     81a:	9b 83       	std	Y+3, r25	; 0x03

	// FILL CURRENT ANGLE :
	float_array Angle; 
	Angle.value = get_motor_angle();
     81c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_Z15get_motor_anglev>
	for (int i=0; i<size; i++)
	    mMsg->data[i] = Angle.array[i];
     820:	6d 83       	std	Y+5, r22	; 0x05
     822:	7e 83       	std	Y+6, r23	; 0x06
     824:	8f 83       	std	Y+7, r24	; 0x07
     826:	98 87       	std	Y+8, r25	; 0x08

	// MOTOR CURRENT (Larger of left/right) (in Amps*10):
	word CurrentAvg = max(LeftCurrentSampleAvg*10, 
     828:	60 91 72 02 	lds	r22, 0x0272
     82c:	70 91 73 02 	lds	r23, 0x0273
     830:	80 91 74 02 	lds	r24, 0x0274
     834:	90 91 75 02 	lds	r25, 0x0275
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e2       	ldi	r20, 0x20	; 32
     83e:	51 e4       	ldi	r21, 0x41	; 65
     840:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
     844:	d6 2e       	mov	r13, r22
     846:	c7 2e       	mov	r12, r23
     848:	b8 2e       	mov	r11, r24
     84a:	a9 2e       	mov	r10, r25
     84c:	60 91 76 02 	lds	r22, 0x0276
     850:	70 91 77 02 	lds	r23, 0x0277
     854:	80 91 78 02 	lds	r24, 0x0278
     858:	90 91 79 02 	lds	r25, 0x0279
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e2       	ldi	r20, 0x20	; 32
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
     868:	16 2f       	mov	r17, r22
     86a:	07 2f       	mov	r16, r23
     86c:	f8 2e       	mov	r15, r24
     86e:	e9 2e       	mov	r14, r25
     870:	a6 01       	movw	r20, r12
     872:	95 01       	movw	r18, r10
     874:	65 2f       	mov	r22, r21
     876:	74 2f       	mov	r23, r20
     878:	83 2f       	mov	r24, r19
     87a:	92 2f       	mov	r25, r18
     87c:	d8 01       	movw	r26, r16
     87e:	f7 01       	movw	r30, r14
     880:	2b 2f       	mov	r18, r27
     882:	3a 2f       	mov	r19, r26
     884:	4f 2f       	mov	r20, r31
     886:	5e 2f       	mov	r21, r30
     888:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
     88c:	18 16       	cp	r1, r24
     88e:	fc f0       	brlt	.+62     	; 0x8ce <_Z20can_prep_motor_angleP4sCAN+0xdc>
     890:	a8 01       	movw	r20, r16
     892:	97 01       	movw	r18, r14
     894:	65 2f       	mov	r22, r21
     896:	74 2f       	mov	r23, r20
     898:	83 2f       	mov	r24, r19
     89a:	92 2f       	mov	r25, r18
     89c:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
						  RightCurrentSampleAvg*10 );

	mMsg->data[size+0] = hi(CurrentAvg);
     8a0:	79 87       	std	Y+9, r23	; 0x09
	mMsg->data[size+1] = lo(CurrentAvg);
     8a2:	6a 87       	std	Y+10, r22	; 0x0a

	// Make (TENTH DEG/SEC) ANGLE SPEED INSTEAD!!!!!:
	//short TenthDegSec = PotSpeed[1]
	mMsg->data[size+2] = hi(PotSpeed[1]);
     8a4:	80 91 3b 02 	lds	r24, 0x023B
     8a8:	90 91 3c 02 	lds	r25, 0x023C
     8ac:	9b 87       	std	Y+11, r25	; 0x0b
	mMsg->data[size+3] = lo(PotSpeed[1]);
     8ae:	8c 87       	std	Y+12, r24	; 0x0c

    mMsg->header.DLC = size+4;
     8b0:	8c 81       	ldd	r24, Y+4	; 0x04
     8b2:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     8b4:	80 61       	ori	r24, 0x10	; 16
     8b6:	8c 83       	std	Y+4, r24	; 0x04
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	08 95       	ret
	Angle.value = get_motor_angle();
	for (int i=0; i<size; i++)
	    mMsg->data[i] = Angle.array[i];

	// MOTOR CURRENT (Larger of left/right) (in Amps*10):
	word CurrentAvg = max(LeftCurrentSampleAvg*10, 
     8ce:	a6 01       	movw	r20, r12
     8d0:	95 01       	movw	r18, r10
     8d2:	e0 cf       	rjmp	.-64     	; 0x894 <_Z20can_prep_motor_angleP4sCAN+0xa2>

000008d4 <_Z25can_prep_motor_values_rawP4sCAN>:
    mMsg->header.DLC = size+4;
    mMsg->header.rtr = 0;
}

void can_prep_motor_values_raw( sCAN* mMsg )
{
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_VALUE, MyInstance );
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	67 e4       	ldi	r22, 0x47	; 71
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	40 91 c3 02 	lds	r20, 0x02C3
     8e8:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z14create_CAN_eidhth>
     8ec:	68 83       	st	Y, r22
     8ee:	79 83       	std	Y+1, r23	; 0x01
     8f0:	8a 83       	std	Y+2, r24	; 0x02
     8f2:	9b 83       	std	Y+3, r25	; 0x03
     8f4:	80 91 40 03 	lds	r24, 0x0340
	if (isConfigured(MODE_USE_ENCODER))  {
     8f8:	80 fd       	sbrc	r24, 0
     8fa:	2f c0       	rjmp	.+94     	; 0x95a <_Z25can_prep_motor_values_rawP4sCAN+0x86>
		mMsg->data[0] = hi(EncoderCount);
		mMsg->data[1] = lo(EncoderCount);	
	} else {
		mMsg->data[0] = hi(PotSample[1]);
     8fc:	80 91 80 02 	lds	r24, 0x0280
     900:	90 91 81 02 	lds	r25, 0x0281
     904:	9d 83       	std	Y+5, r25	; 0x05
		mMsg->data[1] = lo(PotSample[1]);
     906:	8e 83       	std	Y+6, r24	; 0x06
	}

	// Also send Currents Raw:
	word LeftAvg  = LeftCurrentSampleAvg;
     908:	60 91 72 02 	lds	r22, 0x0272
     90c:	70 91 73 02 	lds	r23, 0x0273
     910:	80 91 74 02 	lds	r24, 0x0274
     914:	90 91 75 02 	lds	r25, 0x0275
     918:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
     91c:	16 2f       	mov	r17, r22
     91e:	07 2f       	mov	r16, r23
	word RightAvg = RightCurrentSampleAvg;
     920:	60 91 76 02 	lds	r22, 0x0276
     924:	70 91 77 02 	lds	r23, 0x0277
     928:	80 91 78 02 	lds	r24, 0x0278
     92c:	90 91 79 02 	lds	r25, 0x0279
     930:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
	mMsg->data[2] = hi(LeftAvg );
     934:	0f 83       	std	Y+7, r16	; 0x07
	mMsg->data[3] = lo(LeftAvg );
     936:	18 87       	std	Y+8, r17	; 0x08
	mMsg->data[4] = hi(RightAvg);
     938:	79 87       	std	Y+9, r23	; 0x09
	mMsg->data[5] = lo(RightAvg);
     93a:	6a 87       	std	Y+10, r22	; 0x0a

	mMsg->data[6] = hi(PotSpeed[1]);
     93c:	80 91 3b 02 	lds	r24, 0x023B
     940:	90 91 3c 02 	lds	r25, 0x023C
     944:	9b 87       	std	Y+11, r25	; 0x0b
	mMsg->data[7] = lo(PotSpeed[1]);	
     946:	8c 87       	std	Y+12, r24	; 0x0c
    mMsg->header.DLC = 8;
     948:	8c 81       	ldd	r24, Y+4	; 0x04
     94a:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     94c:	80 61       	ori	r24, 0x10	; 16
     94e:	8c 83       	std	Y+4, r24	; 0x04
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

void can_prep_motor_values_raw( sCAN* mMsg )
{
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_VALUE, MyInstance );
	if (isConfigured(MODE_USE_ENCODER))  {
		mMsg->data[0] = hi(EncoderCount);
     95a:	80 91 5f 02 	lds	r24, 0x025F
     95e:	90 91 60 02 	lds	r25, 0x0260
     962:	9d 83       	std	Y+5, r25	; 0x05
		mMsg->data[1] = lo(EncoderCount);	
     964:	8e 83       	std	Y+6, r24	; 0x06
     966:	d0 cf       	rjmp	.-96     	; 0x908 <_Z25can_prep_motor_values_rawP4sCAN+0x34>

00000968 <_Z20can_prep_motor_speedP4sCAN11float_array>:
    mMsg->header.DLC = 8;
    mMsg->header.rtr = 0;
}

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
{
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	00 d0       	rcall	.+0      	; 0x972 <_Z20can_prep_motor_speedP4sCAN11float_array+0xa>
     972:	00 d0       	rcall	.+0      	; 0x974 <_Z20can_prep_motor_speedP4sCAN11float_array+0xc>
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	8c 01       	movw	r16, r24
     97a:	49 83       	std	Y+1, r20	; 0x01
     97c:	5a 83       	std	Y+2, r21	; 0x02
     97e:	6b 83       	std	Y+3, r22	; 0x03
     980:	7c 83       	std	Y+4, r23	; 0x04
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_SPEED, MyInstance );
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	68 e4       	ldi	r22, 0x48	; 72
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	40 91 c3 02 	lds	r20, 0x02C3
     98c:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z14create_CAN_eidhth>
     990:	f8 01       	movw	r30, r16
     992:	60 83       	st	Z, r22
     994:	71 83       	std	Z+1, r23	; 0x01
     996:	82 83       	std	Z+2, r24	; 0x02
     998:	93 83       	std	Z+3, r25	; 0x03
	if (config_byte_1 & MODE_USE_ENCODER)  {
     99a:	80 91 40 03 	lds	r24, 0x0340
     99e:	80 fd       	sbrc	r24, 0
     9a0:	25 c0       	rjmp	.+74     	; 0x9ec <_Z20can_prep_motor_speedP4sCAN11float_array+0x84>
		mMsg->data[0] = 2;	// 2 byte speed
		mMsg->data[1] = hi(EncoderSpeed);
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
     9a2:	30 91 00 01 	lds	r19, 0x0100
     9a6:	f8 01       	movw	r30, r16
     9a8:	35 83       	std	Z+5, r19	; 0x05
		for (int i=0; i<size; i++)
     9aa:	33 23       	and	r19, r19
     9ac:	61 f0       	breq	.+24     	; 0x9c6 <_Z20can_prep_motor_speedP4sCAN11float_array+0x5e>
     9ae:	fe 01       	movw	r30, r28
     9b0:	31 96       	adiw	r30, 0x01	; 1
	mMsg->data[7] = lo(PotSpeed[1]);	
    mMsg->header.DLC = 8;
    mMsg->header.rtr = 0;
}

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
     9b2:	d8 01       	movw	r26, r16
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	cf 01       	movw	r24, r30
     9b8:	83 0f       	add	r24, r19
     9ba:	91 1d       	adc	r25, r1
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
		for (int i=0; i<size; i++)
		    mMsg->data[i+1] = mSpeed.array[i];
     9bc:	21 91       	ld	r18, Z+
     9be:	2d 93       	st	X+, r18
		mMsg->data[1] = hi(EncoderSpeed);
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
		for (int i=0; i<size; i++)
     9c0:	e8 17       	cp	r30, r24
     9c2:	f9 07       	cpc	r31, r25
     9c4:	d9 f7       	brne	.-10     	; 0x9bc <_Z20can_prep_motor_speedP4sCAN11float_array+0x54>
		    mMsg->data[i+1] = mSpeed.array[i];
	    mMsg->header.DLC = size;
     9c6:	3f 70       	andi	r19, 0x0F	; 15
     9c8:	33 0f       	add	r19, r19
     9ca:	f8 01       	movw	r30, r16
     9cc:	84 81       	ldd	r24, Z+4	; 0x04
     9ce:	81 7e       	andi	r24, 0xE1	; 225
     9d0:	83 2b       	or	r24, r19
     9d2:	84 83       	std	Z+4, r24	; 0x04
	}
    mMsg->header.rtr = 0;
     9d4:	8e 7f       	andi	r24, 0xFE	; 254
     9d6:	f8 01       	movw	r30, r16
     9d8:	84 83       	std	Z+4, r24	; 0x04
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
{
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_SPEED, MyInstance );
	if (config_byte_1 & MODE_USE_ENCODER)  {
		mMsg->data[0] = 2;	// 2 byte speed
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	85 83       	std	Z+5, r24	; 0x05
		mMsg->data[1] = hi(EncoderSpeed);
     9f0:	80 91 61 02 	lds	r24, 0x0261
     9f4:	90 91 62 02 	lds	r25, 0x0262
     9f8:	96 83       	std	Z+6, r25	; 0x06
		mMsg->data[2] = lo(EncoderSpeed);
     9fa:	87 83       	std	Z+7, r24	; 0x07
		mMsg->header.DLC = 2;
     9fc:	84 81       	ldd	r24, Z+4	; 0x04
     9fe:	81 7e       	andi	r24, 0xE1	; 225
     a00:	84 60       	ori	r24, 0x04	; 4
     a02:	84 83       	std	Z+4, r24	; 0x04
     a04:	e7 cf       	rjmp	.-50     	; 0x9d4 <_Z20can_prep_motor_speedP4sCAN11float_array+0x6c>

00000a06 <_Z20can_prep_motor_accelP4sCAN11float_array>:
    mMsg->header.rtr = 0;
}

/* size of a float IEEE single precision is usually 4 bytes */
void can_prep_motor_accel( sCAN* mMsg, float_array mAccel )
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_ACCEL, MyInstance );
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	69 e4       	ldi	r22, 0x49	; 73
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	40 91 c3 02 	lds	r20, 0x02C3
     a16:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z14create_CAN_eidhth>
     a1a:	68 83       	st	Y, r22
     a1c:	79 83       	std	Y+1, r23	; 0x01
     a1e:	8a 83       	std	Y+2, r24	; 0x02
     a20:	9b 83       	std	Y+3, r25	; 0x03
	if (config_byte_1 & MODE_USE_ENCODER)  {    
     a22:	80 91 40 03 	lds	r24, 0x0340
     a26:	80 fd       	sbrc	r24, 0
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <_Z20can_prep_motor_accelP4sCAN11float_array+0x46>
		mMsg->data[0] = hi(EncoderAcceleration);
		mMsg->data[1] = lo(EncoderAcceleration);
	} else {
   		mMsg->data[0] = hi(PotAcceleration[1]);
     a2a:	80 91 3f 02 	lds	r24, 0x023F
     a2e:	90 91 40 02 	lds	r25, 0x0240
     a32:	9d 83       	std	Y+5, r25	; 0x05
   		mMsg->data[1] = lo(PotAcceleration[1]);
     a34:	8e 83       	std	Y+6, r24	; 0x06
	}
    mMsg->header.DLC = size;
     a36:	90 91 00 01 	lds	r25, 0x0100
     a3a:	9f 70       	andi	r25, 0x0F	; 15
     a3c:	99 0f       	add	r25, r25
     a3e:	8c 81       	ldd	r24, Y+4	; 0x04
     a40:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     a42:	89 2b       	or	r24, r25
     a44:	8c 83       	std	Y+4, r24	; 0x04
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret
/* size of a float IEEE single precision is usually 4 bytes */
void can_prep_motor_accel( sCAN* mMsg, float_array mAccel )
{
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_ACCEL, MyInstance );
	if (config_byte_1 & MODE_USE_ENCODER)  {    
		mMsg->data[0] = hi(EncoderAcceleration);
     a4c:	80 91 69 02 	lds	r24, 0x0269
     a50:	90 91 6a 02 	lds	r25, 0x026A
     a54:	9d 83       	std	Y+5, r25	; 0x05
		mMsg->data[1] = lo(EncoderAcceleration);
     a56:	8e 83       	std	Y+6, r24	; 0x06
     a58:	ee cf       	rjmp	.-36     	; 0xa36 <_Z20can_prep_motor_accelP4sCAN11float_array+0x30>

00000a5a <_Z21can_prep_motor_statusP4sCAN>:
    mMsg->header.DLC = size;
    mMsg->header.rtr = 0;
}

void can_prep_motor_status( sCAN* mMsg )
{
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_STATUS, MyInstance );
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	6a e4       	ldi	r22, 0x4A	; 74
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	40 91 c3 02 	lds	r20, 0x02C3
     a6a:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z14create_CAN_eidhth>
     a6e:	68 83       	st	Y, r22
     a70:	79 83       	std	Y+1, r23	; 0x01
     a72:	8a 83       	std	Y+2, r24	; 0x02
     a74:	9b 83       	std	Y+3, r25	; 0x03
	/* Send status byte:  0=stopped, 1=forward, 2=backward, 3=in stop 1 region
							4=in stop 2 region, 5=OverTemp, 6=OverVoltage,
							8= Trouble Codes set,					*/
	mMsg->data[0] = MotorState;							
     a76:	80 91 38 02 	lds	r24, 0x0238
     a7a:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC = 1;
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     a80:	82 60       	ori	r24, 0x02	; 2
     a82:	8c 83       	std	Y+4, r24	; 0x04
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
 ***************************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0;
     a8a:	10 92 40 03 	sts	0x0340, r1
	config_byte_2 = 0;
     a8e:	10 92 41 03 	sts	0x0341, r1
	compute_default_stops();
     a92:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_Z21compute_default_stopsv>
	
	// Default Thresholds:
	current_1_threshold = 0x7FF;
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	97 e0       	ldi	r25, 0x07	; 7
     a9a:	90 93 02 01 	sts	0x0102, r25
     a9e:	80 93 01 01 	sts	0x0101, r24
	current_2_threshold = 0x7FF;
     aa2:	90 93 04 01 	sts	0x0104, r25
     aa6:	80 93 03 01 	sts	0x0103, r24
}
     aaa:	08 95       	ret

00000aac <_Z13config_changeh>:

/* Callback for configuration change. */
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	09 f0       	breq	.+2      	; 0xab2 <_Z13config_changeh+0x6>
     ab0:	08 95       	ret
	{
		// Update BaseFrequency (even if not changed)
		SetBaseFrequency();			
     ab2:	0e 94 b9 06 	call	0xd72	; 0xd72 <_Z16SetBaseFrequencyv>
     ab6:	08 95       	ret

00000ab8 <_Z17save_stops_eepromPh>:
Save both structures EndPoint1 & EndPoint2.
RETURN:		Last address written + 1 (ie. next available
			EEPROM address)
*******************************************************/
byte* save_stops_eeprom(byte* addr)
{
     ab8:	9c 01       	movw	r18, r24
	byte size = sizeof(sEndPoint);
	// Save only EndPoint1 & EndPoint2:

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
     aba:	e2 e2       	ldi	r30, 0x22	; 34
     abc:	f2 e0       	ldi	r31, 0x02	; 2
     abe:	ac 01       	movw	r20, r24
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );
     ac0:	81 91       	ld	r24, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     ac2:	f9 99       	sbic	0x1f, 1	; 31
     ac4:	fe cf       	rjmp	.-4      	; 0xac2 <_Z17save_stops_eepromPh+0xa>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     ac6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     ac8:	52 bd       	out	0x22, r21	; 34
     aca:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     acc:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	fa 9a       	sbi	0x1f, 2	; 31
     ad4:	f9 9a       	sbi	0x1f, 1	; 31
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	4f 5f       	subi	r20, 0xFF	; 255
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
	byte size = sizeof(sEndPoint);
	// Save only EndPoint1 & EndPoint2:

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	e8 32       	cpi	r30, 0x28	; 40
     ae0:	f8 07       	cpc	r31, r24
     ae2:	71 f7       	brne	.-36     	; 0xac0 <_Z17save_stops_eepromPh+0x8>
     ae4:	2a 5f       	subi	r18, 0xFA	; 250
     ae6:	3f 4f       	sbci	r19, 0xFF	; 255
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
     ae8:	e8 e2       	ldi	r30, 0x28	; 40
     aea:	f2 e0       	ldi	r31, 0x02	; 2
     aec:	a9 01       	movw	r20, r18
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );	
     aee:	81 91       	ld	r24, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     af0:	f9 99       	sbic	0x1f, 1	; 31
     af2:	fe cf       	rjmp	.-4      	; 0xaf0 <_Z17save_stops_eepromPh+0x38>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     af4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     af6:	52 bd       	out	0x22, r21	; 34
     af8:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     afa:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	fa 9a       	sbi	0x1f, 2	; 31
     b02:	f9 9a       	sbi	0x1f, 1	; 31
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	4f 5f       	subi	r20, 0xFF	; 255
     b08:	5f 4f       	sbci	r21, 0xFF	; 255
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	ee 32       	cpi	r30, 0x2E	; 46
     b0e:	f8 07       	cpc	r31, r24
     b10:	71 f7       	brne	.-36     	; 0xaee <_Z17save_stops_eepromPh+0x36>
     b12:	2a 5f       	subi	r18, 0xFA	; 250
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
		eeprom_write_byte( addr++, *(ptr++) );	
	return addr;
}
     b16:	c9 01       	movw	r24, r18
     b18:	08 95       	ret

00000b1a <_Z17read_stops_eepromPh>:

Reads both structures EndPoint1 & EndPoint2 from EEPROM, 
and stores into the RAM.
***********************************************************/
byte* read_stops_eeprom(byte* addr)
{
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	9c 01       	movw	r18, r24
     b20:	e2 e2       	ldi	r30, 0x22	; 34
     b22:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b24:	f9 99       	sbic	0x1f, 1	; 31
     b26:	fe cf       	rjmp	.-4      	; 0xb24 <_Z17read_stops_eepromPh+0xa>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b28:	32 bd       	out	0x22, r19	; 34
     b2a:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b2c:	f8 9a       	sbi	0x1f, 0	; 31
     b2e:	40 b5       	in	r20, 0x20	; 32
	// Save only EndPoint1 & EndPoint2
	byte size = sizeof(sEndPoint);

	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     b30:	41 93       	st	Z+, r20
     b32:	2f 5f       	subi	r18, 0xFF	; 255
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
{
	// Save only EndPoint1 & EndPoint2
	byte size = sizeof(sEndPoint);

	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     b36:	42 e0       	ldi	r20, 0x02	; 2
     b38:	e8 32       	cpi	r30, 0x28	; 40
     b3a:	f4 07       	cpc	r31, r20
     b3c:	99 f7       	brne	.-26     	; 0xb24 <_Z17read_stops_eepromPh+0xa>
     b3e:	ec 01       	movw	r28, r24
     b40:	26 96       	adiw	r28, 0x06	; 6
     b42:	ce 01       	movw	r24, r28
     b44:	e8 e2       	ldi	r30, 0x28	; 40
     b46:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b48:	f9 99       	sbic	0x1f, 1	; 31
     b4a:	fe cf       	rjmp	.-4      	; 0xb48 <_Z17read_stops_eepromPh+0x2e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b4c:	92 bd       	out	0x22, r25	; 34
     b4e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b50:	f8 9a       	sbi	0x1f, 0	; 31
     b52:	20 b5       	in	r18, 0x20	; 32
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     b54:	21 93       	st	Z+, r18
     b56:	01 96       	adiw	r24, 0x01	; 1
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     b58:	22 e0       	ldi	r18, 0x02	; 2
     b5a:	ee 32       	cpi	r30, 0x2E	; 46
     b5c:	f2 07       	cpc	r31, r18
     b5e:	a1 f7       	brne	.-24     	; 0xb48 <_Z17read_stops_eepromPh+0x2e>
		*(ptr++) = eeprom_read_byte( addr++ );
	
	compute_range();
     b60:	0e 94 14 0a 	call	0x1428	; 0x1428 <_Z13compute_rangev>
     b64:	26 96       	adiw	r28, 0x06	; 6
	return addr;
}
     b66:	ce 01       	movw	r24, r28
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <_Z29save_currentThresholds_eepromPh>:
****************************************************/
byte* save_currentThresholds_eeprom(byte* addr)
{
	// CURRENT THRESHOLD (for shutoff)
	// SAMPLING IS 10 BITS ONLY.
	eeprom_write_byte( addr++, lo(current_1_threshold>>2) );	
     b6e:	ac 01       	movw	r20, r24
     b70:	4f 5f       	subi	r20, 0xFF	; 255
     b72:	5f 4f       	sbci	r21, 0xFF	; 255
     b74:	20 91 01 01 	lds	r18, 0x0101
     b78:	30 91 02 01 	lds	r19, 0x0102
     b7c:	36 95       	lsr	r19
     b7e:	27 95       	ror	r18
     b80:	36 95       	lsr	r19
     b82:	27 95       	ror	r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     b84:	f9 99       	sbic	0x1f, 1	; 31
     b86:	fe cf       	rjmp	.-4      	; 0xb84 <_Z29save_currentThresholds_eepromPh+0x16>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     b88:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     b8a:	92 bd       	out	0x22, r25	; 34
     b8c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     b8e:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	fa 9a       	sbi	0x1f, 2	; 31
     b96:	f9 9a       	sbi	0x1f, 1	; 31
     b98:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, lo(current_2_threshold>>2) );	
     b9a:	9a 01       	movw	r18, r20
     b9c:	2f 5f       	subi	r18, 0xFF	; 255
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	80 91 03 01 	lds	r24, 0x0103
     ba4:	90 91 04 01 	lds	r25, 0x0104
     ba8:	96 95       	lsr	r25
     baa:	87 95       	ror	r24
     bac:	96 95       	lsr	r25
     bae:	87 95       	ror	r24
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     bb0:	f9 99       	sbic	0x1f, 1	; 31
     bb2:	fe cf       	rjmp	.-4      	; 0xbb0 <_Z29save_currentThresholds_eepromPh+0x42>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     bb4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     bb6:	52 bd       	out	0x22, r21	; 34
     bb8:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     bba:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	fa 9a       	sbi	0x1f, 2	; 31
     bc2:	f9 9a       	sbi	0x1f, 1	; 31
     bc4:	0f be       	out	0x3f, r0	; 63
	return addr;
}
     bc6:	c9 01       	movw	r24, r18
     bc8:	08 95       	ret

00000bca <_Z29read_currentThresholds_eepromPh>:

Reads from stall currents from EEPROM, and stores into RAM
***********************************************************/
byte* read_currentThresholds_eeprom(byte* addr)
{	// CURRENT THRESHOLD (for shutoff)	
	current_1_threshold = ((eeprom_read_byte( addr++ ))<<2);
     bca:	ac 01       	movw	r20, r24
     bcc:	4f 5f       	subi	r20, 0xFF	; 255
     bce:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bd0:	f9 99       	sbic	0x1f, 1	; 31
     bd2:	fe cf       	rjmp	.-4      	; 0xbd0 <_Z29read_currentThresholds_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     bd4:	92 bd       	out	0x22, r25	; 34
     bd6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     bd8:	f8 9a       	sbi	0x1f, 0	; 31
     bda:	80 b5       	in	r24, 0x20	; 32
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	90 93 02 01 	sts	0x0102, r25
     bea:	80 93 01 01 	sts	0x0101, r24
	current_2_threshold = ((eeprom_read_byte( addr++ ))<<2);
     bee:	9a 01       	movw	r18, r20
     bf0:	2f 5f       	subi	r18, 0xFF	; 255
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bf4:	f9 99       	sbic	0x1f, 1	; 31
     bf6:	fe cf       	rjmp	.-4      	; 0xbf4 <_Z29read_currentThresholds_eepromPh+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     bf8:	52 bd       	out	0x22, r21	; 34
     bfa:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     bfc:	f8 9a       	sbi	0x1f, 0	; 31
     bfe:	80 b5       	in	r24, 0x20	; 32
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	90 93 04 01 	sts	0x0104, r25
     c0e:	80 93 03 01 	sts	0x0103, r24
	return addr;
}
     c12:	c9 01       	movw	r24, r18
     c14:	08 95       	ret

00000c16 <_Z27save_latest_position_eepromPh>:
     c16:	20 91 40 03 	lds	r18, 0x0340
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* save_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
     c1a:	20 fd       	sbrc	r18, 0
     c1c:	22 c0       	rjmp	.+68     	; 0xc62 <_Z27save_latest_position_eepromPh+0x4c>
		eeprom_write_byte( addr++, hi(EncoderCount) );
		eeprom_write_byte( addr++, lo(EncoderCount) );
	}else {
		eeprom_write_byte( addr++, hi(PotSample[1]) );	
     c1e:	ac 01       	movw	r20, r24
     c20:	4f 5f       	subi	r20, 0xFF	; 255
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	20 91 81 02 	lds	r18, 0x0281
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     c28:	f9 99       	sbic	0x1f, 1	; 31
     c2a:	fe cf       	rjmp	.-4      	; 0xc28 <_Z27save_latest_position_eepromPh+0x12>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     c2c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c2e:	92 bd       	out	0x22, r25	; 34
     c30:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     c32:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	fa 9a       	sbi	0x1f, 2	; 31
     c3a:	f9 9a       	sbi	0x1f, 1	; 31
     c3c:	0f be       	out	0x3f, r0	; 63
		eeprom_write_byte( addr++, lo(PotSample[1]) );
     c3e:	9a 01       	movw	r18, r20
     c40:	2f 5f       	subi	r18, 0xFF	; 255
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	80 91 80 02 	lds	r24, 0x0280
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     c48:	f9 99       	sbic	0x1f, 1	; 31
     c4a:	fe cf       	rjmp	.-4      	; 0xc48 <_Z27save_latest_position_eepromPh+0x32>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     c4c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c4e:	52 bd       	out	0x22, r21	; 34
     c50:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     c52:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	fa 9a       	sbi	0x1f, 2	; 31
     c5a:	f9 9a       	sbi	0x1f, 1	; 31
     c5c:	0f be       	out	0x3f, r0	; 63
	}
	return addr;
}
     c5e:	c9 01       	movw	r24, r18
     c60:	08 95       	ret
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* save_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
		eeprom_write_byte( addr++, hi(EncoderCount) );
     c62:	ac 01       	movw	r20, r24
     c64:	4f 5f       	subi	r20, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	20 91 60 02 	lds	r18, 0x0260
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     c6c:	f9 99       	sbic	0x1f, 1	; 31
     c6e:	fe cf       	rjmp	.-4      	; 0xc6c <_Z27save_latest_position_eepromPh+0x56>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     c70:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c72:	92 bd       	out	0x22, r25	; 34
     c74:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     c76:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	fa 9a       	sbi	0x1f, 2	; 31
     c7e:	f9 9a       	sbi	0x1f, 1	; 31
     c80:	0f be       	out	0x3f, r0	; 63
		eeprom_write_byte( addr++, lo(EncoderCount) );
     c82:	9a 01       	movw	r18, r20
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	80 91 5f 02 	lds	r24, 0x025F
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     c8c:	f9 99       	sbic	0x1f, 1	; 31
     c8e:	fe cf       	rjmp	.-4      	; 0xc8c <_Z27save_latest_position_eepromPh+0x76>
     c90:	dd cf       	rjmp	.-70     	; 0xc4c <_Z27save_latest_position_eepromPh+0x36>

00000c92 <_Z8save_calv>:
Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr;
	addr = save_configuration();		// MyInstance & Confirmed & config bytes
     c92:	0e 94 24 1b 	call	0x3648	; 0x3648 <_Z18save_configurationv>
	addr = save_stops_eeprom			(addr);
     c96:	0e 94 5c 05 	call	0xab8	; 0xab8 <_Z17save_stops_eepromPh>
	addr = save_currentThresholds_eeprom(addr);
     c9a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_Z29save_currentThresholds_eepromPh>
	addr = save_latest_position_eeprom  (addr);
     c9e:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z27save_latest_position_eepromPh>
	return addr;
}
     ca2:	08 95       	ret

00000ca4 <_Z27read_latest_position_eepromPh>:
     ca4:	20 91 40 03 	lds	r18, 0x0340
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* read_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
     ca8:	20 ff       	sbrs	r18, 0
     caa:	1c c0       	rjmp	.+56     	; 0xce4 <_Z27read_latest_position_eepromPh+0x40>
		EncoderCount = (eeprom_read_byte( addr++ )<<8);
     cac:	ac 01       	movw	r20, r24
     cae:	4f 5f       	subi	r20, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cb2:	f9 99       	sbic	0x1f, 1	; 31
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <_Z27read_latest_position_eepromPh+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cb6:	92 bd       	out	0x22, r25	; 34
     cb8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cba:	f8 9a       	sbi	0x1f, 0	; 31
     cbc:	80 b5       	in	r24, 0x20	; 32
     cbe:	10 92 5f 02 	sts	0x025F, r1
     cc2:	80 93 60 02 	sts	0x0260, r24
		EncoderCount = (eeprom_read_byte( addr++ ));
     cc6:	9a 01       	movw	r18, r20
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ccc:	f9 99       	sbic	0x1f, 1	; 31
     cce:	fe cf       	rjmp	.-4      	; 0xccc <_Z27read_latest_position_eepromPh+0x28>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cd0:	52 bd       	out	0x22, r21	; 34
     cd2:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cd4:	f8 9a       	sbi	0x1f, 0	; 31
     cd6:	80 b5       	in	r24, 0x20	; 32
     cd8:	80 93 5f 02 	sts	0x025F, r24
     cdc:	10 92 60 02 	sts	0x0260, r1
	}else {
		PotSample[1] = (eeprom_read_byte( addr++ )<<8);
		PotSample[1] = (eeprom_read_byte( addr++ ));
	}
	return addr;
}
     ce0:	c9 01       	movw	r24, r18
     ce2:	08 95       	ret
{
	if (isConfigured(MODE_USE_ENCODER)) {
		EncoderCount = (eeprom_read_byte( addr++ )<<8);
		EncoderCount = (eeprom_read_byte( addr++ ));
	}else {
		PotSample[1] = (eeprom_read_byte( addr++ )<<8);
     ce4:	ac 01       	movw	r20, r24
     ce6:	4f 5f       	subi	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cea:	f9 99       	sbic	0x1f, 1	; 31
     cec:	fe cf       	rjmp	.-4      	; 0xcea <_Z27read_latest_position_eepromPh+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cee:	92 bd       	out	0x22, r25	; 34
     cf0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cf2:	f8 9a       	sbi	0x1f, 0	; 31
     cf4:	80 b5       	in	r24, 0x20	; 32
     cf6:	10 92 80 02 	sts	0x0280, r1
     cfa:	80 93 81 02 	sts	0x0281, r24
		PotSample[1] = (eeprom_read_byte( addr++ ));
     cfe:	9a 01       	movw	r18, r20
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d04:	f9 99       	sbic	0x1f, 1	; 31
     d06:	fe cf       	rjmp	.-4      	; 0xd04 <_Z27read_latest_position_eepromPh+0x60>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d08:	52 bd       	out	0x22, r21	; 34
     d0a:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d0c:	f8 9a       	sbi	0x1f, 0	; 31
     d0e:	80 b5       	in	r24, 0x20	; 32
     d10:	80 93 80 02 	sts	0x0280, r24
     d14:	10 92 81 02 	sts	0x0281, r1
	}
	return addr;
}
     d18:	c9 01       	movw	r24, r18
     d1a:	08 95       	ret

00000d1c <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr;
	addr = read_configuration();		// myinstance, confirmed status, config bytes
     d1c:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_Z18read_configurationv>
	addr = read_stops_eeprom			(addr);
     d20:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z17read_stops_eepromPh>
	addr = read_currentThresholds_eeprom(addr);
     d24:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z29read_currentThresholds_eepromPh>
	addr = read_latest_position_eeprom	(addr);
     d28:	0e 94 52 06 	call	0xca4	; 0xca4 <_Z27read_latest_position_eepromPh>
	return addr;
}
     d2c:	08 95       	ret

00000d2e <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{
	switch ( (config_byte_2 & 0xF0) )
     d2e:	80 91 41 03 	lds	r24, 0x0341
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	80 7f       	andi	r24, 0xF0	; 240
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	80 32       	cpi	r24, 0x20	; 32
     d3a:	91 05       	cpc	r25, r1
     d3c:	b1 f0       	breq	.+44     	; 0xd6a <_Z13getReportRatev+0x3c>
     d3e:	81 32       	cpi	r24, 0x21	; 33
     d40:	91 05       	cpc	r25, r1
     d42:	44 f0       	brlt	.+16     	; 0xd54 <_Z13getReportRatev+0x26>
     d44:	80 34       	cpi	r24, 0x40	; 64
     d46:	91 05       	cpc	r25, r1
     d48:	91 f0       	breq	.+36     	; 0xd6e <_Z13getReportRatev+0x40>
     d4a:	80 38       	cpi	r24, 0x80	; 128
     d4c:	91 05       	cpc	r25, r1
     d4e:	59 f0       	breq	.+22     	; 0xd66 <_Z13getReportRatev+0x38>
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; break;
	default: return -1;  break;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{
	switch ( (config_byte_2 & 0xF0) )
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	29 f0       	breq	.+10     	; 0xd62 <_Z13getReportRatev+0x34>
     d58:	80 31       	cpi	r24, 0x10	; 16
     d5a:	91 05       	cpc	r25, r1
     d5c:	c9 f7       	brne	.-14     	; 0xd50 <_Z13getReportRatev+0x22>
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
     d5e:	82 e0       	ldi	r24, 0x02	; 2
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; break;
	default: return -1;  break;
	}
}	
     d60:	08 95       	ret
*************************************************************/
byte getReportRate()  			
{
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; break;
     d66:	84 e1       	ldi	r24, 0x14	; 20
     d68:	08 95       	ret
{
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	08 95       	ret
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
     d6e:	8a e0       	ldi	r24, 0x0A	; 10
     d70:	08 95       	ret

00000d72 <_Z16SetBaseFrequencyv>:
#define MODE_FREE_SPIN	 	0x08		// ignore stops.  default (0) is to stop
#define MODE_TILT_RESPONDER 0x10		// 1=> respond to tilt Y axis readings
#define MODE_PID_CONTROL	0x20		// PID or constant speed.
#define MODE_BASE_FREQ_1	0x40		// 00->100Hz;  01--> 300Hz
#define MODE_BASE_FREQ_2	0x80		// 10->1000hz; 11--> 5000Hz
inline byte getBaseFreq() 	{  return ((config_byte_1 & 0xC0)>>6);  }
     d72:	80 91 40 03 	lds	r24, 0x0340
     d76:	82 95       	swap	r24
     d78:	86 95       	lsr	r24
     d7a:	86 95       	lsr	r24
     d7c:	83 70       	andi	r24, 0x03	; 3
/************************************************************
SetBaseFrequency()	based on config_byte_1
*************************************************************/
void SetBaseFrequency( )
{
	switch (getBaseFreq())
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	b1 f0       	breq	.+44     	; 0xdae <_Z16SetBaseFrequencyv+0x3c>
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	58 f0       	brcs	.+22     	; 0xd9c <_Z16SetBaseFrequencyv+0x2a>
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	d9 f0       	breq	.+54     	; 0xdc0 <_Z16SetBaseFrequencyv+0x4e>
	// will encounter an overflow (16,000,000 / 100)=160,000 which is bigger than 'word'
		case 0:	pwm_init(  245., TRUE, TRUE );	break;
		case 1:	pwm_init(  300., TRUE, TRUE );	break;
		case 2:	pwm_init( 1000., TRUE, TRUE );	break;
		case 3:	pwm_init( 5000., TRUE, TRUE );	break;
		default: pwm_init(5000., TRUE, TRUE );  break;
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e4       	ldi	r23, 0x40	; 64
     d8e:	8c e9       	ldi	r24, 0x9C	; 156
     d90:	95 e4       	ldi	r25, 0x45	; 69
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_Z8pwm_initfhh>
     d9a:	08 95       	ret
{
	switch (getBaseFreq())
	{
	// 244 is lowest with /1 prescaler!  The get_top_value() function
	// will encounter an overflow (16,000,000 / 100)=160,000 which is bigger than 'word'
		case 0:	pwm_init(  245., TRUE, TRUE );	break;
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	85 e7       	ldi	r24, 0x75	; 117
     da2:	93 e4       	ldi	r25, 0x43	; 67
     da4:	41 e0       	ldi	r20, 0x01	; 1
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_Z8pwm_initfhh>
     dac:	08 95       	ret
		case 1:	pwm_init(  300., TRUE, TRUE );	break;
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	86 e9       	ldi	r24, 0x96	; 150
     db4:	93 e4       	ldi	r25, 0x43	; 67
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_Z8pwm_initfhh>
     dbe:	08 95       	ret
		case 2:	pwm_init( 1000., TRUE, TRUE );	break;
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	8a e7       	ldi	r24, 0x7A	; 122
     dc6:	94 e4       	ldi	r25, 0x44	; 68
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_Z8pwm_initfhh>
     dd0:	08 95       	ret

00000dd2 <_Z10motor_initv>:
		Both PWMs are HIGH;		(ie Polarities are the same)
		INHibit signal is LOW;
	Base Frequency of the BTS7960 chips can go upto 25khz	*/
void motor_init()
{
	INHIBIT_DDR  |=  INHIBIT_DDR_MASK;			// HBridge Enable lines (outputs)
     dd2:	84 b1       	in	r24, 0x04	; 4
     dd4:	80 66       	ori	r24, 0x60	; 96
     dd6:	84 b9       	out	0x04, r24	; 4
	CURRENT_SENSE_DDR &=  ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
     dd8:	87 b1       	in	r24, 0x07	; 7
     dda:	8f 7c       	andi	r24, 0xCF	; 207
     ddc:	87 b9       	out	0x07, r24	; 7

	SetBaseFrequency( );	// config_byte_1
     dde:	0e 94 b9 06 	call	0xd72	; 0xd72 <_Z16SetBaseFrequencyv>
void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
	else 
		MotorState = MOTOR_DISABLED;
     de2:	87 e0       	ldi	r24, 0x07	; 7
     de4:	80 93 38 02 	sts	0x0238, r24
     de8:	80 91 40 03 	lds	r24, 0x0340
	CURRENT_SENSE_DDR &=  ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));

	SetBaseFrequency( );	// config_byte_1
	motor_enable(FALSE);

	if (isConfigured(MODE_TILT_RESPONDER))
     dec:	84 ff       	sbrs	r24, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <_Z10motor_initv+0x24>


void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
     df0:	88 e0       	ldi	r24, 0x08	; 8
     df2:	80 93 38 02 	sts	0x0238, r24
     df6:	08 95       	ret

00000df8 <_Z15get_motor_anglev>:
     df8:	80 91 40 03 	lds	r24, 0x0340
}

float get_motor_angle()
{
    float_array Angle;
    if (isConfigured(MODE_USE_ENCODER))
     dfc:	80 fd       	sbrc	r24, 0
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <_Z15get_motor_anglev+0x12>
    {
    	Angle.value = get_encoder_angle();
    } else {
    	Angle.value = get_pot_angle();
     e00:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z13get_pot_anglev>
     e04:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    }
    return Angle.value;
}
     e08:	08 95       	ret
float get_motor_angle()
{
    float_array Angle;
    if (isConfigured(MODE_USE_ENCODER))
    {
    	Angle.value = get_encoder_angle();
     e0a:	0e 94 84 0c 	call	0x1908	; 0x1908 <_Z17get_encoder_anglev>
     e0e:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    } else {
    	Angle.value = get_pot_angle();
    }
    return Angle.value;
}
     e12:	08 95       	ret

00000e14 <_Z12motor_enableh>:


void motor_enable( BOOL mEnable )
{
	if (mEnable)
     e14:	88 23       	and	r24, r24
     e16:	21 f4       	brne	.+8      	; 0xe20 <_Z12motor_enableh+0xc>
		MotorState = MOTOR_ENABLED;
	else 
		MotorState = MOTOR_DISABLED;
     e18:	87 e0       	ldi	r24, 0x07	; 7
     e1a:	80 93 38 02 	sts	0x0238, r24
     e1e:	08 95       	ret


void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
     e20:	88 e0       	ldi	r24, 0x08	; 8
     e22:	80 93 38 02 	sts	0x0238, r24
     e26:	08 95       	ret

00000e28 <_Z10motor_stopv>:
		MotorState = MOTOR_DISABLED;
}

void motor_stop()
{
	MotorState = MOTOR_OFF;
     e28:	10 92 38 02 	sts	0x0238, r1
	set_dutyA( 0.0 );
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	cb 01       	movw	r24, r22
     e32:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_Z9set_dutyAf>
	set_dutyB( 0.0 );
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	cb 01       	movw	r24, r22
     e3c:	0e 94 21 19 	call	0x3242	; 0x3242 <_Z9set_dutyBf>
}
     e40:	08 95       	ret

00000e42 <_Z11stop_actiont>:
	}
}

void stop_action(word mPosition)
{
	byte stop = check_stops( mPosition );
     e42:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_Z11check_stopst>
	if (stop)
     e46:	88 23       	and	r24, r24
     e48:	21 f4       	brne	.+8      	; 0xe52 <_Z11stop_actiont+0x10>


void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	80 93 38 02 	sts	0x0238, r24
     e50:	08 95       	ret

void stop_action(word mPosition)
{
	byte stop = check_stops( mPosition );
	if (stop)
		motor_stop();
     e52:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z10motor_stopv>
     e56:	08 95       	ret

00000e58 <_Z11motor_brakeh>:
	set_dutyB( 0.0 );
}

void motor_brake( BOOL mEnable )
{ 
	set_dutyA(0.0);
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	cb 01       	movw	r24, r22
     e5e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_Z9set_dutyAf>
	set_dutyB(0.0);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	cb 01       	movw	r24, r22
     e68:	0e 94 21 19 	call	0x3242	; 0x3242 <_Z9set_dutyBf>
	
	INHIBIT_PORT &= ~(1<<INHIBIT_LEFT);		// active low!
     e6c:	2d 98       	cbi	0x05, 5	; 5
	INHIBIT_PORT &= ~(1<<INHIBIT_RIGHT);
     e6e:	2e 98       	cbi	0x05, 6	; 5

	MotorState = MOTOR_BRAKING;	
     e70:	89 e0       	ldi	r24, 0x09	; 9
     e72:	80 93 38 02 	sts	0x0238, r24
}
     e76:	08 95       	ret

00000e78 <_Z11motor_coasth>:
void motor_coast( BOOL mEnable )
{
	set_dutyA(0.0);
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	cb 01       	movw	r24, r22
     e7e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_Z9set_dutyAf>
	set_dutyB(0.0);
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	cb 01       	movw	r24, r22
     e88:	0e 94 21 19 	call	0x3242	; 0x3242 <_Z9set_dutyBf>

	INHIBIT_PORT |= (1<<INHIBIT_LEFT );
     e8c:	2d 9a       	sbi	0x05, 5	; 5
	INHIBIT_PORT |= (1<<INHIBIT_RIGHT);
     e8e:	2e 9a       	sbi	0x05, 6	; 5
	MotorState = MOTOR_BRAKING;	
     e90:	89 e0       	ldi	r24, 0x09	; 9
     e92:	80 93 38 02 	sts	0x0238, r24
}
     e96:	08 95       	ret

00000e98 <_Z14motor_set_dutyf>:
	
NOTE :	No change to the Enable lines in this function!
INPUT:	mPercent - [0.0 .. +1.00]
*********************************************/
void motor_set_duty( float mFraction )
{	
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	7b 01       	movw	r14, r22
     ea2:	8c 01       	movw	r16, r24
	if (mFraction>0)
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	a9 01       	movw	r20, r18
     eaa:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
     eae:	18 16       	cp	r1, r24
     eb0:	8c f0       	brlt	.+34     	; 0xed4 <_Z14motor_set_dutyf+0x3c>
		set_dutyA( mFraction );		// left side needs power
		set_dutyB( 0.0 );
	}
	else 
	{
		set_dutyA( 0.0 );
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	cb 01       	movw	r24, r22
     eb8:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_Z9set_dutyAf>
		set_dutyB( -mFraction );		// right side needs power 
     ebc:	c8 01       	movw	r24, r16
     ebe:	b7 01       	movw	r22, r14
     ec0:	90 58       	subi	r25, 0x80	; 128
     ec2:	0e 94 21 19 	call	0x3242	; 0x3242 <_Z9set_dutyBf>
	}

	// INHIBIT is active LOW.  So it really acts like an ENABLE signal	
	INHIBIT_PORT |=  (1<<INHIBIT_RIGHT);
     ec6:	2e 9a       	sbi	0x05, 6	; 5
	INHIBIT_PORT |=  (1<<INHIBIT_LEFT);
     ec8:	2d 9a       	sbi	0x05, 5	; 5
}
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret
*********************************************/
void motor_set_duty( float mFraction )
{	
	if (mFraction>0)
	{
		set_dutyA( mFraction );		// left side needs power
     ed4:	c8 01       	movw	r24, r16
     ed6:	b7 01       	movw	r22, r14
     ed8:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_Z9set_dutyAf>
		set_dutyB( 0.0 );
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	cb 01       	movw	r24, r22
     ee2:	0e 94 21 19 	call	0x3242	; 0x3242 <_Z9set_dutyBf>
		set_dutyA( 0.0 );
		set_dutyB( -mFraction );		// right side needs power 
	}

	// INHIBIT is active LOW.  So it really acts like an ENABLE signal	
	INHIBIT_PORT |=  (1<<INHIBIT_RIGHT);
     ee6:	2e 9a       	sbi	0x05, 6	; 5
	INHIBIT_PORT |=  (1<<INHIBIT_LEFT);
     ee8:	2d 9a       	sbi	0x05, 5	; 5
}
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	08 95       	ret

00000ef4 <_Z20motor_timeslice_10msv>:
	word position;

	// Check for STOP conditions:
	// Note if the lights stop working, or this timeslice is not going at all,
	// 	it could be hung up on can_instance.  ie if there are not any other boards in the network.
	if (MotorState == MOTOR_REQUEST_PENDING)
     ef4:	80 91 38 02 	lds	r24, 0x0238
     ef8:	8a 30       	cpi	r24, 0x0A	; 10
     efa:	09 f4       	brne	.+2      	; 0xefe <_Z20motor_timeslice_10msv+0xa>
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <_Z20motor_timeslice_10msv+0x88>
     efe:	80 91 40 03 	lds	r24, 0x0340
			set_dutyB( Destination.speed2 );		// left side needs power too.  
		}
	}

	// READ LATEST POSITION:
	if (isConfigured(MODE_USE_ENCODER) ) {
     f02:	80 ff       	sbrs	r24, 0
     f04:	24 c0       	rjmp	.+72     	; 0xf4e <_Z20motor_timeslice_10msv+0x5a>
		encoder_timeslice();
     f06:	0e 94 31 0c 	call	0x1862	; 0x1862 <_Z17encoder_timeslicev>
		position = EncoderCount; 	
     f0a:	80 91 5f 02 	lds	r24, 0x025F
     f0e:	90 91 60 02 	lds	r25, 0x0260
     f12:	20 91 40 03 	lds	r18, 0x0340
	} else {
		position = get_pot(); 	
		// update speed & accel in new Pot_timeslice()
	}

	if (isConfigured(MODE_FREE_SPIN)==FALSE)
     f16:	23 ff       	sbrs	r18, 3
     f18:	20 c0       	rjmp	.+64     	; 0xf5a <_Z20motor_timeslice_10msv+0x66>
		stop_action( position );		// check stops and stop motor if necessary

	if (destination_reached()) {		// destination works in free spin mode.
     f1a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_Z19destination_reachedv>
     f1e:	88 23       	and	r24, r24
     f20:	11 f5       	brne	.+68     	; 0xf66 <_Z20motor_timeslice_10msv+0x72>
		pid /= Range.value;				// total distance between endpoints.
		motor_set_duty( pid );
	} */

	// Time To Report:
	if (getReportRate() != MODE_SEND_UPDATES_NONE)
     f22:	0e 94 97 06 	call	0xd2e	; 0xd2e <_Z13getReportRatev>
     f26:	88 23       	and	r24, r24
     f28:	69 f0       	breq	.+26     	; 0xf44 <_Z20motor_timeslice_10msv+0x50>
	{
		//if (ReportCounter==-1)
		//{ }
		//else 
		if ((ReportCounter--)==0)
     f2a:	80 91 05 01 	lds	r24, 0x0105
     f2e:	90 91 06 01 	lds	r25, 0x0106
     f32:	9c 01       	movw	r18, r24
     f34:	21 50       	subi	r18, 0x01	; 1
     f36:	30 40       	sbci	r19, 0x00	; 0
     f38:	30 93 06 01 	sts	0x0106, r19
     f3c:	20 93 05 01 	sts	0x0105, r18
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	59 f1       	breq	.+86     	; 0xf9a <_Z20motor_timeslice_10msv+0xa6>
			}
			PotSample[0] 		  = PotSample[1];
		} 
	}

	if (ShutDownState == SHUTDOWN_PENDING)
     f44:	80 91 d1 02 	lds	r24, 0x02D1
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	81 f0       	breq	.+32     	; 0xf6c <_Z20motor_timeslice_10msv+0x78>
     f4c:	08 95       	ret
	// READ LATEST POSITION:
	if (isConfigured(MODE_USE_ENCODER) ) {
		encoder_timeslice();
		position = EncoderCount; 	
	} else {
		position = get_pot(); 	
     f4e:	0e 94 8d 08 	call	0x111a	; 0x111a <_Z7get_potv>
     f52:	20 91 40 03 	lds	r18, 0x0340
		// update speed & accel in new Pot_timeslice()
	}

	if (isConfigured(MODE_FREE_SPIN)==FALSE)
     f56:	23 fd       	sbrc	r18, 3
     f58:	e0 cf       	rjmp	.-64     	; 0xf1a <_Z20motor_timeslice_10msv+0x26>
		stop_action( position );		// check stops and stop motor if necessary
     f5a:	0e 94 21 07 	call	0xe42	; 0xe42 <_Z11stop_actiont>

	if (destination_reached()) {		// destination works in free spin mode.
     f5e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_Z19destination_reachedv>
     f62:	88 23       	and	r24, r24
     f64:	f1 f2       	breq	.-68     	; 0xf22 <_Z20motor_timeslice_10msv+0x2e>
		motor_stop();					// just no stops!
     f66:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z10motor_stopv>
     f6a:	db cf       	rjmp	.-74     	; 0xf22 <_Z20motor_timeslice_10msv+0x2e>
     f6c:	80 91 40 03 	lds	r24, 0x0340
		} 
	}

	if (ShutDownState == SHUTDOWN_PENDING)
	{
		if (isConfigured(MODE_USE_ENCODER))
     f70:	80 fd       	sbrc	r24, 0
     f72:	4c c0       	rjmp	.+152    	; 0x100c <_Z20motor_timeslice_10msv+0x118>
void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
	else 
		MotorState = MOTOR_DISABLED;
     f74:	87 e0       	ldi	r24, 0x07	; 7
     f76:	80 93 38 02 	sts	0x0238, r24
     f7a:	08 95       	ret
     f7c:	80 91 40 03 	lds	r24, 0x0340
	// Check for STOP conditions:
	// Note if the lights stop working, or this timeslice is not going at all,
	// 	it could be hung up on can_instance.  ie if there are not any other boards in the network.
	if (MotorState == MOTOR_REQUEST_PENDING)
	{
		if (isConfigured(MODE_2_MOTORS)==FALSE)
     f80:	81 fd       	sbrc	r24, 1
     f82:	2d c0       	rjmp	.+90     	; 0xfde <_Z20motor_timeslice_10msv+0xea>
		{
			motor_set_duty( Destination.speed );
     f84:	60 91 53 02 	lds	r22, 0x0253
     f88:	70 91 54 02 	lds	r23, 0x0254
     f8c:	80 91 55 02 	lds	r24, 0x0255
     f90:	90 91 56 02 	lds	r25, 0x0256
     f94:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z14motor_set_dutyf>
     f98:	b2 cf       	rjmp	.-156    	; 0xefe <_Z20motor_timeslice_10msv+0xa>
		//if (ReportCounter==-1)
		//{ }
		//else 
		if ((ReportCounter--)==0)
		{
			ReportCounter = getReportRate();		// Refill
     f9a:	0e 94 97 06 	call	0xd2e	; 0xd2e <_Z13getReportRatev>
     f9e:	80 93 05 01 	sts	0x0105, r24
     fa2:	10 92 06 01 	sts	0x0106, r1
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
     fa6:	80 91 41 03 	lds	r24, 0x0341
			if (isConfigured2(MODE_SEND_POSITION_RAW))
     faa:	80 fd       	sbrc	r24, 0
     fac:	35 c0       	rjmp	.+106    	; 0x1018 <_Z20motor_timeslice_10msv+0x124>
			{
				can_prep_motor_values_raw( &msg1 );
				can_send_msg_no_wait( 0, &msg1 );
			}
			if (isConfigured2(MODE_SEND_POSITION_CALC))
     fae:	81 fd       	sbrc	r24, 1
     fb0:	49 c0       	rjmp	.+146    	; 0x1044 <_Z20motor_timeslice_10msv+0x150>
			{
				can_prep_motor_angle( &msg1    );
				can_send_msg_no_wait( 2, &msg1 );	// MOB2 is also unused
			}
			if (isConfigured2(MODE_SEND_STATUS))
     fb2:	82 fd       	sbrc	r24, 2
     fb4:	3d c0       	rjmp	.+122    	; 0x1030 <_Z20motor_timeslice_10msv+0x13c>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     fb6:	80 91 40 03 	lds	r24, 0x0340
			// Report time.  This was decided so that it's easily understandable to another 
			// programmer (ie. the numbers visible on the CAN monitor add up (subtract for speed).
			// Also because the POT sample rate is far too fast to have a significant resolution
			// on the speed (only 1 or 2 difference at max!).  This report rate gives good resolution
			// and reasonable response time.
			if (isConfigured(MODE_USE_ENCODER) ) {
     fba:	80 ff       	sbrs	r24, 0
     fbc:	2a c0       	rjmp	.+84     	; 0x1012 <_Z20motor_timeslice_10msv+0x11e>
					encoder_timeslice();
     fbe:	0e 94 31 0c 	call	0x1862	; 0x1862 <_Z17encoder_timeslicev>
			} else {
					pot_timeslice();
			}
			PotSample[0] 		  = PotSample[1];
     fc2:	80 91 80 02 	lds	r24, 0x0280
     fc6:	90 91 81 02 	lds	r25, 0x0281
     fca:	90 93 7f 02 	sts	0x027F, r25
     fce:	80 93 7e 02 	sts	0x027E, r24
		} 
	}

	if (ShutDownState == SHUTDOWN_PENDING)
     fd2:	80 91 d1 02 	lds	r24, 0x02D1
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <_Z20motor_timeslice_10msv+0xe8>
     fda:	b8 cf       	rjmp	.-144    	; 0xf4c <_Z20motor_timeslice_10msv+0x58>
     fdc:	c7 cf       	rjmp	.-114    	; 0xf6c <_Z20motor_timeslice_10msv+0x78>
		{
			motor_set_duty( Destination.speed );
		} 
		else 
		{	// 2 unidirectional motors (independant PWM dutys)
			INHIBIT_PORT &= ~(1<<INHIBIT_LEFT );		// want both low - pulldowns.
     fde:	2d 98       	cbi	0x05, 5	; 5
			INHIBIT_PORT &= ~(1<<INHIBIT_RIGHT);		// 0=> Low side active
     fe0:	2e 98       	cbi	0x05, 6	; 5
			set_dutyA( Destination.speed  );		
     fe2:	60 91 53 02 	lds	r22, 0x0253
     fe6:	70 91 54 02 	lds	r23, 0x0254
     fea:	80 91 55 02 	lds	r24, 0x0255
     fee:	90 91 56 02 	lds	r25, 0x0256
     ff2:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_Z9set_dutyAf>
			set_dutyB( Destination.speed2 );		// left side needs power too.  
     ff6:	60 91 57 02 	lds	r22, 0x0257
     ffa:	70 91 58 02 	lds	r23, 0x0258
     ffe:	80 91 59 02 	lds	r24, 0x0259
    1002:	90 91 5a 02 	lds	r25, 0x025A
    1006:	0e 94 21 19 	call	0x3242	; 0x3242 <_Z9set_dutyBf>
    100a:	79 cf       	rjmp	.-270    	; 0xefe <_Z20motor_timeslice_10msv+0xa>
	}

	if (ShutDownState == SHUTDOWN_PENDING)
	{
		if (isConfigured(MODE_USE_ENCODER))
			save_cal();
    100c:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z8save_calv>
    1010:	b1 cf       	rjmp	.-158    	; 0xf74 <_Z20motor_timeslice_10msv+0x80>
			// on the speed (only 1 or 2 difference at max!).  This report rate gives good resolution
			// and reasonable response time.
			if (isConfigured(MODE_USE_ENCODER) ) {
					encoder_timeslice();
			} else {
					pot_timeslice();
    1012:	0e 94 68 08 	call	0x10d0	; 0x10d0 <_Z13pot_timeslicev>
    1016:	d5 cf       	rjmp	.-86     	; 0xfc2 <_Z20motor_timeslice_10msv+0xce>
		if ((ReportCounter--)==0)
		{
			ReportCounter = getReportRate();		// Refill
			if (isConfigured2(MODE_SEND_POSITION_RAW))
			{
				can_prep_motor_values_raw( &msg1 );
    1018:	88 e8       	ldi	r24, 0x88	; 136
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_Z25can_prep_motor_values_rawP4sCAN>
				can_send_msg_no_wait( 0, &msg1 );
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	68 e8       	ldi	r22, 0x88	; 136
    1024:	72 e0       	ldi	r23, 0x02	; 2
    1026:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
    102a:	80 91 41 03 	lds	r24, 0x0341
    102e:	bf cf       	rjmp	.-130    	; 0xfae <_Z20motor_timeslice_10msv+0xba>
				can_prep_motor_angle( &msg1    );
				can_send_msg_no_wait( 2, &msg1 );	// MOB2 is also unused
			}
			if (isConfigured2(MODE_SEND_STATUS))
			{
				can_prep_motor_status( &msg1    );
    1030:	88 e8       	ldi	r24, 0x88	; 136
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z21can_prep_motor_statusP4sCAN>
				can_send_msg_no_wait ( 4, &msg1 );	// MOB4 is also unused
    1038:	84 e0       	ldi	r24, 0x04	; 4
    103a:	68 e8       	ldi	r22, 0x88	; 136
    103c:	72 e0       	ldi	r23, 0x02	; 2
    103e:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
    1042:	b9 cf       	rjmp	.-142    	; 0xfb6 <_Z20motor_timeslice_10msv+0xc2>
				can_prep_motor_values_raw( &msg1 );
				can_send_msg_no_wait( 0, &msg1 );
			}
			if (isConfigured2(MODE_SEND_POSITION_CALC))
			{
				can_prep_motor_angle( &msg1    );
    1044:	88 e8       	ldi	r24, 0x88	; 136
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z20can_prep_motor_angleP4sCAN>
				can_send_msg_no_wait( 2, &msg1 );	// MOB2 is also unused
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	68 e8       	ldi	r22, 0x88	; 136
    1050:	72 e0       	ldi	r23, 0x02	; 2
    1052:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
    1056:	80 91 41 03 	lds	r24, 0x0341
    105a:	ab cf       	rjmp	.-170    	; 0xfb2 <_Z20motor_timeslice_10msv+0xbe>

0000105c <_Z8pot_initv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void pot_init()
{
	Destination.continuous = 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 4d 02 	sts	0x024D, r24

	// SET AS INPUT:	
	CURRENT_SENSE_DDR  &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
    1062:	87 b1       	in	r24, 0x07	; 7
    1064:	8f 7c       	andi	r24, 0xCF	; 207
    1066:	87 b9       	out	0x07, r24	; 7
	CURRENT_SENSE_PORT &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
    1068:	88 b1       	in	r24, 0x08	; 8
    106a:	8f 7c       	andi	r24, 0xCF	; 207
    106c:	88 b9       	out	0x08, r24	; 8

	// SET AS INPUT:
	POT_DDR  &= ~(1<<POT);
    106e:	55 98       	cbi	0x0a, 5	; 10
	POT_PORT &= ~(1<<POT);
    1070:	5d 98       	cbi	0x0b, 5	; 11

	adc_init();	
    1072:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_Z8adc_initv>
	start_sampling();		// Need to call 1 Time to get it started (ISR will keep going)
    1076:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_Z14start_samplingv>
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
    107a:	80 91 28 02 	lds	r24, 0x0228
    107e:	90 91 29 02 	lds	r25, 0x0229
    1082:	a0 91 2a 02 	lds	r26, 0x022A
    1086:	b0 91 2b 02 	lds	r27, 0x022B
    108a:	20 91 22 02 	lds	r18, 0x0222
    108e:	30 91 23 02 	lds	r19, 0x0223
    1092:	40 91 24 02 	lds	r20, 0x0224
    1096:	50 91 25 02 	lds	r21, 0x0225
    109a:	82 1b       	sub	r24, r18
    109c:	93 0b       	sbc	r25, r19
    109e:	a4 0b       	sbc	r26, r20
    10a0:	b5 0b       	sbc	r27, r21
    10a2:	80 93 2e 02 	sts	0x022E, r24
    10a6:	90 93 2f 02 	sts	0x022F, r25
    10aa:	a0 93 30 02 	sts	0x0230, r26
    10ae:	b0 93 31 02 	sts	0x0231, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
    10b2:	80 91 2c 02 	lds	r24, 0x022C
    10b6:	90 91 2d 02 	lds	r25, 0x022D
    10ba:	20 91 26 02 	lds	r18, 0x0226
    10be:	30 91 27 02 	lds	r19, 0x0227
    10c2:	82 1b       	sub	r24, r18
    10c4:	93 0b       	sbc	r25, r19
    10c6:	90 93 33 02 	sts	0x0233, r25
    10ca:	80 93 32 02 	sts	0x0232, r24
	POT_PORT &= ~(1<<POT);

	adc_init();	
	start_sampling();		// Need to call 1 Time to get it started (ISR will keep going)
	compute_range();
}
    10ce:	08 95       	ret

000010d0 <_Z13pot_timeslicev>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
    10d0:	20 91 3b 02 	lds	r18, 0x023B
    10d4:	30 91 3c 02 	lds	r19, 0x023C
    10d8:	30 93 3a 02 	sts	0x023A, r19
    10dc:	20 93 39 02 	sts	0x0239, r18
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
    10e0:	80 91 80 02 	lds	r24, 0x0280
    10e4:	90 91 81 02 	lds	r25, 0x0281
    10e8:	40 91 7e 02 	lds	r20, 0x027E
    10ec:	50 91 7f 02 	lds	r21, 0x027F
    10f0:	84 1b       	sub	r24, r20
    10f2:	95 0b       	sbc	r25, r21
    10f4:	90 93 3c 02 	sts	0x023C, r25
    10f8:	80 93 3b 02 	sts	0x023B, r24
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
    10fc:	40 91 3f 02 	lds	r20, 0x023F
    1100:	50 91 40 02 	lds	r21, 0x0240
    1104:	50 93 3e 02 	sts	0x023E, r21
    1108:	40 93 3d 02 	sts	0x023D, r20
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
    110c:	82 1b       	sub	r24, r18
    110e:	93 0b       	sbc	r25, r19
    1110:	90 93 40 02 	sts	0x0240, r25
    1114:	80 93 3f 02 	sts	0x023F, r24
***********************************************/
void pot_timeslice()
{
	compute_pot_speed();
	compute_pot_acceleration();
}
    1118:	08 95       	ret

0000111a <_Z7get_potv>:
Return	:	The motor position in degrees * 10
***********************************************/
word get_pot()
{
	return PotSample[1];
}
    111a:	80 91 80 02 	lds	r24, 0x0280
    111e:	90 91 81 02 	lds	r25, 0x0281
    1122:	08 95       	ret

00001124 <_Z27get_distance_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
word get_distance_to_destination()
{
	return (Destination.position - PotSample[1]);
    1124:	20 91 50 02 	lds	r18, 0x0250
    1128:	30 91 51 02 	lds	r19, 0x0251
    112c:	80 91 80 02 	lds	r24, 0x0280
    1130:	90 91 81 02 	lds	r25, 0x0281
    1134:	28 1b       	sub	r18, r24
    1136:	39 0b       	sbc	r19, r25
}
    1138:	c9 01       	movw	r24, r18
    113a:	08 95       	ret

0000113c <_Z28get_direction_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
    113c:	20 91 50 02 	lds	r18, 0x0250
    1140:	30 91 51 02 	lds	r19, 0x0251
    1144:	80 91 80 02 	lds	r24, 0x0280
    1148:	90 91 81 02 	lds	r25, 0x0281
    114c:	82 17       	cp	r24, r18
    114e:	93 07       	cpc	r25, r19
    1150:	58 f0       	brcs	.+22     	; 0x1168 <_Z28get_direction_to_destinationv+0x2c>
		Destination.direction = 1;
		return 1;
	}
	else if (Destination.position < PotSample[1]) {
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	20 f4       	brcc	.+8      	; 0x1160 <_Z28get_direction_to_destinationv+0x24>
		Destination.direction = -1;	
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	80 93 52 02 	sts	0x0252, r24
		return -1;
    115e:	08 95       	ret
	}
	else {
		Destination.direction = 0;
    1160:	10 92 52 02 	sts	0x0252, r1
		return 0;	// exactly at destination
    1164:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1166:	08 95       	ret
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
		Destination.direction = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 52 02 	sts	0x0252, r24
		return 1;
    116e:	08 95       	ret

00001170 <_Z17compute_pot_speedv>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
    1170:	80 91 3b 02 	lds	r24, 0x023B
    1174:	90 91 3c 02 	lds	r25, 0x023C
    1178:	90 93 3a 02 	sts	0x023A, r25
    117c:	80 93 39 02 	sts	0x0239, r24
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
    1180:	80 91 80 02 	lds	r24, 0x0280
    1184:	90 91 81 02 	lds	r25, 0x0281
    1188:	20 91 7e 02 	lds	r18, 0x027E
    118c:	30 91 7f 02 	lds	r19, 0x027F
    1190:	82 1b       	sub	r24, r18
    1192:	93 0b       	sbc	r25, r19
    1194:	90 93 3c 02 	sts	0x023C, r25
    1198:	80 93 3b 02 	sts	0x023B, r24
}
    119c:	08 95       	ret

0000119e <_Z24compute_pot_accelerationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
    119e:	80 91 3f 02 	lds	r24, 0x023F
    11a2:	90 91 40 02 	lds	r25, 0x0240
    11a6:	90 93 3e 02 	sts	0x023E, r25
    11aa:	80 93 3d 02 	sts	0x023D, r24
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
    11ae:	80 91 3b 02 	lds	r24, 0x023B
    11b2:	90 91 3c 02 	lds	r25, 0x023C
    11b6:	20 91 39 02 	lds	r18, 0x0239
    11ba:	30 91 3a 02 	lds	r19, 0x023A
    11be:	82 1b       	sub	r24, r18
    11c0:	93 0b       	sbc	r25, r19
    11c2:	90 93 40 02 	sts	0x0240, r25
    11c6:	80 93 3f 02 	sts	0x023F, r24
}
    11ca:	08 95       	ret

000011cc <_Z11pot_percentv>:
Forward is duty > 0.50
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
	float position = PotSample[1];
	word half = (Range.value>>2) + EndPoint1.value;
    11d4:	60 91 32 02 	lds	r22, 0x0232
    11d8:	70 91 33 02 	lds	r23, 0x0233
    11dc:	76 95       	lsr	r23
    11de:	67 95       	ror	r22
    11e0:	76 95       	lsr	r23
    11e2:	67 95       	ror	r22
    11e4:	80 91 26 02 	lds	r24, 0x0226
    11e8:	90 91 27 02 	lds	r25, 0x0227
    11ec:	68 0f       	add	r22, r24
    11ee:	79 1f       	adc	r23, r25
	
	float delta    = (position - half);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    11f8:	7b 01       	movw	r14, r22
    11fa:	8c 01       	movw	r16, r24
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
	float position = PotSample[1];
    11fc:	60 91 80 02 	lds	r22, 0x0280
    1200:	70 91 81 02 	lds	r23, 0x0281
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
	word half = (Range.value>>2) + EndPoint1.value;
	
	float delta    = (position - half);
    120c:	a8 01       	movw	r20, r16
    120e:	97 01       	movw	r18, r14
    1210:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__subsf3>
	float percent  = (delta / (float)half);
    1214:	a8 01       	movw	r20, r16
    1216:	97 01       	movw	r18, r14
    1218:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
	return percent;
}
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	08 95       	ret

00001226 <_Z16convert_to_anglet>:
convert_to_angle( word  mPotValue )
RETURN	:	Takes a Pot reading and converts to an angle
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( word  mPotValue )
{
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
    123c:	20 91 28 02 	lds	r18, 0x0228
    1240:	30 91 29 02 	lds	r19, 0x0229
    1244:	40 91 2a 02 	lds	r20, 0x022A
    1248:	50 91 2b 02 	lds	r21, 0x022B
    124c:	60 91 22 02 	lds	r22, 0x0222
    1250:	70 91 23 02 	lds	r23, 0x0223
    1254:	80 91 24 02 	lds	r24, 0x0224
    1258:	90 91 25 02 	lds	r25, 0x0225
    125c:	26 17       	cp	r18, r22
    125e:	37 07       	cpc	r19, r23
    1260:	48 07       	cpc	r20, r24
    1262:	59 07       	cpc	r21, r25
    1264:	14 f4       	brge	.+4      	; 0x126a <_Z16convert_to_anglet+0x44>
    1266:	ca 01       	movw	r24, r20
    1268:	b9 01       	movw	r22, r18
    126a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    126e:	5b 01       	movw	r10, r22
    1270:	6c 01       	movw	r12, r24
******************************************************/
float convert_to_angle( word  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
    1272:	60 91 2e 02 	lds	r22, 0x022E
    1276:	70 91 2f 02 	lds	r23, 0x022F
    127a:	80 91 30 02 	lds	r24, 0x0230
    127e:	90 91 31 02 	lds	r25, 0x0231
    1282:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    1286:	7b 01       	movw	r14, r22
    1288:	8c 01       	movw	r16, r24
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( word  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
    128a:	20 91 2c 02 	lds	r18, 0x022C
    128e:	30 91 2d 02 	lds	r19, 0x022D
    1292:	80 91 26 02 	lds	r24, 0x0226
    1296:	90 91 27 02 	lds	r25, 0x0227
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	08 f4       	brcc	.+2      	; 0x12a2 <_Z16convert_to_anglet+0x7c>
    12a0:	c9 01       	movw	r24, r18
    12a2:	9e 01       	movw	r18, r28
    12a4:	28 1b       	sub	r18, r24
    12a6:	39 0b       	sbc	r19, r25
    12a8:	c9 01       	movw	r24, r18
    12aa:	60 91 32 02 	lds	r22, 0x0232
    12ae:	70 91 33 02 	lds	r23, 0x0233
    12b2:	0e 94 a6 22 	call	0x454c	; 0x454c <__udivmodhi4>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    12be:	9b 01       	movw	r18, r22
    12c0:	ac 01       	movw	r20, r24
	float angle = ( ratio * Range.angle );			// range has the *100 in it
    12c2:	c8 01       	movw	r24, r16
    12c4:	b7 01       	movw	r22, r14
    12c6:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    12ca:	9b 01       	movw	r18, r22
    12cc:	ac 01       	movw	r20, r24
	return angle + get_min_stop_angle();
    12ce:	c6 01       	movw	r24, r12
    12d0:	b5 01       	movw	r22, r10
    12d2:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__addsf3>
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	df 90       	pop	r13
    12e4:	cf 90       	pop	r12
    12e6:	bf 90       	pop	r11
    12e8:	af 90       	pop	r10
    12ea:	08 95       	ret

000012ec <_Z13get_pot_anglev>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
long int  get_pot_angle()
{
	return convert_to_angle(PotSample[1]);
    12ec:	80 91 80 02 	lds	r24, 0x0280
    12f0:	90 91 81 02 	lds	r25, 0x0281
    12f4:	0e 94 13 09 	call	0x1226	; 0x1226 <_Z16convert_to_anglet>
    12f8:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__fixsfsi>
}
    12fc:	08 95       	ret

000012fe <_Z21convert_to_fixedpointf>:
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
}
long int convert_to_fixedpoint( float  mRealNumber )
{
	long int fp = (mRealNumber * 100);
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	48 ec       	ldi	r20, 0xC8	; 200
    1304:	52 e4       	ldi	r21, 0x42	; 66
    1306:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    130a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__fixsfsi>
	return fp;
}
    130e:	08 95       	ret

00001310 <_Z16convert_to_valuel>:
convert_to_value( float mAngle )
RETURN	:	Takes an Angle and converts to an expected
	POT reading.
******************************************************/
word  convert_to_value( long mAngleHundredthDeg )
{
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	7b 01       	movw	r14, r22
    1322:	8c 01       	movw	r16, r24
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
	float pot_value = (ratio * Range.value) + get_min_stop_value();
    1324:	60 91 32 02 	lds	r22, 0x0232
    1328:	70 91 33 02 	lds	r23, 0x0233
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    1334:	5b 01       	movw	r10, r22
    1336:	6c 01       	movw	r12, r24
	POT reading.
******************************************************/
word  convert_to_value( long mAngleHundredthDeg )
{
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
    1338:	20 91 28 02 	lds	r18, 0x0228
    133c:	30 91 29 02 	lds	r19, 0x0229
    1340:	40 91 2a 02 	lds	r20, 0x022A
    1344:	50 91 2b 02 	lds	r21, 0x022B
    1348:	80 91 22 02 	lds	r24, 0x0222
    134c:	90 91 23 02 	lds	r25, 0x0223
    1350:	a0 91 24 02 	lds	r26, 0x0224
    1354:	b0 91 25 02 	lds	r27, 0x0225
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	4a 07       	cpc	r20, r26
    135e:	5b 07       	cpc	r21, r27
    1360:	14 f4       	brge	.+4      	; 0x1366 <_Z16convert_to_valuel+0x56>
    1362:	da 01       	movw	r26, r20
    1364:	c9 01       	movw	r24, r18
    1366:	a8 01       	movw	r20, r16
    1368:	97 01       	movw	r18, r14
    136a:	28 1b       	sub	r18, r24
    136c:	39 0b       	sbc	r19, r25
    136e:	4a 0b       	sbc	r20, r26
    1370:	5b 0b       	sbc	r21, r27
    1372:	ca 01       	movw	r24, r20
    1374:	b9 01       	movw	r22, r18
    1376:	20 91 2e 02 	lds	r18, 0x022E
    137a:	30 91 2f 02 	lds	r19, 0x022F
    137e:	40 91 30 02 	lds	r20, 0x0230
    1382:	50 91 31 02 	lds	r21, 0x0231
    1386:	0e 94 cd 22 	call	0x459a	; 0x459a <__divmodsi4>
    138a:	ca 01       	movw	r24, r20
    138c:	b9 01       	movw	r22, r18
    138e:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    1392:	9b 01       	movw	r18, r22
    1394:	ac 01       	movw	r20, r24
	float pot_value = (ratio * Range.value) + get_min_stop_value();
    1396:	c6 01       	movw	r24, r12
    1398:	b5 01       	movw	r22, r10
    139a:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    139e:	7b 01       	movw	r14, r22
    13a0:	8c 01       	movw	r16, r24
    13a2:	80 91 2c 02 	lds	r24, 0x022C
    13a6:	90 91 2d 02 	lds	r25, 0x022D
    13aa:	60 91 26 02 	lds	r22, 0x0226
    13ae:	70 91 27 02 	lds	r23, 0x0227
    13b2:	86 17       	cp	r24, r22
    13b4:	97 07       	cpc	r25, r23
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <_Z16convert_to_valuel+0xaa>
    13b8:	bc 01       	movw	r22, r24
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	c8 01       	movw	r24, r16
    13c8:	b7 01       	movw	r22, r14
    13ca:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__addsf3>
	return (word)pot_value;
    13ce:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
}
    13d2:	cb 01       	movw	r24, r22
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	08 95       	ret

000013e6 <_Z21compute_default_stopsv>:
RETURN	:	float => Percentage between [0.0 .. 1.0]

******************************************************/
void  compute_default_stops()
{
	EndPoint1.value = 25; 			//(0.1 * MIN_POT_VALUE);		// 10 % limits
    13e6:	89 e1       	ldi	r24, 0x19	; 25
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	90 93 27 02 	sts	0x0227, r25
    13ee:	80 93 26 02 	sts	0x0226, r24
	EndPoint2.value = 0x3ff-25; 	//(0.9 * MAX_POT_VALUE);		// 10 % limits	
    13f2:	86 ee       	ldi	r24, 0xE6	; 230
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	90 93 2d 02 	sts	0x022D, r25
    13fa:	80 93 2c 02 	sts	0x022C, r24
	
	EndPoint1.angle =   0*100;		// 0 degrees
    13fe:	10 92 22 02 	sts	0x0222, r1
    1402:	10 92 23 02 	sts	0x0223, r1
    1406:	10 92 24 02 	sts	0x0224, r1
    140a:	10 92 25 02 	sts	0x0225, r1
	EndPoint2.angle = 300*100;		// Most Pots turn 300 degrees
    140e:	80 e3       	ldi	r24, 0x30	; 48
    1410:	95 e7       	ldi	r25, 0x75	; 117
    1412:	a0 e0       	ldi	r26, 0x00	; 0
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	80 93 28 02 	sts	0x0228, r24
    141a:	90 93 29 02 	sts	0x0229, r25
    141e:	a0 93 2a 02 	sts	0x022A, r26
    1422:	b0 93 2b 02 	sts	0x022B, r27
}
    1426:	08 95       	ret

00001428 <_Z13compute_rangev>:
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
    1428:	80 91 28 02 	lds	r24, 0x0228
    142c:	90 91 29 02 	lds	r25, 0x0229
    1430:	a0 91 2a 02 	lds	r26, 0x022A
    1434:	b0 91 2b 02 	lds	r27, 0x022B
    1438:	20 91 22 02 	lds	r18, 0x0222
    143c:	30 91 23 02 	lds	r19, 0x0223
    1440:	40 91 24 02 	lds	r20, 0x0224
    1444:	50 91 25 02 	lds	r21, 0x0225
    1448:	82 1b       	sub	r24, r18
    144a:	93 0b       	sbc	r25, r19
    144c:	a4 0b       	sbc	r26, r20
    144e:	b5 0b       	sbc	r27, r21
    1450:	80 93 2e 02 	sts	0x022E, r24
    1454:	90 93 2f 02 	sts	0x022F, r25
    1458:	a0 93 30 02 	sts	0x0230, r26
    145c:	b0 93 31 02 	sts	0x0231, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
    1460:	80 91 2c 02 	lds	r24, 0x022C
    1464:	90 91 2d 02 	lds	r25, 0x022D
    1468:	20 91 26 02 	lds	r18, 0x0226
    146c:	30 91 27 02 	lds	r19, 0x0227
    1470:	82 1b       	sub	r24, r18
    1472:	93 0b       	sbc	r25, r19
    1474:	90 93 33 02 	sts	0x0233, r25
    1478:	80 93 32 02 	sts	0x0232, r24
}
    147c:	08 95       	ret

0000147e <_Z18get_min_stop_valuev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_min_stop_value()
{
    147e:	80 91 2c 02 	lds	r24, 0x022C
    1482:	90 91 2d 02 	lds	r25, 0x022D
    1486:	20 91 26 02 	lds	r18, 0x0226
    148a:	30 91 27 02 	lds	r19, 0x0227
    148e:	82 17       	cp	r24, r18
    1490:	93 07       	cpc	r25, r19
    1492:	08 f4       	brcc	.+2      	; 0x1496 <_Z18get_min_stop_valuev+0x18>
    1494:	9c 01       	movw	r18, r24
	return min( EndPoint2.value, EndPoint1.value);	
}
    1496:	c9 01       	movw	r24, r18
    1498:	08 95       	ret

0000149a <_Z18get_min_stop_anglev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
    149a:	80 91 28 02 	lds	r24, 0x0228
    149e:	90 91 29 02 	lds	r25, 0x0229
    14a2:	a0 91 2a 02 	lds	r26, 0x022A
    14a6:	b0 91 2b 02 	lds	r27, 0x022B
    14aa:	20 91 22 02 	lds	r18, 0x0222
    14ae:	30 91 23 02 	lds	r19, 0x0223
    14b2:	40 91 24 02 	lds	r20, 0x0224
    14b6:	50 91 25 02 	lds	r21, 0x0225
    14ba:	82 17       	cp	r24, r18
    14bc:	93 07       	cpc	r25, r19
    14be:	a4 07       	cpc	r26, r20
    14c0:	b5 07       	cpc	r27, r21
    14c2:	14 f4       	brge	.+4      	; 0x14c8 <_Z18get_min_stop_anglev+0x2e>
    14c4:	9c 01       	movw	r18, r24
    14c6:	ad 01       	movw	r20, r26
	return min( EndPoint2.angle , EndPoint1.angle);
}
    14c8:	b9 01       	movw	r22, r18
    14ca:	ca 01       	movw	r24, r20
    14cc:	08 95       	ret

000014ce <_Z18get_max_stop_valuev>:
/*******************************************************
get_max_stop_value()
RETURN	:	Greater of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_max_stop_value()
{
    14ce:	80 91 2c 02 	lds	r24, 0x022C
    14d2:	90 91 2d 02 	lds	r25, 0x022D
    14d6:	20 91 26 02 	lds	r18, 0x0226
    14da:	30 91 27 02 	lds	r19, 0x0227
    14de:	28 17       	cp	r18, r24
    14e0:	39 07       	cpc	r19, r25
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <_Z18get_max_stop_valuev+0x18>
    14e4:	9c 01       	movw	r18, r24
	return max( EndPoint2.value, EndPoint1.value );
}
    14e6:	c9 01       	movw	r24, r18
    14e8:	08 95       	ret

000014ea <_Z18get_max_stop_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
long int  get_max_stop_angle()
{
    14ea:	80 91 28 02 	lds	r24, 0x0228
    14ee:	90 91 29 02 	lds	r25, 0x0229
    14f2:	a0 91 2a 02 	lds	r26, 0x022A
    14f6:	b0 91 2b 02 	lds	r27, 0x022B
    14fa:	20 91 22 02 	lds	r18, 0x0222
    14fe:	30 91 23 02 	lds	r19, 0x0223
    1502:	40 91 24 02 	lds	r20, 0x0224
    1506:	50 91 25 02 	lds	r21, 0x0225
    150a:	28 17       	cp	r18, r24
    150c:	39 07       	cpc	r19, r25
    150e:	4a 07       	cpc	r20, r26
    1510:	5b 07       	cpc	r21, r27
    1512:	14 f4       	brge	.+4      	; 0x1518 <_Z18get_max_stop_anglev+0x2e>
    1514:	9c 01       	movw	r18, r24
    1516:	ad 01       	movw	r20, r26
	return max( EndPoint2.angle , EndPoint1.angle);
}
    1518:	b9 01       	movw	r22, r18
    151a:	ca 01       	movw	r24, r20
    151c:	08 95       	ret

0000151e <_Z20order_stops_by_valuev>:
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_min_stop_value()
{
	return min( EndPoint2.value, EndPoint1.value);	
    151e:	e0 91 2c 02 	lds	r30, 0x022C
    1522:	f0 91 2d 02 	lds	r31, 0x022D
    1526:	60 91 26 02 	lds	r22, 0x0226
    152a:	70 91 27 02 	lds	r23, 0x0227
    152e:	e6 17       	cp	r30, r22
    1530:	f7 07       	cpc	r31, r23
    1532:	40 f5       	brcc	.+80     	; 0x1584 <_Z20order_stops_by_valuev+0x66>
{
	word Min = get_min_stop_value();
	if (EndPoint1.value == Min) return;		// okay

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
    1534:	80 91 22 02 	lds	r24, 0x0222
    1538:	90 91 23 02 	lds	r25, 0x0223
    153c:	a0 91 24 02 	lds	r26, 0x0224
    1540:	b0 91 25 02 	lds	r27, 0x0225
	word     tvalue = EndPoint1.value;
	
	EndPoint1.angle = EndPoint2.angle;
    1544:	20 91 28 02 	lds	r18, 0x0228
    1548:	30 91 29 02 	lds	r19, 0x0229
    154c:	40 91 2a 02 	lds	r20, 0x022A
    1550:	50 91 2b 02 	lds	r21, 0x022B
    1554:	20 93 22 02 	sts	0x0222, r18
    1558:	30 93 23 02 	sts	0x0223, r19
    155c:	40 93 24 02 	sts	0x0224, r20
    1560:	50 93 25 02 	sts	0x0225, r21
	EndPoint1.value = EndPoint2.value;		
    1564:	f0 93 27 02 	sts	0x0227, r31
    1568:	e0 93 26 02 	sts	0x0226, r30
	EndPoint2.angle = tangle;
    156c:	80 93 28 02 	sts	0x0228, r24
    1570:	90 93 29 02 	sts	0x0229, r25
    1574:	a0 93 2a 02 	sts	0x022A, r26
    1578:	b0 93 2b 02 	sts	0x022B, r27
	EndPoint2.value = tvalue;	
    157c:	70 93 2d 02 	sts	0x022D, r23
    1580:	60 93 2c 02 	sts	0x022C, r22
    1584:	08 95       	ret

00001586 <_Z20order_stops_by_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
	return min( EndPoint2.angle , EndPoint1.angle);
    158e:	20 91 28 02 	lds	r18, 0x0228
    1592:	30 91 29 02 	lds	r19, 0x0229
    1596:	40 91 2a 02 	lds	r20, 0x022A
    159a:	50 91 2b 02 	lds	r21, 0x022B
    159e:	80 91 22 02 	lds	r24, 0x0222
    15a2:	90 91 23 02 	lds	r25, 0x0223
    15a6:	a0 91 24 02 	lds	r26, 0x0224
    15aa:	b0 91 25 02 	lds	r27, 0x0225
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
	word Min = get_min_stop_angle();
    15ae:	7c 01       	movw	r14, r24
    15b0:	8d 01       	movw	r16, r26
    15b2:	28 17       	cp	r18, r24
    15b4:	39 07       	cpc	r19, r25
    15b6:	4a 07       	cpc	r20, r26
    15b8:	5b 07       	cpc	r21, r27
    15ba:	14 f4       	brge	.+4      	; 0x15c0 <_Z20order_stops_by_anglev+0x3a>
    15bc:	79 01       	movw	r14, r18
    15be:	8a 01       	movw	r16, r20
	if (EndPoint1.angle == Min) return;		// okay
    15c0:	00 e0       	ldi	r16, 0x00	; 0
    15c2:	10 e0       	ldi	r17, 0x00	; 0
    15c4:	e8 16       	cp	r14, r24
    15c6:	f9 06       	cpc	r15, r25
    15c8:	0a 07       	cpc	r16, r26
    15ca:	1b 07       	cpc	r17, r27
    15cc:	01 f1       	breq	.+64     	; 0x160e <_Z20order_stops_by_anglev+0x88>

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
	word     tvalue = EndPoint1.value;
    15ce:	60 91 26 02 	lds	r22, 0x0226
    15d2:	70 91 27 02 	lds	r23, 0x0227
	
	EndPoint1.angle = EndPoint2.angle;
    15d6:	20 93 22 02 	sts	0x0222, r18
    15da:	30 93 23 02 	sts	0x0223, r19
    15de:	40 93 24 02 	sts	0x0224, r20
    15e2:	50 93 25 02 	sts	0x0225, r21
	EndPoint1.value = EndPoint2.value;		
    15e6:	20 91 2c 02 	lds	r18, 0x022C
    15ea:	30 91 2d 02 	lds	r19, 0x022D
    15ee:	30 93 27 02 	sts	0x0227, r19
    15f2:	20 93 26 02 	sts	0x0226, r18
	EndPoint2.angle = tangle;
    15f6:	80 93 28 02 	sts	0x0228, r24
    15fa:	90 93 29 02 	sts	0x0229, r25
    15fe:	a0 93 2a 02 	sts	0x022A, r26
    1602:	b0 93 2b 02 	sts	0x022B, r27
	EndPoint2.value = tvalue;
    1606:	70 93 2d 02 	sts	0x022D, r23
    160a:	60 93 2c 02 	sts	0x022C, r22
}
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	08 95       	ret

00001618 <_Z11check_stopst>:
			1 = Under the Lower stop
			2 = Over the top stop
***********************************************/
#define HYSTERESIS_THRESHOLD 7
byte  check_stops( word  mPotValue )
{
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	ec 01       	movw	r28, r24
	static byte previous_state = 0;
	led_off(LIMIT_MIN);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_Z7led_offh>
	led_off(LIMIT_MAX);
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_Z7led_offh>

	if (previous_state==1)		// IN STOP 1
    162a:	80 91 5c 02 	lds	r24, 0x025C
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	a1 f0       	breq	.+40     	; 0x165a <_Z11check_stopst+0x42>
		else {
			led_on(LIMIT_MIN);
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	01 f1       	breq	.+64     	; 0x1676 <_Z11check_stopst+0x5e>
			led_on(LIMIT_MAX);		
			return previous_state;		
		}
	}
		
	if (mPotValue < EndPoint1.value)
    1636:	80 91 26 02 	lds	r24, 0x0226
    163a:	90 91 27 02 	lds	r25, 0x0227
    163e:	c8 17       	cp	r28, r24
    1640:	d9 07       	cpc	r29, r25
    1642:	38 f1       	brcs	.+78     	; 0x1692 <_Z11check_stopst+0x7a>
	{
		led_on(LIMIT_MIN);
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
    1644:	80 91 2c 02 	lds	r24, 0x022C
    1648:	90 91 2d 02 	lds	r25, 0x022D
    164c:	8c 17       	cp	r24, r28
    164e:	9d 07       	cpc	r25, r29
    1650:	78 f1       	brcs	.+94     	; 0x16b0 <_Z11check_stopst+0x98>
	{
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
    1652:	80 e0       	ldi	r24, 0x00	; 0
}
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret
	led_off(LIMIT_MIN);
	led_off(LIMIT_MAX);

	if (previous_state==1)		// IN STOP 1
	{
		word hysteresis = EndPoint1.value + HYSTERESIS_THRESHOLD;
    165a:	80 91 26 02 	lds	r24, 0x0226
    165e:	90 91 27 02 	lds	r25, 0x0227
    1662:	07 96       	adiw	r24, 0x07	; 7
		if (mPotValue > hysteresis) {
    1664:	8c 17       	cp	r24, r28
    1666:	9d 07       	cpc	r25, r29
    1668:	e8 f4       	brcc	.+58     	; 0x16a4 <_Z11check_stopst+0x8c>
	}
	if (previous_state==2)		// IN STOP 2
	{
		word hysteresis = EndPoint2.value - HYSTERESIS_THRESHOLD;
		if (mPotValue < hysteresis) {
			previous_state = 0;
    166a:	10 92 5c 02 	sts	0x025C, r1
			return 0;
    166e:	80 e0       	ldi	r24, 0x00	; 0
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
	{
		word hysteresis = EndPoint2.value - HYSTERESIS_THRESHOLD;
    1676:	80 91 2c 02 	lds	r24, 0x022C
    167a:	90 91 2d 02 	lds	r25, 0x022D
    167e:	07 97       	sbiw	r24, 0x07	; 7
		if (mPotValue < hysteresis) {
    1680:	c8 17       	cp	r28, r24
    1682:	d9 07       	cpc	r29, r25
    1684:	90 f3       	brcs	.-28     	; 0x166a <_Z11check_stopst+0x52>
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MAX);		
    1686:	84 e0       	ldi	r24, 0x04	; 4
    1688:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_Z6led_onh>
			return previous_state;		
    168c:	80 91 5c 02 	lds	r24, 0x025C
    1690:	e1 cf       	rjmp	.-62     	; 0x1654 <_Z11check_stopst+0x3c>
		}
	}
		
	if (mPotValue < EndPoint1.value)
	{
		led_on(LIMIT_MIN);
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_Z6led_onh>
		previous_state = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 5c 02 	sts	0x025C, r24
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret
		if (mPotValue > hysteresis) {
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MIN);
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_Z6led_onh>
			return previous_state;		
    16aa:	80 91 5c 02 	lds	r24, 0x025C
    16ae:	d2 cf       	rjmp	.-92     	; 0x1654 <_Z11check_stopst+0x3c>
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
	{
		led_on(LIMIT_MAX);
    16b0:	84 e0       	ldi	r24, 0x04	; 4
    16b2:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_Z6led_onh>
		previous_state = 2;
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	80 93 5c 02 	sts	0x025C, r24
		return 2;
	}
	return 0;
}
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <_Z11check_stalltt>:
			1 = Over current Left side
			2 = Over current Right side
***********************************************/
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
    16c2:	20 91 03 01 	lds	r18, 0x0103
    16c6:	30 91 04 01 	lds	r19, 0x0104
    16ca:	28 17       	cp	r18, r24
    16cc:	39 07       	cpc	r19, r25
    16ce:	38 f0       	brcs	.+14     	; 0x16de <_Z11check_stalltt+0x1c>
		return 1;
	if (mRightCurrent > current_2_threshold)
    16d0:	26 17       	cp	r18, r22
    16d2:	37 07       	cpc	r19, r23
    16d4:	10 f0       	brcs	.+4      	; 0x16da <_Z11check_stalltt+0x18>
		return 2;
	return 0;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
}
    16d8:	08 95       	ret
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
		return 1;
	if (mRightCurrent > current_2_threshold)
		return 2;
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	08 95       	ret
			2 = Over current Right side
***********************************************/
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
		return 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	08 95       	ret

000016e2 <_Z19destination_reachedv>:
			1 = Exactly reached
			2 = Close over
			3 = Close under
***********************************************/
byte	  destination_reached(  )
{
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;
    16ee:	80 91 4d 02 	lds	r24, 0x024D
    16f2:	88 23       	and	r24, r24
    16f4:	f9 f4       	brne	.+62     	; 0x1734 <_Z19destination_reachedv+0x52>

	if (Destination.position == PotSample[1])
    16f6:	60 91 50 02 	lds	r22, 0x0250
    16fa:	70 91 51 02 	lds	r23, 0x0251
    16fe:	c0 91 80 02 	lds	r28, 0x0280
    1702:	d0 91 81 02 	lds	r29, 0x0281
    1706:	6c 17       	cp	r22, r28
    1708:	7d 07       	cpc	r23, r29
    170a:	19 f1       	breq	.+70     	; 0x1752 <_Z19destination_reachedv+0x70>
		return 1;

	if (previous_state==2)
    170c:	80 91 5b 02 	lds	r24, 0x025B
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	39 f1       	breq	.+78     	; 0x1762 <_Z19destination_reachedv+0x80>
			return 0;
		}
		else return previous_state;		
	}

	if (previous_state==3)
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	f1 f1       	breq	.+124    	; 0x1794 <_Z19destination_reachedv+0xb2>
		}
		else return previous_state;
	}

	// Check for overage
	if (Destination.starting_position < Destination.position)
    1718:	80 91 4e 02 	lds	r24, 0x024E
    171c:	90 91 4f 02 	lds	r25, 0x024F
    1720:	86 17       	cp	r24, r22
    1722:	97 07       	cpc	r25, r23
    1724:	78 f4       	brcc	.+30     	; 0x1744 <_Z19destination_reachedv+0x62>
	{
		// Approaching upward:
		if (PotSample[1] > Destination.position) {
    1726:	6c 17       	cp	r22, r28
    1728:	7d 07       	cpc	r23, r29
    172a:	20 f4       	brcc	.+8      	; 0x1734 <_Z19destination_reachedv+0x52>
			previous_state = 2;
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	80 93 5b 02 	sts	0x025B, r24
			return 2;		// reached upwardly
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <_Z19destination_reachedv+0x54>
		if ( PotSample[1] < Destination.position ) {
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
    1734:	80 e0       	ldi	r24, 0x00	; 0
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	08 95       	ret
			return 2;		// reached upwardly
		} 
	}
	else 
	{	// Approaching downward:
		if ( PotSample[1] < Destination.position ) {
    1744:	c6 17       	cp	r28, r22
    1746:	d7 07       	cpc	r29, r23
    1748:	a8 f7       	brcc	.-22     	; 0x1734 <_Z19destination_reachedv+0x52>
			previous_state = 3;
    174a:	83 e0       	ldi	r24, 0x03	; 3
    174c:	80 93 5b 02 	sts	0x025B, r24
			return 3;		// reached downwardly
    1750:	f2 cf       	rjmp	.-28     	; 0x1736 <_Z19destination_reachedv+0x54>
{
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;

	if (Destination.position == PotSample[1])
		return 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
}
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	08 95       	ret
	if (Destination.position == PotSample[1])
		return 1;

	if (previous_state==2)
	{
		word hysteresis = Destination.position - (0.1*Destination.position);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    176a:	7b 01       	movw	r14, r22
    176c:	8c 01       	movw	r16, r24
    176e:	2d ec       	ldi	r18, 0xCD	; 205
    1770:	3c ec       	ldi	r19, 0xCC	; 204
    1772:	4c ec       	ldi	r20, 0xCC	; 204
    1774:	5d e3       	ldi	r21, 0x3D	; 61
    1776:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    177a:	9b 01       	movw	r18, r22
    177c:	ac 01       	movw	r20, r24
    177e:	c8 01       	movw	r24, r16
    1780:	b7 01       	movw	r22, r14
    1782:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__subsf3>
    1786:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
		if (PotSample[1] < hysteresis) {
    178a:	c6 17       	cp	r28, r22
    178c:	d7 07       	cpc	r29, r23
    178e:	c8 f0       	brcs	.+50     	; 0x17c2 <_Z19destination_reachedv+0xe0>
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	d1 cf       	rjmp	.-94     	; 0x1736 <_Z19destination_reachedv+0x54>
		else return previous_state;		
	}

	if (previous_state==3)
	{
		word hysteresis = Destination.position + (0.1*Destination.position);
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    179c:	7b 01       	movw	r14, r22
    179e:	8c 01       	movw	r16, r24
    17a0:	2d ec       	ldi	r18, 0xCD	; 205
    17a2:	3c ec       	ldi	r19, 0xCC	; 204
    17a4:	4c ec       	ldi	r20, 0xCC	; 204
    17a6:	5d e3       	ldi	r21, 0x3D	; 61
    17a8:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	c8 01       	movw	r24, r16
    17b2:	b7 01       	movw	r22, r14
    17b4:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__addsf3>
    17b8:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
		if (PotSample[1] > hysteresis) {
    17bc:	6c 17       	cp	r22, r28
    17be:	7d 07       	cpc	r23, r29
    17c0:	50 f4       	brcc	.+20     	; 0x17d6 <_Z19destination_reachedv+0xf4>
			previous_state = 0;
    17c2:	10 92 5b 02 	sts	0x025B, r1
			return 0;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	08 95       	ret
	}

	if (previous_state==3)
	{
		word hysteresis = Destination.position + (0.1*Destination.position);
		if (PotSample[1] > hysteresis) {
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	ae cf       	rjmp	.-164    	; 0x1736 <_Z19destination_reachedv+0x54>

000017da <__vector_22>:
byte prev_q2 = 0;		// Holds the previous sample of the Q1 quadrature input.
byte prev_direction = CW;

// This covers PCint pins[7:0]
ISR ( PCINT0_vect )
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
	byte reg = PINB;		// PortB In
    17e8:	93 b1       	in	r25, 0x03	; 3
	byte q2 = (reg & (1<<ENCODER_Q2));
	byte Direction = CW;
	
	// Decode Direction & Count!		
	// Determine direction by the value of Q2 when Q1 transitions high.
	if ((prev_q1==0) && (q1>0))		// Low to High
    17ea:	80 91 6d 02 	lds	r24, 0x026D
    17ee:	88 23       	and	r24, r24
    17f0:	69 f4       	brne	.+26     	; 0x180c <__vector_22+0x32>
    17f2:	93 ff       	sbrs	r25, 3
    17f4:	0b c0       	rjmp	.+22     	; 0x180c <__vector_22+0x32>
	{
		if (q2==1) Direction = CW;
		if (q2==0) Direction = CCW;
    17f6:	94 fd       	sbrc	r25, 4
    17f8:	10 c0       	rjmp	.+32     	; 0x181a <__vector_22+0x40>
		if (Direction == CW)
			EncoderCount++;		// never reset.  Holds _THE_ count from min stop.
		else 
			EncoderCount--;
    17fa:	80 91 5f 02 	lds	r24, 0x025F
    17fe:	90 91 60 02 	lds	r25, 0x0260
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	90 93 60 02 	sts	0x0260, r25
    1808:	80 93 5f 02 	sts	0x025F, r24
	}
	
	// PCIF flag is automatically cleared by entering this routine!
}
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti
	if ((prev_q1==0) && (q1>0))		// Low to High
	{
		if (q2==1) Direction = CW;
		if (q2==0) Direction = CCW;
		if (Direction == CW)
			EncoderCount++;		// never reset.  Holds _THE_ count from min stop.
    181a:	80 91 5f 02 	lds	r24, 0x025F
    181e:	90 91 60 02 	lds	r25, 0x0260
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	90 93 60 02 	sts	0x0260, r25
    1828:	80 93 5f 02 	sts	0x025F, r24
		else 
			EncoderCount--;
	}
	
	// PCIF flag is automatically cleared by entering this routine!
}
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <_Z12encoder_initv>:

void encoder_init()
{
	// SET INPUTS:
	ENCODER_DDR |= ENCODER_DDR_INPUT_MASK;
    183a:	84 b1       	in	r24, 0x04	; 4
    183c:	8c 61       	ori	r24, 0x1C	; 28
    183e:	84 b9       	out	0x04, r24	; 4

	// Enable Interrupts on Rising Edges:
	PCMSK0 |= ((1<<ENCODER_Q1) | (1<<ENCODER_Q2));	
    1840:	ea e6       	ldi	r30, 0x6A	; 106
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	88 61       	ori	r24, 0x18	; 24
    1848:	80 83       	st	Z, r24
	PCICR  |= 0x01;     //PCIE0;
    184a:	e8 e6       	ldi	r30, 0x68	; 104
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	81 60       	ori	r24, 0x01	; 1
    1852:	80 83       	st	Z, r24
	//EIFR   |= 0x01;   //INTF0;
	EIMSK |= 0x01;		//INT0
    1854:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0x03;		// Rising edges.
    1856:	e9 e6       	ldi	r30, 0x69	; 105
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	83 60       	ori	r24, 0x03	; 3
    185e:	80 83       	st	Z, r24
}
    1860:	08 95       	ret

00001862 <_Z17encoder_timeslicev>:

/* Call every ~20ms ==> 50hz */
// Counts per Second : 
void encoder_timeslice()
{	
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
	EncoderSpeed 		= (EncoderCount - EncoderCountPrev) * 50;		// for 10ms task : *100
    186e:	c0 91 5f 02 	lds	r28, 0x025F
    1872:	d0 91 60 02 	lds	r29, 0x0260
    1876:	80 91 5d 02 	lds	r24, 0x025D
    187a:	90 91 5e 02 	lds	r25, 0x025E
    187e:	9e 01       	movw	r18, r28
    1880:	28 1b       	sub	r18, r24
    1882:	39 0b       	sbc	r19, r25
    1884:	82 e3       	ldi	r24, 0x32	; 50
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	28 9f       	mul	r18, r24
    188a:	b0 01       	movw	r22, r0
    188c:	29 9f       	mul	r18, r25
    188e:	70 0d       	add	r23, r0
    1890:	38 9f       	mul	r19, r24
    1892:	70 0d       	add	r23, r0
    1894:	11 24       	eor	r1, r1
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	60 93 61 02 	sts	0x0261, r22
    18a6:	70 93 62 02 	sts	0x0262, r23
    18aa:	80 93 63 02 	sts	0x0263, r24
    18ae:	90 93 64 02 	sts	0x0264, r25
	EncoderAcceleration = (EncoderSpeed - EncoderSpeedPrev) * 50;		// counts per second per second
    18b2:	20 91 65 02 	lds	r18, 0x0265
    18b6:	30 91 66 02 	lds	r19, 0x0266
    18ba:	40 91 67 02 	lds	r20, 0x0267
    18be:	50 91 68 02 	lds	r21, 0x0268
    18c2:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__subsf3>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	48 e4       	ldi	r20, 0x48	; 72
    18cc:	52 e4       	ldi	r21, 0x42	; 66
    18ce:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    18d2:	60 93 69 02 	sts	0x0269, r22
    18d6:	70 93 6a 02 	sts	0x026A, r23
    18da:	80 93 6b 02 	sts	0x026B, r24
    18de:	90 93 6c 02 	sts	0x026C, r25
	
	EncoderCountPrev = EncoderCount;
    18e2:	d0 93 5e 02 	sts	0x025E, r29
    18e6:	c0 93 5d 02 	sts	0x025D, r28
	EncoderSpeedPrev = EncoderSpeed;
    18ea:	e0 92 65 02 	sts	0x0265, r14
    18ee:	f0 92 66 02 	sts	0x0266, r15
    18f2:	00 93 67 02 	sts	0x0267, r16
    18f6:	10 93 68 02 	sts	0x0268, r17
}
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	08 95       	ret

00001908 <_Z17get_encoder_anglev>:
long int  get_encoder_angle()
{
	// Need to fix!  Verify stops are at least word size.  
	//return convert_to_angle( EncoderCount );
	return 0;
}
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	cb 01       	movw	r24, r22
    190e:	08 95       	ret

00001910 <_Z11OS_Dispatchv>:
{	
	if ((OS_Event_TIC_Counter % 5) == 0)	// 5ms tasks
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    1910:	20 91 3a 03 	lds	r18, 0x033A
    1914:	30 91 3b 03 	lds	r19, 0x033B
    1918:	c9 01       	movw	r24, r18
    191a:	6a e0       	ldi	r22, 0x0A	; 10
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodhi4>
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	c9 f0       	breq	.+50     	; 0x1958 <_Z11OS_Dispatchv+0x48>
	{	
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{
	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
    1926:	c9 01       	movw	r24, r18
    1928:	64 e6       	ldi	r22, 0x64	; 100
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodhi4>
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	61 f4       	brne	.+24     	; 0x194c <_Z11OS_Dispatchv+0x3c>
	{
		if (t) {
    1934:	80 91 70 02 	lds	r24, 0x0270
    1938:	90 91 71 02 	lds	r25, 0x0271
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	39 f4       	brne	.+14     	; 0x194e <_Z11OS_Dispatchv+0x3e>
			//led_on(3);
			//RESET_LED_4();
			t = 0;
		} else {
			//led_off(3);
			t = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	90 93 71 02 	sts	0x0271, r25
    1948:	80 93 70 02 	sts	0x0270, r24
    194c:	08 95       	ret
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
	{
		if (t) {
			//led_on(3);
			//RESET_LED_4();
			t = 0;
    194e:	10 92 71 02 	sts	0x0271, r1
    1952:	10 92 70 02 	sts	0x0270, r1
    1956:	08 95       	ret
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
	{		
		motor_timeslice_10ms();		
    1958:	0e 94 7a 07 	call	0xef4	; 0xef4 <_Z20motor_timeslice_10msv>
    195c:	20 91 3a 03 	lds	r18, 0x033A
    1960:	30 91 3b 03 	lds	r19, 0x033B
    1964:	e0 cf       	rjmp	.-64     	; 0x1926 <_Z11OS_Dispatchv+0x16>

00001966 <__vector_27>:
byte next_channel = 0;
byte sample_counter = 0;
#define NUM_AVGS 10

ISR ( ADC_vect )
{
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	2f 93       	push	r18
    197a:	3f 93       	push	r19
    197c:	4f 93       	push	r20
    197e:	5f 93       	push	r21
    1980:	6f 93       	push	r22
    1982:	7f 93       	push	r23
    1984:	8f 93       	push	r24
    1986:	9f 93       	push	r25
    1988:	af 93       	push	r26
    198a:	bf 93       	push	r27
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	ef 93       	push	r30
    1992:	ff 93       	push	r31
	if (sample_counter++ > NUM_AVGS) {
    1994:	80 91 83 02 	lds	r24, 0x0283
    1998:	98 2f       	mov	r25, r24
    199a:	9f 5f       	subi	r25, 0xFF	; 255
    199c:	90 93 83 02 	sts	0x0283, r25
    19a0:	8b 30       	cpi	r24, 0x0B	; 11
    19a2:	10 f0       	brcs	.+4      	; 0x19a8 <__vector_27+0x42>
		sample_counter=0;
    19a4:	10 92 83 02 	sts	0x0283, r1
	}
	word result = ADCL;
    19a8:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
    19ac:	90 91 79 00 	lds	r25, 0x0079
    19b0:	d9 2f       	mov	r29, r25
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	c9 2f       	mov	r28, r25
    19b6:	c8 0f       	add	r28, r24
    19b8:	d1 1d       	adc	r29, r1
	switch(next_channel)				// Round Robin style measurements
    19ba:	80 91 82 02 	lds	r24, 0x0282
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <__vector_27+0x5e>
    19c2:	63 c0       	rjmp	.+198    	; 0x1a8a <__vector_27+0x124>
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <__vector_27+0x64>
    19c8:	50 c0       	rjmp	.+160    	; 0x1a6a <__vector_27+0x104>
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	69 f5       	brne	.+90     	; 0x1a28 <__vector_27+0xc2>
			next_channel = 2;
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
			ADCSRA |= (1<<ADSC);			// Start conversion
			break;
			
	case 2:	RightCurrentSample = result;	
    19ce:	d0 93 7d 02 	sts	0x027D, r29
    19d2:	c0 93 7c 02 	sts	0x027C, r28
			RightCurrentSampleAvg = (gamma*RightCurrentSampleAvg) + alpha*((float)RightCurrentSample);
    19d6:	60 91 76 02 	lds	r22, 0x0276
    19da:	70 91 77 02 	lds	r23, 0x0277
    19de:	80 91 78 02 	lds	r24, 0x0278
    19e2:	90 91 79 02 	lds	r25, 0x0279
    19e6:	2d ec       	ldi	r18, 0xCD	; 205
    19e8:	3c ec       	ldi	r19, 0xCC	; 204
    19ea:	4c e4       	ldi	r20, 0x4C	; 76
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    19f2:	7b 01       	movw	r14, r22
    19f4:	8c 01       	movw	r16, r24
    19f6:	be 01       	movw	r22, r28
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    1a00:	2d ec       	ldi	r18, 0xCD	; 205
    1a02:	3c ec       	ldi	r19, 0xCC	; 204
    1a04:	4c e4       	ldi	r20, 0x4C	; 76
    1a06:	5e e3       	ldi	r21, 0x3E	; 62
    1a08:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	c8 01       	movw	r24, r16
    1a12:	b7 01       	movw	r22, r14
    1a14:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__addsf3>
    1a18:	60 93 76 02 	sts	0x0276, r22
    1a1c:	70 93 77 02 	sts	0x0277, r23
    1a20:	80 93 78 02 	sts	0x0278, r24
    1a24:	90 93 79 02 	sts	0x0279, r25
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;

	default: 			
			next_channel = 0;
    1a28:	10 92 82 02 	sts	0x0282, r1
			ADMUX = POT_MUX;		// Select POT	
    1a2c:	82 e4       	ldi	r24, 0x42	; 66
    1a2e:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    1a32:	80 91 7a 00 	lds	r24, 0x007A
    1a36:	80 64       	ori	r24, 0x40	; 64
    1a38:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	0f 90       	pop	r0
    1a66:	1f 90       	pop	r1
    1a68:	18 95       	reti
	}
	word result = ADCL;
	result      += (ADCH<<8);
	switch(next_channel)				// Round Robin style measurements
	{
	case 0:	PotSample[1] = result;
    1a6a:	d0 93 81 02 	sts	0x0281, r29
    1a6e:	c0 93 80 02 	sts	0x0280, r28
			next_channel = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 82 02 	sts	0x0282, r24
			ADMUX = CURRSENSE_LEFT_MUX;		// Select Left Current Read
    1a78:	88 e4       	ldi	r24, 0x48	; 72
    1a7a:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
    1a7e:	80 91 7a 00 	lds	r24, 0x007A
    1a82:	80 64       	ori	r24, 0x40	; 64
    1a84:	80 93 7a 00 	sts	0x007A, r24
			break;
    1a88:	d9 cf       	rjmp	.-78     	; 0x1a3c <__vector_27+0xd6>
			
	case 1:	LeftCurrentSample = result;
    1a8a:	d0 93 7b 02 	sts	0x027B, r29
    1a8e:	c0 93 7a 02 	sts	0x027A, r28
			LeftCurrentSampleAvg = (gamma*LeftCurrentSampleAvg) + alpha*((float)LeftCurrentSample);
    1a92:	60 91 72 02 	lds	r22, 0x0272
    1a96:	70 91 73 02 	lds	r23, 0x0273
    1a9a:	80 91 74 02 	lds	r24, 0x0274
    1a9e:	90 91 75 02 	lds	r25, 0x0275
    1aa2:	2d ec       	ldi	r18, 0xCD	; 205
    1aa4:	3c ec       	ldi	r19, 0xCC	; 204
    1aa6:	4c e4       	ldi	r20, 0x4C	; 76
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    1aae:	7b 01       	movw	r14, r22
    1ab0:	8c 01       	movw	r16, r24
    1ab2:	be 01       	movw	r22, r28
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    1abc:	2d ec       	ldi	r18, 0xCD	; 205
    1abe:	3c ec       	ldi	r19, 0xCC	; 204
    1ac0:	4c e4       	ldi	r20, 0x4C	; 76
    1ac2:	5e e3       	ldi	r21, 0x3E	; 62
    1ac4:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    1ac8:	9b 01       	movw	r18, r22
    1aca:	ac 01       	movw	r20, r24
    1acc:	c8 01       	movw	r24, r16
    1ace:	b7 01       	movw	r22, r14
    1ad0:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__addsf3>
    1ad4:	60 93 72 02 	sts	0x0272, r22
    1ad8:	70 93 73 02 	sts	0x0273, r23
    1adc:	80 93 74 02 	sts	0x0274, r24
    1ae0:	90 93 75 02 	sts	0x0275, r25
			next_channel = 2;
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	80 93 82 02 	sts	0x0282, r24
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
    1aea:	89 e4       	ldi	r24, 0x49	; 73
    1aec:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
    1af0:	80 91 7a 00 	lds	r24, 0x007A
    1af4:	80 64       	ori	r24, 0x40	; 64
    1af6:	80 93 7a 00 	sts	0x007A, r24
			break;
    1afa:	a0 cf       	rjmp	.-192    	; 0x1a3c <__vector_27+0xd6>

00001afc <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    1afc:	ea e7       	ldi	r30, 0x7A	; 122
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	88 7f       	andi	r24, 0xF8	; 248
    1b04:	80 83       	st	Z, r24
}
    1b06:	08 95       	ret

00001b08 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83; 
    1b08:	8b e9       	ldi	r24, 0x9B	; 155
    1b0a:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    1b0e:	ee e7       	ldi	r30, 0x7E	; 126
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	84 60       	ori	r24, 0x04	; 4
    1b16:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    1b18:	ef e7       	ldi	r30, 0x7F	; 127
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	83 60       	ori	r24, 0x03	; 3
    1b20:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    1b22:	80 ea       	ldi	r24, 0xA0	; 160
    1b24:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    1b28:	82 e4       	ldi	r24, 0x42	; 66
    1b2a:	80 93 7c 00 	sts	0x007C, r24
}
    1b2e:	08 95       	ret

00001b30 <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    1b30:	82 e4       	ldi	r24, 0x42	; 66
    1b32:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    1b36:	ea e7       	ldi	r30, 0x7A	; 122
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 64       	ori	r24, 0x40	; 64
    1b3e:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    1b40:	08 95       	ret

00001b42 <_Z36calc_load_current_from_sense_currentt>:
float Ioffset = 0.0;

float calc_load_current_from_sense_current( word mIsense )
{
	// ILoad = dK_ilis(Isense - Ioffset)
	return dK * (mIsense - Ioffset);	
    1b42:	bc 01       	movw	r22, r24
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    1b4c:	20 91 84 02 	lds	r18, 0x0284
    1b50:	30 91 85 02 	lds	r19, 0x0285
    1b54:	40 91 86 02 	lds	r20, 0x0286
    1b58:	50 91 87 02 	lds	r21, 0x0287
    1b5c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__subsf3>
    1b60:	20 91 07 01 	lds	r18, 0x0107
    1b64:	30 91 08 01 	lds	r19, 0x0108
    1b68:	40 91 09 01 	lds	r20, 0x0109
    1b6c:	50 91 0a 01 	lds	r21, 0x010A
    1b70:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
}
    1b74:	08 95       	ret

00001b76 <_Z15convert_to_ampst>:
void convert_to_amps( word mAmps )
{
	
}
    1b76:	08 95       	ret

00001b78 <_Z17read_current_leftv>:
	on to calculate load current.
***********************************************/
word read_current_left()
{	
	// SELECT AND START CONVERSION:
	ADMUX  = CURRSENSE_LEFT_MUX;
    1b78:	88 e4       	ldi	r24, 0x48	; 72
    1b7a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    1b7e:	80 91 7a 00 	lds	r24, 0x007A
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1b88:	80 91 7a 00 	lds	r24, 0x007A
    1b8c:	86 fd       	sbrc	r24, 6
    1b8e:	fc cf       	rjmp	.-8      	; 0x1b88 <_Z17read_current_leftv+0x10>
	
	// PICK UP RESULT:
	word result = ADCL;
    1b90:	80 91 78 00 	lds	r24, 0x0078
	result += (ADCH<<8);
    1b94:	90 91 79 00 	lds	r25, 0x0079
    1b98:	39 2f       	mov	r19, r25
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	28 0f       	add	r18, r24
    1b9e:	31 1d       	adc	r19, r1
	LeftCurrentSample = result;
    1ba0:	30 93 7b 02 	sts	0x027B, r19
    1ba4:	20 93 7a 02 	sts	0x027A, r18
	return result;
}
    1ba8:	c9 01       	movw	r24, r18
    1baa:	08 95       	ret

00001bac <_Z18read_current_rightv>:
Return	:	The motor position in degrees * 10
***********************************************/
word read_current_right()
{
	// SELECT AND START CONVERSION:
	ADMUX = CURRSENSE_RIGHT_MUX;
    1bac:	89 e4       	ldi	r24, 0x49	; 73
    1bae:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    1bb2:	80 91 7a 00 	lds	r24, 0x007A
    1bb6:	80 64       	ori	r24, 0x40	; 64
    1bb8:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1bbc:	80 91 7a 00 	lds	r24, 0x007A
    1bc0:	86 fd       	sbrc	r24, 6
    1bc2:	fc cf       	rjmp	.-8      	; 0x1bbc <_Z18read_current_rightv+0x10>
	
	// PICK UP RESULT:
	word result = ADCL;
    1bc4:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
    1bc8:	90 91 79 00 	lds	r25, 0x0079
    1bcc:	39 2f       	mov	r19, r25
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	28 0f       	add	r18, r24
    1bd2:	31 1d       	adc	r19, r1
	RightCurrentSample = result;		
    1bd4:	30 93 7d 02 	sts	0x027D, r19
    1bd8:	20 93 7c 02 	sts	0x027C, r18
	return result;
}
    1bdc:	c9 01       	movw	r24, r18
    1bde:	08 95       	ret

00001be0 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
    1be0:	90 93 c0 02 	sts	0x02C0, r25
    1be4:	80 93 bf 02 	sts	0x02BF, r24
}
    1be8:	08 95       	ret

00001bea <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
    1bea:	90 93 c2 02 	sts	0x02C2, r25
    1bee:	80 93 c1 02 	sts	0x02C1, r24
}
    1bf2:	08 95       	ret

00001bf4 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
    1bf8:	ed ee       	ldi	r30, 0xED	; 237
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1bfe:	82 95       	swap	r24
    1c00:	80 7f       	andi	r24, 0xF0	; 240
    1c02:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
    1c04:	c1 ef       	ldi	r28, 0xF1	; 241
    1c06:	d0 e0       	ldi	r29, 0x00	; 0
    1c08:	38 81       	ld	r19, Y
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	80 7e       	andi	r24, 0xE0	; 224
    1c0e:	90 70       	andi	r25, 0x00	; 0
    1c10:	96 95       	lsr	r25
    1c12:	87 95       	ror	r24
    1c14:	92 95       	swap	r25
    1c16:	82 95       	swap	r24
    1c18:	8f 70       	andi	r24, 0x0F	; 15
    1c1a:	89 27       	eor	r24, r25
    1c1c:	9f 70       	andi	r25, 0x0F	; 15
    1c1e:	89 27       	eor	r24, r25
    1c20:	38 7f       	andi	r19, 0xF8	; 248
    1c22:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
    1c24:	a0 ef       	ldi	r26, 0xF0	; 240
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	8c 91       	ld	r24, X
    1c2a:	66 0f       	add	r22, r22
    1c2c:	66 0f       	add	r22, r22
    1c2e:	66 0f       	add	r22, r22
    1c30:	87 70       	andi	r24, 0x07	; 7
    1c32:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
    1c34:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
    1c36:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
    1c38:	a5 ef       	ldi	r26, 0xF5	; 245
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	8c 91       	ld	r24, X
    1c3e:	87 60       	ori	r24, 0x07	; 7
    1c40:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
    1c42:	a4 ef       	ldi	r26, 0xF4	; 244
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	8c 91       	ld	r24, X
    1c48:	88 6f       	ori	r24, 0xF8	; 248
    1c4a:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1c4c:	20 83       	st	Z, r18
}
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	08 95       	ret

00001c54 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1c54:	ed ee       	ldi	r30, 0xED	; 237
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1c5a:	82 95       	swap	r24
    1c5c:	80 7f       	andi	r24, 0xF0	; 240
    1c5e:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
    1c60:	a5 ef       	ldi	r26, 0xF5	; 245
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	8c 91       	ld	r24, X
    1c66:	88 7f       	andi	r24, 0xF8	; 248
    1c68:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
    1c6a:	a4 ef       	ldi	r26, 0xF4	; 244
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	8c 91       	ld	r24, X
    1c70:	87 70       	andi	r24, 0x07	; 7
    1c72:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1c74:	90 83       	st	Z, r25
}
    1c76:	08 95       	ret

00001c78 <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
    1c78:	25 2f       	mov	r18, r21
    1c7a:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1c7c:	ed ee       	ldi	r30, 0xED	; 237
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1c82:	82 95       	swap	r24
    1c84:	80 7f       	andi	r24, 0xF0	; 240
    1c86:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
    1c88:	86 2f       	mov	r24, r22
    1c8a:	82 95       	swap	r24
    1c8c:	86 95       	lsr	r24
    1c8e:	87 70       	andi	r24, 0x07	; 7
    1c90:	44 0f       	add	r20, r20
    1c92:	44 0f       	add	r20, r20
    1c94:	44 0f       	add	r20, r20
    1c96:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    1c98:	c9 01       	movw	r24, r18
    1c9a:	80 7e       	andi	r24, 0xE0	; 224
    1c9c:	9f 71       	andi	r25, 0x1F	; 31
    1c9e:	96 95       	lsr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	92 95       	swap	r25
    1ca4:	82 95       	swap	r24
    1ca6:	8f 70       	andi	r24, 0x0F	; 15
    1ca8:	89 27       	eor	r24, r25
    1caa:	9f 70       	andi	r25, 0x0F	; 15
    1cac:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
    1cae:	22 0f       	add	r18, r18
    1cb0:	22 0f       	add	r18, r18
    1cb2:	22 0f       	add	r18, r18
    1cb4:	37 2f       	mov	r19, r23
    1cb6:	32 95       	swap	r19
    1cb8:	36 95       	lsr	r19
    1cba:	37 70       	andi	r19, 0x07	; 7
    1cbc:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
    1cbe:	77 0f       	add	r23, r23
    1cc0:	77 0f       	add	r23, r23
    1cc2:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
    1cc4:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
    1cc8:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    1ccc:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
    1cd0:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
    1cd4:	50 83       	st	Z, r21
}
    1cd6:	08 95       	ret

00001cd8 <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	f8 2e       	mov	r15, r24
    1ce4:	8b 01       	movw	r16, r22
    1ce6:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    1cee:	c7 2f       	mov	r28, r23
    1cf0:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
    1cf2:	c8 01       	movw	r24, r16
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    1cfa:	27 2f       	mov	r18, r23
    1cfc:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1cfe:	ed ee       	ldi	r30, 0xED	; 237
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1d04:	f2 94       	swap	r15
    1d06:	b0 ef       	ldi	r27, 0xF0	; 240
    1d08:	fb 22       	and	r15, r27
    1d0a:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
    1d0c:	43 ef       	ldi	r20, 0xF3	; 243
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	da 01       	movw	r26, r20
    1d12:	6c 91       	ld	r22, X
    1d14:	8d 2f       	mov	r24, r29
    1d16:	82 95       	swap	r24
    1d18:	86 95       	lsr	r24
    1d1a:	87 70       	andi	r24, 0x07	; 7
    1d1c:	68 7f       	andi	r22, 0xF8	; 248
    1d1e:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    1d20:	ce 01       	movw	r24, r28
    1d22:	80 7e       	andi	r24, 0xE0	; 224
    1d24:	9f 71       	andi	r25, 0x1F	; 31
    1d26:	96 95       	lsr	r25
    1d28:	87 95       	ror	r24
    1d2a:	92 95       	swap	r25
    1d2c:	82 95       	swap	r24
    1d2e:	8f 70       	andi	r24, 0x0F	; 15
    1d30:	89 27       	eor	r24, r25
    1d32:	9f 70       	andi	r25, 0x0F	; 15
    1d34:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
    1d36:	a1 ef       	ldi	r26, 0xF1	; 241
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	7c 91       	ld	r23, X
    1d3c:	fc 2e       	mov	r15, r28
    1d3e:	ff 0c       	add	r15, r15
    1d40:	ff 0c       	add	r15, r15
    1d42:	ff 0c       	add	r15, r15
    1d44:	77 70       	andi	r23, 0x07	; 7
    1d46:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
    1d48:	ea 01       	movw	r28, r20
    1d4a:	68 83       	st	Y, r22
	CANIDT2 = idt2;
    1d4c:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    1d50:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
    1d52:	c7 ef       	ldi	r28, 0xF7	; 247
    1d54:	d0 e0       	ldi	r29, 0x00	; 0
    1d56:	48 81       	ld	r20, Y
    1d58:	83 2f       	mov	r24, r19
    1d5a:	82 95       	swap	r24
    1d5c:	86 95       	lsr	r24
    1d5e:	87 70       	andi	r24, 0x07	; 7
    1d60:	48 7f       	andi	r20, 0xF8	; 248
    1d62:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
    1d64:	c9 01       	movw	r24, r18
    1d66:	80 7e       	andi	r24, 0xE0	; 224
    1d68:	9f 71       	andi	r25, 0x1F	; 31
    1d6a:	96 95       	lsr	r25
    1d6c:	87 95       	ror	r24
    1d6e:	92 95       	swap	r25
    1d70:	82 95       	swap	r24
    1d72:	8f 70       	andi	r24, 0x0F	; 15
    1d74:	89 27       	eor	r24, r25
    1d76:	9f 70       	andi	r25, 0x0F	; 15
    1d78:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
    1d7a:	a5 ef       	ldi	r26, 0xF5	; 245
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	5c 91       	ld	r21, X
    1d80:	22 0f       	add	r18, r18
    1d82:	22 0f       	add	r18, r18
    1d84:	22 0f       	add	r18, r18
    1d86:	57 70       	andi	r21, 0x07	; 7
    1d88:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
    1d8a:	48 83       	st	Y, r20
	CANIDM2 = idm2;
    1d8c:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
    1d90:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
    1d92:	00 83       	st	Z, r16
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	08 95       	ret

00001da0 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
    1da0:	ed ee       	ldi	r30, 0xED	; 237
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1da6:	82 95       	swap	r24
    1da8:	80 7f       	andi	r24, 0xF0	; 240
    1daa:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
    1dac:	a7 ef       	ldi	r26, 0xF7	; 247
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	8c 91       	ld	r24, X
    1db2:	88 7f       	andi	r24, 0xF8	; 248
    1db4:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
    1db6:	a6 ef       	ldi	r26, 0xF6	; 246
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	8c 91       	ld	r24, X
    1dbc:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
    1dbe:	a5 ef       	ldi	r26, 0xF5	; 245
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	8c 91       	ld	r24, X
    1dc4:	87 70       	andi	r24, 0x07	; 7
    1dc6:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1dc8:	90 83       	st	Z, r25
}
    1dca:	08 95       	ret

00001dcc <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1dcc:	ed ee       	ldi	r30, 0xED	; 237
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1dd2:	82 95       	swap	r24
    1dd4:	80 7f       	andi	r24, 0xF0	; 240
    1dd6:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1dd8:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    1ddc:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    1de0:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    1de4:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    1de8:	90 83       	st	Z, r25
}
    1dea:	08 95       	ret

00001dec <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1dec:	ed ee       	ldi	r30, 0xED	; 237
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1df2:	82 95       	swap	r24
    1df4:	80 7f       	andi	r24, 0xF0	; 240
    1df6:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
    1df8:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
    1dfc:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
    1e00:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
    1e04:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
    1e08:	90 83       	st	Z, r25
}
    1e0a:	08 95       	ret

00001e0c <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
    1e12:	ed ee       	ldi	r30, 0xED	; 237
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
    1e18:	38 2f       	mov	r19, r24
    1e1a:	32 95       	swap	r19
    1e1c:	30 7f       	andi	r19, 0xF0	; 240
    1e1e:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
    1e20:	ce ed       	ldi	r28, 0xDE	; 222
    1e22:	d0 e0       	ldi	r29, 0x00	; 0
    1e24:	98 81       	ld	r25, Y
    1e26:	a1 e0       	ldi	r26, 0x01	; 1
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <_Z21can_setup_receive_mobhssh+0x24>
    1e2c:	aa 0f       	add	r26, r26
    1e2e:	bb 1f       	adc	r27, r27
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <_Z21can_setup_receive_mobhssh+0x20>
    1e34:	9a 2b       	or	r25, r26
    1e36:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1e38:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1e3a:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1e3c:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    1e40:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    1e44:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    1e48:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    1e4c:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
    1e4e:	20 69       	ori	r18, 0x90	; 144
    1e50:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
    1e54:	a8 ed       	ldi	r26, 0xD8	; 216
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	8c 91       	ld	r24, X
    1e5a:	82 60       	ori	r24, 0x02	; 2
    1e5c:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
    1e5e:	10 83       	st	Z, r17
}
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	08 95       	ret

00001e68 <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	28 e0       	ldi	r18, 0x08	; 8
    1e80:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
    1e84:	60 91 c3 02 	lds	r22, 0x02C3
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	28 e0       	ldi	r18, 0x08	; 8
    1e9c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1ea0:	cd ee       	ldi	r28, 0xED	; 237
    1ea2:	d0 e0       	ldi	r29, 0x00	; 0
    1ea4:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1ea6:	80 e3       	ldi	r24, 0x30	; 48
    1ea8:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    1eaa:	05 ef       	ldi	r16, 0xF5	; 245
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	f8 01       	movw	r30, r16
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 7f       	andi	r24, 0xF8	; 248
    1eb4:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    1eb6:	84 ef       	ldi	r24, 0xF4	; 244
    1eb8:	e8 2e       	mov	r14, r24
    1eba:	f1 2c       	mov	r15, r1
    1ebc:	f7 01       	movw	r30, r14
    1ebe:	80 81       	ld	r24, Z
    1ec0:	87 70       	andi	r24, 0x07	; 7
    1ec2:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    1ec4:	98 83       	st	Y, r25
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	63 e2       	ldi	r22, 0x23	; 35
    1eca:	7c ef       	ldi	r23, 0xFC	; 252
    1ecc:	43 e2       	ldi	r20, 0x23	; 35
    1ece:	5c ef       	ldi	r21, 0xFC	; 252
    1ed0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
    1ed4:	85 e0       	ldi	r24, 0x05	; 5
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	50 e0       	ldi	r21, 0x00	; 0
    1ede:	28 e0       	ldi	r18, 0x08	; 8
    1ee0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1ee4:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1ee6:	80 e5       	ldi	r24, 0x50	; 80
    1ee8:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    1eea:	f8 01       	movw	r30, r16
    1eec:	80 81       	ld	r24, Z
    1eee:	88 7f       	andi	r24, 0xF8	; 248
    1ef0:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    1ef2:	f7 01       	movw	r30, r14
    1ef4:	80 81       	ld	r24, Z
    1ef6:	87 70       	andi	r24, 0x07	; 7
    1ef8:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    1efa:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
    1efc:	85 e0       	ldi	r24, 0x05	; 5
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	7c ef       	ldi	r23, 0xFC	; 252
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	5c ef       	ldi	r21, 0xFC	; 252
    1f06:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_Z20can_add_id_to_filterhtt>
}
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	08 95       	ret

00001f18 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
    1f18:	ed ee       	ldi	r30, 0xED	; 237
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
    1f1e:	82 95       	swap	r24
    1f20:	80 7f       	andi	r24, 0xF0	; 240
    1f22:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
    1f24:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    1f28:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
    1f2c:	90 83       	st	Z, r25
}
    1f2e:	08 95       	ret

00001f30 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
    1f30:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
    1f32:	40 91 f3 00 	lds	r20, 0x00F3
    1f36:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
    1f38:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
    1f3c:	80 91 f1 00 	lds	r24, 0x00F1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
    1f42:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
    1f46:	ba 01       	movw	r22, r20
    1f48:	76 95       	lsr	r23
    1f4a:	67 95       	ror	r22
    1f4c:	76 95       	lsr	r23
    1f4e:	67 95       	ror	r22
    1f50:	76 95       	lsr	r23
    1f52:	67 95       	ror	r22
    1f54:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
    1f56:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
    1f58:	22 0f       	add	r18, r18
    1f5a:	33 1f       	adc	r19, r19
    1f5c:	22 95       	swap	r18
    1f5e:	32 95       	swap	r19
    1f60:	30 7f       	andi	r19, 0xF0	; 240
    1f62:	32 27       	eor	r19, r18
    1f64:	20 7f       	andi	r18, 0xF0	; 240
    1f66:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
    1f68:	54 2f       	mov	r21, r20
    1f6a:	44 27       	eor	r20, r20
    1f6c:	52 95       	swap	r21
    1f6e:	55 0f       	add	r21, r21
    1f70:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    1f72:	24 2b       	or	r18, r20
    1f74:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
    1f76:	ac 01       	movw	r20, r24
    1f78:	56 95       	lsr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	56 95       	lsr	r21
    1f7e:	47 95       	ror	r20
    1f80:	56 95       	lsr	r21
    1f82:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    1f84:	24 2b       	or	r18, r20
    1f86:	35 2b       	or	r19, r21
    1f88:	32 83       	std	Z+2, r19	; 0x02
    1f8a:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
    1f8c:	82 95       	swap	r24
    1f8e:	88 0f       	add	r24, r24
    1f90:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
    1f92:	a6 95       	lsr	r26
    1f94:	a6 95       	lsr	r26
    1f96:	a6 95       	lsr	r26
    1f98:	a8 2b       	or	r26, r24
    1f9a:	a3 83       	std	Z+3, r26	; 0x03
}
    1f9c:	08 95       	ret

00001f9e <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
    1fa4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
    1fa8:	80 91 ef 00 	lds	r24, 0x00EF
    1fac:	8f 70       	andi	r24, 0x0F	; 15
    1fae:	28 2f       	mov	r18, r24
    1fb0:	22 0f       	add	r18, r18
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	91 7e       	andi	r25, 0xE1	; 225
    1fb6:	92 2b       	or	r25, r18
    1fb8:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
    1fba:	48 2f       	mov	r20, r24
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	41 15       	cp	r20, r1
    1fc0:	51 05       	cpc	r21, r1
    1fc2:	59 f0       	breq	.+22     	; 0x1fda <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
    1fc4:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
    1fca:	90 91 fa 00 	lds	r25, 0x00FA
    1fce:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    1fd0:	2f 5f       	subi	r18, 0xFF	; 255
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd4:	24 17       	cp	r18, r20
    1fd6:	35 07       	cpc	r19, r21
    1fd8:	c4 f3       	brlt	.-16     	; 0x1fca <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	08 95       	ret

00001fe0 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
    1fe0:	1f 92       	push	r1
    1fe2:	0f 92       	push	r0
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	0f 92       	push	r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	2f 93       	push	r18
    1fec:	3f 93       	push	r19
    1fee:	4f 93       	push	r20
    1ff0:	5f 93       	push	r21
    1ff2:	6f 93       	push	r22
    1ff4:	7f 93       	push	r23
    1ff6:	8f 93       	push	r24
    1ff8:	9f 93       	push	r25
    1ffa:	af 93       	push	r26
    1ffc:	bf 93       	push	r27
    1ffe:	cf 93       	push	r28
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
    2004:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
    2008:	40 91 ec 00 	lds	r20, 0x00EC
    200c:	42 95       	swap	r20
    200e:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    2010:	4f 30       	cpi	r20, 0x0F	; 15
    2012:	09 f4       	brne	.+2      	; 0x2016 <__vector_18+0x36>
    2014:	87 c0       	rjmp	.+270    	; 0x2124 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
    2016:	80 91 ec 00 	lds	r24, 0x00EC
    201a:	80 7f       	andi	r24, 0xF0	; 240
    201c:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
    2020:	80 91 ee 00 	lds	r24, 0x00EE
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	8f 71       	andi	r24, 0x1F	; 31
    2028:	90 70       	andi	r25, 0x00	; 0
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	09 f4       	brne	.+2      	; 0x2030 <__vector_18+0x50>
    202e:	40 c0       	rjmp	.+128    	; 0x20b0 <__vector_18+0xd0>
		 byte st = CANSTMOB;
    2030:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	82 ff       	sbrs	r24, 2
    2038:	05 c0       	rjmp	.+10     	; 0x2044 <__vector_18+0x64>
    203a:	20 91 ee 00 	lds	r18, 0x00EE
    203e:	2f 7e       	andi	r18, 0xEF	; 239
    2040:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
    2044:	9c 01       	movw	r18, r24
    2046:	23 70       	andi	r18, 0x03	; 3
    2048:	30 70       	andi	r19, 0x00	; 0
    204a:	21 15       	cp	r18, r1
    204c:	31 05       	cpc	r19, r1
    204e:	29 f0       	breq	.+10     	; 0x205a <__vector_18+0x7a>
    2050:	20 91 ee 00 	lds	r18, 0x00EE
    2054:	27 7f       	andi	r18, 0xF7	; 247
    2056:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
    205a:	81 ff       	sbrs	r24, 1
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <__vector_18+0x88>
    205e:	20 91 ee 00 	lds	r18, 0x00EE
    2062:	2b 7f       	andi	r18, 0xFB	; 251
    2064:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
    2068:	80 ff       	sbrs	r24, 0
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <__vector_18+0x96>
    206c:	80 91 ee 00 	lds	r24, 0x00EE
    2070:	8d 7f       	andi	r24, 0xFD	; 253
    2072:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
    2076:	45 30       	cpi	r20, 0x05	; 5
    2078:	09 f4       	brne	.+2      	; 0x207c <__vector_18+0x9c>
    207a:	4b c0       	rjmp	.+150    	; 0x2112 <__vector_18+0x132>
    207c:	41 30       	cpi	r20, 0x01	; 1
    207e:	09 f4       	brne	.+2      	; 0x2082 <__vector_18+0xa2>
    2080:	48 c0       	rjmp	.+144    	; 0x2112 <__vector_18+0x132>
    2082:	43 30       	cpi	r20, 0x03	; 3
    2084:	09 f4       	brne	.+2      	; 0x2088 <__vector_18+0xa8>
    2086:	45 c0       	rjmp	.+138    	; 0x2112 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
    2088:	c0 93 ed 00 	sts	0x00ED, r28
}
    208c:	ff 91       	pop	r31
    208e:	ef 91       	pop	r30
    2090:	cf 91       	pop	r28
    2092:	bf 91       	pop	r27
    2094:	af 91       	pop	r26
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	7f 91       	pop	r23
    209c:	6f 91       	pop	r22
    209e:	5f 91       	pop	r21
    20a0:	4f 91       	pop	r20
    20a2:	3f 91       	pop	r19
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
    20b0:	80 91 ee 00 	lds	r24, 0x00EE
    20b4:	85 fd       	sbrc	r24, 5
    20b6:	13 c0       	rjmp	.+38     	; 0x20de <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
    20b8:	80 91 ee 00 	lds	r24, 0x00EE
    20bc:	86 ff       	sbrs	r24, 6
    20be:	e4 cf       	rjmp	.-56     	; 0x2088 <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
    20c0:	e0 91 c1 02 	lds	r30, 0x02C1
    20c4:	f0 91 c2 02 	lds	r31, 0x02C2
    20c8:	30 97       	sbiw	r30, 0x00	; 0
    20ca:	09 f0       	breq	.+2      	; 0x20ce <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
    20cc:	09 95       	icall

		TransmittedSuccesfully = TRUE;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	80 93 b6 02 	sts	0x02B6, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
    20d4:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
    20d8:	10 92 ee 00 	sts	0x00EE, r1
    20dc:	d5 cf       	rjmp	.-86     	; 0x2088 <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	80 93 b5 02 	sts	0x02B5, r24
       	can_retrieve_data( &LastReceivedMsg );
    20e4:	86 ea       	ldi	r24, 0xA6	; 166
    20e6:	92 e0       	ldi	r25, 0x02	; 2
    20e8:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
    20ec:	86 ea       	ldi	r24, 0xA6	; 166
    20ee:	92 e0       	ldi	r25, 0x02	; 2
    20f0:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
    20f4:	88 23       	and	r24, r24
    20f6:	69 f4       	brne	.+26     	; 0x2112 <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
    20f8:	86 ea       	ldi	r24, 0xA6	; 166
    20fa:	92 e0       	ldi	r25, 0x02	; 2
    20fc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
    2100:	e0 91 bf 02 	lds	r30, 0x02BF
    2104:	f0 91 c0 02 	lds	r31, 0x02C0
    2108:	30 97       	sbiw	r30, 0x00	; 0
    210a:	19 f0       	breq	.+6      	; 0x2112 <__vector_18+0x132>
    	   		rx_call_back( &LastReceivedMsg );
    210c:	86 ea       	ldi	r24, 0xA6	; 166
    210e:	92 e0       	ldi	r25, 0x02	; 2
    2110:	09 95       	icall
		}

		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
    2112:	88 e9       	ldi	r24, 0x98	; 152
    2114:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
    2118:	80 91 ee 00 	lds	r24, 0x00EE
    211c:	8f 7d       	andi	r24, 0xDF	; 223
    211e:	80 93 ee 00 	sts	0x00EE, r24
    2122:	b2 cf       	rjmp	.-156    	; 0x2088 <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    2124:	80 91 da 00 	lds	r24, 0x00DA
    2128:	80 93 da 00 	sts	0x00DA, r24
    212c:	af cf       	rjmp	.-162    	; 0x208c <__vector_18+0xac>

0000212e <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
    2134:	98 2f       	mov	r25, r24
    2136:	92 95       	swap	r25
    2138:	90 7f       	andi	r25, 0xF0	; 240
   cli();
    213a:	f8 94       	cli
   CANPAGE = page;
    213c:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
    2140:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
    2144:	48 81       	ld	r20, Y
    2146:	59 81       	ldd	r21, Y+1	; 0x01
    2148:	6a 81       	ldd	r22, Y+2	; 0x02
    214a:	7b 81       	ldd	r23, Y+3	; 0x03
    214c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	86 95       	lsr	r24
    2154:	8f 70       	andi	r24, 0x0F	; 15
    2156:	79 f0       	breq	.+30     	; 0x2176 <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
    2158:	fe 01       	movw	r30, r28
    215a:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
    2160:	21 91       	ld	r18, Z+
    2162:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	2c 81       	ldd	r18, Y+4	; 0x04
    216a:	26 95       	lsr	r18
    216c:	2f 70       	andi	r18, 0x0F	; 15
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	82 17       	cp	r24, r18
    2172:	93 07       	cpc	r25, r19
    2174:	ac f3       	brlt	.-22     	; 0x2160 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
    2176:	80 91 f0 00 	lds	r24, 0x00F0
    217a:	8b 7f       	andi	r24, 0xFB	; 251
    217c:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	86 95       	lsr	r24
    2184:	8f 70       	andi	r24, 0x0F	; 15
    2186:	80 65       	ori	r24, 0x50	; 80
    2188:	80 93 ef 00 	sts	0x00EF, r24
   sei();
    218c:	78 94       	sei
}
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
    2194:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
    2198:	80 91 ee 00 	lds	r24, 0x00EE
    219c:	86 ff       	sbrs	r24, 6
    219e:	fc cf       	rjmp	.-8      	; 0x2198 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
    21a0:	08 95       	ret

000021a2 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    21a2:	20 91 f8 00 	lds	r18, 0x00F8
    21a6:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
    21a8:	40 91 f9 00 	lds	r20, 0x00F9
    21ac:	94 2f       	mov	r25, r20
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	28 2b       	or	r18, r24
    21b2:	39 2b       	or	r19, r25
  return retval;
}
    21b4:	c9 01       	movw	r24, r18
    21b6:	08 95       	ret

000021b8 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
    21be:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <_Z17can_retrieve_dataP4sCAN>
    21c2:	8f 70       	andi	r24, 0x0F	; 15
    21c4:	88 0f       	add	r24, r24
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	91 7e       	andi	r25, 0xE1	; 225
    21ca:	98 2b       	or	r25, r24
    21cc:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    21ce:	80 91 f8 00 	lds	r24, 0x00F8
    21d2:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
    21d4:	40 91 f9 00 	lds	r20, 0x00F9
    21d8:	34 2f       	mov	r19, r20
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	82 2b       	or	r24, r18
    21de:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
    21e0:	9e 87       	std	Y+14, r25	; 0x0e
    21e2:	8d 87       	std	Y+13, r24	; 0x0d
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	61 f0       	breq	.+24     	; 0x2206 <_Z8set_baudh+0x1c>
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	30 f0       	brcs	.+12     	; 0x21fe <_Z8set_baudh+0x14>
    21f2:	85 30       	cpi	r24, 0x05	; 5
    21f4:	d1 f0       	breq	.+52     	; 0x222a <_Z8set_baudh+0x40>
    21f6:	85 30       	cpi	r24, 0x05	; 5
    21f8:	80 f4       	brcc	.+32     	; 0x221a <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    21fa:	82 e1       	ldi	r24, 0x12	; 18
    21fc:	05 c0       	rjmp	.+10     	; 0x2208 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	91 f0       	breq	.+36     	; 0x2226 <_Z8set_baudh+0x3c>
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	71 f0       	breq	.+28     	; 0x2222 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    2206:	8e e0       	ldi	r24, 0x0E	; 14
    2208:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    220c:	84 e0       	ldi	r24, 0x04	; 4
    220e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    2212:	83 e1       	ldi	r24, 0x13	; 19
    2214:	80 93 e4 00 	sts	0x00E4, r24
    2218:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    221a:	86 30       	cpi	r24, 0x06	; 6
    221c:	a1 f7       	brne	.-24     	; 0x2206 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    221e:	86 e2       	ldi	r24, 0x26	; 38
    2220:	f3 cf       	rjmp	.-26     	; 0x2208 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    2222:	86 e0       	ldi	r24, 0x06	; 6
    2224:	f1 cf       	rjmp	.-30     	; 0x2208 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	ef cf       	rjmp	.-34     	; 0x2208 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    222a:	8e e1       	ldi	r24, 0x1E	; 30
    222c:	ed cf       	rjmp	.-38     	; 0x2208 <_Z8set_baudh+0x1e>

0000222e <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
    2234:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    2238:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
    223a:	29 2f       	mov	r18, r25
    223c:	22 95       	swap	r18
    223e:	20 7f       	andi	r18, 0xF0	; 240
    2240:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
    2244:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    2248:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    224c:	9f 5f       	subi	r25, 0xFF	; 255
    224e:	96 30       	cpi	r25, 0x06	; 6
    2250:	a1 f7       	brne	.-24     	; 0x223a <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
    2252:	90 ea       	ldi	r25, 0xA0	; 160
    2254:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
    2258:	0e 94 f5 10 	call	0x21ea	; 0x21ea <_Z8set_baudh>
   can_init_mobs();
    225c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
    2260:	80 91 d9 00 	lds	r24, 0x00D9
    2264:	82 ff       	sbrs	r24, 2
    2266:	fc cf       	rjmp	.-8      	; 0x2260 <_Z8can_inith+0x32>
   }
   //sei();
}
    2268:	08 95       	ret

0000226a <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
    226a:	88 23       	and	r24, r24
    226c:	51 f4       	brne	.+20     	; 0x2282 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
    2274:	84 e0       	ldi	r24, 0x04	; 4
    2276:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
    227a:	83 e1       	ldi	r24, 0x13	; 19
    227c:	80 93 e4 00 	sts	0x00E4, r24
    2280:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
    2282:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
    2286:	8c e0       	ldi	r24, 0x0C	; 12
    2288:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
    228c:	86 e3       	ldi	r24, 0x36	; 54
    228e:	80 93 e4 00 	sts	0x00E4, r24
    2292:	08 95       	ret

00002294 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2294:	88 23       	and	r24, r24
    2296:	51 f4       	brne	.+20     	; 0x22ac <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    2298:	86 e0       	ldi	r24, 0x06	; 6
    229a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    229e:	84 e0       	ldi	r24, 0x04	; 4
    22a0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    22a4:	83 e1       	ldi	r24, 0x13	; 19
    22a6:	80 93 e4 00 	sts	0x00E4, r24
    22aa:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    22b2:	8c e0       	ldi	r24, 0x0C	; 12
    22b4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    22b8:	87 e3       	ldi	r24, 0x37	; 55
    22ba:	80 93 e4 00 	sts	0x00E4, r24
    22be:	08 95       	ret

000022c0 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    22c0:	88 23       	and	r24, r24
    22c2:	51 f4       	brne	.+20     	; 0x22d8 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    22c4:	8e e0       	ldi	r24, 0x0E	; 14
    22c6:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    22ca:	84 e0       	ldi	r24, 0x04	; 4
    22cc:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    22d0:	83 e1       	ldi	r24, 0x13	; 19
    22d2:	80 93 e4 00 	sts	0x00E4, r24
    22d6:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    22d8:	86 e0       	ldi	r24, 0x06	; 6
    22da:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    22de:	8c e0       	ldi	r24, 0x0C	; 12
    22e0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    22e4:	87 e3       	ldi	r24, 0x37	; 55
    22e6:	80 93 e4 00 	sts	0x00E4, r24
    22ea:	08 95       	ret

000022ec <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    22ec:	88 23       	and	r24, r24
    22ee:	51 f4       	brne	.+20     	; 0x2304 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    22f0:	82 e1       	ldi	r24, 0x12	; 18
    22f2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    22fc:	83 e1       	ldi	r24, 0x13	; 19
    22fe:	80 93 e4 00 	sts	0x00E4, r24
    2302:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    2304:	88 e0       	ldi	r24, 0x08	; 8
    2306:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    230a:	8c e0       	ldi	r24, 0x0C	; 12
    230c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    2310:	87 e3       	ldi	r24, 0x37	; 55
    2312:	80 93 e4 00 	sts	0x00E4, r24
    2316:	08 95       	ret

00002318 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2318:	88 23       	and	r24, r24
    231a:	51 f4       	brne	.+20     	; 0x2330 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    231c:	8e e1       	ldi	r24, 0x1E	; 30
    231e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    2322:	84 e0       	ldi	r24, 0x04	; 4
    2324:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    2328:	83 e1       	ldi	r24, 0x13	; 19
    232a:	80 93 e4 00 	sts	0x00E4, r24
    232e:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    2330:	8e e0       	ldi	r24, 0x0E	; 14
    2332:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    2336:	8c e0       	ldi	r24, 0x0C	; 12
    2338:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    233c:	87 e3       	ldi	r24, 0x37	; 55
    233e:	80 93 e4 00 	sts	0x00E4, r24
    2342:	08 95       	ret

00002344 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2344:	88 23       	and	r24, r24
    2346:	51 f4       	brne	.+20     	; 0x235c <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    2348:	86 e2       	ldi	r24, 0x26	; 38
    234a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    234e:	84 e0       	ldi	r24, 0x04	; 4
    2350:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    2354:	83 e1       	ldi	r24, 0x13	; 19
    2356:	80 93 e4 00 	sts	0x00E4, r24
    235a:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    235c:	82 e1       	ldi	r24, 0x12	; 18
    235e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    2362:	8c e0       	ldi	r24, 0x0C	; 12
    2364:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    2368:	87 e3       	ldi	r24, 0x37	; 55
    236a:	80 93 e4 00 	sts	0x00E4, r24
    236e:	08 95       	ret

00002370 <_Z22random_number_adc_initv>:
 ********************************************************/
void random_number_adc_init()
{
	// Analog to Digital Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    2370:	83 e9       	ldi	r24, 0x93	; 147
    2372:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 : 
	DIDR0  |=  (1<<ADC3D);
    2376:	ee e7       	ldi	r30, 0x7E	; 126
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 60       	ori	r24, 0x08	; 8
    237e:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    2380:	80 e8       	ldi	r24, 0x80	; 128
    2382:	80 93 7b 00 	sts	0x007B, r24
}
    2386:	08 95       	ret

00002388 <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);
    2388:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	50 e0       	ldi	r21, 0x00	; 0
	DDRD &= ~(0x40);
	// Make ADC3-PORTD_6-LED4 an input temporarily.
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED off will give high impedance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;		
    2392:	e3 e4       	ldi	r30, 0x43	; 67
    2394:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);					
    2398:	80 91 7a 00 	lds	r24, 0x007A
    239c:	80 64       	ori	r24, 0x40	; 64
    239e:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};	// Wait for conversion to finish.
    23a2:	80 91 7a 00 	lds	r24, 0x007A
    23a6:	86 fd       	sbrc	r24, 6
    23a8:	fc cf       	rjmp	.-8      	; 0x23a2 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)	
		tmp  = (ADCL & 0x01) << (i % 16);		
    23aa:	80 91 78 00 	lds	r24, 0x0078
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	81 70       	andi	r24, 0x01	; 1
    23b2:	90 70       	andi	r25, 0x00	; 0
    23b4:	ba 01       	movw	r22, r20
    23b6:	6f 70       	andi	r22, 0x0F	; 15
    23b8:	70 70       	andi	r23, 0x00	; 0
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <_Z18pick_random_numberv+0x38>
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	6a 95       	dec	r22
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <_Z18pick_random_numberv+0x34>
		random_result |= (tmp);					
    23c4:	28 2b       	or	r18, r24
    23c6:	39 2b       	or	r19, r25
		tmp = ADCH;								
    23c8:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
    23cc:	4f 5f       	subi	r20, 0xFF	; 255
    23ce:	5f 4f       	sbci	r21, 0xFF	; 255
    23d0:	40 31       	cpi	r20, 0x10	; 16
    23d2:	51 05       	cpc	r21, r1
    23d4:	f9 f6       	brne	.-66     	; 0x2394 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)	
		tmp  = (ADCL & 0x01) << (i % 16);		
		random_result |= (tmp);					
		tmp = ADCH;								
	}
	DDRD |= 0x40;					// Set ADC3-PORTD_6-LED4 back to being an output
    23d6:	56 9a       	sbi	0x0a, 6	; 10
	return random_result;
}
    23d8:	c9 01       	movw	r24, r18
    23da:	08 95       	ret

000023dc <_Z24setup_instance_claim_mobv>:
*/
void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	28 e0       	ldi	r18, 0x08	; 8
    23e8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	63 e2       	ldi	r22, 0x23	; 35
    23f6:	7c ef       	ldi	r23, 0xFC	; 252
    23f8:	43 e2       	ldi	r20, 0x23	; 35
    23fa:	5c ef       	ldi	r21, 0xFC	; 252
    23fc:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_Z20can_add_id_to_filterhtt>
}
    2400:	08 95       	ret

00002402 <_Z17can_instance_initv>:
 ********************************************************/
void random_number_adc_init()
{
	// Analog to Digital Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    2402:	83 e9       	ldi	r24, 0x93	; 147
    2404:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 : 
	DIDR0  |=  (1<<ADC3D);
    2408:	80 91 7e 00 	lds	r24, 0x007E
    240c:	88 60       	ori	r24, 0x08	; 8
    240e:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    2412:	80 e8       	ldi	r24, 0x80	; 128
    2414:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;		// Indicates the state of the Confirmed status at boot-up.

void can_instance_init()
{
	random_number_adc_init		 ( );
	word tmp = pick_random_number( );		// random time delay
    2418:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z18pick_random_numberv>
	rand_instance = rand_delay = ( tmp & 0xFF);	
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	90 93 c7 02 	sts	0x02C7, r25
    2422:	80 93 c6 02 	sts	0x02C6, r24
    2426:	80 93 c8 02 	sts	0x02C8, r24

	// put adc back into mode for Potentiometer
	adc_init();
    242a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    242e:	80 91 c4 02 	lds	r24, 0x02C4
    2432:	88 23       	and	r24, r24
    2434:	51 f0       	breq	.+20     	; 0x244a <_Z17can_instance_initv+0x48>
		setup_instance_claim_mob();
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		init_path  = 2;
		Confirmed = REPORT;
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	80 93 c4 02 	sts	0x02C4, r24
    243c:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinite loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= DIRTY;
    243e:	80 93 cb 02 	sts	0x02CB, r24
	init_complete = TRUE;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	80 93 c5 02 	sts	0x02C5, r24
}
    2448:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{
		// START AT 0; PICK a DELAY TIME : 
		init_path = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	80 93 cb 02 	sts	0x02CB, r24
		setup_instance_claim_mob();
    2450:	0e 94 ee 11 	call	0x23dc	; 0x23dc <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    2454:	10 92 c3 02 	sts	0x02C3, r1
    2458:	80 91 cb 02 	lds	r24, 0x02CB
    245c:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinite loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= DIRTY;
    245e:	80 93 cb 02 	sts	0x02CB, r24
	init_complete = TRUE;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	80 93 c5 02 	sts	0x02C5, r24
}
    2468:	08 95       	ret

0000246a <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    2470:	83 e2       	ldi	r24, 0x23	; 35
    2472:	9c ef       	ldi	r25, 0xFC	; 252
    2474:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2478:	68 83       	st	Y, r22
    247a:	79 83       	std	Y+1, r23	; 0x01
    247c:	8a 83       	std	Y+2, r24	; 0x02
    247e:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    2480:	80 91 c3 02 	lds	r24, 0x02C3
    2484:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    2486:	80 91 c4 02 	lds	r24, 0x02C4
    248a:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    248c:	80 91 c8 02 	lds	r24, 0x02C8
    2490:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    2492:	80 91 cb 02 	lds	r24, 0x02CB
    2496:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    2498:	80 91 cc 02 	lds	r24, 0x02CC
    249c:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    249e:	80 91 44 03 	lds	r24, 0x0344
    24a2:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    24a4:	8c 81       	ldd	r24, Y+4	; 0x04
    24a6:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    24a8:	8e 60       	ori	r24, 0x0E	; 14
    24aa:	8c 83       	std	Y+4, r24	; 0x04
}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <_Z22can_instance_timeslicev>:
/* Called from OS_timers.c		
		"SystemDispatch()" every 10ms.		
*/
void can_instance_timeslice()
{
	ts_state = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	80 93 cc 02 	sts	0x02CC, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    24b8:	40 91 c4 02 	lds	r20, 0x02C4
    24bc:	41 30       	cpi	r20, 0x01	; 1
    24be:	59 f1       	breq	.+86     	; 0x2516 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    24c0:	80 91 c5 02 	lds	r24, 0x02C5
    24c4:	88 23       	and	r24, r24
    24c6:	39 f1       	breq	.+78     	; 0x2516 <_Z22can_instance_timeslicev+0x64>
	ts_state   = 2;
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	80 93 cc 02 	sts	0x02CC, r24
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    24ce:	80 91 c6 02 	lds	r24, 0x02C6
    24d2:	90 91 c7 02 	lds	r25, 0x02C7
    24d6:	9c 01       	movw	r18, r24
    24d8:	21 50       	subi	r18, 0x01	; 1
    24da:	30 40       	sbci	r19, 0x00	; 0
    24dc:	30 93 c7 02 	sts	0x02C7, r19
    24e0:	20 93 c6 02 	sts	0x02C6, r18
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	b9 f4       	brne	.+46     	; 0x2516 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	90 93 c7 02 	sts	0x02C7, r25
    24f0:	80 93 c6 02 	sts	0x02C6, r24

	if (Confirmed==NOT_CLAIMED)
    24f4:	44 23       	and	r20, r20
    24f6:	91 f0       	breq	.+36     	; 0x251c <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    24f8:	42 30       	cpi	r20, 0x02	; 2
    24fa:	09 f4       	brne	.+2      	; 0x24fe <_Z22can_instance_timeslicev+0x4c>
    24fc:	5a c0       	rjmp	.+180    	; 0x25b2 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    24fe:	40 32       	cpi	r20, 0x20	; 32
    2500:	39 f1       	breq	.+78     	; 0x2550 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// (Claimed, but not saved to EEPROM) Dirty bit set? 
    2502:	40 38       	cpi	r20, 0x80	; 128
    2504:	09 f4       	brne	.+2      	; 0x2508 <_Z22can_instance_timeslicev+0x56>
    2506:	47 c0       	rjmp	.+142    	; 0x2596 <_Z22can_instance_timeslicev+0xe4>

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    2508:	40 34       	cpi	r20, 0x40	; 64
    250a:	31 f0       	breq	.+12     	; 0x2518 <_Z22can_instance_timeslicev+0x66>
    250c:	80 91 cc 02 	lds	r24, 0x02CC
    2510:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	ts_state |= 0x80;
    2512:	80 93 cc 02 	sts	0x02CC, r24
    2516:	08 95       	ret

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    2518:	86 e8       	ldi	r24, 0x86	; 134
    251a:	fb cf       	rjmp	.-10     	; 0x2512 <_Z22can_instance_timeslicev+0x60>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
	rand_delay = 1;							// so that it comes back in here next timeslice

	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    251c:	83 e0       	ldi	r24, 0x03	; 3
    251e:	80 93 cc 02 	sts	0x02CC, r24
		Confirmed = CLAIM_PENDING;
    2522:	80 e2       	ldi	r24, 0x20	; 32
    2524:	80 93 c4 02 	sts	0x02C4, r24
		can_prep_instance_request( &msg2, rand_instance );
    2528:	87 e9       	ldi	r24, 0x97	; 151
    252a:	92 e0       	ldi	r25, 0x02	; 2
    252c:	60 91 c8 02 	lds	r22, 0x02C8
    2530:	0e 94 35 12 	call	0x246a	; 0x246a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	67 e9       	ldi	r22, 0x97	; 151
    2538:	72 e0       	ldi	r23, 0x02	; 2
    253a:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    253e:	8c e2       	ldi	r24, 0x2C	; 44
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	90 93 ca 02 	sts	0x02CA, r25
    2546:	80 93 c9 02 	sts	0x02C9, r24
    254a:	40 91 c4 02 	lds	r20, 0x02C4
    254e:	d4 cf       	rjmp	.-88     	; 0x24f8 <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    2550:	84 e0       	ldi	r24, 0x04	; 4
    2552:	80 93 cc 02 	sts	0x02CC, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT 
		cli();
    2556:	f8 94       	cli
		byte restore = CANPAGE;
    2558:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    255c:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    2560:	80 91 ee 00 	lds	r24, 0x00EE
    2564:	86 ff       	sbrs	r24, 6
    2566:	03 c0       	rjmp	.+6      	; 0x256e <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    2568:	80 e8       	ldi	r24, 0x80	; 128
    256a:	80 93 c4 02 	sts	0x02C4, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in with same ID, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    256e:	80 91 c9 02 	lds	r24, 0x02C9
    2572:	90 91 ca 02 	lds	r25, 0x02CA
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	90 93 ca 02 	sts	0x02CA, r25
    257c:	80 93 c9 02 	sts	0x02C9, r24
		if (timeout_10ms_mult == 0)
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	19 f4       	brne	.+6      	; 0x258a <_Z22can_instance_timeslicev+0xd8>
		{
			Confirmed = NOT_USING_INSTANCES;
    2584:	84 e0       	ldi	r24, 0x04	; 4
    2586:	80 93 c4 02 	sts	0x02C4, r24
		}
		CANPAGE = restore;
    258a:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    258e:	78 94       	sei
    2590:	40 91 c4 02 	lds	r20, 0x02C4
    2594:	b6 cf       	rjmp	.-148    	; 0x2502 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// (Claimed, but not saved to EEPROM) Dirty bit set? 
	{
		ts_state  = 5;
    2596:	85 e0       	ldi	r24, 0x05	; 5
    2598:	80 93 cc 02 	sts	0x02CC, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	80 93 c4 02 	sts	0x02C4, r24
		
		cli();  save_configuration();  sei();
    25a2:	f8 94       	cli
    25a4:	0e 94 24 1b 	call	0x3648	; 0x3648 <_Z18save_configurationv>
    25a8:	78 94       	sei
    25aa:	80 91 cc 02 	lds	r24, 0x02CC
    25ae:	80 68       	ori	r24, 0x80	; 128
    25b0:	b0 cf       	rjmp	.-160    	; 0x2512 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    25b2:	87 e0       	ldi	r24, 0x07	; 7
    25b4:	80 93 cc 02 	sts	0x02CC, r24
		Confirmed = CLAIMED;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 c4 02 	sts	0x02C4, r24
		can_prep_instance_request( &msg2, MyInstance );
    25be:	87 e9       	ldi	r24, 0x97	; 151
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	60 91 c3 02 	lds	r22, 0x02C3
    25c6:	0e 94 35 12 	call	0x246a	; 0x246a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	67 e9       	ldi	r22, 0x97	; 151
    25ce:	72 e0       	ldi	r23, 0x02	; 2
    25d0:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
    25d4:	40 91 c4 02 	lds	r20, 0x02C4
    25d8:	92 cf       	rjmp	.-220    	; 0x24fe <_Z22can_instance_timeslicev+0x4c>

000025da <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    25e0:	84 e2       	ldi	r24, 0x24	; 36
    25e2:	9c ef       	ldi	r25, 0xFC	; 252
    25e4:	60 91 c3 02 	lds	r22, 0x02C3
    25e8:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    25ec:	68 83       	st	Y, r22
    25ee:	79 83       	std	Y+1, r23	; 0x01
    25f0:	8a 83       	std	Y+2, r24	; 0x02
    25f2:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    25f4:	80 91 c3 02 	lds	r24, 0x02C3
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    25fe:	82 60       	ori	r24, 0x02	; 2
    2600:	8c 83       	std	Y+4, r24	; 0x04
}
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret

00002608 <_Z28can_process_instance_requestP4sCAN>:
 	
 Extract instance from the Message.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    2608:	fc 01       	movw	r30, r24
    260a:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    260c:	90 91 c3 02 	lds	r25, 0x02C3
    2610:	89 17       	cp	r24, r25
    2612:	18 f0       	brcs	.+6      	; 0x261a <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	80 93 c3 02 	sts	0x02C3, r24
    261a:	08 95       	ret

0000261c <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    261c:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	78 2f       	mov	r23, r24
    2622:	89 2f       	mov	r24, r25
    2624:	92 2f       	mov	r25, r18
    2626:	08 95       	ret

00002628 <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    2628:	38 2f       	mov	r19, r24
    262a:	26 2f       	mov	r18, r22
    262c:	87 2f       	mov	r24, r23
    262e:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    2630:	63 2f       	mov	r22, r19
    2632:	72 2f       	mov	r23, r18
    2634:	08 95       	ret

00002636 <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    2636:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    2638:	08 95       	ret

0000263a <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    263a:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    263c:	08 95       	ret

0000263e <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    263e:	89 2f       	mov	r24, r25
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	08 95       	ret

00002644 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    2644:	e1 e0       	ldi	r30, 0x01	; 1
    2646:	62 17       	cp	r22, r18
    2648:	73 07       	cpc	r23, r19
    264a:	84 07       	cpc	r24, r20
    264c:	95 07       	cpc	r25, r21
    264e:	09 f0       	breq	.+2      	; 0x2652 <_Z5match6idTypeS_+0xe>
    2650:	e0 e0       	ldi	r30, 0x00	; 0
}
    2652:	8e 2f       	mov	r24, r30
    2654:	08 95       	ret

00002656 <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	62 13       	cpse	r22, r18
    265a:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    265c:	08 95       	ret

0000265e <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    265e:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    2660:	27 2f       	mov	r18, r23
    2662:	38 2f       	mov	r19, r24
    2664:	69 2f       	mov	r22, r25
    2666:	74 2f       	mov	r23, r20
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	26 17       	cp	r18, r22
    266c:	37 07       	cpc	r19, r23
    266e:	09 f0       	breq	.+2      	; 0x2672 <_Z8id_match6idTypeS_+0x14>
    2670:	80 e0       	ldi	r24, 0x00	; 0
}
    2672:	08 95       	ret

00002674 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	49 13       	cpse	r20, r25
    2678:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    267a:	08 95       	ret

0000267c <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    267c:	90 93 d3 02 	sts	0x02D3, r25
    2680:	80 93 d2 02 	sts	0x02D2, r24
}
    2684:	08 95       	ret

00002686 <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    268c:	81 e1       	ldi	r24, 0x11	; 17
    268e:	9c ef       	ldi	r25, 0xFC	; 252
    2690:	60 91 c3 02 	lds	r22, 0x02C3
    2694:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2698:	68 83       	st	Y, r22
    269a:	79 83       	std	Y+1, r23	; 0x01
    269c:	8a 83       	std	Y+2, r24	; 0x02
    269e:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    26a4:	80 91 c3 02 	lds	r24, 0x02C3
    26a8:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    26aa:	80 91 cd 02 	lds	r24, 0x02CD
    26ae:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    26b0:	80 91 ce 02 	lds	r24, 0x02CE
    26b4:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    26b6:	8c 81       	ldd	r24, Y+4	; 0x04
    26b8:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    26ba:	88 60       	ori	r24, 0x08	; 8
    26bc:	8c 83       	std	Y+4, r24	; 0x04
}
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    26ca:	82 e1       	ldi	r24, 0x12	; 18
    26cc:	9c ef       	ldi	r25, 0xFC	; 252
    26ce:	60 91 c3 02 	lds	r22, 0x02C3
    26d2:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    26d6:	68 83       	st	Y, r22
    26d8:	79 83       	std	Y+1, r23	; 0x01
    26da:	8a 83       	std	Y+2, r24	; 0x02
    26dc:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    26e2:	81 e4       	ldi	r24, 0x41	; 65
    26e4:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    26ea:	9f e0       	ldi	r25, 0x0F	; 15
    26ec:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    26ee:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    26f0:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    26f6:	8c 60       	ori	r24, 0x0C	; 12
    26f8:	8c 83       	std	Y+4, r24	; 0x04
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    2706:	83 e1       	ldi	r24, 0x13	; 19
    2708:	9c ef       	ldi	r25, 0xFC	; 252
    270a:	60 91 c3 02 	lds	r22, 0x02C3
    270e:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2712:	68 83       	st	Y, r22
    2714:	79 83       	std	Y+1, r23	; 0x01
    2716:	8a 83       	std	Y+2, r24	; 0x02
    2718:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    271e:	86 e5       	ldi	r24, 0x56	; 86
    2720:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    2722:	88 e7       	ldi	r24, 0x78	; 120
    2724:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    2726:	8c e9       	ldi	r24, 0x9C	; 156
    2728:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    272a:	8e ed       	ldi	r24, 0xDE	; 222
    272c:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    272e:	8c 81       	ldd	r24, Y+4	; 0x04
    2730:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    2732:	8a 60       	ori	r24, 0x0A	; 10
    2734:	8c 83       	std	Y+4, r24	; 0x04
}
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    2742:	84 e1       	ldi	r24, 0x14	; 20
    2744:	9c ef       	ldi	r25, 0xFC	; 252
    2746:	60 91 c3 02 	lds	r22, 0x02C3
    274a:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    274e:	68 83       	st	Y, r22
    2750:	79 83       	std	Y+1, r23	; 0x01
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    2756:	80 91 cf 02 	lds	r24, 0x02CF
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    275e:	de 01       	movw	r26, r28
    2760:	16 96       	adiw	r26, 0x06	; 6
    2762:	9c 01       	movw	r18, r24
    2764:	28 5f       	subi	r18, 0xF8	; 248
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    2768:	fc 01       	movw	r30, r24
    276a:	e4 58       	subi	r30, 0x84	; 132
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	e4 91       	lpm	r30, Z+
    2770:	ed 93       	st	X+, r30
    2772:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    2774:	82 17       	cp	r24, r18
    2776:	93 07       	cpc	r25, r19
    2778:	b9 f7       	brne	.-18     	; 0x2768 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    277e:	82 61       	ori	r24, 0x12	; 18
    2780:	8c 83       	std	Y+4, r24	; 0x04
}
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    2788:	80 91 d4 02 	lds	r24, 0x02D4
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	d9 f0       	breq	.+54     	; 0x27c6 <_Z24can_board_presence_replyv+0x3e>
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	28 f0       	brcs	.+10     	; 0x279e <_Z24can_board_presence_replyv+0x16>
    2794:	82 30       	cpi	r24, 0x02	; 2
    2796:	09 f1       	breq	.+66     	; 0x27da <_Z24can_board_presence_replyv+0x52>
    2798:	83 30       	cpi	r24, 0x03	; 3
    279a:	59 f0       	breq	.+22     	; 0x27b2 <_Z24can_board_presence_replyv+0x2a>
    279c:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    279e:	87 e9       	ldi	r24, 0x97	; 151
    27a0:	92 e0       	ldi	r25, 0x02	; 2
    27a2:	0e 94 43 13 	call	0x2686	; 0x2686 <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	67 e9       	ldi	r22, 0x97	; 151
    27aa:	72 e0       	ldi	r23, 0x02	; 2
    27ac:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    27b0:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    27b2:	87 e9       	ldi	r24, 0x97	; 151
    27b4:	92 e0       	ldi	r25, 0x02	; 2
    27b6:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	67 e9       	ldi	r22, 0x97	; 151
    27be:	72 e0       	ldi	r23, 0x02	; 2
    27c0:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
    27c4:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    27c6:	87 e9       	ldi	r24, 0x97	; 151
    27c8:	92 e0       	ldi	r25, 0x02	; 2
    27ca:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	67 e9       	ldi	r22, 0x97	; 151
    27d2:	72 e0       	ldi	r23, 0x02	; 2
    27d4:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    27d8:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    27da:	87 e9       	ldi	r24, 0x97	; 151
    27dc:	92 e0       	ldi	r25, 0x02	; 2
    27de:	0e 94 80 13 	call	0x2700	; 0x2700 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	67 e9       	ldi	r22, 0x97	; 151
    27e6:	72 e0       	ldi	r23, 0x02	; 2
    27e8:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    27ec:	08 95       	ret

000027ee <_Z19can_board_timeslicev>:
/* Sends the queued message 
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    27ee:	80 91 d0 02 	lds	r24, 0x02D0
    27f2:	80 fd       	sbrc	r24, 0
    27f4:	59 c0       	rjmp	.+178    	; 0x28a8 <_Z19can_board_timeslicev+0xba>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    27f6:	81 fd       	sbrc	r24, 1
    27f8:	4c c0       	rjmp	.+152    	; 0x2892 <_Z19can_board_timeslicev+0xa4>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    27fa:	82 fd       	sbrc	r24, 2
    27fc:	35 c0       	rjmp	.+106    	; 0x2868 <_Z19can_board_timeslicev+0x7a>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
    27fe:	83 fd       	sbrc	r24, 3
    2800:	26 c0       	rjmp	.+76     	; 0x284e <_Z19can_board_timeslicev+0x60>
		save_configuration();
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    2802:	84 fd       	sbrc	r24, 4
    2804:	1a c0       	rjmp	.+52     	; 0x283a <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    2806:	85 ff       	sbrs	r24, 5
    2808:	0d c0       	rjmp	.+26     	; 0x2824 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)
    280a:	80 91 0c 01 	lds	r24, 0x010C
    280e:	90 91 0d 01 	lds	r25, 0x010D
    2812:	9c 01       	movw	r18, r24
    2814:	21 50       	subi	r18, 0x01	; 1
    2816:	30 40       	sbci	r19, 0x00	; 0
    2818:	30 93 0d 01 	sts	0x010D, r19
    281c:	20 93 0c 01 	sts	0x010C, r18
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	09 f0       	breq	.+2      	; 0x2826 <_Z19can_board_timeslicev+0x38>
    2824:	08 95       	ret
		{
			cli();
    2826:	f8 94       	cli
			can_board_presence_reply( );
    2828:	0e 94 c4 13 	call	0x2788	; 0x2788 <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    282c:	80 91 d0 02 	lds	r24, 0x02D0
    2830:	8f 7d       	andi	r24, 0xDF	; 223
    2832:	80 93 d0 02 	sts	0x02D0, r24
			sei();
    2836:	78 94       	sei
    2838:	08 95       	ret
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    283a:	f8 94       	cli
		save_cal();
    283c:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z8save_calv>
		System_Send_Status &= (~0x10);
    2840:	80 91 d0 02 	lds	r24, 0x02D0
    2844:	8f 7e       	andi	r24, 0xEF	; 239
    2846:	80 93 d0 02 	sts	0x02D0, r24
		sei();
    284a:	78 94       	sei
    284c:	dc cf       	rjmp	.-72     	; 0x2806 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
		cli();
    284e:	f8 94       	cli
		save_configuration();
    2850:	0e 94 24 1b 	call	0x3648	; 0x3648 <_Z18save_configurationv>
		led_on(4);
    2854:	84 e0       	ldi	r24, 0x04	; 4
    2856:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_Z6led_onh>
		System_Send_Status &= (~0x08);
    285a:	80 91 d0 02 	lds	r24, 0x02D0
    285e:	87 7f       	andi	r24, 0xF7	; 247
    2860:	80 93 d0 02 	sts	0x02D0, r24
		sei();
    2864:	78 94       	sei
    2866:	cd cf       	rjmp	.-102    	; 0x2802 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    2868:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    286a:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    286e:	87 e9       	ldi	r24, 0x97	; 151
    2870:	92 e0       	ldi	r25, 0x02	; 2
    2872:	60 91 c3 02 	lds	r22, 0x02C3
    2876:	0e 94 35 12 	call	0x246a	; 0x246a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	67 e9       	ldi	r22, 0x97	; 151
    287e:	72 e0       	ldi	r23, 0x02	; 2
    2880:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    2884:	80 91 d0 02 	lds	r24, 0x02D0
    2888:	8b 7f       	andi	r24, 0xFB	; 251
    288a:	80 93 d0 02 	sts	0x02D0, r24
		sei();
    288e:	78 94       	sei
    2890:	b6 cf       	rjmp	.-148    	; 0x27fe <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	67 e9       	ldi	r22, 0x97	; 151
    2896:	72 e0       	ldi	r23, 0x02	; 2
    2898:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    289c:	80 91 d0 02 	lds	r24, 0x02D0
    28a0:	8d 7f       	andi	r24, 0xFD	; 253
    28a2:	80 93 d0 02 	sts	0x02D0, r24
    28a6:	a9 cf       	rjmp	.-174    	; 0x27fa <_Z19can_board_timeslicev+0xc>
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	68 e8       	ldi	r22, 0x88	; 136
    28ac:	72 e0       	ldi	r23, 0x02	; 2
    28ae:	0e 94 97 10 	call	0x212e	; 0x212e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    28b2:	80 91 d0 02 	lds	r24, 0x02D0
    28b6:	8e 7f       	andi	r24, 0xFE	; 254
    28b8:	80 93 d0 02 	sts	0x02D0, r24
    28bc:	9c cf       	rjmp	.-200    	; 0x27f6 <_Z19can_board_timeslicev+0x8>

000028be <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    28c4:	87 e2       	ldi	r24, 0x27	; 39
    28c6:	9c ef       	ldi	r25, 0xFC	; 252
    28c8:	60 91 c3 02 	lds	r22, 0x02C3
    28cc:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    28d0:	68 83       	st	Y, r22
    28d2:	79 83       	std	Y+1, r23	; 0x01
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    28d8:	80 91 40 03 	lds	r24, 0x0340
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    28de:	80 91 41 03 	lds	r24, 0x0341
    28e2:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    28e4:	80 91 42 03 	lds	r24, 0x0342
    28e8:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    28ea:	80 91 43 03 	lds	r24, 0x0343
    28ee:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    28f4:	88 60       	ori	r24, 0x08	; 8
    28f6:	8c 83       	std	Y+4, r24	; 0x04
}
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    2904:	85 e1       	ldi	r24, 0x15	; 21
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	60 91 c3 02 	lds	r22, 0x02C3
    290c:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2910:	9b 01       	movw	r18, r22
    2912:	ac 01       	movw	r20, r24
    2914:	68 81       	ld	r22, Y
    2916:	79 81       	ldd	r23, Y+1	; 0x01
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
    2920:	88 23       	and	r24, r24
    2922:	39 f0       	breq	.+14     	; 0x2932 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
    2924:	ce 01       	movw	r24, r28
    2926:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    292a:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    2932:	85 e1       	ldi	r24, 0x15	; 21
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	6f ef       	ldi	r22, 0xFF	; 255
    2938:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    293c:	9b 01       	movw	r18, r22
    293e:	ac 01       	movw	r20, r24
    2940:	68 81       	ld	r22, Y
    2942:	79 81       	ldd	r23, Y+1	; 0x01
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	9b 81       	ldd	r25, Y+3	; 0x03
    2948:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    294c:	88 23       	and	r24, r24
    294e:	51 f7       	brne	.-44     	; 0x2924 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
		return TRUE;
	}
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    2950:	80 e1       	ldi	r24, 0x10	; 16
    2952:	9c ef       	ldi	r25, 0xFC	; 252
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    295a:	9b 01       	movw	r18, r22
    295c:	ac 01       	movw	r20, r24
    295e:	68 81       	ld	r22, Y
    2960:	79 81       	ldd	r23, Y+1	; 0x01
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	9b 81       	ldd	r25, Y+3	; 0x03
    2966:	0e 94 2f 13 	call	0x265e	; 0x265e <_Z8id_match6idTypeS_>
    296a:	88 23       	and	r24, r24
    296c:	91 f0       	breq	.+36     	; 0x2992 <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.
			Need to delay by the instance number of timeslices.
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    296e:	80 91 d0 02 	lds	r24, 0x02D0
    2972:	80 62       	ori	r24, 0x20	; 32
    2974:	80 93 d0 02 	sts	0x02D0, r24
		Board_presence_response_type = mMsg->data[0];
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	80 93 d4 02 	sts	0x02D4, r24
		Board_presence_delay 		 = MyInstance;
    297e:	80 91 c3 02 	lds	r24, 0x02C3
    2982:	80 93 0c 01 	sts	0x010C, r24
    2986:	10 92 0d 01 	sts	0x010D, r1
		return TRUE;
    298a:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    2992:	82 e2       	ldi	r24, 0x22	; 34
    2994:	9c ef       	ldi	r25, 0xFC	; 252
    2996:	60 91 c3 02 	lds	r22, 0x02C3
    299a:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    299e:	9b 01       	movw	r18, r22
    29a0:	ac 01       	movw	r20, r24
    29a2:	68 81       	ld	r22, Y
    29a4:	79 81       	ldd	r23, Y+1	; 0x01
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
    29ae:	88 23       	and	r24, r24
    29b0:	f1 f0       	breq	.+60     	; 0x29ee <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	84 ff       	sbrs	r24, 4
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 );
    29b8:	88 e8       	ldi	r24, 0x88	; 136
    29ba:	92 e0       	ldi	r25, 0x02	; 2
    29bc:	0e 94 5f 14 	call	0x28be	; 0x28be <_Z18can_prep_configureP4sCAN>
			System_Send_Status = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	80 93 d0 02 	sts	0x02D0, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    29c6:	e0 91 d2 02 	lds	r30, 0x02D2
    29ca:	f0 91 d3 02 	lds	r31, 0x02D3
    29ce:	30 97       	sbiw	r30, 0x00	; 0
    29d0:	19 f1       	breq	.+70     	; 0x2a18 <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	8f 70       	andi	r24, 0x0F	; 15
    29d6:	09 95       	icall
		return TRUE;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 );
			System_Send_Status = 1;
		} else { 
			can_parse_configure_request( mMsg );	// in configuration.c
    29e0:	ce 01       	movw	r24, r28
    29e2:	0e 94 43 1a 	call	0x3486	; 0x3486 <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    29e6:	88 e0       	ldi	r24, 0x08	; 8
    29e8:	80 93 d0 02 	sts	0x02D0, r24
    29ec:	ec cf       	rjmp	.-40     	; 0x29c6 <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    29ee:	81 e2       	ldi	r24, 0x21	; 33
    29f0:	9c ef       	ldi	r25, 0xFC	; 252
    29f2:	60 91 c3 02 	lds	r22, 0x02C3
    29f6:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    29fa:	9b 01       	movw	r18, r22
    29fc:	ac 01       	movw	r20, r24
    29fe:	68 81       	ld	r22, Y
    2a00:	79 81       	ldd	r23, Y+1	; 0x01
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	9b 81       	ldd	r25, Y+3	; 0x03
    2a06:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
    2a0a:	88 23       	and	r24, r24
    2a0c:	39 f0       	breq	.+14     	; 0x2a1c <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    2a0e:	88 e0       	ldi	r24, 0x08	; 8
    2a10:	80 93 d0 02 	sts	0x02D0, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	8a cf       	rjmp	.-236    	; 0x292c <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	88 cf       	rjmp	.-240    	; 0x292c <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    2a1c:	81 e2       	ldi	r24, 0x21	; 33
    2a1e:	9c ef       	ldi	r25, 0xFC	; 252
    2a20:	6f ef       	ldi	r22, 0xFF	; 255
    2a22:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2a26:	9b 01       	movw	r18, r22
    2a28:	ac 01       	movw	r20, r24
    2a2a:	68 81       	ld	r22, Y
    2a2c:	79 81       	ldd	r23, Y+1	; 0x01
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	9b 81       	ldd	r25, Y+3	; 0x03
    2a32:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    2a36:	88 23       	and	r24, r24
    2a38:	51 f7       	brne	.-44     	; 0x2a0e <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    2a3a:	85 e2       	ldi	r24, 0x25	; 37
    2a3c:	9c ef       	ldi	r25, 0xFC	; 252
    2a3e:	60 91 c3 02 	lds	r22, 0x02C3
    2a42:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2a46:	9b 01       	movw	r18, r22
    2a48:	ac 01       	movw	r20, r24
    2a4a:	68 81       	ld	r22, Y
    2a4c:	79 81       	ldd	r23, Y+1	; 0x01
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	9b 81       	ldd	r25, Y+3	; 0x03
    2a52:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
    2a56:	88 23       	and	r24, r24
    2a58:	49 f5       	brne	.+82     	; 0x2aac <_Z23can_board_msg_responderP4sCAN+0x1ae>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    2a5a:	86 e2       	ldi	r24, 0x26	; 38
    2a5c:	9c ef       	ldi	r25, 0xFC	; 252
    2a5e:	60 91 c3 02 	lds	r22, 0x02C3
    2a62:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2a66:	9b 01       	movw	r18, r22
    2a68:	ac 01       	movw	r20, r24
    2a6a:	68 81       	ld	r22, Y
    2a6c:	79 81       	ldd	r23, Y+1	; 0x01
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	9b 81       	ldd	r25, Y+3	; 0x03
    2a72:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
    2a76:	88 23       	and	r24, r24
    2a78:	79 f1       	breq	.+94     	; 0x2ad8 <_Z23can_board_msg_responderP4sCAN+0x1da>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    2a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7c:	8e 71       	andi	r24, 0x1E	; 30
    2a7e:	84 30       	cpi	r24, 0x04	; 4
    2a80:	59 f6       	brne	.-106    	; 0x2a18 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    2a82:	3d 81       	ldd	r19, Y+5	; 0x05
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	8e 81       	ldd	r24, Y+6	; 0x06
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	82 2b       	or	r24, r18
    2a8c:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    2a8e:	22 e1       	ldi	r18, 0x12	; 18
    2a90:	84 33       	cpi	r24, 0x34	; 52
    2a92:	92 07       	cpc	r25, r18
    2a94:	09 f6       	brne	.-126    	; 0x2a18 <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    2a96:	85 e5       	ldi	r24, 0x55	; 85
    2a98:	80 93 cb 02 	sts	0x02CB, r24
				init_complete = FALSE;
    2a9c:	10 92 c5 02 	sts	0x02C5, r1
				Confirmed     = NOT_CLAIMED;
    2aa0:	10 92 c4 02 	sts	0x02C4, r1
				can_instance_init();		// This fires off the sequencing right away.
    2aa4:	0e 94 01 12 	call	0x2402	; 0x2402 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	40 cf       	rjmp	.-384    	; 0x292c <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	80 93 c4 02 	sts	0x02C4, r24
		MyInstance = mMsg->data[0];
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	80 93 c3 02 	sts	0x02C3, r24
		System_Send_Status |= 0x08;
    2ab8:	80 91 d0 02 	lds	r24, 0x02D0
    2abc:	88 60       	ori	r24, 0x08	; 8
    2abe:	80 93 d0 02 	sts	0x02D0, r24
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    2ac8:	60 91 c3 02 	lds	r22, 0x02C3
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <_Z26can_add_instance_to_filterht>
		return TRUE;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	2a cf       	rjmp	.-428    	; 0x292c <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    2ad8:	86 e2       	ldi	r24, 0x26	; 38
    2ada:	9c ef       	ldi	r25, 0xFC	; 252
    2adc:	6f ef       	ldi	r22, 0xFF	; 255
    2ade:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2ae2:	9b 01       	movw	r18, r22
    2ae4:	ac 01       	movw	r20, r24
    2ae6:	68 81       	ld	r22, Y
    2ae8:	79 81       	ldd	r23, Y+1	; 0x01
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	9b 81       	ldd	r25, Y+3	; 0x03
    2aee:	0e 94 22 13 	call	0x2644	; 0x2644 <_Z5match6idTypeS_>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    2af2:	88 23       	and	r24, r24
    2af4:	11 f6       	brne	.-124    	; 0x2a7a <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    2af6:	83 e2       	ldi	r24, 0x23	; 35
    2af8:	9c ef       	ldi	r25, 0xFC	; 252
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z14create_CAN_eidth>
    2b00:	9b 01       	movw	r18, r22
    2b02:	ac 01       	movw	r20, r24
    2b04:	68 81       	ld	r22, Y
    2b06:	79 81       	ldd	r23, Y+1	; 0x01
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0c:	0e 94 2f 13 	call	0x265e	; 0x265e <_Z8id_match6idTypeS_>
    2b10:	88 23       	and	r24, r24
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <_Z23can_board_msg_responderP4sCAN+0x218>
    2b14:	0b cf       	rjmp	.-490    	; 0x292c <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    2b16:	9d 81       	ldd	r25, Y+5	; 0x05
    2b18:	80 91 c3 02 	lds	r24, 0x02C3
    2b1c:	98 17       	cp	r25, r24
    2b1e:	09 f0       	breq	.+2      	; 0x2b22 <_Z23can_board_msg_responderP4sCAN+0x224>
    2b20:	7b cf       	rjmp	.-266    	; 0x2a18 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    2b22:	80 91 c4 02 	lds	r24, 0x02C4
    2b26:	80 32       	cpi	r24, 0x20	; 32
    2b28:	41 f0       	breq	.+16     	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x23c>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    2b2a:	88 23       	and	r24, r24
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <_Z23can_board_msg_responderP4sCAN+0x232>
    2b2e:	74 cf       	rjmp	.-280    	; 0x2a18 <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    2b30:	ce 01       	movw	r24, r28
    2b32:	0e 94 04 13 	call	0x2608	; 0x2608 <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	f9 ce       	rjmp	.-526    	; 0x292c <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    2b3a:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    2b3e:	80 e3       	ldi	r24, 0x30	; 48
    2b40:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    2b44:	80 91 ef 00 	lds	r24, 0x00EF
    2b48:	8f 73       	andi	r24, 0x3F	; 63
    2b4a:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    2b4e:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    2b52:	10 92 c4 02 	sts	0x02C4, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    2b56:	ce 01       	movw	r24, r28
    2b58:	0e 94 04 13 	call	0x2608	; 0x2608 <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	e6 ce       	rjmp	.-564    	; 0x292c <_Z23can_board_msg_responderP4sCAN+0x2e>

00002b60 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    2b60:	ef 92       	push	r14
    2b62:	ff 92       	push	r15
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	7b 01       	movw	r14, r22
    2b6e:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    2b70:	c0 e0       	ldi	r28, 0x00	; 0
    2b72:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    2b74:	ce 01       	movw	r24, r28
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	8c 0f       	add	r24, r28
    2b7c:	9d 1f       	adc	r25, r29
    2b7e:	fc 01       	movw	r30, r24
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	ee 0f       	add	r30, r30
    2b86:	ff 1f       	adc	r31, r31
    2b88:	e8 0f       	add	r30, r24
    2b8a:	f9 1f       	adc	r31, r25
    2b8c:	eb 52       	subi	r30, 0x2B	; 43
    2b8e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b90:	20 81       	ld	r18, Z
    2b92:	31 81       	ldd	r19, Z+1	; 0x01
    2b94:	42 81       	ldd	r20, Z+2	; 0x02
    2b96:	53 81       	ldd	r21, Z+3	; 0x03
    2b98:	c8 01       	movw	r24, r16
    2b9a:	b7 01       	movw	r22, r14
    2b9c:	0e 94 2f 13 	call	0x265e	; 0x265e <_Z8id_match6idTypeS_>
    2ba0:	88 23       	and	r24, r24
    2ba2:	61 f4       	brne	.+24     	; 0x2bbc <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    2ba4:	21 96       	adiw	r28, 0x01	; 1
    2ba6:	c6 30       	cpi	r28, 0x06	; 6
    2ba8:	d1 05       	cpc	r29, r1
    2baa:	21 f7       	brne	.-56     	; 0x2b74 <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    2bac:	8f ef       	ldi	r24, 0xFF	; 255
}
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	ff 90       	pop	r15
    2bb8:	ef 90       	pop	r14
    2bba:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    2bbc:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	ff 90       	pop	r15
    2bc8:	ef 90       	pop	r14
    2bca:	08 95       	ret

00002bcc <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    2bcc:	28 2f       	mov	r18, r24
    2bce:	39 2f       	mov	r19, r25
    2bd0:	d9 01       	movw	r26, r18
    2bd2:	86 2f       	mov	r24, r22
    2bd4:	97 2f       	mov	r25, r23
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	8f e0       	ldi	r24, 0x0F	; 15
    2bda:	01 90       	ld	r0, Z+
    2bdc:	0d 92       	st	X+, r0
    2bde:	81 50       	subi	r24, 0x01	; 1
    2be0:	e1 f7       	brne	.-8      	; 0x2bda <_Z12copy_can_msgP4sCANS0_+0xe>
}
    2be2:	08 95       	ret

00002be4 <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    2be4:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    2be6:	80 91 2f 03 	lds	r24, 0x032F
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9c 01       	movw	r18, r24
    2bee:	22 0f       	add	r18, r18
    2bf0:	33 1f       	adc	r19, r19
    2bf2:	28 0f       	add	r18, r24
    2bf4:	39 1f       	adc	r19, r25
    2bf6:	c9 01       	movw	r24, r18
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	88 0f       	add	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	82 0f       	add	r24, r18
    2c02:	93 1f       	adc	r25, r19
    2c04:	8b 52       	subi	r24, 0x2B	; 43
    2c06:	9d 4f       	sbci	r25, 0xFD	; 253
    2c08:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    2c0c:	80 91 2f 03 	lds	r24, 0x032F
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	80 93 2f 03 	sts	0x032F, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    2c16:	86 30       	cpi	r24, 0x06	; 6
    2c18:	10 f0       	brcs	.+4      	; 0x2c1e <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    2c1a:	10 92 2f 03 	sts	0x032F, r1
    2c1e:	08 95       	ret

00002c20 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    2c26:	68 81       	ld	r22, Y
    2c28:	79 81       	ldd	r23, Y+1	; 0x01
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    2c32:	8f 3f       	cpi	r24, 0xFF	; 255
    2c34:	a9 f0       	breq	.+42     	; 0x2c60 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	9c 01       	movw	r18, r24
    2c3a:	22 0f       	add	r18, r18
    2c3c:	33 1f       	adc	r19, r19
    2c3e:	28 0f       	add	r18, r24
    2c40:	39 1f       	adc	r19, r25
    2c42:	c9 01       	movw	r24, r18
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	82 0f       	add	r24, r18
    2c4e:	93 1f       	adc	r25, r19
    2c50:	8b 52       	subi	r24, 0x2B	; 43
    2c52:	9d 4f       	sbci	r25, 0xFD	; 253
    2c54:	be 01       	movw	r22, r28
    2c56:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    2c60:	80 91 2f 03 	lds	r24, 0x032F
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9c 01       	movw	r18, r24
    2c68:	22 0f       	add	r18, r18
    2c6a:	33 1f       	adc	r19, r19
    2c6c:	28 0f       	add	r18, r24
    2c6e:	39 1f       	adc	r19, r25
    2c70:	c9 01       	movw	r24, r18
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	82 0f       	add	r24, r18
    2c7c:	93 1f       	adc	r25, r19
    2c7e:	8b 52       	subi	r24, 0x2B	; 43
    2c80:	9d 4f       	sbci	r25, 0xFD	; 253
    2c82:	be 01       	movw	r22, r28
    2c84:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    2c88:	80 91 2f 03 	lds	r24, 0x032F
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	80 93 2f 03 	sts	0x032F, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    2c92:	86 30       	cpi	r24, 0x06	; 6
    2c94:	10 f3       	brcs	.-60     	; 0x2c5a <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    2c96:	10 92 2f 03 	sts	0x032F, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	08 95       	ret

00002ca0 <_Z12QueueMessageP4sCAN>:
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    2ca0:	20 91 43 03 	lds	r18, 0x0343
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2ca4:	21 fd       	sbrc	r18, 1
    2ca6:	03 c0       	rjmp	.+6      	; 0x2cae <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    2ca8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z17addMailboxHistoryP4sCAN>
    2cac:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    2cae:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_Z16addNormalHistoryP4sCAN>
    2cb2:	08 95       	ret

00002cb4 <_Z15RetrieveMessagev>:
    2cb4:	80 91 43 03 	lds	r24, 0x0343
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2cb8:	81 ff       	sbrs	r24, 1
    2cba:	1b c0       	rjmp	.+54     	; 0x2cf2 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    2cbc:	20 91 30 03 	lds	r18, 0x0330
    2cc0:	80 91 2f 03 	lds	r24, 0x032F
    2cc4:	28 17       	cp	r18, r24
    2cc6:	c9 f0       	breq	.+50     	; 0x2cfa <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2cc8:	82 2f       	mov	r24, r18
    2cca:	8f 5f       	subi	r24, 0xFF	; 255
    2ccc:	80 93 30 03 	sts	0x0330, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2cd2:	c9 01       	movw	r24, r18
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	82 0f       	add	r24, r18
    2cda:	93 1f       	adc	r25, r19
    2cdc:	9c 01       	movw	r18, r24
    2cde:	22 0f       	add	r18, r18
    2ce0:	33 1f       	adc	r19, r19
    2ce2:	22 0f       	add	r18, r18
    2ce4:	33 1f       	adc	r19, r19
    2ce6:	28 0f       	add	r18, r24
    2ce8:	39 1f       	adc	r19, r25
    2cea:	2b 52       	subi	r18, 0x2B	; 43
    2cec:	3d 4f       	sbci	r19, 0xFD	; 253
		}
	}
	return NULL;
}
    2cee:	c9 01       	movw	r24, r18
    2cf0:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
}
    2cf6:	c9 01       	movw	r24, r18
    2cf8:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    2cfa:	10 92 30 03 	sts	0x0330, r1
			RxHead = 0;
    2cfe:	10 92 2f 03 	sts	0x032F, r1
			return NULL;
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	f3 cf       	rjmp	.-26     	; 0x2cee <_Z15RetrieveMessagev+0x3a>

00002d08 <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	ac 01       	movw	r20, r24
    2d0c:	44 0f       	add	r20, r20
    2d0e:	55 1f       	adc	r21, r21
    2d10:	48 0f       	add	r20, r24
    2d12:	59 1f       	adc	r21, r25
    2d14:	9a 01       	movw	r18, r20
    2d16:	22 0f       	add	r18, r18
    2d18:	33 1f       	adc	r19, r19
    2d1a:	22 0f       	add	r18, r18
    2d1c:	33 1f       	adc	r19, r19
    2d1e:	24 0f       	add	r18, r20
    2d20:	35 1f       	adc	r19, r21
    2d22:	2b 52       	subi	r18, 0x2B	; 43
    2d24:	3d 4f       	sbci	r19, 0xFD	; 253
}
    2d26:	c9 01       	movw	r24, r18
    2d28:	08 95       	ret

00002d2a <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    2d2a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <_Z15RetrieveMessagev>
	if (msg)
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	19 f0       	breq	.+6      	; 0x2d38 <_Z15CAN_Q_Timeslicev+0xe>
    2d32:	20 91 43 03 	lds	r18, 0x0343
	{
		SET_LED_2();
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2d36:	21 ff       	sbrs	r18, 1
    2d38:	08 95       	ret
			can_file_message( msg );
    2d3a:	0e 94 33 03 	call	0x666	; 0x666 <_Z16can_file_messageP4sCAN>
    2d3e:	08 95       	ret

00002d40 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    2d40:	10 92 32 03 	sts	0x0332, r1
	System_LED_Control.pattern    = 0;
    2d44:	10 92 31 03 	sts	0x0331, r1
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    2d48:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    2d4a:	57 9a       	sbi	0x0a, 7	; 10
#endif
  	RESET_LED_1();
	RESET_LED_2();
	RESET_LED_3();
    2d4c:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_4();
    2d4e:	5f 98       	cbi	0x0b, 7	; 11
}
    2d50:	08 95       	ret

00002d52 <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    2d52:	83 30       	cpi	r24, 0x03	; 3
    2d54:	29 f0       	breq	.+10     	; 0x2d60 <_Z16protected_led_onh+0xe>
    2d56:	84 30       	cpi	r24, 0x04	; 4
    2d58:	09 f0       	breq	.+2      	; 0x2d5c <_Z16protected_led_onh+0xa>
    2d5a:	08 95       	ret
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    2d5c:	5f 9a       	sbi	0x0b, 7	; 11
    2d5e:	08 95       	ret
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
    2d60:	5e 9a       	sbi	0x0b, 6	; 11
    2d62:	08 95       	ret

00002d64 <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    2d64:	83 30       	cpi	r24, 0x03	; 3
    2d66:	29 f0       	breq	.+10     	; 0x2d72 <_Z17protected_led_offh+0xe>
    2d68:	84 30       	cpi	r24, 0x04	; 4
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <_Z17protected_led_offh+0xa>
    2d6c:	08 95       	ret
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    2d6e:	5f 98       	cbi	0x0b, 7	; 11
    2d70:	08 95       	ret
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
    2d72:	5e 98       	cbi	0x0b, 6	; 11
    2d74:	08 95       	ret

00002d76 <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2d76:	90 91 32 03 	lds	r25, 0x0332
    2d7a:	99 23       	and	r25, r25
    2d7c:	21 f0       	breq	.+8      	; 0x2d86 <_Z11strobe_ledsh+0x10>
    2d7e:	92 30       	cpi	r25, 0x02	; 2
    2d80:	11 f0       	breq	.+4      	; 0x2d86 <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	08 95       	ret
    2d86:	90 91 11 01 	lds	r25, 0x0111
    2d8a:	29 2f       	mov	r18, r25
    2d8c:	21 50       	subi	r18, 0x01	; 1
    2d8e:	20 93 11 01 	sts	0x0111, r18
    2d92:	99 23       	and	r25, r25
    2d94:	b1 f7       	brne	.-20     	; 0x2d82 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    2d96:	9a e0       	ldi	r25, 0x0A	; 10
    2d98:	90 93 11 01 	sts	0x0111, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2d9c:	88 23       	and	r24, r24
    2d9e:	79 f0       	breq	.+30     	; 0x2dbe <_Z11strobe_ledsh+0x48>
    2da0:	80 91 10 01 	lds	r24, 0x0110
    2da4:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_Z16protected_led_onh>
		i++;
    2da8:	80 91 10 01 	lds	r24, 0x0110
    2dac:	8f 5f       	subi	r24, 0xFF	; 255
    2dae:	80 93 10 01 	sts	0x0110, r24
		if (i>=5)  { i=1; return TRUE; }
    2db2:	85 30       	cpi	r24, 0x05	; 5
    2db4:	78 f0       	brcs	.+30     	; 0x2dd4 <_Z11strobe_ledsh+0x5e>
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	80 93 10 01 	sts	0x0110, r24
    2dbc:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2dbe:	80 91 10 01 	lds	r24, 0x0110
    2dc2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_Z17protected_led_offh>
		i++;
    2dc6:	80 91 10 01 	lds	r24, 0x0110
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	80 93 10 01 	sts	0x0110, r24
		if (i>=5)  { i=1; return TRUE; }
    2dd0:	85 30       	cpi	r24, 0x05	; 5
    2dd2:	88 f7       	brcc	.-30     	; 0x2db6 <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
}
    2dd6:	08 95       	ret

00002dd8 <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2dd8:	90 91 32 03 	lds	r25, 0x0332
    2ddc:	91 11       	cpse	r25, r1
    2dde:	08 95       	ret
	protected_led_on(mindex);
    2de0:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_Z16protected_led_onh>
    2de4:	08 95       	ret

00002de6 <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2de6:	90 91 32 03 	lds	r25, 0x0332
    2dea:	91 11       	cpse	r25, r1
    2dec:	08 95       	ret
	protected_led_off(mindex);
    2dee:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_Z17protected_led_offh>
    2df2:	08 95       	ret

00002df4 <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    2df4:	66 23       	and	r22, r22
    2df6:	19 f4       	brne	.+6      	; 0x2dfe <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    2df8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_Z7led_offh>
    2dfc:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    2dfe:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_Z6led_onh>
    2e02:	08 95       	ret

00002e04 <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2e04:	90 91 32 03 	lds	r25, 0x0332
    2e08:	91 11       	cpse	r25, r1
    2e0a:	08 95       	ret
	protected_set_led( mindex, value );
    2e0c:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_Z17protected_set_ledhh>
    2e10:	08 95       	ret

00002e12 <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    2e12:	66 23       	and	r22, r22
    2e14:	39 f0       	breq	.+14     	; 0x2e24 <_Z19protected_show_bytehh+0x12>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    2e16:	87 ff       	sbrs	r24, 7
    2e18:	0e c0       	rjmp	.+28     	; 0x2e36 <_Z19protected_show_bytehh+0x24>
    2e1a:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    2e1c:	86 fd       	sbrc	r24, 6
    2e1e:	07 c0       	rjmp	.+14     	; 0x2e2e <_Z19protected_show_bytehh+0x1c>
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    2e20:	5e 98       	cbi	0x0b, 6	; 11
    2e22:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    2e24:	83 ff       	sbrs	r24, 3
    2e26:	05 c0       	rjmp	.+10     	; 0x2e32 <_Z19protected_show_bytehh+0x20>
    2e28:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    2e2a:	82 ff       	sbrs	r24, 2
    2e2c:	f9 cf       	rjmp	.-14     	; 0x2e20 <_Z19protected_show_bytehh+0xe>
    2e2e:	5e 9a       	sbi	0x0b, 6	; 11
    2e30:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    2e32:	5f 98       	cbi	0x0b, 7	; 11
    2e34:	fa cf       	rjmp	.-12     	; 0x2e2a <_Z19protected_show_bytehh+0x18>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    2e36:	5f 98       	cbi	0x0b, 7	; 11
    2e38:	f1 cf       	rjmp	.-30     	; 0x2e1c <_Z19protected_show_bytehh+0xa>

00002e3a <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    2e3a:	90 91 32 03 	lds	r25, 0x0332
    2e3e:	99 23       	and	r25, r25
    2e40:	11 f0       	breq	.+4      	; 0x2e46 <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    2e42:	80 91 31 03 	lds	r24, 0x0331
	}
    protected_show_byte( result, mHiNibble );
    2e46:	0e 94 09 17 	call	0x2e12	; 0x2e12 <_Z19protected_show_bytehh>
}
    2e4a:	08 95       	ret

00002e4c <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2e4c:	90 91 32 03 	lds	r25, 0x0332
    2e50:	99 23       	and	r25, r25
    2e52:	19 f0       	breq	.+6      	; 0x2e5a <_Z18show_result_toggleh+0xe>
    2e54:	93 30       	cpi	r25, 0x03	; 3
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <_Z18show_result_toggleh+0xe>
    2e58:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    2e5a:	90 91 0e 01 	lds	r25, 0x010E
    2e5e:	99 23       	and	r25, r25
    2e60:	59 f4       	brne	.+22     	; 0x2e78 <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    2e62:	60 e0       	ldi	r22, 0x00	; 0
    2e64:	0e 94 09 17 	call	0x2e12	; 0x2e12 <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 91 0e 01 	lds	r25, 0x010E
    2e6e:	91 11       	cpse	r25, r1
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	80 93 0e 01 	sts	0x010E, r24
    2e76:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    2e78:	61 e0       	ldi	r22, 0x01	; 1
    2e7a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <_Z19protected_show_bytehh>
    2e7e:	f4 cf       	rjmp	.-24     	; 0x2e68 <_Z18show_result_toggleh+0x1c>

00002e80 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    2e80:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    2e82:	95 81       	ldd	r25, Z+5	; 0x05
    2e84:	9f 70       	andi	r25, 0x0F	; 15
    2e86:	90 93 32 03 	sts	0x0332, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    2e8a:	86 81       	ldd	r24, Z+6	; 0x06
    2e8c:	8f 70       	andi	r24, 0x0F	; 15
    2e8e:	80 93 31 03 	sts	0x0331, r24

	switch (System_LED_Control.systemMode)
    2e92:	92 30       	cpi	r25, 0x02	; 2
    2e94:	81 f0       	breq	.+32     	; 0x2eb6 <_Z21can_parse_led_requestP4sCAN+0x36>
    2e96:	93 30       	cpi	r25, 0x03	; 3
    2e98:	39 f0       	breq	.+14     	; 0x2ea8 <_Z21can_parse_led_requestP4sCAN+0x28>
    2e9a:	91 30       	cpi	r25, 0x01	; 1
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <_Z21can_parse_led_requestP4sCAN+0x20>
    2e9e:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z9show_bytehh>
									  break;
    2ea6:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    2ea8:	80 91 c3 02 	lds	r24, 0x02C3
    2eac:	80 93 31 03 	sts	0x0331, r24
									  show_result_toggle( MyInstance );
    2eb0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z18show_result_toggleh>
    2eb4:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    2eb6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_Z11strobe_ledsh>
									  break;
    2eba:	08 95       	ret

00002ebc <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    2ebc:	80 91 32 03 	lds	r24, 0x0332
    2ec0:	82 30       	cpi	r24, 0x02	; 2
    2ec2:	d9 f0       	breq	.+54     	; 0x2efa <_Z19led_timeslice_100msv+0x3e>
    2ec4:	83 30       	cpi	r24, 0x03	; 3
    2ec6:	49 f0       	breq	.+18     	; 0x2eda <_Z19led_timeslice_100msv+0x1e>
    2ec8:	81 30       	cpi	r24, 0x01	; 1
    2eca:	09 f0       	breq	.+2      	; 0x2ece <_Z19led_timeslice_100msv+0x12>
    2ecc:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    2ece:	80 91 31 03 	lds	r24, 0x0331
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z9show_bytehh>
									  break;
    2ed8:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    2eda:	80 91 0f 01 	lds	r24, 0x010F
    2ede:	98 2f       	mov	r25, r24
    2ee0:	91 50       	subi	r25, 0x01	; 1
    2ee2:	90 93 0f 01 	sts	0x010F, r25
    2ee6:	88 23       	and	r24, r24
    2ee8:	89 f7       	brne	.-30     	; 0x2ecc <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    2eea:	8a e0       	ldi	r24, 0x0A	; 10
    2eec:	80 93 0f 01 	sts	0x010F, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    2ef0:	80 91 c3 02 	lds	r24, 0x02C3
    2ef4:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z18show_result_toggleh>
    2ef8:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    2efa:	80 91 31 03 	lds	r24, 0x0331
    2efe:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_Z11strobe_ledsh>
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	19 f7       	brne	.-58     	; 0x2ecc <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    2f06:	90 91 31 03 	lds	r25, 0x0331
    2f0a:	99 23       	and	r25, r25
    2f0c:	19 f4       	brne	.+6      	; 0x2f14 <_Z19led_timeslice_100msv+0x58>
    2f0e:	80 93 31 03 	sts	0x0331, r24
    2f12:	08 95       	ret
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	fb cf       	rjmp	.-10     	; 0x2f0e <_Z19led_timeslice_100msv+0x52>

00002f18 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    2f18:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    2f1a:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    2f1c:	90 93 89 00 	sts	0x0089, r25
    2f20:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    2f24:	2f bf       	out	0x3f, r18	; 63
}
    2f26:	08 95       	ret

00002f28 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2f28:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    2f2a:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2f2c:	90 93 8b 00 	sts	0x008B, r25
    2f30:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    2f34:	2f bf       	out	0x3f, r18	; 63
}
    2f36:	08 95       	ret

00002f38 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    2f38:	ef 92       	push	r14
    2f3a:	ff 92       	push	r15
    2f3c:	0f 93       	push	r16
    2f3e:	1f 93       	push	r17
    2f40:	7b 01       	movw	r14, r22
    2f42:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    2f44:	20 91 12 01 	lds	r18, 0x0112
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	74 e2       	ldi	r23, 0x24	; 36
    2f52:	84 ef       	ldi	r24, 0xF4	; 244
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 cd 22 	call	0x459a	; 0x459a <__divmodsi4>
    2f5a:	ca 01       	movw	r24, r20
    2f5c:	b9 01       	movw	r22, r18
    2f5e:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    2f62:	a8 01       	movw	r20, r16
    2f64:	97 01       	movw	r18, r14
    2f66:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
    2f6a:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
	return Top;
}
    2f6e:	cb 01       	movw	r24, r22
    2f70:	1f 91       	pop	r17
    2f72:	0f 91       	pop	r16
    2f74:	ff 90       	pop	r15
    2f76:	ef 90       	pop	r14
    2f78:	08 95       	ret

00002f7a <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    2f7a:	90 93 14 01 	sts	0x0114, r25
    2f7e:	80 93 13 01 	sts	0x0113, r24
	ICR1 = TOP;
    2f82:	90 93 87 00 	sts	0x0087, r25
    2f86:	80 93 86 00 	sts	0x0086, r24
}
    2f8a:	08 95       	ret

00002f8c <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	9b 01       	movw	r18, r22
    2f96:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	74 e2       	ldi	r23, 0x24	; 36
    2f9c:	84 e7       	ldi	r24, 0x74	; 116
    2f9e:	9b e4       	ldi	r25, 0x4B	; 75
    2fa0:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
    2fa4:	8b 01       	movw	r16, r22
    2fa6:	d8 2f       	mov	r29, r24
    2fa8:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    2faa:	9e 01       	movw	r18, r28
    2fac:	71 2f       	mov	r23, r17
    2fae:	83 2f       	mov	r24, r19
    2fb0:	92 2f       	mov	r25, r18
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	3f ef       	ldi	r19, 0xFF	; 255
    2fb6:	4f e7       	ldi	r20, 0x7F	; 127
    2fb8:	57 e4       	ldi	r21, 0x47	; 71
    2fba:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
    2fbe:	18 16       	cp	r1, r24
    2fc0:	0c f0       	brlt	.+2      	; 0x2fc4 <_Z16select_prescalerf+0x38>
    2fc2:	41 c0       	rjmp	.+130    	; 0x3046 <_Z16select_prescalerf+0xba>
    2fc4:	9e 01       	movw	r18, r28
    2fc6:	60 2f       	mov	r22, r16
    2fc8:	71 2f       	mov	r23, r17
    2fca:	83 2f       	mov	r24, r19
    2fcc:	92 2f       	mov	r25, r18
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	5e e3       	ldi	r21, 0x3E	; 62
    2fd6:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	b4 f5       	brge	.+108    	; 0x3056 <_Z16select_prescalerf+0xca>
    2fea:	9e 01       	movw	r18, r28
    2fec:	60 2f       	mov	r22, r16
    2fee:	71 2f       	mov	r23, r17
    2ff0:	83 2f       	mov	r24, r19
    2ff2:	92 2f       	mov	r25, r18
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e8       	ldi	r20, 0x80	; 128
    2ffa:	5c e3       	ldi	r21, 0x3C	; 60
    2ffc:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	3f ef       	ldi	r19, 0xFF	; 255
    3004:	4f e7       	ldi	r20, 0x7F	; 127
    3006:	57 e4       	ldi	r21, 0x47	; 71
    3008:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
    300c:	18 16       	cp	r1, r24
    300e:	4c f5       	brge	.+82     	; 0x3062 <_Z16select_prescalerf+0xd6>
    3010:	9e 01       	movw	r18, r28
    3012:	60 2f       	mov	r22, r16
    3014:	71 2f       	mov	r23, r17
    3016:	83 2f       	mov	r24, r19
    3018:	92 2f       	mov	r25, r18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5b e3       	ldi	r21, 0x3B	; 59
    3022:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	3f ef       	ldi	r19, 0xFF	; 255
    302a:	4f e7       	ldi	r20, 0x7F	; 127
    302c:	57 e4       	ldi	r21, 0x47	; 71
    302e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__gtsf2>
    3032:	18 16       	cp	r1, r24
    3034:	9c f4       	brge	.+38     	; 0x305c <_Z16select_prescalerf+0xd0>
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    303a:	c9 01       	movw	r24, r18
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    3046:	21 e0       	ldi	r18, 0x01	; 1
    3048:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    304a:	c9 01       	movw	r24, r18
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	1f 91       	pop	r17
    3052:	0f 91       	pop	r16
    3054:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    3056:	28 e0       	ldi	r18, 0x08	; 8
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	ef cf       	rjmp	.-34     	; 0x303a <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	31 e0       	ldi	r19, 0x01	; 1
    3060:	ec cf       	rjmp	.-40     	; 0x303a <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    3062:	20 e4       	ldi	r18, 0x40	; 64
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	e9 cf       	rjmp	.-46     	; 0x303a <_Z16select_prescalerf+0xae>

00003068 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    3068:	80 34       	cpi	r24, 0x40	; 64
    306a:	91 05       	cpc	r25, r1
    306c:	d9 f0       	breq	.+54     	; 0x30a4 <_Z20get_tccr1b_prescalert+0x3c>
    306e:	81 34       	cpi	r24, 0x41	; 65
    3070:	91 05       	cpc	r25, r1
    3072:	50 f0       	brcs	.+20     	; 0x3088 <_Z20get_tccr1b_prescalert+0x20>
    3074:	21 e0       	ldi	r18, 0x01	; 1
    3076:	80 30       	cpi	r24, 0x00	; 0
    3078:	92 07       	cpc	r25, r18
    307a:	81 f0       	breq	.+32     	; 0x309c <_Z20get_tccr1b_prescalert+0x34>
    307c:	24 e0       	ldi	r18, 0x04	; 4
    307e:	80 30       	cpi	r24, 0x00	; 0
    3080:	92 07       	cpc	r25, r18
    3082:	51 f0       	breq	.+20     	; 0x3098 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    3084:	8f ef       	ldi	r24, 0xFF	; 255
    3086:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	91 05       	cpc	r25, r1
    308c:	49 f0       	breq	.+18     	; 0x30a0 <_Z20get_tccr1b_prescalert+0x38>
    308e:	88 30       	cpi	r24, 0x08	; 8
    3090:	91 05       	cpc	r25, r1
    3092:	c1 f7       	brne	.-16     	; 0x3084 <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    3094:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    3096:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    3098:	85 e0       	ldi	r24, 0x05	; 5
    309a:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    309c:	84 e0       	ldi	r24, 0x04	; 4
    309e:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	08 95       	ret

000030a8 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    30a8:	ef 92       	push	r14
    30aa:	ff 92       	push	r15
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	7b 01       	movw	r14, r22
    30b2:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    30b4:	20 91 12 01 	lds	r18, 0x0112
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	74 e2       	ldi	r23, 0x24	; 36
    30c2:	84 ef       	ldi	r24, 0xF4	; 244
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 cd 22 	call	0x459a	; 0x459a <__divmodsi4>
    30ca:	ca 01       	movw	r24, r20
    30cc:	b9 01       	movw	r22, r18
    30ce:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    30d2:	a8 01       	movw	r20, r16
    30d4:	97 01       	movw	r18, r14
    30d6:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
    30da:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    30de:	70 93 14 01 	sts	0x0114, r23
    30e2:	60 93 13 01 	sts	0x0113, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    30e6:	70 93 87 00 	sts	0x0087, r23
    30ea:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    30ee:	1f 91       	pop	r17
    30f0:	0f 91       	pop	r16
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	08 95       	ret

000030f8 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    30f8:	ef 92       	push	r14
    30fa:	ff 92       	push	r15
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	7b 01       	movw	r14, r22
    3106:	8c 01       	movw	r16, r24
    3108:	c4 2f       	mov	r28, r20
    310a:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    310c:	41 11       	cpse	r20, r1
    310e:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    3110:	d1 11       	cpse	r29, r1
    3112:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    3114:	80 91 64 00 	lds	r24, 0x0064
    3118:	87 7e       	andi	r24, 0xE7	; 231
    311a:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    311e:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    3120:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    3122:	10 92 89 00 	sts	0x0089, r1
    3126:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    312a:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    312c:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    312e:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3130:	10 92 8b 00 	sts	0x008B, r1
    3134:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    3138:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    313a:	20 91 12 01 	lds	r18, 0x0112
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	50 e0       	ldi	r21, 0x00	; 0
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	74 e2       	ldi	r23, 0x24	; 36
    3148:	84 ef       	ldi	r24, 0xF4	; 244
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	0e 94 cd 22 	call	0x459a	; 0x459a <__divmodsi4>
    3150:	ca 01       	movw	r24, r20
    3152:	b9 01       	movw	r22, r18
    3154:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__floatsisf>
    3158:	a8 01       	movw	r20, r16
    315a:	97 01       	movw	r18, r14
    315c:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divsf3>
    3160:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    3164:	70 93 14 01 	sts	0x0114, r23
    3168:	60 93 13 01 	sts	0x0113, r22
	ICR1 = TOP;
    316c:	70 93 87 00 	sts	0x0087, r23
    3170:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    3174:	cc 23       	and	r28, r28
    3176:	c1 f4       	brne	.+48     	; 0x31a8 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    3178:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    317a:	d1 11       	cpse	r29, r1
    317c:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    317e:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    3182:	c8 01       	movw	r24, r16
    3184:	b7 01       	movw	r22, r14
    3186:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z16select_prescalerf>
    318a:	80 93 12 01 	sts	0x0112, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 34 18 	call	0x3068	; 0x3068 <_Z20get_tccr1b_prescalert>
    3194:	88 61       	ori	r24, 0x18	; 24
    3196:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	ff 90       	pop	r15
    31a4:	ef 90       	pop	r14
    31a6:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    31a8:	82 e8       	ldi	r24, 0x82	; 130
    31aa:	e7 cf       	rjmp	.-50     	; 0x317a <_Z8pwm_initfhh+0x82>

000031ac <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    31ac:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    31b0:	29 2f       	mov	r18, r25
    31b2:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    31b4:	88 23       	and	r24, r24
    31b6:	21 f4       	brne	.+8      	; 0x31c0 <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    31b8:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    31ba:	90 93 80 00 	sts	0x0080, r25
}
    31be:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    31c0:	92 2f       	mov	r25, r18
    31c2:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    31c4:	90 93 80 00 	sts	0x0080, r25
}
    31c8:	08 95       	ret

000031ca <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    31ca:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    31ce:	29 2f       	mov	r18, r25
    31d0:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    31d2:	88 23       	and	r24, r24
    31d4:	21 f4       	brne	.+8      	; 0x31de <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    31d6:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    31d8:	90 93 80 00 	sts	0x0080, r25
}
    31dc:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    31de:	92 2f       	mov	r25, r18
    31e0:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    31e2:	90 93 80 00 	sts	0x0080, r25
}
    31e6:	08 95       	ret

000031e8 <_Z9set_dutyAf>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_dutyA( float mDuty )
{
    31e8:	ef 92       	push	r14
    31ea:	ff 92       	push	r15
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	7b 01       	movw	r14, r22
    31f2:	8c 01       	movw	r16, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	a9 01       	movw	r20, r18
    31fa:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__ltsf2>
    31fe:	87 ff       	sbrs	r24, 7
    3200:	04 c0       	rjmp	.+8      	; 0x320a <_Z9set_dutyAf+0x22>
    3202:	17 fb       	bst	r17, 7
    3204:	10 95       	com	r17
    3206:	17 f9       	bld	r17, 7
    3208:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    320a:	60 91 13 01 	lds	r22, 0x0113
    320e:	70 91 14 01 	lds	r23, 0x0114
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    321a:	a8 01       	movw	r20, r16
    321c:	97 01       	movw	r18, r14
    321e:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    3222:	0e 94 41 23 	call	0x4682	; 0x4682 <ceil>
    3226:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    322a:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    322c:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    322e:	70 93 89 00 	sts	0x0089, r23
    3232:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    3236:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	08 95       	ret

00003242 <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	7b 01       	movw	r14, r22
    324c:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	a9 01       	movw	r20, r18
    3254:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__ltsf2>
    3258:	87 ff       	sbrs	r24, 7
    325a:	04 c0       	rjmp	.+8      	; 0x3264 <_Z9set_dutyBf+0x22>
    325c:	17 fb       	bst	r17, 7
    325e:	10 95       	com	r17
    3260:	17 f9       	bld	r17, 7
    3262:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    3264:	60 91 13 01 	lds	r22, 0x0113
    3268:	70 91 14 01 	lds	r23, 0x0114
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 45 20 	call	0x408a	; 0x408a <__floatunsisf>
    3274:	a8 01       	movw	r20, r16
    3276:	97 01       	movw	r18, r14
    3278:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__mulsf3>
    327c:	0e 94 41 23 	call	0x4682	; 0x4682 <ceil>
    3280:	0e 94 87 1b 	call	0x370e	; 0x370e <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    3284:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    3286:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3288:	70 93 8b 00 	sts	0x008B, r23
    328c:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    3290:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	ff 90       	pop	r15
    3298:	ef 90       	pop	r14
    329a:	08 95       	ret

0000329c <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    329c:	9b 01       	movw	r18, r22
    329e:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    32a0:	10 92 34 03 	sts	0x0334, r1
    32a4:	10 92 35 03 	sts	0x0335, r1
    32a8:	10 92 36 03 	sts	0x0336, r1
    32ac:	10 92 37 03 	sts	0x0337, r1
    32b0:	80 91 34 03 	lds	r24, 0x0334
    32b4:	90 91 35 03 	lds	r25, 0x0335
    32b8:	a0 91 36 03 	lds	r26, 0x0336
    32bc:	b0 91 37 03 	lds	r27, 0x0337
    32c0:	82 17       	cp	r24, r18
    32c2:	93 07       	cpc	r25, r19
    32c4:	a4 07       	cpc	r26, r20
    32c6:	b5 07       	cpc	r27, r21
    32c8:	04 f5       	brge	.+64     	; 0x330a <_Z5delayl+0x6e>
    32ca:	80 91 34 03 	lds	r24, 0x0334
    32ce:	90 91 35 03 	lds	r25, 0x0335
    32d2:	a0 91 36 03 	lds	r26, 0x0336
    32d6:	b0 91 37 03 	lds	r27, 0x0337
    32da:	01 96       	adiw	r24, 0x01	; 1
    32dc:	a1 1d       	adc	r26, r1
    32de:	b1 1d       	adc	r27, r1
    32e0:	80 93 34 03 	sts	0x0334, r24
    32e4:	90 93 35 03 	sts	0x0335, r25
    32e8:	a0 93 36 03 	sts	0x0336, r26
    32ec:	b0 93 37 03 	sts	0x0337, r27
    32f0:	80 91 34 03 	lds	r24, 0x0334
    32f4:	90 91 35 03 	lds	r25, 0x0335
    32f8:	a0 91 36 03 	lds	r26, 0x0336
    32fc:	b0 91 37 03 	lds	r27, 0x0337
    3300:	82 17       	cp	r24, r18
    3302:	93 07       	cpc	r25, r19
    3304:	a4 07       	cpc	r26, r20
    3306:	b5 07       	cpc	r27, r21
    3308:	04 f3       	brlt	.-64     	; 0x32ca <_Z5delayl+0x2e>
    330a:	08 95       	ret

0000330c <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    330c:	8f ef       	ldi	r24, 0xFF	; 255
    330e:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    3310:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    3312:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    3314:	8e ef       	ldi	r24, 0xFE	; 254
    3316:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    3318:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    331a:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    331c:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    331e:	10 92 64 00 	sts	0x0064, r1
}
    3322:	08 95       	ret

00003324 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    3324:	82 e0       	ldi	r24, 0x02	; 2
    3326:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    3328:	93 e0       	ldi	r25, 0x03	; 3
    332a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    332c:	9a ef       	ldi	r25, 0xFA	; 250
    332e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    3330:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    3334:	10 92 3b 03 	sts	0x033B, r1
    3338:	10 92 3a 03 	sts	0x033A, r1
	/******************* PERIPHERAL INIT  ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    333c:	08 95       	ret

0000333e <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	80 93 3e 03 	sts	0x033E, r24
}
    3344:	08 95       	ret

00003346 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    3346:	10 92 3e 03 	sts	0x033E, r1
}
    334a:	08 95       	ret

0000334c <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    334c:	20 91 3a 03 	lds	r18, 0x033A
    3350:	30 91 3b 03 	lds	r19, 0x033B
    3354:	c9 01       	movw	r24, r18
    3356:	65 e0       	ldi	r22, 0x05	; 5
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodhi4>
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	39 f4       	brne	.+14     	; 0x3370 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    3362:	c9 01       	movw	r24, r18
    3364:	6a e0       	ldi	r22, 0x0A	; 10
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodhi4>
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	09 f0       	breq	.+2      	; 0x3372 <_Z15System_Dispatchv+0x26>
    3370:	08 95       	ret
		{
			can_instance_timeslice();
    3372:	0e 94 59 12 	call	0x24b2	; 0x24b2 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    3376:	80 91 3a 03 	lds	r24, 0x033A
    337a:	90 91 3b 03 	lds	r25, 0x033B
    337e:	64 e1       	ldi	r22, 0x14	; 20
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodhi4>
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	99 f7       	brne	.-26     	; 0x3370 <_Z15System_Dispatchv+0x24>
			{	
				can_board_timeslice();
    338a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    338e:	80 91 3a 03 	lds	r24, 0x033A
    3392:	90 91 3b 03 	lds	r25, 0x033B
    3396:	62 e3       	ldi	r22, 0x32	; 50
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodhi4>
    339e:	00 97       	sbiw	r24, 0x00	; 0
    33a0:	39 f7       	brne	.-50     	; 0x3370 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    33a2:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <_Z19led_timeslice_100msv>
    33a6:	08 95       	ret

000033a8 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    33a8:	1f 92       	push	r1
    33aa:	0f 92       	push	r0
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	0f 92       	push	r0
    33b0:	11 24       	eor	r1, r1
    33b2:	2f 93       	push	r18
    33b4:	3f 93       	push	r19
    33b6:	4f 93       	push	r20
    33b8:	5f 93       	push	r21
    33ba:	6f 93       	push	r22
    33bc:	7f 93       	push	r23
    33be:	8f 93       	push	r24
    33c0:	9f 93       	push	r25
    33c2:	af 93       	push	r26
    33c4:	bf 93       	push	r27
    33c6:	ef 93       	push	r30
    33c8:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    33ca:	80 91 3f 03 	lds	r24, 0x033F
    33ce:	88 23       	and	r24, r24
    33d0:	41 f1       	breq	.+80     	; 0x3422 <__vector_15+0x7a>
    33d2:	10 92 3f 03 	sts	0x033F, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    33d6:	80 91 3e 03 	lds	r24, 0x033E
    33da:	88 23       	and	r24, r24
    33dc:	49 f1       	breq	.+82     	; 0x3430 <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    33de:	80 91 38 03 	lds	r24, 0x0338
    33e2:	90 91 39 03 	lds	r25, 0x0339
    33e6:	9c 01       	movw	r18, r24
    33e8:	2f 5f       	subi	r18, 0xFF	; 255
    33ea:	3f 4f       	sbci	r19, 0xFF	; 255
    33ec:	30 93 39 03 	sts	0x0339, r19
    33f0:	20 93 38 03 	sts	0x0338, r18
    33f4:	6a e0       	ldi	r22, 0x0A	; 10
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	0e 94 a6 22 	call	0x454c	; 0x454c <__udivmodhi4>
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	31 f1       	breq	.+76     	; 0x344c <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    3400:	ff 91       	pop	r31
    3402:	ef 91       	pop	r30
    3404:	bf 91       	pop	r27
    3406:	af 91       	pop	r26
    3408:	9f 91       	pop	r25
    340a:	8f 91       	pop	r24
    340c:	7f 91       	pop	r23
    340e:	6f 91       	pop	r22
    3410:	5f 91       	pop	r21
    3412:	4f 91       	pop	r20
    3414:	3f 91       	pop	r19
    3416:	2f 91       	pop	r18
    3418:	0f 90       	pop	r0
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	0f 90       	pop	r0
    341e:	1f 90       	pop	r1
    3420:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	80 93 3f 03 	sts	0x033F, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    3428:	80 91 3e 03 	lds	r24, 0x033E
    342c:	88 23       	and	r24, r24
    342e:	b9 f6       	brne	.-82     	; 0x33de <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    3430:	80 91 3a 03 	lds	r24, 0x033A
    3434:	90 91 3b 03 	lds	r25, 0x033B
    3438:	01 96       	adiw	r24, 0x01	; 1
    343a:	90 93 3b 03 	sts	0x033B, r25
    343e:	80 93 3a 03 	sts	0x033A, r24
		System_Dispatch();
    3442:	0e 94 a6 19 	call	0x334c	; 0x334c <_Z15System_Dispatchv>
		OS_Dispatch();
    3446:	0e 94 88 0c 	call	0x1910	; 0x1910 <_Z11OS_Dispatchv>
    344a:	da cf       	rjmp	.-76     	; 0x3400 <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    344c:	10 92 39 03 	sts	0x0339, r1
    3450:	10 92 38 03 	sts	0x0338, r1
			OS_Event_TIC_Counter++;
    3454:	80 91 3a 03 	lds	r24, 0x033A
    3458:	90 91 3b 03 	lds	r25, 0x033B
    345c:	01 96       	adiw	r24, 0x01	; 1
    345e:	90 93 3b 03 	sts	0x033B, r25
    3462:	80 93 3a 03 	sts	0x033A, r24
			OS_Dispatch();
    3466:	0e 94 88 0c 	call	0x1910	; 0x1910 <_Z11OS_Dispatchv>
    346a:	ca cf       	rjmp	.-108    	; 0x3400 <__vector_15+0x58>

0000346c <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    3470:	93 e0       	ldi	r25, 0x03	; 3
    3472:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    3474:	9a ef       	ldi	r25, 0xFA	; 250
    3476:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    3478:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    347c:	10 92 3b 03 	sts	0x033B, r1
    3480:	10 92 3a 03 	sts	0x033A, r1
}
    3484:	08 95       	ret

00003486 <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    3486:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    3488:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    348a:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    348c:	85 81       	ldd	r24, Z+5	; 0x05
    348e:	82 30       	cpi	r24, 0x02	; 2
    3490:	d9 f0       	breq	.+54     	; 0x34c8 <_Z27can_parse_configure_requestP4sCAN+0x42>
    3492:	83 30       	cpi	r24, 0x03	; 3
    3494:	71 f0       	breq	.+28     	; 0x34b2 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    3496:	81 30       	cpi	r24, 0x01	; 1
    3498:	09 f0       	breq	.+2      	; 0x349c <_Z27can_parse_configure_requestP4sCAN+0x16>
    349a:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    349c:	89 2f       	mov	r24, r25
    349e:	80 95       	com	r24
    34a0:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    34a2:	92 23       	and	r25, r18
    34a4:	20 91 40 03 	lds	r18, 0x0340
    34a8:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    34aa:	89 23       	and	r24, r25
    34ac:	80 93 40 03 	sts	0x0340, r24
				 break;
    34b0:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    34b2:	89 2f       	mov	r24, r25
    34b4:	80 95       	com	r24
    34b6:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    34b8:	92 23       	and	r25, r18
    34ba:	20 91 42 03 	lds	r18, 0x0342
    34be:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    34c0:	89 23       	and	r24, r25
    34c2:	80 93 42 03 	sts	0x0342, r24
    34c6:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    34c8:	89 2f       	mov	r24, r25
    34ca:	80 95       	com	r24
    34cc:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    34ce:	92 23       	and	r25, r18
    34d0:	20 91 41 03 	lds	r18, 0x0341
    34d4:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    34d6:	89 23       	and	r24, r25
    34d8:	80 93 41 03 	sts	0x0341, r24
				 break;
    34dc:	08 95       	ret

000034de <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    34de:	10 92 40 03 	sts	0x0340, r1
	config_byte_2 = 0;		// no reports
    34e2:	10 92 41 03 	sts	0x0341, r1
	config_byte_3 = 0;		// 
    34e6:	10 92 42 03 	sts	0x0342, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    34ea:	82 e4       	ldi	r24, 0x42	; 66
    34ec:	80 93 43 03 	sts	0x0343, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    34f0:	10 92 c5 02 	sts	0x02C5, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    34f4:	80 91 44 03 	lds	r24, 0x0344
    34f8:	81 60       	ori	r24, 0x01	; 1
    34fa:	80 93 44 03 	sts	0x0344, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    34fe:	10 92 c4 02 	sts	0x02C4, r1
	MyInstance 		 = 0x98;
    3502:	88 e9       	ldi	r24, 0x98	; 152
    3504:	80 93 c3 02 	sts	0x02C3, r24

	//led_on(4);
}
    3508:	08 95       	ret

0000350a <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    350a:	80 91 44 03 	lds	r24, 0x0344
							// and b/c it's better the user knows when it's read.
	//led_off(4);
	
	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    350e:	80 fd       	sbrc	r24, 0
    3510:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    3512:	0e 94 6f 1a 	call	0x34de	; 0x34de <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    3516:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z25app_default_configurationv>
    351a:	08 95       	ret

0000351c <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number( byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    351c:	20 91 c3 02 	lds	r18, 0x02C3
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3520:	f9 99       	sbic	0x1f, 1	; 31
    3522:	fe cf       	rjmp	.-4      	; 0x3520 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3524:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3526:	92 bd       	out	0x22, r25	; 34
    3528:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    352a:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    352c:	0f b6       	in	r0, 0x3f	; 63
    352e:	f8 94       	cli
    3530:	fa 9a       	sbi	0x1f, 2	; 31
    3532:	f9 9a       	sbi	0x1f, 1	; 31
    3534:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    3536:	9c 01       	movw	r18, r24
    3538:	2f 5f       	subi	r18, 0xFF	; 255
    353a:	3f 4f       	sbci	r19, 0xFF	; 255
}
    353c:	c9 01       	movw	r24, r18
    353e:	08 95       	ret

00003540 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3540:	f9 99       	sbic	0x1f, 1	; 31
    3542:	fe cf       	rjmp	.-4      	; 0x3540 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3544:	92 bd       	out	0x22, r25	; 34
    3546:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3548:	f8 9a       	sbi	0x1f, 0	; 31
    354a:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    354c:	20 93 c3 02 	sts	0x02C3, r18
    return mEEPROMAddress+1;    
    3550:	9c 01       	movw	r18, r24
    3552:	2f 5f       	subi	r18, 0xFF	; 255
    3554:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3556:	c9 01       	movw	r24, r18
    3558:	08 95       	ret

0000355a <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    355a:	20 91 c4 02 	lds	r18, 0x02C4
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    355e:	f9 99       	sbic	0x1f, 1	; 31
    3560:	fe cf       	rjmp	.-4      	; 0x355e <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3562:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3564:	92 bd       	out	0x22, r25	; 34
    3566:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3568:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	fa 9a       	sbi	0x1f, 2	; 31
    3570:	f9 9a       	sbi	0x1f, 1	; 31
    3572:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    3574:	9c 01       	movw	r18, r24
    3576:	2f 5f       	subi	r18, 0xFF	; 255
    3578:	3f 4f       	sbci	r19, 0xFF	; 255
}
    357a:	c9 01       	movw	r24, r18
    357c:	08 95       	ret

0000357e <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    357e:	f9 99       	sbic	0x1f, 1	; 31
    3580:	fe cf       	rjmp	.-4      	; 0x357e <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3582:	92 bd       	out	0x22, r25	; 34
    3584:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3586:	f8 9a       	sbi	0x1f, 0	; 31
    3588:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    358a:	20 93 c4 02 	sts	0x02C4, r18
    return mEEPROMAddress+1;
    358e:	9c 01       	movw	r18, r24
    3590:	2f 5f       	subi	r18, 0xFF	; 255
    3592:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3594:	c9 01       	movw	r24, r18
    3596:	08 95       	ret

00003598 <_Z25save_configuration_eepromPh>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	byte* address = addr;
	eeprom_write_byte( addr++, ~config_byte_1 );
    3598:	9c 01       	movw	r18, r24
    359a:	2f 5f       	subi	r18, 0xFF	; 255
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	40 91 40 03 	lds	r20, 0x0340
    35a2:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    35a4:	f9 99       	sbic	0x1f, 1	; 31
    35a6:	fe cf       	rjmp	.-4      	; 0x35a4 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    35a8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    35aa:	92 bd       	out	0x22, r25	; 34
    35ac:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    35ae:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	fa 9a       	sbi	0x1f, 2	; 31
    35b6:	f9 9a       	sbi	0x1f, 1	; 31
    35b8:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    35ba:	c9 01       	movw	r24, r18
    35bc:	01 96       	adiw	r24, 0x01	; 1
    35be:	40 91 41 03 	lds	r20, 0x0341
    35c2:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    35c4:	f9 99       	sbic	0x1f, 1	; 31
    35c6:	fe cf       	rjmp	.-4      	; 0x35c4 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    35c8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    35ca:	32 bd       	out	0x22, r19	; 34
    35cc:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    35ce:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	fa 9a       	sbi	0x1f, 2	; 31
    35d6:	f9 9a       	sbi	0x1f, 1	; 31
    35d8:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    35da:	9c 01       	movw	r18, r24
    35dc:	2f 5f       	subi	r18, 0xFF	; 255
    35de:	3f 4f       	sbci	r19, 0xFF	; 255
    35e0:	40 91 42 03 	lds	r20, 0x0342
    35e4:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    35e6:	f9 99       	sbic	0x1f, 1	; 31
    35e8:	fe cf       	rjmp	.-4      	; 0x35e6 <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    35ea:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    35ec:	92 bd       	out	0x22, r25	; 34
    35ee:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    35f0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	fa 9a       	sbi	0x1f, 2	; 31
    35f8:	f9 9a       	sbi	0x1f, 1	; 31
    35fa:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    35fc:	c9 01       	movw	r24, r18
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	40 91 43 03 	lds	r20, 0x0343
    3604:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3606:	f9 99       	sbic	0x1f, 1	; 31
    3608:	fe cf       	rjmp	.-4      	; 0x3606 <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    360a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    360c:	32 bd       	out	0x22, r19	; 34
    360e:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    3610:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	fa 9a       	sbi	0x1f, 2	; 31
    3618:	f9 9a       	sbi	0x1f, 1	; 31
    361a:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    361c:	9c 01       	movw	r18, r24
    361e:	2f 5f       	subi	r18, 0xFF	; 255
    3620:	3f 4f       	sbci	r19, 0xFF	; 255
    3622:	40 91 44 03 	lds	r20, 0x0344
    3626:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3628:	f9 99       	sbic	0x1f, 1	; 31
    362a:	fe cf       	rjmp	.-4      	; 0x3628 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    362c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    362e:	92 bd       	out	0x22, r25	; 34
    3630:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3632:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	fa 9a       	sbi	0x1f, 2	; 31
    363a:	f9 9a       	sbi	0x1f, 1	; 31
    363c:	0f be       	out	0x3f, r0	; 63
	okay_to_read_cal = true;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	80 93 1e 02 	sts	0x021E, r24
	return addr;
}
    3644:	c9 01       	movw	r24, r18
    3646:	08 95       	ret

00003648 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	0e 94 8e 1a 	call	0x351c	; 0x351c <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    3650:	0e 94 ad 1a 	call	0x355a	; 0x355a <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    3654:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_Z25save_configuration_eepromPh>
}
    3658:	08 95       	ret

0000365a <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    365a:	f8 94       	cli
	return save_configuration();
    365c:	0e 94 24 1b 	call	0x3648	; 0x3648 <_Z18save_configurationv>
	sei();
}
    3660:	08 95       	ret

00003662 <_Z21make_system_new_boardt>:
	Caller:		None found in BigMotorEn.
 */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    3662:	22 e1       	ldi	r18, 0x12	; 18
    3664:	84 33       	cpi	r24, 0x34	; 52
    3666:	92 07       	cpc	r25, r18
    3668:	11 f0       	breq	.+4      	; 0x366e <_Z21make_system_new_boardt+0xc>
		  0 = bad password 
	Caller:		None found in BigMotorEn.
 */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    366a:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    366c:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    366e:	80 91 44 03 	lds	r24, 0x0344
    3672:	8e 7f       	andi	r24, 0xFE	; 254
    3674:	80 93 44 03 	sts	0x0344, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    3678:	f8 94       	cli
    367a:	0e 94 24 1b 	call	0x3648	; 0x3648 <_Z18save_configurationv>
    367e:	78 94       	sei
		retval = 1;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	08 95       	ret

00003684 <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    3684:	9c 01       	movw	r18, r24
    3686:	2f 5f       	subi	r18, 0xFF	; 255
    3688:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    368a:	f9 99       	sbic	0x1f, 1	; 31
    368c:	fe cf       	rjmp	.-4      	; 0x368a <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    368e:	92 bd       	out	0x22, r25	; 34
    3690:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3692:	f8 9a       	sbi	0x1f, 0	; 31
    3694:	80 b5       	in	r24, 0x20	; 32
    3696:	80 95       	com	r24
    3698:	80 93 40 03 	sts	0x0340, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    369c:	c9 01       	movw	r24, r18
    369e:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    36a0:	f9 99       	sbic	0x1f, 1	; 31
    36a2:	fe cf       	rjmp	.-4      	; 0x36a0 <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    36a4:	32 bd       	out	0x22, r19	; 34
    36a6:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    36a8:	f8 9a       	sbi	0x1f, 0	; 31
    36aa:	20 b5       	in	r18, 0x20	; 32
    36ac:	20 95       	com	r18
    36ae:	20 93 41 03 	sts	0x0341, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    36b2:	9c 01       	movw	r18, r24
    36b4:	2f 5f       	subi	r18, 0xFF	; 255
    36b6:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    36b8:	f9 99       	sbic	0x1f, 1	; 31
    36ba:	fe cf       	rjmp	.-4      	; 0x36b8 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    36bc:	92 bd       	out	0x22, r25	; 34
    36be:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    36c0:	f8 9a       	sbi	0x1f, 0	; 31
    36c2:	80 b5       	in	r24, 0x20	; 32
    36c4:	80 95       	com	r24
    36c6:	80 93 42 03 	sts	0x0342, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    36ca:	c9 01       	movw	r24, r18
    36cc:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    36ce:	f9 99       	sbic	0x1f, 1	; 31
    36d0:	fe cf       	rjmp	.-4      	; 0x36ce <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    36d2:	32 bd       	out	0x22, r19	; 34
    36d4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    36d6:	f8 9a       	sbi	0x1f, 0	; 31
    36d8:	20 b5       	in	r18, 0x20	; 32
    36da:	20 95       	com	r18
    36dc:	20 93 43 03 	sts	0x0343, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    36e0:	9c 01       	movw	r18, r24
    36e2:	2f 5f       	subi	r18, 0xFF	; 255
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    36e6:	f9 99       	sbic	0x1f, 1	; 31
    36e8:	fe cf       	rjmp	.-4      	; 0x36e6 <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    36ea:	92 bd       	out	0x22, r25	; 34
    36ec:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    36ee:	f8 9a       	sbi	0x1f, 0	; 31
    36f0:	80 b5       	in	r24, 0x20	; 32
    36f2:	80 95       	com	r24
    36f4:	80 93 44 03 	sts	0x0344, r24
	return addr;
}
    36f8:	c9 01       	movw	r24, r18
    36fa:	08 95       	ret

000036fc <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    3704:	0e 94 bf 1a 	call	0x357e	; 0x357e <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    3708:	0e 94 42 1b 	call	0x3684	; 0x3684 <_Z25read_configuration_eepromPh>
}
    370c:	08 95       	ret

0000370e <__fixunssfsi>:
    370e:	ef 92       	push	r14
    3710:	ff 92       	push	r15
    3712:	0f 93       	push	r16
    3714:	1f 93       	push	r17
    3716:	7b 01       	movw	r14, r22
    3718:	8c 01       	movw	r16, r24
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e0       	ldi	r20, 0x00	; 0
    3720:	5f e4       	ldi	r21, 0x4F	; 79
    3722:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__gesf2>
    3726:	87 fd       	sbrc	r24, 7
    3728:	11 c0       	rjmp	.+34     	; 0x374c <__fixunssfsi+0x3e>
    372a:	c8 01       	movw	r24, r16
    372c:	b7 01       	movw	r22, r14
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	5f e4       	ldi	r21, 0x4F	; 79
    3736:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__subsf3>
    373a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__fixsfsi>
    373e:	9b 01       	movw	r18, r22
    3740:	ac 01       	movw	r20, r24
    3742:	20 50       	subi	r18, 0x00	; 0
    3744:	30 40       	sbci	r19, 0x00	; 0
    3746:	40 40       	sbci	r20, 0x00	; 0
    3748:	50 48       	sbci	r21, 0x80	; 128
    374a:	06 c0       	rjmp	.+12     	; 0x3758 <__fixunssfsi+0x4a>
    374c:	c8 01       	movw	r24, r16
    374e:	b7 01       	movw	r22, r14
    3750:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__fixsfsi>
    3754:	9b 01       	movw	r18, r22
    3756:	ac 01       	movw	r20, r24
    3758:	b9 01       	movw	r22, r18
    375a:	ca 01       	movw	r24, r20
    375c:	1f 91       	pop	r17
    375e:	0f 91       	pop	r16
    3760:	ff 90       	pop	r15
    3762:	ef 90       	pop	r14
    3764:	08 95       	ret

00003766 <_fpadd_parts>:
    3766:	a0 e0       	ldi	r26, 0x00	; 0
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	e9 eb       	ldi	r30, 0xB9	; 185
    376c:	fb e1       	ldi	r31, 0x1B	; 27
    376e:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__prologue_saves__+0x8>
    3772:	fc 01       	movw	r30, r24
    3774:	ea 01       	movw	r28, r20
    3776:	80 81       	ld	r24, Z
    3778:	82 30       	cpi	r24, 0x02	; 2
    377a:	08 f4       	brcc	.+2      	; 0x377e <_fpadd_parts+0x18>
    377c:	38 c1       	rjmp	.+624    	; 0x39ee <_fpadd_parts+0x288>
    377e:	db 01       	movw	r26, r22
    3780:	9c 91       	ld	r25, X
    3782:	92 30       	cpi	r25, 0x02	; 2
    3784:	08 f4       	brcc	.+2      	; 0x3788 <_fpadd_parts+0x22>
    3786:	30 c1       	rjmp	.+608    	; 0x39e8 <_fpadd_parts+0x282>
    3788:	84 30       	cpi	r24, 0x04	; 4
    378a:	59 f4       	brne	.+22     	; 0x37a2 <_fpadd_parts+0x3c>
    378c:	94 30       	cpi	r25, 0x04	; 4
    378e:	09 f0       	breq	.+2      	; 0x3792 <_fpadd_parts+0x2c>
    3790:	2e c1       	rjmp	.+604    	; 0x39ee <_fpadd_parts+0x288>
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	11 96       	adiw	r26, 0x01	; 1
    3796:	8c 91       	ld	r24, X
    3798:	11 97       	sbiw	r26, 0x01	; 1
    379a:	98 17       	cp	r25, r24
    379c:	09 f0       	breq	.+2      	; 0x37a0 <_fpadd_parts+0x3a>
    379e:	21 c1       	rjmp	.+578    	; 0x39e2 <_fpadd_parts+0x27c>
    37a0:	26 c1       	rjmp	.+588    	; 0x39ee <_fpadd_parts+0x288>
    37a2:	94 30       	cpi	r25, 0x04	; 4
    37a4:	09 f4       	brne	.+2      	; 0x37a8 <_fpadd_parts+0x42>
    37a6:	20 c1       	rjmp	.+576    	; 0x39e8 <_fpadd_parts+0x282>
    37a8:	92 30       	cpi	r25, 0x02	; 2
    37aa:	b1 f4       	brne	.+44     	; 0x37d8 <_fpadd_parts+0x72>
    37ac:	82 30       	cpi	r24, 0x02	; 2
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <_fpadd_parts+0x4c>
    37b0:	1e c1       	rjmp	.+572    	; 0x39ee <_fpadd_parts+0x288>
    37b2:	ca 01       	movw	r24, r20
    37b4:	af 01       	movw	r20, r30
    37b6:	28 e0       	ldi	r18, 0x08	; 8
    37b8:	da 01       	movw	r26, r20
    37ba:	0d 90       	ld	r0, X+
    37bc:	ad 01       	movw	r20, r26
    37be:	dc 01       	movw	r26, r24
    37c0:	0d 92       	st	X+, r0
    37c2:	cd 01       	movw	r24, r26
    37c4:	21 50       	subi	r18, 0x01	; 1
    37c6:	c1 f7       	brne	.-16     	; 0x37b8 <_fpadd_parts+0x52>
    37c8:	db 01       	movw	r26, r22
    37ca:	11 96       	adiw	r26, 0x01	; 1
    37cc:	8c 91       	ld	r24, X
    37ce:	11 97       	sbiw	r26, 0x01	; 1
    37d0:	91 81       	ldd	r25, Z+1	; 0x01
    37d2:	89 23       	and	r24, r25
    37d4:	89 83       	std	Y+1, r24	; 0x01
    37d6:	0a c1       	rjmp	.+532    	; 0x39ec <_fpadd_parts+0x286>
    37d8:	82 30       	cpi	r24, 0x02	; 2
    37da:	09 f4       	brne	.+2      	; 0x37de <_fpadd_parts+0x78>
    37dc:	05 c1       	rjmp	.+522    	; 0x39e8 <_fpadd_parts+0x282>
    37de:	c2 80       	ldd	r12, Z+2	; 0x02
    37e0:	d3 80       	ldd	r13, Z+3	; 0x03
    37e2:	db 01       	movw	r26, r22
    37e4:	12 96       	adiw	r26, 0x02	; 2
    37e6:	6d 90       	ld	r6, X+
    37e8:	7c 90       	ld	r7, X
    37ea:	13 97       	sbiw	r26, 0x03	; 3
    37ec:	24 81       	ldd	r18, Z+4	; 0x04
    37ee:	35 81       	ldd	r19, Z+5	; 0x05
    37f0:	46 81       	ldd	r20, Z+6	; 0x06
    37f2:	57 81       	ldd	r21, Z+7	; 0x07
    37f4:	14 96       	adiw	r26, 0x04	; 4
    37f6:	ed 90       	ld	r14, X+
    37f8:	fd 90       	ld	r15, X+
    37fa:	0d 91       	ld	r16, X+
    37fc:	1c 91       	ld	r17, X
    37fe:	17 97       	sbiw	r26, 0x07	; 7
    3800:	c6 01       	movw	r24, r12
    3802:	86 19       	sub	r24, r6
    3804:	97 09       	sbc	r25, r7
    3806:	5c 01       	movw	r10, r24
    3808:	97 ff       	sbrs	r25, 7
    380a:	04 c0       	rjmp	.+8      	; 0x3814 <_fpadd_parts+0xae>
    380c:	aa 24       	eor	r10, r10
    380e:	bb 24       	eor	r11, r11
    3810:	a8 1a       	sub	r10, r24
    3812:	b9 0a       	sbc	r11, r25
    3814:	b0 e2       	ldi	r27, 0x20	; 32
    3816:	ab 16       	cp	r10, r27
    3818:	b1 04       	cpc	r11, r1
    381a:	0c f0       	brlt	.+2      	; 0x381e <_fpadd_parts+0xb8>
    381c:	61 c0       	rjmp	.+194    	; 0x38e0 <_fpadd_parts+0x17a>
    381e:	18 16       	cp	r1, r24
    3820:	19 06       	cpc	r1, r25
    3822:	6c f5       	brge	.+90     	; 0x387e <_fpadd_parts+0x118>
    3824:	37 01       	movw	r6, r14
    3826:	48 01       	movw	r8, r16
    3828:	0a 2c       	mov	r0, r10
    382a:	04 c0       	rjmp	.+8      	; 0x3834 <_fpadd_parts+0xce>
    382c:	96 94       	lsr	r9
    382e:	87 94       	ror	r8
    3830:	77 94       	ror	r7
    3832:	67 94       	ror	r6
    3834:	0a 94       	dec	r0
    3836:	d2 f7       	brpl	.-12     	; 0x382c <_fpadd_parts+0xc6>
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	a0 e0       	ldi	r26, 0x00	; 0
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	0a 2c       	mov	r0, r10
    3842:	04 c0       	rjmp	.+8      	; 0x384c <_fpadd_parts+0xe6>
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	aa 1f       	adc	r26, r26
    384a:	bb 1f       	adc	r27, r27
    384c:	0a 94       	dec	r0
    384e:	d2 f7       	brpl	.-12     	; 0x3844 <_fpadd_parts+0xde>
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	a1 09       	sbc	r26, r1
    3854:	b1 09       	sbc	r27, r1
    3856:	8e 21       	and	r24, r14
    3858:	9f 21       	and	r25, r15
    385a:	a0 23       	and	r26, r16
    385c:	b1 23       	and	r27, r17
    385e:	ee 24       	eor	r14, r14
    3860:	ff 24       	eor	r15, r15
    3862:	87 01       	movw	r16, r14
    3864:	e3 94       	inc	r14
    3866:	00 97       	sbiw	r24, 0x00	; 0
    3868:	a1 05       	cpc	r26, r1
    386a:	b1 05       	cpc	r27, r1
    386c:	19 f4       	brne	.+6      	; 0x3874 <_fpadd_parts+0x10e>
    386e:	ee 24       	eor	r14, r14
    3870:	ff 24       	eor	r15, r15
    3872:	87 01       	movw	r16, r14
    3874:	e6 28       	or	r14, r6
    3876:	f7 28       	or	r15, r7
    3878:	08 29       	or	r16, r8
    387a:	19 29       	or	r17, r9
    387c:	3c c0       	rjmp	.+120    	; 0x38f6 <_fpadd_parts+0x190>
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	d1 f1       	breq	.+116    	; 0x38f6 <_fpadd_parts+0x190>
    3882:	ca 0c       	add	r12, r10
    3884:	db 1c       	adc	r13, r11
    3886:	39 01       	movw	r6, r18
    3888:	4a 01       	movw	r8, r20
    388a:	0a 2c       	mov	r0, r10
    388c:	04 c0       	rjmp	.+8      	; 0x3896 <_fpadd_parts+0x130>
    388e:	96 94       	lsr	r9
    3890:	87 94       	ror	r8
    3892:	77 94       	ror	r7
    3894:	67 94       	ror	r6
    3896:	0a 94       	dec	r0
    3898:	d2 f7       	brpl	.-12     	; 0x388e <_fpadd_parts+0x128>
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	a0 e0       	ldi	r26, 0x00	; 0
    38a0:	b0 e0       	ldi	r27, 0x00	; 0
    38a2:	0a 2c       	mov	r0, r10
    38a4:	04 c0       	rjmp	.+8      	; 0x38ae <_fpadd_parts+0x148>
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	aa 1f       	adc	r26, r26
    38ac:	bb 1f       	adc	r27, r27
    38ae:	0a 94       	dec	r0
    38b0:	d2 f7       	brpl	.-12     	; 0x38a6 <_fpadd_parts+0x140>
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	a1 09       	sbc	r26, r1
    38b6:	b1 09       	sbc	r27, r1
    38b8:	82 23       	and	r24, r18
    38ba:	93 23       	and	r25, r19
    38bc:	a4 23       	and	r26, r20
    38be:	b5 23       	and	r27, r21
    38c0:	21 e0       	ldi	r18, 0x01	; 1
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	50 e0       	ldi	r21, 0x00	; 0
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	a1 05       	cpc	r26, r1
    38cc:	b1 05       	cpc	r27, r1
    38ce:	19 f4       	brne	.+6      	; 0x38d6 <_fpadd_parts+0x170>
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	a9 01       	movw	r20, r18
    38d6:	26 29       	or	r18, r6
    38d8:	37 29       	or	r19, r7
    38da:	48 29       	or	r20, r8
    38dc:	59 29       	or	r21, r9
    38de:	0b c0       	rjmp	.+22     	; 0x38f6 <_fpadd_parts+0x190>
    38e0:	6c 14       	cp	r6, r12
    38e2:	7d 04       	cpc	r7, r13
    38e4:	24 f4       	brge	.+8      	; 0x38ee <_fpadd_parts+0x188>
    38e6:	ee 24       	eor	r14, r14
    38e8:	ff 24       	eor	r15, r15
    38ea:	87 01       	movw	r16, r14
    38ec:	04 c0       	rjmp	.+8      	; 0x38f6 <_fpadd_parts+0x190>
    38ee:	63 01       	movw	r12, r6
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	a9 01       	movw	r20, r18
    38f6:	81 81       	ldd	r24, Z+1	; 0x01
    38f8:	fb 01       	movw	r30, r22
    38fa:	91 81       	ldd	r25, Z+1	; 0x01
    38fc:	89 17       	cp	r24, r25
    38fe:	09 f4       	brne	.+2      	; 0x3902 <_fpadd_parts+0x19c>
    3900:	45 c0       	rjmp	.+138    	; 0x398c <_fpadd_parts+0x226>
    3902:	88 23       	and	r24, r24
    3904:	49 f0       	breq	.+18     	; 0x3918 <_fpadd_parts+0x1b2>
    3906:	d8 01       	movw	r26, r16
    3908:	c7 01       	movw	r24, r14
    390a:	82 1b       	sub	r24, r18
    390c:	93 0b       	sbc	r25, r19
    390e:	a4 0b       	sbc	r26, r20
    3910:	b5 0b       	sbc	r27, r21
    3912:	9c 01       	movw	r18, r24
    3914:	ad 01       	movw	r20, r26
    3916:	04 c0       	rjmp	.+8      	; 0x3920 <_fpadd_parts+0x1ba>
    3918:	2e 19       	sub	r18, r14
    391a:	3f 09       	sbc	r19, r15
    391c:	40 0b       	sbc	r20, r16
    391e:	51 0b       	sbc	r21, r17
    3920:	57 fd       	sbrc	r21, 7
    3922:	04 c0       	rjmp	.+8      	; 0x392c <_fpadd_parts+0x1c6>
    3924:	19 82       	std	Y+1, r1	; 0x01
    3926:	db 82       	std	Y+3, r13	; 0x03
    3928:	ca 82       	std	Y+2, r12	; 0x02
    392a:	0b c0       	rjmp	.+22     	; 0x3942 <_fpadd_parts+0x1dc>
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	db 82       	std	Y+3, r13	; 0x03
    3932:	ca 82       	std	Y+2, r12	; 0x02
    3934:	50 95       	com	r21
    3936:	40 95       	com	r20
    3938:	30 95       	com	r19
    393a:	21 95       	neg	r18
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	4f 4f       	sbci	r20, 0xFF	; 255
    3940:	5f 4f       	sbci	r21, 0xFF	; 255
    3942:	2c 83       	std	Y+4, r18	; 0x04
    3944:	3d 83       	std	Y+5, r19	; 0x05
    3946:	4e 83       	std	Y+6, r20	; 0x06
    3948:	5f 83       	std	Y+7, r21	; 0x07
    394a:	0d c0       	rjmp	.+26     	; 0x3966 <_fpadd_parts+0x200>
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	aa 1f       	adc	r26, r26
    3952:	bb 1f       	adc	r27, r27
    3954:	8c 83       	std	Y+4, r24	; 0x04
    3956:	9d 83       	std	Y+5, r25	; 0x05
    3958:	ae 83       	std	Y+6, r26	; 0x06
    395a:	bf 83       	std	Y+7, r27	; 0x07
    395c:	8a 81       	ldd	r24, Y+2	; 0x02
    395e:	9b 81       	ldd	r25, Y+3	; 0x03
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	9b 83       	std	Y+3, r25	; 0x03
    3964:	8a 83       	std	Y+2, r24	; 0x02
    3966:	8c 81       	ldd	r24, Y+4	; 0x04
    3968:	9d 81       	ldd	r25, Y+5	; 0x05
    396a:	ae 81       	ldd	r26, Y+6	; 0x06
    396c:	bf 81       	ldd	r27, Y+7	; 0x07
    396e:	9c 01       	movw	r18, r24
    3970:	ad 01       	movw	r20, r26
    3972:	21 50       	subi	r18, 0x01	; 1
    3974:	30 40       	sbci	r19, 0x00	; 0
    3976:	40 40       	sbci	r20, 0x00	; 0
    3978:	50 40       	sbci	r21, 0x00	; 0
    397a:	2f 3f       	cpi	r18, 0xFF	; 255
    397c:	ef ef       	ldi	r30, 0xFF	; 255
    397e:	3e 07       	cpc	r19, r30
    3980:	ef ef       	ldi	r30, 0xFF	; 255
    3982:	4e 07       	cpc	r20, r30
    3984:	ef e3       	ldi	r30, 0x3F	; 63
    3986:	5e 07       	cpc	r21, r30
    3988:	08 f3       	brcs	.-62     	; 0x394c <_fpadd_parts+0x1e6>
    398a:	0b c0       	rjmp	.+22     	; 0x39a2 <_fpadd_parts+0x23c>
    398c:	89 83       	std	Y+1, r24	; 0x01
    398e:	db 82       	std	Y+3, r13	; 0x03
    3990:	ca 82       	std	Y+2, r12	; 0x02
    3992:	2e 0d       	add	r18, r14
    3994:	3f 1d       	adc	r19, r15
    3996:	40 1f       	adc	r20, r16
    3998:	51 1f       	adc	r21, r17
    399a:	2c 83       	std	Y+4, r18	; 0x04
    399c:	3d 83       	std	Y+5, r19	; 0x05
    399e:	4e 83       	std	Y+6, r20	; 0x06
    39a0:	5f 83       	std	Y+7, r21	; 0x07
    39a2:	83 e0       	ldi	r24, 0x03	; 3
    39a4:	88 83       	st	Y, r24
    39a6:	2c 81       	ldd	r18, Y+4	; 0x04
    39a8:	3d 81       	ldd	r19, Y+5	; 0x05
    39aa:	4e 81       	ldd	r20, Y+6	; 0x06
    39ac:	5f 81       	ldd	r21, Y+7	; 0x07
    39ae:	57 ff       	sbrs	r21, 7
    39b0:	1d c0       	rjmp	.+58     	; 0x39ec <_fpadd_parts+0x286>
    39b2:	da 01       	movw	r26, r20
    39b4:	c9 01       	movw	r24, r18
    39b6:	81 70       	andi	r24, 0x01	; 1
    39b8:	90 70       	andi	r25, 0x00	; 0
    39ba:	a0 70       	andi	r26, 0x00	; 0
    39bc:	b0 70       	andi	r27, 0x00	; 0
    39be:	56 95       	lsr	r21
    39c0:	47 95       	ror	r20
    39c2:	37 95       	ror	r19
    39c4:	27 95       	ror	r18
    39c6:	82 2b       	or	r24, r18
    39c8:	93 2b       	or	r25, r19
    39ca:	a4 2b       	or	r26, r20
    39cc:	b5 2b       	or	r27, r21
    39ce:	8c 83       	std	Y+4, r24	; 0x04
    39d0:	9d 83       	std	Y+5, r25	; 0x05
    39d2:	ae 83       	std	Y+6, r26	; 0x06
    39d4:	bf 83       	std	Y+7, r27	; 0x07
    39d6:	8a 81       	ldd	r24, Y+2	; 0x02
    39d8:	9b 81       	ldd	r25, Y+3	; 0x03
    39da:	01 96       	adiw	r24, 0x01	; 1
    39dc:	9b 83       	std	Y+3, r25	; 0x03
    39de:	8a 83       	std	Y+2, r24	; 0x02
    39e0:	05 c0       	rjmp	.+10     	; 0x39ec <_fpadd_parts+0x286>
    39e2:	e5 e1       	ldi	r30, 0x15	; 21
    39e4:	f1 e0       	ldi	r31, 0x01	; 1
    39e6:	03 c0       	rjmp	.+6      	; 0x39ee <_fpadd_parts+0x288>
    39e8:	fb 01       	movw	r30, r22
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <_fpadd_parts+0x288>
    39ec:	fe 01       	movw	r30, r28
    39ee:	cf 01       	movw	r24, r30
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	ee e0       	ldi	r30, 0x0E	; 14
    39f6:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__epilogue_restores__+0x8>

000039fa <__addsf3>:
    39fa:	a0 e2       	ldi	r26, 0x20	; 32
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	e3 e0       	ldi	r30, 0x03	; 3
    3a00:	fd e1       	ldi	r31, 0x1D	; 29
    3a02:	0c 94 16 23 	jmp	0x462c	; 0x462c <__prologue_saves__+0x18>
    3a06:	69 83       	std	Y+1, r22	; 0x01
    3a08:	7a 83       	std	Y+2, r23	; 0x02
    3a0a:	8b 83       	std	Y+3, r24	; 0x03
    3a0c:	9c 83       	std	Y+4, r25	; 0x04
    3a0e:	2d 83       	std	Y+5, r18	; 0x05
    3a10:	3e 83       	std	Y+6, r19	; 0x06
    3a12:	4f 83       	std	Y+7, r20	; 0x07
    3a14:	58 87       	std	Y+8, r21	; 0x08
    3a16:	89 e0       	ldi	r24, 0x09	; 9
    3a18:	e8 2e       	mov	r14, r24
    3a1a:	f1 2c       	mov	r15, r1
    3a1c:	ec 0e       	add	r14, r28
    3a1e:	fd 1e       	adc	r15, r29
    3a20:	ce 01       	movw	r24, r28
    3a22:	01 96       	adiw	r24, 0x01	; 1
    3a24:	b7 01       	movw	r22, r14
    3a26:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3a2a:	8e 01       	movw	r16, r28
    3a2c:	0f 5e       	subi	r16, 0xEF	; 239
    3a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a30:	ce 01       	movw	r24, r28
    3a32:	05 96       	adiw	r24, 0x05	; 5
    3a34:	b8 01       	movw	r22, r16
    3a36:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3a3a:	c7 01       	movw	r24, r14
    3a3c:	b8 01       	movw	r22, r16
    3a3e:	ae 01       	movw	r20, r28
    3a40:	47 5e       	subi	r20, 0xE7	; 231
    3a42:	5f 4f       	sbci	r21, 0xFF	; 255
    3a44:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_fpadd_parts>
    3a48:	0e 94 17 21 	call	0x422e	; 0x422e <__pack_f>
    3a4c:	a0 96       	adiw	r28, 0x20	; 32
    3a4e:	e6 e0       	ldi	r30, 0x06	; 6
    3a50:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__epilogue_restores__+0x18>

00003a54 <__subsf3>:
    3a54:	a0 e2       	ldi	r26, 0x20	; 32
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	e0 e3       	ldi	r30, 0x30	; 48
    3a5a:	fd e1       	ldi	r31, 0x1D	; 29
    3a5c:	0c 94 16 23 	jmp	0x462c	; 0x462c <__prologue_saves__+0x18>
    3a60:	69 83       	std	Y+1, r22	; 0x01
    3a62:	7a 83       	std	Y+2, r23	; 0x02
    3a64:	8b 83       	std	Y+3, r24	; 0x03
    3a66:	9c 83       	std	Y+4, r25	; 0x04
    3a68:	2d 83       	std	Y+5, r18	; 0x05
    3a6a:	3e 83       	std	Y+6, r19	; 0x06
    3a6c:	4f 83       	std	Y+7, r20	; 0x07
    3a6e:	58 87       	std	Y+8, r21	; 0x08
    3a70:	8e 01       	movw	r16, r28
    3a72:	07 5f       	subi	r16, 0xF7	; 247
    3a74:	1f 4f       	sbci	r17, 0xFF	; 255
    3a76:	ce 01       	movw	r24, r28
    3a78:	01 96       	adiw	r24, 0x01	; 1
    3a7a:	b8 01       	movw	r22, r16
    3a7c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3a80:	91 e1       	ldi	r25, 0x11	; 17
    3a82:	e9 2e       	mov	r14, r25
    3a84:	f1 2c       	mov	r15, r1
    3a86:	ec 0e       	add	r14, r28
    3a88:	fd 1e       	adc	r15, r29
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	05 96       	adiw	r24, 0x05	; 5
    3a8e:	b7 01       	movw	r22, r14
    3a90:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3a94:	8a 89       	ldd	r24, Y+18	; 0x12
    3a96:	91 e0       	ldi	r25, 0x01	; 1
    3a98:	89 27       	eor	r24, r25
    3a9a:	8a 8b       	std	Y+18, r24	; 0x12
    3a9c:	c8 01       	movw	r24, r16
    3a9e:	b7 01       	movw	r22, r14
    3aa0:	ae 01       	movw	r20, r28
    3aa2:	47 5e       	subi	r20, 0xE7	; 231
    3aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    3aa6:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_fpadd_parts>
    3aaa:	0e 94 17 21 	call	0x422e	; 0x422e <__pack_f>
    3aae:	a0 96       	adiw	r28, 0x20	; 32
    3ab0:	e6 e0       	ldi	r30, 0x06	; 6
    3ab2:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__epilogue_restores__+0x18>

00003ab6 <__mulsf3>:
    3ab6:	a0 e2       	ldi	r26, 0x20	; 32
    3ab8:	b0 e0       	ldi	r27, 0x00	; 0
    3aba:	e1 e6       	ldi	r30, 0x61	; 97
    3abc:	fd e1       	ldi	r31, 0x1D	; 29
    3abe:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <__prologue_saves__>
    3ac2:	69 83       	std	Y+1, r22	; 0x01
    3ac4:	7a 83       	std	Y+2, r23	; 0x02
    3ac6:	8b 83       	std	Y+3, r24	; 0x03
    3ac8:	9c 83       	std	Y+4, r25	; 0x04
    3aca:	2d 83       	std	Y+5, r18	; 0x05
    3acc:	3e 83       	std	Y+6, r19	; 0x06
    3ace:	4f 83       	std	Y+7, r20	; 0x07
    3ad0:	58 87       	std	Y+8, r21	; 0x08
    3ad2:	ce 01       	movw	r24, r28
    3ad4:	01 96       	adiw	r24, 0x01	; 1
    3ad6:	be 01       	movw	r22, r28
    3ad8:	67 5f       	subi	r22, 0xF7	; 247
    3ada:	7f 4f       	sbci	r23, 0xFF	; 255
    3adc:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	05 96       	adiw	r24, 0x05	; 5
    3ae4:	be 01       	movw	r22, r28
    3ae6:	6f 5e       	subi	r22, 0xEF	; 239
    3ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    3aea:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3aee:	99 85       	ldd	r25, Y+9	; 0x09
    3af0:	92 30       	cpi	r25, 0x02	; 2
    3af2:	78 f0       	brcs	.+30     	; 0x3b12 <__mulsf3+0x5c>
    3af4:	89 89       	ldd	r24, Y+17	; 0x11
    3af6:	82 30       	cpi	r24, 0x02	; 2
    3af8:	c0 f0       	brcs	.+48     	; 0x3b2a <__mulsf3+0x74>
    3afa:	94 30       	cpi	r25, 0x04	; 4
    3afc:	19 f4       	brne	.+6      	; 0x3b04 <__mulsf3+0x4e>
    3afe:	82 30       	cpi	r24, 0x02	; 2
    3b00:	41 f4       	brne	.+16     	; 0x3b12 <__mulsf3+0x5c>
    3b02:	cb c0       	rjmp	.+406    	; 0x3c9a <__mulsf3+0x1e4>
    3b04:	84 30       	cpi	r24, 0x04	; 4
    3b06:	19 f4       	brne	.+6      	; 0x3b0e <__mulsf3+0x58>
    3b08:	92 30       	cpi	r25, 0x02	; 2
    3b0a:	79 f4       	brne	.+30     	; 0x3b2a <__mulsf3+0x74>
    3b0c:	c6 c0       	rjmp	.+396    	; 0x3c9a <__mulsf3+0x1e4>
    3b0e:	92 30       	cpi	r25, 0x02	; 2
    3b10:	51 f4       	brne	.+20     	; 0x3b26 <__mulsf3+0x70>
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b16:	9a 89       	ldd	r25, Y+18	; 0x12
    3b18:	29 17       	cp	r18, r25
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <__mulsf3+0x68>
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	8a 87       	std	Y+10, r24	; 0x0a
    3b20:	ce 01       	movw	r24, r28
    3b22:	09 96       	adiw	r24, 0x09	; 9
    3b24:	bc c0       	rjmp	.+376    	; 0x3c9e <__mulsf3+0x1e8>
    3b26:	82 30       	cpi	r24, 0x02	; 2
    3b28:	51 f4       	brne	.+20     	; 0x3b3e <__mulsf3+0x88>
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b2e:	9a 89       	ldd	r25, Y+18	; 0x12
    3b30:	29 17       	cp	r18, r25
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <__mulsf3+0x80>
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	8a 8b       	std	Y+18, r24	; 0x12
    3b38:	ce 01       	movw	r24, r28
    3b3a:	41 96       	adiw	r24, 0x11	; 17
    3b3c:	b0 c0       	rjmp	.+352    	; 0x3c9e <__mulsf3+0x1e8>
    3b3e:	6d 84       	ldd	r6, Y+13	; 0x0d
    3b40:	7e 84       	ldd	r7, Y+14	; 0x0e
    3b42:	8f 84       	ldd	r8, Y+15	; 0x0f
    3b44:	98 88       	ldd	r9, Y+16	; 0x10
    3b46:	ed 88       	ldd	r14, Y+21	; 0x15
    3b48:	fe 88       	ldd	r15, Y+22	; 0x16
    3b4a:	0f 89       	ldd	r16, Y+23	; 0x17
    3b4c:	18 8d       	ldd	r17, Y+24	; 0x18
    3b4e:	e0 e2       	ldi	r30, 0x20	; 32
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	dc 01       	movw	r26, r24
    3b58:	aa 24       	eor	r10, r10
    3b5a:	bb 24       	eor	r11, r11
    3b5c:	65 01       	movw	r12, r10
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	a9 01       	movw	r20, r18
    3b64:	b3 01       	movw	r22, r6
    3b66:	61 70       	andi	r22, 0x01	; 1
    3b68:	70 70       	andi	r23, 0x00	; 0
    3b6a:	61 15       	cp	r22, r1
    3b6c:	71 05       	cpc	r23, r1
    3b6e:	d1 f0       	breq	.+52     	; 0x3ba4 <__mulsf3+0xee>
    3b70:	2e 0d       	add	r18, r14
    3b72:	3f 1d       	adc	r19, r15
    3b74:	40 1f       	adc	r20, r16
    3b76:	51 1f       	adc	r21, r17
    3b78:	15 01       	movw	r2, r10
    3b7a:	26 01       	movw	r4, r12
    3b7c:	28 0e       	add	r2, r24
    3b7e:	39 1e       	adc	r3, r25
    3b80:	4a 1e       	adc	r4, r26
    3b82:	5b 1e       	adc	r5, r27
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	a0 e0       	ldi	r26, 0x00	; 0
    3b8a:	b0 e0       	ldi	r27, 0x00	; 0
    3b8c:	2e 15       	cp	r18, r14
    3b8e:	3f 05       	cpc	r19, r15
    3b90:	40 07       	cpc	r20, r16
    3b92:	51 07       	cpc	r21, r17
    3b94:	18 f0       	brcs	.+6      	; 0x3b9c <__mulsf3+0xe6>
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	82 0d       	add	r24, r2
    3b9e:	93 1d       	adc	r25, r3
    3ba0:	a4 1d       	adc	r26, r4
    3ba2:	b5 1d       	adc	r27, r5
    3ba4:	aa 0c       	add	r10, r10
    3ba6:	bb 1c       	adc	r11, r11
    3ba8:	cc 1c       	adc	r12, r12
    3baa:	dd 1c       	adc	r13, r13
    3bac:	17 ff       	sbrs	r17, 7
    3bae:	09 c0       	rjmp	.+18     	; 0x3bc2 <__mulsf3+0x10c>
    3bb0:	61 e0       	ldi	r22, 0x01	; 1
    3bb2:	26 2e       	mov	r2, r22
    3bb4:	31 2c       	mov	r3, r1
    3bb6:	41 2c       	mov	r4, r1
    3bb8:	51 2c       	mov	r5, r1
    3bba:	a2 28       	or	r10, r2
    3bbc:	b3 28       	or	r11, r3
    3bbe:	c4 28       	or	r12, r4
    3bc0:	d5 28       	or	r13, r5
    3bc2:	31 97       	sbiw	r30, 0x01	; 1
    3bc4:	49 f0       	breq	.+18     	; 0x3bd8 <__mulsf3+0x122>
    3bc6:	ee 0c       	add	r14, r14
    3bc8:	ff 1c       	adc	r15, r15
    3bca:	00 1f       	adc	r16, r16
    3bcc:	11 1f       	adc	r17, r17
    3bce:	96 94       	lsr	r9
    3bd0:	87 94       	ror	r8
    3bd2:	77 94       	ror	r7
    3bd4:	67 94       	ror	r6
    3bd6:	c6 cf       	rjmp	.-116    	; 0x3b64 <__mulsf3+0xae>
    3bd8:	6b 89       	ldd	r22, Y+19	; 0x13
    3bda:	7c 89       	ldd	r23, Y+20	; 0x14
    3bdc:	eb 85       	ldd	r30, Y+11	; 0x0b
    3bde:	fc 85       	ldd	r31, Y+12	; 0x0c
    3be0:	6e 0f       	add	r22, r30
    3be2:	7f 1f       	adc	r23, r31
    3be4:	6e 5f       	subi	r22, 0xFE	; 254
    3be6:	7f 4f       	sbci	r23, 0xFF	; 255
    3be8:	7c 8f       	std	Y+28, r23	; 0x1c
    3bea:	6b 8f       	std	Y+27, r22	; 0x1b
    3bec:	61 e0       	ldi	r22, 0x01	; 1
    3bee:	ea 85       	ldd	r30, Y+10	; 0x0a
    3bf0:	7a 89       	ldd	r23, Y+18	; 0x12
    3bf2:	e7 17       	cp	r30, r23
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <__mulsf3+0x142>
    3bf6:	60 e0       	ldi	r22, 0x00	; 0
    3bf8:	6a 8f       	std	Y+26, r22	; 0x1a
    3bfa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3bfc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3bfe:	10 c0       	rjmp	.+32     	; 0x3c20 <__mulsf3+0x16a>
    3c00:	fc 01       	movw	r30, r24
    3c02:	e1 70       	andi	r30, 0x01	; 1
    3c04:	f0 70       	andi	r31, 0x00	; 0
    3c06:	30 97       	sbiw	r30, 0x00	; 0
    3c08:	29 f0       	breq	.+10     	; 0x3c14 <__mulsf3+0x15e>
    3c0a:	56 95       	lsr	r21
    3c0c:	47 95       	ror	r20
    3c0e:	37 95       	ror	r19
    3c10:	27 95       	ror	r18
    3c12:	50 68       	ori	r21, 0x80	; 128
    3c14:	b6 95       	lsr	r27
    3c16:	a7 95       	ror	r26
    3c18:	97 95       	ror	r25
    3c1a:	87 95       	ror	r24
    3c1c:	6f 5f       	subi	r22, 0xFF	; 255
    3c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c20:	b7 fd       	sbrc	r27, 7
    3c22:	ee cf       	rjmp	.-36     	; 0x3c00 <__mulsf3+0x14a>
    3c24:	0c c0       	rjmp	.+24     	; 0x3c3e <__mulsf3+0x188>
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	aa 1f       	adc	r26, r26
    3c2c:	bb 1f       	adc	r27, r27
    3c2e:	57 fd       	sbrc	r21, 7
    3c30:	81 60       	ori	r24, 0x01	; 1
    3c32:	22 0f       	add	r18, r18
    3c34:	33 1f       	adc	r19, r19
    3c36:	44 1f       	adc	r20, r20
    3c38:	55 1f       	adc	r21, r21
    3c3a:	61 50       	subi	r22, 0x01	; 1
    3c3c:	70 40       	sbci	r23, 0x00	; 0
    3c3e:	80 30       	cpi	r24, 0x00	; 0
    3c40:	e0 e0       	ldi	r30, 0x00	; 0
    3c42:	9e 07       	cpc	r25, r30
    3c44:	e0 e0       	ldi	r30, 0x00	; 0
    3c46:	ae 07       	cpc	r26, r30
    3c48:	e0 e4       	ldi	r30, 0x40	; 64
    3c4a:	be 07       	cpc	r27, r30
    3c4c:	60 f3       	brcs	.-40     	; 0x3c26 <__mulsf3+0x170>
    3c4e:	6b 8f       	std	Y+27, r22	; 0x1b
    3c50:	7c 8f       	std	Y+28, r23	; 0x1c
    3c52:	6f e7       	ldi	r22, 0x7F	; 127
    3c54:	e6 2e       	mov	r14, r22
    3c56:	f1 2c       	mov	r15, r1
    3c58:	01 2d       	mov	r16, r1
    3c5a:	11 2d       	mov	r17, r1
    3c5c:	e8 22       	and	r14, r24
    3c5e:	f9 22       	and	r15, r25
    3c60:	0a 23       	and	r16, r26
    3c62:	1b 23       	and	r17, r27
    3c64:	60 e4       	ldi	r22, 0x40	; 64
    3c66:	e6 16       	cp	r14, r22
    3c68:	f1 04       	cpc	r15, r1
    3c6a:	01 05       	cpc	r16, r1
    3c6c:	11 05       	cpc	r17, r1
    3c6e:	61 f4       	brne	.+24     	; 0x3c88 <__mulsf3+0x1d2>
    3c70:	87 fd       	sbrc	r24, 7
    3c72:	0a c0       	rjmp	.+20     	; 0x3c88 <__mulsf3+0x1d2>
    3c74:	21 15       	cp	r18, r1
    3c76:	31 05       	cpc	r19, r1
    3c78:	41 05       	cpc	r20, r1
    3c7a:	51 05       	cpc	r21, r1
    3c7c:	29 f0       	breq	.+10     	; 0x3c88 <__mulsf3+0x1d2>
    3c7e:	80 5c       	subi	r24, 0xC0	; 192
    3c80:	9f 4f       	sbci	r25, 0xFF	; 255
    3c82:	af 4f       	sbci	r26, 0xFF	; 255
    3c84:	bf 4f       	sbci	r27, 0xFF	; 255
    3c86:	80 78       	andi	r24, 0x80	; 128
    3c88:	8d 8f       	std	Y+29, r24	; 0x1d
    3c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c8c:	af 8f       	std	Y+31, r26	; 0x1f
    3c8e:	b8 a3       	std	Y+32, r27	; 0x20
    3c90:	83 e0       	ldi	r24, 0x03	; 3
    3c92:	89 8f       	std	Y+25, r24	; 0x19
    3c94:	ce 01       	movw	r24, r28
    3c96:	49 96       	adiw	r24, 0x19	; 25
    3c98:	02 c0       	rjmp	.+4      	; 0x3c9e <__mulsf3+0x1e8>
    3c9a:	85 e1       	ldi	r24, 0x15	; 21
    3c9c:	91 e0       	ldi	r25, 0x01	; 1
    3c9e:	0e 94 17 21 	call	0x422e	; 0x422e <__pack_f>
    3ca2:	a0 96       	adiw	r28, 0x20	; 32
    3ca4:	e2 e1       	ldi	r30, 0x12	; 18
    3ca6:	0c 94 26 23 	jmp	0x464c	; 0x464c <__epilogue_restores__>

00003caa <__divsf3>:
    3caa:	a8 e1       	ldi	r26, 0x18	; 24
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	eb e5       	ldi	r30, 0x5B	; 91
    3cb0:	fe e1       	ldi	r31, 0x1E	; 30
    3cb2:	0c 94 12 23 	jmp	0x4624	; 0x4624 <__prologue_saves__+0x10>
    3cb6:	69 83       	std	Y+1, r22	; 0x01
    3cb8:	7a 83       	std	Y+2, r23	; 0x02
    3cba:	8b 83       	std	Y+3, r24	; 0x03
    3cbc:	9c 83       	std	Y+4, r25	; 0x04
    3cbe:	2d 83       	std	Y+5, r18	; 0x05
    3cc0:	3e 83       	std	Y+6, r19	; 0x06
    3cc2:	4f 83       	std	Y+7, r20	; 0x07
    3cc4:	58 87       	std	Y+8, r21	; 0x08
    3cc6:	8e 01       	movw	r16, r28
    3cc8:	07 5f       	subi	r16, 0xF7	; 247
    3cca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ccc:	ce 01       	movw	r24, r28
    3cce:	01 96       	adiw	r24, 0x01	; 1
    3cd0:	b8 01       	movw	r22, r16
    3cd2:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3cd6:	81 e1       	ldi	r24, 0x11	; 17
    3cd8:	e8 2e       	mov	r14, r24
    3cda:	f1 2c       	mov	r15, r1
    3cdc:	ec 0e       	add	r14, r28
    3cde:	fd 1e       	adc	r15, r29
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	05 96       	adiw	r24, 0x05	; 5
    3ce4:	b7 01       	movw	r22, r14
    3ce6:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3cea:	99 85       	ldd	r25, Y+9	; 0x09
    3cec:	92 30       	cpi	r25, 0x02	; 2
    3cee:	08 f4       	brcc	.+2      	; 0x3cf2 <__divsf3+0x48>
    3cf0:	83 c0       	rjmp	.+262    	; 0x3df8 <__divsf3+0x14e>
    3cf2:	89 89       	ldd	r24, Y+17	; 0x11
    3cf4:	82 30       	cpi	r24, 0x02	; 2
    3cf6:	08 f4       	brcc	.+2      	; 0x3cfa <__divsf3+0x50>
    3cf8:	7b c0       	rjmp	.+246    	; 0x3df0 <__divsf3+0x146>
    3cfa:	2a 85       	ldd	r18, Y+10	; 0x0a
    3cfc:	3a 89       	ldd	r19, Y+18	; 0x12
    3cfe:	23 27       	eor	r18, r19
    3d00:	2a 87       	std	Y+10, r18	; 0x0a
    3d02:	94 30       	cpi	r25, 0x04	; 4
    3d04:	11 f0       	breq	.+4      	; 0x3d0a <__divsf3+0x60>
    3d06:	92 30       	cpi	r25, 0x02	; 2
    3d08:	21 f4       	brne	.+8      	; 0x3d12 <__divsf3+0x68>
    3d0a:	98 17       	cp	r25, r24
    3d0c:	09 f0       	breq	.+2      	; 0x3d10 <__divsf3+0x66>
    3d0e:	6c c0       	rjmp	.+216    	; 0x3de8 <__divsf3+0x13e>
    3d10:	71 c0       	rjmp	.+226    	; 0x3df4 <__divsf3+0x14a>
    3d12:	84 30       	cpi	r24, 0x04	; 4
    3d14:	39 f4       	brne	.+14     	; 0x3d24 <__divsf3+0x7a>
    3d16:	1d 86       	std	Y+13, r1	; 0x0d
    3d18:	1e 86       	std	Y+14, r1	; 0x0e
    3d1a:	1f 86       	std	Y+15, r1	; 0x0f
    3d1c:	18 8a       	std	Y+16, r1	; 0x10
    3d1e:	1c 86       	std	Y+12, r1	; 0x0c
    3d20:	1b 86       	std	Y+11, r1	; 0x0b
    3d22:	6a c0       	rjmp	.+212    	; 0x3df8 <__divsf3+0x14e>
    3d24:	82 30       	cpi	r24, 0x02	; 2
    3d26:	19 f4       	brne	.+6      	; 0x3d2e <__divsf3+0x84>
    3d28:	84 e0       	ldi	r24, 0x04	; 4
    3d2a:	89 87       	std	Y+9, r24	; 0x09
    3d2c:	65 c0       	rjmp	.+202    	; 0x3df8 <__divsf3+0x14e>
    3d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d30:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d32:	2b 89       	ldd	r18, Y+19	; 0x13
    3d34:	3c 89       	ldd	r19, Y+20	; 0x14
    3d36:	82 1b       	sub	r24, r18
    3d38:	93 0b       	sbc	r25, r19
    3d3a:	9c 87       	std	Y+12, r25	; 0x0c
    3d3c:	8b 87       	std	Y+11, r24	; 0x0b
    3d3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d40:	3e 85       	ldd	r19, Y+14	; 0x0e
    3d42:	4f 85       	ldd	r20, Y+15	; 0x0f
    3d44:	58 89       	ldd	r21, Y+16	; 0x10
    3d46:	ed 88       	ldd	r14, Y+21	; 0x15
    3d48:	fe 88       	ldd	r15, Y+22	; 0x16
    3d4a:	0f 89       	ldd	r16, Y+23	; 0x17
    3d4c:	18 8d       	ldd	r17, Y+24	; 0x18
    3d4e:	2e 15       	cp	r18, r14
    3d50:	3f 05       	cpc	r19, r15
    3d52:	40 07       	cpc	r20, r16
    3d54:	51 07       	cpc	r21, r17
    3d56:	38 f4       	brcc	.+14     	; 0x3d66 <__divsf3+0xbc>
    3d58:	22 0f       	add	r18, r18
    3d5a:	33 1f       	adc	r19, r19
    3d5c:	44 1f       	adc	r20, r20
    3d5e:	55 1f       	adc	r21, r21
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	9c 87       	std	Y+12, r25	; 0x0c
    3d64:	8b 87       	std	Y+11, r24	; 0x0b
    3d66:	6f e1       	ldi	r22, 0x1F	; 31
    3d68:	70 e0       	ldi	r23, 0x00	; 0
    3d6a:	a1 2c       	mov	r10, r1
    3d6c:	b1 2c       	mov	r11, r1
    3d6e:	c1 2c       	mov	r12, r1
    3d70:	a0 e4       	ldi	r26, 0x40	; 64
    3d72:	da 2e       	mov	r13, r26
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	dc 01       	movw	r26, r24
    3d7a:	2e 15       	cp	r18, r14
    3d7c:	3f 05       	cpc	r19, r15
    3d7e:	40 07       	cpc	r20, r16
    3d80:	51 07       	cpc	r21, r17
    3d82:	40 f0       	brcs	.+16     	; 0x3d94 <__divsf3+0xea>
    3d84:	8a 29       	or	r24, r10
    3d86:	9b 29       	or	r25, r11
    3d88:	ac 29       	or	r26, r12
    3d8a:	bd 29       	or	r27, r13
    3d8c:	2e 19       	sub	r18, r14
    3d8e:	3f 09       	sbc	r19, r15
    3d90:	40 0b       	sbc	r20, r16
    3d92:	51 0b       	sbc	r21, r17
    3d94:	d6 94       	lsr	r13
    3d96:	c7 94       	ror	r12
    3d98:	b7 94       	ror	r11
    3d9a:	a7 94       	ror	r10
    3d9c:	22 0f       	add	r18, r18
    3d9e:	33 1f       	adc	r19, r19
    3da0:	44 1f       	adc	r20, r20
    3da2:	55 1f       	adc	r21, r21
    3da4:	61 50       	subi	r22, 0x01	; 1
    3da6:	70 40       	sbci	r23, 0x00	; 0
    3da8:	41 f7       	brne	.-48     	; 0x3d7a <__divsf3+0xd0>
    3daa:	6f e7       	ldi	r22, 0x7F	; 127
    3dac:	e6 2e       	mov	r14, r22
    3dae:	f1 2c       	mov	r15, r1
    3db0:	01 2d       	mov	r16, r1
    3db2:	11 2d       	mov	r17, r1
    3db4:	e8 22       	and	r14, r24
    3db6:	f9 22       	and	r15, r25
    3db8:	0a 23       	and	r16, r26
    3dba:	1b 23       	and	r17, r27
    3dbc:	60 e4       	ldi	r22, 0x40	; 64
    3dbe:	e6 16       	cp	r14, r22
    3dc0:	f1 04       	cpc	r15, r1
    3dc2:	01 05       	cpc	r16, r1
    3dc4:	11 05       	cpc	r17, r1
    3dc6:	61 f4       	brne	.+24     	; 0x3de0 <__divsf3+0x136>
    3dc8:	87 fd       	sbrc	r24, 7
    3dca:	0a c0       	rjmp	.+20     	; 0x3de0 <__divsf3+0x136>
    3dcc:	21 15       	cp	r18, r1
    3dce:	31 05       	cpc	r19, r1
    3dd0:	41 05       	cpc	r20, r1
    3dd2:	51 05       	cpc	r21, r1
    3dd4:	29 f0       	breq	.+10     	; 0x3de0 <__divsf3+0x136>
    3dd6:	80 5c       	subi	r24, 0xC0	; 192
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	af 4f       	sbci	r26, 0xFF	; 255
    3ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dde:	80 78       	andi	r24, 0x80	; 128
    3de0:	8d 87       	std	Y+13, r24	; 0x0d
    3de2:	9e 87       	std	Y+14, r25	; 0x0e
    3de4:	af 87       	std	Y+15, r26	; 0x0f
    3de6:	b8 8b       	std	Y+16, r27	; 0x10
    3de8:	8e 01       	movw	r16, r28
    3dea:	07 5f       	subi	r16, 0xF7	; 247
    3dec:	1f 4f       	sbci	r17, 0xFF	; 255
    3dee:	04 c0       	rjmp	.+8      	; 0x3df8 <__divsf3+0x14e>
    3df0:	87 01       	movw	r16, r14
    3df2:	02 c0       	rjmp	.+4      	; 0x3df8 <__divsf3+0x14e>
    3df4:	05 e1       	ldi	r16, 0x15	; 21
    3df6:	11 e0       	ldi	r17, 0x01	; 1
    3df8:	c8 01       	movw	r24, r16
    3dfa:	0e 94 17 21 	call	0x422e	; 0x422e <__pack_f>
    3dfe:	68 96       	adiw	r28, 0x18	; 24
    3e00:	ea e0       	ldi	r30, 0x0A	; 10
    3e02:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__epilogue_restores__+0x10>

00003e06 <__gtsf2>:
    3e06:	a8 e1       	ldi	r26, 0x18	; 24
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	e9 e0       	ldi	r30, 0x09	; 9
    3e0c:	ff e1       	ldi	r31, 0x1F	; 31
    3e0e:	0c 94 16 23 	jmp	0x462c	; 0x462c <__prologue_saves__+0x18>
    3e12:	69 83       	std	Y+1, r22	; 0x01
    3e14:	7a 83       	std	Y+2, r23	; 0x02
    3e16:	8b 83       	std	Y+3, r24	; 0x03
    3e18:	9c 83       	std	Y+4, r25	; 0x04
    3e1a:	2d 83       	std	Y+5, r18	; 0x05
    3e1c:	3e 83       	std	Y+6, r19	; 0x06
    3e1e:	4f 83       	std	Y+7, r20	; 0x07
    3e20:	58 87       	std	Y+8, r21	; 0x08
    3e22:	8e 01       	movw	r16, r28
    3e24:	07 5f       	subi	r16, 0xF7	; 247
    3e26:	1f 4f       	sbci	r17, 0xFF	; 255
    3e28:	ce 01       	movw	r24, r28
    3e2a:	01 96       	adiw	r24, 0x01	; 1
    3e2c:	b8 01       	movw	r22, r16
    3e2e:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3e32:	81 e1       	ldi	r24, 0x11	; 17
    3e34:	e8 2e       	mov	r14, r24
    3e36:	f1 2c       	mov	r15, r1
    3e38:	ec 0e       	add	r14, r28
    3e3a:	fd 1e       	adc	r15, r29
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	05 96       	adiw	r24, 0x05	; 5
    3e40:	b7 01       	movw	r22, r14
    3e42:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3e46:	89 85       	ldd	r24, Y+9	; 0x09
    3e48:	82 30       	cpi	r24, 0x02	; 2
    3e4a:	40 f0       	brcs	.+16     	; 0x3e5c <__gtsf2+0x56>
    3e4c:	89 89       	ldd	r24, Y+17	; 0x11
    3e4e:	82 30       	cpi	r24, 0x02	; 2
    3e50:	28 f0       	brcs	.+10     	; 0x3e5c <__gtsf2+0x56>
    3e52:	c8 01       	movw	r24, r16
    3e54:	b7 01       	movw	r22, r14
    3e56:	0e 94 4d 22 	call	0x449a	; 0x449a <__fpcmp_parts_f>
    3e5a:	01 c0       	rjmp	.+2      	; 0x3e5e <__gtsf2+0x58>
    3e5c:	8f ef       	ldi	r24, 0xFF	; 255
    3e5e:	68 96       	adiw	r28, 0x18	; 24
    3e60:	e6 e0       	ldi	r30, 0x06	; 6
    3e62:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__epilogue_restores__+0x18>

00003e66 <__gesf2>:
    3e66:	a8 e1       	ldi	r26, 0x18	; 24
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	e9 e3       	ldi	r30, 0x39	; 57
    3e6c:	ff e1       	ldi	r31, 0x1F	; 31
    3e6e:	0c 94 16 23 	jmp	0x462c	; 0x462c <__prologue_saves__+0x18>
    3e72:	69 83       	std	Y+1, r22	; 0x01
    3e74:	7a 83       	std	Y+2, r23	; 0x02
    3e76:	8b 83       	std	Y+3, r24	; 0x03
    3e78:	9c 83       	std	Y+4, r25	; 0x04
    3e7a:	2d 83       	std	Y+5, r18	; 0x05
    3e7c:	3e 83       	std	Y+6, r19	; 0x06
    3e7e:	4f 83       	std	Y+7, r20	; 0x07
    3e80:	58 87       	std	Y+8, r21	; 0x08
    3e82:	8e 01       	movw	r16, r28
    3e84:	07 5f       	subi	r16, 0xF7	; 247
    3e86:	1f 4f       	sbci	r17, 0xFF	; 255
    3e88:	ce 01       	movw	r24, r28
    3e8a:	01 96       	adiw	r24, 0x01	; 1
    3e8c:	b8 01       	movw	r22, r16
    3e8e:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3e92:	81 e1       	ldi	r24, 0x11	; 17
    3e94:	e8 2e       	mov	r14, r24
    3e96:	f1 2c       	mov	r15, r1
    3e98:	ec 0e       	add	r14, r28
    3e9a:	fd 1e       	adc	r15, r29
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	05 96       	adiw	r24, 0x05	; 5
    3ea0:	b7 01       	movw	r22, r14
    3ea2:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3ea6:	89 85       	ldd	r24, Y+9	; 0x09
    3ea8:	82 30       	cpi	r24, 0x02	; 2
    3eaa:	40 f0       	brcs	.+16     	; 0x3ebc <__gesf2+0x56>
    3eac:	89 89       	ldd	r24, Y+17	; 0x11
    3eae:	82 30       	cpi	r24, 0x02	; 2
    3eb0:	28 f0       	brcs	.+10     	; 0x3ebc <__gesf2+0x56>
    3eb2:	c8 01       	movw	r24, r16
    3eb4:	b7 01       	movw	r22, r14
    3eb6:	0e 94 4d 22 	call	0x449a	; 0x449a <__fpcmp_parts_f>
    3eba:	01 c0       	rjmp	.+2      	; 0x3ebe <__gesf2+0x58>
    3ebc:	8f ef       	ldi	r24, 0xFF	; 255
    3ebe:	68 96       	adiw	r28, 0x18	; 24
    3ec0:	e6 e0       	ldi	r30, 0x06	; 6
    3ec2:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__epilogue_restores__+0x18>

00003ec6 <__ltsf2>:
    3ec6:	a8 e1       	ldi	r26, 0x18	; 24
    3ec8:	b0 e0       	ldi	r27, 0x00	; 0
    3eca:	e9 e6       	ldi	r30, 0x69	; 105
    3ecc:	ff e1       	ldi	r31, 0x1F	; 31
    3ece:	0c 94 16 23 	jmp	0x462c	; 0x462c <__prologue_saves__+0x18>
    3ed2:	69 83       	std	Y+1, r22	; 0x01
    3ed4:	7a 83       	std	Y+2, r23	; 0x02
    3ed6:	8b 83       	std	Y+3, r24	; 0x03
    3ed8:	9c 83       	std	Y+4, r25	; 0x04
    3eda:	2d 83       	std	Y+5, r18	; 0x05
    3edc:	3e 83       	std	Y+6, r19	; 0x06
    3ede:	4f 83       	std	Y+7, r20	; 0x07
    3ee0:	58 87       	std	Y+8, r21	; 0x08
    3ee2:	8e 01       	movw	r16, r28
    3ee4:	07 5f       	subi	r16, 0xF7	; 247
    3ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee8:	ce 01       	movw	r24, r28
    3eea:	01 96       	adiw	r24, 0x01	; 1
    3eec:	b8 01       	movw	r22, r16
    3eee:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3ef2:	81 e1       	ldi	r24, 0x11	; 17
    3ef4:	e8 2e       	mov	r14, r24
    3ef6:	f1 2c       	mov	r15, r1
    3ef8:	ec 0e       	add	r14, r28
    3efa:	fd 1e       	adc	r15, r29
    3efc:	ce 01       	movw	r24, r28
    3efe:	05 96       	adiw	r24, 0x05	; 5
    3f00:	b7 01       	movw	r22, r14
    3f02:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    3f06:	89 85       	ldd	r24, Y+9	; 0x09
    3f08:	82 30       	cpi	r24, 0x02	; 2
    3f0a:	40 f0       	brcs	.+16     	; 0x3f1c <__ltsf2+0x56>
    3f0c:	89 89       	ldd	r24, Y+17	; 0x11
    3f0e:	82 30       	cpi	r24, 0x02	; 2
    3f10:	28 f0       	brcs	.+10     	; 0x3f1c <__ltsf2+0x56>
    3f12:	c8 01       	movw	r24, r16
    3f14:	b7 01       	movw	r22, r14
    3f16:	0e 94 4d 22 	call	0x449a	; 0x449a <__fpcmp_parts_f>
    3f1a:	01 c0       	rjmp	.+2      	; 0x3f1e <__ltsf2+0x58>
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	68 96       	adiw	r28, 0x18	; 24
    3f20:	e6 e0       	ldi	r30, 0x06	; 6
    3f22:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__epilogue_restores__+0x18>

00003f26 <__floatsisf>:
    3f26:	a8 e0       	ldi	r26, 0x08	; 8
    3f28:	b0 e0       	ldi	r27, 0x00	; 0
    3f2a:	e9 e9       	ldi	r30, 0x99	; 153
    3f2c:	ff e1       	ldi	r31, 0x1F	; 31
    3f2e:	0c 94 16 23 	jmp	0x462c	; 0x462c <__prologue_saves__+0x18>
    3f32:	7b 01       	movw	r14, r22
    3f34:	8c 01       	movw	r16, r24
    3f36:	83 e0       	ldi	r24, 0x03	; 3
    3f38:	89 83       	std	Y+1, r24	; 0x01
    3f3a:	d8 01       	movw	r26, r16
    3f3c:	c7 01       	movw	r24, r14
    3f3e:	88 27       	eor	r24, r24
    3f40:	b7 fd       	sbrc	r27, 7
    3f42:	83 95       	inc	r24
    3f44:	99 27       	eor	r25, r25
    3f46:	aa 27       	eor	r26, r26
    3f48:	bb 27       	eor	r27, r27
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	8a 83       	std	Y+2, r24	; 0x02
    3f4e:	e1 14       	cp	r14, r1
    3f50:	f1 04       	cpc	r15, r1
    3f52:	01 05       	cpc	r16, r1
    3f54:	11 05       	cpc	r17, r1
    3f56:	19 f4       	brne	.+6      	; 0x3f5e <__floatsisf+0x38>
    3f58:	82 e0       	ldi	r24, 0x02	; 2
    3f5a:	89 83       	std	Y+1, r24	; 0x01
    3f5c:	37 c0       	rjmp	.+110    	; 0x3fcc <__floatsisf+0xa6>
    3f5e:	8e e1       	ldi	r24, 0x1E	; 30
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	9c 83       	std	Y+4, r25	; 0x04
    3f64:	8b 83       	std	Y+3, r24	; 0x03
    3f66:	22 23       	and	r18, r18
    3f68:	89 f0       	breq	.+34     	; 0x3f8c <__floatsisf+0x66>
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	e8 16       	cp	r14, r24
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	f8 06       	cpc	r15, r24
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	08 07       	cpc	r16, r24
    3f76:	80 e8       	ldi	r24, 0x80	; 128
    3f78:	18 07       	cpc	r17, r24
    3f7a:	69 f1       	breq	.+90     	; 0x3fd6 <__floatsisf+0xb0>
    3f7c:	10 95       	com	r17
    3f7e:	00 95       	com	r16
    3f80:	f0 94       	com	r15
    3f82:	e0 94       	com	r14
    3f84:	e1 1c       	adc	r14, r1
    3f86:	f1 1c       	adc	r15, r1
    3f88:	01 1d       	adc	r16, r1
    3f8a:	11 1d       	adc	r17, r1
    3f8c:	ed 82       	std	Y+5, r14	; 0x05
    3f8e:	fe 82       	std	Y+6, r15	; 0x06
    3f90:	0f 83       	std	Y+7, r16	; 0x07
    3f92:	18 87       	std	Y+8, r17	; 0x08
    3f94:	c8 01       	movw	r24, r16
    3f96:	b7 01       	movw	r22, r14
    3f98:	0e 94 bd 20 	call	0x417a	; 0x417a <__clzsi2>
    3f9c:	9c 01       	movw	r18, r24
    3f9e:	21 50       	subi	r18, 0x01	; 1
    3fa0:	30 40       	sbci	r19, 0x00	; 0
    3fa2:	12 16       	cp	r1, r18
    3fa4:	13 06       	cpc	r1, r19
    3fa6:	94 f4       	brge	.+36     	; 0x3fcc <__floatsisf+0xa6>
    3fa8:	02 2e       	mov	r0, r18
    3faa:	04 c0       	rjmp	.+8      	; 0x3fb4 <__floatsisf+0x8e>
    3fac:	ee 0c       	add	r14, r14
    3fae:	ff 1c       	adc	r15, r15
    3fb0:	00 1f       	adc	r16, r16
    3fb2:	11 1f       	adc	r17, r17
    3fb4:	0a 94       	dec	r0
    3fb6:	d2 f7       	brpl	.-12     	; 0x3fac <__floatsisf+0x86>
    3fb8:	ed 82       	std	Y+5, r14	; 0x05
    3fba:	fe 82       	std	Y+6, r15	; 0x06
    3fbc:	0f 83       	std	Y+7, r16	; 0x07
    3fbe:	18 87       	std	Y+8, r17	; 0x08
    3fc0:	8e e1       	ldi	r24, 0x1E	; 30
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	82 1b       	sub	r24, r18
    3fc6:	93 0b       	sbc	r25, r19
    3fc8:	9c 83       	std	Y+4, r25	; 0x04
    3fca:	8b 83       	std	Y+3, r24	; 0x03
    3fcc:	ce 01       	movw	r24, r28
    3fce:	01 96       	adiw	r24, 0x01	; 1
    3fd0:	0e 94 17 21 	call	0x422e	; 0x422e <__pack_f>
    3fd4:	04 c0       	rjmp	.+8      	; 0x3fde <__floatsisf+0xb8>
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	9f ec       	ldi	r25, 0xCF	; 207
    3fde:	28 96       	adiw	r28, 0x08	; 8
    3fe0:	e6 e0       	ldi	r30, 0x06	; 6
    3fe2:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__epilogue_restores__+0x18>

00003fe6 <__fixsfsi>:
    3fe6:	ac e0       	ldi	r26, 0x0C	; 12
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	e9 ef       	ldi	r30, 0xF9	; 249
    3fec:	ff e1       	ldi	r31, 0x1F	; 31
    3fee:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__prologue_saves__+0x20>
    3ff2:	69 83       	std	Y+1, r22	; 0x01
    3ff4:	7a 83       	std	Y+2, r23	; 0x02
    3ff6:	8b 83       	std	Y+3, r24	; 0x03
    3ff8:	9c 83       	std	Y+4, r25	; 0x04
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	01 96       	adiw	r24, 0x01	; 1
    3ffe:	be 01       	movw	r22, r28
    4000:	6b 5f       	subi	r22, 0xFB	; 251
    4002:	7f 4f       	sbci	r23, 0xFF	; 255
    4004:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__unpack_f>
    4008:	8d 81       	ldd	r24, Y+5	; 0x05
    400a:	82 30       	cpi	r24, 0x02	; 2
    400c:	81 f1       	breq	.+96     	; 0x406e <__fixsfsi+0x88>
    400e:	82 30       	cpi	r24, 0x02	; 2
    4010:	70 f1       	brcs	.+92     	; 0x406e <__fixsfsi+0x88>
    4012:	84 30       	cpi	r24, 0x04	; 4
    4014:	21 f4       	brne	.+8      	; 0x401e <__fixsfsi+0x38>
    4016:	8e 81       	ldd	r24, Y+6	; 0x06
    4018:	88 23       	and	r24, r24
    401a:	69 f1       	breq	.+90     	; 0x4076 <__fixsfsi+0x90>
    401c:	0a c0       	rjmp	.+20     	; 0x4032 <__fixsfsi+0x4c>
    401e:	2f 81       	ldd	r18, Y+7	; 0x07
    4020:	38 85       	ldd	r19, Y+8	; 0x08
    4022:	37 fd       	sbrc	r19, 7
    4024:	24 c0       	rjmp	.+72     	; 0x406e <__fixsfsi+0x88>
    4026:	6e 81       	ldd	r22, Y+6	; 0x06
    4028:	2f 31       	cpi	r18, 0x1F	; 31
    402a:	31 05       	cpc	r19, r1
    402c:	3c f0       	brlt	.+14     	; 0x403c <__fixsfsi+0x56>
    402e:	66 23       	and	r22, r22
    4030:	11 f1       	breq	.+68     	; 0x4076 <__fixsfsi+0x90>
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e0       	ldi	r20, 0x00	; 0
    4038:	50 e8       	ldi	r21, 0x80	; 128
    403a:	21 c0       	rjmp	.+66     	; 0x407e <__fixsfsi+0x98>
    403c:	8e e1       	ldi	r24, 0x1E	; 30
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	82 1b       	sub	r24, r18
    4042:	93 0b       	sbc	r25, r19
    4044:	29 85       	ldd	r18, Y+9	; 0x09
    4046:	3a 85       	ldd	r19, Y+10	; 0x0a
    4048:	4b 85       	ldd	r20, Y+11	; 0x0b
    404a:	5c 85       	ldd	r21, Y+12	; 0x0c
    404c:	04 c0       	rjmp	.+8      	; 0x4056 <__fixsfsi+0x70>
    404e:	56 95       	lsr	r21
    4050:	47 95       	ror	r20
    4052:	37 95       	ror	r19
    4054:	27 95       	ror	r18
    4056:	8a 95       	dec	r24
    4058:	d2 f7       	brpl	.-12     	; 0x404e <__fixsfsi+0x68>
    405a:	66 23       	and	r22, r22
    405c:	81 f0       	breq	.+32     	; 0x407e <__fixsfsi+0x98>
    405e:	50 95       	com	r21
    4060:	40 95       	com	r20
    4062:	30 95       	com	r19
    4064:	21 95       	neg	r18
    4066:	3f 4f       	sbci	r19, 0xFF	; 255
    4068:	4f 4f       	sbci	r20, 0xFF	; 255
    406a:	5f 4f       	sbci	r21, 0xFF	; 255
    406c:	08 c0       	rjmp	.+16     	; 0x407e <__fixsfsi+0x98>
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	a9 01       	movw	r20, r18
    4074:	04 c0       	rjmp	.+8      	; 0x407e <__fixsfsi+0x98>
    4076:	2f ef       	ldi	r18, 0xFF	; 255
    4078:	3f ef       	ldi	r19, 0xFF	; 255
    407a:	4f ef       	ldi	r20, 0xFF	; 255
    407c:	5f e7       	ldi	r21, 0x7F	; 127
    407e:	b9 01       	movw	r22, r18
    4080:	ca 01       	movw	r24, r20
    4082:	2c 96       	adiw	r28, 0x0c	; 12
    4084:	e2 e0       	ldi	r30, 0x02	; 2
    4086:	0c 94 36 23 	jmp	0x466c	; 0x466c <__epilogue_restores__+0x20>

0000408a <__floatunsisf>:
    408a:	a8 e0       	ldi	r26, 0x08	; 8
    408c:	b0 e0       	ldi	r27, 0x00	; 0
    408e:	eb e4       	ldi	r30, 0x4B	; 75
    4090:	f0 e2       	ldi	r31, 0x20	; 32
    4092:	0c 94 14 23 	jmp	0x4628	; 0x4628 <__prologue_saves__+0x14>
    4096:	7b 01       	movw	r14, r22
    4098:	8c 01       	movw	r16, r24
    409a:	1a 82       	std	Y+2, r1	; 0x02
    409c:	61 15       	cp	r22, r1
    409e:	71 05       	cpc	r23, r1
    40a0:	81 05       	cpc	r24, r1
    40a2:	91 05       	cpc	r25, r1
    40a4:	19 f4       	brne	.+6      	; 0x40ac <__floatunsisf+0x22>
    40a6:	82 e0       	ldi	r24, 0x02	; 2
    40a8:	89 83       	std	Y+1, r24	; 0x01
    40aa:	5f c0       	rjmp	.+190    	; 0x416a <__floatunsisf+0xe0>
    40ac:	83 e0       	ldi	r24, 0x03	; 3
    40ae:	89 83       	std	Y+1, r24	; 0x01
    40b0:	8e e1       	ldi	r24, 0x1E	; 30
    40b2:	c8 2e       	mov	r12, r24
    40b4:	d1 2c       	mov	r13, r1
    40b6:	dc 82       	std	Y+4, r13	; 0x04
    40b8:	cb 82       	std	Y+3, r12	; 0x03
    40ba:	ed 82       	std	Y+5, r14	; 0x05
    40bc:	fe 82       	std	Y+6, r15	; 0x06
    40be:	0f 83       	std	Y+7, r16	; 0x07
    40c0:	18 87       	std	Y+8, r17	; 0x08
    40c2:	c8 01       	movw	r24, r16
    40c4:	b7 01       	movw	r22, r14
    40c6:	0e 94 bd 20 	call	0x417a	; 0x417a <__clzsi2>
    40ca:	fc 01       	movw	r30, r24
    40cc:	31 97       	sbiw	r30, 0x01	; 1
    40ce:	f7 ff       	sbrs	r31, 7
    40d0:	3a c0       	rjmp	.+116    	; 0x4146 <__floatunsisf+0xbc>
    40d2:	aa 27       	eor	r26, r26
    40d4:	bb 27       	eor	r27, r27
    40d6:	ae 1b       	sub	r26, r30
    40d8:	bf 0b       	sbc	r27, r31
    40da:	21 e0       	ldi	r18, 0x01	; 1
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	40 e0       	ldi	r20, 0x00	; 0
    40e0:	50 e0       	ldi	r21, 0x00	; 0
    40e2:	0a 2e       	mov	r0, r26
    40e4:	04 c0       	rjmp	.+8      	; 0x40ee <__floatunsisf+0x64>
    40e6:	22 0f       	add	r18, r18
    40e8:	33 1f       	adc	r19, r19
    40ea:	44 1f       	adc	r20, r20
    40ec:	55 1f       	adc	r21, r21
    40ee:	0a 94       	dec	r0
    40f0:	d2 f7       	brpl	.-12     	; 0x40e6 <__floatunsisf+0x5c>
    40f2:	21 50       	subi	r18, 0x01	; 1
    40f4:	30 40       	sbci	r19, 0x00	; 0
    40f6:	40 40       	sbci	r20, 0x00	; 0
    40f8:	50 40       	sbci	r21, 0x00	; 0
    40fa:	2e 21       	and	r18, r14
    40fc:	3f 21       	and	r19, r15
    40fe:	40 23       	and	r20, r16
    4100:	51 23       	and	r21, r17
    4102:	61 e0       	ldi	r22, 0x01	; 1
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	21 15       	cp	r18, r1
    410c:	31 05       	cpc	r19, r1
    410e:	41 05       	cpc	r20, r1
    4110:	51 05       	cpc	r21, r1
    4112:	19 f4       	brne	.+6      	; 0x411a <__floatunsisf+0x90>
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	70 e0       	ldi	r23, 0x00	; 0
    4118:	cb 01       	movw	r24, r22
    411a:	04 c0       	rjmp	.+8      	; 0x4124 <__floatunsisf+0x9a>
    411c:	16 95       	lsr	r17
    411e:	07 95       	ror	r16
    4120:	f7 94       	ror	r15
    4122:	e7 94       	ror	r14
    4124:	aa 95       	dec	r26
    4126:	d2 f7       	brpl	.-12     	; 0x411c <__floatunsisf+0x92>
    4128:	e6 2a       	or	r14, r22
    412a:	f7 2a       	or	r15, r23
    412c:	08 2b       	or	r16, r24
    412e:	19 2b       	or	r17, r25
    4130:	ed 82       	std	Y+5, r14	; 0x05
    4132:	fe 82       	std	Y+6, r15	; 0x06
    4134:	0f 83       	std	Y+7, r16	; 0x07
    4136:	18 87       	std	Y+8, r17	; 0x08
    4138:	8e e1       	ldi	r24, 0x1E	; 30
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	8e 1b       	sub	r24, r30
    413e:	9f 0b       	sbc	r25, r31
    4140:	9c 83       	std	Y+4, r25	; 0x04
    4142:	8b 83       	std	Y+3, r24	; 0x03
    4144:	12 c0       	rjmp	.+36     	; 0x416a <__floatunsisf+0xe0>
    4146:	30 97       	sbiw	r30, 0x00	; 0
    4148:	81 f0       	breq	.+32     	; 0x416a <__floatunsisf+0xe0>
    414a:	0e 2e       	mov	r0, r30
    414c:	04 c0       	rjmp	.+8      	; 0x4156 <__floatunsisf+0xcc>
    414e:	ee 0c       	add	r14, r14
    4150:	ff 1c       	adc	r15, r15
    4152:	00 1f       	adc	r16, r16
    4154:	11 1f       	adc	r17, r17
    4156:	0a 94       	dec	r0
    4158:	d2 f7       	brpl	.-12     	; 0x414e <__floatunsisf+0xc4>
    415a:	ed 82       	std	Y+5, r14	; 0x05
    415c:	fe 82       	std	Y+6, r15	; 0x06
    415e:	0f 83       	std	Y+7, r16	; 0x07
    4160:	18 87       	std	Y+8, r17	; 0x08
    4162:	ce 1a       	sub	r12, r30
    4164:	df 0a       	sbc	r13, r31
    4166:	dc 82       	std	Y+4, r13	; 0x04
    4168:	cb 82       	std	Y+3, r12	; 0x03
    416a:	ce 01       	movw	r24, r28
    416c:	01 96       	adiw	r24, 0x01	; 1
    416e:	0e 94 17 21 	call	0x422e	; 0x422e <__pack_f>
    4172:	28 96       	adiw	r28, 0x08	; 8
    4174:	e8 e0       	ldi	r30, 0x08	; 8
    4176:	0c 94 30 23 	jmp	0x4660	; 0x4660 <__epilogue_restores__+0x14>

0000417a <__clzsi2>:
    417a:	af 92       	push	r10
    417c:	bf 92       	push	r11
    417e:	cf 92       	push	r12
    4180:	df 92       	push	r13
    4182:	ef 92       	push	r14
    4184:	ff 92       	push	r15
    4186:	0f 93       	push	r16
    4188:	1f 93       	push	r17
    418a:	7b 01       	movw	r14, r22
    418c:	8c 01       	movw	r16, r24
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	e8 16       	cp	r14, r24
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	f8 06       	cpc	r15, r24
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	08 07       	cpc	r16, r24
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	18 07       	cpc	r17, r24
    419e:	58 f4       	brcc	.+22     	; 0x41b6 <__clzsi2+0x3c>
    41a0:	ef ef       	ldi	r30, 0xFF	; 255
    41a2:	ee 16       	cp	r14, r30
    41a4:	f1 04       	cpc	r15, r1
    41a6:	01 05       	cpc	r16, r1
    41a8:	11 05       	cpc	r17, r1
    41aa:	09 f0       	breq	.+2      	; 0x41ae <__clzsi2+0x34>
    41ac:	90 f4       	brcc	.+36     	; 0x41d2 <__clzsi2+0x58>
    41ae:	80 e0       	ldi	r24, 0x00	; 0
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	dc 01       	movw	r26, r24
    41b4:	17 c0       	rjmp	.+46     	; 0x41e4 <__clzsi2+0x6a>
    41b6:	f0 e0       	ldi	r31, 0x00	; 0
    41b8:	ef 16       	cp	r14, r31
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	ff 06       	cpc	r15, r31
    41be:	f0 e0       	ldi	r31, 0x00	; 0
    41c0:	0f 07       	cpc	r16, r31
    41c2:	f1 e0       	ldi	r31, 0x01	; 1
    41c4:	1f 07       	cpc	r17, r31
    41c6:	50 f4       	brcc	.+20     	; 0x41dc <__clzsi2+0x62>
    41c8:	80 e1       	ldi	r24, 0x10	; 16
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	a0 e0       	ldi	r26, 0x00	; 0
    41ce:	b0 e0       	ldi	r27, 0x00	; 0
    41d0:	09 c0       	rjmp	.+18     	; 0x41e4 <__clzsi2+0x6a>
    41d2:	88 e0       	ldi	r24, 0x08	; 8
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	a0 e0       	ldi	r26, 0x00	; 0
    41d8:	b0 e0       	ldi	r27, 0x00	; 0
    41da:	04 c0       	rjmp	.+8      	; 0x41e4 <__clzsi2+0x6a>
    41dc:	88 e1       	ldi	r24, 0x18	; 24
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	a0 e0       	ldi	r26, 0x00	; 0
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	20 e2       	ldi	r18, 0x20	; 32
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	40 e0       	ldi	r20, 0x00	; 0
    41ea:	50 e0       	ldi	r21, 0x00	; 0
    41ec:	28 1b       	sub	r18, r24
    41ee:	39 0b       	sbc	r19, r25
    41f0:	4a 0b       	sbc	r20, r26
    41f2:	5b 0b       	sbc	r21, r27
    41f4:	57 01       	movw	r10, r14
    41f6:	68 01       	movw	r12, r16
    41f8:	04 c0       	rjmp	.+8      	; 0x4202 <__clzsi2+0x88>
    41fa:	d6 94       	lsr	r13
    41fc:	c7 94       	ror	r12
    41fe:	b7 94       	ror	r11
    4200:	a7 94       	ror	r10
    4202:	8a 95       	dec	r24
    4204:	d2 f7       	brpl	.-12     	; 0x41fa <__clzsi2+0x80>
    4206:	d6 01       	movw	r26, r12
    4208:	c5 01       	movw	r24, r10
    420a:	83 5e       	subi	r24, 0xE3	; 227
    420c:	9e 4f       	sbci	r25, 0xFE	; 254
    420e:	fc 01       	movw	r30, r24
    4210:	80 81       	ld	r24, Z
    4212:	28 1b       	sub	r18, r24
    4214:	31 09       	sbc	r19, r1
    4216:	41 09       	sbc	r20, r1
    4218:	51 09       	sbc	r21, r1
    421a:	c9 01       	movw	r24, r18
    421c:	1f 91       	pop	r17
    421e:	0f 91       	pop	r16
    4220:	ff 90       	pop	r15
    4222:	ef 90       	pop	r14
    4224:	df 90       	pop	r13
    4226:	cf 90       	pop	r12
    4228:	bf 90       	pop	r11
    422a:	af 90       	pop	r10
    422c:	08 95       	ret

0000422e <__pack_f>:
    422e:	ef 92       	push	r14
    4230:	ff 92       	push	r15
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	fc 01       	movw	r30, r24
    423c:	24 81       	ldd	r18, Z+4	; 0x04
    423e:	35 81       	ldd	r19, Z+5	; 0x05
    4240:	46 81       	ldd	r20, Z+6	; 0x06
    4242:	57 81       	ldd	r21, Z+7	; 0x07
    4244:	61 81       	ldd	r22, Z+1	; 0x01
    4246:	80 81       	ld	r24, Z
    4248:	82 30       	cpi	r24, 0x02	; 2
    424a:	20 f4       	brcc	.+8      	; 0x4254 <__pack_f+0x26>
    424c:	40 61       	ori	r20, 0x10	; 16
    424e:	ef ef       	ldi	r30, 0xFF	; 255
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	a3 c0       	rjmp	.+326    	; 0x439a <__pack_f+0x16c>
    4254:	84 30       	cpi	r24, 0x04	; 4
    4256:	09 f4       	brne	.+2      	; 0x425a <__pack_f+0x2c>
    4258:	9b c0       	rjmp	.+310    	; 0x4390 <__pack_f+0x162>
    425a:	82 30       	cpi	r24, 0x02	; 2
    425c:	09 f4       	brne	.+2      	; 0x4260 <__pack_f+0x32>
    425e:	92 c0       	rjmp	.+292    	; 0x4384 <__pack_f+0x156>
    4260:	21 15       	cp	r18, r1
    4262:	31 05       	cpc	r19, r1
    4264:	41 05       	cpc	r20, r1
    4266:	51 05       	cpc	r21, r1
    4268:	09 f4       	brne	.+2      	; 0x426c <__pack_f+0x3e>
    426a:	8f c0       	rjmp	.+286    	; 0x438a <__pack_f+0x15c>
    426c:	02 80       	ldd	r0, Z+2	; 0x02
    426e:	f3 81       	ldd	r31, Z+3	; 0x03
    4270:	e0 2d       	mov	r30, r0
    4272:	7f ef       	ldi	r23, 0xFF	; 255
    4274:	e2 38       	cpi	r30, 0x82	; 130
    4276:	f7 07       	cpc	r31, r23
    4278:	0c f0       	brlt	.+2      	; 0x427c <__pack_f+0x4e>
    427a:	5a c0       	rjmp	.+180    	; 0x4330 <__pack_f+0x102>
    427c:	c2 e8       	ldi	r28, 0x82	; 130
    427e:	df ef       	ldi	r29, 0xFF	; 255
    4280:	ce 1b       	sub	r28, r30
    4282:	df 0b       	sbc	r29, r31
    4284:	ca 31       	cpi	r28, 0x1A	; 26
    4286:	d1 05       	cpc	r29, r1
    4288:	6c f5       	brge	.+90     	; 0x42e4 <__pack_f+0xb6>
    428a:	79 01       	movw	r14, r18
    428c:	8a 01       	movw	r16, r20
    428e:	0c 2e       	mov	r0, r28
    4290:	04 c0       	rjmp	.+8      	; 0x429a <__pack_f+0x6c>
    4292:	16 95       	lsr	r17
    4294:	07 95       	ror	r16
    4296:	f7 94       	ror	r15
    4298:	e7 94       	ror	r14
    429a:	0a 94       	dec	r0
    429c:	d2 f7       	brpl	.-12     	; 0x4292 <__pack_f+0x64>
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	a0 e0       	ldi	r26, 0x00	; 0
    42a4:	b0 e0       	ldi	r27, 0x00	; 0
    42a6:	0c 2e       	mov	r0, r28
    42a8:	04 c0       	rjmp	.+8      	; 0x42b2 <__pack_f+0x84>
    42aa:	88 0f       	add	r24, r24
    42ac:	99 1f       	adc	r25, r25
    42ae:	aa 1f       	adc	r26, r26
    42b0:	bb 1f       	adc	r27, r27
    42b2:	0a 94       	dec	r0
    42b4:	d2 f7       	brpl	.-12     	; 0x42aa <__pack_f+0x7c>
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	a1 09       	sbc	r26, r1
    42ba:	b1 09       	sbc	r27, r1
    42bc:	82 23       	and	r24, r18
    42be:	93 23       	and	r25, r19
    42c0:	a4 23       	and	r26, r20
    42c2:	b5 23       	and	r27, r21
    42c4:	21 e0       	ldi	r18, 0x01	; 1
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	40 e0       	ldi	r20, 0x00	; 0
    42ca:	50 e0       	ldi	r21, 0x00	; 0
    42cc:	00 97       	sbiw	r24, 0x00	; 0
    42ce:	a1 05       	cpc	r26, r1
    42d0:	b1 05       	cpc	r27, r1
    42d2:	19 f4       	brne	.+6      	; 0x42da <__pack_f+0xac>
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	a9 01       	movw	r20, r18
    42da:	2e 29       	or	r18, r14
    42dc:	3f 29       	or	r19, r15
    42de:	40 2b       	or	r20, r16
    42e0:	51 2b       	or	r21, r17
    42e2:	03 c0       	rjmp	.+6      	; 0x42ea <__pack_f+0xbc>
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	a9 01       	movw	r20, r18
    42ea:	da 01       	movw	r26, r20
    42ec:	c9 01       	movw	r24, r18
    42ee:	8f 77       	andi	r24, 0x7F	; 127
    42f0:	90 70       	andi	r25, 0x00	; 0
    42f2:	a0 70       	andi	r26, 0x00	; 0
    42f4:	b0 70       	andi	r27, 0x00	; 0
    42f6:	80 34       	cpi	r24, 0x40	; 64
    42f8:	91 05       	cpc	r25, r1
    42fa:	a1 05       	cpc	r26, r1
    42fc:	b1 05       	cpc	r27, r1
    42fe:	39 f4       	brne	.+14     	; 0x430e <__pack_f+0xe0>
    4300:	27 ff       	sbrs	r18, 7
    4302:	09 c0       	rjmp	.+18     	; 0x4316 <__pack_f+0xe8>
    4304:	20 5c       	subi	r18, 0xC0	; 192
    4306:	3f 4f       	sbci	r19, 0xFF	; 255
    4308:	4f 4f       	sbci	r20, 0xFF	; 255
    430a:	5f 4f       	sbci	r21, 0xFF	; 255
    430c:	04 c0       	rjmp	.+8      	; 0x4316 <__pack_f+0xe8>
    430e:	21 5c       	subi	r18, 0xC1	; 193
    4310:	3f 4f       	sbci	r19, 0xFF	; 255
    4312:	4f 4f       	sbci	r20, 0xFF	; 255
    4314:	5f 4f       	sbci	r21, 0xFF	; 255
    4316:	e1 e0       	ldi	r30, 0x01	; 1
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	20 30       	cpi	r18, 0x00	; 0
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	38 07       	cpc	r19, r24
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	48 07       	cpc	r20, r24
    4324:	80 e4       	ldi	r24, 0x40	; 64
    4326:	58 07       	cpc	r21, r24
    4328:	28 f5       	brcc	.+74     	; 0x4374 <__pack_f+0x146>
    432a:	e0 e0       	ldi	r30, 0x00	; 0
    432c:	f0 e0       	ldi	r31, 0x00	; 0
    432e:	22 c0       	rjmp	.+68     	; 0x4374 <__pack_f+0x146>
    4330:	e0 38       	cpi	r30, 0x80	; 128
    4332:	f1 05       	cpc	r31, r1
    4334:	6c f5       	brge	.+90     	; 0x4390 <__pack_f+0x162>
    4336:	e1 58       	subi	r30, 0x81	; 129
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	da 01       	movw	r26, r20
    433c:	c9 01       	movw	r24, r18
    433e:	8f 77       	andi	r24, 0x7F	; 127
    4340:	90 70       	andi	r25, 0x00	; 0
    4342:	a0 70       	andi	r26, 0x00	; 0
    4344:	b0 70       	andi	r27, 0x00	; 0
    4346:	80 34       	cpi	r24, 0x40	; 64
    4348:	91 05       	cpc	r25, r1
    434a:	a1 05       	cpc	r26, r1
    434c:	b1 05       	cpc	r27, r1
    434e:	39 f4       	brne	.+14     	; 0x435e <__pack_f+0x130>
    4350:	27 ff       	sbrs	r18, 7
    4352:	09 c0       	rjmp	.+18     	; 0x4366 <__pack_f+0x138>
    4354:	20 5c       	subi	r18, 0xC0	; 192
    4356:	3f 4f       	sbci	r19, 0xFF	; 255
    4358:	4f 4f       	sbci	r20, 0xFF	; 255
    435a:	5f 4f       	sbci	r21, 0xFF	; 255
    435c:	04 c0       	rjmp	.+8      	; 0x4366 <__pack_f+0x138>
    435e:	21 5c       	subi	r18, 0xC1	; 193
    4360:	3f 4f       	sbci	r19, 0xFF	; 255
    4362:	4f 4f       	sbci	r20, 0xFF	; 255
    4364:	5f 4f       	sbci	r21, 0xFF	; 255
    4366:	57 ff       	sbrs	r21, 7
    4368:	05 c0       	rjmp	.+10     	; 0x4374 <__pack_f+0x146>
    436a:	56 95       	lsr	r21
    436c:	47 95       	ror	r20
    436e:	37 95       	ror	r19
    4370:	27 95       	ror	r18
    4372:	31 96       	adiw	r30, 0x01	; 1
    4374:	87 e0       	ldi	r24, 0x07	; 7
    4376:	56 95       	lsr	r21
    4378:	47 95       	ror	r20
    437a:	37 95       	ror	r19
    437c:	27 95       	ror	r18
    437e:	8a 95       	dec	r24
    4380:	d1 f7       	brne	.-12     	; 0x4376 <__pack_f+0x148>
    4382:	0b c0       	rjmp	.+22     	; 0x439a <__pack_f+0x16c>
    4384:	e0 e0       	ldi	r30, 0x00	; 0
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	05 c0       	rjmp	.+10     	; 0x4394 <__pack_f+0x166>
    438a:	e0 e0       	ldi	r30, 0x00	; 0
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	05 c0       	rjmp	.+10     	; 0x439a <__pack_f+0x16c>
    4390:	ef ef       	ldi	r30, 0xFF	; 255
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	a9 01       	movw	r20, r18
    439a:	8e 2f       	mov	r24, r30
    439c:	87 95       	ror	r24
    439e:	88 27       	eor	r24, r24
    43a0:	87 95       	ror	r24
    43a2:	94 2f       	mov	r25, r20
    43a4:	9f 77       	andi	r25, 0x7F	; 127
    43a6:	67 95       	ror	r22
    43a8:	66 27       	eor	r22, r22
    43aa:	67 95       	ror	r22
    43ac:	e6 95       	lsr	r30
    43ae:	a9 2f       	mov	r26, r25
    43b0:	a8 2b       	or	r26, r24
    43b2:	fe 2f       	mov	r31, r30
    43b4:	f6 2b       	or	r31, r22
    43b6:	62 2f       	mov	r22, r18
    43b8:	73 2f       	mov	r23, r19
    43ba:	8a 2f       	mov	r24, r26
    43bc:	9f 2f       	mov	r25, r31
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
    43c2:	e6 e0       	ldi	r30, 0x06	; 6
    43c4:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__epilogue_restores__+0x18>

000043c8 <__unpack_f>:
    43c8:	dc 01       	movw	r26, r24
    43ca:	fb 01       	movw	r30, r22
    43cc:	2c 91       	ld	r18, X
    43ce:	11 96       	adiw	r26, 0x01	; 1
    43d0:	3c 91       	ld	r19, X
    43d2:	11 97       	sbiw	r26, 0x01	; 1
    43d4:	12 96       	adiw	r26, 0x02	; 2
    43d6:	8c 91       	ld	r24, X
    43d8:	12 97       	sbiw	r26, 0x02	; 2
    43da:	48 2f       	mov	r20, r24
    43dc:	4f 77       	andi	r20, 0x7F	; 127
    43de:	50 e0       	ldi	r21, 0x00	; 0
    43e0:	98 2f       	mov	r25, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	99 27       	eor	r25, r25
    43e6:	99 1f       	adc	r25, r25
    43e8:	13 96       	adiw	r26, 0x03	; 3
    43ea:	6c 91       	ld	r22, X
    43ec:	13 97       	sbiw	r26, 0x03	; 3
    43ee:	86 2f       	mov	r24, r22
    43f0:	88 0f       	add	r24, r24
    43f2:	89 2b       	or	r24, r25
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	66 1f       	adc	r22, r22
    43f8:	66 27       	eor	r22, r22
    43fa:	66 1f       	adc	r22, r22
    43fc:	61 83       	std	Z+1, r22	; 0x01
    43fe:	00 97       	sbiw	r24, 0x00	; 0
    4400:	39 f5       	brne	.+78     	; 0x4450 <__unpack_f+0x88>
    4402:	21 15       	cp	r18, r1
    4404:	31 05       	cpc	r19, r1
    4406:	41 05       	cpc	r20, r1
    4408:	51 05       	cpc	r21, r1
    440a:	11 f4       	brne	.+4      	; 0x4410 <__unpack_f+0x48>
    440c:	82 e0       	ldi	r24, 0x02	; 2
    440e:	29 c0       	rjmp	.+82     	; 0x4462 <__unpack_f+0x9a>
    4410:	82 e8       	ldi	r24, 0x82	; 130
    4412:	9f ef       	ldi	r25, 0xFF	; 255
    4414:	93 83       	std	Z+3, r25	; 0x03
    4416:	82 83       	std	Z+2, r24	; 0x02
    4418:	67 e0       	ldi	r22, 0x07	; 7
    441a:	22 0f       	add	r18, r18
    441c:	33 1f       	adc	r19, r19
    441e:	44 1f       	adc	r20, r20
    4420:	55 1f       	adc	r21, r21
    4422:	6a 95       	dec	r22
    4424:	d1 f7       	brne	.-12     	; 0x441a <__unpack_f+0x52>
    4426:	83 e0       	ldi	r24, 0x03	; 3
    4428:	80 83       	st	Z, r24
    442a:	09 c0       	rjmp	.+18     	; 0x443e <__unpack_f+0x76>
    442c:	22 0f       	add	r18, r18
    442e:	33 1f       	adc	r19, r19
    4430:	44 1f       	adc	r20, r20
    4432:	55 1f       	adc	r21, r21
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	93 83       	std	Z+3, r25	; 0x03
    443c:	82 83       	std	Z+2, r24	; 0x02
    443e:	20 30       	cpi	r18, 0x00	; 0
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	38 07       	cpc	r19, r24
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	48 07       	cpc	r20, r24
    4448:	80 e4       	ldi	r24, 0x40	; 64
    444a:	58 07       	cpc	r21, r24
    444c:	78 f3       	brcs	.-34     	; 0x442c <__unpack_f+0x64>
    444e:	20 c0       	rjmp	.+64     	; 0x4490 <__unpack_f+0xc8>
    4450:	8f 3f       	cpi	r24, 0xFF	; 255
    4452:	91 05       	cpc	r25, r1
    4454:	79 f4       	brne	.+30     	; 0x4474 <__unpack_f+0xac>
    4456:	21 15       	cp	r18, r1
    4458:	31 05       	cpc	r19, r1
    445a:	41 05       	cpc	r20, r1
    445c:	51 05       	cpc	r21, r1
    445e:	19 f4       	brne	.+6      	; 0x4466 <__unpack_f+0x9e>
    4460:	84 e0       	ldi	r24, 0x04	; 4
    4462:	80 83       	st	Z, r24
    4464:	08 95       	ret
    4466:	44 ff       	sbrs	r20, 4
    4468:	03 c0       	rjmp	.+6      	; 0x4470 <__unpack_f+0xa8>
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	80 83       	st	Z, r24
    446e:	10 c0       	rjmp	.+32     	; 0x4490 <__unpack_f+0xc8>
    4470:	10 82       	st	Z, r1
    4472:	0e c0       	rjmp	.+28     	; 0x4490 <__unpack_f+0xc8>
    4474:	8f 57       	subi	r24, 0x7F	; 127
    4476:	90 40       	sbci	r25, 0x00	; 0
    4478:	93 83       	std	Z+3, r25	; 0x03
    447a:	82 83       	std	Z+2, r24	; 0x02
    447c:	83 e0       	ldi	r24, 0x03	; 3
    447e:	80 83       	st	Z, r24
    4480:	87 e0       	ldi	r24, 0x07	; 7
    4482:	22 0f       	add	r18, r18
    4484:	33 1f       	adc	r19, r19
    4486:	44 1f       	adc	r20, r20
    4488:	55 1f       	adc	r21, r21
    448a:	8a 95       	dec	r24
    448c:	d1 f7       	brne	.-12     	; 0x4482 <__unpack_f+0xba>
    448e:	50 64       	ori	r21, 0x40	; 64
    4490:	24 83       	std	Z+4, r18	; 0x04
    4492:	35 83       	std	Z+5, r19	; 0x05
    4494:	46 83       	std	Z+6, r20	; 0x06
    4496:	57 83       	std	Z+7, r21	; 0x07
    4498:	08 95       	ret

0000449a <__fpcmp_parts_f>:
    449a:	fc 01       	movw	r30, r24
    449c:	db 01       	movw	r26, r22
    449e:	90 81       	ld	r25, Z
    44a0:	92 30       	cpi	r25, 0x02	; 2
    44a2:	08 f4       	brcc	.+2      	; 0x44a6 <__fpcmp_parts_f+0xc>
    44a4:	49 c0       	rjmp	.+146    	; 0x4538 <__fpcmp_parts_f+0x9e>
    44a6:	8c 91       	ld	r24, X
    44a8:	82 30       	cpi	r24, 0x02	; 2
    44aa:	08 f4       	brcc	.+2      	; 0x44ae <__fpcmp_parts_f+0x14>
    44ac:	45 c0       	rjmp	.+138    	; 0x4538 <__fpcmp_parts_f+0x9e>
    44ae:	94 30       	cpi	r25, 0x04	; 4
    44b0:	51 f4       	brne	.+20     	; 0x44c6 <__fpcmp_parts_f+0x2c>
    44b2:	61 81       	ldd	r22, Z+1	; 0x01
    44b4:	84 30       	cpi	r24, 0x04	; 4
    44b6:	b1 f5       	brne	.+108    	; 0x4524 <__fpcmp_parts_f+0x8a>
    44b8:	11 96       	adiw	r26, 0x01	; 1
    44ba:	2c 91       	ld	r18, X
    44bc:	11 97       	sbiw	r26, 0x01	; 1
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	26 1b       	sub	r18, r22
    44c2:	31 09       	sbc	r19, r1
    44c4:	41 c0       	rjmp	.+130    	; 0x4548 <__fpcmp_parts_f+0xae>
    44c6:	84 30       	cpi	r24, 0x04	; 4
    44c8:	21 f0       	breq	.+8      	; 0x44d2 <__fpcmp_parts_f+0x38>
    44ca:	92 30       	cpi	r25, 0x02	; 2
    44cc:	41 f4       	brne	.+16     	; 0x44de <__fpcmp_parts_f+0x44>
    44ce:	82 30       	cpi	r24, 0x02	; 2
    44d0:	b1 f1       	breq	.+108    	; 0x453e <__fpcmp_parts_f+0xa4>
    44d2:	11 96       	adiw	r26, 0x01	; 1
    44d4:	8c 91       	ld	r24, X
    44d6:	11 97       	sbiw	r26, 0x01	; 1
    44d8:	88 23       	and	r24, r24
    44da:	a1 f1       	breq	.+104    	; 0x4544 <__fpcmp_parts_f+0xaa>
    44dc:	2d c0       	rjmp	.+90     	; 0x4538 <__fpcmp_parts_f+0x9e>
    44de:	61 81       	ldd	r22, Z+1	; 0x01
    44e0:	82 30       	cpi	r24, 0x02	; 2
    44e2:	01 f1       	breq	.+64     	; 0x4524 <__fpcmp_parts_f+0x8a>
    44e4:	11 96       	adiw	r26, 0x01	; 1
    44e6:	8c 91       	ld	r24, X
    44e8:	11 97       	sbiw	r26, 0x01	; 1
    44ea:	68 17       	cp	r22, r24
    44ec:	d9 f4       	brne	.+54     	; 0x4524 <__fpcmp_parts_f+0x8a>
    44ee:	22 81       	ldd	r18, Z+2	; 0x02
    44f0:	33 81       	ldd	r19, Z+3	; 0x03
    44f2:	12 96       	adiw	r26, 0x02	; 2
    44f4:	8d 91       	ld	r24, X+
    44f6:	9c 91       	ld	r25, X
    44f8:	13 97       	sbiw	r26, 0x03	; 3
    44fa:	82 17       	cp	r24, r18
    44fc:	93 07       	cpc	r25, r19
    44fe:	94 f0       	brlt	.+36     	; 0x4524 <__fpcmp_parts_f+0x8a>
    4500:	28 17       	cp	r18, r24
    4502:	39 07       	cpc	r19, r25
    4504:	bc f0       	brlt	.+46     	; 0x4534 <__fpcmp_parts_f+0x9a>
    4506:	24 81       	ldd	r18, Z+4	; 0x04
    4508:	35 81       	ldd	r19, Z+5	; 0x05
    450a:	46 81       	ldd	r20, Z+6	; 0x06
    450c:	57 81       	ldd	r21, Z+7	; 0x07
    450e:	14 96       	adiw	r26, 0x04	; 4
    4510:	8d 91       	ld	r24, X+
    4512:	9d 91       	ld	r25, X+
    4514:	0d 90       	ld	r0, X+
    4516:	bc 91       	ld	r27, X
    4518:	a0 2d       	mov	r26, r0
    451a:	82 17       	cp	r24, r18
    451c:	93 07       	cpc	r25, r19
    451e:	a4 07       	cpc	r26, r20
    4520:	b5 07       	cpc	r27, r21
    4522:	18 f4       	brcc	.+6      	; 0x452a <__fpcmp_parts_f+0x90>
    4524:	66 23       	and	r22, r22
    4526:	41 f0       	breq	.+16     	; 0x4538 <__fpcmp_parts_f+0x9e>
    4528:	0d c0       	rjmp	.+26     	; 0x4544 <__fpcmp_parts_f+0xaa>
    452a:	28 17       	cp	r18, r24
    452c:	39 07       	cpc	r19, r25
    452e:	4a 07       	cpc	r20, r26
    4530:	5b 07       	cpc	r21, r27
    4532:	28 f4       	brcc	.+10     	; 0x453e <__fpcmp_parts_f+0xa4>
    4534:	66 23       	and	r22, r22
    4536:	31 f0       	breq	.+12     	; 0x4544 <__fpcmp_parts_f+0xaa>
    4538:	21 e0       	ldi	r18, 0x01	; 1
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	05 c0       	rjmp	.+10     	; 0x4548 <__fpcmp_parts_f+0xae>
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	02 c0       	rjmp	.+4      	; 0x4548 <__fpcmp_parts_f+0xae>
    4544:	2f ef       	ldi	r18, 0xFF	; 255
    4546:	3f ef       	ldi	r19, 0xFF	; 255
    4548:	c9 01       	movw	r24, r18
    454a:	08 95       	ret

0000454c <__udivmodhi4>:
    454c:	aa 1b       	sub	r26, r26
    454e:	bb 1b       	sub	r27, r27
    4550:	51 e1       	ldi	r21, 0x11	; 17
    4552:	07 c0       	rjmp	.+14     	; 0x4562 <__udivmodhi4_ep>

00004554 <__udivmodhi4_loop>:
    4554:	aa 1f       	adc	r26, r26
    4556:	bb 1f       	adc	r27, r27
    4558:	a6 17       	cp	r26, r22
    455a:	b7 07       	cpc	r27, r23
    455c:	10 f0       	brcs	.+4      	; 0x4562 <__udivmodhi4_ep>
    455e:	a6 1b       	sub	r26, r22
    4560:	b7 0b       	sbc	r27, r23

00004562 <__udivmodhi4_ep>:
    4562:	88 1f       	adc	r24, r24
    4564:	99 1f       	adc	r25, r25
    4566:	5a 95       	dec	r21
    4568:	a9 f7       	brne	.-22     	; 0x4554 <__udivmodhi4_loop>
    456a:	80 95       	com	r24
    456c:	90 95       	com	r25
    456e:	bc 01       	movw	r22, r24
    4570:	cd 01       	movw	r24, r26
    4572:	08 95       	ret

00004574 <__divmodhi4>:
    4574:	97 fb       	bst	r25, 7
    4576:	09 2e       	mov	r0, r25
    4578:	07 26       	eor	r0, r23
    457a:	0a d0       	rcall	.+20     	; 0x4590 <__divmodhi4_neg1>
    457c:	77 fd       	sbrc	r23, 7
    457e:	04 d0       	rcall	.+8      	; 0x4588 <__divmodhi4_neg2>
    4580:	e5 df       	rcall	.-54     	; 0x454c <__udivmodhi4>
    4582:	06 d0       	rcall	.+12     	; 0x4590 <__divmodhi4_neg1>
    4584:	00 20       	and	r0, r0
    4586:	1a f4       	brpl	.+6      	; 0x458e <__divmodhi4_exit>

00004588 <__divmodhi4_neg2>:
    4588:	70 95       	com	r23
    458a:	61 95       	neg	r22
    458c:	7f 4f       	sbci	r23, 0xFF	; 255

0000458e <__divmodhi4_exit>:
    458e:	08 95       	ret

00004590 <__divmodhi4_neg1>:
    4590:	f6 f7       	brtc	.-4      	; 0x458e <__divmodhi4_exit>
    4592:	90 95       	com	r25
    4594:	81 95       	neg	r24
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	08 95       	ret

0000459a <__divmodsi4>:
    459a:	97 fb       	bst	r25, 7
    459c:	09 2e       	mov	r0, r25
    459e:	05 26       	eor	r0, r21
    45a0:	0e d0       	rcall	.+28     	; 0x45be <__divmodsi4_neg1>
    45a2:	57 fd       	sbrc	r21, 7
    45a4:	04 d0       	rcall	.+8      	; 0x45ae <__divmodsi4_neg2>
    45a6:	14 d0       	rcall	.+40     	; 0x45d0 <__udivmodsi4>
    45a8:	0a d0       	rcall	.+20     	; 0x45be <__divmodsi4_neg1>
    45aa:	00 1c       	adc	r0, r0
    45ac:	38 f4       	brcc	.+14     	; 0x45bc <__divmodsi4_exit>

000045ae <__divmodsi4_neg2>:
    45ae:	50 95       	com	r21
    45b0:	40 95       	com	r20
    45b2:	30 95       	com	r19
    45b4:	21 95       	neg	r18
    45b6:	3f 4f       	sbci	r19, 0xFF	; 255
    45b8:	4f 4f       	sbci	r20, 0xFF	; 255
    45ba:	5f 4f       	sbci	r21, 0xFF	; 255

000045bc <__divmodsi4_exit>:
    45bc:	08 95       	ret

000045be <__divmodsi4_neg1>:
    45be:	f6 f7       	brtc	.-4      	; 0x45bc <__divmodsi4_exit>
    45c0:	90 95       	com	r25
    45c2:	80 95       	com	r24
    45c4:	70 95       	com	r23
    45c6:	61 95       	neg	r22
    45c8:	7f 4f       	sbci	r23, 0xFF	; 255
    45ca:	8f 4f       	sbci	r24, 0xFF	; 255
    45cc:	9f 4f       	sbci	r25, 0xFF	; 255
    45ce:	08 95       	ret

000045d0 <__udivmodsi4>:
    45d0:	a1 e2       	ldi	r26, 0x21	; 33
    45d2:	1a 2e       	mov	r1, r26
    45d4:	aa 1b       	sub	r26, r26
    45d6:	bb 1b       	sub	r27, r27
    45d8:	fd 01       	movw	r30, r26
    45da:	0d c0       	rjmp	.+26     	; 0x45f6 <__udivmodsi4_ep>

000045dc <__udivmodsi4_loop>:
    45dc:	aa 1f       	adc	r26, r26
    45de:	bb 1f       	adc	r27, r27
    45e0:	ee 1f       	adc	r30, r30
    45e2:	ff 1f       	adc	r31, r31
    45e4:	a2 17       	cp	r26, r18
    45e6:	b3 07       	cpc	r27, r19
    45e8:	e4 07       	cpc	r30, r20
    45ea:	f5 07       	cpc	r31, r21
    45ec:	20 f0       	brcs	.+8      	; 0x45f6 <__udivmodsi4_ep>
    45ee:	a2 1b       	sub	r26, r18
    45f0:	b3 0b       	sbc	r27, r19
    45f2:	e4 0b       	sbc	r30, r20
    45f4:	f5 0b       	sbc	r31, r21

000045f6 <__udivmodsi4_ep>:
    45f6:	66 1f       	adc	r22, r22
    45f8:	77 1f       	adc	r23, r23
    45fa:	88 1f       	adc	r24, r24
    45fc:	99 1f       	adc	r25, r25
    45fe:	1a 94       	dec	r1
    4600:	69 f7       	brne	.-38     	; 0x45dc <__udivmodsi4_loop>
    4602:	60 95       	com	r22
    4604:	70 95       	com	r23
    4606:	80 95       	com	r24
    4608:	90 95       	com	r25
    460a:	9b 01       	movw	r18, r22
    460c:	ac 01       	movw	r20, r24
    460e:	bd 01       	movw	r22, r26
    4610:	cf 01       	movw	r24, r30
    4612:	08 95       	ret

00004614 <__prologue_saves__>:
    4614:	2f 92       	push	r2
    4616:	3f 92       	push	r3
    4618:	4f 92       	push	r4
    461a:	5f 92       	push	r5
    461c:	6f 92       	push	r6
    461e:	7f 92       	push	r7
    4620:	8f 92       	push	r8
    4622:	9f 92       	push	r9
    4624:	af 92       	push	r10
    4626:	bf 92       	push	r11
    4628:	cf 92       	push	r12
    462a:	df 92       	push	r13
    462c:	ef 92       	push	r14
    462e:	ff 92       	push	r15
    4630:	0f 93       	push	r16
    4632:	1f 93       	push	r17
    4634:	cf 93       	push	r28
    4636:	df 93       	push	r29
    4638:	cd b7       	in	r28, 0x3d	; 61
    463a:	de b7       	in	r29, 0x3e	; 62
    463c:	ca 1b       	sub	r28, r26
    463e:	db 0b       	sbc	r29, r27
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
    464a:	09 94       	ijmp

0000464c <__epilogue_restores__>:
    464c:	2a 88       	ldd	r2, Y+18	; 0x12
    464e:	39 88       	ldd	r3, Y+17	; 0x11
    4650:	48 88       	ldd	r4, Y+16	; 0x10
    4652:	5f 84       	ldd	r5, Y+15	; 0x0f
    4654:	6e 84       	ldd	r6, Y+14	; 0x0e
    4656:	7d 84       	ldd	r7, Y+13	; 0x0d
    4658:	8c 84       	ldd	r8, Y+12	; 0x0c
    465a:	9b 84       	ldd	r9, Y+11	; 0x0b
    465c:	aa 84       	ldd	r10, Y+10	; 0x0a
    465e:	b9 84       	ldd	r11, Y+9	; 0x09
    4660:	c8 84       	ldd	r12, Y+8	; 0x08
    4662:	df 80       	ldd	r13, Y+7	; 0x07
    4664:	ee 80       	ldd	r14, Y+6	; 0x06
    4666:	fd 80       	ldd	r15, Y+5	; 0x05
    4668:	0c 81       	ldd	r16, Y+4	; 0x04
    466a:	1b 81       	ldd	r17, Y+3	; 0x03
    466c:	aa 81       	ldd	r26, Y+2	; 0x02
    466e:	b9 81       	ldd	r27, Y+1	; 0x01
    4670:	ce 0f       	add	r28, r30
    4672:	d1 1d       	adc	r29, r1
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	f8 94       	cli
    4678:	de bf       	out	0x3e, r29	; 62
    467a:	0f be       	out	0x3f, r0	; 63
    467c:	cd bf       	out	0x3d, r28	; 61
    467e:	ed 01       	movw	r28, r26
    4680:	08 95       	ret

00004682 <ceil>:
    4682:	3b d0       	rcall	.+118    	; 0x46fa <__fp_trunc>
    4684:	80 f0       	brcs	.+32     	; 0x46a6 <ceil+0x24>
    4686:	9f 37       	cpi	r25, 0x7F	; 127
    4688:	40 f4       	brcc	.+16     	; 0x469a <ceil+0x18>
    468a:	91 11       	cpse	r25, r1
    468c:	0e f4       	brtc	.+2      	; 0x4690 <ceil+0xe>
    468e:	4d c0       	rjmp	.+154    	; 0x472a <__fp_szero>
    4690:	60 e0       	ldi	r22, 0x00	; 0
    4692:	70 e0       	ldi	r23, 0x00	; 0
    4694:	80 e8       	ldi	r24, 0x80	; 128
    4696:	9f e3       	ldi	r25, 0x3F	; 63
    4698:	08 95       	ret
    469a:	26 f0       	brts	.+8      	; 0x46a4 <ceil+0x22>
    469c:	1b 16       	cp	r1, r27
    469e:	61 1d       	adc	r22, r1
    46a0:	71 1d       	adc	r23, r1
    46a2:	81 1d       	adc	r24, r1
    46a4:	01 c0       	rjmp	.+2      	; 0x46a8 <__fp_mintl>
    46a6:	1b c0       	rjmp	.+54     	; 0x46de <__fp_mpack>

000046a8 <__fp_mintl>:
    46a8:	88 23       	and	r24, r24
    46aa:	71 f4       	brne	.+28     	; 0x46c8 <__fp_mintl+0x20>
    46ac:	77 23       	and	r23, r23
    46ae:	21 f0       	breq	.+8      	; 0x46b8 <__fp_mintl+0x10>
    46b0:	98 50       	subi	r25, 0x08	; 8
    46b2:	87 2b       	or	r24, r23
    46b4:	76 2f       	mov	r23, r22
    46b6:	07 c0       	rjmp	.+14     	; 0x46c6 <__fp_mintl+0x1e>
    46b8:	66 23       	and	r22, r22
    46ba:	11 f4       	brne	.+4      	; 0x46c0 <__fp_mintl+0x18>
    46bc:	99 27       	eor	r25, r25
    46be:	0d c0       	rjmp	.+26     	; 0x46da <__fp_mintl+0x32>
    46c0:	90 51       	subi	r25, 0x10	; 16
    46c2:	86 2b       	or	r24, r22
    46c4:	70 e0       	ldi	r23, 0x00	; 0
    46c6:	60 e0       	ldi	r22, 0x00	; 0
    46c8:	2a f0       	brmi	.+10     	; 0x46d4 <__fp_mintl+0x2c>
    46ca:	9a 95       	dec	r25
    46cc:	66 0f       	add	r22, r22
    46ce:	77 1f       	adc	r23, r23
    46d0:	88 1f       	adc	r24, r24
    46d2:	da f7       	brpl	.-10     	; 0x46ca <__fp_mintl+0x22>
    46d4:	88 0f       	add	r24, r24
    46d6:	96 95       	lsr	r25
    46d8:	87 95       	ror	r24
    46da:	97 f9       	bld	r25, 7
    46dc:	08 95       	ret

000046de <__fp_mpack>:
    46de:	9f 3f       	cpi	r25, 0xFF	; 255
    46e0:	31 f0       	breq	.+12     	; 0x46ee <__fp_mpack_finite+0xc>

000046e2 <__fp_mpack_finite>:
    46e2:	91 50       	subi	r25, 0x01	; 1
    46e4:	20 f4       	brcc	.+8      	; 0x46ee <__fp_mpack_finite+0xc>
    46e6:	87 95       	ror	r24
    46e8:	77 95       	ror	r23
    46ea:	67 95       	ror	r22
    46ec:	b7 95       	ror	r27
    46ee:	88 0f       	add	r24, r24
    46f0:	91 1d       	adc	r25, r1
    46f2:	96 95       	lsr	r25
    46f4:	87 95       	ror	r24
    46f6:	97 f9       	bld	r25, 7
    46f8:	08 95       	ret

000046fa <__fp_trunc>:
    46fa:	25 d0       	rcall	.+74     	; 0x4746 <__fp_splitA>
    46fc:	a0 f0       	brcs	.+40     	; 0x4726 <__fp_trunc+0x2c>
    46fe:	be e7       	ldi	r27, 0x7E	; 126
    4700:	b9 17       	cp	r27, r25
    4702:	88 f4       	brcc	.+34     	; 0x4726 <__fp_trunc+0x2c>
    4704:	bb 27       	eor	r27, r27
    4706:	9f 38       	cpi	r25, 0x8F	; 143
    4708:	60 f4       	brcc	.+24     	; 0x4722 <__fp_trunc+0x28>
    470a:	16 16       	cp	r1, r22
    470c:	b1 1d       	adc	r27, r1
    470e:	67 2f       	mov	r22, r23
    4710:	78 2f       	mov	r23, r24
    4712:	88 27       	eor	r24, r24
    4714:	98 5f       	subi	r25, 0xF8	; 248
    4716:	f7 cf       	rjmp	.-18     	; 0x4706 <__fp_trunc+0xc>
    4718:	86 95       	lsr	r24
    471a:	77 95       	ror	r23
    471c:	67 95       	ror	r22
    471e:	b1 1d       	adc	r27, r1
    4720:	93 95       	inc	r25
    4722:	96 39       	cpi	r25, 0x96	; 150
    4724:	c8 f3       	brcs	.-14     	; 0x4718 <__fp_trunc+0x1e>
    4726:	08 95       	ret

00004728 <__fp_zero>:
    4728:	e8 94       	clt

0000472a <__fp_szero>:
    472a:	bb 27       	eor	r27, r27
    472c:	66 27       	eor	r22, r22
    472e:	77 27       	eor	r23, r23
    4730:	cb 01       	movw	r24, r22
    4732:	97 f9       	bld	r25, 7
    4734:	08 95       	ret

00004736 <__fp_split3>:
    4736:	57 fd       	sbrc	r21, 7
    4738:	90 58       	subi	r25, 0x80	; 128
    473a:	44 0f       	add	r20, r20
    473c:	55 1f       	adc	r21, r21
    473e:	59 f0       	breq	.+22     	; 0x4756 <__fp_splitA+0x10>
    4740:	5f 3f       	cpi	r21, 0xFF	; 255
    4742:	71 f0       	breq	.+28     	; 0x4760 <__fp_splitA+0x1a>
    4744:	47 95       	ror	r20

00004746 <__fp_splitA>:
    4746:	88 0f       	add	r24, r24
    4748:	97 fb       	bst	r25, 7
    474a:	99 1f       	adc	r25, r25
    474c:	61 f0       	breq	.+24     	; 0x4766 <__fp_splitA+0x20>
    474e:	9f 3f       	cpi	r25, 0xFF	; 255
    4750:	79 f0       	breq	.+30     	; 0x4770 <__fp_splitA+0x2a>
    4752:	87 95       	ror	r24
    4754:	08 95       	ret
    4756:	12 16       	cp	r1, r18
    4758:	13 06       	cpc	r1, r19
    475a:	14 06       	cpc	r1, r20
    475c:	55 1f       	adc	r21, r21
    475e:	f2 cf       	rjmp	.-28     	; 0x4744 <__fp_split3+0xe>
    4760:	46 95       	lsr	r20
    4762:	f1 df       	rcall	.-30     	; 0x4746 <__fp_splitA>
    4764:	08 c0       	rjmp	.+16     	; 0x4776 <__fp_splitA+0x30>
    4766:	16 16       	cp	r1, r22
    4768:	17 06       	cpc	r1, r23
    476a:	18 06       	cpc	r1, r24
    476c:	99 1f       	adc	r25, r25
    476e:	f1 cf       	rjmp	.-30     	; 0x4752 <__fp_splitA+0xc>
    4770:	86 95       	lsr	r24
    4772:	71 05       	cpc	r23, r1
    4774:	61 05       	cpc	r22, r1
    4776:	08 94       	sec
    4778:	08 95       	ret

0000477a <_exit>:
    477a:	f8 94       	cli

0000477c <__stop_program>:
    477c:	ff cf       	rjmp	.-2      	; 0x477c <__stop_program>
