
tilt_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  00003eb2  00003f46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003eb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  00800216  00800216  0000405c  2**0
                  ALLOC
  3 .stab         0000120c  00000000  00000000  0000405c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003b3  00000000  00000000  00005268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000440  00000000  00000000  0000561b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000197a  00000000  00000000  00005a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008334  00000000  00000000  000073d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003195  00000000  00000000  0000f709  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000553c  00000000  00000000  0001289e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010b0  00000000  00000000  00017ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b96  00000000  00000000  00018e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003909  00000000  00000000  0001ba22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000a45  00000000  00000000  0001f32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000270  00000000  00000000  0001fd70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_23>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__vector_26>
      6c:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 eb       	ldi	r30, 0xB2	; 178
      a0:	fe e3       	ldi	r31, 0x3E	; 62
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 31       	cpi	r26, 0x16	; 22
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a6 e1       	ldi	r26, 0x16	; 22
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a1 34       	cpi	r26, 0x41	; 65
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 20 01 	call	0x240	; 0x240 <main>
      c2:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z13config_changeh>:
/***** Initialization ***********************************/

/* Callback for configuration change. */
void config_change(byte mByteChanged)
{
	if (mByteChanged==3)
      ca:	83 30       	cpi	r24, 0x03	; 3
      cc:	09 f0       	breq	.+2      	; 0xd0 <_Z13config_changeh+0x6>
      ce:	08 95       	ret
	{
		byte Sensitivity = getAccelSensitivity();
      d0:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z19getAccelSensitivityv>
		accel_set_sensitivity( Sensitivity );
      d4:	0e 94 36 03 	call	0x66c	; 0x66c <_Z21accel_set_sensitivityh>
      d8:	08 95       	ret

000000da <_Z17configure_buttonsv>:
}

void configure_buttons()
{
   //   byte value = (SPIPS & ~0x10);
   MCUCR &= ~PUD;  				        // clear the PUD bit
      da:	85 b7       	in	r24, 0x35	; 53
      dc:	8b 7f       	andi	r24, 0xFB	; 251
      de:	85 bf       	out	0x35, r24	; 53
   BUTTON_DDR  &= ~BUTTON_DDR_MASK;     // 0b0001 1000  0=>INPUT
      e0:	84 b1       	in	r24, 0x04	; 4
      e2:	87 7e       	andi	r24, 0xE7	; 231
      e4:	84 b9       	out	0x04, r24	; 4
   BUTTON_PORT |=  BUTTON_DDR_MASK;     // 
      e6:	83 b1       	in	r24, 0x03	; 3
      e8:	88 61       	ori	r24, 0x18	; 24
      ea:	83 b9       	out	0x03, r24	; 3
}
      ec:	08 95       	ret

000000ee <_Z12read_buttonsv>:

void read_buttons()
{
  byte b1_down = 1;
  if ((PINB & 0x10)==0)        // digitalRead( BUTTON1 );
      ee:	83 b1       	in	r24, 0x03	; 3
        b1_down = 0;

  byte b2_down = 1;
  if ((PINB & 0x08)==0)        // digitalRead( BUTTON2 );
      f0:	83 b1       	in	r24, 0x03	; 3
        b2_down = 0;
}
      f2:	08 95       	ret

000000f4 <_Z4initv>:

// Highest Level Init:
void init()
{
 	cli();
      f4:	f8 94       	cli
    chip_init();
      f6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_Z9chip_initv>
	init_leds ();
      fa:	0e 94 cb 10 	call	0x2196	; 0x2196 <_Z9init_ledsv>
	delay(100000);					// ~ 2 sec
      fe:	60 ea       	ldi	r22, 0xA0	; 160
     100:	76 e8       	ldi	r23, 0x86	; 134
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
	read_cal();						// Read everything 
     10a:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z8read_calv>

    // CAN INIT:
    can_init(CAN_250K_BAUD);
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	0e 94 47 0b 	call	0x168e	; 0x168e <_Z8can_inith>

	// CONFIGURATION INIT:
	set_configure_callback( config_change );
     114:	85 e6       	ldi	r24, 0x65	; 101
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_Z22set_configure_callbackPFvhE>
    config_init();
     11c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <_Z11config_initv>
	can_instance_init( );
     120:	0e 94 31 0c 	call	0x1862	; 0x1862 <_Z17can_instance_initv>
	set_rx_callback  ( can_file_message );	// empty 
     124:	8f e2       	ldi	r24, 0x2F	; 47
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 20 08 	call	0x1040	; 0x1040 <_Z15set_rx_callbackPFvP4sCANE>
	sei();
     12c:	78 94       	sei

	// OTHER CHIPS INIT:
	// parameter change:  spi_init(BOOL mAlternatePins, BOOL mMaster, uint8_t mbit_order, uint8_t mSPI_Mode )
	// This change means that the spi.c has been updated since last flashed onto the part.
	// so if there are problems look there!	
    spi_init( FALSE, TRUE, MSBFIRST, SPI_MODE3 );
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	2c e0       	ldi	r18, 0x0C	; 12
     136:	0e 94 41 12 	call	0x2482	; 0x2482 <spi_init>

	accel_init();
     13a:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10accel_initv>
	gyro_init ();
     13e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z9gyro_initv>
	mag_init  ();
     142:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_Z8mag_initv>
	OS_InitTask();
     146:	0e 94 88 14 	call	0x2910	; 0x2910 <_Z11OS_InitTaskv>
}
     14a:	08 95       	ret

0000014c <_Z10send_accelv>:

void send_accel()
{
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
	accel_read_xyz		( &accel );
     154:	05 e2       	ldi	r16, 0x25	; 37
     156:	12 e0       	ldi	r17, 0x02	; 2
     158:	c8 01       	movw	r24, r16
     15a:	0e 94 84 03 	call	0x708	; 0x708 <_Z14accel_read_xyzP4uXYZ>
	can_prep_accel_msg	( &msg1, &accel );
     15e:	cd e7       	ldi	r28, 0x7D	; 125
     160:	d2 e0       	ldi	r29, 0x02	; 2
     162:	ce 01       	movw	r24, r28
     164:	b8 01       	movw	r22, r16
     166:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z18can_prep_accel_msgP4sCANP4uXYZ>
	can_send_msg		( 0, &msg1 );
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	be 01       	movw	r22, r28
     16e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_Z12can_send_msghP4sCAN>
}
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <_Z9send_gyrov>:

void send_gyro()
{
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
	gyro_read_xyz	 ( &gyro 		);
     184:	03 e3       	ldi	r16, 0x33	; 51
     186:	12 e0       	ldi	r17, 0x02	; 2
     188:	c8 01       	movw	r24, r16
     18a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13gyro_read_xyzP4uXYZ>
	can_prep_gyro_msg( &msg2, &gyro );
     18e:	cc e8       	ldi	r28, 0x8C	; 140
     190:	d2 e0       	ldi	r29, 0x02	; 2
     192:	ce 01       	movw	r24, r28
     194:	b8 01       	movw	r22, r16
     196:	0e 94 90 01 	call	0x320	; 0x320 <_Z17can_prep_gyro_msgP4sCANP4uXYZ>
	can_send_msg	 ( 0, &msg2 	);
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	be 01       	movw	r22, r28
     19e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_Z12can_send_msghP4sCAN>
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	08 95       	ret

000001ac <_Z11send_magnetv>:

void send_magnet()
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
	mag_read_xyz	 	( &magnet 		 );
     1b4:	0b e3       	ldi	r16, 0x3B	; 59
     1b6:	12 e0       	ldi	r17, 0x02	; 2
     1b8:	c8 01       	movw	r24, r16
     1ba:	0e 94 25 06 	call	0xc4a	; 0xc4a <_Z12mag_read_xyzP4uXYZ>
	can_prep_magnet_msg	( &msg1, &magnet );
     1be:	cd e7       	ldi	r28, 0x7D	; 125
     1c0:	d2 e0       	ldi	r29, 0x02	; 2
     1c2:	ce 01       	movw	r24, r28
     1c4:	b8 01       	movw	r22, r16
     1c6:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z19can_prep_magnet_msgP4sCANP4uXYZ>
	can_send_msg	 	( 0, &msg1 		 );
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	be 01       	movw	r22, r28
     1ce:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_Z12can_send_msghP4sCAN>
}
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	08 95       	ret

000001dc <_Z17can_init_test_msgv>:

void can_init_test_msg()
{
    msg1.id 	 = create_CAN_eid( 0x00, 0x0092, MyInstance );
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	62 e9       	ldi	r22, 0x92	; 146
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	40 91 b8 02 	lds	r20, 0x02B8
     1e6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <_Z14create_CAN_eidhth>
     1ea:	60 93 7d 02 	sts	0x027D, r22
     1ee:	70 93 7e 02 	sts	0x027E, r23
     1f2:	80 93 7f 02 	sts	0x027F, r24
     1f6:	90 93 80 02 	sts	0x0280, r25
    msg1.data[0] = 0x00;
     1fa:	10 92 82 02 	sts	0x0282, r1
    msg1.data[1] = 0x11;
     1fe:	81 e1       	ldi	r24, 0x11	; 17
     200:	80 93 83 02 	sts	0x0283, r24
    msg1.data[2] = 0x22;
     204:	82 e2       	ldi	r24, 0x22	; 34
     206:	80 93 84 02 	sts	0x0284, r24
    msg1.data[3] = 0x33;
     20a:	83 e3       	ldi	r24, 0x33	; 51
     20c:	80 93 85 02 	sts	0x0285, r24
    msg1.data[4] = 0x44;
     210:	84 e4       	ldi	r24, 0x44	; 68
     212:	80 93 86 02 	sts	0x0286, r24
    msg1.data[5] = 0x55;
     216:	85 e5       	ldi	r24, 0x55	; 85
     218:	80 93 87 02 	sts	0x0287, r24
    msg1.data[6] = 0x66;
     21c:	86 e6       	ldi	r24, 0x66	; 102
     21e:	80 93 88 02 	sts	0x0288, r24
    msg1.data[7] = 0x77;
     222:	87 e7       	ldi	r24, 0x77	; 119
     224:	80 93 89 02 	sts	0x0289, r24
    msg1.header.DLC = 8;
     228:	80 91 81 02 	lds	r24, 0x0281
     22c:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     22e:	80 61       	ori	r24, 0x10	; 16
     230:	80 93 81 02 	sts	0x0281, r24
	can_send_msg	 	( 0, &msg1 	);    
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	6d e7       	ldi	r22, 0x7D	; 125
     238:	72 e0       	ldi	r23, 0x02	; 2
     23a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_Z12can_send_msghP4sCAN>
}
     23e:	08 95       	ret

00000240 <main>:
	C) Repeat for Magnetometer DRDY interrupt.

***************************************************************/
int main(void)
{
	init();
     240:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z4initv>
    while (1)		// BACKGROUND TASKS HERE:
    {
		//can_init_test_msg();
		//strobe_leds(1);
		delay(one_second/5);
     244:	60 e8       	ldi	r22, 0x80	; 128
     246:	78 e3       	ldi	r23, 0x38	; 56
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
		//strobe_leds(0);
		delay(one_second/5);
     250:	60 e8       	ldi	r22, 0x80	; 128
     252:	78 e3       	ldi	r23, 0x38	; 56
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
     25c:	f3 cf       	rjmp	.-26     	; 0x244 <main+0x4>

0000025e <_Z16can_file_messageP4sCAN>:
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
************************************************************/
void can_file_message( sCAN* mMsg )
{
}
     25e:	08 95       	ret

00000260 <_Z28can_prep_generic_XYZ_msg_msbP4sCANP4uXYZ>:

void can_prep_generic_XYZ_msg_msb( sCAN* mMsg, union uXYZ* mData )
{
     260:	fc 01       	movw	r30, r24
     262:	db 01       	movw	r26, r22
	// mMsg->id should be set before calling!
	mMsg->data[0] = mData->array[0];		// hi for atmel goes to the 2nd byte (little endian)
     264:	8c 91       	ld	r24, X
     266:	85 83       	std	Z+5, r24	; 0x05
	mMsg->data[1] = mData->array[1];		// We really should go thru the array part of the union
     268:	11 96       	adiw	r26, 0x01	; 1
     26a:	8c 91       	ld	r24, X
     26c:	11 97       	sbiw	r26, 0x01	; 1
     26e:	86 83       	std	Z+6, r24	; 0x06
	mMsg->data[2] = mData->array[2];		// I'd change it, but not sure what else this would effect
     270:	12 96       	adiw	r26, 0x02	; 2
     272:	8c 91       	ld	r24, X
     274:	12 97       	sbiw	r26, 0x02	; 2
     276:	87 83       	std	Z+7, r24	; 0x07
	mMsg->data[3] = mData->array[3];		// May cause a problem by other callers.  So Use new function 
     278:	13 96       	adiw	r26, 0x03	; 3
     27a:	8c 91       	ld	r24, X
     27c:	13 97       	sbiw	r26, 0x03	; 3
     27e:	80 87       	std	Z+8, r24	; 0x08
	mMsg->data[4] = mData->array[4];		// can_prep_generic_XYZ_msg() 
     280:	14 96       	adiw	r26, 0x04	; 4
     282:	8c 91       	ld	r24, X
     284:	14 97       	sbiw	r26, 0x04	; 4
     286:	81 87       	std	Z+9, r24	; 0x09
	mMsg->data[5] = mData->array[5];
     288:	15 96       	adiw	r26, 0x05	; 5
     28a:	8c 91       	ld	r24, X
     28c:	15 97       	sbiw	r26, 0x05	; 5
     28e:	82 87       	std	Z+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     290:	84 81       	ldd	r24, Z+4	; 0x04
     292:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     294:	8c 60       	ori	r24, 0x0C	; 12
     296:	84 83       	std	Z+4, r24	; 0x04
}
     298:	08 95       	ret

0000029a <_Z24can_prep_generic_XYZ_msgP4sCANP4uXYZ>:

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
     29a:	fc 01       	movw	r30, r24
     29c:	db 01       	movw	r26, r22
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     29e:	11 96       	adiw	r26, 0x01	; 1
     2a0:	8c 91       	ld	r24, X
     2a2:	11 97       	sbiw	r26, 0x01	; 1
     2a4:	85 83       	std	Z+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     2a6:	8c 91       	ld	r24, X
     2a8:	86 83       	std	Z+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     2aa:	13 96       	adiw	r26, 0x03	; 3
     2ac:	8c 91       	ld	r24, X
     2ae:	13 97       	sbiw	r26, 0x03	; 3
     2b0:	87 83       	std	Z+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     2b2:	12 96       	adiw	r26, 0x02	; 2
     2b4:	8c 91       	ld	r24, X
     2b6:	12 97       	sbiw	r26, 0x02	; 2
     2b8:	80 87       	std	Z+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     2ba:	15 96       	adiw	r26, 0x05	; 5
     2bc:	8c 91       	ld	r24, X
     2be:	15 97       	sbiw	r26, 0x05	; 5
     2c0:	81 87       	std	Z+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     2c2:	14 96       	adiw	r26, 0x04	; 4
     2c4:	8c 91       	ld	r24, X
     2c6:	14 97       	sbiw	r26, 0x04	; 4
     2c8:	82 87       	std	Z+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     2ca:	84 81       	ldd	r24, Z+4	; 0x04
     2cc:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     2ce:	8c 60       	ori	r24, 0x0C	; 12
     2d0:	84 83       	std	Z+4, r24	; 0x04
}
     2d2:	08 95       	ret

000002d4 <_Z18can_prep_accel_msgP4sCANP4uXYZ>:

/* RAW DEVICE - CAN MESSAGES */
void can_prep_accel_msg		( sCAN* mMsg, union uXYZ* mData )
{
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	ec 01       	movw	r28, r24
     2de:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_ACCEL_XYZ, MyInstance);
     2e0:	81 e7       	ldi	r24, 0x71	; 113
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	60 91 b8 02 	lds	r22, 0x02B8
     2e8:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     2ec:	68 83       	st	Y, r22
     2ee:	79 83       	std	Y+1, r23	; 0x01
     2f0:	8a 83       	std	Y+2, r24	; 0x02
     2f2:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     2f4:	f8 01       	movw	r30, r16
     2f6:	81 81       	ldd	r24, Z+1	; 0x01
     2f8:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     2fa:	80 81       	ld	r24, Z
     2fc:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     2fe:	83 81       	ldd	r24, Z+3	; 0x03
     300:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     306:	85 81       	ldd	r24, Z+5	; 0x05
     308:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     30a:	84 81       	ldd	r24, Z+4	; 0x04
     30c:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     30e:	8c 81       	ldd	r24, Y+4	; 0x04
     310:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     312:	8c 60       	ori	r24, 0x0C	; 12
     314:	8c 83       	std	Y+4, r24	; 0x04
/* RAW DEVICE - CAN MESSAGES */
void can_prep_accel_msg		( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_ACCEL_XYZ, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret

00000320 <_Z17can_prep_gyro_msgP4sCANP4uXYZ>:
void can_prep_gyro_msg		( sCAN* mMsg, union uXYZ* mData )
{
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	ec 01       	movw	r28, r24
     32a:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_GYRO_XYZ, MyInstance);
     32c:	82 e7       	ldi	r24, 0x72	; 114
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	60 91 b8 02 	lds	r22, 0x02B8
     334:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     338:	68 83       	st	Y, r22
     33a:	79 83       	std	Y+1, r23	; 0x01
     33c:	8a 83       	std	Y+2, r24	; 0x02
     33e:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     340:	f8 01       	movw	r30, r16
     342:	81 81       	ldd	r24, Z+1	; 0x01
     344:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     346:	80 81       	ld	r24, Z
     348:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     34a:	83 81       	ldd	r24, Z+3	; 0x03
     34c:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     34e:	82 81       	ldd	r24, Z+2	; 0x02
     350:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     352:	85 81       	ldd	r24, Z+5	; 0x05
     354:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     356:	84 81       	ldd	r24, Z+4	; 0x04
     358:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     35e:	8c 60       	ori	r24, 0x0C	; 12
     360:	8c 83       	std	Y+4, r24	; 0x04
}
void can_prep_gyro_msg		( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_GYRO_XYZ, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <_Z19can_prep_magnet_msgP4sCANP4uXYZ>:
void can_prep_magnet_msg	( sCAN* mMsg, union uXYZ* mData )
{
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	ec 01       	movw	r28, r24
     376:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_MAGNET_XYZ, MyInstance);
     378:	83 e7       	ldi	r24, 0x73	; 115
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	60 91 b8 02 	lds	r22, 0x02B8
     380:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     384:	68 83       	st	Y, r22
     386:	79 83       	std	Y+1, r23	; 0x01
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg_msb( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = mData->array[0];		// hi for atmel goes to the 2nd byte (little endian)
     38c:	f8 01       	movw	r30, r16
     38e:	80 81       	ld	r24, Z
     390:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = mData->array[1];		// We really should go thru the array part of the union
     392:	81 81       	ldd	r24, Z+1	; 0x01
     394:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = mData->array[2];		// I'd change it, but not sure what else this would effect
     396:	82 81       	ldd	r24, Z+2	; 0x02
     398:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = mData->array[3];		// May cause a problem by other callers.  So Use new function 
     39a:	83 81       	ldd	r24, Z+3	; 0x03
     39c:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = mData->array[4];		// can_prep_generic_XYZ_msg() 
     39e:	84 81       	ldd	r24, Z+4	; 0x04
     3a0:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = mData->array[5];
     3a2:	85 81       	ldd	r24, Z+5	; 0x05
     3a4:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     3a6:	8c 81       	ldd	r24, Y+4	; 0x04
     3a8:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     3aa:	8c 60       	ori	r24, 0x0C	; 12
     3ac:	8c 83       	std	Y+4, r24	; 0x04
}
void can_prep_magnet_msg	( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_MAGNET_XYZ, MyInstance);
	can_prep_generic_XYZ_msg_msb( mMsg, mData );
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <_Z27can_prep_total_position_msgP4sCANP4uXYZ>:

/* PROCESSED DATA - CAN MESSAGES */

// ***** POSITION *****  (TRANSLATIONAL & ANGULAR)
void can_prep_total_position_msg( sCAN* mMsg, union uXYZ* mData )
{
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ec 01       	movw	r28, r24
     3c2:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_POSITION_XYZ, MyInstance);
     3c4:	84 e7       	ldi	r24, 0x74	; 116
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	60 91 b8 02 	lds	r22, 0x02B8
     3cc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     3d0:	68 83       	st	Y, r22
     3d2:	79 83       	std	Y+1, r23	; 0x01
     3d4:	8a 83       	std	Y+2, r24	; 0x02
     3d6:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     3d8:	f8 01       	movw	r30, r16
     3da:	81 81       	ldd	r24, Z+1	; 0x01
     3dc:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     3de:	80 81       	ld	r24, Z
     3e0:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     3e2:	83 81       	ldd	r24, Z+3	; 0x03
     3e4:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     3e6:	82 81       	ldd	r24, Z+2	; 0x02
     3e8:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     3ea:	85 81       	ldd	r24, Z+5	; 0x05
     3ec:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     3ee:	84 81       	ldd	r24, Z+4	; 0x04
     3f0:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     3f2:	8c 81       	ldd	r24, Y+4	; 0x04
     3f4:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     3f6:	8c 60       	ori	r24, 0x0C	; 12
     3f8:	8c 83       	std	Y+4, r24	; 0x04
// ***** POSITION *****  (TRANSLATIONAL & ANGULAR)
void can_prep_total_position_msg( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_POSITION_XYZ, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	08 95       	ret

00000404 <_Z35can_prep_total_angular_position_msgP4sCANP4uXYZ>:
void can_prep_total_angular_position_msg( sCAN* mMsg, union uXYZ* mData )
{
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	ec 01       	movw	r28, r24
     40e:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_POSITION_ABC, MyInstance);
     410:	85 e7       	ldi	r24, 0x75	; 117
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	60 91 b8 02 	lds	r22, 0x02B8
     418:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     41c:	68 83       	st	Y, r22
     41e:	79 83       	std	Y+1, r23	; 0x01
     420:	8a 83       	std	Y+2, r24	; 0x02
     422:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     424:	f8 01       	movw	r30, r16
     426:	81 81       	ldd	r24, Z+1	; 0x01
     428:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     42a:	80 81       	ld	r24, Z
     42c:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     42e:	83 81       	ldd	r24, Z+3	; 0x03
     430:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     432:	82 81       	ldd	r24, Z+2	; 0x02
     434:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     436:	85 81       	ldd	r24, Z+5	; 0x05
     438:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     43a:	84 81       	ldd	r24, Z+4	; 0x04
     43c:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     43e:	8c 81       	ldd	r24, Y+4	; 0x04
     440:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     442:	8c 60       	ori	r24, 0x0C	; 12
     444:	8c 83       	std	Y+4, r24	; 0x04
}
void can_prep_total_angular_position_msg( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_POSITION_ABC, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <_Z27can_prep_total_velocity_msgP4sCANP4uXYZ>:

// ***** VELOCITY ***** (TRANSLATIONAL & ANGULAR)
void can_prep_total_velocity_msg( sCAN* mMsg, union uXYZ* mData )
{
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	ec 01       	movw	r28, r24
     45a:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_VELOCITY_XYZ, MyInstance);
     45c:	86 e7       	ldi	r24, 0x76	; 118
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	60 91 b8 02 	lds	r22, 0x02B8
     464:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     468:	68 83       	st	Y, r22
     46a:	79 83       	std	Y+1, r23	; 0x01
     46c:	8a 83       	std	Y+2, r24	; 0x02
     46e:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     470:	f8 01       	movw	r30, r16
     472:	81 81       	ldd	r24, Z+1	; 0x01
     474:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     476:	80 81       	ld	r24, Z
     478:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     47a:	83 81       	ldd	r24, Z+3	; 0x03
     47c:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     47e:	82 81       	ldd	r24, Z+2	; 0x02
     480:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     482:	85 81       	ldd	r24, Z+5	; 0x05
     484:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     486:	84 81       	ldd	r24, Z+4	; 0x04
     488:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     48a:	8c 81       	ldd	r24, Y+4	; 0x04
     48c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     48e:	8c 60       	ori	r24, 0x0C	; 12
     490:	8c 83       	std	Y+4, r24	; 0x04
// ***** VELOCITY ***** (TRANSLATIONAL & ANGULAR)
void can_prep_total_velocity_msg( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_VELOCITY_XYZ, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );	
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	08 95       	ret

0000049c <_Z35can_prep_total_angular_velocity_msgP4sCANP4uXYZ>:
void can_prep_total_angular_velocity_msg( sCAN* mMsg, union uXYZ* mData )
{
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
     4a6:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_VELOCITY_ABC, MyInstance);
     4a8:	87 e7       	ldi	r24, 0x77	; 119
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	60 91 b8 02 	lds	r22, 0x02B8
     4b0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     4b4:	68 83       	st	Y, r22
     4b6:	79 83       	std	Y+1, r23	; 0x01
     4b8:	8a 83       	std	Y+2, r24	; 0x02
     4ba:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     4bc:	f8 01       	movw	r30, r16
     4be:	81 81       	ldd	r24, Z+1	; 0x01
     4c0:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     4c2:	80 81       	ld	r24, Z
     4c4:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     4c6:	83 81       	ldd	r24, Z+3	; 0x03
     4c8:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     4ca:	82 81       	ldd	r24, Z+2	; 0x02
     4cc:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     4ce:	85 81       	ldd	r24, Z+5	; 0x05
     4d0:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     4d2:	84 81       	ldd	r24, Z+4	; 0x04
     4d4:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     4d6:	8c 81       	ldd	r24, Y+4	; 0x04
     4d8:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     4da:	8c 60       	ori	r24, 0x0C	; 12
     4dc:	8c 83       	std	Y+4, r24	; 0x04
}
void can_prep_total_angular_velocity_msg( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_VELOCITY_ABC, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	08 95       	ret

000004e8 <_Z31can_prep_total_acceleration_msgP4sCANP4uXYZ>:

// ***** ACCELERATION *****  (TRANSLATIONAL & ANGULAR)
// these are not supported currently.
void can_prep_total_acceleration_msg( sCAN* mMsg, union uXYZ* mData )
{
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
     4f2:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_ACCELERATION_XYZ, MyInstance);
     4f4:	88 e7       	ldi	r24, 0x78	; 120
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	60 91 b8 02 	lds	r22, 0x02B8
     4fc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     500:	68 83       	st	Y, r22
     502:	79 83       	std	Y+1, r23	; 0x01
     504:	8a 83       	std	Y+2, r24	; 0x02
     506:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     508:	f8 01       	movw	r30, r16
     50a:	81 81       	ldd	r24, Z+1	; 0x01
     50c:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     50e:	80 81       	ld	r24, Z
     510:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     512:	83 81       	ldd	r24, Z+3	; 0x03
     514:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     516:	82 81       	ldd	r24, Z+2	; 0x02
     518:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     51a:	85 81       	ldd	r24, Z+5	; 0x05
     51c:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     522:	8c 81       	ldd	r24, Y+4	; 0x04
     524:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     526:	8c 60       	ori	r24, 0x0C	; 12
     528:	8c 83       	std	Y+4, r24	; 0x04
// these are not supported currently.
void can_prep_total_acceleration_msg( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_ACCELERATION_XYZ, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <_Z39can_prep_total_angular_acceleration_msgP4sCANP4uXYZ>:
void can_prep_total_angular_acceleration_msg( sCAN* mMsg, union uXYZ* mData )
{
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	ec 01       	movw	r28, r24
     53e:	8b 01       	movw	r16, r22
	mMsg->id = create_CAN_eid(ID_ACCELERATION_ABC, MyInstance);
     540:	89 e7       	ldi	r24, 0x79	; 121
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	60 91 b8 02 	lds	r22, 0x02B8
     548:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     54c:	68 83       	st	Y, r22
     54e:	79 83       	std	Y+1, r23	; 0x01
     550:	8a 83       	std	Y+2, r24	; 0x02
     552:	9b 83       	std	Y+3, r25	; 0x03
}

void can_prep_generic_XYZ_msg( sCAN* mMsg, union uXYZ* mData )
{
	// mMsg->id should be set before calling!
	mMsg->data[0] = hi(mData->value[0]);		// hi for atmel goes to the 2nd byte (little endian)
     554:	f8 01       	movw	r30, r16
     556:	81 81       	ldd	r24, Z+1	; 0x01
     558:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = lo(mData->value[0]);		// We really should go thru the array part of the union
     55a:	80 81       	ld	r24, Z
     55c:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] = hi(mData->value[1]);		// I'd change it, but not sure what else this would effect
     55e:	83 81       	ldd	r24, Z+3	; 0x03
     560:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] = lo(mData->value[1]);		// May cause a problem by other callers.  So Use new function 
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] = hi(mData->value[2]);		// can_prep_generic_XYZ_msg() 
     566:	85 81       	ldd	r24, Z+5	; 0x05
     568:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] = lo(mData->value[2]);
     56a:	84 81       	ldd	r24, Z+4	; 0x04
     56c:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->header.DLC = 6;
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     572:	8c 60       	ori	r24, 0x0C	; 12
     574:	8c 83       	std	Y+4, r24	; 0x04
}
void can_prep_total_angular_acceleration_msg( sCAN* mMsg, union uXYZ* mData )
{
	mMsg->id = create_CAN_eid(ID_ACCELERATION_ABC, MyInstance);
	can_prep_generic_XYZ_msg( mMsg, mData );
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <_Z10accel_readh>:
FUNCTIONS READ/WRITE TO THE LIS3D ACCELEROMETER CHIP 
*****************************************************/
byte last_read = 0x00;
byte accel_read( byte address )
{
  SET_CS_ACCEL_LOW
     580:	5a 98       	cbi	0x0b, 2	; 11
  byte Address = (address | 0x80);	 // set read bit
     582:	80 68       	ori	r24, 0x80	; 128
  Address     &= ~(0x40);        	 // Clear the MS_ bit for single reg read (address remains same between sequences)
  spi_transfer(Address);			 // 
     584:	8f 7b       	andi	r24, 0xBF	; 191
     586:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  last_read = spi_transfer(0x00);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
     590:	80 93 32 02 	sts	0x0232, r24
  SET_CS_ACCEL_HIGH
     594:	5a 9a       	sbi	0x0b, 2	; 11
  return last_read;
}
     596:	08 95       	ret

00000598 <_Z16accel_multi_readhPhh>:

void accel_multi_read( byte address, byte* mData, byte mLength )
{
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <_Z16accel_multi_readhPhh+0x12>
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	e4 2e       	mov	r14, r20
/* The pattern then is 
	OUT_X_L, OUT_X_H, 
	OUT_Y_L, OUT_Y_H
	OUT_Z_L, OUT_Z_H	*/

  SET_CS_ACCEL_LOW
     5b0:	5a 98       	cbi	0x0b, 2	; 11
  byte Address = (address);
  Address |= 0x80;            // set read bit
  Address |= 0x40;            // Set the Multiple bit.  address increment by 1
  spi_transfer(Address);
     5b2:	80 6c       	ori	r24, 0xC0	; 192
     5b4:	69 83       	std	Y+1, r22	; 0x01
     5b6:	7a 83       	std	Y+2, r23	; 0x02
     5b8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  for (int i=0; i<mLength; i++)
     5bc:	ff 24       	eor	r15, r15
     5be:	69 81       	ldd	r22, Y+1	; 0x01
     5c0:	7a 81       	ldd	r23, Y+2	; 0x02
     5c2:	e1 14       	cp	r14, r1
     5c4:	f1 04       	cpc	r15, r1
     5c6:	81 f0       	breq	.+32     	; 0x5e8 <_Z16accel_multi_readhPhh+0x50>
     5c8:	06 2f       	mov	r16, r22
     5ca:	17 2f       	mov	r17, r23
     5cc:	cc 24       	eor	r12, r12
     5ce:	dd 24       	eor	r13, r13
  {
      mData[i] = spi_transfer(0xFF);
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
     5d6:	f8 01       	movw	r30, r16
     5d8:	81 93       	st	Z+, r24
     5da:	8f 01       	movw	r16, r30
  SET_CS_ACCEL_LOW
  byte Address = (address);
  Address |= 0x80;            // set read bit
  Address |= 0x40;            // Set the Multiple bit.  address increment by 1
  spi_transfer(Address);
  for (int i=0; i<mLength; i++)
     5dc:	08 94       	sec
     5de:	c1 1c       	adc	r12, r1
     5e0:	d1 1c       	adc	r13, r1
     5e2:	ce 14       	cp	r12, r14
     5e4:	df 04       	cpc	r13, r15
     5e6:	a4 f3       	brlt	.-24     	; 0x5d0 <_Z16accel_multi_readhPhh+0x38>
  {
      mData[i] = spi_transfer(0xFF);
  }
  SET_CS_ACCEL_HIGH
     5e8:	5a 9a       	sbi	0x0b, 2	; 11
}
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	cf 91       	pop	r28
     5f0:	df 91       	pop	r29
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret

00000600 <_Z11accel_writehh>:

void accel_write( byte address, byte value )
{
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	0f 92       	push	r0
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
  // For LIS3D, SPI is setup for MSBFIRST.  Meaning RW is msb 
  // and MS is 2nd highest bit.
  SET_CS_ACCEL_LOW  
     60a:	5a 98       	cbi	0x0b, 2	; 11
  // byte Address = (address)|0x40;	 // Write + Auto Increment
  spi_transfer(address);
     60c:	69 83       	std	Y+1, r22	; 0x01
     60e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  spi_transfer(value);
     612:	69 81       	ldd	r22, Y+1	; 0x01
     614:	86 2f       	mov	r24, r22
     616:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  SET_CS_ACCEL_HIGH
     61a:	5a 9a       	sbi	0x0b, 2	; 11
}
     61c:	0f 90       	pop	r0
     61e:	cf 91       	pop	r28
     620:	df 91       	pop	r29
     622:	08 95       	ret

00000624 <_Z15accel_data_rateh>:

/************** CONFIGURATION ******************************/
// Use one of the defines (SAMPLE_10HZ) in the header.
void accel_data_rate(byte mDataRate )
{
	accel_write( CTRL_REG1, mDataRate|0x07 );
     624:	68 2f       	mov	r22, r24
     626:	67 60       	ori	r22, 0x07	; 7
     628:	80 e2       	ldi	r24, 0x20	; 32
     62a:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     62e:	08 95       	ret

00000630 <_Z24accel_temperature_enablev>:
void accel_temperature_enable( )
{
	// Turns on aux ADC (external ADC123 pins)
	accel_write( TEMP_CFG_REG, 0xC0 );	
     630:	8f e1       	ldi	r24, 0x1F	; 31
     632:	60 ec       	ldi	r22, 0xC0	; 192
     634:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     638:	08 95       	ret

0000063a <_Z25accel_temperature_disablev>:
void accel_temperature_disable( )
{
	// Turns on aux ADC (external ADC123 pins)
	accel_write( TEMP_CFG_REG, 0x80 );
     63a:	8f e1       	ldi	r24, 0x1F	; 31
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     642:	08 95       	ret

00000644 <_Z17accel_bypass_modev>:

/************** MODES OF OPERATION *************************/
void accel_bypass_mode()
{ // measurements skip over the FIFO
	accel_write( FIFO_CTRL_REG, 0x00);		// bypass
     644:	8e e2       	ldi	r24, 0x2E	; 46
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     64c:	08 95       	ret

0000064e <_Z15accel_FIFO_modev>:
void accel_FIFO_mode()
{ // 32 slots
	accel_write( FIFO_CTRL_REG, 0x40);		
     64e:	8e e2       	ldi	r24, 0x2E	; 46
     650:	60 e4       	ldi	r22, 0x40	; 64
     652:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     656:	08 95       	ret

00000658 <_Z17accel_stream_modev>:
void accel_stream_mode()
{ 
	accel_write( FIFO_CTRL_REG, 0x80);		
     658:	8e e2       	ldi	r24, 0x2E	; 46
     65a:	60 e8       	ldi	r22, 0x80	; 128
     65c:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     660:	08 95       	ret

00000662 <_Z18accel_trigger_modev>:
void accel_trigger_mode()	// stream_to_FIFO
{ 
	accel_write( FIFO_CTRL_REG, 0xC0);		
     662:	8e e2       	ldi	r24, 0x2E	; 46
     664:	60 ec       	ldi	r22, 0xC0	; 192
     666:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     66a:	08 95       	ret

0000066c <_Z21accel_set_sensitivityh>:

// 2g, 4g, 8g, 16g
void accel_set_sensitivity( byte Sensitivity )	
{
	accel_write( CTRL_REG4, Sensitivity<<4 );
     66c:	68 2f       	mov	r22, r24
     66e:	62 95       	swap	r22
     670:	60 7f       	andi	r22, 0xF0	; 240
     672:	83 e2       	ldi	r24, 0x23	; 35
     674:	0e 94 00 03 	call	0x600	; 0x600 <_Z11accel_writehh>
}
     678:	08 95       	ret

0000067a <_Z10accel_initv>:
*****************************************************/
void accel_init()
{
	// MOSI,MISO,SCK Pins are already setup in spi.c init()
	// See CS_DDR_MASK definition in "pin_definitions.h"
	CS_DDR  |= CS_ACCEL;
     67a:	52 9a       	sbi	0x0a, 2	; 10
	INT_DDR &= ~(ACCEL_INT1|ACCEL_INT2);	// Make Interrupt line an input
     67c:	87 b1       	in	r24, 0x07	; 7
     67e:	8f 73       	andi	r24, 0x3F	; 63
     680:	87 b9       	out	0x07, r24	; 7

	spi_setDataMode( SPI_MODE3    );
     682:	8c e0       	ldi	r24, 0x0C	; 12
     684:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
	accel_data_rate( SAMPLE_400HZ );
     688:	80 e7       	ldi	r24, 0x70	; 112
     68a:	0e 94 12 03 	call	0x624	; 0x624 <_Z15accel_data_rateh>
	accel_bypass_mode();
     68e:	0e 94 22 03 	call	0x644	; 0x644 <_Z17accel_bypass_modev>

	byte reg = getAccelSensitivity();		// Get from EEPROM Config - 0x03 mask
     692:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z19getAccelSensitivityv>
	accel_set_sensitivity(reg);				// Set in the LIS3D
     696:	0e 94 36 03 	call	0x66c	; 0x66c <_Z21accel_set_sensitivityh>

//	DDRC   |= 0xC0;			// inputs
//	PCMSK1 |= 0xC0;			// Enable Pin Change interrupt pins ACCEL_INT1, ACCEL_INT2 on PC6 & PC7
//	PCICR  |= (1<<PCIE1);	// Enable PinChangeInterrupt 1
}
     69a:	08 95       	ret

0000069c <_Z12accel_read_Xv>:
	accel_write( FIFO_CTRL_REG, 0x00);		
}*/

/******** XYZ DATA ********************************************/
word accel_read_X()
{
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
  short result = 0x00;
  result   = accel_read( OUT_X_L );
     6a0:	88 e2       	ldi	r24, 0x28	; 40
     6a2:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10accel_readh>
     6a6:	c8 2f       	mov	r28, r24
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
  byte tmp = accel_read( OUT_X_H );
     6aa:	89 e2       	ldi	r24, 0x29	; 41
     6ac:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10accel_readh>
  result   += (tmp<<8);
     6b0:	38 2f       	mov	r19, r24
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	c2 0f       	add	r28, r18
     6b6:	d3 1f       	adc	r29, r19
  return result;
}
     6b8:	ce 01       	movw	r24, r28
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <_Z12accel_read_Yv>:
word accel_read_Y()
{
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
  short result = 0x00;
  result   = accel_read( OUT_Y_L );
     6c4:	8a e2       	ldi	r24, 0x2A	; 42
     6c6:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10accel_readh>
     6ca:	c8 2f       	mov	r28, r24
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
  byte tmp = accel_read( OUT_Y_H );
     6ce:	8b e2       	ldi	r24, 0x2B	; 43
     6d0:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10accel_readh>
  result += (tmp<<8);
     6d4:	38 2f       	mov	r19, r24
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	c2 0f       	add	r28, r18
     6da:	d3 1f       	adc	r29, r19
  return result;
}
     6dc:	ce 01       	movw	r24, r28
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <_Z12accel_read_Zv>:
word accel_read_Z()
{
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
  short result = 0x00;
  result   = accel_read( OUT_Z_L );
     6e8:	8c e2       	ldi	r24, 0x2C	; 44
     6ea:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10accel_readh>
     6ee:	c8 2f       	mov	r28, r24
     6f0:	d0 e0       	ldi	r29, 0x00	; 0
  byte tmp = accel_read( OUT_Z_H );
     6f2:	8d e2       	ldi	r24, 0x2D	; 45
     6f4:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10accel_readh>
  result += (tmp<<8);
     6f8:	38 2f       	mov	r19, r24
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	c2 0f       	add	r28, r18
     6fe:	d3 1f       	adc	r29, r19
  return result;
}
     700:	ce 01       	movw	r24, r28
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <_Z14accel_read_xyzP4uXYZ>:
void accel_read_xyz( uXYZ* mXYZ)
{
     708:	bc 01       	movw	r22, r24
   accel_multi_read( OUT_X_L, mXYZ->array, 6 );
     70a:	88 e2       	ldi	r24, 0x28	; 40
     70c:	46 e0       	ldi	r20, 0x06	; 6
     70e:	0e 94 cc 02 	call	0x598	; 0x598 <_Z16accel_multi_readhPhh>
}
     712:	08 95       	ret

00000714 <__vector_23>:

/*****************************************************
ISR - READ DATA WHEN COMPLETE
*****************************************************/
ISR( PCINT1_vect )
{
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
	//This is also vector for Gyro Int.
	if ((INT_PORT_IN & ACCEL_INT1) && (INT_PORT_IN & ACCEL_INT2))
     736:	36 9b       	sbis	0x06, 6	; 6
     738:	02 c0       	rjmp	.+4      	; 0x73e <__vector_23+0x2a>
     73a:	37 99       	sbic	0x06, 7	; 6
     73c:	15 c0       	rjmp	.+42     	; 0x768 <__vector_23+0x54>
	{
		accel_read_xyz		( &accel );
		swap_bytes			( &accel );	
		ReadyToSend = TRUE;
	}
	else if (INT_PORT_IN & GYRO_INT1)
     73e:	31 9b       	sbis	0x06, 1	; 6
     740:	02 c0       	rjmp	.+4      	; 0x746 <__vector_23+0x32>
		gyro_isr();
     742:	0e 94 4d 04 	call	0x89a	; 0x89a <_Z8gyro_isrv>
}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	7f 91       	pop	r23
     754:	6f 91       	pop	r22
     756:	5f 91       	pop	r21
     758:	4f 91       	pop	r20
     75a:	3f 91       	pop	r19
     75c:	2f 91       	pop	r18
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti
ISR( PCINT1_vect )
{
	//This is also vector for Gyro Int.
	if ((INT_PORT_IN & ACCEL_INT1) && (INT_PORT_IN & ACCEL_INT2))
	{
		accel_read_xyz		( &accel );
     768:	85 e2       	ldi	r24, 0x25	; 37
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	0e 94 84 03 	call	0x708	; 0x708 <_Z14accel_read_xyzP4uXYZ>
}

void swap_bytes(  uXYZ* mXYZ )
{
	short tmp = mXYZ->coords.x;
	mXYZ->coords.x = hi(tmp) + (lo(tmp)<<8);
     770:	30 91 25 02 	lds	r19, 0x0225
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	80 91 26 02 	lds	r24, 0x0226
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	82 0f       	add	r24, r18
     77e:	93 1f       	adc	r25, r19
     780:	90 93 26 02 	sts	0x0226, r25
     784:	80 93 25 02 	sts	0x0225, r24
	tmp = mXYZ->coords.y;
	mXYZ->coords.y = hi(tmp) + (lo(tmp)<<8);
     788:	30 91 27 02 	lds	r19, 0x0227
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	80 91 28 02 	lds	r24, 0x0228
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 0f       	add	r24, r18
     796:	93 1f       	adc	r25, r19
     798:	90 93 28 02 	sts	0x0228, r25
     79c:	80 93 27 02 	sts	0x0227, r24
	tmp = mXYZ->coords.z;
	mXYZ->coords.z = hi(tmp) + (lo(tmp)<<8);
     7a0:	30 91 29 02 	lds	r19, 0x0229
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	80 91 2a 02 	lds	r24, 0x022A
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	90 93 2a 02 	sts	0x022A, r25
     7b4:	80 93 29 02 	sts	0x0229, r24
	//This is also vector for Gyro Int.
	if ((INT_PORT_IN & ACCEL_INT1) && (INT_PORT_IN & ACCEL_INT2))
	{
		accel_read_xyz		( &accel );
		swap_bytes			( &accel );	
		ReadyToSend = TRUE;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 31 02 	sts	0x0231, r24
     7be:	c3 cf       	rjmp	.-122    	; 0x746 <__vector_23+0x32>

000007c0 <_Z10swap_bytesP4uXYZ>:
{
   accel_multi_read( OUT_X_L, mXYZ->array, 6 );
}

void swap_bytes(  uXYZ* mXYZ )
{
     7c0:	fc 01       	movw	r30, r24
	short tmp = mXYZ->coords.x;
	mXYZ->coords.x = hi(tmp) + (lo(tmp)<<8);
     7c2:	30 81       	ld	r19, Z
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
	tmp = mXYZ->coords.y;
	mXYZ->coords.y = hi(tmp) + (lo(tmp)<<8);
     7d2:	32 81       	ldd	r19, Z+2	; 0x02
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	83 81       	ldd	r24, Z+3	; 0x03
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	93 83       	std	Z+3, r25	; 0x03
     7e0:	82 83       	std	Z+2, r24	; 0x02
	tmp = mXYZ->coords.z;
	mXYZ->coords.z = hi(tmp) + (lo(tmp)<<8);
     7e2:	34 81       	ldd	r19, Z+4	; 0x04
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	85 81       	ldd	r24, Z+5	; 0x05
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	95 83       	std	Z+5, r25	; 0x05
     7f0:	84 83       	std	Z+4, r24	; 0x04
}
     7f2:	08 95       	ret

000007f4 <_Z20accel_new_data_availv>:

byte accel_new_data_avail()
{
  byte result = accel_read( STATUS_REG_AUX );
     7f4:	87 e0       	ldi	r24, 0x07	; 7
     7f6:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10accel_readh>
/*  if ((result & 0x03) > 0)
    result = 1;
  else 
    result = 0; */
  return result;
}
     7fa:	08 95       	ret

000007fc <_Z19can_blank_accel_msghh>:

void can_blank_accel_msg(byte m1, byte m2)
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	d8 2f       	mov	r29, r24
     802:	c6 2f       	mov	r28, r22
    msg2.id = create_CAN_eid( ID_ACCEL_XYZ, MyInstance );
     804:	81 e7       	ldi	r24, 0x71	; 113
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	60 91 b8 02 	lds	r22, 0x02B8
     80c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
     810:	60 93 8c 02 	sts	0x028C, r22
     814:	70 93 8d 02 	sts	0x028D, r23
     818:	80 93 8e 02 	sts	0x028E, r24
     81c:	90 93 8f 02 	sts	0x028F, r25
    msg2.data[0] = m1;
     820:	d0 93 91 02 	sts	0x0291, r29
    msg2.data[1] = m2;
     824:	c0 93 92 02 	sts	0x0292, r28
    msg2.data[2] = 0x33;
     828:	83 e3       	ldi	r24, 0x33	; 51
     82a:	80 93 93 02 	sts	0x0293, r24
    msg2.data[3] = 0x44;
     82e:	84 e4       	ldi	r24, 0x44	; 68
     830:	80 93 94 02 	sts	0x0294, r24
    msg2.header.DLC = 4;
     834:	80 91 90 02 	lds	r24, 0x0290
     838:	80 7e       	andi	r24, 0xE0	; 224
    msg2.header.rtr = 0;
     83a:	88 60       	ori	r24, 0x08	; 8
     83c:	80 93 90 02 	sts	0x0290, r24
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <_Z15accel_timeslicev>:

/****** HIGH LEVEL FUNCTIONS **************************************/
// Guestimated to take less than 0.5ms !
void accel_timeslice()
{
   spi_setDataMode( SPI_MODE3 );
     846:	8c e0       	ldi	r24, 0x0C	; 12
     848:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
   byte avail = accel_new_data_avail();
     84c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_Z20accel_new_data_availv>
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
     850:	60 91 38 03 	lds	r22, 0x0338
     854:	61 70       	andi	r22, 0x01	; 1
   byte send  = isConfigured2(MODE_SEND_ACCEL);
   if ((avail&0x07) && (send))
     856:	28 2f       	mov	r18, r24
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	27 70       	andi	r18, 0x07	; 7
     85c:	30 70       	andi	r19, 0x00	; 0
     85e:	21 15       	cp	r18, r1
     860:	31 05       	cpc	r19, r1
     862:	11 f0       	breq	.+4      	; 0x868 <_Z15accel_timeslicev+0x22>
     864:	66 23       	and	r22, r22
     866:	41 f4       	brne	.+16     	; 0x878 <_Z15accel_timeslicev+0x32>
      can_send_msg_no_wait( 0, &msg2 	  );
      //can_send_msg( 0, &msg2 	  );
   }
   else 
   {
      can_blank_accel_msg ( avail, send	  );
     868:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_Z19can_blank_accel_msghh>
      can_send_msg_no_wait( 0,     &msg2  );
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	6c e8       	ldi	r22, 0x8C	; 140
     870:	72 e0       	ldi	r23, 0x02	; 2
     872:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
     876:	08 95       	ret
   spi_setDataMode( SPI_MODE3 );
   byte avail = accel_new_data_avail();
   byte send  = isConfigured2(MODE_SEND_ACCEL);
   if ((avail&0x07) && (send))
   {
	  SET_LED_1(); 
     878:	58 9a       	sbi	0x0b, 0	; 11
      accel_read_xyz	  ( &accel 		  );
     87a:	85 e2       	ldi	r24, 0x25	; 37
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	0e 94 84 03 	call	0x708	; 0x708 <_Z14accel_read_xyzP4uXYZ>
      can_prep_accel_msg  ( &msg2, &accel );
     882:	8c e8       	ldi	r24, 0x8C	; 140
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	65 e2       	ldi	r22, 0x25	; 37
     888:	72 e0       	ldi	r23, 0x02	; 2
     88a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z18can_prep_accel_msgP4sCANP4uXYZ>
      can_send_msg_no_wait( 0, &msg2 	  );
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	6c e8       	ldi	r22, 0x8C	; 140
     892:	72 e0       	ldi	r23, 0x02	; 2
     894:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
     898:	08 95       	ret

0000089a <_Z8gyro_isrv>:

// See ISR( PCINT1_vect ) in "accelerometer.c" for gyro vector
//			it calls this function:
void gyro_isr()
{
}
     89a:	08 95       	ret

0000089c <_Z9gyro_readh>:
* INPUT:  address  - 6 bit in lsbs.  [0..63]
*       value - 8 bit data to be written
************************************************/
byte gyro_read( byte address )
{
  SET_CS_GYRO_LOW 
     89c:	5b 98       	cbi	0x0b, 3	; 11
  byte Address = (address << 2);
  spi_transfer(Address);
     89e:	88 0f       	add	r24, r24
     8a0:	88 0f       	add	r24, r24
     8a2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  byte retval = spi_transfer(0xFF);
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  SET_CS_GYRO_HIGH
     8ac:	5b 9a       	sbi	0x0b, 3	; 11
  return retval;
}
     8ae:	08 95       	ret

000008b0 <_Z15gyro_multi_readhPhh>:

void gyro_multi_read( byte address, byte* mData, byte mLength )
{
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	df 93       	push	r29
     8be:	cf 93       	push	r28
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <_Z15gyro_multi_readhPhh+0x12>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	e4 2e       	mov	r14, r20
  SET_CS_GYRO_LOW  
     8c8:	5b 98       	cbi	0x0b, 3	; 11
  byte Address = (address << 2);
  spi_transfer(Address);
     8ca:	88 0f       	add	r24, r24
     8cc:	88 0f       	add	r24, r24
     8ce:	69 83       	std	Y+1, r22	; 0x01
     8d0:	7a 83       	std	Y+2, r23	; 0x02
     8d2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  for (int i=0; i<mLength; i++)
     8d6:	ff 24       	eor	r15, r15
     8d8:	69 81       	ldd	r22, Y+1	; 0x01
     8da:	7a 81       	ldd	r23, Y+2	; 0x02
     8dc:	e1 14       	cp	r14, r1
     8de:	f1 04       	cpc	r15, r1
     8e0:	81 f0       	breq	.+32     	; 0x902 <_Z15gyro_multi_readhPhh+0x52>
     8e2:	06 2f       	mov	r16, r22
     8e4:	17 2f       	mov	r17, r23
     8e6:	cc 24       	eor	r12, r12
     8e8:	dd 24       	eor	r13, r13
    mData[i] = spi_transfer(0xFF);
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
     8f0:	f8 01       	movw	r30, r16
     8f2:	81 93       	st	Z+, r24
     8f4:	8f 01       	movw	r16, r30
void gyro_multi_read( byte address, byte* mData, byte mLength )
{
  SET_CS_GYRO_LOW  
  byte Address = (address << 2);
  spi_transfer(Address);
  for (int i=0; i<mLength; i++)
     8f6:	08 94       	sec
     8f8:	c1 1c       	adc	r12, r1
     8fa:	d1 1c       	adc	r13, r1
     8fc:	ce 14       	cp	r12, r14
     8fe:	df 04       	cpc	r13, r15
     900:	a4 f3       	brlt	.-24     	; 0x8ea <_Z15gyro_multi_readhPhh+0x3a>
    mData[i] = spi_transfer(0xFF);
  SET_CS_GYRO_HIGH
     902:	5b 9a       	sbi	0x0b, 3	; 11
}
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	cf 91       	pop	r28
     90a:	df 91       	pop	r29
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	08 95       	ret

0000091a <_Z10gyro_writehh>:
* Data bits 7..0 for write operation.  Don't care X for reads 
* INPUT:  address  - 6 bit in lsbs.  [0..63]
*       value - 8 bit data to be written
************************************************/
void gyro_write( byte address, byte value )
{
     91a:	df 93       	push	r29
     91c:	cf 93       	push	r28
     91e:	0f 92       	push	r0
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
  SET_CS_GYRO_LOW  
     924:	5b 98       	cbi	0x0b, 3	; 11
  byte Address = (address << 2) + 0x02;
     926:	88 0f       	add	r24, r24
     928:	88 0f       	add	r24, r24
  spi_transfer(Address);
     92a:	8e 5f       	subi	r24, 0xFE	; 254
     92c:	69 83       	std	Y+1, r22	; 0x01
     92e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  spi_transfer(value);
     932:	69 81       	ldd	r22, Y+1	; 0x01
     934:	86 2f       	mov	r24, r22
     936:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  SET_CS_GYRO_HIGH
     93a:	5b 9a       	sbi	0x0b, 3	; 11
}
     93c:	0f 90       	pop	r0
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <_Z16gyro_disable_i2cv>:

/***************************************************/
void gyro_disable_i2c()
{
   // READ/MODIFY/WRITE:
   byte prevValue = gyro_read( CTRL );
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
   prevValue |= I2C_DIS;
   prevValue |= INT_DIS;
     94a:	68 2f       	mov	r22, r24
     94c:	61 61       	ori	r22, 0x11	; 17
   gyro_write( CTRL, prevValue );
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z10gyro_writehh>
}
     954:	08 95       	ret

00000956 <_Z10gyro_resetv>:
void gyro_reset()
{
  gyro_write( CTRL, RESET ); 
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	60 e8       	ldi	r22, 0x80	; 128
     95a:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z10gyro_writehh>
  delay(2);
     95e:	62 e0       	ldi	r22, 0x02	; 2
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
}
     96a:	08 95       	ret

0000096c <_Z13gyro_set_modeh>:

/********** POWER MODING *********************/
void gyro_set_mode( byte Mode )
{
     96c:	cf 93       	push	r28
     96e:	c8 2f       	mov	r28, r24
   byte prevValue = gyro_read( CTRL );
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
   prevValue &= 0xF9;
     976:	89 7f       	andi	r24, 0xF9	; 249
   prevValue |= (Mode << 1);
     978:	6c 2f       	mov	r22, r28
     97a:	66 0f       	add	r22, r22
     97c:	68 2b       	or	r22, r24
   gyro_write(CTRL, prevValue );
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z10gyro_writehh>
}
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <_Z14gyro_powerdownv>:

// Longer time required to wakeup than standby.
void gyro_powerdown()
{
  gyro_set_mode( 0 );
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z13gyro_set_modeh>
}
     98e:	08 95       	ret

00000990 <_Z12gyro_standbyv>:
// quick recovery to measurement mode.
void gyro_standby()
{
  gyro_set_mode( 1 );
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z13gyro_set_modeh>
}
     996:	08 95       	ret

00000998 <_Z21gyro_measurement_modev>:
void gyro_measurement_mode()
{
  gyro_set_mode( 2 );  // BandWidth = 20Hz
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z13gyro_set_modeh>
}
     99e:	08 95       	ret

000009a0 <_Z22gyro_fast_measure_modev>:
void gyro_fast_measure_mode()
{
  gyro_set_mode( 3 );  // BandWidth = 80Hz
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z13gyro_set_modeh>
}
     9a6:	08 95       	ret

000009a8 <_Z9gyro_initv>:
USES SPI MODE 0 Clk Polarity=0 (idles low)
	            Clk Phase : Sample data on Rising edge of Clk.
**************************************************************/
void gyro_init()
{
	spi_setDataMode( SPI_MODE0 );
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
	CS_DDR |= CS_GYRO;
     9ae:	53 9a       	sbi	0x0a, 3	; 10
	INT_DDR &= ~(GYRO_INT1);		// Make Interrupt line an input.
     9b0:	39 98       	cbi	0x07, 1	; 7

	gyro_reset();
     9b2:	0e 94 ab 04 	call	0x956	; 0x956 <_Z10gyro_resetv>
	delay(one_second/2);
     9b6:	60 e4       	ldi	r22, 0x40	; 64
     9b8:	7d e0       	ldi	r23, 0x0D	; 13
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
	gyro_disable_i2c();
     9c2:	0e 94 a2 04 	call	0x944	; 0x944 <_Z16gyro_disable_i2cv>
	delay(one_second/2);	
     9c6:	60 e4       	ldi	r22, 0x40	; 64
     9c8:	7d e0       	ldi	r23, 0x0D	; 13
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
	gyro_fast_measure_mode();
     9d2:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z22gyro_fast_measure_modev>
	delay(one_second/2);	
     9d6:	60 e4       	ldi	r22, 0x40	; 64
     9d8:	7d e0       	ldi	r23, 0x0D	; 13
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
}
     9e2:	08 95       	ret

000009e4 <_Z15gyro_int_enablev>:
}

void gyro_int_enable(  )
{
   // READ/MODIFY/WRITE:
   byte prevValue = gyro_read( CTRL );
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
   prevValue |= (INT_DIS | INT_LEVEL);
     9ea:	68 2f       	mov	r22, r24
     9ec:	61 64       	ori	r22, 0x41	; 65
   gyro_write( CTRL, prevValue );
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z10gyro_writehh>
}
     9f4:	08 95       	ret

000009f6 <_Z11gyro_read_xv>:

word gyro_read_x(  )
{
     9f6:	cf 93       	push	r28
	byte msb = gyro_read( X_MSB ) ;//& 0x1F;
     9f8:	8d e0       	ldi	r24, 0x0D	; 13
     9fa:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     9fe:	c8 2f       	mov	r28, r24
	word X   = gyro_read( X_LSB );
     a00:	8c e0       	ldi	r24, 0x0C	; 12
     a02:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
	X |= (msb<<8);
     a0a:	5c 2f       	mov	r21, r28
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	24 2b       	or	r18, r20
     a10:	35 2b       	or	r19, r21
	return X;
}
     a12:	c9 01       	movw	r24, r18
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <_Z11gyro_read_yv>:
word gyro_read_y(  )
{
     a18:	cf 93       	push	r28
	byte msb = gyro_read( Y_MSB );// & 0x1F;
     a1a:	8f e0       	ldi	r24, 0x0F	; 15
     a1c:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     a20:	c8 2f       	mov	r28, r24
	word Y   = gyro_read( Y_LSB );
     a22:	8e e0       	ldi	r24, 0x0E	; 14
     a24:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
	Y |= (msb<<8);
     a2c:	5c 2f       	mov	r21, r28
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	24 2b       	or	r18, r20
     a32:	35 2b       	or	r19, r21
	return Y;
}
     a34:	c9 01       	movw	r24, r18
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <_Z11gyro_read_zv>:
word gyro_read_z(  )
{
     a3a:	cf 93       	push	r28
	byte msb = gyro_read( Z_MSB );  // & 0x1F;
     a3c:	81 e1       	ldi	r24, 0x11	; 17
     a3e:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     a42:	c8 2f       	mov	r28, r24
	word Z   = gyro_read( Z_LSB );
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
	Z |= (msb<<8);
     a4e:	5c 2f       	mov	r21, r28
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	24 2b       	or	r18, r20
     a54:	35 2b       	or	r19, r21
	return Z;
}
     a56:	c9 01       	movw	r24, r18
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <_Z13gyro_read_xyzP4uXYZ>:

void gyro_read_xyz( uXYZ* mData )
{
     a5c:	bc 01       	movw	r22, r24
    // multiple reads decrement, so start highest.
	gyro_multi_read( X_LSB, mData->array, 6 );		// Z_MSB
     a5e:	8c e0       	ldi	r24, 0x0C	; 12
     a60:	46 e0       	ldi	r20, 0x06	; 6
     a62:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z15gyro_multi_readhPhh>
}
     a66:	08 95       	ret

00000a68 <_Z14gyro_timeslicev>:

void gyro_timeslice( )
{
	spi_setDataMode( SPI_MODE0 );
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
     a6e:	80 91 38 03 	lds	r24, 0x0338
	byte send = isConfigured2(MODE_SEND_GYRO);
	if (send)
     a72:	81 ff       	sbrs	r24, 1
     a74:	1e c0       	rjmp	.+60     	; 0xab2 <_Z14gyro_timeslicev+0x4a>
	{
		SET_LED_2();
     a76:	59 9a       	sbi	0x0b, 1	; 11
		gyro.coords.x = gyro_read_x();
     a78:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_Z11gyro_read_xv>
     a7c:	90 93 34 02 	sts	0x0234, r25
     a80:	80 93 33 02 	sts	0x0233, r24
		gyro.coords.y = gyro_read_y();
     a84:	0e 94 0c 05 	call	0xa18	; 0xa18 <_Z11gyro_read_yv>
     a88:	90 93 36 02 	sts	0x0236, r25
     a8c:	80 93 35 02 	sts	0x0235, r24
		gyro.coords.z = gyro_read_z();
     a90:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_Z11gyro_read_zv>
     a94:	90 93 38 02 	sts	0x0238, r25
     a98:	80 93 37 02 	sts	0x0237, r24
		//gyro_read_xyz( &gyro 	 );
		can_prep_gyro_msg( &msg1, &gyro );
     a9c:	8d e7       	ldi	r24, 0x7D	; 125
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	63 e3       	ldi	r22, 0x33	; 51
     aa2:	72 e0       	ldi	r23, 0x02	; 2
     aa4:	0e 94 90 01 	call	0x320	; 0x320 <_Z17can_prep_gyro_msgP4sCANP4uXYZ>
		can_send_msg_no_wait( 2, &msg1  );
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	6d e7       	ldi	r22, 0x7D	; 125
     aac:	72 e0       	ldi	r23, 0x02	; 2
     aae:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
	}
	spi_setDataMode  ( SPI_MODE3 );
     ab2:	8c e0       	ldi	r24, 0x0C	; 12
     ab4:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
}
     ab8:	08 95       	ret

00000aba <_Z17can_init_test_msghhhh>:


#include "can_eid.h"

void can_init_test_msg(byte m1, byte m2, byte m3, byte m4)
{
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	f8 2e       	mov	r15, r24
     ac8:	d6 2f       	mov	r29, r22
     aca:	c4 2f       	mov	r28, r20
     acc:	e2 2e       	mov	r14, r18
	static word count = 0;
	count++;
     ace:	e0 91 39 02 	lds	r30, 0x0239
     ad2:	f0 91 3a 02 	lds	r31, 0x023A
     ad6:	31 96       	adiw	r30, 0x01	; 1
     ad8:	f0 93 3a 02 	sts	0x023A, r31
     adc:	e0 93 39 02 	sts	0x0239, r30
    msg1.id 	 = create_CAN_eid( 0x02, 0x0004, 0x01);
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <_Z14create_CAN_eidhth>
     aec:	60 93 7d 02 	sts	0x027D, r22
     af0:	70 93 7e 02 	sts	0x027E, r23
     af4:	80 93 7f 02 	sts	0x027F, r24
     af8:	90 93 80 02 	sts	0x0280, r25
    msg1.data[0] = m1;
     afc:	f0 92 82 02 	sts	0x0282, r15
    msg1.data[1] = m2;    
     b00:	d0 93 83 02 	sts	0x0283, r29
    msg1.data[2] = m3;
     b04:	c0 93 84 02 	sts	0x0284, r28
    msg1.data[3] = m4;
     b08:	e0 92 85 02 	sts	0x0285, r14
    
    msg1.data[4] = hi(count);
     b0c:	80 91 39 02 	lds	r24, 0x0239
     b10:	90 91 3a 02 	lds	r25, 0x023A
     b14:	90 93 86 02 	sts	0x0286, r25
    msg1.data[5] = lo(count);
     b18:	80 93 87 02 	sts	0x0287, r24
    msg1.data[6] = 0xEE;
     b1c:	8e ee       	ldi	r24, 0xEE	; 238
     b1e:	80 93 88 02 	sts	0x0288, r24
    msg1.data[7] = 0xFF;
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	80 93 89 02 	sts	0x0289, r24
    msg1.header.DLC = 8;
     b28:	80 91 81 02 	lds	r24, 0x0281
     b2c:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     b2e:	80 61       	ori	r24, 0x10	; 16
     b30:	80 93 81 02 	sts	0x0281, r24
}
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <_Z10gyro_testsv>:

void gyro_tests()
{
     b42:	1f 93       	push	r17
     b44:	df 93       	push	r29
     b46:	cf 93       	push	r28
     b48:	00 d0       	rcall	.+0      	; 0xb4a <_Z10gyro_testsv+0x8>
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	spi_setDataMode  ( SPI_MODE0 );
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
  // VERIFY OPERATION BY READING REG & SETTING LED IF MATCH:
  byte result1 = gyro_read( GYRO_WHO_AM_I );		//0x43
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     b5a:	18 2f       	mov	r17, r24
  byte result2 = gyro_read( REVID );				//0x21
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     b62:	68 2f       	mov	r22, r24
  byte result3 = gyro_read( CTRL );  
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	6a 83       	std	Y+2, r22	; 0x02
     b68:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     b6c:	48 2f       	mov	r20, r24
  byte result4 = gyro_read( STATUS );    
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	49 83       	std	Y+1, r20	; 0x01
     b72:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z9gyro_readh>
     b76:	28 2f       	mov	r18, r24
  SET_LED_2()
     b78:	59 9a       	sbi	0x0b, 1	; 11
  can_init_test_msg( result1, result2, result3, result4 );
     b7a:	81 2f       	mov	r24, r17
     b7c:	6a 81       	ldd	r22, Y+2	; 0x02
     b7e:	49 81       	ldd	r20, Y+1	; 0x01
     b80:	0e 94 5d 05 	call	0xaba	; 0xaba <_Z17can_init_test_msghhhh>
  
//  result = gyro_read( REVID );
//  if (result == 0x33)  digitalWrite( LED_2, HIGH );
	//can_prep_gyro_msg( &msg2, &gyro );
	can_send_msg_no_wait( 0, &msg1  );
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	6d e7       	ldi	r22, 0x7D	; 125
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
	delay(one_second);
     b8e:	60 e8       	ldi	r22, 0x80	; 128
     b90:	7a e1       	ldi	r23, 0x1A	; 26
     b92:	86 e0       	ldi	r24, 0x06	; 6
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 44 14 	call	0x2888	; 0x2888 <_Z5delayl>
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	1f 91       	pop	r17
     ba4:	08 95       	ret

00000ba6 <_Z8mag_readh>:
}

/*********************** READ & WRITE ROUTINES ***********************/
byte mag_read( byte address )
{
  SET_CS_MAGNET_LOW  
     ba6:	5c 98       	cbi	0x0b, 4	; 11
  byte Address = (address | 0x80);
  spi_transfer(Address);
     ba8:	80 68       	ori	r24, 0x80	; 128
     baa:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  byte retval = spi_transfer(0xFF);
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  SET_CS_MAGNET_HIGH
     bb4:	5c 9a       	sbi	0x0b, 4	; 11
  return retval;
}
     bb6:	08 95       	ret

00000bb8 <_Z14mag_multi_readhPhh>:

void mag_multi_read( byte address, byte* mData, byte mLength )
{
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <_Z14mag_multi_readhPhh+0x12>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	e4 2e       	mov	r14, r20
  SET_CS_MAGNET_LOW  
     bd0:	5c 98       	cbi	0x0b, 4	; 11
  byte Address = (address | 0x80 | 0x40 );
  spi_transfer(Address);
     bd2:	80 6c       	ori	r24, 0xC0	; 192
     bd4:	69 83       	std	Y+1, r22	; 0x01
     bd6:	7a 83       	std	Y+2, r23	; 0x02
     bd8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  for (int i=0; i<mLength; i++) {
     bdc:	ff 24       	eor	r15, r15
     bde:	69 81       	ldd	r22, Y+1	; 0x01
     be0:	7a 81       	ldd	r23, Y+2	; 0x02
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	81 f0       	breq	.+32     	; 0xc08 <_Z14mag_multi_readhPhh+0x50>
     be8:	06 2f       	mov	r16, r22
     bea:	17 2f       	mov	r17, r23
     bec:	cc 24       	eor	r12, r12
     bee:	dd 24       	eor	r13, r13
      mData[i] = spi_transfer(0xFF);
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
     bf6:	f8 01       	movw	r30, r16
     bf8:	81 93       	st	Z+, r24
     bfa:	8f 01       	movw	r16, r30
void mag_multi_read( byte address, byte* mData, byte mLength )
{
  SET_CS_MAGNET_LOW  
  byte Address = (address | 0x80 | 0x40 );
  spi_transfer(Address);
  for (int i=0; i<mLength; i++) {
     bfc:	08 94       	sec
     bfe:	c1 1c       	adc	r12, r1
     c00:	d1 1c       	adc	r13, r1
     c02:	ce 14       	cp	r12, r14
     c04:	df 04       	cpc	r13, r15
     c06:	a4 f3       	brlt	.-24     	; 0xbf0 <_Z14mag_multi_readhPhh+0x38>
      mData[i] = spi_transfer(0xFF);
      //mData[i] = i;
      }
  SET_CS_MAGNET_HIGH
     c08:	5c 9a       	sbi	0x0b, 4	; 11
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	08 95       	ret

00000c20 <_Z9mag_writehh>:

void mag_write( byte address, byte value )
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	0f 92       	push	r0
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
  SET_CS_MAGNET_LOW  
     c2a:	5c 98       	cbi	0x0b, 4	; 11
  byte Address = (address << 2) + 0x02;
     c2c:	88 0f       	add	r24, r24
     c2e:	88 0f       	add	r24, r24
  spi_transfer(Address);
     c30:	8e 5f       	subi	r24, 0xFE	; 254
     c32:	69 83       	std	Y+1, r22	; 0x01
     c34:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  spi_transfer(value);
     c38:	69 81       	ldd	r22, Y+1	; 0x01
     c3a:	86 2f       	mov	r24, r22
     c3c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_transfer>
  SET_CS_MAGNET_HIGH
     c40:	5c 9a       	sbi	0x0b, 4	; 11
}
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <_Z12mag_read_xyzP4uXYZ>:

void mag_read_xyz( uXYZ* mXYZ )
{
     c4a:	bc 01       	movw	r22, r24
  mag_multi_read(DATA_OUTPUT_X_HI, mXYZ->array, 6 );
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	46 e0       	ldi	r20, 0x06	; 6
     c50:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z14mag_multi_readhPhh>
}
     c54:	08 95       	ret

00000c56 <_Z22mag_enable_temperatureh>:

/******************** MISC ROUTINES ******************************/
void mag_enable_temperature( byte mDataRate)
{
	byte cfg_a = mag_read( CONFIG_REG_A );
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z8mag_readh>
	byte value = (cfg_a | TS);
     c5c:	68 2f       	mov	r22, r24
     c5e:	60 68       	ori	r22, 0x80	; 128
	mag_write( CONFIG_REG_A, value );
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	0e 94 10 06 	call	0xc20	; 0xc20 <_Z9mag_writehh>
}
     c66:	08 95       	ret

00000c68 <_Z23mag_disable_temperatureh>:
void mag_disable_temperature( byte mDataRate)
{
	byte cfg_a = mag_read( CONFIG_REG_A );
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z8mag_readh>
	byte value = (cfg_a & (~TS));
     c6e:	68 2f       	mov	r22, r24
     c70:	6f 77       	andi	r22, 0x7F	; 127
	mag_write( CONFIG_REG_A, value );
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 10 06 	call	0xc20	; 0xc20 <_Z9mag_writehh>
}
     c78:	08 95       	ret

00000c7a <_Z19mag_average_samplesh>:

void mag_average_samples( byte mNConst )
{
     c7a:	cf 93       	push	r28
     c7c:	c8 2f       	mov	r28, r24
	byte cfg_a = mag_read( CONFIG_REG_A );
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z8mag_readh>
	byte value = (cfg_a & 0x9F);
     c84:	8f 79       	andi	r24, 0x9F	; 159
	value |= (mNConst<<5);
     c86:	6c 2f       	mov	r22, r28
     c88:	62 95       	swap	r22
     c8a:	66 0f       	add	r22, r22
     c8c:	60 7e       	andi	r22, 0xE0	; 224
     c8e:	68 2b       	or	r22, r24
	mag_write( CONFIG_REG_A, value );
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 10 06 	call	0xc20	; 0xc20 <_Z9mag_writehh>
}
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <_Z17mag_set_data_rateh>:

void mag_set_data_rate( byte mSampleRate)
{
     c9a:	cf 93       	push	r28
     c9c:	c8 2f       	mov	r28, r24
	byte cfg_a = mag_read( CONFIG_REG_A );
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z8mag_readh>
	byte value = (cfg_a & 0x63);
     ca4:	83 76       	andi	r24, 0x63	; 99
	value |= (mSampleRate<<2);
     ca6:	6c 2f       	mov	r22, r28
     ca8:	66 0f       	add	r22, r22
     caa:	66 0f       	add	r22, r22
     cac:	68 2b       	or	r22, r24
	mag_write( CONFIG_REG_A, value );
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 10 06 	call	0xc20	; 0xc20 <_Z9mag_writehh>
}
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <_Z8mag_initv>:
union uXYZ magnet;


void mag_init()
{  
	spi_setDataMode( SPI_MODE3 );
     cb8:	8c e0       	ldi	r24, 0x0C	; 12
     cba:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
	CS_DDR |= CS_MAGNET;
     cbe:	54 9a       	sbi	0x0a, 4	; 10
	/* Note:  SAMPLE_30_HZ results in all FF's for the data.
			  Not sure why this sample rate does not work. 
			  SAMPLE_15_HZ results in all not all FF's but unchanging data. (even when sensor direction is changed).
			  SAMPLE_75_HZ produces data which appears correct.
			  */
	mag_set_data_rate  ( SAMPLE_75_HZ );	
     cc0:	86 e0       	ldi	r24, 0x06	; 6
     cc2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z17mag_set_data_rateh>
	mag_average_samples( AVG_2_SAMPLE );
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_Z19mag_average_samplesh>
	mag_write( MODE_REGISTER, 0X00 );		// Continuous Measure Mode
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	0e 94 10 06 	call	0xc20	; 0xc20 <_Z9mag_writehh>
}
     cd4:	08 95       	ret

00000cd6 <_Z12mag_set_gainh>:
	mag_write( CONFIG_REG_A, value );
}

void mag_set_gain( byte mGain )
{
	if (mGain > MAX_GAIN) return;
     cd6:	88 30       	cpi	r24, 0x08	; 8
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <_Z12mag_set_gainh+0x6>
     cda:	08 95       	ret
	mag_write( CONFIG_REG_B, (mGain<<5) );
     cdc:	68 2f       	mov	r22, r24
     cde:	62 95       	swap	r22
     ce0:	66 0f       	add	r22, r22
     ce2:	60 7e       	andi	r22, 0xE0	; 224
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 10 06 	call	0xc20	; 0xc20 <_Z9mag_writehh>
     cea:	08 95       	ret

00000cec <_Z13mag_timeslicev>:
     cec:	80 91 38 03 	lds	r24, 0x0338
}

void mag_timeslice( )
{
	byte send = isConfigured2(MODE_SEND_MAGNET);
	if (send)
     cf0:	82 ff       	sbrs	r24, 2
     cf2:	08 95       	ret
	{	
		SET_LED_3();
     cf4:	5e 9a       	sbi	0x0b, 6	; 11
		spi_setDataMode	    ( SPI_MODE3 	 );
     cf6:	8c e0       	ldi	r24, 0x0C	; 12
     cf8:	0e 94 0a 12 	call	0x2414	; 0x2414 <spi_setDataMode>
		mag_read_xyz        ( &magnet 		 );
     cfc:	8b e3       	ldi	r24, 0x3B	; 59
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	0e 94 25 06 	call	0xc4a	; 0xc4a <_Z12mag_read_xyzP4uXYZ>
		can_prep_magnet_msg ( &msg2, &magnet );
     d04:	8c e8       	ldi	r24, 0x8C	; 140
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	6b e3       	ldi	r22, 0x3B	; 59
     d0a:	72 e0       	ldi	r23, 0x02	; 2
     d0c:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z19can_prep_magnet_msgP4sCANP4uXYZ>
		can_send_msg_no_wait( 4, &msg2 		 );
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	6c e8       	ldi	r22, 0x8C	; 140
     d14:	72 e0       	ldi	r23, 0x02	; 2
     d16:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
     d1a:	08 95       	ret

00000d1c <_Z12mag_id_testsv>:
}

byte mag_id_tests( )
{
  // VERIFY OPERATION BY READING REG & SETTING LED IF MATCH:
  byte result = mag_read( ID_REG_A );
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z8mag_readh>
  if (result == 'H') {
     d22:	88 34       	cpi	r24, 0x48	; 72
     d24:	19 f0       	breq	.+6      	; 0xd2c <_Z12mag_id_testsv+0x10>
	  		result = mag_read( ID_REG_C );
	  		if (result == '3')
				return TRUE;
	  }
  }
  return FALSE;
     d26:	90 e0       	ldi	r25, 0x00	; 0
}
     d28:	89 2f       	mov	r24, r25
     d2a:	08 95       	ret
byte mag_id_tests( )
{
  // VERIFY OPERATION BY READING REG & SETTING LED IF MATCH:
  byte result = mag_read( ID_REG_A );
  if (result == 'H') {
	  result = mag_read( ID_REG_B );
     d2c:	8b e0       	ldi	r24, 0x0B	; 11
     d2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z8mag_readh>
	  if (result == '4') {
     d32:	84 33       	cpi	r24, 0x34	; 52
     d34:	c1 f7       	brne	.-16     	; 0xd26 <_Z12mag_id_testsv+0xa>
	  		result = mag_read( ID_REG_C );
     d36:	8c e0       	ldi	r24, 0x0C	; 12
     d38:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z8mag_readh>
		can_prep_magnet_msg ( &msg2, &magnet );
		can_send_msg_no_wait( 4, &msg2 		 );
	}
}

byte mag_id_tests( )
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	83 33       	cpi	r24, 0x33	; 51
     d40:	91 f7       	brne	.-28     	; 0xd26 <_Z12mag_id_testsv+0xa>
     d42:	f2 cf       	rjmp	.-28     	; 0xd28 <_Z12mag_id_testsv+0xc>

00000d44 <_Z11data_gatherv>:
		We'll estimate it by going by the SPI clock rate & amount of data.
		for accel_timeslice there are ~64 clock periods.	at a rate of 250kbps.  
			= 0.5ms	
			Guestimated to take less than 0.5ms each!
	*/
	accel_timeslice();
     d44:	0e 94 23 04 	call	0x846	; 0x846 <_Z15accel_timeslicev>
	gyro_timeslice ();		// can only go 80Hz or 20Hz!	
     d48:	0e 94 34 05 	call	0xa68	; 0xa68 <_Z14gyro_timeslicev>
	mag_timeslice  ();
     d4c:	0e 94 76 06 	call	0xcec	; 0xcec <_Z13mag_timeslicev>

/*		if ((isConfigured(MODE_SEND_COMBINED_ANGLES))  ||
			(isConfigured(MODE_SEND_COMBINED_LINEAR)))
			orient_timeslice();			*/ 
}
     d50:	08 95       	ret

00000d52 <_Z11OS_Dispatchv>:

void OS_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0)	// 5ms tasks
     d52:	80 91 31 03 	lds	r24, 0x0331
     d56:	90 91 32 03 	lds	r25, 0x0332
     d5a:	65 e0       	ldi	r22, 0x05	; 5
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__divmodhi4>
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	09 f0       	breq	.+2      	; 0xd68 <_Z11OS_Dispatchv+0x16>
     d66:	08 95       	ret
	{
		RESET_LED_1();
     d68:	58 98       	cbi	0x0b, 0	; 11
		RESET_LED_2();
     d6a:	59 98       	cbi	0x0b, 1	; 11
		RESET_LED_3();
     d6c:	5e 98       	cbi	0x0b, 6	; 11
		if (getReportRate() != MODE_SEND_UPDATES_NONE)
     d6e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_Z13getReportRatev>
     d72:	88 23       	and	r24, r24
     d74:	c1 f3       	breq	.-16     	; 0xd66 <_Z11OS_Dispatchv+0x14>
		{
			if ((--ReportCounter)==0)
     d76:	80 91 00 01 	lds	r24, 0x0100
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	80 93 00 01 	sts	0x0100, r24
     d80:	88 23       	and	r24, r24
     d82:	89 f7       	brne	.-30     	; 0xd66 <_Z11OS_Dispatchv+0x14>
			{
				ReportCounter = getReportRate();		// Refill		
     d84:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_Z13getReportRatev>
     d88:	80 93 00 01 	sts	0x0100, r24
				data_gather();
     d8c:	0e 94 a2 06 	call	0xd44	; 0xd44 <_Z11data_gatherv>
     d90:	08 95       	ret

00000d92 <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		*/
void app_default_configuration()
{
	config_byte_2 = MODE_SEND_UPDATES_30ms;
	config_byte_2 |= (MODE_SEND_ACCEL | MODE_SEND_GYRO | MODE_SEND_MAGNET);
     d92:	87 e4       	ldi	r24, 0x47	; 71
     d94:	80 93 38 03 	sts	0x0338, r24
	config_byte_3 |= (MODE_ACCEL_2g | MAGNET_DATA_RATE_30 | MAGNET_AVGS_ONE);	
     d98:	80 91 39 03 	lds	r24, 0x0339
     d9c:	84 61       	ori	r24, 0x14	; 20
     d9e:	80 93 39 03 	sts	0x0339, r24
}
     da2:	08 95       	ret

00000da4 <_Z19getAccelSensitivityv>:

byte getAccelSensitivity() { return (config_byte_3 & MODE_ACCEL_SENSITIVITY_MASK);	}
     da4:	80 91 39 03 	lds	r24, 0x0339
     da8:	83 70       	andi	r24, 0x03	; 3
     daa:	08 95       	ret

00000dac <_Z17getMagnetDataRatev>:
byte getMagnetDataRate()   { return (config_byte_3 & MAGNET_DATA_RATE_MASK); 		}
     dac:	80 91 39 03 	lds	r24, 0x0339
     db0:	8c 71       	andi	r24, 0x1C	; 28
     db2:	08 95       	ret

00000db4 <_Z13getMagnetAvgsv>:
byte getMagnetAvgs()   	   { return (config_byte_3 & MAGNET_AVGS_MASK);		 		}
     db4:	80 91 39 03 	lds	r24, 0x0339
     db8:	80 76       	andi	r24, 0x60	; 96
     dba:	08 95       	ret

00000dbc <_Z20getTemperatureEnablev>:
byte getTemperatureEnable() { return (config_byte_3 & MODE_READ_TEMPERATURE);		}
     dbc:	80 91 39 03 	lds	r24, 0x0339
     dc0:	80 78       	andi	r24, 0x80	; 128
     dc2:	08 95       	ret

00000dc4 <_Z8save_calv>:
Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr;
	addr = save_configuration();
     dc4:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_Z18save_configurationv>
	return addr;
};
     dc8:	08 95       	ret

00000dca <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr;
	addr = read_configuration();
     dca:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <_Z18read_configurationv>
	return addr;	
};
     dce:	08 95       	ret

00000dd0 <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	byte num_10_ms =  ((config_byte_2 & 0xF0)>>4);
     dd0:	80 91 38 03 	lds	r24, 0x0338
	return num_10_ms;
}	
     dd4:	82 95       	swap	r24
     dd6:	8f 70       	andi	r24, 0x0F	; 15
     dd8:	08 95       	ret

00000dda <_Z11orient_initv>:
 orient_init()
PURPOSE: main init for all code to calculate orientation	
*********************************************************/
void orient_init()
{
	gyro_integrated_angles.coords.x = 0;
     dda:	10 92 72 02 	sts	0x0272, r1
     dde:	10 92 71 02 	sts	0x0271, r1
	gyro_integrated_angles.coords.y = 0;
     de2:	10 92 74 02 	sts	0x0274, r1
     de6:	10 92 73 02 	sts	0x0273, r1
	gyro_integrated_angles.coords.z = 0;
     dea:	10 92 76 02 	sts	0x0276, r1
     dee:	10 92 75 02 	sts	0x0275, r1

	// MORE TO COME...
}
     df2:	08 95       	ret

00000df4 <_Z16orient_timeslicev>:
	if (isConfigured(MODE_SEND_COMBINED_LINEAR_VELOCITY))  {
		//can_prep_total_velocity_msg( &msg1, );
		can_send_msg_no_wait(2, &msg1);		
	} */
	//int magnitude = magnitude(accel);
}
     df4:	08 95       	ret

00000df6 <_Z21integrate_gyro_anglesv>:
{
	/*gyro_integrated_angles.coords.x += gyro.coords.x;
	gyro_integrated_angles.coords.y += gyro.coords.y;
	gyro_integrated_angles.coords.z += gyro.coords.z;	*/
	// Problem is not initialized upon startup, assumed to be zeros
}
     df6:	08 95       	ret

00000df8 <_Z17accel_calc_anglesv>:
	//float angle_y = asin(ys);

/*	accel_angles.coords.x;
	accel_angles.coords.y;
	accel_angles.coords.y; */
}
     df8:	08 95       	ret

00000dfa <_Z23difference_accel_anglesv>:
{
	// delta between BestAngles and latest calculation of Angles.
/*	accel_delta_angles.coords.x = (BestAnglesPosition.coords.x - accel_angles.coords.x);
	accel_delta_angles.coords.y = (BestAnglesPosition.coords.y - accel_angles.coords.y);
	accel_delta_angles.coords.z = (BestAnglesPosition.coords.z - accel_angles.coords.z);
*/}
     dfa:	08 95       	ret

00000dfc <_Z10accumulateR4uXYZS_>:

/************************************************************************
 ******************************* UTILITY   ******************************
 ************************************************************************/
void accumulate( uXYZ &mValue1, uXYZ mDelta )
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <_Z10accumulateR4uXYZS_+0x6>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <_Z10accumulateR4uXYZS_+0x8>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <_Z10accumulateR4uXYZS_+0xa>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	fc 01       	movw	r30, r24
     e0c:	29 83       	std	Y+1, r18	; 0x01
     e0e:	3a 83       	std	Y+2, r19	; 0x02
     e10:	4b 83       	std	Y+3, r20	; 0x03
     e12:	5c 83       	std	Y+4, r21	; 0x04
     e14:	6d 83       	std	Y+5, r22	; 0x05
     e16:	7e 83       	std	Y+6, r23	; 0x06
	mValue1.coords.x += mDelta.coords.x;
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	29 81       	ldd	r18, Y+1	; 0x01
     e1e:	3a 81       	ldd	r19, Y+2	; 0x02
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
	mValue1.coords.y += mDelta.coords.y;
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	2b 81       	ldd	r18, Y+3	; 0x03
     e2e:	3c 81       	ldd	r19, Y+4	; 0x04
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	93 83       	std	Z+3, r25	; 0x03
     e36:	82 83       	std	Z+2, r24	; 0x02
	mValue1.coords.z += mDelta.coords.z;
     e38:	84 81       	ldd	r24, Z+4	; 0x04
     e3a:	95 81       	ldd	r25, Z+5	; 0x05
     e3c:	2d 81       	ldd	r18, Y+5	; 0x05
     e3e:	3e 81       	ldd	r19, Y+6	; 0x06
     e40:	82 0f       	add	r24, r18
     e42:	93 1f       	adc	r25, r19
     e44:	95 83       	std	Z+5, r25	; 0x05
     e46:	84 83       	std	Z+4, r24	; 0x04
}
     e48:	26 96       	adiw	r28, 0x06	; 6
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <_Z7compareiii>:
 
BOOL compare( int mIndependantValue1, int mMin, int mMax )
{
     e5a:	9c 01       	movw	r18, r24
	if ((mIndependantValue1 > mMin) &&
     e5c:	68 17       	cp	r22, r24
     e5e:	79 07       	cpc	r23, r25
     e60:	2c f4       	brge	.+10     	; 0xe6c <_Z7compareiii+0x12>
	mValue1.coords.x += mDelta.coords.x;
	mValue1.coords.y += mDelta.coords.y;
	mValue1.coords.z += mDelta.coords.z;
}
 
BOOL compare( int mIndependantValue1, int mMin, int mMax )
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	24 17       	cp	r18, r20
     e66:	35 07       	cpc	r19, r21
     e68:	1c f4       	brge	.+6      	; 0xe70 <_Z7compareiii+0x16>
{
	if ((mIndependantValue1 > mMin) &&
		(mIndependantValue1 < mMax))
		return TRUE;	
	return FALSE;	
}
     e6a:	08 95       	ret
BOOL compare( int mIndependantValue1, int mMin, int mMax )
{
	if ((mIndependantValue1 > mMin) &&
		(mIndependantValue1 < mMax))
		return TRUE;	
	return FALSE;	
     e6c:	80 e0       	ldi	r24, 0x00	; 0
}
     e6e:	08 95       	ret
	mValue1.coords.x += mDelta.coords.x;
	mValue1.coords.y += mDelta.coords.y;
	mValue1.coords.z += mDelta.coords.z;
}
 
BOOL compare( int mIndependantValue1, int mMin, int mMax )
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	08 95       	ret

00000e74 <_Z14compare_withiniif>:
		(mIndependantValue1 < mMax))
		return TRUE;	
	return FALSE;	
}
BOOL compare_within( int mIndependantValue1, int mDependantValue2, float mPercentError )
{
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ec 01       	movw	r28, r24
     e82:	79 01       	movw	r14, r18
     e84:	8a 01       	movw	r16, r20
	short ten_percent = ((float)mIndependantValue1 * mPercentError);  // 10% margin of error.
     e86:	be 01       	movw	r22, r28
     e88:	88 27       	eor	r24, r24
     e8a:	77 fd       	sbrc	r23, 7
     e8c:	80 95       	com	r24
     e8e:	98 2f       	mov	r25, r24
     e90:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__floatsisf>
     e94:	a8 01       	movw	r20, r16
     e96:	97 01       	movw	r18, r14
     e98:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     e9c:	0e 94 41 1b 	call	0x3682	; 0x3682 <__fixsfsi>
	short lower_threshold_1g = mIndependantValue1 - ten_percent;  
     ea0:	ce 01       	movw	r24, r28
     ea2:	86 1b       	sub	r24, r22
     ea4:	97 0b       	sbc	r25, r23
	mValue1.coords.z += mDelta.coords.z;
}
 
BOOL compare( int mIndependantValue1, int mMin, int mMax )
{
	if ((mIndependantValue1 > mMin) &&
     ea6:	8c 17       	cp	r24, r28
     ea8:	9d 07       	cpc	r25, r29
     eaa:	6c f4       	brge	.+26     	; 0xec6 <_Z14compare_withiniif+0x52>
}
BOOL compare_within( int mIndependantValue1, int mDependantValue2, float mPercentError )
{
	short ten_percent = ((float)mIndependantValue1 * mPercentError);  // 10% margin of error.
	short lower_threshold_1g = mIndependantValue1 - ten_percent;  
	short upper_threshold_1g = mIndependantValue1 + ten_percent;  	
     eac:	6c 0f       	add	r22, r28
     eae:	7d 1f       	adc	r23, r29
	if ((mIndependantValue1 > mMin) &&
		(mIndependantValue1 < mMax))
		return TRUE;	
	return FALSE;	
}
BOOL compare_within( int mIndependantValue1, int mDependantValue2, float mPercentError )
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	c6 17       	cp	r28, r22
     eb4:	d7 07       	cpc	r29, r23
     eb6:	3c f4       	brge	.+14     	; 0xec6 <_Z14compare_withiniif+0x52>
{
	short ten_percent = ((float)mIndependantValue1 * mPercentError);  // 10% margin of error.
	short lower_threshold_1g = mIndependantValue1 - ten_percent;  
	short upper_threshold_1g = mIndependantValue1 + ten_percent;  	
	return compare( mIndependantValue1, lower_threshold_1g, upper_threshold_1g );
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	08 95       	ret
BOOL compare( int mIndependantValue1, int mMin, int mMax )
{
	if ((mIndependantValue1 > mMin) &&
		(mIndependantValue1 < mMax))
		return TRUE;	
	return FALSE;	
     ec6:	80 e0       	ldi	r24, 0x00	; 0
{
	short ten_percent = ((float)mIndependantValue1 * mPercentError);  // 10% margin of error.
	short lower_threshold_1g = mIndependantValue1 - ten_percent;  
	short upper_threshold_1g = mIndependantValue1 + ten_percent;  	
	return compare( mIndependantValue1, lower_threshold_1g, upper_threshold_1g );
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	08 95       	ret

00000ed6 <_Z28compare_magnitude_to_gravityi>:

BOOL compare_magnitude_to_gravity( int mMagnitude )
{
	return compare( one_g, mMagnitude, 0.01 );
     ed6:	20 91 01 01 	lds	r18, 0x0101
     eda:	30 91 02 01 	lds	r19, 0x0102
	mValue1.coords.z += mDelta.coords.z;
}
 
BOOL compare( int mIndependantValue1, int mMin, int mMax )
{
	if ((mIndependantValue1 > mMin) &&
     ede:	82 17       	cp	r24, r18
     ee0:	93 07       	cpc	r25, r19
     ee2:	2c f4       	brge	.+10     	; 0xeee <_Z28compare_magnitude_to_gravityi+0x18>
	short lower_threshold_1g = mIndependantValue1 - ten_percent;  
	short upper_threshold_1g = mIndependantValue1 + ten_percent;  	
	return compare( mIndependantValue1, lower_threshold_1g, upper_threshold_1g );
}

BOOL compare_magnitude_to_gravity( int mMagnitude )
     ee4:	83 2f       	mov	r24, r19
     ee6:	88 1f       	adc	r24, r24
     ee8:	88 27       	eor	r24, r24
     eea:	88 1f       	adc	r24, r24
     eec:	08 95       	ret
BOOL compare( int mIndependantValue1, int mMin, int mMax )
{
	if ((mIndependantValue1 > mMin) &&
		(mIndependantValue1 < mMax))
		return TRUE;	
	return FALSE;	
     eee:	80 e0       	ldi	r24, 0x00	; 0
}

BOOL compare_magnitude_to_gravity( int mMagnitude )
{
	return compare( one_g, mMagnitude, 0.01 );
}
     ef0:	08 95       	ret

00000ef2 <_Z7average4uXYZS_>:

uXYZ average( uXYZ mRead1, uXYZ mRead2 )
{
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	62 97       	sbiw	r28, 0x12	; 18
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	4f 83       	std	Y+7, r20	; 0x07
     f10:	58 87       	std	Y+8, r21	; 0x08
     f12:	69 87       	std	Y+9, r22	; 0x09
     f14:	7a 87       	std	Y+10, r23	; 0x0a
     f16:	8b 87       	std	Y+11, r24	; 0x0b
     f18:	9c 87       	std	Y+12, r25	; 0x0c
     f1a:	ed 86       	std	Y+13, r14	; 0x0d
     f1c:	fe 86       	std	Y+14, r15	; 0x0e
     f1e:	0f 87       	std	Y+15, r16	; 0x0f
     f20:	18 8b       	std	Y+16, r17	; 0x10
     f22:	29 8b       	std	Y+17, r18	; 0x11
     f24:	3a 8b       	std	Y+18, r19	; 0x12
	static uXYZ avg;
	avg.coords.x = (mRead1.coords.x + mRead2.coords.x) / 2;
     f26:	8d 85       	ldd	r24, Y+13	; 0x0d
     f28:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2a:	2f 81       	ldd	r18, Y+7	; 0x07
     f2c:	38 85       	ldd	r19, Y+8	; 0x08
     f2e:	82 0f       	add	r24, r18
     f30:	93 1f       	adc	r25, r19
     f32:	97 fd       	sbrc	r25, 7
     f34:	43 c0       	rjmp	.+134    	; 0xfbc <_Z7average4uXYZS_+0xca>
     f36:	95 95       	asr	r25
     f38:	87 95       	ror	r24
     f3a:	90 93 78 02 	sts	0x0278, r25
     f3e:	80 93 77 02 	sts	0x0277, r24
	avg.coords.y = (mRead1.coords.y + mRead2.coords.y) / 2;
     f42:	8f 85       	ldd	r24, Y+15	; 0x0f
     f44:	98 89       	ldd	r25, Y+16	; 0x10
     f46:	29 85       	ldd	r18, Y+9	; 0x09
     f48:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	97 fd       	sbrc	r25, 7
     f50:	33 c0       	rjmp	.+102    	; 0xfb8 <_Z7average4uXYZS_+0xc6>
     f52:	95 95       	asr	r25
     f54:	87 95       	ror	r24
     f56:	90 93 7a 02 	sts	0x027A, r25
     f5a:	80 93 79 02 	sts	0x0279, r24
	avg.coords.z = (mRead1.coords.z + mRead2.coords.z) / 2;
     f5e:	89 89       	ldd	r24, Y+17	; 0x11
     f60:	9a 89       	ldd	r25, Y+18	; 0x12
     f62:	2b 85       	ldd	r18, Y+11	; 0x0b
     f64:	3c 85       	ldd	r19, Y+12	; 0x0c
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	97 fd       	sbrc	r25, 7
     f6c:	23 c0       	rjmp	.+70     	; 0xfb4 <_Z7average4uXYZS_+0xc2>
     f6e:	95 95       	asr	r25
     f70:	87 95       	ror	r24
     f72:	90 93 7c 02 	sts	0x027C, r25
     f76:	80 93 7b 02 	sts	0x027B, r24
	return avg;
     f7a:	de 01       	movw	r26, r28
     f7c:	11 96       	adiw	r26, 0x01	; 1
     f7e:	e7 e7       	ldi	r30, 0x77	; 119
     f80:	f2 e0       	ldi	r31, 0x02	; 2
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	01 90       	ld	r0, Z+
     f86:	0d 92       	st	X+, r0
     f88:	81 50       	subi	r24, 0x01	; 1
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <_Z7average4uXYZS_+0x92>
     f8c:	29 81       	ldd	r18, Y+1	; 0x01
     f8e:	3a 81       	ldd	r19, Y+2	; 0x02
     f90:	4b 81       	ldd	r20, Y+3	; 0x03
     f92:	5c 81       	ldd	r21, Y+4	; 0x04
     f94:	6d 81       	ldd	r22, Y+5	; 0x05
     f96:	7e 81       	ldd	r23, Y+6	; 0x06
}
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	62 96       	adiw	r28, 0x12	; 18
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	08 95       	ret
uXYZ average( uXYZ mRead1, uXYZ mRead2 )
{
	static uXYZ avg;
	avg.coords.x = (mRead1.coords.x + mRead2.coords.x) / 2;
	avg.coords.y = (mRead1.coords.y + mRead2.coords.y) / 2;
	avg.coords.z = (mRead1.coords.z + mRead2.coords.z) / 2;
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	db cf       	rjmp	.-74     	; 0xf6e <_Z7average4uXYZS_+0x7c>

uXYZ average( uXYZ mRead1, uXYZ mRead2 )
{
	static uXYZ avg;
	avg.coords.x = (mRead1.coords.x + mRead2.coords.x) / 2;
	avg.coords.y = (mRead1.coords.y + mRead2.coords.y) / 2;
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	cb cf       	rjmp	.-106    	; 0xf52 <_Z7average4uXYZS_+0x60>
}

uXYZ average( uXYZ mRead1, uXYZ mRead2 )
{
	static uXYZ avg;
	avg.coords.x = (mRead1.coords.x + mRead2.coords.x) / 2;
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	bb cf       	rjmp	.-138    	; 0xf36 <_Z7average4uXYZS_+0x44>

00000fc0 <_Z9magnitude4uXYZ>:
	avg.coords.z = (mRead1.coords.z + mRead2.coords.z) / 2;
	return avg;
}

int magnitude( uXYZ mReadings )
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <_Z9magnitude4uXYZ+0x6>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <_Z9magnitude4uXYZ+0x8>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <_Z9magnitude4uXYZ+0xa>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	49 83       	std	Y+1, r20	; 0x01
     fd0:	5a 83       	std	Y+2, r21	; 0x02
     fd2:	6b 83       	std	Y+3, r22	; 0x03
     fd4:	7c 83       	std	Y+4, r23	; 0x04
     fd6:	8d 83       	std	Y+5, r24	; 0x05
     fd8:	9e 83       	std	Y+6, r25	; 0x06
	int magnitude = ((mReadings.coords.x * mReadings.coords.x) +
	 (mReadings.coords.y * mReadings.coords.y) +
	 (mReadings.coords.z * mReadings.coords.z));
     fda:	29 81       	ldd	r18, Y+1	; 0x01
     fdc:	3a 81       	ldd	r19, Y+2	; 0x02
     fde:	4b 81       	ldd	r20, Y+3	; 0x03
     fe0:	5c 81       	ldd	r21, Y+4	; 0x04
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	9e 81       	ldd	r25, Y+6	; 0x06
     fe6:	44 9f       	mul	r20, r20
     fe8:	b0 01       	movw	r22, r0
     fea:	45 9f       	mul	r20, r21
     fec:	70 0d       	add	r23, r0
     fee:	54 9f       	mul	r21, r20
     ff0:	70 0d       	add	r23, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	22 9f       	mul	r18, r18
     ff6:	a0 01       	movw	r20, r0
     ff8:	23 9f       	mul	r18, r19
     ffa:	50 0d       	add	r21, r0
     ffc:	32 9f       	mul	r19, r18
     ffe:	50 0d       	add	r21, r0
    1000:	11 24       	eor	r1, r1
    1002:	64 0f       	add	r22, r20
    1004:	75 1f       	adc	r23, r21
    1006:	88 9f       	mul	r24, r24
    1008:	90 01       	movw	r18, r0
    100a:	89 9f       	mul	r24, r25
    100c:	30 0d       	add	r19, r0
    100e:	98 9f       	mul	r25, r24
    1010:	30 0d       	add	r19, r0
    1012:	11 24       	eor	r1, r1
    1014:	62 0f       	add	r22, r18
    1016:	73 1f       	adc	r23, r19
	return sqrt(magnitude);
    1018:	88 27       	eor	r24, r24
    101a:	77 fd       	sbrc	r23, 7
    101c:	80 95       	com	r24
    101e:	98 2f       	mov	r25, r24
    1020:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__floatsisf>
    1024:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <sqrt>
    1028:	0e 94 41 1b 	call	0x3682	; 0x3682 <__fixsfsi>
}
    102c:	cb 01       	movw	r24, r22
    102e:	26 96       	adiw	r28, 0x06	; 6
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
    1040:	90 93 b5 02 	sts	0x02B5, r25
    1044:	80 93 b4 02 	sts	0x02B4, r24
}
    1048:	08 95       	ret

0000104a <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
    104a:	90 93 b7 02 	sts	0x02B7, r25
    104e:	80 93 b6 02 	sts	0x02B6, r24
}
    1052:	08 95       	ret

00001054 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
    1058:	ed ee       	ldi	r30, 0xED	; 237
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    105e:	82 95       	swap	r24
    1060:	80 7f       	andi	r24, 0xF0	; 240
    1062:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
    1064:	c1 ef       	ldi	r28, 0xF1	; 241
    1066:	d0 e0       	ldi	r29, 0x00	; 0
    1068:	38 81       	ld	r19, Y
    106a:	cb 01       	movw	r24, r22
    106c:	80 7e       	andi	r24, 0xE0	; 224
    106e:	90 70       	andi	r25, 0x00	; 0
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	92 95       	swap	r25
    1076:	82 95       	swap	r24
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	89 27       	eor	r24, r25
    107c:	9f 70       	andi	r25, 0x0F	; 15
    107e:	89 27       	eor	r24, r25
    1080:	38 7f       	andi	r19, 0xF8	; 248
    1082:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
    1084:	a0 ef       	ldi	r26, 0xF0	; 240
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	8c 91       	ld	r24, X
    108a:	66 0f       	add	r22, r22
    108c:	66 0f       	add	r22, r22
    108e:	66 0f       	add	r22, r22
    1090:	87 70       	andi	r24, 0x07	; 7
    1092:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
    1094:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
    1096:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
    1098:	a5 ef       	ldi	r26, 0xF5	; 245
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	8c 91       	ld	r24, X
    109e:	87 60       	ori	r24, 0x07	; 7
    10a0:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
    10a2:	a4 ef       	ldi	r26, 0xF4	; 244
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	8c 91       	ld	r24, X
    10a8:	88 6f       	ori	r24, 0xF8	; 248
    10aa:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    10ac:	20 83       	st	Z, r18
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    10b4:	ed ee       	ldi	r30, 0xED	; 237
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    10ba:	82 95       	swap	r24
    10bc:	80 7f       	andi	r24, 0xF0	; 240
    10be:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
    10c0:	a5 ef       	ldi	r26, 0xF5	; 245
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	8c 91       	ld	r24, X
    10c6:	88 7f       	andi	r24, 0xF8	; 248
    10c8:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
    10ca:	a4 ef       	ldi	r26, 0xF4	; 244
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	8c 91       	ld	r24, X
    10d0:	87 70       	andi	r24, 0x07	; 7
    10d2:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    10d4:	90 83       	st	Z, r25
}
    10d6:	08 95       	ret

000010d8 <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
    10d8:	25 2f       	mov	r18, r21
    10da:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    10dc:	ed ee       	ldi	r30, 0xED	; 237
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    10e2:	82 95       	swap	r24
    10e4:	80 7f       	andi	r24, 0xF0	; 240
    10e6:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
    10e8:	86 2f       	mov	r24, r22
    10ea:	82 95       	swap	r24
    10ec:	86 95       	lsr	r24
    10ee:	87 70       	andi	r24, 0x07	; 7
    10f0:	44 0f       	add	r20, r20
    10f2:	44 0f       	add	r20, r20
    10f4:	44 0f       	add	r20, r20
    10f6:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    10f8:	c9 01       	movw	r24, r18
    10fa:	80 7e       	andi	r24, 0xE0	; 224
    10fc:	9f 71       	andi	r25, 0x1F	; 31
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	92 95       	swap	r25
    1104:	82 95       	swap	r24
    1106:	8f 70       	andi	r24, 0x0F	; 15
    1108:	89 27       	eor	r24, r25
    110a:	9f 70       	andi	r25, 0x0F	; 15
    110c:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
    110e:	22 0f       	add	r18, r18
    1110:	22 0f       	add	r18, r18
    1112:	22 0f       	add	r18, r18
    1114:	37 2f       	mov	r19, r23
    1116:	32 95       	swap	r19
    1118:	36 95       	lsr	r19
    111a:	37 70       	andi	r19, 0x07	; 7
    111c:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
    111e:	77 0f       	add	r23, r23
    1120:	77 0f       	add	r23, r23
    1122:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
    1124:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
    1128:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    112c:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
    1130:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
    1134:	50 83       	st	Z, r21
}
    1136:	08 95       	ret

00001138 <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	f8 2e       	mov	r15, r24
    1144:	8b 01       	movw	r16, r22
    1146:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    114e:	c7 2f       	mov	r28, r23
    1150:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
    1152:	c8 01       	movw	r24, r16
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    115a:	27 2f       	mov	r18, r23
    115c:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    115e:	ed ee       	ldi	r30, 0xED	; 237
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1164:	f2 94       	swap	r15
    1166:	b0 ef       	ldi	r27, 0xF0	; 240
    1168:	fb 22       	and	r15, r27
    116a:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
    116c:	43 ef       	ldi	r20, 0xF3	; 243
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	da 01       	movw	r26, r20
    1172:	6c 91       	ld	r22, X
    1174:	8d 2f       	mov	r24, r29
    1176:	82 95       	swap	r24
    1178:	86 95       	lsr	r24
    117a:	87 70       	andi	r24, 0x07	; 7
    117c:	68 7f       	andi	r22, 0xF8	; 248
    117e:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    1180:	ce 01       	movw	r24, r28
    1182:	80 7e       	andi	r24, 0xE0	; 224
    1184:	9f 71       	andi	r25, 0x1F	; 31
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	92 95       	swap	r25
    118c:	82 95       	swap	r24
    118e:	8f 70       	andi	r24, 0x0F	; 15
    1190:	89 27       	eor	r24, r25
    1192:	9f 70       	andi	r25, 0x0F	; 15
    1194:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
    1196:	a1 ef       	ldi	r26, 0xF1	; 241
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	7c 91       	ld	r23, X
    119c:	fc 2e       	mov	r15, r28
    119e:	ff 0c       	add	r15, r15
    11a0:	ff 0c       	add	r15, r15
    11a2:	ff 0c       	add	r15, r15
    11a4:	77 70       	andi	r23, 0x07	; 7
    11a6:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
    11a8:	ea 01       	movw	r28, r20
    11aa:	68 83       	st	Y, r22
	CANIDT2 = idt2;
    11ac:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    11b0:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
    11b2:	c7 ef       	ldi	r28, 0xF7	; 247
    11b4:	d0 e0       	ldi	r29, 0x00	; 0
    11b6:	48 81       	ld	r20, Y
    11b8:	83 2f       	mov	r24, r19
    11ba:	82 95       	swap	r24
    11bc:	86 95       	lsr	r24
    11be:	87 70       	andi	r24, 0x07	; 7
    11c0:	48 7f       	andi	r20, 0xF8	; 248
    11c2:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
    11c4:	c9 01       	movw	r24, r18
    11c6:	80 7e       	andi	r24, 0xE0	; 224
    11c8:	9f 71       	andi	r25, 0x1F	; 31
    11ca:	96 95       	lsr	r25
    11cc:	87 95       	ror	r24
    11ce:	92 95       	swap	r25
    11d0:	82 95       	swap	r24
    11d2:	8f 70       	andi	r24, 0x0F	; 15
    11d4:	89 27       	eor	r24, r25
    11d6:	9f 70       	andi	r25, 0x0F	; 15
    11d8:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
    11da:	a5 ef       	ldi	r26, 0xF5	; 245
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	5c 91       	ld	r21, X
    11e0:	22 0f       	add	r18, r18
    11e2:	22 0f       	add	r18, r18
    11e4:	22 0f       	add	r18, r18
    11e6:	57 70       	andi	r21, 0x07	; 7
    11e8:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
    11ea:	48 83       	st	Y, r20
	CANIDM2 = idm2;
    11ec:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
    11f0:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
    11f2:	00 83       	st	Z, r16
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	08 95       	ret

00001200 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
    1200:	ed ee       	ldi	r30, 0xED	; 237
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1206:	82 95       	swap	r24
    1208:	80 7f       	andi	r24, 0xF0	; 240
    120a:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
    120c:	a7 ef       	ldi	r26, 0xF7	; 247
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	8c 91       	ld	r24, X
    1212:	88 7f       	andi	r24, 0xF8	; 248
    1214:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
    1216:	a6 ef       	ldi	r26, 0xF6	; 246
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	8c 91       	ld	r24, X
    121c:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
    121e:	a5 ef       	ldi	r26, 0xF5	; 245
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	8c 91       	ld	r24, X
    1224:	87 70       	andi	r24, 0x07	; 7
    1226:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1228:	90 83       	st	Z, r25
}
    122a:	08 95       	ret

0000122c <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    122c:	ed ee       	ldi	r30, 0xED	; 237
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1232:	82 95       	swap	r24
    1234:	80 7f       	andi	r24, 0xF0	; 240
    1236:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1238:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    123c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    1240:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    1244:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    1248:	90 83       	st	Z, r25
}
    124a:	08 95       	ret

0000124c <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    124c:	ed ee       	ldi	r30, 0xED	; 237
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1252:	82 95       	swap	r24
    1254:	80 7f       	andi	r24, 0xF0	; 240
    1256:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
    1258:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
    125c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
    1260:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
    1264:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
    1268:	90 83       	st	Z, r25
}
    126a:	08 95       	ret

0000126c <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
    1272:	ed ee       	ldi	r30, 0xED	; 237
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
    1278:	38 2f       	mov	r19, r24
    127a:	32 95       	swap	r19
    127c:	30 7f       	andi	r19, 0xF0	; 240
    127e:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
    1280:	ce ed       	ldi	r28, 0xDE	; 222
    1282:	d0 e0       	ldi	r29, 0x00	; 0
    1284:	98 81       	ld	r25, Y
    1286:	a1 e0       	ldi	r26, 0x01	; 1
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <_Z21can_setup_receive_mobhssh+0x24>
    128c:	aa 0f       	add	r26, r26
    128e:	bb 1f       	adc	r27, r27
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <_Z21can_setup_receive_mobhssh+0x20>
    1294:	9a 2b       	or	r25, r26
    1296:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1298:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    129a:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    129c:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    12a0:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    12a4:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    12a8:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    12ac:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
    12ae:	20 69       	ori	r18, 0x90	; 144
    12b0:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
    12b4:	a8 ed       	ldi	r26, 0xD8	; 216
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	8c 91       	ld	r24, X
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
    12be:	10 83       	st	Z, r17
}
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	08 95       	ret

000012c8 <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	28 e0       	ldi	r18, 0x08	; 8
    12e0:	0e 94 36 09 	call	0x126c	; 0x126c <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
    12e4:	60 91 b8 02 	lds	r22, 0x02B8
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	0e 94 2a 08 	call	0x1054	; 0x1054 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	28 e0       	ldi	r18, 0x08	; 8
    12fc:	0e 94 36 09 	call	0x126c	; 0x126c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1300:	cd ee       	ldi	r28, 0xED	; 237
    1302:	d0 e0       	ldi	r29, 0x00	; 0
    1304:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1306:	80 e3       	ldi	r24, 0x30	; 48
    1308:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    130a:	05 ef       	ldi	r16, 0xF5	; 245
    130c:	10 e0       	ldi	r17, 0x00	; 0
    130e:	f8 01       	movw	r30, r16
    1310:	80 81       	ld	r24, Z
    1312:	88 7f       	andi	r24, 0xF8	; 248
    1314:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    1316:	84 ef       	ldi	r24, 0xF4	; 244
    1318:	e8 2e       	mov	r14, r24
    131a:	f1 2c       	mov	r15, r1
    131c:	f7 01       	movw	r30, r14
    131e:	80 81       	ld	r24, Z
    1320:	87 70       	andi	r24, 0x07	; 7
    1322:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    1324:	98 83       	st	Y, r25
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	63 e2       	ldi	r22, 0x23	; 35
    132a:	7c ef       	ldi	r23, 0xFC	; 252
    132c:	43 e2       	ldi	r20, 0x23	; 35
    132e:	5c ef       	ldi	r21, 0xFC	; 252
    1330:	0e 94 9c 08 	call	0x1138	; 0x1138 <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
    1334:	85 e0       	ldi	r24, 0x05	; 5
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	28 e0       	ldi	r18, 0x08	; 8
    1340:	0e 94 36 09 	call	0x126c	; 0x126c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1344:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1346:	80 e5       	ldi	r24, 0x50	; 80
    1348:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    134a:	f8 01       	movw	r30, r16
    134c:	80 81       	ld	r24, Z
    134e:	88 7f       	andi	r24, 0xF8	; 248
    1350:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    1352:	f7 01       	movw	r30, r14
    1354:	80 81       	ld	r24, Z
    1356:	87 70       	andi	r24, 0x07	; 7
    1358:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    135a:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	7c ef       	ldi	r23, 0xFC	; 252
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	5c ef       	ldi	r21, 0xFC	; 252
    1366:	0e 94 9c 08 	call	0x1138	; 0x1138 <_Z20can_add_id_to_filterhtt>
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	08 95       	ret

00001378 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
    1378:	ed ee       	ldi	r30, 0xED	; 237
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
    137e:	82 95       	swap	r24
    1380:	80 7f       	andi	r24, 0xF0	; 240
    1382:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
    1384:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    1388:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
    138c:	90 83       	st	Z, r25
}
    138e:	08 95       	ret

00001390 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
    1390:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
    1392:	40 91 f3 00 	lds	r20, 0x00F3
    1396:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
    1398:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
    139c:	80 91 f1 00 	lds	r24, 0x00F1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
    13a2:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
    13a6:	ba 01       	movw	r22, r20
    13a8:	76 95       	lsr	r23
    13aa:	67 95       	ror	r22
    13ac:	76 95       	lsr	r23
    13ae:	67 95       	ror	r22
    13b0:	76 95       	lsr	r23
    13b2:	67 95       	ror	r22
    13b4:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
    13b6:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
    13b8:	22 0f       	add	r18, r18
    13ba:	33 1f       	adc	r19, r19
    13bc:	22 95       	swap	r18
    13be:	32 95       	swap	r19
    13c0:	30 7f       	andi	r19, 0xF0	; 240
    13c2:	32 27       	eor	r19, r18
    13c4:	20 7f       	andi	r18, 0xF0	; 240
    13c6:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
    13c8:	54 2f       	mov	r21, r20
    13ca:	44 27       	eor	r20, r20
    13cc:	52 95       	swap	r21
    13ce:	55 0f       	add	r21, r21
    13d0:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    13d2:	24 2b       	or	r18, r20
    13d4:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
    13d6:	ac 01       	movw	r20, r24
    13d8:	56 95       	lsr	r21
    13da:	47 95       	ror	r20
    13dc:	56 95       	lsr	r21
    13de:	47 95       	ror	r20
    13e0:	56 95       	lsr	r21
    13e2:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    13e4:	24 2b       	or	r18, r20
    13e6:	35 2b       	or	r19, r21
    13e8:	32 83       	std	Z+2, r19	; 0x02
    13ea:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
    13ec:	82 95       	swap	r24
    13ee:	88 0f       	add	r24, r24
    13f0:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
    13f2:	a6 95       	lsr	r26
    13f4:	a6 95       	lsr	r26
    13f6:	a6 95       	lsr	r26
    13f8:	a8 2b       	or	r26, r24
    13fa:	a3 83       	std	Z+3, r26	; 0x03
}
    13fc:	08 95       	ret

000013fe <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
    1404:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
    1408:	80 91 ef 00 	lds	r24, 0x00EF
    140c:	8f 70       	andi	r24, 0x0F	; 15
    140e:	28 2f       	mov	r18, r24
    1410:	22 0f       	add	r18, r18
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	91 7e       	andi	r25, 0xE1	; 225
    1416:	92 2b       	or	r25, r18
    1418:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
    141a:	48 2f       	mov	r20, r24
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	41 15       	cp	r20, r1
    1420:	51 05       	cpc	r21, r1
    1422:	59 f0       	breq	.+22     	; 0x143a <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
    1424:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
    142a:	90 91 fa 00 	lds	r25, 0x00FA
    142e:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	24 17       	cp	r18, r20
    1436:	35 07       	cpc	r19, r21
    1438:	c4 f3       	brlt	.-16     	; 0x142a <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	cf 93       	push	r28
    1460:	ef 93       	push	r30
    1462:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
    1464:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
    1468:	40 91 ec 00 	lds	r20, 0x00EC
    146c:	42 95       	swap	r20
    146e:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    1470:	4f 30       	cpi	r20, 0x0F	; 15
    1472:	09 f4       	brne	.+2      	; 0x1476 <__vector_18+0x36>
    1474:	87 c0       	rjmp	.+270    	; 0x1584 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
    1476:	80 91 ec 00 	lds	r24, 0x00EC
    147a:	80 7f       	andi	r24, 0xF0	; 240
    147c:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
    1480:	80 91 ee 00 	lds	r24, 0x00EE
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	8f 71       	andi	r24, 0x1F	; 31
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	09 f4       	brne	.+2      	; 0x1490 <__vector_18+0x50>
    148e:	40 c0       	rjmp	.+128    	; 0x1510 <__vector_18+0xd0>
		 byte st = CANSTMOB;
    1490:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	82 ff       	sbrs	r24, 2
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <__vector_18+0x64>
    149a:	20 91 ee 00 	lds	r18, 0x00EE
    149e:	2f 7e       	andi	r18, 0xEF	; 239
    14a0:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
    14a4:	9c 01       	movw	r18, r24
    14a6:	23 70       	andi	r18, 0x03	; 3
    14a8:	30 70       	andi	r19, 0x00	; 0
    14aa:	21 15       	cp	r18, r1
    14ac:	31 05       	cpc	r19, r1
    14ae:	29 f0       	breq	.+10     	; 0x14ba <__vector_18+0x7a>
    14b0:	20 91 ee 00 	lds	r18, 0x00EE
    14b4:	27 7f       	andi	r18, 0xF7	; 247
    14b6:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
    14ba:	81 ff       	sbrs	r24, 1
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <__vector_18+0x88>
    14be:	20 91 ee 00 	lds	r18, 0x00EE
    14c2:	2b 7f       	andi	r18, 0xFB	; 251
    14c4:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
    14c8:	80 ff       	sbrs	r24, 0
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <__vector_18+0x96>
    14cc:	80 91 ee 00 	lds	r24, 0x00EE
    14d0:	8d 7f       	andi	r24, 0xFD	; 253
    14d2:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
    14d6:	45 30       	cpi	r20, 0x05	; 5
    14d8:	09 f4       	brne	.+2      	; 0x14dc <__vector_18+0x9c>
    14da:	4b c0       	rjmp	.+150    	; 0x1572 <__vector_18+0x132>
    14dc:	41 30       	cpi	r20, 0x01	; 1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <__vector_18+0xa2>
    14e0:	48 c0       	rjmp	.+144    	; 0x1572 <__vector_18+0x132>
    14e2:	43 30       	cpi	r20, 0x03	; 3
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <__vector_18+0xa8>
    14e6:	45 c0       	rjmp	.+138    	; 0x1572 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
    14e8:	c0 93 ed 00 	sts	0x00ED, r28
}
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	cf 91       	pop	r28
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
    1510:	80 91 ee 00 	lds	r24, 0x00EE
    1514:	85 fd       	sbrc	r24, 5
    1516:	13 c0       	rjmp	.+38     	; 0x153e <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
    1518:	80 91 ee 00 	lds	r24, 0x00EE
    151c:	86 ff       	sbrs	r24, 6
    151e:	e4 cf       	rjmp	.-56     	; 0x14e8 <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
    1520:	e0 91 b6 02 	lds	r30, 0x02B6
    1524:	f0 91 b7 02 	lds	r31, 0x02B7
    1528:	30 97       	sbiw	r30, 0x00	; 0
    152a:	09 f0       	breq	.+2      	; 0x152e <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
    152c:	09 95       	icall

		TransmittedSuccesfully = TRUE;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 ab 02 	sts	0x02AB, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
    1534:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
    1538:	10 92 ee 00 	sts	0x00EE, r1
    153c:	d5 cf       	rjmp	.-86     	; 0x14e8 <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	80 93 aa 02 	sts	0x02AA, r24
       	can_retrieve_data( &LastReceivedMsg );
    1544:	8b e9       	ldi	r24, 0x9B	; 155
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
    154c:	8b e9       	ldi	r24, 0x9B	; 155
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
    1554:	88 23       	and	r24, r24
    1556:	69 f4       	brne	.+26     	; 0x1572 <__vector_18+0x132>
			
	       	QueueMessage( &LastReceivedMsg );
    1558:	8b e9       	ldi	r24, 0x9B	; 155
    155a:	92 e0       	ldi	r25, 0x02	; 2
    155c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
    1560:	e0 91 b4 02 	lds	r30, 0x02B4
    1564:	f0 91 b5 02 	lds	r31, 0x02B5
    1568:	30 97       	sbiw	r30, 0x00	; 0
    156a:	19 f0       	breq	.+6      	; 0x1572 <__vector_18+0x132>
    	   		rx_call_back( &LastReceivedMsg );
    156c:	8b e9       	ldi	r24, 0x9B	; 155
    156e:	92 e0       	ldi	r25, 0x02	; 2
    1570:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
    1572:	88 e9       	ldi	r24, 0x98	; 152
    1574:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
    1578:	80 91 ee 00 	lds	r24, 0x00EE
    157c:	8f 7d       	andi	r24, 0xDF	; 223
    157e:	80 93 ee 00 	sts	0x00EE, r24
    1582:	b2 cf       	rjmp	.-156    	; 0x14e8 <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    1584:	80 91 da 00 	lds	r24, 0x00DA
    1588:	80 93 da 00 	sts	0x00DA, r24
    158c:	af cf       	rjmp	.-162    	; 0x14ec <__vector_18+0xac>

0000158e <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
    1594:	98 2f       	mov	r25, r24
    1596:	92 95       	swap	r25
    1598:	90 7f       	andi	r25, 0xF0	; 240
   cli();
    159a:	f8 94       	cli
   CANPAGE = page;
    159c:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
    15a0:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
    15a4:	48 81       	ld	r20, Y
    15a6:	59 81       	ldd	r21, Y+1	; 0x01
    15a8:	6a 81       	ldd	r22, Y+2	; 0x02
    15aa:	7b 81       	ldd	r23, Y+3	; 0x03
    15ac:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	86 95       	lsr	r24
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	79 f0       	breq	.+30     	; 0x15d6 <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
    15b8:	fe 01       	movw	r30, r28
    15ba:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
    15c0:	21 91       	ld	r18, Z+
    15c2:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	26 95       	lsr	r18
    15cc:	2f 70       	andi	r18, 0x0F	; 15
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	82 17       	cp	r24, r18
    15d2:	93 07       	cpc	r25, r19
    15d4:	ac f3       	brlt	.-22     	; 0x15c0 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
    15d6:	80 91 f0 00 	lds	r24, 0x00F0
    15da:	8b 7f       	andi	r24, 0xFB	; 251
    15dc:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	86 95       	lsr	r24
    15e4:	8f 70       	andi	r24, 0x0F	; 15
    15e6:	80 65       	ori	r24, 0x50	; 80
    15e8:	80 93 ef 00 	sts	0x00EF, r24
   sei();
    15ec:	78 94       	sei
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
    15f4:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
    15f8:	80 91 ee 00 	lds	r24, 0x00EE
    15fc:	86 ff       	sbrs	r24, 6
    15fe:	fc cf       	rjmp	.-8      	; 0x15f8 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
    1600:	08 95       	ret

00001602 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    1602:	20 91 f8 00 	lds	r18, 0x00F8
    1606:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
    1608:	40 91 f9 00 	lds	r20, 0x00F9
    160c:	94 2f       	mov	r25, r20
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	28 2b       	or	r18, r24
    1612:	39 2b       	or	r19, r25
  return retval;
}
    1614:	c9 01       	movw	r24, r18
    1616:	08 95       	ret

00001618 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
    161e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_Z17can_retrieve_dataP4sCAN>
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	88 0f       	add	r24, r24
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	91 7e       	andi	r25, 0xE1	; 225
    162a:	98 2b       	or	r25, r24
    162c:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    162e:	80 91 f8 00 	lds	r24, 0x00F8
    1632:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
    1634:	40 91 f9 00 	lds	r20, 0x00F9
    1638:	34 2f       	mov	r19, r20
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	82 2b       	or	r24, r18
    163e:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
    1640:	9e 87       	std	Y+14, r25	; 0x0e
    1642:	8d 87       	std	Y+13, r24	; 0x0d
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	61 f0       	breq	.+24     	; 0x1666 <_Z8set_baudh+0x1c>
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	30 f0       	brcs	.+12     	; 0x165e <_Z8set_baudh+0x14>
    1652:	85 30       	cpi	r24, 0x05	; 5
    1654:	d1 f0       	breq	.+52     	; 0x168a <_Z8set_baudh+0x40>
    1656:	85 30       	cpi	r24, 0x05	; 5
    1658:	80 f4       	brcc	.+32     	; 0x167a <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    165a:	82 e1       	ldi	r24, 0x12	; 18
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 f0       	breq	.+36     	; 0x1686 <_Z8set_baudh+0x3c>
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	71 f0       	breq	.+28     	; 0x1682 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    1666:	8e e0       	ldi	r24, 0x0E	; 14
    1668:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    166c:	84 e0       	ldi	r24, 0x04	; 4
    166e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    1672:	83 e1       	ldi	r24, 0x13	; 19
    1674:	80 93 e4 00 	sts	0x00E4, r24
    1678:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    167a:	86 30       	cpi	r24, 0x06	; 6
    167c:	a1 f7       	brne	.-24     	; 0x1666 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    167e:	86 e2       	ldi	r24, 0x26	; 38
    1680:	f3 cf       	rjmp	.-26     	; 0x1668 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    1682:	86 e0       	ldi	r24, 0x06	; 6
    1684:	f1 cf       	rjmp	.-30     	; 0x1668 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	ef cf       	rjmp	.-34     	; 0x1668 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    168a:	8e e1       	ldi	r24, 0x1E	; 30
    168c:	ed cf       	rjmp	.-38     	; 0x1668 <_Z8set_baudh+0x1e>

0000168e <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
    1694:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    1698:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
    169a:	29 2f       	mov	r18, r25
    169c:	22 95       	swap	r18
    169e:	20 7f       	andi	r18, 0xF0	; 240
    16a0:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
    16a4:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    16a8:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    16ac:	9f 5f       	subi	r25, 0xFF	; 255
    16ae:	96 30       	cpi	r25, 0x06	; 6
    16b0:	a1 f7       	brne	.-24     	; 0x169a <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
    16b2:	90 ea       	ldi	r25, 0xA0	; 160
    16b4:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
    16b8:	0e 94 25 0b 	call	0x164a	; 0x164a <_Z8set_baudh>
   can_init_mobs();
    16bc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
    16c0:	80 91 d9 00 	lds	r24, 0x00D9
    16c4:	82 ff       	sbrs	r24, 2
    16c6:	fc cf       	rjmp	.-8      	; 0x16c0 <_Z8can_inith+0x32>
   }
   //sei();
}
    16c8:	08 95       	ret

000016ca <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
    16ca:	88 23       	and	r24, r24
    16cc:	51 f4       	brne	.+20     	; 0x16e2 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
    16da:	83 e1       	ldi	r24, 0x13	; 19
    16dc:	80 93 e4 00 	sts	0x00E4, r24
    16e0:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
    16e2:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
    16e6:	8c e0       	ldi	r24, 0x0C	; 12
    16e8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
    16ec:	86 e3       	ldi	r24, 0x36	; 54
    16ee:	80 93 e4 00 	sts	0x00E4, r24
    16f2:	08 95       	ret

000016f4 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    16f4:	88 23       	and	r24, r24
    16f6:	51 f4       	brne	.+20     	; 0x170c <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    16f8:	86 e0       	ldi	r24, 0x06	; 6
    16fa:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    1704:	83 e1       	ldi	r24, 0x13	; 19
    1706:	80 93 e4 00 	sts	0x00E4, r24
    170a:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    1712:	8c e0       	ldi	r24, 0x0C	; 12
    1714:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    1718:	87 e3       	ldi	r24, 0x37	; 55
    171a:	80 93 e4 00 	sts	0x00E4, r24
    171e:	08 95       	ret

00001720 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1720:	88 23       	and	r24, r24
    1722:	51 f4       	brne	.+20     	; 0x1738 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    1724:	8e e0       	ldi	r24, 0x0E	; 14
    1726:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    1730:	83 e1       	ldi	r24, 0x13	; 19
    1732:	80 93 e4 00 	sts	0x00E4, r24
    1736:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    1738:	86 e0       	ldi	r24, 0x06	; 6
    173a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    173e:	8c e0       	ldi	r24, 0x0C	; 12
    1740:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    1744:	87 e3       	ldi	r24, 0x37	; 55
    1746:	80 93 e4 00 	sts	0x00E4, r24
    174a:	08 95       	ret

0000174c <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    174c:	88 23       	and	r24, r24
    174e:	51 f4       	brne	.+20     	; 0x1764 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    1750:	82 e1       	ldi	r24, 0x12	; 18
    1752:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    1756:	84 e0       	ldi	r24, 0x04	; 4
    1758:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    175c:	83 e1       	ldi	r24, 0x13	; 19
    175e:	80 93 e4 00 	sts	0x00E4, r24
    1762:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    1764:	88 e0       	ldi	r24, 0x08	; 8
    1766:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    176a:	8c e0       	ldi	r24, 0x0C	; 12
    176c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    1770:	87 e3       	ldi	r24, 0x37	; 55
    1772:	80 93 e4 00 	sts	0x00E4, r24
    1776:	08 95       	ret

00001778 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1778:	88 23       	and	r24, r24
    177a:	51 f4       	brne	.+20     	; 0x1790 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    177c:	8e e1       	ldi	r24, 0x1E	; 30
    177e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    1782:	84 e0       	ldi	r24, 0x04	; 4
    1784:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    1788:	83 e1       	ldi	r24, 0x13	; 19
    178a:	80 93 e4 00 	sts	0x00E4, r24
    178e:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    1790:	8e e0       	ldi	r24, 0x0E	; 14
    1792:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    179c:	87 e3       	ldi	r24, 0x37	; 55
    179e:	80 93 e4 00 	sts	0x00E4, r24
    17a2:	08 95       	ret

000017a4 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    17a4:	88 23       	and	r24, r24
    17a6:	51 f4       	brne	.+20     	; 0x17bc <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    17a8:	86 e2       	ldi	r24, 0x26	; 38
    17aa:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    17ae:	84 e0       	ldi	r24, 0x04	; 4
    17b0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    17b4:	83 e1       	ldi	r24, 0x13	; 19
    17b6:	80 93 e4 00 	sts	0x00E4, r24
    17ba:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    17bc:	82 e1       	ldi	r24, 0x12	; 18
    17be:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    17c2:	8c e0       	ldi	r24, 0x0C	; 12
    17c4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    17c8:	87 e3       	ldi	r24, 0x37	; 55
    17ca:	80 93 e4 00 	sts	0x00E4, r24
    17ce:	08 95       	ret

000017d0 <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    17d0:	83 e9       	ldi	r24, 0x93	; 147
    17d2:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    17d6:	ee e7       	ldi	r30, 0x7E	; 126
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	88 60       	ori	r24, 0x08	; 8
    17de:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    17e0:	80 e8       	ldi	r24, 0x80	; 128
    17e2:	80 93 7b 00 	sts	0x007B, r24
}
    17e6:	08 95       	ret

000017e8 <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
    17e8:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
    17f2:	e3 e4       	ldi	r30, 0x43	; 67
    17f4:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
    17f8:	80 91 7a 00 	lds	r24, 0x007A
    17fc:	80 64       	ori	r24, 0x40	; 64
    17fe:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1802:	80 91 7a 00 	lds	r24, 0x007A
    1806:	86 fd       	sbrc	r24, 6
    1808:	fc cf       	rjmp	.-8      	; 0x1802 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
    180a:	80 91 78 00 	lds	r24, 0x0078
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	ba 01       	movw	r22, r20
    1816:	6f 70       	andi	r22, 0x0F	; 15
    1818:	70 70       	andi	r23, 0x00	; 0
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <_Z18pick_random_numberv+0x38>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	6a 95       	dec	r22
    1822:	e2 f7       	brpl	.-8      	; 0x181c <_Z18pick_random_numberv+0x34>
		result |= (tmp);
    1824:	28 2b       	or	r18, r24
    1826:	39 2b       	or	r19, r25
		tmp = ADCH;  
    1828:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    182c:	4f 5f       	subi	r20, 0xFF	; 255
    182e:	5f 4f       	sbci	r21, 0xFF	; 255
    1830:	40 31       	cpi	r20, 0x10	; 16
    1832:	51 05       	cpc	r21, r1
    1834:	f9 f6       	brne	.-66     	; 0x17f4 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
    1836:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
    1838:	c9 01       	movw	r24, r18
    183a:	08 95       	ret

0000183c <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	0e 94 36 09 	call	0x126c	; 0x126c <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	63 e2       	ldi	r22, 0x23	; 35
    1856:	7c ef       	ldi	r23, 0xFC	; 252
    1858:	43 e2       	ldi	r20, 0x23	; 35
    185a:	5c ef       	ldi	r21, 0xFC	; 252
    185c:	0e 94 9c 08 	call	0x1138	; 0x1138 <_Z20can_add_id_to_filterhtt>
}
    1860:	08 95       	ret

00001862 <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    1862:	83 e9       	ldi	r24, 0x93	; 147
    1864:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    1868:	80 91 7e 00 	lds	r24, 0x007E
    186c:	88 60       	ori	r24, 0x08	; 8
    186e:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    1872:	80 e8       	ldi	r24, 0x80	; 128
    1874:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
    1878:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	90 93 bc 02 	sts	0x02BC, r25
    1882:	80 93 bb 02 	sts	0x02BB, r24
    1886:	80 93 bd 02 	sts	0x02BD, r24

	// put adc back into mode for POT
	adc_init();
    188a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    188e:	80 91 b9 02 	lds	r24, 0x02B9
    1892:	88 23       	and	r24, r24
    1894:	51 f0       	breq	.+20     	; 0x18aa <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	80 93 b9 02 	sts	0x02B9, r24
    189c:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    189e:	80 93 c0 02 	sts	0x02C0, r24
	init_complete = TRUE;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	80 93 ba 02 	sts	0x02BA, r24
}
    18a8:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME
		init_path = 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	80 93 c0 02 	sts	0x02C0, r24
		setup_instance_claim_mob();
    18b0:	0e 94 1e 0c 	call	0x183c	; 0x183c <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    18b4:	10 92 b8 02 	sts	0x02B8, r1
    18b8:	80 91 c0 02 	lds	r24, 0x02C0
    18bc:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    18be:	80 93 c0 02 	sts	0x02C0, r24
	init_complete = TRUE;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	80 93 ba 02 	sts	0x02BA, r24
}
    18c8:	08 95       	ret

000018ca <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    18d0:	83 e2       	ldi	r24, 0x23	; 35
    18d2:	9c ef       	ldi	r25, 0xFC	; 252
    18d4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    18d8:	68 83       	st	Y, r22
    18da:	79 83       	std	Y+1, r23	; 0x01
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    18e0:	80 91 b8 02 	lds	r24, 0x02B8
    18e4:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    18e6:	80 91 b9 02 	lds	r24, 0x02B9
    18ea:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    18ec:	80 91 bd 02 	lds	r24, 0x02BD
    18f0:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    18f2:	80 91 c0 02 	lds	r24, 0x02C0
    18f6:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    18f8:	80 91 c1 02 	lds	r24, 0x02C1
    18fc:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    18fe:	80 91 3b 03 	lds	r24, 0x033B
    1902:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1908:	8e 60       	ori	r24, 0x0E	; 14
    190a:	8c 83       	std	Y+4, r24	; 0x04
}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <_Z22can_instance_timeslicev>:

byte ts_state = 0;

void can_instance_timeslice()
{
	ts_state = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	80 93 c1 02 	sts	0x02C1, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    1918:	40 91 b9 02 	lds	r20, 0x02B9
    191c:	41 30       	cpi	r20, 0x01	; 1
    191e:	59 f1       	breq	.+86     	; 0x1976 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    1920:	80 91 ba 02 	lds	r24, 0x02BA
    1924:	88 23       	and	r24, r24
    1926:	39 f1       	breq	.+78     	; 0x1976 <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    1928:	80 91 bb 02 	lds	r24, 0x02BB
    192c:	90 91 bc 02 	lds	r25, 0x02BC
    1930:	9c 01       	movw	r18, r24
    1932:	21 50       	subi	r18, 0x01	; 1
    1934:	30 40       	sbci	r19, 0x00	; 0
    1936:	30 93 bc 02 	sts	0x02BC, r19
    193a:	20 93 bb 02 	sts	0x02BB, r18
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	d1 f4       	brne	.+52     	; 0x1976 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	90 93 bc 02 	sts	0x02BC, r25
    194a:	80 93 bb 02 	sts	0x02BB, r24
	ts_state = 2;
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	80 93 c1 02 	sts	0x02C1, r24
	
	if (Confirmed==NOT_CLAIMED)
    1954:	44 23       	and	r20, r20
    1956:	91 f0       	breq	.+36     	; 0x197c <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    1958:	42 30       	cpi	r20, 0x02	; 2
    195a:	09 f4       	brne	.+2      	; 0x195e <_Z22can_instance_timeslicev+0x4c>
    195c:	5a c0       	rjmp	.+180    	; 0x1a12 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    195e:	40 32       	cpi	r20, 0x20	; 32
    1960:	39 f1       	breq	.+78     	; 0x19b0 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
    1962:	40 38       	cpi	r20, 0x80	; 128
    1964:	09 f4       	brne	.+2      	; 0x1968 <_Z22can_instance_timeslicev+0x56>
    1966:	47 c0       	rjmp	.+142    	; 0x19f6 <_Z22can_instance_timeslicev+0xe4>
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1968:	40 34       	cpi	r20, 0x40	; 64
    196a:	31 f0       	breq	.+12     	; 0x1978 <_Z22can_instance_timeslicev+0x66>
    196c:	80 91 c1 02 	lds	r24, 0x02C1
    1970:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
    1972:	80 93 c1 02 	sts	0x02C1, r24
    1976:	08 95       	ret
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1978:	86 e8       	ldi	r24, 0x86	; 134
    197a:	fb cf       	rjmp	.-10     	; 0x1972 <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state = 2;
	
	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	80 93 c1 02 	sts	0x02C1, r24
		Confirmed = CLAIM_PENDING;
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	80 93 b9 02 	sts	0x02B9, r24
		can_prep_instance_request( &msg2, rand_instance );
    1988:	8c e8       	ldi	r24, 0x8C	; 140
    198a:	92 e0       	ldi	r25, 0x02	; 2
    198c:	60 91 bd 02 	lds	r22, 0x02BD
    1990:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	6c e8       	ldi	r22, 0x8C	; 140
    1998:	72 e0       	ldi	r23, 0x02	; 2
    199a:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    199e:	8c e2       	ldi	r24, 0x2C	; 44
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	90 93 bf 02 	sts	0x02BF, r25
    19a6:	80 93 be 02 	sts	0x02BE, r24
    19aa:	40 91 b9 02 	lds	r20, 0x02B9
    19ae:	d4 cf       	rjmp	.-88     	; 0x1958 <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    19b0:	84 e0       	ldi	r24, 0x04	; 4
    19b2:	80 93 c1 02 	sts	0x02C1, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT
		cli();
    19b6:	f8 94       	cli
		byte restore = CANPAGE;
    19b8:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    19bc:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    19c0:	80 91 ee 00 	lds	r24, 0x00EE
    19c4:	86 ff       	sbrs	r24, 6
    19c6:	03 c0       	rjmp	.+6      	; 0x19ce <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    19c8:	80 e8       	ldi	r24, 0x80	; 128
    19ca:	80 93 b9 02 	sts	0x02B9, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    19ce:	80 91 be 02 	lds	r24, 0x02BE
    19d2:	90 91 bf 02 	lds	r25, 0x02BF
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	90 93 bf 02 	sts	0x02BF, r25
    19dc:	80 93 be 02 	sts	0x02BE, r24
		if (timeout_10ms_mult == 0)
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	19 f4       	brne	.+6      	; 0x19ea <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
    19e4:	84 e0       	ldi	r24, 0x04	; 4
    19e6:	80 93 b9 02 	sts	0x02B9, r24
		}
		CANPAGE = restore;
    19ea:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    19ee:	78 94       	sei
    19f0:	40 91 b9 02 	lds	r20, 0x02B9
    19f4:	b6 cf       	rjmp	.-148    	; 0x1962 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state = 5;
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	80 93 c1 02 	sts	0x02C1, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	80 93 b9 02 	sts	0x02B9, r24
		cli();  save_configuration();  sei();
    1a02:	f8 94       	cli
    1a04:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_Z18save_configurationv>
    1a08:	78 94       	sei
    1a0a:	80 91 c1 02 	lds	r24, 0x02C1
    1a0e:	80 68       	ori	r24, 0x80	; 128
    1a10:	b0 cf       	rjmp	.-160    	; 0x1972 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    1a12:	87 e0       	ldi	r24, 0x07	; 7
    1a14:	80 93 c1 02 	sts	0x02C1, r24
		Confirmed = CLAIMED;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	80 93 b9 02 	sts	0x02B9, r24
		can_prep_instance_request( &msg2, MyInstance );
    1a1e:	8c e8       	ldi	r24, 0x8C	; 140
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	60 91 b8 02 	lds	r22, 0x02B8
    1a26:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	6c e8       	ldi	r22, 0x8C	; 140
    1a2e:	72 e0       	ldi	r23, 0x02	; 2
    1a30:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
    1a34:	40 91 b9 02 	lds	r20, 0x02B9
    1a38:	92 cf       	rjmp	.-220    	; 0x195e <_Z22can_instance_timeslicev+0x4c>

00001a3a <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    1a40:	84 e2       	ldi	r24, 0x24	; 36
    1a42:	9c ef       	ldi	r25, 0xFC	; 252
    1a44:	60 91 b8 02 	lds	r22, 0x02B8
    1a48:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1a4c:	68 83       	st	Y, r22
    1a4e:	79 83       	std	Y+1, r23	; 0x01
    1a50:	8a 83       	std	Y+2, r24	; 0x02
    1a52:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    1a54:	80 91 b8 02 	lds	r24, 0x02B8
    1a58:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    1a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1a5e:	82 60       	ori	r24, 0x02	; 2
    1a60:	8c 83       	std	Y+4, r24	; 0x04
}
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    1a68:	fc 01       	movw	r30, r24
    1a6a:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    1a6c:	90 91 b8 02 	lds	r25, 0x02B8
    1a70:	89 17       	cp	r24, r25
    1a72:	18 f0       	brcs	.+6      	; 0x1a7a <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	80 93 b8 02 	sts	0x02B8, r24
    1a7a:	08 95       	ret

00001a7c <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    1a7c:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	78 2f       	mov	r23, r24
    1a82:	89 2f       	mov	r24, r25
    1a84:	92 2f       	mov	r25, r18
    1a86:	08 95       	ret

00001a88 <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    1a88:	38 2f       	mov	r19, r24
    1a8a:	26 2f       	mov	r18, r22
    1a8c:	87 2f       	mov	r24, r23
    1a8e:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    1a90:	63 2f       	mov	r22, r19
    1a92:	72 2f       	mov	r23, r18
    1a94:	08 95       	ret

00001a96 <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    1a96:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    1a98:	08 95       	ret

00001a9a <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    1a9a:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    1a9c:	08 95       	ret

00001a9e <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    1a9e:	89 2f       	mov	r24, r25
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	08 95       	ret

00001aa4 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    1aa4:	e1 e0       	ldi	r30, 0x01	; 1
    1aa6:	62 17       	cp	r22, r18
    1aa8:	73 07       	cpc	r23, r19
    1aaa:	84 07       	cpc	r24, r20
    1aac:	95 07       	cpc	r25, r21
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <_Z5match6idTypeS_+0xe>
    1ab0:	e0 e0       	ldi	r30, 0x00	; 0
}
    1ab2:	8e 2f       	mov	r24, r30
    1ab4:	08 95       	ret

00001ab6 <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	62 13       	cpse	r22, r18
    1aba:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    1abc:	08 95       	ret

00001abe <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    1abe:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    1ac0:	27 2f       	mov	r18, r23
    1ac2:	38 2f       	mov	r19, r24
    1ac4:	69 2f       	mov	r22, r25
    1ac6:	74 2f       	mov	r23, r20
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	26 17       	cp	r18, r22
    1acc:	37 07       	cpc	r19, r23
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <_Z8id_match6idTypeS_+0x14>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
}
    1ad2:	08 95       	ret

00001ad4 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	49 13       	cpse	r20, r25
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    1ada:	08 95       	ret

00001adc <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    1adc:	90 93 c8 02 	sts	0x02C8, r25
    1ae0:	80 93 c7 02 	sts	0x02C7, r24
}
    1ae4:	08 95       	ret

00001ae6 <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    1aec:	81 e1       	ldi	r24, 0x11	; 17
    1aee:	9c ef       	ldi	r25, 0xFC	; 252
    1af0:	60 91 b8 02 	lds	r22, 0x02B8
    1af4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1af8:	68 83       	st	Y, r22
    1afa:	79 83       	std	Y+1, r23	; 0x01
    1afc:	8a 83       	std	Y+2, r24	; 0x02
    1afe:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    1b04:	80 91 b8 02 	lds	r24, 0x02B8
    1b08:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    1b0a:	80 91 c2 02 	lds	r24, 0x02C2
    1b0e:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    1b10:	80 91 c3 02 	lds	r24, 0x02C3
    1b14:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1b1a:	88 60       	ori	r24, 0x08	; 8
    1b1c:	8c 83       	std	Y+4, r24	; 0x04
}
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    1b2a:	82 e1       	ldi	r24, 0x12	; 18
    1b2c:	9c ef       	ldi	r25, 0xFC	; 252
    1b2e:	60 91 b8 02 	lds	r22, 0x02B8
    1b32:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1b36:	68 83       	st	Y, r22
    1b38:	79 83       	std	Y+1, r23	; 0x01
    1b3a:	8a 83       	std	Y+2, r24	; 0x02
    1b3c:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    1b42:	81 e4       	ldi	r24, 0x41	; 65
    1b44:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    1b4a:	9f e0       	ldi	r25, 0x0F	; 15
    1b4c:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    1b4e:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    1b50:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1b56:	8c 60       	ori	r24, 0x0C	; 12
    1b58:	8c 83       	std	Y+4, r24	; 0x04
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    1b66:	83 e1       	ldi	r24, 0x13	; 19
    1b68:	9c ef       	ldi	r25, 0xFC	; 252
    1b6a:	60 91 b8 02 	lds	r22, 0x02B8
    1b6e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1b72:	68 83       	st	Y, r22
    1b74:	79 83       	std	Y+1, r23	; 0x01
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    1b7e:	86 e5       	ldi	r24, 0x56	; 86
    1b80:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    1b82:	88 e7       	ldi	r24, 0x78	; 120
    1b84:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    1b86:	8c e9       	ldi	r24, 0x9C	; 156
    1b88:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    1b8a:	8e ed       	ldi	r24, 0xDE	; 222
    1b8c:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1b92:	8a 60       	ori	r24, 0x0A	; 10
    1b94:	8c 83       	std	Y+4, r24	; 0x04
}
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	08 95       	ret

00001b9c <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    1ba2:	84 e1       	ldi	r24, 0x14	; 20
    1ba4:	9c ef       	ldi	r25, 0xFC	; 252
    1ba6:	60 91 b8 02 	lds	r22, 0x02B8
    1baa:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1bae:	68 83       	st	Y, r22
    1bb0:	79 83       	std	Y+1, r23	; 0x01
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
    1bb4:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    1bb6:	80 91 c4 02 	lds	r24, 0x02C4
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    1bbe:	de 01       	movw	r26, r28
    1bc0:	16 96       	adiw	r26, 0x06	; 6
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	28 5f       	subi	r18, 0xF8	; 248
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e4 58       	subi	r30, 0x84	; 132
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	e4 91       	lpm	r30, Z+
    1bd0:	ed 93       	st	X+, r30
    1bd2:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    1bd4:	82 17       	cp	r24, r18
    1bd6:	93 07       	cpc	r25, r19
    1bd8:	b9 f7       	brne	.-18     	; 0x1bc8 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1bde:	82 61       	ori	r24, 0x12	; 18
    1be0:	8c 83       	std	Y+4, r24	; 0x04
}
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    1be8:	80 91 c9 02 	lds	r24, 0x02C9
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	d9 f0       	breq	.+54     	; 0x1c26 <_Z24can_board_presence_replyv+0x3e>
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	28 f0       	brcs	.+10     	; 0x1bfe <_Z24can_board_presence_replyv+0x16>
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	09 f1       	breq	.+66     	; 0x1c3a <_Z24can_board_presence_replyv+0x52>
    1bf8:	83 30       	cpi	r24, 0x03	; 3
    1bfa:	59 f0       	breq	.+22     	; 0x1c12 <_Z24can_board_presence_replyv+0x2a>
    1bfc:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    1bfe:	8c e8       	ldi	r24, 0x8C	; 140
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	6c e8       	ldi	r22, 0x8C	; 140
    1c0a:	72 e0       	ldi	r23, 0x02	; 2
    1c0c:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1c10:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    1c12:	8c e8       	ldi	r24, 0x8C	; 140
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	6c e8       	ldi	r22, 0x8C	; 140
    1c1e:	72 e0       	ldi	r23, 0x02	; 2
    1c20:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
    1c24:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    1c26:	8c e8       	ldi	r24, 0x8C	; 140
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	6c e8       	ldi	r22, 0x8C	; 140
    1c32:	72 e0       	ldi	r23, 0x02	; 2
    1c34:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1c38:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    1c3a:	8c e8       	ldi	r24, 0x8C	; 140
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	6c e8       	ldi	r22, 0x8C	; 140
    1c46:	72 e0       	ldi	r23, 0x02	; 2
    1c48:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1c4c:	08 95       	ret

00001c4e <_Z19can_board_timeslicev>:
{	
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    1c4e:	80 91 c5 02 	lds	r24, 0x02C5
    1c52:	80 fd       	sbrc	r24, 0
    1c54:	56 c0       	rjmp	.+172    	; 0x1d02 <_Z19can_board_timeslicev+0xb4>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    1c56:	81 fd       	sbrc	r24, 1
    1c58:	49 c0       	rjmp	.+146    	; 0x1cec <_Z19can_board_timeslicev+0x9e>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    1c5a:	82 fd       	sbrc	r24, 2
    1c5c:	32 c0       	rjmp	.+100    	; 0x1cc2 <_Z19can_board_timeslicev+0x74>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
    1c5e:	83 fd       	sbrc	r24, 3
    1c60:	26 c0       	rjmp	.+76     	; 0x1cae <_Z19can_board_timeslicev+0x60>
		cli();
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    1c62:	84 fd       	sbrc	r24, 4
    1c64:	1a c0       	rjmp	.+52     	; 0x1c9a <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    1c66:	85 ff       	sbrs	r24, 5
    1c68:	0d c0       	rjmp	.+26     	; 0x1c84 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)
    1c6a:	80 91 04 01 	lds	r24, 0x0104
    1c6e:	90 91 05 01 	lds	r25, 0x0105
    1c72:	9c 01       	movw	r18, r24
    1c74:	21 50       	subi	r18, 0x01	; 1
    1c76:	30 40       	sbci	r19, 0x00	; 0
    1c78:	30 93 05 01 	sts	0x0105, r19
    1c7c:	20 93 04 01 	sts	0x0104, r18
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <_Z19can_board_timeslicev+0x38>
    1c84:	08 95       	ret
		{
			cli();
    1c86:	f8 94       	cli
			can_board_presence_reply( );
    1c88:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    1c8c:	80 91 c5 02 	lds	r24, 0x02C5
    1c90:	8f 7d       	andi	r24, 0xDF	; 223
    1c92:	80 93 c5 02 	sts	0x02C5, r24
			sei();
    1c96:	78 94       	sei
    1c98:	08 95       	ret
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    1c9a:	f8 94       	cli
		save_cal();
    1c9c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_Z8save_calv>
		System_Send_Status &= (~0x10);
    1ca0:	80 91 c5 02 	lds	r24, 0x02C5
    1ca4:	8f 7e       	andi	r24, 0xEF	; 239
    1ca6:	80 93 c5 02 	sts	0x02C5, r24
		sei();
    1caa:	78 94       	sei
    1cac:	dc cf       	rjmp	.-72     	; 0x1c66 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
		cli();
    1cae:	f8 94       	cli
		save_configuration();
    1cb0:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_Z18save_configurationv>
		System_Send_Status &= (~0x08);
    1cb4:	80 91 c5 02 	lds	r24, 0x02C5
    1cb8:	87 7f       	andi	r24, 0xF7	; 247
    1cba:	80 93 c5 02 	sts	0x02C5, r24
		sei();
    1cbe:	78 94       	sei
    1cc0:	d0 cf       	rjmp	.-96     	; 0x1c62 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    1cc2:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    1cc4:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    1cc8:	8c e8       	ldi	r24, 0x8C	; 140
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	60 91 b8 02 	lds	r22, 0x02B8
    1cd0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	6c e8       	ldi	r22, 0x8C	; 140
    1cd8:	72 e0       	ldi	r23, 0x02	; 2
    1cda:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    1cde:	80 91 c5 02 	lds	r24, 0x02C5
    1ce2:	8b 7f       	andi	r24, 0xFB	; 251
    1ce4:	80 93 c5 02 	sts	0x02C5, r24
		sei();
    1ce8:	78 94       	sei
    1cea:	b9 cf       	rjmp	.-142    	; 0x1c5e <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	6c e8       	ldi	r22, 0x8C	; 140
    1cf0:	72 e0       	ldi	r23, 0x02	; 2
    1cf2:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    1cf6:	80 91 c5 02 	lds	r24, 0x02C5
    1cfa:	8d 7f       	andi	r24, 0xFD	; 253
    1cfc:	80 93 c5 02 	sts	0x02C5, r24
    1d00:	ac cf       	rjmp	.-168    	; 0x1c5a <_Z19can_board_timeslicev+0xc>
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	6d e7       	ldi	r22, 0x7D	; 125
    1d06:	72 e0       	ldi	r23, 0x02	; 2
    1d08:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    1d0c:	80 91 c5 02 	lds	r24, 0x02C5
    1d10:	8e 7f       	andi	r24, 0xFE	; 254
    1d12:	80 93 c5 02 	sts	0x02C5, r24
    1d16:	9f cf       	rjmp	.-194    	; 0x1c56 <_Z19can_board_timeslicev+0x8>

00001d18 <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    1d1e:	87 e2       	ldi	r24, 0x27	; 39
    1d20:	9c ef       	ldi	r25, 0xFC	; 252
    1d22:	60 91 b8 02 	lds	r22, 0x02B8
    1d26:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1d2a:	68 83       	st	Y, r22
    1d2c:	79 83       	std	Y+1, r23	; 0x01
    1d2e:	8a 83       	std	Y+2, r24	; 0x02
    1d30:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    1d32:	80 91 37 03 	lds	r24, 0x0337
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    1d38:	80 91 38 03 	lds	r24, 0x0338
    1d3c:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    1d3e:	80 91 39 03 	lds	r24, 0x0339
    1d42:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    1d44:	80 91 3a 03 	lds	r24, 0x033A
    1d48:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1d4e:	88 60       	ori	r24, 0x08	; 8
    1d50:	8c 83       	std	Y+4, r24	; 0x04
}
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    1d5e:	85 e1       	ldi	r24, 0x15	; 21
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	60 91 b8 02 	lds	r22, 0x02B8
    1d66:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1d6a:	9b 01       	movw	r18, r22
    1d6c:	ac 01       	movw	r20, r24
    1d6e:	68 81       	ld	r22, Y
    1d70:	79 81       	ldd	r23, Y+1	; 0x01
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	9b 81       	ldd	r25, Y+3	; 0x03
    1d76:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
    1d7a:	88 23       	and	r24, r24
    1d7c:	39 f0       	breq	.+14     	; 0x1d8c <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
    1d7e:	ce 01       	movw	r24, r28
    1d80:	0e 94 9b 11 	call	0x2336	; 0x2336 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    1d8c:	85 e1       	ldi	r24, 0x15	; 21
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	6f ef       	ldi	r22, 0xFF	; 255
    1d92:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1d96:	9b 01       	movw	r18, r22
    1d98:	ac 01       	movw	r20, r24
    1d9a:	68 81       	ld	r22, Y
    1d9c:	79 81       	ldd	r23, Y+1	; 0x01
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    1da6:	88 23       	and	r24, r24
    1da8:	51 f7       	brne	.-44     	; 0x1d7e <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
		return TRUE;
	} else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    1daa:	80 e1       	ldi	r24, 0x10	; 16
    1dac:	9c ef       	ldi	r25, 0xFC	; 252
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	68 81       	ld	r22, Y
    1dba:	79 81       	ldd	r23, Y+1	; 0x01
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_Z8id_match6idTypeS_>
    1dc4:	88 23       	and	r24, r24
    1dc6:	91 f0       	breq	.+36     	; 0x1dec <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.
			Need to delay by the instance number of timeslices.
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );      
		System_Send_Status			 |=0x20;
    1dc8:	80 91 c5 02 	lds	r24, 0x02C5
    1dcc:	80 62       	ori	r24, 0x20	; 32
    1dce:	80 93 c5 02 	sts	0x02C5, r24
		Board_presence_response_type = mMsg->data[0];
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	80 93 c9 02 	sts	0x02C9, r24
		Board_presence_delay 		 = MyInstance;
    1dd8:	80 91 b8 02 	lds	r24, 0x02B8
    1ddc:	80 93 04 01 	sts	0x0104, r24
    1de0:	10 92 05 01 	sts	0x0105, r1
		return TRUE;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    1dec:	82 e2       	ldi	r24, 0x22	; 34
    1dee:	9c ef       	ldi	r25, 0xFC	; 252
    1df0:	60 91 b8 02 	lds	r22, 0x02B8
    1df4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1df8:	9b 01       	movw	r18, r22
    1dfa:	ac 01       	movw	r20, r24
    1dfc:	68 81       	ld	r22, Y
    1dfe:	79 81       	ldd	r23, Y+1	; 0x01
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
    1e08:	88 23       	and	r24, r24
    1e0a:	f1 f0       	breq	.+60     	; 0x1e48 <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	84 ff       	sbrs	r24, 4
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 ); 
    1e12:	8d e7       	ldi	r24, 0x7D	; 125
    1e14:	92 e0       	ldi	r25, 0x02	; 2
    1e16:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_Z18can_prep_configureP4sCAN>
			System_Send_Status = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	80 93 c5 02 	sts	0x02C5, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    1e20:	e0 91 c7 02 	lds	r30, 0x02C7
    1e24:	f0 91 c8 02 	lds	r31, 0x02C8
    1e28:	30 97       	sbiw	r30, 0x00	; 0
    1e2a:	19 f1       	breq	.+70     	; 0x1e72 <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	8f 70       	andi	r24, 0x0F	; 15
    1e30:	09 95       	icall
		return TRUE;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 ); 
			System_Send_Status = 1;
		} else {
			can_parse_configure_request( mMsg );	// in configuration.c
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    1e40:	88 e0       	ldi	r24, 0x08	; 8
    1e42:	80 93 c5 02 	sts	0x02C5, r24
    1e46:	ec cf       	rjmp	.-40     	; 0x1e20 <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1e48:	81 e2       	ldi	r24, 0x21	; 33
    1e4a:	9c ef       	ldi	r25, 0xFC	; 252
    1e4c:	60 91 b8 02 	lds	r22, 0x02B8
    1e50:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	68 81       	ld	r22, Y
    1e5a:	79 81       	ldd	r23, Y+1	; 0x01
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e60:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
    1e64:	88 23       	and	r24, r24
    1e66:	39 f0       	breq	.+14     	; 0x1e76 <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    1e68:	88 e0       	ldi	r24, 0x08	; 8
    1e6a:	80 93 c5 02 	sts	0x02C5, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	8a cf       	rjmp	.-236    	; 0x1d86 <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	88 cf       	rjmp	.-240    	; 0x1d86 <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    1e76:	81 e2       	ldi	r24, 0x21	; 33
    1e78:	9c ef       	ldi	r25, 0xFC	; 252
    1e7a:	6f ef       	ldi	r22, 0xFF	; 255
    1e7c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1e80:	9b 01       	movw	r18, r22
    1e82:	ac 01       	movw	r20, r24
    1e84:	68 81       	ld	r22, Y
    1e86:	79 81       	ldd	r23, Y+1	; 0x01
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1e90:	88 23       	and	r24, r24
    1e92:	51 f7       	brne	.-44     	; 0x1e68 <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    1e94:	85 e2       	ldi	r24, 0x25	; 37
    1e96:	9c ef       	ldi	r25, 0xFC	; 252
    1e98:	60 91 b8 02 	lds	r22, 0x02B8
    1e9c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1ea0:	9b 01       	movw	r18, r22
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	68 81       	ld	r22, Y
    1ea6:	79 81       	ldd	r23, Y+1	; 0x01
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1eac:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
    1eb0:	88 23       	and	r24, r24
    1eb2:	49 f5       	brne	.+82     	; 0x1f06 <_Z23can_board_msg_responderP4sCAN+0x1ae>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    1eb4:	86 e2       	ldi	r24, 0x26	; 38
    1eb6:	9c ef       	ldi	r25, 0xFC	; 252
    1eb8:	60 91 b8 02 	lds	r22, 0x02B8
    1ebc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1ec0:	9b 01       	movw	r18, r22
    1ec2:	ac 01       	movw	r20, r24
    1ec4:	68 81       	ld	r22, Y
    1ec6:	79 81       	ldd	r23, Y+1	; 0x01
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ecc:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
    1ed0:	88 23       	and	r24, r24
    1ed2:	61 f1       	breq	.+88     	; 0x1f2c <_Z23can_board_msg_responderP4sCAN+0x1d4>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	8e 71       	andi	r24, 0x1E	; 30
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	59 f6       	brne	.-106    	; 0x1e72 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    1edc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	82 2b       	or	r24, r18
    1ee6:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    1ee8:	22 e1       	ldi	r18, 0x12	; 18
    1eea:	84 33       	cpi	r24, 0x34	; 52
    1eec:	92 07       	cpc	r25, r18
    1eee:	09 f6       	brne	.-126    	; 0x1e72 <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    1ef0:	85 e5       	ldi	r24, 0x55	; 85
    1ef2:	80 93 c0 02 	sts	0x02C0, r24
				init_complete = FALSE;
    1ef6:	10 92 ba 02 	sts	0x02BA, r1
				Confirmed     = NOT_CLAIMED;
    1efa:	10 92 b9 02 	sts	0x02B9, r1
				can_instance_init();		// This fires off the sequencing right away.
    1efe:	0e 94 31 0c 	call	0x1862	; 0x1862 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	40 cf       	rjmp	.-384    	; 0x1d86 <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 b9 02 	sts	0x02B9, r24
		MyInstance = mMsg->data[0];
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	80 93 b8 02 	sts	0x02B8, r24
		save_configuration();
    1f12:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_Z18save_configurationv>
   		can_remove_instance_from_filter( 1 );
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    1f1c:	60 91 b8 02 	lds	r22, 0x02B8
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	0e 94 2a 08 	call	0x1054	; 0x1054 <_Z26can_add_instance_to_filterht>
		return TRUE;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	2d cf       	rjmp	.-422    	; 0x1d86 <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    1f2c:	86 e2       	ldi	r24, 0x26	; 38
    1f2e:	9c ef       	ldi	r25, 0xFC	; 252
    1f30:	6f ef       	ldi	r22, 0xFF	; 255
    1f32:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1f36:	9b 01       	movw	r18, r22
    1f38:	ac 01       	movw	r20, r24
    1f3a:	68 81       	ld	r22, Y
    1f3c:	79 81       	ldd	r23, Y+1	; 0x01
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	9b 81       	ldd	r25, Y+3	; 0x03
    1f42:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z5match6idTypeS_>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    1f46:	88 23       	and	r24, r24
    1f48:	29 f6       	brne	.-118    	; 0x1ed4 <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    1f4a:	83 e2       	ldi	r24, 0x23	; 35
    1f4c:	9c ef       	ldi	r25, 0xFC	; 252
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z14create_CAN_eidth>
    1f54:	9b 01       	movw	r18, r22
    1f56:	ac 01       	movw	r20, r24
    1f58:	68 81       	ld	r22, Y
    1f5a:	79 81       	ldd	r23, Y+1	; 0x01
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_Z8id_match6idTypeS_>
    1f64:	88 23       	and	r24, r24
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <_Z23can_board_msg_responderP4sCAN+0x212>
    1f68:	0e cf       	rjmp	.-484    	; 0x1d86 <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    1f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6c:	80 91 b8 02 	lds	r24, 0x02B8
    1f70:	98 17       	cp	r25, r24
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <_Z23can_board_msg_responderP4sCAN+0x21e>
    1f74:	7e cf       	rjmp	.-260    	; 0x1e72 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    1f76:	80 91 b9 02 	lds	r24, 0x02B9
    1f7a:	80 32       	cpi	r24, 0x20	; 32
    1f7c:	41 f0       	breq	.+16     	; 0x1f8e <_Z23can_board_msg_responderP4sCAN+0x236>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    1f7e:	88 23       	and	r24, r24
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <_Z23can_board_msg_responderP4sCAN+0x22c>
    1f82:	77 cf       	rjmp	.-274    	; 0x1e72 <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    1f84:	ce 01       	movw	r24, r28
    1f86:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	fc ce       	rjmp	.-520    	; 0x1d86 <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    1f8e:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    1f92:	80 e3       	ldi	r24, 0x30	; 48
    1f94:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    1f98:	80 91 ef 00 	lds	r24, 0x00EF
    1f9c:	8f 73       	andi	r24, 0x3F	; 63
    1f9e:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    1fa2:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    1fa6:	10 92 b9 02 	sts	0x02B9, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    1faa:	ce 01       	movw	r24, r28
    1fac:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	e9 ce       	rjmp	.-558    	; 0x1d86 <_Z23can_board_msg_responderP4sCAN+0x2e>

00001fb4 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	7b 01       	movw	r14, r22
    1fc2:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    1fc4:	c0 e0       	ldi	r28, 0x00	; 0
    1fc6:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    1fc8:	ce 01       	movw	r24, r28
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	8c 0f       	add	r24, r28
    1fd0:	9d 1f       	adc	r25, r29
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	e8 0f       	add	r30, r24
    1fde:	f9 1f       	adc	r31, r25
    1fe0:	e6 53       	subi	r30, 0x36	; 54
    1fe2:	fd 4f       	sbci	r31, 0xFD	; 253
    1fe4:	20 81       	ld	r18, Z
    1fe6:	31 81       	ldd	r19, Z+1	; 0x01
    1fe8:	42 81       	ldd	r20, Z+2	; 0x02
    1fea:	53 81       	ldd	r21, Z+3	; 0x03
    1fec:	c8 01       	movw	r24, r16
    1fee:	b7 01       	movw	r22, r14
    1ff0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_Z8id_match6idTypeS_>
    1ff4:	88 23       	and	r24, r24
    1ff6:	61 f4       	brne	.+24     	; 0x2010 <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    1ff8:	21 96       	adiw	r28, 0x01	; 1
    1ffa:	c6 30       	cpi	r28, 0x06	; 6
    1ffc:	d1 05       	cpc	r29, r1
    1ffe:	21 f7       	brne	.-56     	; 0x1fc8 <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    2000:	8f ef       	ldi	r24, 0xFF	; 255
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    2010:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	08 95       	ret

00002020 <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    2020:	28 2f       	mov	r18, r24
    2022:	39 2f       	mov	r19, r25
    2024:	d9 01       	movw	r26, r18
    2026:	86 2f       	mov	r24, r22
    2028:	97 2f       	mov	r25, r23
    202a:	fc 01       	movw	r30, r24
    202c:	8f e0       	ldi	r24, 0x0F	; 15
    202e:	01 90       	ld	r0, Z+
    2030:	0d 92       	st	X+, r0
    2032:	81 50       	subi	r24, 0x01	; 1
    2034:	e1 f7       	brne	.-8      	; 0x202e <_Z12copy_can_msgP4sCANS0_+0xe>
}
    2036:	08 95       	ret

00002038 <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    2038:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    203a:	80 91 24 03 	lds	r24, 0x0324
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 01       	movw	r18, r24
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	28 0f       	add	r18, r24
    2048:	39 1f       	adc	r19, r25
    204a:	c9 01       	movw	r24, r18
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	82 0f       	add	r24, r18
    2056:	93 1f       	adc	r25, r19
    2058:	86 53       	subi	r24, 0x36	; 54
    205a:	9d 4f       	sbci	r25, 0xFD	; 253
    205c:	0e 94 10 10 	call	0x2020	; 0x2020 <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    2060:	80 91 24 03 	lds	r24, 0x0324
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	80 93 24 03 	sts	0x0324, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    206a:	86 30       	cpi	r24, 0x06	; 6
    206c:	10 f0       	brcs	.+4      	; 0x2072 <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    206e:	10 92 24 03 	sts	0x0324, r1
    2072:	08 95       	ret

00002074 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    207a:	68 81       	ld	r22, Y
    207c:	79 81       	ldd	r23, Y+1	; 0x01
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    2086:	8f 3f       	cpi	r24, 0xFF	; 255
    2088:	a9 f0       	breq	.+42     	; 0x20b4 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9c 01       	movw	r18, r24
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	28 0f       	add	r18, r24
    2094:	39 1f       	adc	r19, r25
    2096:	c9 01       	movw	r24, r18
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	82 0f       	add	r24, r18
    20a2:	93 1f       	adc	r25, r19
    20a4:	86 53       	subi	r24, 0x36	; 54
    20a6:	9d 4f       	sbci	r25, 0xFD	; 253
    20a8:	be 01       	movw	r22, r28
    20aa:	0e 94 10 10 	call	0x2020	; 0x2020 <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    20b4:	80 91 24 03 	lds	r24, 0x0324
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9c 01       	movw	r18, r24
    20bc:	22 0f       	add	r18, r18
    20be:	33 1f       	adc	r19, r19
    20c0:	28 0f       	add	r18, r24
    20c2:	39 1f       	adc	r19, r25
    20c4:	c9 01       	movw	r24, r18
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	82 0f       	add	r24, r18
    20d0:	93 1f       	adc	r25, r19
    20d2:	86 53       	subi	r24, 0x36	; 54
    20d4:	9d 4f       	sbci	r25, 0xFD	; 253
    20d6:	be 01       	movw	r22, r28
    20d8:	0e 94 10 10 	call	0x2020	; 0x2020 <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    20dc:	80 91 24 03 	lds	r24, 0x0324
    20e0:	8f 5f       	subi	r24, 0xFF	; 255
    20e2:	80 93 24 03 	sts	0x0324, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    20e6:	86 30       	cpi	r24, 0x06	; 6
    20e8:	10 f3       	brcs	.-60     	; 0x20ae <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    20ea:	10 92 24 03 	sts	0x0324, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <_Z12QueueMessageP4sCAN>:
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    20f4:	20 91 3a 03 	lds	r18, 0x033A
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    20f8:	21 fd       	sbrc	r18, 1
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    20fc:	0e 94 3a 10 	call	0x2074	; 0x2074 <_Z17addMailboxHistoryP4sCAN>
    2100:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    2102:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z16addNormalHistoryP4sCAN>
    2106:	08 95       	ret

00002108 <_Z15RetrieveMessagev>:
    2108:	80 91 3a 03 	lds	r24, 0x033A
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    210c:	81 ff       	sbrs	r24, 1
    210e:	1b c0       	rjmp	.+54     	; 0x2146 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    2110:	20 91 25 03 	lds	r18, 0x0325
    2114:	80 91 24 03 	lds	r24, 0x0324
    2118:	28 17       	cp	r18, r24
    211a:	c9 f0       	breq	.+50     	; 0x214e <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    211c:	82 2f       	mov	r24, r18
    211e:	8f 5f       	subi	r24, 0xFF	; 255
    2120:	80 93 25 03 	sts	0x0325, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    2124:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2126:	c9 01       	movw	r24, r18
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	9c 01       	movw	r18, r24
    2132:	22 0f       	add	r18, r18
    2134:	33 1f       	adc	r19, r19
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	28 0f       	add	r18, r24
    213c:	39 1f       	adc	r19, r25
    213e:	26 53       	subi	r18, 0x36	; 54
    2140:	3d 4f       	sbci	r19, 0xFD	; 253
		}
	}
	return NULL;
}
    2142:	c9 01       	movw	r24, r18
    2144:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
}
    214a:	c9 01       	movw	r24, r18
    214c:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    214e:	10 92 25 03 	sts	0x0325, r1
			RxHead = 0;
    2152:	10 92 24 03 	sts	0x0324, r1
			return NULL;
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	f3 cf       	rjmp	.-26     	; 0x2142 <_Z15RetrieveMessagev+0x3a>

0000215c <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	ac 01       	movw	r20, r24
    2160:	44 0f       	add	r20, r20
    2162:	55 1f       	adc	r21, r21
    2164:	48 0f       	add	r20, r24
    2166:	59 1f       	adc	r21, r25
    2168:	9a 01       	movw	r18, r20
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	22 0f       	add	r18, r18
    2170:	33 1f       	adc	r19, r19
    2172:	24 0f       	add	r18, r20
    2174:	35 1f       	adc	r19, r21
    2176:	26 53       	subi	r18, 0x36	; 54
    2178:	3d 4f       	sbci	r19, 0xFD	; 253
}
    217a:	c9 01       	movw	r24, r18
    217c:	08 95       	ret

0000217e <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    217e:	0e 94 84 10 	call	0x2108	; 0x2108 <_Z15RetrieveMessagev>
	if (msg)
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	21 f0       	breq	.+8      	; 0x218e <_Z15CAN_Q_Timeslicev+0x10>
	{
		SET_LED_2();
    2186:	59 9a       	sbi	0x0b, 1	; 11
    2188:	20 91 3a 03 	lds	r18, 0x033A
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    218c:	21 ff       	sbrs	r18, 1
    218e:	08 95       	ret
			can_file_message( msg );
    2190:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z16can_file_messageP4sCAN>
    2194:	08 95       	ret

00002196 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    2196:	10 92 27 03 	sts	0x0327, r1
	System_LED_Control.pattern    = 0;
    219a:	10 92 26 03 	sts	0x0326, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    219e:	50 9a       	sbi	0x0a, 0	; 10
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    21a0:	51 9a       	sbi	0x0a, 1	; 10
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    21a2:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    21a4:	57 9a       	sbi	0x0a, 7	; 10
#endif
  	RESET_LED_1();
    21a6:	58 98       	cbi	0x0b, 0	; 11
	RESET_LED_2();
    21a8:	59 98       	cbi	0x0b, 1	; 11
	RESET_LED_3();
    21aa:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_4();
    21ac:	5f 98       	cbi	0x0b, 7	; 11
}
    21ae:	08 95       	ret

000021b0 <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    21b0:	82 30       	cpi	r24, 0x02	; 2
    21b2:	69 f0       	breq	.+26     	; 0x21ce <_Z16protected_led_onh+0x1e>
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	28 f0       	brcs	.+10     	; 0x21c2 <_Z16protected_led_onh+0x12>
    21b8:	83 30       	cpi	r24, 0x03	; 3
    21ba:	59 f0       	breq	.+22     	; 0x21d2 <_Z16protected_led_onh+0x22>
    21bc:	84 30       	cpi	r24, 0x04	; 4
    21be:	29 f0       	breq	.+10     	; 0x21ca <_Z16protected_led_onh+0x1a>
    21c0:	08 95       	ret
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	e9 f7       	brne	.-6      	; 0x21c0 <_Z16protected_led_onh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
    21c6:	58 9a       	sbi	0x0b, 0	; 11
    21c8:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    21ca:	5f 9a       	sbi	0x0b, 7	; 11
    21cc:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
    21ce:	59 9a       	sbi	0x0b, 1	; 11
    21d0:	08 95       	ret
   case 3:  SET_LED_3();  break;
    21d2:	5e 9a       	sbi	0x0b, 6	; 11
    21d4:	08 95       	ret

000021d6 <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    21d6:	82 30       	cpi	r24, 0x02	; 2
    21d8:	69 f0       	breq	.+26     	; 0x21f4 <_Z17protected_led_offh+0x1e>
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	28 f0       	brcs	.+10     	; 0x21e8 <_Z17protected_led_offh+0x12>
    21de:	83 30       	cpi	r24, 0x03	; 3
    21e0:	59 f0       	breq	.+22     	; 0x21f8 <_Z17protected_led_offh+0x22>
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	29 f0       	breq	.+10     	; 0x21f0 <_Z17protected_led_offh+0x1a>
    21e6:	08 95       	ret
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	e9 f7       	brne	.-6      	; 0x21e6 <_Z17protected_led_offh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
    21ec:	58 98       	cbi	0x0b, 0	; 11
    21ee:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    21f0:	5f 98       	cbi	0x0b, 7	; 11
    21f2:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
    21f4:	59 98       	cbi	0x0b, 1	; 11
    21f6:	08 95       	ret
   case 3:  RESET_LED_3();  break;
    21f8:	5e 98       	cbi	0x0b, 6	; 11
    21fa:	08 95       	ret

000021fc <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    21fc:	90 91 27 03 	lds	r25, 0x0327
    2200:	99 23       	and	r25, r25
    2202:	21 f0       	breq	.+8      	; 0x220c <_Z11strobe_ledsh+0x10>
    2204:	92 30       	cpi	r25, 0x02	; 2
    2206:	11 f0       	breq	.+4      	; 0x220c <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	08 95       	ret
    220c:	90 91 09 01 	lds	r25, 0x0109
    2210:	29 2f       	mov	r18, r25
    2212:	21 50       	subi	r18, 0x01	; 1
    2214:	20 93 09 01 	sts	0x0109, r18
    2218:	99 23       	and	r25, r25
    221a:	b1 f7       	brne	.-20     	; 0x2208 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    221c:	9a e0       	ldi	r25, 0x0A	; 10
    221e:	90 93 09 01 	sts	0x0109, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2222:	88 23       	and	r24, r24
    2224:	79 f0       	breq	.+30     	; 0x2244 <_Z11strobe_ledsh+0x48>
    2226:	80 91 08 01 	lds	r24, 0x0108
    222a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_Z16protected_led_onh>
		i++;
    222e:	80 91 08 01 	lds	r24, 0x0108
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	80 93 08 01 	sts	0x0108, r24
		if (i>=5)  { i=1; return TRUE; }
    2238:	85 30       	cpi	r24, 0x05	; 5
    223a:	78 f0       	brcs	.+30     	; 0x225a <_Z11strobe_ledsh+0x5e>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	80 93 08 01 	sts	0x0108, r24
    2242:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2244:	80 91 08 01 	lds	r24, 0x0108
    2248:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_Z17protected_led_offh>
		i++;
    224c:	80 91 08 01 	lds	r24, 0x0108
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	80 93 08 01 	sts	0x0108, r24
		if (i>=5)  { i=1; return TRUE; }
    2256:	85 30       	cpi	r24, 0x05	; 5
    2258:	88 f7       	brcc	.-30     	; 0x223c <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    225a:	80 e0       	ldi	r24, 0x00	; 0
}
    225c:	08 95       	ret

0000225e <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    225e:	90 91 27 03 	lds	r25, 0x0327
    2262:	91 11       	cpse	r25, r1
    2264:	08 95       	ret
	protected_led_on(mindex);
    2266:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_Z16protected_led_onh>
    226a:	08 95       	ret

0000226c <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    226c:	90 91 27 03 	lds	r25, 0x0327
    2270:	91 11       	cpse	r25, r1
    2272:	08 95       	ret
	protected_led_off(mindex);
    2274:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_Z17protected_led_offh>
    2278:	08 95       	ret

0000227a <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    227a:	66 23       	and	r22, r22
    227c:	19 f4       	brne	.+6      	; 0x2284 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    227e:	0e 94 36 11 	call	0x226c	; 0x226c <_Z7led_offh>
    2282:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    2284:	0e 94 2f 11 	call	0x225e	; 0x225e <_Z6led_onh>
    2288:	08 95       	ret

0000228a <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    228a:	90 91 27 03 	lds	r25, 0x0327
    228e:	91 11       	cpse	r25, r1
    2290:	08 95       	ret
	protected_set_led( mindex, value );
    2292:	0e 94 3d 11 	call	0x227a	; 0x227a <_Z17protected_set_ledhh>
    2296:	08 95       	ret

00002298 <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    2298:	66 23       	and	r22, r22
    229a:	69 f0       	breq	.+26     	; 0x22b6 <_Z19protected_show_bytehh+0x1e>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    229c:	87 ff       	sbrs	r24, 7
    229e:	20 c0       	rjmp	.+64     	; 0x22e0 <_Z19protected_show_bytehh+0x48>
    22a0:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    22a2:	86 ff       	sbrs	r24, 6
    22a4:	20 c0       	rjmp	.+64     	; 0x22e6 <_Z19protected_show_bytehh+0x4e>
    22a6:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    22a8:	85 ff       	sbrs	r24, 5
    22aa:	20 c0       	rjmp	.+64     	; 0x22ec <_Z19protected_show_bytehh+0x54>
    22ac:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    22ae:	84 fd       	sbrc	r24, 4
    22b0:	0d c0       	rjmp	.+26     	; 0x22cc <_Z19protected_show_bytehh+0x34>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    22b2:	58 98       	cbi	0x0b, 0	; 11
    22b4:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    22b6:	83 ff       	sbrs	r24, 3
    22b8:	0b c0       	rjmp	.+22     	; 0x22d0 <_Z19protected_show_bytehh+0x38>
    22ba:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    22bc:	82 ff       	sbrs	r24, 2
    22be:	0b c0       	rjmp	.+22     	; 0x22d6 <_Z19protected_show_bytehh+0x3e>
    22c0:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    22c2:	81 ff       	sbrs	r24, 1
    22c4:	0b c0       	rjmp	.+22     	; 0x22dc <_Z19protected_show_bytehh+0x44>
    22c6:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    22c8:	80 ff       	sbrs	r24, 0
    22ca:	f3 cf       	rjmp	.-26     	; 0x22b2 <_Z19protected_show_bytehh+0x1a>
    22cc:	58 9a       	sbi	0x0b, 0	; 11
    22ce:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    22d0:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    22d2:	82 fd       	sbrc	r24, 2
    22d4:	f5 cf       	rjmp	.-22     	; 0x22c0 <_Z19protected_show_bytehh+0x28>
    22d6:	5e 98       	cbi	0x0b, 6	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    22d8:	81 fd       	sbrc	r24, 1
    22da:	f5 cf       	rjmp	.-22     	; 0x22c6 <_Z19protected_show_bytehh+0x2e>
    22dc:	59 98       	cbi	0x0b, 1	; 11
    22de:	f4 cf       	rjmp	.-24     	; 0x22c8 <_Z19protected_show_bytehh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    22e0:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    22e2:	86 fd       	sbrc	r24, 6
    22e4:	e0 cf       	rjmp	.-64     	; 0x22a6 <_Z19protected_show_bytehh+0xe>
    22e6:	5e 98       	cbi	0x0b, 6	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    22e8:	85 fd       	sbrc	r24, 5
    22ea:	e0 cf       	rjmp	.-64     	; 0x22ac <_Z19protected_show_bytehh+0x14>
    22ec:	59 98       	cbi	0x0b, 1	; 11
    22ee:	df cf       	rjmp	.-66     	; 0x22ae <_Z19protected_show_bytehh+0x16>

000022f0 <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    22f0:	90 91 27 03 	lds	r25, 0x0327
    22f4:	99 23       	and	r25, r25
    22f6:	11 f0       	breq	.+4      	; 0x22fc <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    22f8:	80 91 26 03 	lds	r24, 0x0326
	}
    protected_show_byte( result, mHiNibble );
    22fc:	0e 94 4c 11 	call	0x2298	; 0x2298 <_Z19protected_show_bytehh>
}
    2300:	08 95       	ret

00002302 <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2302:	90 91 27 03 	lds	r25, 0x0327
    2306:	99 23       	and	r25, r25
    2308:	19 f0       	breq	.+6      	; 0x2310 <_Z18show_result_toggleh+0xe>
    230a:	93 30       	cpi	r25, 0x03	; 3
    230c:	09 f0       	breq	.+2      	; 0x2310 <_Z18show_result_toggleh+0xe>
    230e:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    2310:	90 91 06 01 	lds	r25, 0x0106
    2314:	99 23       	and	r25, r25
    2316:	59 f4       	brne	.+22     	; 0x232e <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 4c 11 	call	0x2298	; 0x2298 <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 91 06 01 	lds	r25, 0x0106
    2324:	91 11       	cpse	r25, r1
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	80 93 06 01 	sts	0x0106, r24
    232c:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	0e 94 4c 11 	call	0x2298	; 0x2298 <_Z19protected_show_bytehh>
    2334:	f4 cf       	rjmp	.-24     	; 0x231e <_Z18show_result_toggleh+0x1c>

00002336 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    2336:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    2338:	95 81       	ldd	r25, Z+5	; 0x05
    233a:	9f 70       	andi	r25, 0x0F	; 15
    233c:	90 93 27 03 	sts	0x0327, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    2340:	86 81       	ldd	r24, Z+6	; 0x06
    2342:	8f 70       	andi	r24, 0x0F	; 15
    2344:	80 93 26 03 	sts	0x0326, r24

	switch (System_LED_Control.systemMode)
    2348:	92 30       	cpi	r25, 0x02	; 2
    234a:	81 f0       	breq	.+32     	; 0x236c <_Z21can_parse_led_requestP4sCAN+0x36>
    234c:	93 30       	cpi	r25, 0x03	; 3
    234e:	39 f0       	breq	.+14     	; 0x235e <_Z21can_parse_led_requestP4sCAN+0x28>
    2350:	91 30       	cpi	r25, 0x01	; 1
    2352:	09 f0       	breq	.+2      	; 0x2356 <_Z21can_parse_led_requestP4sCAN+0x20>
    2354:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_Z9show_bytehh>
									  break;
    235c:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    235e:	80 91 b8 02 	lds	r24, 0x02B8
    2362:	80 93 26 03 	sts	0x0326, r24
									  show_result_toggle( MyInstance );
    2366:	0e 94 81 11 	call	0x2302	; 0x2302 <_Z18show_result_toggleh>
    236a:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    236c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_Z11strobe_ledsh>
									  break;
    2370:	08 95       	ret

00002372 <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    2372:	80 91 27 03 	lds	r24, 0x0327
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	d9 f0       	breq	.+54     	; 0x23b0 <_Z19led_timeslice_100msv+0x3e>
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	49 f0       	breq	.+18     	; 0x2390 <_Z19led_timeslice_100msv+0x1e>
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	09 f0       	breq	.+2      	; 0x2384 <_Z19led_timeslice_100msv+0x12>
    2382:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    2384:	80 91 26 03 	lds	r24, 0x0326
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_Z9show_bytehh>
									  break;
    238e:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    2390:	80 91 07 01 	lds	r24, 0x0107
    2394:	98 2f       	mov	r25, r24
    2396:	91 50       	subi	r25, 0x01	; 1
    2398:	90 93 07 01 	sts	0x0107, r25
    239c:	88 23       	and	r24, r24
    239e:	89 f7       	brne	.-30     	; 0x2382 <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    23a0:	8a e0       	ldi	r24, 0x0A	; 10
    23a2:	80 93 07 01 	sts	0x0107, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    23a6:	80 91 b8 02 	lds	r24, 0x02B8
    23aa:	0e 94 81 11 	call	0x2302	; 0x2302 <_Z18show_result_toggleh>
    23ae:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    23b0:	80 91 26 03 	lds	r24, 0x0326
    23b4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_Z11strobe_ledsh>
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	19 f7       	brne	.-58     	; 0x2382 <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    23bc:	90 91 26 03 	lds	r25, 0x0326
    23c0:	99 23       	and	r25, r25
    23c2:	19 f4       	brne	.+6      	; 0x23ca <_Z19led_timeslice_100msv+0x58>
    23c4:	80 93 26 03 	sts	0x0326, r24
    23c8:	08 95       	ret
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	fb cf       	rjmp	.-10     	; 0x23c4 <_Z19led_timeslice_100msv+0x52>

000023ce <set_spi_isr_callback>:
			  which has a system message ID
******************************************************************************/
void set_spi_isr_callback( BOOL (*mCallback)(void) )
{
	//printf("set_spi_isr_callback(%d)\n", mCallback);
	spi_isr_call_back = mCallback;
    23ce:	90 93 2a 03 	sts	0x032A, r25
    23d2:	80 93 29 03 	sts	0x0329, r24
}
    23d6:	08 95       	ret

000023d8 <__vector_26>:
//#include "rpi_spi.h"
//#include "servos.h"

/******* SPI Transfer Complete ISR ***************/
ISR ( SPI_STC_vect )
{	
    23d8:	1f 92       	push	r1
    23da:	0f 92       	push	r0
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	0f 92       	push	r0
    23e0:	11 24       	eor	r1, r1
    23e2:	8f 93       	push	r24
//	if (spi_isr_call_back)
//		spi_isr_call_back();

	SPSR &= 0x7F;
    23e4:	8d b5       	in	r24, 0x2d	; 45
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	8d bd       	out	0x2d, r24	; 45
//test_rx_response( SPDR );		here for the PiCamScan board
}
    23ea:	8f 91       	pop	r24
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	0f 90       	pop	r0
    23f2:	1f 90       	pop	r1
    23f4:	18 95       	reti

000023f6 <_Z16SPI_SlaveReceivev>:

char SPI_SlaveReceive(void) 
{
	/* Wait for reception complete */ 
	while(!(SPSR & (1<<SPIF)));
    23f6:	0d b4       	in	r0, 0x2d	; 45
    23f8:	07 fe       	sbrs	r0, 7
    23fa:	fd cf       	rjmp	.-6      	; 0x23f6 <_Z16SPI_SlaveReceivev>
	/* Return data register */ 
	return SPDR;
    23fc:	8e b5       	in	r24, 0x2e	; 46
}
    23fe:	08 95       	ret

00002400 <spi_setBitOrder>:

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	21 f0       	breq	.+8      	; 0x240c <spi_setBitOrder+0xc>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    2404:	8c b5       	in	r24, 0x2c	; 44
    2406:	8f 7d       	andi	r24, 0xDF	; 223
    2408:	8c bd       	out	0x2c, r24	; 44
    240a:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    240c:	8c b5       	in	r24, 0x2c	; 44
    240e:	80 62       	ori	r24, 0x20	; 32
    2410:	8c bd       	out	0x2c, r24	; 44
    2412:	08 95       	ret

00002414 <spi_setDataMode>:
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2414:	9c b5       	in	r25, 0x2c	; 44
    2416:	93 7f       	andi	r25, 0xF3	; 243
    2418:	98 2b       	or	r25, r24
    241a:	9c bd       	out	0x2c, r25	; 44
}
    241c:	08 95       	ret

0000241e <spi_setClockDivider>:

// Sets BaudRate:
/* rate:  [0..7]  */
void spi_setClockDivider( uint8_t rate )
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK)   | (rate & SPI_CLOCK_MASK);
    241e:	2c b5       	in	r18, 0x2c	; 44
    2420:	98 2f       	mov	r25, r24
    2422:	93 70       	andi	r25, 0x03	; 3
    2424:	2c 7f       	andi	r18, 0xFC	; 252
    2426:	92 2b       	or	r25, r18
    2428:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    242a:	2d b5       	in	r18, 0x2d	; 45
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	95 95       	asr	r25
    2430:	87 95       	ror	r24
    2432:	95 95       	asr	r25
    2434:	87 95       	ror	r24
    2436:	81 70       	andi	r24, 0x01	; 1
    2438:	2e 7f       	andi	r18, 0xFE	; 254
    243a:	82 2b       	or	r24, r18
    243c:	8d bd       	out	0x2d, r24	; 45
}
    243e:	08 95       	ret

00002440 <_Z7pin_ddrhh>:
  /************************ WARNING!! *****************************
   No need to modify MCUCR reigsters.  Default is '0' which means
   the SPI to use regular MISO/MOSI, not the alternate pins 
   NOTE: The Serial Progamming always uses the Alternate pins.
   ****************************************************************/
  if (mAlternatePins)
    2440:	88 23       	and	r24, r24
    2442:	59 f0       	breq	.+22     	; 0x245a <_Z7pin_ddrhh+0x1a>
  {
  	MCUCR |= (1<<SPIPS); 				        // Clear for MOSI.  Set for MOSI_A
    2444:	85 b7       	in	r24, 0x35	; 53
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	85 bf       	out	0x35, r24	; 53
	if (mMaster)
    244a:	66 23       	and	r22, r22
    244c:	71 f0       	breq	.+28     	; 0x246a <_Z7pin_ddrhh+0x2a>
	{
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD &= ~MISO_A;
    244e:	52 98       	cbi	0x0a, 2	; 10
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD |= MOSI_A|SCK_A;
    2450:	8a b1       	in	r24, 0x0a	; 10
    2452:	88 61       	ori	r24, 0x18	; 24
    2454:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;	
    2456:	38 98       	cbi	0x07, 0	; 7
    2458:	08 95       	ret
	}  
  }
  else
  {
  	  //MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
	  if (mMaster)
    245a:	66 23       	and	r22, r22
    245c:	61 f4       	brne	.+24     	; 0x2476 <_Z7pin_ddrhh+0x36>
		  DDRB |= (MOSI|SCK);
		  DDRD |= SS;
	  } else {
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRB |= MISO;
    245e:	20 9a       	sbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB &= ~(MOSI|SCK);
    2460:	84 b1       	in	r24, 0x04	; 4
    2462:	8d 77       	andi	r24, 0x7D	; 125
    2464:	84 b9       	out	0x04, r24	; 4
		  DDRD &= ~SS;		  
    2466:	53 98       	cbi	0x0a, 3	; 10
    2468:	08 95       	ret
		  DDRC &= ~SS_A;	
	}
	else {	
		  /* Set MISO output, all others input */
		  // OUTPUTS (MISO)
		  DDRD |= MISO_A;
    246a:	52 9a       	sbi	0x0a, 2	; 10

		  // INPUTS  (MOSI, SCK, SS_)
		  DDRD &= ~(MOSI_A|SCK_A);
    246c:	8a b1       	in	r24, 0x0a	; 10
    246e:	87 7e       	andi	r24, 0xE7	; 231
    2470:	8a b9       	out	0x0a, r24	; 10
		  DDRC &= ~SS_A;
    2472:	38 98       	cbi	0x07, 0	; 7
    2474:	08 95       	ret
  	  //MCUCR &= ~(1<<SPIPS); 				    // Clear for MOSI.  Set for MOSI_A
	  if (mMaster)
	  {
		  /* Set MISO,SS input, all others output */
		  // OUTPUTS (MISO)
		  DDRB &= ~MISO;
    2476:	20 98       	cbi	0x04, 0	; 4
		  // INPUTS  (MOSI, SCK, SS_)
		  DDRB |= (MOSI|SCK);
    2478:	84 b1       	in	r24, 0x04	; 4
    247a:	82 68       	ori	r24, 0x82	; 130
    247c:	84 b9       	out	0x04, r24	; 4
		  DDRD |= SS;
    247e:	53 9a       	sbi	0x0a, 3	; 10
    2480:	08 95       	ret

00002482 <spi_init>:
	
	mbit_order	:	[MSGFIRST,LSBFIRST]  
	mSPI_Mode	:	SPI mode [SPI_MODE0..SPI_MODE3]
****************************************************************************/
void spi_init( BOOL mAlternatePins, BOOL mMaster, uint8_t mbit_order, uint8_t mSPI_Mode )
{
    2482:	1f 93       	push	r17
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <spi_init+0x8>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	16 2f       	mov	r17, r22
	pin_ddr(mAlternatePins, mMaster);
    2490:	2a 83       	std	Y+2, r18	; 0x02
    2492:	49 83       	std	Y+1, r20	; 0x01
    2494:	0e 94 20 12 	call	0x2440	; 0x2440 <_Z7pin_ddrhh>
			
Modes [0..4] have to do with the same polarity and phase.
*************************************************************/
void spi_setDataMode( uint8_t mode )
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2498:	8c b5       	in	r24, 0x2c	; 44
    249a:	83 7f       	andi	r24, 0xF3	; 243
    249c:	2a 81       	ldd	r18, Y+2	; 0x02
    249e:	82 2b       	or	r24, r18
    24a0:	8c bd       	out	0x2c, r24	; 44
}

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
    24a2:	49 81       	ldd	r20, Y+1	; 0x01
    24a4:	41 30       	cpi	r20, 0x01	; 1
    24a6:	a1 f0       	breq	.+40     	; 0x24d0 <spi_init+0x4e>
      SPCR |= (1<<DORD);
  else
     SPCR &= ~((1<<DORD));
    24a8:	8c b5       	in	r24, 0x2c	; 44
    24aa:	8f 7d       	andi	r24, 0xDF	; 223
    24ac:	8c bd       	out	0x2c, r24	; 44
	spi_setBitOrder( mbit_order );		// LIS3d & CMR3000 (accel & gyro) both require msb first.

	// Warning: if the SS pin ever becomes a LOW INPUT then SPI 
	// automatically switches to Slave, so the data direction of 
	// the SS pin MUST be kept as OUTPUT.
	if (mMaster)
    24ae:	11 23       	and	r17, r17
    24b0:	a1 f4       	brne	.+40     	; 0x24da <spi_init+0x58>
	{
	  SPCR |= (1<<MSTR);		// Master SPI
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
	} else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
    24b2:	8c b5       	in	r24, 0x2c	; 44
    24b4:	8f 7e       	andi	r24, 0xEF	; 239
    24b6:	8c bd       	out	0x2c, r24	; 44
  return SPDR;
}

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    24b8:	8c b5       	in	r24, 0x2c	; 44
    24ba:	80 68       	ori	r24, 0x80	; 128
    24bc:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
	} else {
	  SPCR &= ~(1<<MSTR);		// Slave SPI 
	  spi_attachInterrupt();
	}
	SPCR |= (1<<SPE);				// Enable SPI Module
    24be:	8c b5       	in	r24, 0x2c	; 44
    24c0:	80 64       	ori	r24, 0x40	; 64
    24c2:	8c bd       	out	0x2c, r24	; 44
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	1f 91       	pop	r17
    24ce:	08 95       	ret

// Set LSBFIRST or MSBFIRST
void spi_setBitOrder( uint8_t bitOrder )
{
  if(bitOrder == LSBFIRST)
      SPCR |= (1<<DORD);
    24d0:	8c b5       	in	r24, 0x2c	; 44
    24d2:	80 62       	ori	r24, 0x20	; 32
    24d4:	8c bd       	out	0x2c, r24	; 44
	spi_setBitOrder( mbit_order );		// LIS3d & CMR3000 (accel & gyro) both require msb first.

	// Warning: if the SS pin ever becomes a LOW INPUT then SPI 
	// automatically switches to Slave, so the data direction of 
	// the SS pin MUST be kept as OUTPUT.
	if (mMaster)
    24d6:	11 23       	and	r17, r17
    24d8:	61 f3       	breq	.-40     	; 0x24b2 <spi_init+0x30>
	{
	  SPCR |= (1<<MSTR);		// Master SPI
    24da:	8c b5       	in	r24, 0x2c	; 44
    24dc:	80 61       	ori	r24, 0x10	; 16
    24de:	8c bd       	out	0x2c, r24	; 44
	  spi_setClockDivider( SPI_CLOCK_DIV64 );
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	0e 94 0f 12 	call	0x241e	; 0x241e <spi_setClockDivider>
    24e6:	eb cf       	rjmp	.-42     	; 0x24be <spi_init+0x3c>

000024e8 <spi_transfer>:
	SPCR |= (1<<SPE);				// Enable SPI Module
}

byte spi_transfer(byte _data) 
{
  SPDR = _data;
    24e8:	8e bd       	out	0x2e, r24	; 46
  // 0xC0 = (1<<SPIF) | (1<<WCOL)
  while (! (SPSR&0xC0) ) {};
    24ea:	8d b5       	in	r24, 0x2d	; 45
    24ec:	80 7c       	andi	r24, 0xC0	; 192
    24ee:	e9 f3       	breq	.-6      	; 0x24ea <spi_transfer+0x2>
  return SPDR;
    24f0:	8e b5       	in	r24, 0x2e	; 46
}
    24f2:	08 95       	ret

000024f4 <spi_attachInterrupt>:

void spi_attachInterrupt() 
{
  SPCR |= (1<<SPIE);
    24f4:	8c b5       	in	r24, 0x2c	; 44
    24f6:	80 68       	ori	r24, 0x80	; 128
    24f8:	8c bd       	out	0x2c, r24	; 44
}
    24fa:	08 95       	ret

000024fc <spi_detachInterrupt>:

void spi_detachInterrupt() 
{
  SPCR &= ~(1<<SPIE);
    24fc:	8c b5       	in	r24, 0x2c	; 44
    24fe:	8f 77       	andi	r24, 0x7F	; 127
    2500:	8c bd       	out	0x2c, r24	; 44
}
    2502:	08 95       	ret

00002504 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    2504:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    2506:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    2508:	90 93 89 00 	sts	0x0089, r25
    250c:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    2510:	2f bf       	out	0x3f, r18	; 63
}
    2512:	08 95       	ret

00002514 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2514:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    2516:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2518:	90 93 8b 00 	sts	0x008B, r25
    251c:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    2520:	2f bf       	out	0x3f, r18	; 63
}
    2522:	08 95       	ret

00002524 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	7b 01       	movw	r14, r22
    252e:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    2530:	20 91 0a 01 	lds	r18, 0x010A
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	74 e2       	ldi	r23, 0x24	; 36
    253e:	84 ef       	ldi	r24, 0xF4	; 244
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divmodsi4>
    2546:	ca 01       	movw	r24, r20
    2548:	b9 01       	movw	r22, r18
    254a:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__floatsisf>
    254e:	a8 01       	movw	r20, r16
    2550:	97 01       	movw	r18, r14
    2552:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    2556:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
	return Top;
}
    255a:	cb 01       	movw	r24, r22
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	08 95       	ret

00002566 <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    2566:	90 93 0c 01 	sts	0x010C, r25
    256a:	80 93 0b 01 	sts	0x010B, r24
	ICR1 = TOP;
    256e:	90 93 87 00 	sts	0x0087, r25
    2572:	80 93 86 00 	sts	0x0086, r24
}
    2576:	08 95       	ret

00002578 <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	9b 01       	movw	r18, r22
    2582:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	74 e2       	ldi	r23, 0x24	; 36
    2588:	84 e7       	ldi	r24, 0x74	; 116
    258a:	9b e4       	ldi	r25, 0x4B	; 75
    258c:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    2590:	8b 01       	movw	r16, r22
    2592:	d8 2f       	mov	r29, r24
    2594:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    2596:	9e 01       	movw	r18, r28
    2598:	71 2f       	mov	r23, r17
    259a:	83 2f       	mov	r24, r19
    259c:	92 2f       	mov	r25, r18
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f e7       	ldi	r20, 0x7F	; 127
    25a4:	57 e4       	ldi	r21, 0x47	; 71
    25a6:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	0c f0       	brlt	.+2      	; 0x25b0 <_Z16select_prescalerf+0x38>
    25ae:	41 c0       	rjmp	.+130    	; 0x2632 <_Z16select_prescalerf+0xba>
    25b0:	9e 01       	movw	r18, r28
    25b2:	60 2f       	mov	r22, r16
    25b4:	71 2f       	mov	r23, r17
    25b6:	83 2f       	mov	r24, r19
    25b8:	92 2f       	mov	r25, r18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	5e e3       	ldi	r21, 0x3E	; 62
    25c2:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	b4 f5       	brge	.+108    	; 0x2642 <_Z16select_prescalerf+0xca>
    25d6:	9e 01       	movw	r18, r28
    25d8:	60 2f       	mov	r22, r16
    25da:	71 2f       	mov	r23, r17
    25dc:	83 2f       	mov	r24, r19
    25de:	92 2f       	mov	r25, r18
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e8       	ldi	r20, 0x80	; 128
    25e6:	5c e3       	ldi	r21, 0x3C	; 60
    25e8:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <_Z16select_prescalerf+0xd6>
    25fc:	9e 01       	movw	r18, r28
    25fe:	60 2f       	mov	r22, r16
    2600:	71 2f       	mov	r23, r17
    2602:	83 2f       	mov	r24, r19
    2604:	92 2f       	mov	r25, r18
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5b e3       	ldi	r21, 0x3B	; 59
    260e:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	3f ef       	ldi	r19, 0xFF	; 255
    2616:	4f e7       	ldi	r20, 0x7F	; 127
    2618:	57 e4       	ldi	r21, 0x47	; 71
    261a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    261e:	18 16       	cp	r1, r24
    2620:	9c f4       	brge	.+38     	; 0x2648 <_Z16select_prescalerf+0xd0>
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    2626:	c9 01       	movw	r24, r18
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    2632:	21 e0       	ldi	r18, 0x01	; 1
    2634:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    2636:	c9 01       	movw	r24, r18
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    2642:	28 e0       	ldi	r18, 0x08	; 8
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	ef cf       	rjmp	.-34     	; 0x2626 <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	31 e0       	ldi	r19, 0x01	; 1
    264c:	ec cf       	rjmp	.-40     	; 0x2626 <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    264e:	20 e4       	ldi	r18, 0x40	; 64
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	e9 cf       	rjmp	.-46     	; 0x2626 <_Z16select_prescalerf+0xae>

00002654 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    2654:	80 34       	cpi	r24, 0x40	; 64
    2656:	91 05       	cpc	r25, r1
    2658:	d9 f0       	breq	.+54     	; 0x2690 <_Z20get_tccr1b_prescalert+0x3c>
    265a:	81 34       	cpi	r24, 0x41	; 65
    265c:	91 05       	cpc	r25, r1
    265e:	50 f0       	brcs	.+20     	; 0x2674 <_Z20get_tccr1b_prescalert+0x20>
    2660:	21 e0       	ldi	r18, 0x01	; 1
    2662:	80 30       	cpi	r24, 0x00	; 0
    2664:	92 07       	cpc	r25, r18
    2666:	81 f0       	breq	.+32     	; 0x2688 <_Z20get_tccr1b_prescalert+0x34>
    2668:	24 e0       	ldi	r18, 0x04	; 4
    266a:	80 30       	cpi	r24, 0x00	; 0
    266c:	92 07       	cpc	r25, r18
    266e:	51 f0       	breq	.+20     	; 0x2684 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    2670:	8f ef       	ldi	r24, 0xFF	; 255
    2672:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	91 05       	cpc	r25, r1
    2678:	49 f0       	breq	.+18     	; 0x268c <_Z20get_tccr1b_prescalert+0x38>
    267a:	88 30       	cpi	r24, 0x08	; 8
    267c:	91 05       	cpc	r25, r1
    267e:	c1 f7       	brne	.-16     	; 0x2670 <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    2680:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    2682:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    2684:	85 e0       	ldi	r24, 0x05	; 5
    2686:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    2688:	84 e0       	ldi	r24, 0x04	; 4
    268a:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    2690:	83 e0       	ldi	r24, 0x03	; 3
    2692:	08 95       	ret

00002694 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	7b 01       	movw	r14, r22
    269e:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    26a0:	20 91 0a 01 	lds	r18, 0x010A
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	74 e2       	ldi	r23, 0x24	; 36
    26ae:	84 ef       	ldi	r24, 0xF4	; 244
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divmodsi4>
    26b6:	ca 01       	movw	r24, r20
    26b8:	b9 01       	movw	r22, r18
    26ba:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__floatsisf>
    26be:	a8 01       	movw	r20, r16
    26c0:	97 01       	movw	r18, r14
    26c2:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    26c6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    26ca:	70 93 0c 01 	sts	0x010C, r23
    26ce:	60 93 0b 01 	sts	0x010B, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    26d2:	70 93 87 00 	sts	0x0087, r23
    26d6:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	08 95       	ret

000026e4 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	7b 01       	movw	r14, r22
    26f2:	8c 01       	movw	r16, r24
    26f4:	c4 2f       	mov	r28, r20
    26f6:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    26f8:	41 11       	cpse	r20, r1
    26fa:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    26fc:	d1 11       	cpse	r29, r1
    26fe:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    2700:	80 91 64 00 	lds	r24, 0x0064
    2704:	87 7e       	andi	r24, 0xE7	; 231
    2706:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    270a:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    270c:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    270e:	10 92 89 00 	sts	0x0089, r1
    2712:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    2716:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2718:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    271a:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    271c:	10 92 8b 00 	sts	0x008B, r1
    2720:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    2724:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    2726:	20 91 0a 01 	lds	r18, 0x010A
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	74 e2       	ldi	r23, 0x24	; 36
    2734:	84 ef       	ldi	r24, 0xF4	; 244
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divmodsi4>
    273c:	ca 01       	movw	r24, r20
    273e:	b9 01       	movw	r22, r18
    2740:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__floatsisf>
    2744:	a8 01       	movw	r20, r16
    2746:	97 01       	movw	r18, r14
    2748:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    274c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    2750:	70 93 0c 01 	sts	0x010C, r23
    2754:	60 93 0b 01 	sts	0x010B, r22
	ICR1 = TOP;
    2758:	70 93 87 00 	sts	0x0087, r23
    275c:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    2760:	cc 23       	and	r28, r28
    2762:	c1 f4       	brne	.+48     	; 0x2794 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    2764:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    2766:	d1 11       	cpse	r29, r1
    2768:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    276a:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    276e:	c8 01       	movw	r24, r16
    2770:	b7 01       	movw	r22, r14
    2772:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z16select_prescalerf>
    2776:	80 93 0a 01 	sts	0x010A, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z20get_tccr1b_prescalert>
    2780:	88 61       	ori	r24, 0x18	; 24
    2782:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	ef 90       	pop	r14
    2792:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    2794:	82 e8       	ldi	r24, 0x82	; 130
    2796:	e7 cf       	rjmp	.-50     	; 0x2766 <_Z8pwm_initfhh+0x82>

00002798 <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    2798:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    279c:	29 2f       	mov	r18, r25
    279e:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    27a0:	88 23       	and	r24, r24
    27a2:	21 f4       	brne	.+8      	; 0x27ac <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    27a4:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    27a6:	90 93 80 00 	sts	0x0080, r25
}
    27aa:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    27ac:	92 2f       	mov	r25, r18
    27ae:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    27b0:	90 93 80 00 	sts	0x0080, r25
}
    27b4:	08 95       	ret

000027b6 <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    27b6:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    27ba:	29 2f       	mov	r18, r25
    27bc:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    27be:	88 23       	and	r24, r24
    27c0:	21 f4       	brne	.+8      	; 0x27ca <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    27c2:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    27c4:	90 93 80 00 	sts	0x0080, r25
}
    27c8:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    27ca:	92 2f       	mov	r25, r18
    27cc:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    27ce:	90 93 80 00 	sts	0x0080, r25
}
    27d2:	08 95       	ret

000027d4 <_Z9set_dutyAf>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_dutyA( float mDuty )
{
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	7b 01       	movw	r14, r22
    27de:	8c 01       	movw	r16, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	a9 01       	movw	r20, r18
    27e6:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    27ea:	87 ff       	sbrs	r24, 7
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <_Z9set_dutyAf+0x22>
    27ee:	17 fb       	bst	r17, 7
    27f0:	10 95       	com	r17
    27f2:	17 f9       	bld	r17, 7
    27f4:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    27f6:	60 91 0b 01 	lds	r22, 0x010B
    27fa:	70 91 0c 01 	lds	r23, 0x010C
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
    2806:	a8 01       	movw	r20, r16
    2808:	97 01       	movw	r18, r14
    280a:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    280e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <ceil>
    2812:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    2816:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    2818:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    281a:	70 93 89 00 	sts	0x0089, r23
    281e:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    2822:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	ff 90       	pop	r15
    282a:	ef 90       	pop	r14
    282c:	08 95       	ret

0000282e <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	7b 01       	movw	r14, r22
    2838:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	a9 01       	movw	r20, r18
    2840:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    2844:	87 ff       	sbrs	r24, 7
    2846:	04 c0       	rjmp	.+8      	; 0x2850 <_Z9set_dutyBf+0x22>
    2848:	17 fb       	bst	r17, 7
    284a:	10 95       	com	r17
    284c:	17 f9       	bld	r17, 7
    284e:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    2850:	60 91 0b 01 	lds	r22, 0x010B
    2854:	70 91 0c 01 	lds	r23, 0x010C
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
    2860:	a8 01       	movw	r20, r16
    2862:	97 01       	movw	r18, r14
    2864:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2868:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <ceil>
    286c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    2870:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    2872:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    2874:	70 93 8b 00 	sts	0x008B, r23
    2878:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    287c:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	ff 90       	pop	r15
    2884:	ef 90       	pop	r14
    2886:	08 95       	ret

00002888 <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    2888:	9b 01       	movw	r18, r22
    288a:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    288c:	10 92 2b 03 	sts	0x032B, r1
    2890:	10 92 2c 03 	sts	0x032C, r1
    2894:	10 92 2d 03 	sts	0x032D, r1
    2898:	10 92 2e 03 	sts	0x032E, r1
    289c:	80 91 2b 03 	lds	r24, 0x032B
    28a0:	90 91 2c 03 	lds	r25, 0x032C
    28a4:	a0 91 2d 03 	lds	r26, 0x032D
    28a8:	b0 91 2e 03 	lds	r27, 0x032E
    28ac:	82 17       	cp	r24, r18
    28ae:	93 07       	cpc	r25, r19
    28b0:	a4 07       	cpc	r26, r20
    28b2:	b5 07       	cpc	r27, r21
    28b4:	04 f5       	brge	.+64     	; 0x28f6 <_Z5delayl+0x6e>
    28b6:	80 91 2b 03 	lds	r24, 0x032B
    28ba:	90 91 2c 03 	lds	r25, 0x032C
    28be:	a0 91 2d 03 	lds	r26, 0x032D
    28c2:	b0 91 2e 03 	lds	r27, 0x032E
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	a1 1d       	adc	r26, r1
    28ca:	b1 1d       	adc	r27, r1
    28cc:	80 93 2b 03 	sts	0x032B, r24
    28d0:	90 93 2c 03 	sts	0x032C, r25
    28d4:	a0 93 2d 03 	sts	0x032D, r26
    28d8:	b0 93 2e 03 	sts	0x032E, r27
    28dc:	80 91 2b 03 	lds	r24, 0x032B
    28e0:	90 91 2c 03 	lds	r25, 0x032C
    28e4:	a0 91 2d 03 	lds	r26, 0x032D
    28e8:	b0 91 2e 03 	lds	r27, 0x032E
    28ec:	82 17       	cp	r24, r18
    28ee:	93 07       	cpc	r25, r19
    28f0:	a4 07       	cpc	r26, r20
    28f2:	b5 07       	cpc	r27, r21
    28f4:	04 f3       	brlt	.-64     	; 0x28b6 <_Z5delayl+0x2e>
    28f6:	08 95       	ret

000028f8 <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    28fc:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    28fe:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    2900:	8e ef       	ldi	r24, 0xFE	; 254
    2902:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    2904:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    2906:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    2908:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    290a:	10 92 64 00 	sts	0x0064, r1
}
    290e:	08 95       	ret

00002910 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    2914:	93 e0       	ldi	r25, 0x03	; 3
    2916:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    2918:	9a ef       	ldi	r25, 0xFA	; 250
    291a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    291c:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    2920:	10 92 32 03 	sts	0x0332, r1
    2924:	10 92 31 03 	sts	0x0331, r1
	/******************* PERIPHERAL INIT ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    2928:	08 95       	ret

0000292a <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	80 93 35 03 	sts	0x0335, r24
}
    2930:	08 95       	ret

00002932 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    2932:	10 92 35 03 	sts	0x0335, r1
}
    2936:	08 95       	ret

00002938 <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    2938:	20 91 31 03 	lds	r18, 0x0331
    293c:	30 91 32 03 	lds	r19, 0x0332
    2940:	c9 01       	movw	r24, r18
    2942:	65 e0       	ldi	r22, 0x05	; 5
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__divmodhi4>
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	39 f4       	brne	.+14     	; 0x295c <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    294e:	c9 01       	movw	r24, r18
    2950:	6a e0       	ldi	r22, 0x0A	; 10
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__divmodhi4>
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	09 f0       	breq	.+2      	; 0x295e <_Z15System_Dispatchv+0x26>
    295c:	08 95       	ret
		{
			can_instance_timeslice();
    295e:	0e 94 89 0c 	call	0x1912	; 0x1912 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    2962:	80 91 31 03 	lds	r24, 0x0331
    2966:	90 91 32 03 	lds	r25, 0x0332
    296a:	64 e1       	ldi	r22, 0x14	; 20
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__divmodhi4>
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	99 f7       	brne	.-26     	; 0x295c <_Z15System_Dispatchv+0x24>
			{
				can_board_timeslice();
    2976:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    297a:	80 91 31 03 	lds	r24, 0x0331
    297e:	90 91 32 03 	lds	r25, 0x0332
    2982:	62 e3       	ldi	r22, 0x32	; 50
    2984:	70 e0       	ldi	r23, 0x00	; 0
    2986:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__divmodhi4>
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	39 f7       	brne	.-50     	; 0x295c <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    298e:	0e 94 b9 11 	call	0x2372	; 0x2372 <_Z19led_timeslice_100msv>
    2992:	08 95       	ret

00002994 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    2994:	1f 92       	push	r1
    2996:	0f 92       	push	r0
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	0f 92       	push	r0
    299c:	11 24       	eor	r1, r1
    299e:	2f 93       	push	r18
    29a0:	3f 93       	push	r19
    29a2:	4f 93       	push	r20
    29a4:	5f 93       	push	r21
    29a6:	6f 93       	push	r22
    29a8:	7f 93       	push	r23
    29aa:	8f 93       	push	r24
    29ac:	9f 93       	push	r25
    29ae:	af 93       	push	r26
    29b0:	bf 93       	push	r27
    29b2:	ef 93       	push	r30
    29b4:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    29b6:	80 91 36 03 	lds	r24, 0x0336
    29ba:	88 23       	and	r24, r24
    29bc:	41 f1       	breq	.+80     	; 0x2a0e <__vector_15+0x7a>
    29be:	10 92 36 03 	sts	0x0336, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    29c2:	80 91 35 03 	lds	r24, 0x0335
    29c6:	88 23       	and	r24, r24
    29c8:	49 f1       	breq	.+82     	; 0x2a1c <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    29ca:	80 91 2f 03 	lds	r24, 0x032F
    29ce:	90 91 30 03 	lds	r25, 0x0330
    29d2:	9c 01       	movw	r18, r24
    29d4:	2f 5f       	subi	r18, 0xFF	; 255
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	30 93 30 03 	sts	0x0330, r19
    29dc:	20 93 2f 03 	sts	0x032F, r18
    29e0:	6a e0       	ldi	r22, 0x0A	; 10
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__udivmodhi4>
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	31 f1       	breq	.+76     	; 0x2a38 <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    29ec:	ff 91       	pop	r31
    29ee:	ef 91       	pop	r30
    29f0:	bf 91       	pop	r27
    29f2:	af 91       	pop	r26
    29f4:	9f 91       	pop	r25
    29f6:	8f 91       	pop	r24
    29f8:	7f 91       	pop	r23
    29fa:	6f 91       	pop	r22
    29fc:	5f 91       	pop	r21
    29fe:	4f 91       	pop	r20
    2a00:	3f 91       	pop	r19
    2a02:	2f 91       	pop	r18
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	0f 90       	pop	r0
    2a0a:	1f 90       	pop	r1
    2a0c:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	80 93 36 03 	sts	0x0336, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    2a14:	80 91 35 03 	lds	r24, 0x0335
    2a18:	88 23       	and	r24, r24
    2a1a:	b9 f6       	brne	.-82     	; 0x29ca <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    2a1c:	80 91 31 03 	lds	r24, 0x0331
    2a20:	90 91 32 03 	lds	r25, 0x0332
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	90 93 32 03 	sts	0x0332, r25
    2a2a:	80 93 31 03 	sts	0x0331, r24
		System_Dispatch();
    2a2e:	0e 94 9c 14 	call	0x2938	; 0x2938 <_Z15System_Dispatchv>
		OS_Dispatch();
    2a32:	0e 94 a9 06 	call	0xd52	; 0xd52 <_Z11OS_Dispatchv>
    2a36:	da cf       	rjmp	.-76     	; 0x29ec <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    2a38:	10 92 30 03 	sts	0x0330, r1
    2a3c:	10 92 2f 03 	sts	0x032F, r1
			OS_Event_TIC_Counter++;
    2a40:	80 91 31 03 	lds	r24, 0x0331
    2a44:	90 91 32 03 	lds	r25, 0x0332
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	90 93 32 03 	sts	0x0332, r25
    2a4e:	80 93 31 03 	sts	0x0331, r24
			OS_Dispatch();
    2a52:	0e 94 a9 06 	call	0xd52	; 0xd52 <_Z11OS_Dispatchv>
    2a56:	ca cf       	rjmp	.-108    	; 0x29ec <__vector_15+0x58>

00002a58 <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    2a58:	82 e0       	ldi	r24, 0x02	; 2
    2a5a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    2a5c:	93 e0       	ldi	r25, 0x03	; 3
    2a5e:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    2a60:	9a ef       	ldi	r25, 0xFA	; 250
    2a62:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    2a64:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    2a68:	10 92 32 03 	sts	0x0332, r1
    2a6c:	10 92 31 03 	sts	0x0331, r1
}
    2a70:	08 95       	ret

00002a72 <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    2a72:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    2a74:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    2a76:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    2a78:	85 81       	ldd	r24, Z+5	; 0x05
    2a7a:	82 30       	cpi	r24, 0x02	; 2
    2a7c:	d9 f0       	breq	.+54     	; 0x2ab4 <_Z27can_parse_configure_requestP4sCAN+0x42>
    2a7e:	83 30       	cpi	r24, 0x03	; 3
    2a80:	71 f0       	breq	.+28     	; 0x2a9e <_Z27can_parse_configure_requestP4sCAN+0x2c>
    2a82:	81 30       	cpi	r24, 0x01	; 1
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <_Z27can_parse_configure_requestP4sCAN+0x16>
    2a86:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    2a88:	89 2f       	mov	r24, r25
    2a8a:	80 95       	com	r24
    2a8c:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    2a8e:	92 23       	and	r25, r18
    2a90:	20 91 37 03 	lds	r18, 0x0337
    2a94:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    2a96:	89 23       	and	r24, r25
    2a98:	80 93 37 03 	sts	0x0337, r24
				 break;
    2a9c:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    2a9e:	89 2f       	mov	r24, r25
    2aa0:	80 95       	com	r24
    2aa2:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    2aa4:	92 23       	and	r25, r18
    2aa6:	20 91 39 03 	lds	r18, 0x0339
    2aaa:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    2aac:	89 23       	and	r24, r25
    2aae:	80 93 39 03 	sts	0x0339, r24
    2ab2:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    2ab4:	89 2f       	mov	r24, r25
    2ab6:	80 95       	com	r24
    2ab8:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    2aba:	92 23       	and	r25, r18
    2abc:	20 91 38 03 	lds	r18, 0x0338
    2ac0:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    2ac2:	89 23       	and	r24, r25
    2ac4:	80 93 38 03 	sts	0x0338, r24
				 break;
    2ac8:	08 95       	ret

00002aca <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    2aca:	10 92 37 03 	sts	0x0337, r1
	config_byte_2 = 0;		// no reports
    2ace:	10 92 38 03 	sts	0x0338, r1
	config_byte_3 = 0;		// 
    2ad2:	10 92 39 03 	sts	0x0339, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    2ad6:	82 e4       	ldi	r24, 0x42	; 66
    2ad8:	80 93 3a 03 	sts	0x033A, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    2adc:	10 92 ba 02 	sts	0x02BA, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    2ae0:	80 91 3b 03 	lds	r24, 0x033B
    2ae4:	81 60       	ori	r24, 0x01	; 1
    2ae6:	80 93 3b 03 	sts	0x033B, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    2aea:	10 92 b9 02 	sts	0x02B9, r1
	MyInstance 		 = 0x98;
    2aee:	88 e9       	ldi	r24, 0x98	; 152
    2af0:	80 93 b8 02 	sts	0x02B8, r24
}
    2af4:	08 95       	ret

00002af6 <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    2af6:	80 91 3b 03 	lds	r24, 0x033B
							// b/c BigMotorEn board already does and we should have a consistent interface.
							// and b/c it's better the user knows when it's read.

	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    2afa:	80 fd       	sbrc	r24, 0
    2afc:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    2afe:	0e 94 65 15 	call	0x2aca	; 0x2aca <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    2b02:	0e 94 c9 06 	call	0xd92	; 0xd92 <_Z25app_default_configurationv>
    2b06:	08 95       	ret

00002b08 <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    2b08:	20 91 b8 02 	lds	r18, 0x02B8
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b0c:	f9 99       	sbic	0x1f, 1	; 31
    2b0e:	fe cf       	rjmp	.-4      	; 0x2b0c <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2b10:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b12:	92 bd       	out	0x22, r25	; 34
    2b14:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2b16:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	fa 9a       	sbi	0x1f, 2	; 31
    2b1e:	f9 9a       	sbi	0x1f, 1	; 31
    2b20:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    2b22:	9c 01       	movw	r18, r24
    2b24:	2f 5f       	subi	r18, 0xFF	; 255
    2b26:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2b28:	c9 01       	movw	r24, r18
    2b2a:	08 95       	ret

00002b2c <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b2c:	f9 99       	sbic	0x1f, 1	; 31
    2b2e:	fe cf       	rjmp	.-4      	; 0x2b2c <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b30:	92 bd       	out	0x22, r25	; 34
    2b32:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b34:	f8 9a       	sbi	0x1f, 0	; 31
    2b36:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    2b38:	20 93 b8 02 	sts	0x02B8, r18
    return mEEPROMAddress+1;    
    2b3c:	9c 01       	movw	r18, r24
    2b3e:	2f 5f       	subi	r18, 0xFF	; 255
    2b40:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2b42:	c9 01       	movw	r24, r18
    2b44:	08 95       	ret

00002b46 <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    2b46:	20 91 b9 02 	lds	r18, 0x02B9
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b4a:	f9 99       	sbic	0x1f, 1	; 31
    2b4c:	fe cf       	rjmp	.-4      	; 0x2b4a <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2b4e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b50:	92 bd       	out	0x22, r25	; 34
    2b52:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2b54:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	fa 9a       	sbi	0x1f, 2	; 31
    2b5c:	f9 9a       	sbi	0x1f, 1	; 31
    2b5e:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    2b60:	9c 01       	movw	r18, r24
    2b62:	2f 5f       	subi	r18, 0xFF	; 255
    2b64:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2b66:	c9 01       	movw	r24, r18
    2b68:	08 95       	ret

00002b6a <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b6a:	f9 99       	sbic	0x1f, 1	; 31
    2b6c:	fe cf       	rjmp	.-4      	; 0x2b6a <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b6e:	92 bd       	out	0x22, r25	; 34
    2b70:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b72:	f8 9a       	sbi	0x1f, 0	; 31
    2b74:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    2b76:	20 93 b9 02 	sts	0x02B9, r18
    return mEEPROMAddress+1;
    2b7a:	9c 01       	movw	r18, r24
    2b7c:	2f 5f       	subi	r18, 0xFF	; 255
    2b7e:	3f 4f       	sbci	r19, 0xFF	; 255
}
    2b80:	c9 01       	movw	r24, r18
    2b82:	08 95       	ret

00002b84 <_Z25save_configuration_eepromPh>:
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	eeprom_write_byte( addr++, ~config_byte_1 );
    2b84:	9c 01       	movw	r18, r24
    2b86:	2f 5f       	subi	r18, 0xFF	; 255
    2b88:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8a:	40 91 37 03 	lds	r20, 0x0337
    2b8e:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b90:	f9 99       	sbic	0x1f, 1	; 31
    2b92:	fe cf       	rjmp	.-4      	; 0x2b90 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2b94:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b96:	92 bd       	out	0x22, r25	; 34
    2b98:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2b9a:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	fa 9a       	sbi	0x1f, 2	; 31
    2ba2:	f9 9a       	sbi	0x1f, 1	; 31
    2ba4:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    2ba6:	c9 01       	movw	r24, r18
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	40 91 38 03 	lds	r20, 0x0338
    2bae:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2bb0:	f9 99       	sbic	0x1f, 1	; 31
    2bb2:	fe cf       	rjmp	.-4      	; 0x2bb0 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2bb4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2bb6:	32 bd       	out	0x22, r19	; 34
    2bb8:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2bba:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	fa 9a       	sbi	0x1f, 2	; 31
    2bc2:	f9 9a       	sbi	0x1f, 1	; 31
    2bc4:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    2bc6:	9c 01       	movw	r18, r24
    2bc8:	2f 5f       	subi	r18, 0xFF	; 255
    2bca:	3f 4f       	sbci	r19, 0xFF	; 255
    2bcc:	40 91 39 03 	lds	r20, 0x0339
    2bd0:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2bd2:	f9 99       	sbic	0x1f, 1	; 31
    2bd4:	fe cf       	rjmp	.-4      	; 0x2bd2 <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2bd6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2bd8:	92 bd       	out	0x22, r25	; 34
    2bda:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2bdc:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	fa 9a       	sbi	0x1f, 2	; 31
    2be4:	f9 9a       	sbi	0x1f, 1	; 31
    2be6:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    2be8:	c9 01       	movw	r24, r18
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	40 91 3a 03 	lds	r20, 0x033A
    2bf0:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2bf2:	f9 99       	sbic	0x1f, 1	; 31
    2bf4:	fe cf       	rjmp	.-4      	; 0x2bf2 <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2bf6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2bf8:	32 bd       	out	0x22, r19	; 34
    2bfa:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2bfc:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	fa 9a       	sbi	0x1f, 2	; 31
    2c04:	f9 9a       	sbi	0x1f, 1	; 31
    2c06:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    2c08:	9c 01       	movw	r18, r24
    2c0a:	2f 5f       	subi	r18, 0xFF	; 255
    2c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0e:	40 91 3b 03 	lds	r20, 0x033B
    2c12:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2c14:	f9 99       	sbic	0x1f, 1	; 31
    2c16:	fe cf       	rjmp	.-4      	; 0x2c14 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2c18:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2c1a:	92 bd       	out	0x22, r25	; 34
    2c1c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2c1e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	fa 9a       	sbi	0x1f, 2	; 31
    2c26:	f9 9a       	sbi	0x1f, 1	; 31
    2c28:	0f be       	out	0x3f, r0	; 63
	return addr;
}
    2c2a:	c9 01       	movw	r24, r18
    2c2c:	08 95       	ret

00002c2e <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 84 15 	call	0x2b08	; 0x2b08 <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    2c36:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    2c3a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <_Z25save_configuration_eepromPh>
}
    2c3e:	08 95       	ret

00002c40 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    2c40:	f8 94       	cli
	return save_configuration();
    2c42:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_Z18save_configurationv>
	sei();
}
    2c46:	08 95       	ret

00002c48 <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    2c48:	22 e1       	ldi	r18, 0x12	; 18
    2c4a:	84 33       	cpi	r24, 0x34	; 52
    2c4c:	92 07       	cpc	r25, r18
    2c4e:	11 f0       	breq	.+4      	; 0x2c54 <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    2c50:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    2c52:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    2c54:	80 91 3b 03 	lds	r24, 0x033B
    2c58:	8e 7f       	andi	r24, 0xFE	; 254
    2c5a:	80 93 3b 03 	sts	0x033B, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    2c5e:	f8 94       	cli
    2c60:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_Z18save_configurationv>
    2c64:	78 94       	sei
		retval = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	08 95       	ret

00002c6a <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	2f 5f       	subi	r18, 0xFF	; 255
    2c6e:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c70:	f9 99       	sbic	0x1f, 1	; 31
    2c72:	fe cf       	rjmp	.-4      	; 0x2c70 <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2c74:	92 bd       	out	0x22, r25	; 34
    2c76:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2c78:	f8 9a       	sbi	0x1f, 0	; 31
    2c7a:	80 b5       	in	r24, 0x20	; 32
    2c7c:	80 95       	com	r24
    2c7e:	80 93 37 03 	sts	0x0337, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    2c82:	c9 01       	movw	r24, r18
    2c84:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c86:	f9 99       	sbic	0x1f, 1	; 31
    2c88:	fe cf       	rjmp	.-4      	; 0x2c86 <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2c8a:	32 bd       	out	0x22, r19	; 34
    2c8c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2c8e:	f8 9a       	sbi	0x1f, 0	; 31
    2c90:	20 b5       	in	r18, 0x20	; 32
    2c92:	20 95       	com	r18
    2c94:	20 93 38 03 	sts	0x0338, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    2c98:	9c 01       	movw	r18, r24
    2c9a:	2f 5f       	subi	r18, 0xFF	; 255
    2c9c:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c9e:	f9 99       	sbic	0x1f, 1	; 31
    2ca0:	fe cf       	rjmp	.-4      	; 0x2c9e <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ca2:	92 bd       	out	0x22, r25	; 34
    2ca4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2ca6:	f8 9a       	sbi	0x1f, 0	; 31
    2ca8:	80 b5       	in	r24, 0x20	; 32
    2caa:	80 95       	com	r24
    2cac:	80 93 39 03 	sts	0x0339, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    2cb0:	c9 01       	movw	r24, r18
    2cb2:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cb4:	f9 99       	sbic	0x1f, 1	; 31
    2cb6:	fe cf       	rjmp	.-4      	; 0x2cb4 <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2cb8:	32 bd       	out	0x22, r19	; 34
    2cba:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2cbc:	f8 9a       	sbi	0x1f, 0	; 31
    2cbe:	20 b5       	in	r18, 0x20	; 32
    2cc0:	20 95       	com	r18
    2cc2:	20 93 3a 03 	sts	0x033A, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    2cc6:	9c 01       	movw	r18, r24
    2cc8:	2f 5f       	subi	r18, 0xFF	; 255
    2cca:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ccc:	f9 99       	sbic	0x1f, 1	; 31
    2cce:	fe cf       	rjmp	.-4      	; 0x2ccc <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2cd0:	92 bd       	out	0x22, r25	; 34
    2cd2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2cd4:	f8 9a       	sbi	0x1f, 0	; 31
    2cd6:	80 b5       	in	r24, 0x20	; 32
    2cd8:	80 95       	com	r24
    2cda:	80 93 3b 03 	sts	0x033B, r24
	return addr;
}
    2cde:	c9 01       	movw	r24, r18
    2ce0:	08 95       	ret

00002ce2 <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    2cea:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    2cee:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z25read_configuration_eepromPh>
}
    2cf2:	08 95       	ret

00002cf4 <__vector_27>:
/**************** VARIABLES *************************************/
word LightSensorSample [2];
byte next_channel = 0;

ISR ( ADC_vect )
{
    2cf4:	1f 92       	push	r1
    2cf6:	0f 92       	push	r0
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	0f 92       	push	r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	2f 93       	push	r18
    2d00:	3f 93       	push	r19
    2d02:	8f 93       	push	r24
    2d04:	9f 93       	push	r25
	word result = ADCL;
    2d06:	20 91 78 00 	lds	r18, 0x0078
	result      += (ADCH<<8);
    2d0a:	30 91 79 00 	lds	r19, 0x0079
	switch(next_channel)
    2d0e:	80 91 40 03 	lds	r24, 0x0340
    2d12:	88 23       	and	r24, r24
    2d14:	21 f5       	brne	.+72     	; 0x2d5e <__vector_27+0x6a>
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
    2d16:	80 91 3e 03 	lds	r24, 0x033E
    2d1a:	90 91 3f 03 	lds	r25, 0x033F
    2d1e:	90 93 3d 03 	sts	0x033D, r25
    2d22:	80 93 3c 03 	sts	0x033C, r24
byte next_channel = 0;

ISR ( ADC_vect )
{
	word result = ADCL;
	result      += (ADCH<<8);
    2d26:	93 2f       	mov	r25, r19
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	82 0f       	add	r24, r18
    2d2c:	91 1d       	adc	r25, r1
	switch(next_channel)
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
			LightSensorSample[1] = result;
    2d2e:	90 93 3f 03 	sts	0x033F, r25
    2d32:	80 93 3e 03 	sts	0x033E, r24
			next_channel = 1;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	80 93 40 03 	sts	0x0340, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
			ADMUX = POT_MUX;		// Select POT	
    2d3c:	82 e4       	ldi	r24, 0x42	; 66
    2d3e:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    2d42:	80 91 7a 00 	lds	r24, 0x007A
    2d46:	80 64       	ori	r24, 0x40	; 64
    2d48:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    2d4c:	9f 91       	pop	r25
    2d4e:	8f 91       	pop	r24
    2d50:	3f 91       	pop	r19
    2d52:	2f 91       	pop	r18
    2d54:	0f 90       	pop	r0
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	0f 90       	pop	r0
    2d5a:	1f 90       	pop	r1
    2d5c:	18 95       	reti
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
    2d5e:	10 92 40 03 	sts	0x0340, r1
    2d62:	ec cf       	rjmp	.-40     	; 0x2d3c <__vector_27+0x48>

00002d64 <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    2d64:	ea e7       	ldi	r30, 0x7A	; 122
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	88 7f       	andi	r24, 0xF8	; 248
    2d6c:	80 83       	st	Z, r24
}
    2d6e:	08 95       	ret

00002d70 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83;
    2d70:	8b e9       	ldi	r24, 0x9B	; 155
    2d72:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    2d76:	ee e7       	ldi	r30, 0x7E	; 126
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	84 60       	ori	r24, 0x04	; 4
    2d7e:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    2d80:	ef e7       	ldi	r30, 0x7F	; 127
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	83 60       	ori	r24, 0x03	; 3
    2d88:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    2d8a:	80 ea       	ldi	r24, 0xA0	; 160
    2d8c:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    2d90:	82 e4       	ldi	r24, 0x42	; 66
    2d92:	80 93 7c 00 	sts	0x007C, r24
}
    2d96:	08 95       	ret

00002d98 <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    2d98:	82 e4       	ldi	r24, 0x42	; 66
    2d9a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    2d9e:	ea e7       	ldi	r30, 0x7A	; 122
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	80 64       	ori	r24, 0x40	; 64
    2da6:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    2da8:	08 95       	ret

00002daa <__fixunssfsi>:
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	7b 01       	movw	r14, r22
    2db4:	8c 01       	movw	r16, r24
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	5f e4       	ldi	r21, 0x4F	; 79
    2dbe:	0e 94 81 1a 	call	0x3502	; 0x3502 <__gesf2>
    2dc2:	87 fd       	sbrc	r24, 7
    2dc4:	11 c0       	rjmp	.+34     	; 0x2de8 <__fixunssfsi+0x3e>
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	b7 01       	movw	r22, r14
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	5f e4       	ldi	r21, 0x4F	; 79
    2dd2:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__subsf3>
    2dd6:	0e 94 41 1b 	call	0x3682	; 0x3682 <__fixsfsi>
    2dda:	9b 01       	movw	r18, r22
    2ddc:	ac 01       	movw	r20, r24
    2dde:	20 50       	subi	r18, 0x00	; 0
    2de0:	30 40       	sbci	r19, 0x00	; 0
    2de2:	40 40       	sbci	r20, 0x00	; 0
    2de4:	50 48       	sbci	r21, 0x80	; 128
    2de6:	06 c0       	rjmp	.+12     	; 0x2df4 <__fixunssfsi+0x4a>
    2de8:	c8 01       	movw	r24, r16
    2dea:	b7 01       	movw	r22, r14
    2dec:	0e 94 41 1b 	call	0x3682	; 0x3682 <__fixsfsi>
    2df0:	9b 01       	movw	r18, r22
    2df2:	ac 01       	movw	r20, r24
    2df4:	b9 01       	movw	r22, r18
    2df6:	ca 01       	movw	r24, r20
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	08 95       	ret

00002e02 <_fpadd_parts>:
    2e02:	a0 e0       	ldi	r26, 0x00	; 0
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e7 e0       	ldi	r30, 0x07	; 7
    2e08:	f7 e1       	ldi	r31, 0x17	; 23
    2e0a:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__prologue_saves__+0x8>
    2e0e:	fc 01       	movw	r30, r24
    2e10:	ea 01       	movw	r28, r20
    2e12:	80 81       	ld	r24, Z
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	08 f4       	brcc	.+2      	; 0x2e1a <_fpadd_parts+0x18>
    2e18:	38 c1       	rjmp	.+624    	; 0x308a <_fpadd_parts+0x288>
    2e1a:	db 01       	movw	r26, r22
    2e1c:	9c 91       	ld	r25, X
    2e1e:	92 30       	cpi	r25, 0x02	; 2
    2e20:	08 f4       	brcc	.+2      	; 0x2e24 <_fpadd_parts+0x22>
    2e22:	30 c1       	rjmp	.+608    	; 0x3084 <_fpadd_parts+0x282>
    2e24:	84 30       	cpi	r24, 0x04	; 4
    2e26:	59 f4       	brne	.+22     	; 0x2e3e <_fpadd_parts+0x3c>
    2e28:	94 30       	cpi	r25, 0x04	; 4
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <_fpadd_parts+0x2c>
    2e2c:	2e c1       	rjmp	.+604    	; 0x308a <_fpadd_parts+0x288>
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	11 96       	adiw	r26, 0x01	; 1
    2e32:	8c 91       	ld	r24, X
    2e34:	11 97       	sbiw	r26, 0x01	; 1
    2e36:	98 17       	cp	r25, r24
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <_fpadd_parts+0x3a>
    2e3a:	21 c1       	rjmp	.+578    	; 0x307e <_fpadd_parts+0x27c>
    2e3c:	26 c1       	rjmp	.+588    	; 0x308a <_fpadd_parts+0x288>
    2e3e:	94 30       	cpi	r25, 0x04	; 4
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <_fpadd_parts+0x42>
    2e42:	20 c1       	rjmp	.+576    	; 0x3084 <_fpadd_parts+0x282>
    2e44:	92 30       	cpi	r25, 0x02	; 2
    2e46:	b1 f4       	brne	.+44     	; 0x2e74 <_fpadd_parts+0x72>
    2e48:	82 30       	cpi	r24, 0x02	; 2
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <_fpadd_parts+0x4c>
    2e4c:	1e c1       	rjmp	.+572    	; 0x308a <_fpadd_parts+0x288>
    2e4e:	ca 01       	movw	r24, r20
    2e50:	af 01       	movw	r20, r30
    2e52:	28 e0       	ldi	r18, 0x08	; 8
    2e54:	da 01       	movw	r26, r20
    2e56:	0d 90       	ld	r0, X+
    2e58:	ad 01       	movw	r20, r26
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	0d 92       	st	X+, r0
    2e5e:	cd 01       	movw	r24, r26
    2e60:	21 50       	subi	r18, 0x01	; 1
    2e62:	c1 f7       	brne	.-16     	; 0x2e54 <_fpadd_parts+0x52>
    2e64:	db 01       	movw	r26, r22
    2e66:	11 96       	adiw	r26, 0x01	; 1
    2e68:	8c 91       	ld	r24, X
    2e6a:	11 97       	sbiw	r26, 0x01	; 1
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	89 23       	and	r24, r25
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	0a c1       	rjmp	.+532    	; 0x3088 <_fpadd_parts+0x286>
    2e74:	82 30       	cpi	r24, 0x02	; 2
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_fpadd_parts+0x78>
    2e78:	05 c1       	rjmp	.+522    	; 0x3084 <_fpadd_parts+0x282>
    2e7a:	c2 80       	ldd	r12, Z+2	; 0x02
    2e7c:	d3 80       	ldd	r13, Z+3	; 0x03
    2e7e:	db 01       	movw	r26, r22
    2e80:	12 96       	adiw	r26, 0x02	; 2
    2e82:	6d 90       	ld	r6, X+
    2e84:	7c 90       	ld	r7, X
    2e86:	13 97       	sbiw	r26, 0x03	; 3
    2e88:	24 81       	ldd	r18, Z+4	; 0x04
    2e8a:	35 81       	ldd	r19, Z+5	; 0x05
    2e8c:	46 81       	ldd	r20, Z+6	; 0x06
    2e8e:	57 81       	ldd	r21, Z+7	; 0x07
    2e90:	14 96       	adiw	r26, 0x04	; 4
    2e92:	ed 90       	ld	r14, X+
    2e94:	fd 90       	ld	r15, X+
    2e96:	0d 91       	ld	r16, X+
    2e98:	1c 91       	ld	r17, X
    2e9a:	17 97       	sbiw	r26, 0x07	; 7
    2e9c:	c6 01       	movw	r24, r12
    2e9e:	86 19       	sub	r24, r6
    2ea0:	97 09       	sbc	r25, r7
    2ea2:	5c 01       	movw	r10, r24
    2ea4:	97 ff       	sbrs	r25, 7
    2ea6:	04 c0       	rjmp	.+8      	; 0x2eb0 <_fpadd_parts+0xae>
    2ea8:	aa 24       	eor	r10, r10
    2eaa:	bb 24       	eor	r11, r11
    2eac:	a8 1a       	sub	r10, r24
    2eae:	b9 0a       	sbc	r11, r25
    2eb0:	b0 e2       	ldi	r27, 0x20	; 32
    2eb2:	ab 16       	cp	r10, r27
    2eb4:	b1 04       	cpc	r11, r1
    2eb6:	0c f0       	brlt	.+2      	; 0x2eba <_fpadd_parts+0xb8>
    2eb8:	61 c0       	rjmp	.+194    	; 0x2f7c <_fpadd_parts+0x17a>
    2eba:	18 16       	cp	r1, r24
    2ebc:	19 06       	cpc	r1, r25
    2ebe:	6c f5       	brge	.+90     	; 0x2f1a <_fpadd_parts+0x118>
    2ec0:	37 01       	movw	r6, r14
    2ec2:	48 01       	movw	r8, r16
    2ec4:	0a 2c       	mov	r0, r10
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <_fpadd_parts+0xce>
    2ec8:	96 94       	lsr	r9
    2eca:	87 94       	ror	r8
    2ecc:	77 94       	ror	r7
    2ece:	67 94       	ror	r6
    2ed0:	0a 94       	dec	r0
    2ed2:	d2 f7       	brpl	.-12     	; 0x2ec8 <_fpadd_parts+0xc6>
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e0       	ldi	r26, 0x00	; 0
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	0a 2c       	mov	r0, r10
    2ede:	04 c0       	rjmp	.+8      	; 0x2ee8 <_fpadd_parts+0xe6>
    2ee0:	88 0f       	add	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	aa 1f       	adc	r26, r26
    2ee6:	bb 1f       	adc	r27, r27
    2ee8:	0a 94       	dec	r0
    2eea:	d2 f7       	brpl	.-12     	; 0x2ee0 <_fpadd_parts+0xde>
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	a1 09       	sbc	r26, r1
    2ef0:	b1 09       	sbc	r27, r1
    2ef2:	8e 21       	and	r24, r14
    2ef4:	9f 21       	and	r25, r15
    2ef6:	a0 23       	and	r26, r16
    2ef8:	b1 23       	and	r27, r17
    2efa:	ee 24       	eor	r14, r14
    2efc:	ff 24       	eor	r15, r15
    2efe:	87 01       	movw	r16, r14
    2f00:	e3 94       	inc	r14
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	a1 05       	cpc	r26, r1
    2f06:	b1 05       	cpc	r27, r1
    2f08:	19 f4       	brne	.+6      	; 0x2f10 <_fpadd_parts+0x10e>
    2f0a:	ee 24       	eor	r14, r14
    2f0c:	ff 24       	eor	r15, r15
    2f0e:	87 01       	movw	r16, r14
    2f10:	e6 28       	or	r14, r6
    2f12:	f7 28       	or	r15, r7
    2f14:	08 29       	or	r16, r8
    2f16:	19 29       	or	r17, r9
    2f18:	3c c0       	rjmp	.+120    	; 0x2f92 <_fpadd_parts+0x190>
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	d1 f1       	breq	.+116    	; 0x2f92 <_fpadd_parts+0x190>
    2f1e:	ca 0c       	add	r12, r10
    2f20:	db 1c       	adc	r13, r11
    2f22:	39 01       	movw	r6, r18
    2f24:	4a 01       	movw	r8, r20
    2f26:	0a 2c       	mov	r0, r10
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <_fpadd_parts+0x130>
    2f2a:	96 94       	lsr	r9
    2f2c:	87 94       	ror	r8
    2f2e:	77 94       	ror	r7
    2f30:	67 94       	ror	r6
    2f32:	0a 94       	dec	r0
    2f34:	d2 f7       	brpl	.-12     	; 0x2f2a <_fpadd_parts+0x128>
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	0a 2c       	mov	r0, r10
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <_fpadd_parts+0x148>
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	aa 1f       	adc	r26, r26
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	0a 94       	dec	r0
    2f4c:	d2 f7       	brpl	.-12     	; 0x2f42 <_fpadd_parts+0x140>
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	a1 09       	sbc	r26, r1
    2f52:	b1 09       	sbc	r27, r1
    2f54:	82 23       	and	r24, r18
    2f56:	93 23       	and	r25, r19
    2f58:	a4 23       	and	r26, r20
    2f5a:	b5 23       	and	r27, r21
    2f5c:	21 e0       	ldi	r18, 0x01	; 1
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	50 e0       	ldi	r21, 0x00	; 0
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	a1 05       	cpc	r26, r1
    2f68:	b1 05       	cpc	r27, r1
    2f6a:	19 f4       	brne	.+6      	; 0x2f72 <_fpadd_parts+0x170>
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	a9 01       	movw	r20, r18
    2f72:	26 29       	or	r18, r6
    2f74:	37 29       	or	r19, r7
    2f76:	48 29       	or	r20, r8
    2f78:	59 29       	or	r21, r9
    2f7a:	0b c0       	rjmp	.+22     	; 0x2f92 <_fpadd_parts+0x190>
    2f7c:	6c 14       	cp	r6, r12
    2f7e:	7d 04       	cpc	r7, r13
    2f80:	24 f4       	brge	.+8      	; 0x2f8a <_fpadd_parts+0x188>
    2f82:	ee 24       	eor	r14, r14
    2f84:	ff 24       	eor	r15, r15
    2f86:	87 01       	movw	r16, r14
    2f88:	04 c0       	rjmp	.+8      	; 0x2f92 <_fpadd_parts+0x190>
    2f8a:	63 01       	movw	r12, r6
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	a9 01       	movw	r20, r18
    2f92:	81 81       	ldd	r24, Z+1	; 0x01
    2f94:	fb 01       	movw	r30, r22
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	89 17       	cp	r24, r25
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <_fpadd_parts+0x19c>
    2f9c:	45 c0       	rjmp	.+138    	; 0x3028 <_fpadd_parts+0x226>
    2f9e:	88 23       	and	r24, r24
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <_fpadd_parts+0x1b2>
    2fa2:	d8 01       	movw	r26, r16
    2fa4:	c7 01       	movw	r24, r14
    2fa6:	82 1b       	sub	r24, r18
    2fa8:	93 0b       	sbc	r25, r19
    2faa:	a4 0b       	sbc	r26, r20
    2fac:	b5 0b       	sbc	r27, r21
    2fae:	9c 01       	movw	r18, r24
    2fb0:	ad 01       	movw	r20, r26
    2fb2:	04 c0       	rjmp	.+8      	; 0x2fbc <_fpadd_parts+0x1ba>
    2fb4:	2e 19       	sub	r18, r14
    2fb6:	3f 09       	sbc	r19, r15
    2fb8:	40 0b       	sbc	r20, r16
    2fba:	51 0b       	sbc	r21, r17
    2fbc:	57 fd       	sbrc	r21, 7
    2fbe:	04 c0       	rjmp	.+8      	; 0x2fc8 <_fpadd_parts+0x1c6>
    2fc0:	19 82       	std	Y+1, r1	; 0x01
    2fc2:	db 82       	std	Y+3, r13	; 0x03
    2fc4:	ca 82       	std	Y+2, r12	; 0x02
    2fc6:	0b c0       	rjmp	.+22     	; 0x2fde <_fpadd_parts+0x1dc>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	db 82       	std	Y+3, r13	; 0x03
    2fce:	ca 82       	std	Y+2, r12	; 0x02
    2fd0:	50 95       	com	r21
    2fd2:	40 95       	com	r20
    2fd4:	30 95       	com	r19
    2fd6:	21 95       	neg	r18
    2fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fda:	4f 4f       	sbci	r20, 0xFF	; 255
    2fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fde:	2c 83       	std	Y+4, r18	; 0x04
    2fe0:	3d 83       	std	Y+5, r19	; 0x05
    2fe2:	4e 83       	std	Y+6, r20	; 0x06
    2fe4:	5f 83       	std	Y+7, r21	; 0x07
    2fe6:	0d c0       	rjmp	.+26     	; 0x3002 <_fpadd_parts+0x200>
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	aa 1f       	adc	r26, r26
    2fee:	bb 1f       	adc	r27, r27
    2ff0:	8c 83       	std	Y+4, r24	; 0x04
    2ff2:	9d 83       	std	Y+5, r25	; 0x05
    2ff4:	ae 83       	std	Y+6, r26	; 0x06
    2ff6:	bf 83       	std	Y+7, r27	; 0x07
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9b 83       	std	Y+3, r25	; 0x03
    3000:	8a 83       	std	Y+2, r24	; 0x02
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	9d 81       	ldd	r25, Y+5	; 0x05
    3006:	ae 81       	ldd	r26, Y+6	; 0x06
    3008:	bf 81       	ldd	r27, Y+7	; 0x07
    300a:	9c 01       	movw	r18, r24
    300c:	ad 01       	movw	r20, r26
    300e:	21 50       	subi	r18, 0x01	; 1
    3010:	30 40       	sbci	r19, 0x00	; 0
    3012:	40 40       	sbci	r20, 0x00	; 0
    3014:	50 40       	sbci	r21, 0x00	; 0
    3016:	2f 3f       	cpi	r18, 0xFF	; 255
    3018:	ef ef       	ldi	r30, 0xFF	; 255
    301a:	3e 07       	cpc	r19, r30
    301c:	ef ef       	ldi	r30, 0xFF	; 255
    301e:	4e 07       	cpc	r20, r30
    3020:	ef e3       	ldi	r30, 0x3F	; 63
    3022:	5e 07       	cpc	r21, r30
    3024:	08 f3       	brcs	.-62     	; 0x2fe8 <_fpadd_parts+0x1e6>
    3026:	0b c0       	rjmp	.+22     	; 0x303e <_fpadd_parts+0x23c>
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	db 82       	std	Y+3, r13	; 0x03
    302c:	ca 82       	std	Y+2, r12	; 0x02
    302e:	2e 0d       	add	r18, r14
    3030:	3f 1d       	adc	r19, r15
    3032:	40 1f       	adc	r20, r16
    3034:	51 1f       	adc	r21, r17
    3036:	2c 83       	std	Y+4, r18	; 0x04
    3038:	3d 83       	std	Y+5, r19	; 0x05
    303a:	4e 83       	std	Y+6, r20	; 0x06
    303c:	5f 83       	std	Y+7, r21	; 0x07
    303e:	83 e0       	ldi	r24, 0x03	; 3
    3040:	88 83       	st	Y, r24
    3042:	2c 81       	ldd	r18, Y+4	; 0x04
    3044:	3d 81       	ldd	r19, Y+5	; 0x05
    3046:	4e 81       	ldd	r20, Y+6	; 0x06
    3048:	5f 81       	ldd	r21, Y+7	; 0x07
    304a:	57 ff       	sbrs	r21, 7
    304c:	1d c0       	rjmp	.+58     	; 0x3088 <_fpadd_parts+0x286>
    304e:	da 01       	movw	r26, r20
    3050:	c9 01       	movw	r24, r18
    3052:	81 70       	andi	r24, 0x01	; 1
    3054:	90 70       	andi	r25, 0x00	; 0
    3056:	a0 70       	andi	r26, 0x00	; 0
    3058:	b0 70       	andi	r27, 0x00	; 0
    305a:	56 95       	lsr	r21
    305c:	47 95       	ror	r20
    305e:	37 95       	ror	r19
    3060:	27 95       	ror	r18
    3062:	82 2b       	or	r24, r18
    3064:	93 2b       	or	r25, r19
    3066:	a4 2b       	or	r26, r20
    3068:	b5 2b       	or	r27, r21
    306a:	8c 83       	std	Y+4, r24	; 0x04
    306c:	9d 83       	std	Y+5, r25	; 0x05
    306e:	ae 83       	std	Y+6, r26	; 0x06
    3070:	bf 83       	std	Y+7, r27	; 0x07
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	9b 83       	std	Y+3, r25	; 0x03
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	05 c0       	rjmp	.+10     	; 0x3088 <_fpadd_parts+0x286>
    307e:	ed e0       	ldi	r30, 0x0D	; 13
    3080:	f1 e0       	ldi	r31, 0x01	; 1
    3082:	03 c0       	rjmp	.+6      	; 0x308a <_fpadd_parts+0x288>
    3084:	fb 01       	movw	r30, r22
    3086:	01 c0       	rjmp	.+2      	; 0x308a <_fpadd_parts+0x288>
    3088:	fe 01       	movw	r30, r28
    308a:	cf 01       	movw	r24, r30
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	ee e0       	ldi	r30, 0x0E	; 14
    3092:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__epilogue_restores__+0x8>

00003096 <__addsf3>:
    3096:	a0 e2       	ldi	r26, 0x20	; 32
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e1 e5       	ldi	r30, 0x51	; 81
    309c:	f8 e1       	ldi	r31, 0x18	; 24
    309e:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
    30a2:	69 83       	std	Y+1, r22	; 0x01
    30a4:	7a 83       	std	Y+2, r23	; 0x02
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	9c 83       	std	Y+4, r25	; 0x04
    30aa:	2d 83       	std	Y+5, r18	; 0x05
    30ac:	3e 83       	std	Y+6, r19	; 0x06
    30ae:	4f 83       	std	Y+7, r20	; 0x07
    30b0:	58 87       	std	Y+8, r21	; 0x08
    30b2:	89 e0       	ldi	r24, 0x09	; 9
    30b4:	e8 2e       	mov	r14, r24
    30b6:	f1 2c       	mov	r15, r1
    30b8:	ec 0e       	add	r14, r28
    30ba:	fd 1e       	adc	r15, r29
    30bc:	ce 01       	movw	r24, r28
    30be:	01 96       	adiw	r24, 0x01	; 1
    30c0:	b7 01       	movw	r22, r14
    30c2:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    30c6:	8e 01       	movw	r16, r28
    30c8:	0f 5e       	subi	r16, 0xEF	; 239
    30ca:	1f 4f       	sbci	r17, 0xFF	; 255
    30cc:	ce 01       	movw	r24, r28
    30ce:	05 96       	adiw	r24, 0x05	; 5
    30d0:	b8 01       	movw	r22, r16
    30d2:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    30d6:	c7 01       	movw	r24, r14
    30d8:	b8 01       	movw	r22, r16
    30da:	ae 01       	movw	r20, r28
    30dc:	47 5e       	subi	r20, 0xE7	; 231
    30de:	5f 4f       	sbci	r21, 0xFF	; 255
    30e0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_fpadd_parts>
    30e4:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__pack_f>
    30e8:	a0 96       	adiw	r28, 0x20	; 32
    30ea:	e6 e0       	ldi	r30, 0x06	; 6
    30ec:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

000030f0 <__subsf3>:
    30f0:	a0 e2       	ldi	r26, 0x20	; 32
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ee e7       	ldi	r30, 0x7E	; 126
    30f6:	f8 e1       	ldi	r31, 0x18	; 24
    30f8:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
    30fc:	69 83       	std	Y+1, r22	; 0x01
    30fe:	7a 83       	std	Y+2, r23	; 0x02
    3100:	8b 83       	std	Y+3, r24	; 0x03
    3102:	9c 83       	std	Y+4, r25	; 0x04
    3104:	2d 83       	std	Y+5, r18	; 0x05
    3106:	3e 83       	std	Y+6, r19	; 0x06
    3108:	4f 83       	std	Y+7, r20	; 0x07
    310a:	58 87       	std	Y+8, r21	; 0x08
    310c:	8e 01       	movw	r16, r28
    310e:	07 5f       	subi	r16, 0xF7	; 247
    3110:	1f 4f       	sbci	r17, 0xFF	; 255
    3112:	ce 01       	movw	r24, r28
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	b8 01       	movw	r22, r16
    3118:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    311c:	91 e1       	ldi	r25, 0x11	; 17
    311e:	e9 2e       	mov	r14, r25
    3120:	f1 2c       	mov	r15, r1
    3122:	ec 0e       	add	r14, r28
    3124:	fd 1e       	adc	r15, r29
    3126:	ce 01       	movw	r24, r28
    3128:	05 96       	adiw	r24, 0x05	; 5
    312a:	b7 01       	movw	r22, r14
    312c:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    3130:	8a 89       	ldd	r24, Y+18	; 0x12
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	89 27       	eor	r24, r25
    3136:	8a 8b       	std	Y+18, r24	; 0x12
    3138:	c8 01       	movw	r24, r16
    313a:	b7 01       	movw	r22, r14
    313c:	ae 01       	movw	r20, r28
    313e:	47 5e       	subi	r20, 0xE7	; 231
    3140:	5f 4f       	sbci	r21, 0xFF	; 255
    3142:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_fpadd_parts>
    3146:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__pack_f>
    314a:	a0 96       	adiw	r28, 0x20	; 32
    314c:	e6 e0       	ldi	r30, 0x06	; 6
    314e:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

00003152 <__mulsf3>:
    3152:	a0 e2       	ldi	r26, 0x20	; 32
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	ef ea       	ldi	r30, 0xAF	; 175
    3158:	f8 e1       	ldi	r31, 0x18	; 24
    315a:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__>
    315e:	69 83       	std	Y+1, r22	; 0x01
    3160:	7a 83       	std	Y+2, r23	; 0x02
    3162:	8b 83       	std	Y+3, r24	; 0x03
    3164:	9c 83       	std	Y+4, r25	; 0x04
    3166:	2d 83       	std	Y+5, r18	; 0x05
    3168:	3e 83       	std	Y+6, r19	; 0x06
    316a:	4f 83       	std	Y+7, r20	; 0x07
    316c:	58 87       	std	Y+8, r21	; 0x08
    316e:	ce 01       	movw	r24, r28
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	be 01       	movw	r22, r28
    3174:	67 5f       	subi	r22, 0xF7	; 247
    3176:	7f 4f       	sbci	r23, 0xFF	; 255
    3178:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    317c:	ce 01       	movw	r24, r28
    317e:	05 96       	adiw	r24, 0x05	; 5
    3180:	be 01       	movw	r22, r28
    3182:	6f 5e       	subi	r22, 0xEF	; 239
    3184:	7f 4f       	sbci	r23, 0xFF	; 255
    3186:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    318a:	99 85       	ldd	r25, Y+9	; 0x09
    318c:	92 30       	cpi	r25, 0x02	; 2
    318e:	78 f0       	brcs	.+30     	; 0x31ae <__mulsf3+0x5c>
    3190:	89 89       	ldd	r24, Y+17	; 0x11
    3192:	82 30       	cpi	r24, 0x02	; 2
    3194:	c0 f0       	brcs	.+48     	; 0x31c6 <__mulsf3+0x74>
    3196:	94 30       	cpi	r25, 0x04	; 4
    3198:	19 f4       	brne	.+6      	; 0x31a0 <__mulsf3+0x4e>
    319a:	82 30       	cpi	r24, 0x02	; 2
    319c:	41 f4       	brne	.+16     	; 0x31ae <__mulsf3+0x5c>
    319e:	cb c0       	rjmp	.+406    	; 0x3336 <__mulsf3+0x1e4>
    31a0:	84 30       	cpi	r24, 0x04	; 4
    31a2:	19 f4       	brne	.+6      	; 0x31aa <__mulsf3+0x58>
    31a4:	92 30       	cpi	r25, 0x02	; 2
    31a6:	79 f4       	brne	.+30     	; 0x31c6 <__mulsf3+0x74>
    31a8:	c6 c0       	rjmp	.+396    	; 0x3336 <__mulsf3+0x1e4>
    31aa:	92 30       	cpi	r25, 0x02	; 2
    31ac:	51 f4       	brne	.+20     	; 0x31c2 <__mulsf3+0x70>
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    31b2:	9a 89       	ldd	r25, Y+18	; 0x12
    31b4:	29 17       	cp	r18, r25
    31b6:	09 f4       	brne	.+2      	; 0x31ba <__mulsf3+0x68>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	8a 87       	std	Y+10, r24	; 0x0a
    31bc:	ce 01       	movw	r24, r28
    31be:	09 96       	adiw	r24, 0x09	; 9
    31c0:	bc c0       	rjmp	.+376    	; 0x333a <__mulsf3+0x1e8>
    31c2:	82 30       	cpi	r24, 0x02	; 2
    31c4:	51 f4       	brne	.+20     	; 0x31da <__mulsf3+0x88>
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    31ca:	9a 89       	ldd	r25, Y+18	; 0x12
    31cc:	29 17       	cp	r18, r25
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <__mulsf3+0x80>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	8a 8b       	std	Y+18, r24	; 0x12
    31d4:	ce 01       	movw	r24, r28
    31d6:	41 96       	adiw	r24, 0x11	; 17
    31d8:	b0 c0       	rjmp	.+352    	; 0x333a <__mulsf3+0x1e8>
    31da:	6d 84       	ldd	r6, Y+13	; 0x0d
    31dc:	7e 84       	ldd	r7, Y+14	; 0x0e
    31de:	8f 84       	ldd	r8, Y+15	; 0x0f
    31e0:	98 88       	ldd	r9, Y+16	; 0x10
    31e2:	ed 88       	ldd	r14, Y+21	; 0x15
    31e4:	fe 88       	ldd	r15, Y+22	; 0x16
    31e6:	0f 89       	ldd	r16, Y+23	; 0x17
    31e8:	18 8d       	ldd	r17, Y+24	; 0x18
    31ea:	e0 e2       	ldi	r30, 0x20	; 32
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	dc 01       	movw	r26, r24
    31f4:	aa 24       	eor	r10, r10
    31f6:	bb 24       	eor	r11, r11
    31f8:	65 01       	movw	r12, r10
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	a9 01       	movw	r20, r18
    3200:	b3 01       	movw	r22, r6
    3202:	61 70       	andi	r22, 0x01	; 1
    3204:	70 70       	andi	r23, 0x00	; 0
    3206:	61 15       	cp	r22, r1
    3208:	71 05       	cpc	r23, r1
    320a:	d1 f0       	breq	.+52     	; 0x3240 <__mulsf3+0xee>
    320c:	2e 0d       	add	r18, r14
    320e:	3f 1d       	adc	r19, r15
    3210:	40 1f       	adc	r20, r16
    3212:	51 1f       	adc	r21, r17
    3214:	15 01       	movw	r2, r10
    3216:	26 01       	movw	r4, r12
    3218:	28 0e       	add	r2, r24
    321a:	39 1e       	adc	r3, r25
    321c:	4a 1e       	adc	r4, r26
    321e:	5b 1e       	adc	r5, r27
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	a0 e0       	ldi	r26, 0x00	; 0
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	2e 15       	cp	r18, r14
    322a:	3f 05       	cpc	r19, r15
    322c:	40 07       	cpc	r20, r16
    322e:	51 07       	cpc	r21, r17
    3230:	18 f0       	brcs	.+6      	; 0x3238 <__mulsf3+0xe6>
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	dc 01       	movw	r26, r24
    3238:	82 0d       	add	r24, r2
    323a:	93 1d       	adc	r25, r3
    323c:	a4 1d       	adc	r26, r4
    323e:	b5 1d       	adc	r27, r5
    3240:	aa 0c       	add	r10, r10
    3242:	bb 1c       	adc	r11, r11
    3244:	cc 1c       	adc	r12, r12
    3246:	dd 1c       	adc	r13, r13
    3248:	17 ff       	sbrs	r17, 7
    324a:	09 c0       	rjmp	.+18     	; 0x325e <__mulsf3+0x10c>
    324c:	61 e0       	ldi	r22, 0x01	; 1
    324e:	26 2e       	mov	r2, r22
    3250:	31 2c       	mov	r3, r1
    3252:	41 2c       	mov	r4, r1
    3254:	51 2c       	mov	r5, r1
    3256:	a2 28       	or	r10, r2
    3258:	b3 28       	or	r11, r3
    325a:	c4 28       	or	r12, r4
    325c:	d5 28       	or	r13, r5
    325e:	31 97       	sbiw	r30, 0x01	; 1
    3260:	49 f0       	breq	.+18     	; 0x3274 <__mulsf3+0x122>
    3262:	ee 0c       	add	r14, r14
    3264:	ff 1c       	adc	r15, r15
    3266:	00 1f       	adc	r16, r16
    3268:	11 1f       	adc	r17, r17
    326a:	96 94       	lsr	r9
    326c:	87 94       	ror	r8
    326e:	77 94       	ror	r7
    3270:	67 94       	ror	r6
    3272:	c6 cf       	rjmp	.-116    	; 0x3200 <__mulsf3+0xae>
    3274:	6b 89       	ldd	r22, Y+19	; 0x13
    3276:	7c 89       	ldd	r23, Y+20	; 0x14
    3278:	eb 85       	ldd	r30, Y+11	; 0x0b
    327a:	fc 85       	ldd	r31, Y+12	; 0x0c
    327c:	6e 0f       	add	r22, r30
    327e:	7f 1f       	adc	r23, r31
    3280:	6e 5f       	subi	r22, 0xFE	; 254
    3282:	7f 4f       	sbci	r23, 0xFF	; 255
    3284:	7c 8f       	std	Y+28, r23	; 0x1c
    3286:	6b 8f       	std	Y+27, r22	; 0x1b
    3288:	61 e0       	ldi	r22, 0x01	; 1
    328a:	ea 85       	ldd	r30, Y+10	; 0x0a
    328c:	7a 89       	ldd	r23, Y+18	; 0x12
    328e:	e7 17       	cp	r30, r23
    3290:	09 f4       	brne	.+2      	; 0x3294 <__mulsf3+0x142>
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	6a 8f       	std	Y+26, r22	; 0x1a
    3296:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3298:	7c 8d       	ldd	r23, Y+28	; 0x1c
    329a:	10 c0       	rjmp	.+32     	; 0x32bc <__mulsf3+0x16a>
    329c:	fc 01       	movw	r30, r24
    329e:	e1 70       	andi	r30, 0x01	; 1
    32a0:	f0 70       	andi	r31, 0x00	; 0
    32a2:	30 97       	sbiw	r30, 0x00	; 0
    32a4:	29 f0       	breq	.+10     	; 0x32b0 <__mulsf3+0x15e>
    32a6:	56 95       	lsr	r21
    32a8:	47 95       	ror	r20
    32aa:	37 95       	ror	r19
    32ac:	27 95       	ror	r18
    32ae:	50 68       	ori	r21, 0x80	; 128
    32b0:	b6 95       	lsr	r27
    32b2:	a7 95       	ror	r26
    32b4:	97 95       	ror	r25
    32b6:	87 95       	ror	r24
    32b8:	6f 5f       	subi	r22, 0xFF	; 255
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	b7 fd       	sbrc	r27, 7
    32be:	ee cf       	rjmp	.-36     	; 0x329c <__mulsf3+0x14a>
    32c0:	0c c0       	rjmp	.+24     	; 0x32da <__mulsf3+0x188>
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	aa 1f       	adc	r26, r26
    32c8:	bb 1f       	adc	r27, r27
    32ca:	57 fd       	sbrc	r21, 7
    32cc:	81 60       	ori	r24, 0x01	; 1
    32ce:	22 0f       	add	r18, r18
    32d0:	33 1f       	adc	r19, r19
    32d2:	44 1f       	adc	r20, r20
    32d4:	55 1f       	adc	r21, r21
    32d6:	61 50       	subi	r22, 0x01	; 1
    32d8:	70 40       	sbci	r23, 0x00	; 0
    32da:	80 30       	cpi	r24, 0x00	; 0
    32dc:	e0 e0       	ldi	r30, 0x00	; 0
    32de:	9e 07       	cpc	r25, r30
    32e0:	e0 e0       	ldi	r30, 0x00	; 0
    32e2:	ae 07       	cpc	r26, r30
    32e4:	e0 e4       	ldi	r30, 0x40	; 64
    32e6:	be 07       	cpc	r27, r30
    32e8:	60 f3       	brcs	.-40     	; 0x32c2 <__mulsf3+0x170>
    32ea:	6b 8f       	std	Y+27, r22	; 0x1b
    32ec:	7c 8f       	std	Y+28, r23	; 0x1c
    32ee:	6f e7       	ldi	r22, 0x7F	; 127
    32f0:	e6 2e       	mov	r14, r22
    32f2:	f1 2c       	mov	r15, r1
    32f4:	01 2d       	mov	r16, r1
    32f6:	11 2d       	mov	r17, r1
    32f8:	e8 22       	and	r14, r24
    32fa:	f9 22       	and	r15, r25
    32fc:	0a 23       	and	r16, r26
    32fe:	1b 23       	and	r17, r27
    3300:	60 e4       	ldi	r22, 0x40	; 64
    3302:	e6 16       	cp	r14, r22
    3304:	f1 04       	cpc	r15, r1
    3306:	01 05       	cpc	r16, r1
    3308:	11 05       	cpc	r17, r1
    330a:	61 f4       	brne	.+24     	; 0x3324 <__mulsf3+0x1d2>
    330c:	87 fd       	sbrc	r24, 7
    330e:	0a c0       	rjmp	.+20     	; 0x3324 <__mulsf3+0x1d2>
    3310:	21 15       	cp	r18, r1
    3312:	31 05       	cpc	r19, r1
    3314:	41 05       	cpc	r20, r1
    3316:	51 05       	cpc	r21, r1
    3318:	29 f0       	breq	.+10     	; 0x3324 <__mulsf3+0x1d2>
    331a:	80 5c       	subi	r24, 0xC0	; 192
    331c:	9f 4f       	sbci	r25, 0xFF	; 255
    331e:	af 4f       	sbci	r26, 0xFF	; 255
    3320:	bf 4f       	sbci	r27, 0xFF	; 255
    3322:	80 78       	andi	r24, 0x80	; 128
    3324:	8d 8f       	std	Y+29, r24	; 0x1d
    3326:	9e 8f       	std	Y+30, r25	; 0x1e
    3328:	af 8f       	std	Y+31, r26	; 0x1f
    332a:	b8 a3       	std	Y+32, r27	; 0x20
    332c:	83 e0       	ldi	r24, 0x03	; 3
    332e:	89 8f       	std	Y+25, r24	; 0x19
    3330:	ce 01       	movw	r24, r28
    3332:	49 96       	adiw	r24, 0x19	; 25
    3334:	02 c0       	rjmp	.+4      	; 0x333a <__mulsf3+0x1e8>
    3336:	8d e0       	ldi	r24, 0x0D	; 13
    3338:	91 e0       	ldi	r25, 0x01	; 1
    333a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__pack_f>
    333e:	a0 96       	adiw	r28, 0x20	; 32
    3340:	e2 e1       	ldi	r30, 0x12	; 18
    3342:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__>

00003346 <__divsf3>:
    3346:	a8 e1       	ldi	r26, 0x18	; 24
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e9 ea       	ldi	r30, 0xA9	; 169
    334c:	f9 e1       	ldi	r31, 0x19	; 25
    334e:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__prologue_saves__+0x10>
    3352:	69 83       	std	Y+1, r22	; 0x01
    3354:	7a 83       	std	Y+2, r23	; 0x02
    3356:	8b 83       	std	Y+3, r24	; 0x03
    3358:	9c 83       	std	Y+4, r25	; 0x04
    335a:	2d 83       	std	Y+5, r18	; 0x05
    335c:	3e 83       	std	Y+6, r19	; 0x06
    335e:	4f 83       	std	Y+7, r20	; 0x07
    3360:	58 87       	std	Y+8, r21	; 0x08
    3362:	8e 01       	movw	r16, r28
    3364:	07 5f       	subi	r16, 0xF7	; 247
    3366:	1f 4f       	sbci	r17, 0xFF	; 255
    3368:	ce 01       	movw	r24, r28
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	b8 01       	movw	r22, r16
    336e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    3372:	81 e1       	ldi	r24, 0x11	; 17
    3374:	e8 2e       	mov	r14, r24
    3376:	f1 2c       	mov	r15, r1
    3378:	ec 0e       	add	r14, r28
    337a:	fd 1e       	adc	r15, r29
    337c:	ce 01       	movw	r24, r28
    337e:	05 96       	adiw	r24, 0x05	; 5
    3380:	b7 01       	movw	r22, r14
    3382:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    3386:	99 85       	ldd	r25, Y+9	; 0x09
    3388:	92 30       	cpi	r25, 0x02	; 2
    338a:	08 f4       	brcc	.+2      	; 0x338e <__divsf3+0x48>
    338c:	83 c0       	rjmp	.+262    	; 0x3494 <__divsf3+0x14e>
    338e:	89 89       	ldd	r24, Y+17	; 0x11
    3390:	82 30       	cpi	r24, 0x02	; 2
    3392:	08 f4       	brcc	.+2      	; 0x3396 <__divsf3+0x50>
    3394:	7b c0       	rjmp	.+246    	; 0x348c <__divsf3+0x146>
    3396:	2a 85       	ldd	r18, Y+10	; 0x0a
    3398:	3a 89       	ldd	r19, Y+18	; 0x12
    339a:	23 27       	eor	r18, r19
    339c:	2a 87       	std	Y+10, r18	; 0x0a
    339e:	94 30       	cpi	r25, 0x04	; 4
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <__divsf3+0x60>
    33a2:	92 30       	cpi	r25, 0x02	; 2
    33a4:	21 f4       	brne	.+8      	; 0x33ae <__divsf3+0x68>
    33a6:	98 17       	cp	r25, r24
    33a8:	09 f0       	breq	.+2      	; 0x33ac <__divsf3+0x66>
    33aa:	6c c0       	rjmp	.+216    	; 0x3484 <__divsf3+0x13e>
    33ac:	71 c0       	rjmp	.+226    	; 0x3490 <__divsf3+0x14a>
    33ae:	84 30       	cpi	r24, 0x04	; 4
    33b0:	39 f4       	brne	.+14     	; 0x33c0 <__divsf3+0x7a>
    33b2:	1d 86       	std	Y+13, r1	; 0x0d
    33b4:	1e 86       	std	Y+14, r1	; 0x0e
    33b6:	1f 86       	std	Y+15, r1	; 0x0f
    33b8:	18 8a       	std	Y+16, r1	; 0x10
    33ba:	1c 86       	std	Y+12, r1	; 0x0c
    33bc:	1b 86       	std	Y+11, r1	; 0x0b
    33be:	6a c0       	rjmp	.+212    	; 0x3494 <__divsf3+0x14e>
    33c0:	82 30       	cpi	r24, 0x02	; 2
    33c2:	19 f4       	brne	.+6      	; 0x33ca <__divsf3+0x84>
    33c4:	84 e0       	ldi	r24, 0x04	; 4
    33c6:	89 87       	std	Y+9, r24	; 0x09
    33c8:	65 c0       	rjmp	.+202    	; 0x3494 <__divsf3+0x14e>
    33ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    33cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ce:	2b 89       	ldd	r18, Y+19	; 0x13
    33d0:	3c 89       	ldd	r19, Y+20	; 0x14
    33d2:	82 1b       	sub	r24, r18
    33d4:	93 0b       	sbc	r25, r19
    33d6:	9c 87       	std	Y+12, r25	; 0x0c
    33d8:	8b 87       	std	Y+11, r24	; 0x0b
    33da:	2d 85       	ldd	r18, Y+13	; 0x0d
    33dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    33de:	4f 85       	ldd	r20, Y+15	; 0x0f
    33e0:	58 89       	ldd	r21, Y+16	; 0x10
    33e2:	ed 88       	ldd	r14, Y+21	; 0x15
    33e4:	fe 88       	ldd	r15, Y+22	; 0x16
    33e6:	0f 89       	ldd	r16, Y+23	; 0x17
    33e8:	18 8d       	ldd	r17, Y+24	; 0x18
    33ea:	2e 15       	cp	r18, r14
    33ec:	3f 05       	cpc	r19, r15
    33ee:	40 07       	cpc	r20, r16
    33f0:	51 07       	cpc	r21, r17
    33f2:	38 f4       	brcc	.+14     	; 0x3402 <__divsf3+0xbc>
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	44 1f       	adc	r20, r20
    33fa:	55 1f       	adc	r21, r21
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	9c 87       	std	Y+12, r25	; 0x0c
    3400:	8b 87       	std	Y+11, r24	; 0x0b
    3402:	6f e1       	ldi	r22, 0x1F	; 31
    3404:	70 e0       	ldi	r23, 0x00	; 0
    3406:	a1 2c       	mov	r10, r1
    3408:	b1 2c       	mov	r11, r1
    340a:	c1 2c       	mov	r12, r1
    340c:	a0 e4       	ldi	r26, 0x40	; 64
    340e:	da 2e       	mov	r13, r26
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	dc 01       	movw	r26, r24
    3416:	2e 15       	cp	r18, r14
    3418:	3f 05       	cpc	r19, r15
    341a:	40 07       	cpc	r20, r16
    341c:	51 07       	cpc	r21, r17
    341e:	40 f0       	brcs	.+16     	; 0x3430 <__divsf3+0xea>
    3420:	8a 29       	or	r24, r10
    3422:	9b 29       	or	r25, r11
    3424:	ac 29       	or	r26, r12
    3426:	bd 29       	or	r27, r13
    3428:	2e 19       	sub	r18, r14
    342a:	3f 09       	sbc	r19, r15
    342c:	40 0b       	sbc	r20, r16
    342e:	51 0b       	sbc	r21, r17
    3430:	d6 94       	lsr	r13
    3432:	c7 94       	ror	r12
    3434:	b7 94       	ror	r11
    3436:	a7 94       	ror	r10
    3438:	22 0f       	add	r18, r18
    343a:	33 1f       	adc	r19, r19
    343c:	44 1f       	adc	r20, r20
    343e:	55 1f       	adc	r21, r21
    3440:	61 50       	subi	r22, 0x01	; 1
    3442:	70 40       	sbci	r23, 0x00	; 0
    3444:	41 f7       	brne	.-48     	; 0x3416 <__divsf3+0xd0>
    3446:	6f e7       	ldi	r22, 0x7F	; 127
    3448:	e6 2e       	mov	r14, r22
    344a:	f1 2c       	mov	r15, r1
    344c:	01 2d       	mov	r16, r1
    344e:	11 2d       	mov	r17, r1
    3450:	e8 22       	and	r14, r24
    3452:	f9 22       	and	r15, r25
    3454:	0a 23       	and	r16, r26
    3456:	1b 23       	and	r17, r27
    3458:	60 e4       	ldi	r22, 0x40	; 64
    345a:	e6 16       	cp	r14, r22
    345c:	f1 04       	cpc	r15, r1
    345e:	01 05       	cpc	r16, r1
    3460:	11 05       	cpc	r17, r1
    3462:	61 f4       	brne	.+24     	; 0x347c <__divsf3+0x136>
    3464:	87 fd       	sbrc	r24, 7
    3466:	0a c0       	rjmp	.+20     	; 0x347c <__divsf3+0x136>
    3468:	21 15       	cp	r18, r1
    346a:	31 05       	cpc	r19, r1
    346c:	41 05       	cpc	r20, r1
    346e:	51 05       	cpc	r21, r1
    3470:	29 f0       	breq	.+10     	; 0x347c <__divsf3+0x136>
    3472:	80 5c       	subi	r24, 0xC0	; 192
    3474:	9f 4f       	sbci	r25, 0xFF	; 255
    3476:	af 4f       	sbci	r26, 0xFF	; 255
    3478:	bf 4f       	sbci	r27, 0xFF	; 255
    347a:	80 78       	andi	r24, 0x80	; 128
    347c:	8d 87       	std	Y+13, r24	; 0x0d
    347e:	9e 87       	std	Y+14, r25	; 0x0e
    3480:	af 87       	std	Y+15, r26	; 0x0f
    3482:	b8 8b       	std	Y+16, r27	; 0x10
    3484:	8e 01       	movw	r16, r28
    3486:	07 5f       	subi	r16, 0xF7	; 247
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <__divsf3+0x14e>
    348c:	87 01       	movw	r16, r14
    348e:	02 c0       	rjmp	.+4      	; 0x3494 <__divsf3+0x14e>
    3490:	0d e0       	ldi	r16, 0x0D	; 13
    3492:	11 e0       	ldi	r17, 0x01	; 1
    3494:	c8 01       	movw	r24, r16
    3496:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__pack_f>
    349a:	68 96       	adiw	r28, 0x18	; 24
    349c:	ea e0       	ldi	r30, 0x0A	; 10
    349e:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__epilogue_restores__+0x10>

000034a2 <__gtsf2>:
    34a2:	a8 e1       	ldi	r26, 0x18	; 24
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e7 e5       	ldi	r30, 0x57	; 87
    34a8:	fa e1       	ldi	r31, 0x1A	; 26
    34aa:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
    34ae:	69 83       	std	Y+1, r22	; 0x01
    34b0:	7a 83       	std	Y+2, r23	; 0x02
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	9c 83       	std	Y+4, r25	; 0x04
    34b6:	2d 83       	std	Y+5, r18	; 0x05
    34b8:	3e 83       	std	Y+6, r19	; 0x06
    34ba:	4f 83       	std	Y+7, r20	; 0x07
    34bc:	58 87       	std	Y+8, r21	; 0x08
    34be:	8e 01       	movw	r16, r28
    34c0:	07 5f       	subi	r16, 0xF7	; 247
    34c2:	1f 4f       	sbci	r17, 0xFF	; 255
    34c4:	ce 01       	movw	r24, r28
    34c6:	01 96       	adiw	r24, 0x01	; 1
    34c8:	b8 01       	movw	r22, r16
    34ca:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    34ce:	81 e1       	ldi	r24, 0x11	; 17
    34d0:	e8 2e       	mov	r14, r24
    34d2:	f1 2c       	mov	r15, r1
    34d4:	ec 0e       	add	r14, r28
    34d6:	fd 1e       	adc	r15, r29
    34d8:	ce 01       	movw	r24, r28
    34da:	05 96       	adiw	r24, 0x05	; 5
    34dc:	b7 01       	movw	r22, r14
    34de:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    34e2:	89 85       	ldd	r24, Y+9	; 0x09
    34e4:	82 30       	cpi	r24, 0x02	; 2
    34e6:	40 f0       	brcs	.+16     	; 0x34f8 <__gtsf2+0x56>
    34e8:	89 89       	ldd	r24, Y+17	; 0x11
    34ea:	82 30       	cpi	r24, 0x02	; 2
    34ec:	28 f0       	brcs	.+10     	; 0x34f8 <__gtsf2+0x56>
    34ee:	c8 01       	movw	r24, r16
    34f0:	b7 01       	movw	r22, r14
    34f2:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__fpcmp_parts_f>
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <__gtsf2+0x58>
    34f8:	8f ef       	ldi	r24, 0xFF	; 255
    34fa:	68 96       	adiw	r28, 0x18	; 24
    34fc:	e6 e0       	ldi	r30, 0x06	; 6
    34fe:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

00003502 <__gesf2>:
    3502:	a8 e1       	ldi	r26, 0x18	; 24
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e7 e8       	ldi	r30, 0x87	; 135
    3508:	fa e1       	ldi	r31, 0x1A	; 26
    350a:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
    350e:	69 83       	std	Y+1, r22	; 0x01
    3510:	7a 83       	std	Y+2, r23	; 0x02
    3512:	8b 83       	std	Y+3, r24	; 0x03
    3514:	9c 83       	std	Y+4, r25	; 0x04
    3516:	2d 83       	std	Y+5, r18	; 0x05
    3518:	3e 83       	std	Y+6, r19	; 0x06
    351a:	4f 83       	std	Y+7, r20	; 0x07
    351c:	58 87       	std	Y+8, r21	; 0x08
    351e:	8e 01       	movw	r16, r28
    3520:	07 5f       	subi	r16, 0xF7	; 247
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	ce 01       	movw	r24, r28
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	b8 01       	movw	r22, r16
    352a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    352e:	81 e1       	ldi	r24, 0x11	; 17
    3530:	e8 2e       	mov	r14, r24
    3532:	f1 2c       	mov	r15, r1
    3534:	ec 0e       	add	r14, r28
    3536:	fd 1e       	adc	r15, r29
    3538:	ce 01       	movw	r24, r28
    353a:	05 96       	adiw	r24, 0x05	; 5
    353c:	b7 01       	movw	r22, r14
    353e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	82 30       	cpi	r24, 0x02	; 2
    3546:	40 f0       	brcs	.+16     	; 0x3558 <__gesf2+0x56>
    3548:	89 89       	ldd	r24, Y+17	; 0x11
    354a:	82 30       	cpi	r24, 0x02	; 2
    354c:	28 f0       	brcs	.+10     	; 0x3558 <__gesf2+0x56>
    354e:	c8 01       	movw	r24, r16
    3550:	b7 01       	movw	r22, r14
    3552:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__fpcmp_parts_f>
    3556:	01 c0       	rjmp	.+2      	; 0x355a <__gesf2+0x58>
    3558:	8f ef       	ldi	r24, 0xFF	; 255
    355a:	68 96       	adiw	r28, 0x18	; 24
    355c:	e6 e0       	ldi	r30, 0x06	; 6
    355e:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

00003562 <__ltsf2>:
    3562:	a8 e1       	ldi	r26, 0x18	; 24
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	e7 eb       	ldi	r30, 0xB7	; 183
    3568:	fa e1       	ldi	r31, 0x1A	; 26
    356a:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
    356e:	69 83       	std	Y+1, r22	; 0x01
    3570:	7a 83       	std	Y+2, r23	; 0x02
    3572:	8b 83       	std	Y+3, r24	; 0x03
    3574:	9c 83       	std	Y+4, r25	; 0x04
    3576:	2d 83       	std	Y+5, r18	; 0x05
    3578:	3e 83       	std	Y+6, r19	; 0x06
    357a:	4f 83       	std	Y+7, r20	; 0x07
    357c:	58 87       	std	Y+8, r21	; 0x08
    357e:	8e 01       	movw	r16, r28
    3580:	07 5f       	subi	r16, 0xF7	; 247
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	ce 01       	movw	r24, r28
    3586:	01 96       	adiw	r24, 0x01	; 1
    3588:	b8 01       	movw	r22, r16
    358a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    358e:	81 e1       	ldi	r24, 0x11	; 17
    3590:	e8 2e       	mov	r14, r24
    3592:	f1 2c       	mov	r15, r1
    3594:	ec 0e       	add	r14, r28
    3596:	fd 1e       	adc	r15, r29
    3598:	ce 01       	movw	r24, r28
    359a:	05 96       	adiw	r24, 0x05	; 5
    359c:	b7 01       	movw	r22, r14
    359e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    35a2:	89 85       	ldd	r24, Y+9	; 0x09
    35a4:	82 30       	cpi	r24, 0x02	; 2
    35a6:	40 f0       	brcs	.+16     	; 0x35b8 <__ltsf2+0x56>
    35a8:	89 89       	ldd	r24, Y+17	; 0x11
    35aa:	82 30       	cpi	r24, 0x02	; 2
    35ac:	28 f0       	brcs	.+10     	; 0x35b8 <__ltsf2+0x56>
    35ae:	c8 01       	movw	r24, r16
    35b0:	b7 01       	movw	r22, r14
    35b2:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__fpcmp_parts_f>
    35b6:	01 c0       	rjmp	.+2      	; 0x35ba <__ltsf2+0x58>
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	68 96       	adiw	r28, 0x18	; 24
    35bc:	e6 e0       	ldi	r30, 0x06	; 6
    35be:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

000035c2 <__floatsisf>:
    35c2:	a8 e0       	ldi	r26, 0x08	; 8
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e7 ee       	ldi	r30, 0xE7	; 231
    35c8:	fa e1       	ldi	r31, 0x1A	; 26
    35ca:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
    35ce:	7b 01       	movw	r14, r22
    35d0:	8c 01       	movw	r16, r24
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	89 83       	std	Y+1, r24	; 0x01
    35d6:	d8 01       	movw	r26, r16
    35d8:	c7 01       	movw	r24, r14
    35da:	88 27       	eor	r24, r24
    35dc:	b7 fd       	sbrc	r27, 7
    35de:	83 95       	inc	r24
    35e0:	99 27       	eor	r25, r25
    35e2:	aa 27       	eor	r26, r26
    35e4:	bb 27       	eor	r27, r27
    35e6:	28 2f       	mov	r18, r24
    35e8:	8a 83       	std	Y+2, r24	; 0x02
    35ea:	e1 14       	cp	r14, r1
    35ec:	f1 04       	cpc	r15, r1
    35ee:	01 05       	cpc	r16, r1
    35f0:	11 05       	cpc	r17, r1
    35f2:	19 f4       	brne	.+6      	; 0x35fa <__floatsisf+0x38>
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	89 83       	std	Y+1, r24	; 0x01
    35f8:	37 c0       	rjmp	.+110    	; 0x3668 <__floatsisf+0xa6>
    35fa:	8e e1       	ldi	r24, 0x1E	; 30
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9c 83       	std	Y+4, r25	; 0x04
    3600:	8b 83       	std	Y+3, r24	; 0x03
    3602:	22 23       	and	r18, r18
    3604:	89 f0       	breq	.+34     	; 0x3628 <__floatsisf+0x66>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	e8 16       	cp	r14, r24
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	f8 06       	cpc	r15, r24
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	08 07       	cpc	r16, r24
    3612:	80 e8       	ldi	r24, 0x80	; 128
    3614:	18 07       	cpc	r17, r24
    3616:	69 f1       	breq	.+90     	; 0x3672 <__floatsisf+0xb0>
    3618:	10 95       	com	r17
    361a:	00 95       	com	r16
    361c:	f0 94       	com	r15
    361e:	e0 94       	com	r14
    3620:	e1 1c       	adc	r14, r1
    3622:	f1 1c       	adc	r15, r1
    3624:	01 1d       	adc	r16, r1
    3626:	11 1d       	adc	r17, r1
    3628:	ed 82       	std	Y+5, r14	; 0x05
    362a:	fe 82       	std	Y+6, r15	; 0x06
    362c:	0f 83       	std	Y+7, r16	; 0x07
    362e:	18 87       	std	Y+8, r17	; 0x08
    3630:	c8 01       	movw	r24, r16
    3632:	b7 01       	movw	r22, r14
    3634:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__clzsi2>
    3638:	9c 01       	movw	r18, r24
    363a:	21 50       	subi	r18, 0x01	; 1
    363c:	30 40       	sbci	r19, 0x00	; 0
    363e:	12 16       	cp	r1, r18
    3640:	13 06       	cpc	r1, r19
    3642:	94 f4       	brge	.+36     	; 0x3668 <__floatsisf+0xa6>
    3644:	02 2e       	mov	r0, r18
    3646:	04 c0       	rjmp	.+8      	; 0x3650 <__floatsisf+0x8e>
    3648:	ee 0c       	add	r14, r14
    364a:	ff 1c       	adc	r15, r15
    364c:	00 1f       	adc	r16, r16
    364e:	11 1f       	adc	r17, r17
    3650:	0a 94       	dec	r0
    3652:	d2 f7       	brpl	.-12     	; 0x3648 <__floatsisf+0x86>
    3654:	ed 82       	std	Y+5, r14	; 0x05
    3656:	fe 82       	std	Y+6, r15	; 0x06
    3658:	0f 83       	std	Y+7, r16	; 0x07
    365a:	18 87       	std	Y+8, r17	; 0x08
    365c:	8e e1       	ldi	r24, 0x1E	; 30
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	82 1b       	sub	r24, r18
    3662:	93 0b       	sbc	r25, r19
    3664:	9c 83       	std	Y+4, r25	; 0x04
    3666:	8b 83       	std	Y+3, r24	; 0x03
    3668:	ce 01       	movw	r24, r28
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__pack_f>
    3670:	04 c0       	rjmp	.+8      	; 0x367a <__floatsisf+0xb8>
    3672:	60 e0       	ldi	r22, 0x00	; 0
    3674:	70 e0       	ldi	r23, 0x00	; 0
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	9f ec       	ldi	r25, 0xCF	; 207
    367a:	28 96       	adiw	r28, 0x08	; 8
    367c:	e6 e0       	ldi	r30, 0x06	; 6
    367e:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

00003682 <__fixsfsi>:
    3682:	ac e0       	ldi	r26, 0x0C	; 12
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	e7 e4       	ldi	r30, 0x47	; 71
    3688:	fb e1       	ldi	r31, 0x1B	; 27
    368a:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__+0x20>
    368e:	69 83       	std	Y+1, r22	; 0x01
    3690:	7a 83       	std	Y+2, r23	; 0x02
    3692:	8b 83       	std	Y+3, r24	; 0x03
    3694:	9c 83       	std	Y+4, r25	; 0x04
    3696:	ce 01       	movw	r24, r28
    3698:	01 96       	adiw	r24, 0x01	; 1
    369a:	be 01       	movw	r22, r28
    369c:	6b 5f       	subi	r22, 0xFB	; 251
    369e:	7f 4f       	sbci	r23, 0xFF	; 255
    36a0:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__unpack_f>
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	82 30       	cpi	r24, 0x02	; 2
    36a8:	81 f1       	breq	.+96     	; 0x370a <__fixsfsi+0x88>
    36aa:	82 30       	cpi	r24, 0x02	; 2
    36ac:	70 f1       	brcs	.+92     	; 0x370a <__fixsfsi+0x88>
    36ae:	84 30       	cpi	r24, 0x04	; 4
    36b0:	21 f4       	brne	.+8      	; 0x36ba <__fixsfsi+0x38>
    36b2:	8e 81       	ldd	r24, Y+6	; 0x06
    36b4:	88 23       	and	r24, r24
    36b6:	69 f1       	breq	.+90     	; 0x3712 <__fixsfsi+0x90>
    36b8:	0a c0       	rjmp	.+20     	; 0x36ce <__fixsfsi+0x4c>
    36ba:	2f 81       	ldd	r18, Y+7	; 0x07
    36bc:	38 85       	ldd	r19, Y+8	; 0x08
    36be:	37 fd       	sbrc	r19, 7
    36c0:	24 c0       	rjmp	.+72     	; 0x370a <__fixsfsi+0x88>
    36c2:	6e 81       	ldd	r22, Y+6	; 0x06
    36c4:	2f 31       	cpi	r18, 0x1F	; 31
    36c6:	31 05       	cpc	r19, r1
    36c8:	3c f0       	brlt	.+14     	; 0x36d8 <__fixsfsi+0x56>
    36ca:	66 23       	and	r22, r22
    36cc:	11 f1       	breq	.+68     	; 0x3712 <__fixsfsi+0x90>
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	50 e8       	ldi	r21, 0x80	; 128
    36d6:	21 c0       	rjmp	.+66     	; 0x371a <__fixsfsi+0x98>
    36d8:	8e e1       	ldi	r24, 0x1E	; 30
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	82 1b       	sub	r24, r18
    36de:	93 0b       	sbc	r25, r19
    36e0:	29 85       	ldd	r18, Y+9	; 0x09
    36e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    36e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    36e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    36e8:	04 c0       	rjmp	.+8      	; 0x36f2 <__fixsfsi+0x70>
    36ea:	56 95       	lsr	r21
    36ec:	47 95       	ror	r20
    36ee:	37 95       	ror	r19
    36f0:	27 95       	ror	r18
    36f2:	8a 95       	dec	r24
    36f4:	d2 f7       	brpl	.-12     	; 0x36ea <__fixsfsi+0x68>
    36f6:	66 23       	and	r22, r22
    36f8:	81 f0       	breq	.+32     	; 0x371a <__fixsfsi+0x98>
    36fa:	50 95       	com	r21
    36fc:	40 95       	com	r20
    36fe:	30 95       	com	r19
    3700:	21 95       	neg	r18
    3702:	3f 4f       	sbci	r19, 0xFF	; 255
    3704:	4f 4f       	sbci	r20, 0xFF	; 255
    3706:	5f 4f       	sbci	r21, 0xFF	; 255
    3708:	08 c0       	rjmp	.+16     	; 0x371a <__fixsfsi+0x98>
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	a9 01       	movw	r20, r18
    3710:	04 c0       	rjmp	.+8      	; 0x371a <__fixsfsi+0x98>
    3712:	2f ef       	ldi	r18, 0xFF	; 255
    3714:	3f ef       	ldi	r19, 0xFF	; 255
    3716:	4f ef       	ldi	r20, 0xFF	; 255
    3718:	5f e7       	ldi	r21, 0x7F	; 127
    371a:	b9 01       	movw	r22, r18
    371c:	ca 01       	movw	r24, r20
    371e:	2c 96       	adiw	r28, 0x0c	; 12
    3720:	e2 e0       	ldi	r30, 0x02	; 2
    3722:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__+0x20>

00003726 <__floatunsisf>:
    3726:	a8 e0       	ldi	r26, 0x08	; 8
    3728:	b0 e0       	ldi	r27, 0x00	; 0
    372a:	e9 e9       	ldi	r30, 0x99	; 153
    372c:	fb e1       	ldi	r31, 0x1B	; 27
    372e:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x14>
    3732:	7b 01       	movw	r14, r22
    3734:	8c 01       	movw	r16, r24
    3736:	1a 82       	std	Y+2, r1	; 0x02
    3738:	61 15       	cp	r22, r1
    373a:	71 05       	cpc	r23, r1
    373c:	81 05       	cpc	r24, r1
    373e:	91 05       	cpc	r25, r1
    3740:	19 f4       	brne	.+6      	; 0x3748 <__floatunsisf+0x22>
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	5f c0       	rjmp	.+190    	; 0x3806 <__floatunsisf+0xe0>
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	8e e1       	ldi	r24, 0x1E	; 30
    374e:	c8 2e       	mov	r12, r24
    3750:	d1 2c       	mov	r13, r1
    3752:	dc 82       	std	Y+4, r13	; 0x04
    3754:	cb 82       	std	Y+3, r12	; 0x03
    3756:	ed 82       	std	Y+5, r14	; 0x05
    3758:	fe 82       	std	Y+6, r15	; 0x06
    375a:	0f 83       	std	Y+7, r16	; 0x07
    375c:	18 87       	std	Y+8, r17	; 0x08
    375e:	c8 01       	movw	r24, r16
    3760:	b7 01       	movw	r22, r14
    3762:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__clzsi2>
    3766:	fc 01       	movw	r30, r24
    3768:	31 97       	sbiw	r30, 0x01	; 1
    376a:	f7 ff       	sbrs	r31, 7
    376c:	3a c0       	rjmp	.+116    	; 0x37e2 <__floatunsisf+0xbc>
    376e:	aa 27       	eor	r26, r26
    3770:	bb 27       	eor	r27, r27
    3772:	ae 1b       	sub	r26, r30
    3774:	bf 0b       	sbc	r27, r31
    3776:	21 e0       	ldi	r18, 0x01	; 1
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	0a 2e       	mov	r0, r26
    3780:	04 c0       	rjmp	.+8      	; 0x378a <__floatunsisf+0x64>
    3782:	22 0f       	add	r18, r18
    3784:	33 1f       	adc	r19, r19
    3786:	44 1f       	adc	r20, r20
    3788:	55 1f       	adc	r21, r21
    378a:	0a 94       	dec	r0
    378c:	d2 f7       	brpl	.-12     	; 0x3782 <__floatunsisf+0x5c>
    378e:	21 50       	subi	r18, 0x01	; 1
    3790:	30 40       	sbci	r19, 0x00	; 0
    3792:	40 40       	sbci	r20, 0x00	; 0
    3794:	50 40       	sbci	r21, 0x00	; 0
    3796:	2e 21       	and	r18, r14
    3798:	3f 21       	and	r19, r15
    379a:	40 23       	and	r20, r16
    379c:	51 23       	and	r21, r17
    379e:	61 e0       	ldi	r22, 0x01	; 1
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	21 15       	cp	r18, r1
    37a8:	31 05       	cpc	r19, r1
    37aa:	41 05       	cpc	r20, r1
    37ac:	51 05       	cpc	r21, r1
    37ae:	19 f4       	brne	.+6      	; 0x37b6 <__floatunsisf+0x90>
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	cb 01       	movw	r24, r22
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <__floatunsisf+0x9a>
    37b8:	16 95       	lsr	r17
    37ba:	07 95       	ror	r16
    37bc:	f7 94       	ror	r15
    37be:	e7 94       	ror	r14
    37c0:	aa 95       	dec	r26
    37c2:	d2 f7       	brpl	.-12     	; 0x37b8 <__floatunsisf+0x92>
    37c4:	e6 2a       	or	r14, r22
    37c6:	f7 2a       	or	r15, r23
    37c8:	08 2b       	or	r16, r24
    37ca:	19 2b       	or	r17, r25
    37cc:	ed 82       	std	Y+5, r14	; 0x05
    37ce:	fe 82       	std	Y+6, r15	; 0x06
    37d0:	0f 83       	std	Y+7, r16	; 0x07
    37d2:	18 87       	std	Y+8, r17	; 0x08
    37d4:	8e e1       	ldi	r24, 0x1E	; 30
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	8e 1b       	sub	r24, r30
    37da:	9f 0b       	sbc	r25, r31
    37dc:	9c 83       	std	Y+4, r25	; 0x04
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	12 c0       	rjmp	.+36     	; 0x3806 <__floatunsisf+0xe0>
    37e2:	30 97       	sbiw	r30, 0x00	; 0
    37e4:	81 f0       	breq	.+32     	; 0x3806 <__floatunsisf+0xe0>
    37e6:	0e 2e       	mov	r0, r30
    37e8:	04 c0       	rjmp	.+8      	; 0x37f2 <__floatunsisf+0xcc>
    37ea:	ee 0c       	add	r14, r14
    37ec:	ff 1c       	adc	r15, r15
    37ee:	00 1f       	adc	r16, r16
    37f0:	11 1f       	adc	r17, r17
    37f2:	0a 94       	dec	r0
    37f4:	d2 f7       	brpl	.-12     	; 0x37ea <__floatunsisf+0xc4>
    37f6:	ed 82       	std	Y+5, r14	; 0x05
    37f8:	fe 82       	std	Y+6, r15	; 0x06
    37fa:	0f 83       	std	Y+7, r16	; 0x07
    37fc:	18 87       	std	Y+8, r17	; 0x08
    37fe:	ce 1a       	sub	r12, r30
    3800:	df 0a       	sbc	r13, r31
    3802:	dc 82       	std	Y+4, r13	; 0x04
    3804:	cb 82       	std	Y+3, r12	; 0x03
    3806:	ce 01       	movw	r24, r28
    3808:	01 96       	adiw	r24, 0x01	; 1
    380a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__pack_f>
    380e:	28 96       	adiw	r28, 0x08	; 8
    3810:	e8 e0       	ldi	r30, 0x08	; 8
    3812:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x14>

00003816 <__clzsi2>:
    3816:	af 92       	push	r10
    3818:	bf 92       	push	r11
    381a:	cf 92       	push	r12
    381c:	df 92       	push	r13
    381e:	ef 92       	push	r14
    3820:	ff 92       	push	r15
    3822:	0f 93       	push	r16
    3824:	1f 93       	push	r17
    3826:	7b 01       	movw	r14, r22
    3828:	8c 01       	movw	r16, r24
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	e8 16       	cp	r14, r24
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	f8 06       	cpc	r15, r24
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	08 07       	cpc	r16, r24
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	18 07       	cpc	r17, r24
    383a:	58 f4       	brcc	.+22     	; 0x3852 <__clzsi2+0x3c>
    383c:	ef ef       	ldi	r30, 0xFF	; 255
    383e:	ee 16       	cp	r14, r30
    3840:	f1 04       	cpc	r15, r1
    3842:	01 05       	cpc	r16, r1
    3844:	11 05       	cpc	r17, r1
    3846:	09 f0       	breq	.+2      	; 0x384a <__clzsi2+0x34>
    3848:	90 f4       	brcc	.+36     	; 0x386e <__clzsi2+0x58>
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	dc 01       	movw	r26, r24
    3850:	17 c0       	rjmp	.+46     	; 0x3880 <__clzsi2+0x6a>
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	ef 16       	cp	r14, r31
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	ff 06       	cpc	r15, r31
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	0f 07       	cpc	r16, r31
    385e:	f1 e0       	ldi	r31, 0x01	; 1
    3860:	1f 07       	cpc	r17, r31
    3862:	50 f4       	brcc	.+20     	; 0x3878 <__clzsi2+0x62>
    3864:	80 e1       	ldi	r24, 0x10	; 16
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	a0 e0       	ldi	r26, 0x00	; 0
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	09 c0       	rjmp	.+18     	; 0x3880 <__clzsi2+0x6a>
    386e:	88 e0       	ldi	r24, 0x08	; 8
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	a0 e0       	ldi	r26, 0x00	; 0
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	04 c0       	rjmp	.+8      	; 0x3880 <__clzsi2+0x6a>
    3878:	88 e1       	ldi	r24, 0x18	; 24
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	a0 e0       	ldi	r26, 0x00	; 0
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	20 e2       	ldi	r18, 0x20	; 32
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e0       	ldi	r20, 0x00	; 0
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	28 1b       	sub	r18, r24
    388a:	39 0b       	sbc	r19, r25
    388c:	4a 0b       	sbc	r20, r26
    388e:	5b 0b       	sbc	r21, r27
    3890:	57 01       	movw	r10, r14
    3892:	68 01       	movw	r12, r16
    3894:	04 c0       	rjmp	.+8      	; 0x389e <__clzsi2+0x88>
    3896:	d6 94       	lsr	r13
    3898:	c7 94       	ror	r12
    389a:	b7 94       	ror	r11
    389c:	a7 94       	ror	r10
    389e:	8a 95       	dec	r24
    38a0:	d2 f7       	brpl	.-12     	; 0x3896 <__clzsi2+0x80>
    38a2:	d6 01       	movw	r26, r12
    38a4:	c5 01       	movw	r24, r10
    38a6:	8b 5e       	subi	r24, 0xEB	; 235
    38a8:	9e 4f       	sbci	r25, 0xFE	; 254
    38aa:	fc 01       	movw	r30, r24
    38ac:	80 81       	ld	r24, Z
    38ae:	28 1b       	sub	r18, r24
    38b0:	31 09       	sbc	r19, r1
    38b2:	41 09       	sbc	r20, r1
    38b4:	51 09       	sbc	r21, r1
    38b6:	c9 01       	movw	r24, r18
    38b8:	1f 91       	pop	r17
    38ba:	0f 91       	pop	r16
    38bc:	ff 90       	pop	r15
    38be:	ef 90       	pop	r14
    38c0:	df 90       	pop	r13
    38c2:	cf 90       	pop	r12
    38c4:	bf 90       	pop	r11
    38c6:	af 90       	pop	r10
    38c8:	08 95       	ret

000038ca <__pack_f>:
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	fc 01       	movw	r30, r24
    38d8:	24 81       	ldd	r18, Z+4	; 0x04
    38da:	35 81       	ldd	r19, Z+5	; 0x05
    38dc:	46 81       	ldd	r20, Z+6	; 0x06
    38de:	57 81       	ldd	r21, Z+7	; 0x07
    38e0:	61 81       	ldd	r22, Z+1	; 0x01
    38e2:	80 81       	ld	r24, Z
    38e4:	82 30       	cpi	r24, 0x02	; 2
    38e6:	20 f4       	brcc	.+8      	; 0x38f0 <__pack_f+0x26>
    38e8:	40 61       	ori	r20, 0x10	; 16
    38ea:	ef ef       	ldi	r30, 0xFF	; 255
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	a3 c0       	rjmp	.+326    	; 0x3a36 <__pack_f+0x16c>
    38f0:	84 30       	cpi	r24, 0x04	; 4
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <__pack_f+0x2c>
    38f4:	9b c0       	rjmp	.+310    	; 0x3a2c <__pack_f+0x162>
    38f6:	82 30       	cpi	r24, 0x02	; 2
    38f8:	09 f4       	brne	.+2      	; 0x38fc <__pack_f+0x32>
    38fa:	92 c0       	rjmp	.+292    	; 0x3a20 <__pack_f+0x156>
    38fc:	21 15       	cp	r18, r1
    38fe:	31 05       	cpc	r19, r1
    3900:	41 05       	cpc	r20, r1
    3902:	51 05       	cpc	r21, r1
    3904:	09 f4       	brne	.+2      	; 0x3908 <__pack_f+0x3e>
    3906:	8f c0       	rjmp	.+286    	; 0x3a26 <__pack_f+0x15c>
    3908:	02 80       	ldd	r0, Z+2	; 0x02
    390a:	f3 81       	ldd	r31, Z+3	; 0x03
    390c:	e0 2d       	mov	r30, r0
    390e:	7f ef       	ldi	r23, 0xFF	; 255
    3910:	e2 38       	cpi	r30, 0x82	; 130
    3912:	f7 07       	cpc	r31, r23
    3914:	0c f0       	brlt	.+2      	; 0x3918 <__pack_f+0x4e>
    3916:	5a c0       	rjmp	.+180    	; 0x39cc <__pack_f+0x102>
    3918:	c2 e8       	ldi	r28, 0x82	; 130
    391a:	df ef       	ldi	r29, 0xFF	; 255
    391c:	ce 1b       	sub	r28, r30
    391e:	df 0b       	sbc	r29, r31
    3920:	ca 31       	cpi	r28, 0x1A	; 26
    3922:	d1 05       	cpc	r29, r1
    3924:	6c f5       	brge	.+90     	; 0x3980 <__pack_f+0xb6>
    3926:	79 01       	movw	r14, r18
    3928:	8a 01       	movw	r16, r20
    392a:	0c 2e       	mov	r0, r28
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <__pack_f+0x6c>
    392e:	16 95       	lsr	r17
    3930:	07 95       	ror	r16
    3932:	f7 94       	ror	r15
    3934:	e7 94       	ror	r14
    3936:	0a 94       	dec	r0
    3938:	d2 f7       	brpl	.-12     	; 0x392e <__pack_f+0x64>
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a0 e0       	ldi	r26, 0x00	; 0
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	0c 2e       	mov	r0, r28
    3944:	04 c0       	rjmp	.+8      	; 0x394e <__pack_f+0x84>
    3946:	88 0f       	add	r24, r24
    3948:	99 1f       	adc	r25, r25
    394a:	aa 1f       	adc	r26, r26
    394c:	bb 1f       	adc	r27, r27
    394e:	0a 94       	dec	r0
    3950:	d2 f7       	brpl	.-12     	; 0x3946 <__pack_f+0x7c>
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	a1 09       	sbc	r26, r1
    3956:	b1 09       	sbc	r27, r1
    3958:	82 23       	and	r24, r18
    395a:	93 23       	and	r25, r19
    395c:	a4 23       	and	r26, r20
    395e:	b5 23       	and	r27, r21
    3960:	21 e0       	ldi	r18, 0x01	; 1
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	a1 05       	cpc	r26, r1
    396c:	b1 05       	cpc	r27, r1
    396e:	19 f4       	brne	.+6      	; 0x3976 <__pack_f+0xac>
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	a9 01       	movw	r20, r18
    3976:	2e 29       	or	r18, r14
    3978:	3f 29       	or	r19, r15
    397a:	40 2b       	or	r20, r16
    397c:	51 2b       	or	r21, r17
    397e:	03 c0       	rjmp	.+6      	; 0x3986 <__pack_f+0xbc>
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	a9 01       	movw	r20, r18
    3986:	da 01       	movw	r26, r20
    3988:	c9 01       	movw	r24, r18
    398a:	8f 77       	andi	r24, 0x7F	; 127
    398c:	90 70       	andi	r25, 0x00	; 0
    398e:	a0 70       	andi	r26, 0x00	; 0
    3990:	b0 70       	andi	r27, 0x00	; 0
    3992:	80 34       	cpi	r24, 0x40	; 64
    3994:	91 05       	cpc	r25, r1
    3996:	a1 05       	cpc	r26, r1
    3998:	b1 05       	cpc	r27, r1
    399a:	39 f4       	brne	.+14     	; 0x39aa <__pack_f+0xe0>
    399c:	27 ff       	sbrs	r18, 7
    399e:	09 c0       	rjmp	.+18     	; 0x39b2 <__pack_f+0xe8>
    39a0:	20 5c       	subi	r18, 0xC0	; 192
    39a2:	3f 4f       	sbci	r19, 0xFF	; 255
    39a4:	4f 4f       	sbci	r20, 0xFF	; 255
    39a6:	5f 4f       	sbci	r21, 0xFF	; 255
    39a8:	04 c0       	rjmp	.+8      	; 0x39b2 <__pack_f+0xe8>
    39aa:	21 5c       	subi	r18, 0xC1	; 193
    39ac:	3f 4f       	sbci	r19, 0xFF	; 255
    39ae:	4f 4f       	sbci	r20, 0xFF	; 255
    39b0:	5f 4f       	sbci	r21, 0xFF	; 255
    39b2:	e1 e0       	ldi	r30, 0x01	; 1
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	20 30       	cpi	r18, 0x00	; 0
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	38 07       	cpc	r19, r24
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	48 07       	cpc	r20, r24
    39c0:	80 e4       	ldi	r24, 0x40	; 64
    39c2:	58 07       	cpc	r21, r24
    39c4:	28 f5       	brcc	.+74     	; 0x3a10 <__pack_f+0x146>
    39c6:	e0 e0       	ldi	r30, 0x00	; 0
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	22 c0       	rjmp	.+68     	; 0x3a10 <__pack_f+0x146>
    39cc:	e0 38       	cpi	r30, 0x80	; 128
    39ce:	f1 05       	cpc	r31, r1
    39d0:	6c f5       	brge	.+90     	; 0x3a2c <__pack_f+0x162>
    39d2:	e1 58       	subi	r30, 0x81	; 129
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	da 01       	movw	r26, r20
    39d8:	c9 01       	movw	r24, r18
    39da:	8f 77       	andi	r24, 0x7F	; 127
    39dc:	90 70       	andi	r25, 0x00	; 0
    39de:	a0 70       	andi	r26, 0x00	; 0
    39e0:	b0 70       	andi	r27, 0x00	; 0
    39e2:	80 34       	cpi	r24, 0x40	; 64
    39e4:	91 05       	cpc	r25, r1
    39e6:	a1 05       	cpc	r26, r1
    39e8:	b1 05       	cpc	r27, r1
    39ea:	39 f4       	brne	.+14     	; 0x39fa <__pack_f+0x130>
    39ec:	27 ff       	sbrs	r18, 7
    39ee:	09 c0       	rjmp	.+18     	; 0x3a02 <__pack_f+0x138>
    39f0:	20 5c       	subi	r18, 0xC0	; 192
    39f2:	3f 4f       	sbci	r19, 0xFF	; 255
    39f4:	4f 4f       	sbci	r20, 0xFF	; 255
    39f6:	5f 4f       	sbci	r21, 0xFF	; 255
    39f8:	04 c0       	rjmp	.+8      	; 0x3a02 <__pack_f+0x138>
    39fa:	21 5c       	subi	r18, 0xC1	; 193
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
    39fe:	4f 4f       	sbci	r20, 0xFF	; 255
    3a00:	5f 4f       	sbci	r21, 0xFF	; 255
    3a02:	57 ff       	sbrs	r21, 7
    3a04:	05 c0       	rjmp	.+10     	; 0x3a10 <__pack_f+0x146>
    3a06:	56 95       	lsr	r21
    3a08:	47 95       	ror	r20
    3a0a:	37 95       	ror	r19
    3a0c:	27 95       	ror	r18
    3a0e:	31 96       	adiw	r30, 0x01	; 1
    3a10:	87 e0       	ldi	r24, 0x07	; 7
    3a12:	56 95       	lsr	r21
    3a14:	47 95       	ror	r20
    3a16:	37 95       	ror	r19
    3a18:	27 95       	ror	r18
    3a1a:	8a 95       	dec	r24
    3a1c:	d1 f7       	brne	.-12     	; 0x3a12 <__pack_f+0x148>
    3a1e:	0b c0       	rjmp	.+22     	; 0x3a36 <__pack_f+0x16c>
    3a20:	e0 e0       	ldi	r30, 0x00	; 0
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	05 c0       	rjmp	.+10     	; 0x3a30 <__pack_f+0x166>
    3a26:	e0 e0       	ldi	r30, 0x00	; 0
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	05 c0       	rjmp	.+10     	; 0x3a36 <__pack_f+0x16c>
    3a2c:	ef ef       	ldi	r30, 0xFF	; 255
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	a9 01       	movw	r20, r18
    3a36:	8e 2f       	mov	r24, r30
    3a38:	87 95       	ror	r24
    3a3a:	88 27       	eor	r24, r24
    3a3c:	87 95       	ror	r24
    3a3e:	94 2f       	mov	r25, r20
    3a40:	9f 77       	andi	r25, 0x7F	; 127
    3a42:	67 95       	ror	r22
    3a44:	66 27       	eor	r22, r22
    3a46:	67 95       	ror	r22
    3a48:	e6 95       	lsr	r30
    3a4a:	a9 2f       	mov	r26, r25
    3a4c:	a8 2b       	or	r26, r24
    3a4e:	fe 2f       	mov	r31, r30
    3a50:	f6 2b       	or	r31, r22
    3a52:	62 2f       	mov	r22, r18
    3a54:	73 2f       	mov	r23, r19
    3a56:	8a 2f       	mov	r24, r26
    3a58:	9f 2f       	mov	r25, r31
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	e6 e0       	ldi	r30, 0x06	; 6
    3a60:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

00003a64 <__unpack_f>:
    3a64:	dc 01       	movw	r26, r24
    3a66:	fb 01       	movw	r30, r22
    3a68:	2c 91       	ld	r18, X
    3a6a:	11 96       	adiw	r26, 0x01	; 1
    3a6c:	3c 91       	ld	r19, X
    3a6e:	11 97       	sbiw	r26, 0x01	; 1
    3a70:	12 96       	adiw	r26, 0x02	; 2
    3a72:	8c 91       	ld	r24, X
    3a74:	12 97       	sbiw	r26, 0x02	; 2
    3a76:	48 2f       	mov	r20, r24
    3a78:	4f 77       	andi	r20, 0x7F	; 127
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	98 2f       	mov	r25, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	99 27       	eor	r25, r25
    3a82:	99 1f       	adc	r25, r25
    3a84:	13 96       	adiw	r26, 0x03	; 3
    3a86:	6c 91       	ld	r22, X
    3a88:	13 97       	sbiw	r26, 0x03	; 3
    3a8a:	86 2f       	mov	r24, r22
    3a8c:	88 0f       	add	r24, r24
    3a8e:	89 2b       	or	r24, r25
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	66 1f       	adc	r22, r22
    3a94:	66 27       	eor	r22, r22
    3a96:	66 1f       	adc	r22, r22
    3a98:	61 83       	std	Z+1, r22	; 0x01
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	39 f5       	brne	.+78     	; 0x3aec <__unpack_f+0x88>
    3a9e:	21 15       	cp	r18, r1
    3aa0:	31 05       	cpc	r19, r1
    3aa2:	41 05       	cpc	r20, r1
    3aa4:	51 05       	cpc	r21, r1
    3aa6:	11 f4       	brne	.+4      	; 0x3aac <__unpack_f+0x48>
    3aa8:	82 e0       	ldi	r24, 0x02	; 2
    3aaa:	29 c0       	rjmp	.+82     	; 0x3afe <__unpack_f+0x9a>
    3aac:	82 e8       	ldi	r24, 0x82	; 130
    3aae:	9f ef       	ldi	r25, 0xFF	; 255
    3ab0:	93 83       	std	Z+3, r25	; 0x03
    3ab2:	82 83       	std	Z+2, r24	; 0x02
    3ab4:	67 e0       	ldi	r22, 0x07	; 7
    3ab6:	22 0f       	add	r18, r18
    3ab8:	33 1f       	adc	r19, r19
    3aba:	44 1f       	adc	r20, r20
    3abc:	55 1f       	adc	r21, r21
    3abe:	6a 95       	dec	r22
    3ac0:	d1 f7       	brne	.-12     	; 0x3ab6 <__unpack_f+0x52>
    3ac2:	83 e0       	ldi	r24, 0x03	; 3
    3ac4:	80 83       	st	Z, r24
    3ac6:	09 c0       	rjmp	.+18     	; 0x3ada <__unpack_f+0x76>
    3ac8:	22 0f       	add	r18, r18
    3aca:	33 1f       	adc	r19, r19
    3acc:	44 1f       	adc	r20, r20
    3ace:	55 1f       	adc	r21, r21
    3ad0:	82 81       	ldd	r24, Z+2	; 0x02
    3ad2:	93 81       	ldd	r25, Z+3	; 0x03
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	93 83       	std	Z+3, r25	; 0x03
    3ad8:	82 83       	std	Z+2, r24	; 0x02
    3ada:	20 30       	cpi	r18, 0x00	; 0
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	38 07       	cpc	r19, r24
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	48 07       	cpc	r20, r24
    3ae4:	80 e4       	ldi	r24, 0x40	; 64
    3ae6:	58 07       	cpc	r21, r24
    3ae8:	78 f3       	brcs	.-34     	; 0x3ac8 <__unpack_f+0x64>
    3aea:	20 c0       	rjmp	.+64     	; 0x3b2c <__unpack_f+0xc8>
    3aec:	8f 3f       	cpi	r24, 0xFF	; 255
    3aee:	91 05       	cpc	r25, r1
    3af0:	79 f4       	brne	.+30     	; 0x3b10 <__unpack_f+0xac>
    3af2:	21 15       	cp	r18, r1
    3af4:	31 05       	cpc	r19, r1
    3af6:	41 05       	cpc	r20, r1
    3af8:	51 05       	cpc	r21, r1
    3afa:	19 f4       	brne	.+6      	; 0x3b02 <__unpack_f+0x9e>
    3afc:	84 e0       	ldi	r24, 0x04	; 4
    3afe:	80 83       	st	Z, r24
    3b00:	08 95       	ret
    3b02:	44 ff       	sbrs	r20, 4
    3b04:	03 c0       	rjmp	.+6      	; 0x3b0c <__unpack_f+0xa8>
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	80 83       	st	Z, r24
    3b0a:	10 c0       	rjmp	.+32     	; 0x3b2c <__unpack_f+0xc8>
    3b0c:	10 82       	st	Z, r1
    3b0e:	0e c0       	rjmp	.+28     	; 0x3b2c <__unpack_f+0xc8>
    3b10:	8f 57       	subi	r24, 0x7F	; 127
    3b12:	90 40       	sbci	r25, 0x00	; 0
    3b14:	93 83       	std	Z+3, r25	; 0x03
    3b16:	82 83       	std	Z+2, r24	; 0x02
    3b18:	83 e0       	ldi	r24, 0x03	; 3
    3b1a:	80 83       	st	Z, r24
    3b1c:	87 e0       	ldi	r24, 0x07	; 7
    3b1e:	22 0f       	add	r18, r18
    3b20:	33 1f       	adc	r19, r19
    3b22:	44 1f       	adc	r20, r20
    3b24:	55 1f       	adc	r21, r21
    3b26:	8a 95       	dec	r24
    3b28:	d1 f7       	brne	.-12     	; 0x3b1e <__unpack_f+0xba>
    3b2a:	50 64       	ori	r21, 0x40	; 64
    3b2c:	24 83       	std	Z+4, r18	; 0x04
    3b2e:	35 83       	std	Z+5, r19	; 0x05
    3b30:	46 83       	std	Z+6, r20	; 0x06
    3b32:	57 83       	std	Z+7, r21	; 0x07
    3b34:	08 95       	ret

00003b36 <__fpcmp_parts_f>:
    3b36:	fc 01       	movw	r30, r24
    3b38:	db 01       	movw	r26, r22
    3b3a:	90 81       	ld	r25, Z
    3b3c:	92 30       	cpi	r25, 0x02	; 2
    3b3e:	08 f4       	brcc	.+2      	; 0x3b42 <__fpcmp_parts_f+0xc>
    3b40:	49 c0       	rjmp	.+146    	; 0x3bd4 <__fpcmp_parts_f+0x9e>
    3b42:	8c 91       	ld	r24, X
    3b44:	82 30       	cpi	r24, 0x02	; 2
    3b46:	08 f4       	brcc	.+2      	; 0x3b4a <__fpcmp_parts_f+0x14>
    3b48:	45 c0       	rjmp	.+138    	; 0x3bd4 <__fpcmp_parts_f+0x9e>
    3b4a:	94 30       	cpi	r25, 0x04	; 4
    3b4c:	51 f4       	brne	.+20     	; 0x3b62 <__fpcmp_parts_f+0x2c>
    3b4e:	61 81       	ldd	r22, Z+1	; 0x01
    3b50:	84 30       	cpi	r24, 0x04	; 4
    3b52:	b1 f5       	brne	.+108    	; 0x3bc0 <__fpcmp_parts_f+0x8a>
    3b54:	11 96       	adiw	r26, 0x01	; 1
    3b56:	2c 91       	ld	r18, X
    3b58:	11 97       	sbiw	r26, 0x01	; 1
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	26 1b       	sub	r18, r22
    3b5e:	31 09       	sbc	r19, r1
    3b60:	41 c0       	rjmp	.+130    	; 0x3be4 <__fpcmp_parts_f+0xae>
    3b62:	84 30       	cpi	r24, 0x04	; 4
    3b64:	21 f0       	breq	.+8      	; 0x3b6e <__fpcmp_parts_f+0x38>
    3b66:	92 30       	cpi	r25, 0x02	; 2
    3b68:	41 f4       	brne	.+16     	; 0x3b7a <__fpcmp_parts_f+0x44>
    3b6a:	82 30       	cpi	r24, 0x02	; 2
    3b6c:	b1 f1       	breq	.+108    	; 0x3bda <__fpcmp_parts_f+0xa4>
    3b6e:	11 96       	adiw	r26, 0x01	; 1
    3b70:	8c 91       	ld	r24, X
    3b72:	11 97       	sbiw	r26, 0x01	; 1
    3b74:	88 23       	and	r24, r24
    3b76:	a1 f1       	breq	.+104    	; 0x3be0 <__fpcmp_parts_f+0xaa>
    3b78:	2d c0       	rjmp	.+90     	; 0x3bd4 <__fpcmp_parts_f+0x9e>
    3b7a:	61 81       	ldd	r22, Z+1	; 0x01
    3b7c:	82 30       	cpi	r24, 0x02	; 2
    3b7e:	01 f1       	breq	.+64     	; 0x3bc0 <__fpcmp_parts_f+0x8a>
    3b80:	11 96       	adiw	r26, 0x01	; 1
    3b82:	8c 91       	ld	r24, X
    3b84:	11 97       	sbiw	r26, 0x01	; 1
    3b86:	68 17       	cp	r22, r24
    3b88:	d9 f4       	brne	.+54     	; 0x3bc0 <__fpcmp_parts_f+0x8a>
    3b8a:	22 81       	ldd	r18, Z+2	; 0x02
    3b8c:	33 81       	ldd	r19, Z+3	; 0x03
    3b8e:	12 96       	adiw	r26, 0x02	; 2
    3b90:	8d 91       	ld	r24, X+
    3b92:	9c 91       	ld	r25, X
    3b94:	13 97       	sbiw	r26, 0x03	; 3
    3b96:	82 17       	cp	r24, r18
    3b98:	93 07       	cpc	r25, r19
    3b9a:	94 f0       	brlt	.+36     	; 0x3bc0 <__fpcmp_parts_f+0x8a>
    3b9c:	28 17       	cp	r18, r24
    3b9e:	39 07       	cpc	r19, r25
    3ba0:	bc f0       	brlt	.+46     	; 0x3bd0 <__fpcmp_parts_f+0x9a>
    3ba2:	24 81       	ldd	r18, Z+4	; 0x04
    3ba4:	35 81       	ldd	r19, Z+5	; 0x05
    3ba6:	46 81       	ldd	r20, Z+6	; 0x06
    3ba8:	57 81       	ldd	r21, Z+7	; 0x07
    3baa:	14 96       	adiw	r26, 0x04	; 4
    3bac:	8d 91       	ld	r24, X+
    3bae:	9d 91       	ld	r25, X+
    3bb0:	0d 90       	ld	r0, X+
    3bb2:	bc 91       	ld	r27, X
    3bb4:	a0 2d       	mov	r26, r0
    3bb6:	82 17       	cp	r24, r18
    3bb8:	93 07       	cpc	r25, r19
    3bba:	a4 07       	cpc	r26, r20
    3bbc:	b5 07       	cpc	r27, r21
    3bbe:	18 f4       	brcc	.+6      	; 0x3bc6 <__fpcmp_parts_f+0x90>
    3bc0:	66 23       	and	r22, r22
    3bc2:	41 f0       	breq	.+16     	; 0x3bd4 <__fpcmp_parts_f+0x9e>
    3bc4:	0d c0       	rjmp	.+26     	; 0x3be0 <__fpcmp_parts_f+0xaa>
    3bc6:	28 17       	cp	r18, r24
    3bc8:	39 07       	cpc	r19, r25
    3bca:	4a 07       	cpc	r20, r26
    3bcc:	5b 07       	cpc	r21, r27
    3bce:	28 f4       	brcc	.+10     	; 0x3bda <__fpcmp_parts_f+0xa4>
    3bd0:	66 23       	and	r22, r22
    3bd2:	31 f0       	breq	.+12     	; 0x3be0 <__fpcmp_parts_f+0xaa>
    3bd4:	21 e0       	ldi	r18, 0x01	; 1
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	05 c0       	rjmp	.+10     	; 0x3be4 <__fpcmp_parts_f+0xae>
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <__fpcmp_parts_f+0xae>
    3be0:	2f ef       	ldi	r18, 0xFF	; 255
    3be2:	3f ef       	ldi	r19, 0xFF	; 255
    3be4:	c9 01       	movw	r24, r18
    3be6:	08 95       	ret

00003be8 <__udivmodhi4>:
    3be8:	aa 1b       	sub	r26, r26
    3bea:	bb 1b       	sub	r27, r27
    3bec:	51 e1       	ldi	r21, 0x11	; 17
    3bee:	07 c0       	rjmp	.+14     	; 0x3bfe <__udivmodhi4_ep>

00003bf0 <__udivmodhi4_loop>:
    3bf0:	aa 1f       	adc	r26, r26
    3bf2:	bb 1f       	adc	r27, r27
    3bf4:	a6 17       	cp	r26, r22
    3bf6:	b7 07       	cpc	r27, r23
    3bf8:	10 f0       	brcs	.+4      	; 0x3bfe <__udivmodhi4_ep>
    3bfa:	a6 1b       	sub	r26, r22
    3bfc:	b7 0b       	sbc	r27, r23

00003bfe <__udivmodhi4_ep>:
    3bfe:	88 1f       	adc	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	5a 95       	dec	r21
    3c04:	a9 f7       	brne	.-22     	; 0x3bf0 <__udivmodhi4_loop>
    3c06:	80 95       	com	r24
    3c08:	90 95       	com	r25
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	08 95       	ret

00003c10 <__divmodhi4>:
    3c10:	97 fb       	bst	r25, 7
    3c12:	09 2e       	mov	r0, r25
    3c14:	07 26       	eor	r0, r23
    3c16:	0a d0       	rcall	.+20     	; 0x3c2c <__divmodhi4_neg1>
    3c18:	77 fd       	sbrc	r23, 7
    3c1a:	04 d0       	rcall	.+8      	; 0x3c24 <__divmodhi4_neg2>
    3c1c:	e5 df       	rcall	.-54     	; 0x3be8 <__udivmodhi4>
    3c1e:	06 d0       	rcall	.+12     	; 0x3c2c <__divmodhi4_neg1>
    3c20:	00 20       	and	r0, r0
    3c22:	1a f4       	brpl	.+6      	; 0x3c2a <__divmodhi4_exit>

00003c24 <__divmodhi4_neg2>:
    3c24:	70 95       	com	r23
    3c26:	61 95       	neg	r22
    3c28:	7f 4f       	sbci	r23, 0xFF	; 255

00003c2a <__divmodhi4_exit>:
    3c2a:	08 95       	ret

00003c2c <__divmodhi4_neg1>:
    3c2c:	f6 f7       	brtc	.-4      	; 0x3c2a <__divmodhi4_exit>
    3c2e:	90 95       	com	r25
    3c30:	81 95       	neg	r24
    3c32:	9f 4f       	sbci	r25, 0xFF	; 255
    3c34:	08 95       	ret

00003c36 <__divmodsi4>:
    3c36:	97 fb       	bst	r25, 7
    3c38:	09 2e       	mov	r0, r25
    3c3a:	05 26       	eor	r0, r21
    3c3c:	0e d0       	rcall	.+28     	; 0x3c5a <__divmodsi4_neg1>
    3c3e:	57 fd       	sbrc	r21, 7
    3c40:	04 d0       	rcall	.+8      	; 0x3c4a <__divmodsi4_neg2>
    3c42:	14 d0       	rcall	.+40     	; 0x3c6c <__udivmodsi4>
    3c44:	0a d0       	rcall	.+20     	; 0x3c5a <__divmodsi4_neg1>
    3c46:	00 1c       	adc	r0, r0
    3c48:	38 f4       	brcc	.+14     	; 0x3c58 <__divmodsi4_exit>

00003c4a <__divmodsi4_neg2>:
    3c4a:	50 95       	com	r21
    3c4c:	40 95       	com	r20
    3c4e:	30 95       	com	r19
    3c50:	21 95       	neg	r18
    3c52:	3f 4f       	sbci	r19, 0xFF	; 255
    3c54:	4f 4f       	sbci	r20, 0xFF	; 255
    3c56:	5f 4f       	sbci	r21, 0xFF	; 255

00003c58 <__divmodsi4_exit>:
    3c58:	08 95       	ret

00003c5a <__divmodsi4_neg1>:
    3c5a:	f6 f7       	brtc	.-4      	; 0x3c58 <__divmodsi4_exit>
    3c5c:	90 95       	com	r25
    3c5e:	80 95       	com	r24
    3c60:	70 95       	com	r23
    3c62:	61 95       	neg	r22
    3c64:	7f 4f       	sbci	r23, 0xFF	; 255
    3c66:	8f 4f       	sbci	r24, 0xFF	; 255
    3c68:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6a:	08 95       	ret

00003c6c <__udivmodsi4>:
    3c6c:	a1 e2       	ldi	r26, 0x21	; 33
    3c6e:	1a 2e       	mov	r1, r26
    3c70:	aa 1b       	sub	r26, r26
    3c72:	bb 1b       	sub	r27, r27
    3c74:	fd 01       	movw	r30, r26
    3c76:	0d c0       	rjmp	.+26     	; 0x3c92 <__udivmodsi4_ep>

00003c78 <__udivmodsi4_loop>:
    3c78:	aa 1f       	adc	r26, r26
    3c7a:	bb 1f       	adc	r27, r27
    3c7c:	ee 1f       	adc	r30, r30
    3c7e:	ff 1f       	adc	r31, r31
    3c80:	a2 17       	cp	r26, r18
    3c82:	b3 07       	cpc	r27, r19
    3c84:	e4 07       	cpc	r30, r20
    3c86:	f5 07       	cpc	r31, r21
    3c88:	20 f0       	brcs	.+8      	; 0x3c92 <__udivmodsi4_ep>
    3c8a:	a2 1b       	sub	r26, r18
    3c8c:	b3 0b       	sbc	r27, r19
    3c8e:	e4 0b       	sbc	r30, r20
    3c90:	f5 0b       	sbc	r31, r21

00003c92 <__udivmodsi4_ep>:
    3c92:	66 1f       	adc	r22, r22
    3c94:	77 1f       	adc	r23, r23
    3c96:	88 1f       	adc	r24, r24
    3c98:	99 1f       	adc	r25, r25
    3c9a:	1a 94       	dec	r1
    3c9c:	69 f7       	brne	.-38     	; 0x3c78 <__udivmodsi4_loop>
    3c9e:	60 95       	com	r22
    3ca0:	70 95       	com	r23
    3ca2:	80 95       	com	r24
    3ca4:	90 95       	com	r25
    3ca6:	9b 01       	movw	r18, r22
    3ca8:	ac 01       	movw	r20, r24
    3caa:	bd 01       	movw	r22, r26
    3cac:	cf 01       	movw	r24, r30
    3cae:	08 95       	ret

00003cb0 <__prologue_saves__>:
    3cb0:	2f 92       	push	r2
    3cb2:	3f 92       	push	r3
    3cb4:	4f 92       	push	r4
    3cb6:	5f 92       	push	r5
    3cb8:	6f 92       	push	r6
    3cba:	7f 92       	push	r7
    3cbc:	8f 92       	push	r8
    3cbe:	9f 92       	push	r9
    3cc0:	af 92       	push	r10
    3cc2:	bf 92       	push	r11
    3cc4:	cf 92       	push	r12
    3cc6:	df 92       	push	r13
    3cc8:	ef 92       	push	r14
    3cca:	ff 92       	push	r15
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	ca 1b       	sub	r28, r26
    3cda:	db 0b       	sbc	r29, r27
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	cd bf       	out	0x3d, r28	; 61
    3ce6:	09 94       	ijmp

00003ce8 <__epilogue_restores__>:
    3ce8:	2a 88       	ldd	r2, Y+18	; 0x12
    3cea:	39 88       	ldd	r3, Y+17	; 0x11
    3cec:	48 88       	ldd	r4, Y+16	; 0x10
    3cee:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cf0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cf2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cf4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cf6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cf8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cfa:	b9 84       	ldd	r11, Y+9	; 0x09
    3cfc:	c8 84       	ldd	r12, Y+8	; 0x08
    3cfe:	df 80       	ldd	r13, Y+7	; 0x07
    3d00:	ee 80       	ldd	r14, Y+6	; 0x06
    3d02:	fd 80       	ldd	r15, Y+5	; 0x05
    3d04:	0c 81       	ldd	r16, Y+4	; 0x04
    3d06:	1b 81       	ldd	r17, Y+3	; 0x03
    3d08:	aa 81       	ldd	r26, Y+2	; 0x02
    3d0a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d0c:	ce 0f       	add	r28, r30
    3d0e:	d1 1d       	adc	r29, r1
    3d10:	0f b6       	in	r0, 0x3f	; 63
    3d12:	f8 94       	cli
    3d14:	de bf       	out	0x3e, r29	; 62
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	cd bf       	out	0x3d, r28	; 61
    3d1a:	ed 01       	movw	r28, r26
    3d1c:	08 95       	ret

00003d1e <ceil>:
    3d1e:	3b d0       	rcall	.+118    	; 0x3d96 <__fp_trunc>
    3d20:	80 f0       	brcs	.+32     	; 0x3d42 <ceil+0x24>
    3d22:	9f 37       	cpi	r25, 0x7F	; 127
    3d24:	40 f4       	brcc	.+16     	; 0x3d36 <ceil+0x18>
    3d26:	91 11       	cpse	r25, r1
    3d28:	0e f4       	brtc	.+2      	; 0x3d2c <ceil+0xe>
    3d2a:	4d c0       	rjmp	.+154    	; 0x3dc6 <__fp_szero>
    3d2c:	60 e0       	ldi	r22, 0x00	; 0
    3d2e:	70 e0       	ldi	r23, 0x00	; 0
    3d30:	80 e8       	ldi	r24, 0x80	; 128
    3d32:	9f e3       	ldi	r25, 0x3F	; 63
    3d34:	08 95       	ret
    3d36:	26 f0       	brts	.+8      	; 0x3d40 <ceil+0x22>
    3d38:	1b 16       	cp	r1, r27
    3d3a:	61 1d       	adc	r22, r1
    3d3c:	71 1d       	adc	r23, r1
    3d3e:	81 1d       	adc	r24, r1
    3d40:	01 c0       	rjmp	.+2      	; 0x3d44 <__fp_mintl>
    3d42:	1b c0       	rjmp	.+54     	; 0x3d7a <__fp_mpack>

00003d44 <__fp_mintl>:
    3d44:	88 23       	and	r24, r24
    3d46:	71 f4       	brne	.+28     	; 0x3d64 <__fp_mintl+0x20>
    3d48:	77 23       	and	r23, r23
    3d4a:	21 f0       	breq	.+8      	; 0x3d54 <__fp_mintl+0x10>
    3d4c:	98 50       	subi	r25, 0x08	; 8
    3d4e:	87 2b       	or	r24, r23
    3d50:	76 2f       	mov	r23, r22
    3d52:	07 c0       	rjmp	.+14     	; 0x3d62 <__fp_mintl+0x1e>
    3d54:	66 23       	and	r22, r22
    3d56:	11 f4       	brne	.+4      	; 0x3d5c <__fp_mintl+0x18>
    3d58:	99 27       	eor	r25, r25
    3d5a:	0d c0       	rjmp	.+26     	; 0x3d76 <__fp_mintl+0x32>
    3d5c:	90 51       	subi	r25, 0x10	; 16
    3d5e:	86 2b       	or	r24, r22
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	60 e0       	ldi	r22, 0x00	; 0
    3d64:	2a f0       	brmi	.+10     	; 0x3d70 <__fp_mintl+0x2c>
    3d66:	9a 95       	dec	r25
    3d68:	66 0f       	add	r22, r22
    3d6a:	77 1f       	adc	r23, r23
    3d6c:	88 1f       	adc	r24, r24
    3d6e:	da f7       	brpl	.-10     	; 0x3d66 <__fp_mintl+0x22>
    3d70:	88 0f       	add	r24, r24
    3d72:	96 95       	lsr	r25
    3d74:	87 95       	ror	r24
    3d76:	97 f9       	bld	r25, 7
    3d78:	08 95       	ret

00003d7a <__fp_mpack>:
    3d7a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d7c:	31 f0       	breq	.+12     	; 0x3d8a <__fp_mpack_finite+0xc>

00003d7e <__fp_mpack_finite>:
    3d7e:	91 50       	subi	r25, 0x01	; 1
    3d80:	20 f4       	brcc	.+8      	; 0x3d8a <__fp_mpack_finite+0xc>
    3d82:	87 95       	ror	r24
    3d84:	77 95       	ror	r23
    3d86:	67 95       	ror	r22
    3d88:	b7 95       	ror	r27
    3d8a:	88 0f       	add	r24, r24
    3d8c:	91 1d       	adc	r25, r1
    3d8e:	96 95       	lsr	r25
    3d90:	87 95       	ror	r24
    3d92:	97 f9       	bld	r25, 7
    3d94:	08 95       	ret

00003d96 <__fp_trunc>:
    3d96:	71 d0       	rcall	.+226    	; 0x3e7a <__fp_splitA>
    3d98:	a0 f0       	brcs	.+40     	; 0x3dc2 <__fp_trunc+0x2c>
    3d9a:	be e7       	ldi	r27, 0x7E	; 126
    3d9c:	b9 17       	cp	r27, r25
    3d9e:	88 f4       	brcc	.+34     	; 0x3dc2 <__fp_trunc+0x2c>
    3da0:	bb 27       	eor	r27, r27
    3da2:	9f 38       	cpi	r25, 0x8F	; 143
    3da4:	60 f4       	brcc	.+24     	; 0x3dbe <__fp_trunc+0x28>
    3da6:	16 16       	cp	r1, r22
    3da8:	b1 1d       	adc	r27, r1
    3daa:	67 2f       	mov	r22, r23
    3dac:	78 2f       	mov	r23, r24
    3dae:	88 27       	eor	r24, r24
    3db0:	98 5f       	subi	r25, 0xF8	; 248
    3db2:	f7 cf       	rjmp	.-18     	; 0x3da2 <__fp_trunc+0xc>
    3db4:	86 95       	lsr	r24
    3db6:	77 95       	ror	r23
    3db8:	67 95       	ror	r22
    3dba:	b1 1d       	adc	r27, r1
    3dbc:	93 95       	inc	r25
    3dbe:	96 39       	cpi	r25, 0x96	; 150
    3dc0:	c8 f3       	brcs	.-14     	; 0x3db4 <__fp_trunc+0x1e>
    3dc2:	08 95       	ret

00003dc4 <__fp_zero>:
    3dc4:	e8 94       	clt

00003dc6 <__fp_szero>:
    3dc6:	bb 27       	eor	r27, r27
    3dc8:	66 27       	eor	r22, r22
    3dca:	77 27       	eor	r23, r23
    3dcc:	cb 01       	movw	r24, r22
    3dce:	97 f9       	bld	r25, 7
    3dd0:	08 95       	ret
    3dd2:	11 f4       	brne	.+4      	; 0x3dd8 <__fp_szero+0x12>
    3dd4:	0e f4       	brtc	.+2      	; 0x3dd8 <__fp_szero+0x12>
    3dd6:	3f c0       	rjmp	.+126    	; 0x3e56 <__fp_nan>
    3dd8:	d0 cf       	rjmp	.-96     	; 0x3d7a <__fp_mpack>

00003dda <sqrt>:
    3dda:	4f d0       	rcall	.+158    	; 0x3e7a <__fp_splitA>
    3ddc:	d0 f3       	brcs	.-12     	; 0x3dd2 <__fp_szero+0xc>
    3dde:	99 23       	and	r25, r25
    3de0:	d9 f3       	breq	.-10     	; 0x3dd8 <__fp_szero+0x12>
    3de2:	ce f3       	brts	.-14     	; 0x3dd6 <__fp_szero+0x10>
    3de4:	9f 57       	subi	r25, 0x7F	; 127
    3de6:	55 0b       	sbc	r21, r21
    3de8:	87 ff       	sbrs	r24, 7
    3dea:	38 d0       	rcall	.+112    	; 0x3e5c <__fp_norm2>
    3dec:	00 24       	eor	r0, r0
    3dee:	a0 e6       	ldi	r26, 0x60	; 96
    3df0:	40 ea       	ldi	r20, 0xA0	; 160
    3df2:	90 01       	movw	r18, r0
    3df4:	80 58       	subi	r24, 0x80	; 128
    3df6:	56 95       	lsr	r21
    3df8:	97 95       	ror	r25
    3dfa:	28 f4       	brcc	.+10     	; 0x3e06 <sqrt+0x2c>
    3dfc:	80 5c       	subi	r24, 0xC0	; 192
    3dfe:	66 0f       	add	r22, r22
    3e00:	77 1f       	adc	r23, r23
    3e02:	88 1f       	adc	r24, r24
    3e04:	20 f0       	brcs	.+8      	; 0x3e0e <sqrt+0x34>
    3e06:	26 17       	cp	r18, r22
    3e08:	37 07       	cpc	r19, r23
    3e0a:	48 07       	cpc	r20, r24
    3e0c:	30 f4       	brcc	.+12     	; 0x3e1a <sqrt+0x40>
    3e0e:	62 1b       	sub	r22, r18
    3e10:	73 0b       	sbc	r23, r19
    3e12:	84 0b       	sbc	r24, r20
    3e14:	20 29       	or	r18, r0
    3e16:	31 29       	or	r19, r1
    3e18:	4a 2b       	or	r20, r26
    3e1a:	a6 95       	lsr	r26
    3e1c:	17 94       	ror	r1
    3e1e:	07 94       	ror	r0
    3e20:	20 25       	eor	r18, r0
    3e22:	31 25       	eor	r19, r1
    3e24:	4a 27       	eor	r20, r26
    3e26:	58 f7       	brcc	.-42     	; 0x3dfe <sqrt+0x24>
    3e28:	66 0f       	add	r22, r22
    3e2a:	77 1f       	adc	r23, r23
    3e2c:	88 1f       	adc	r24, r24
    3e2e:	20 f0       	brcs	.+8      	; 0x3e38 <sqrt+0x5e>
    3e30:	26 17       	cp	r18, r22
    3e32:	37 07       	cpc	r19, r23
    3e34:	48 07       	cpc	r20, r24
    3e36:	30 f4       	brcc	.+12     	; 0x3e44 <sqrt+0x6a>
    3e38:	62 0b       	sbc	r22, r18
    3e3a:	73 0b       	sbc	r23, r19
    3e3c:	84 0b       	sbc	r24, r20
    3e3e:	20 0d       	add	r18, r0
    3e40:	31 1d       	adc	r19, r1
    3e42:	41 1d       	adc	r20, r1
    3e44:	a0 95       	com	r26
    3e46:	81 f7       	brne	.-32     	; 0x3e28 <sqrt+0x4e>
    3e48:	b9 01       	movw	r22, r18
    3e4a:	84 2f       	mov	r24, r20
    3e4c:	91 58       	subi	r25, 0x81	; 129
    3e4e:	88 0f       	add	r24, r24
    3e50:	96 95       	lsr	r25
    3e52:	87 95       	ror	r24
    3e54:	08 95       	ret

00003e56 <__fp_nan>:
    3e56:	9f ef       	ldi	r25, 0xFF	; 255
    3e58:	80 ec       	ldi	r24, 0xC0	; 192
    3e5a:	08 95       	ret

00003e5c <__fp_norm2>:
    3e5c:	91 50       	subi	r25, 0x01	; 1
    3e5e:	50 40       	sbci	r21, 0x00	; 0
    3e60:	66 0f       	add	r22, r22
    3e62:	77 1f       	adc	r23, r23
    3e64:	88 1f       	adc	r24, r24
    3e66:	d2 f7       	brpl	.-12     	; 0x3e5c <__fp_norm2>
    3e68:	08 95       	ret

00003e6a <__fp_split3>:
    3e6a:	57 fd       	sbrc	r21, 7
    3e6c:	90 58       	subi	r25, 0x80	; 128
    3e6e:	44 0f       	add	r20, r20
    3e70:	55 1f       	adc	r21, r21
    3e72:	59 f0       	breq	.+22     	; 0x3e8a <__fp_splitA+0x10>
    3e74:	5f 3f       	cpi	r21, 0xFF	; 255
    3e76:	71 f0       	breq	.+28     	; 0x3e94 <__fp_splitA+0x1a>
    3e78:	47 95       	ror	r20

00003e7a <__fp_splitA>:
    3e7a:	88 0f       	add	r24, r24
    3e7c:	97 fb       	bst	r25, 7
    3e7e:	99 1f       	adc	r25, r25
    3e80:	61 f0       	breq	.+24     	; 0x3e9a <__fp_splitA+0x20>
    3e82:	9f 3f       	cpi	r25, 0xFF	; 255
    3e84:	79 f0       	breq	.+30     	; 0x3ea4 <__fp_splitA+0x2a>
    3e86:	87 95       	ror	r24
    3e88:	08 95       	ret
    3e8a:	12 16       	cp	r1, r18
    3e8c:	13 06       	cpc	r1, r19
    3e8e:	14 06       	cpc	r1, r20
    3e90:	55 1f       	adc	r21, r21
    3e92:	f2 cf       	rjmp	.-28     	; 0x3e78 <__fp_split3+0xe>
    3e94:	46 95       	lsr	r20
    3e96:	f1 df       	rcall	.-30     	; 0x3e7a <__fp_splitA>
    3e98:	08 c0       	rjmp	.+16     	; 0x3eaa <__fp_splitA+0x30>
    3e9a:	16 16       	cp	r1, r22
    3e9c:	17 06       	cpc	r1, r23
    3e9e:	18 06       	cpc	r1, r24
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	f1 cf       	rjmp	.-30     	; 0x3e86 <__fp_splitA+0xc>
    3ea4:	86 95       	lsr	r24
    3ea6:	71 05       	cpc	r23, r1
    3ea8:	61 05       	cpc	r22, r1
    3eaa:	08 94       	sec
    3eac:	08 95       	ret

00003eae <_exit>:
    3eae:	f8 94       	cli

00003eb0 <__stop_program>:
    3eb0:	ff cf       	rjmp	.-2      	; 0x3eb0 <__stop_program>
