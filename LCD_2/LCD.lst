
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000680  00800100  00005274  00005308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  00800780  00800780  00005988  2**0
                  ALLOC
  3 .stab         00000de0  00000000  00000000  00005988  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000480  00000000  00000000  00006a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000019a4  00000000  00000000  00006e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008c68  00000000  00000000  00008831  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000345a  00000000  00000000  00011499  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005dea  00000000  00000000  000148f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001110  00000000  00000000  0001a6e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002c81  00000000  00000000  0001b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000464d  00000000  00000000  0001e471  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000a3f  00000000  00000000  00022abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004b0  00000000  00000000  000234fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__ctors_end>
       4:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
       8:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
       c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      10:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      14:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      18:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      1c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      20:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      24:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      28:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      2c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      30:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      34:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      38:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      3c:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__vector_15>
      40:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      44:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      48:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__vector_18>
      4c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      50:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      54:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      58:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      5c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      60:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      64:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      68:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      6c:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__vector_27>
      70:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      74:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
      78:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>

0000007c <_ZL7CharSet>:
	...
      84:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
      94:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
      a4:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
      b4:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
      c4:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
      d4:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
      e4:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
      f4:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     104:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     114:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     124:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     134:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     144:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     154:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     164:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     174:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     184:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     194:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     1a4:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     1b4:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     1c4:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     1d4:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     1e4:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     1f4:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     204:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     214:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     224:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     234:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     244:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     254:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     264:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     274:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     284:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     294:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     2a4:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     2b4:	01 00 00 3c 26 23 26 3c                             ...<&#&<

000002bc <_ZL8dCharSet>:
	...
     2d8:	7c ff ff 7c 00 00 00 00 00 00 00 00 00 33 33 00     |..|.........33.
     2e8:	00 00 00 00 00 00 00 3c 3c 00 00 3c 3c 00 00 00     .......<<..<<...
	...
     304:	00 00 10 90 f0 7e 1e 90 f0 7e 1e 10 00 02 1e 1f     .....~...~......
     314:	03 02 1e 1f 03 02 00 00 00 00 78 fc cc ff ff cc     ..........x.....
     324:	cc 88 00 00 00 00 04 0c 0c 3f 3f 0c 0f 07 00 00     .........??.....
     334:	00 00 38 38 38 00 80 c0 e0 70 38 1c 00 30 38 1c     ..888....p8..08.
     344:	0e 07 03 01 38 38 38 00 00 00 00 b8 fc c6 e2 3e     ....888........>
     354:	1c 00 00 00 00 00 1f 3f 31 21 37 1e 1c 36 22 00     .......?1!7..6".
     364:	00 00 00 00 27 3f 1f 00 00 00 00 00 00 00 00 00     ....'?..........
	...
     37c:	00 00 00 f0 fc fe 07 01 01 00 00 00 00 00 00 03     ................
     38c:	0f 1f 38 20 20 00 00 00 00 00 00 01 01 07 fe fc     ..8  ...........
     39c:	f0 00 00 00 00 00 00 20 20 38 1f 0f 03 00 00 00     .......  8......
     3ac:	00 00 98 b8 e0 f8 f8 e0 b8 98 00 00 00 00 0c 0e     ................
     3bc:	03 0f 0f 03 0e 0c 00 00 00 00 80 80 80 f0 f0 80     ................
     3cc:	80 80 00 00 00 00 01 01 01 0f 0f 01 01 01 00 00     ................
	...
     3ec:	b8 f8 78 00 00 00 00 00 00 00 80 80 80 80 80 80     ..x.............
     3fc:	80 80 00 00 00 00 01 01 01 01 01 01 01 01 00 00     ................
	...
     41c:	38 38 38 00 00 00 00 00 00 00 00 00 00 80 c0 e0     888.............
     42c:	70 38 1c 0e 00 18 1c 0e 07 03 01 00 00 00 00 00     p8..............
     43c:	00 f8 fe 06 03 83 c3 63 33 1e fe f8 00 07 1f 1e     .......c3.......
     44c:	33 31 30 30 30 18 1f 07 00 00 00 0c 0c 0e ff ff     31000...........
     45c:	00 00 00 00 00 00 00 30 30 30 3f 3f 30 30 30 00     .......000??000.
     46c:	00 1c 1e 07 03 03 83 c3 e3 77 3e 1c 00 30 38 3c     .........w>..08<
     47c:	3e 37 33 31 30 30 30 30 00 0c 0e 07 c3 c3 c3 c3     >7310000........
     48c:	c3 e7 7e 3c 00 0c 1c 38 30 30 30 30 30 39 1f 0e     ..~<...8000009..
     49c:	00 c0 e0 70 38 1c 0e 07 ff ff 00 00 00 03 03 03     ...p8...........
     4ac:	03 03 03 03 3f 3f 03 03 00 3f 7f 63 63 63 63 63     ....??...?.ccccc
     4bc:	63 e3 c3 83 00 0c 1c 38 30 30 30 30 30 38 1f 0f     c......8000008..
     4cc:	00 c0 f0 f8 dc ce c7 c3 c3 c3 80 00 00 0f 1f 39     ...............9
     4dc:	30 30 30 30 30 39 1f 0f 00 03 03 03 03 03 03 c3     000009..........
     4ec:	f3 3f 0f 03 00 00 00 00 30 3c 0f 03 00 00 00 00     .?......0<......
     4fc:	00 00 bc fe e7 c3 c3 c3 e7 fe bc 00 00 0f 1f 39     ...............9
     50c:	30 30 30 30 30 39 1f 0f 00 3c 7e e7 c3 c3 c3 c3     000009...<~.....
     51c:	c3 e7 fe fc 00 00 00 30 30 30 38 1c 0e 07 03 00     .......0008.....
     52c:	00 00 00 00 70 70 70 00 00 00 00 00 00 00 00 00     ....ppp.........
     53c:	1c 1c 1c 00 00 00 00 00 00 00 00 00 70 70 70 00     ............ppp.
	...
     554:	9c fc 7c 00 00 00 00 00 00 00 c0 e0 f0 38 1c 0e     ..|..........8..
     564:	07 03 00 00 00 00 00 01 03 07 0e 1c 38 30 00 00     ............80..
     574:	00 00 60 60 60 60 60 60 60 60 60 00 00 00 06 06     ..`````````.....
     584:	06 06 06 06 06 06 06 00 00 00 03 07 0e 1c 38 f0     ..............8.
     594:	e0 c0 00 00 00 00 30 38 1c 0e 07 03 01 00 00 00     ......08........
     5a4:	00 1c 1e 07 03 83 c3 e3 77 3e 1c 00 00 00 00 00     ........w>......
     5b4:	00 37 37 00 00 00 00 00 00 f8 fe 07 f3 fb 1b fb     .77.............
     5c4:	fb 07 fe f8 00 0f 1f 18 33 37 36 37 37 36 03 01     ........376776..
     5d4:	00 00 00 e0 fc 1f 1f fc e0 00 00 00 00 38 3f 07     .............8?.
     5e4:	06 06 06 06 07 3f 38 00 00 ff ff c3 c3 c3 c3 e7     .....?8.........
     5f4:	fe bc 00 00 00 3f 3f 30 30 30 30 30 39 1f 0f 00     .....??000009...
     604:	00 f0 fc 0e 07 03 03 03 07 0e 0c 00 00 03 0f 1c     ................
     614:	38 30 30 30 38 1c 0c 00 00 ff ff 03 03 03 03 07     80008...........
     624:	0e fc f0 00 00 3f 3f 30 30 30 30 38 1c 0f 03 00     .....??00008....
     634:	00 ff ff c3 c3 c3 c3 c3 c3 03 03 00 00 3f 3f 30     .............??0
     644:	30 30 30 30 30 30 30 00 00 ff ff c3 c3 c3 c3 c3     0000000.........
     654:	c3 03 03 00 00 3f 3f 00 00 00 00 00 00 00 00 00     .....??.........
     664:	00 f0 fc 0e 07 03 c3 c3 c3 c7 c6 00 00 03 0f 1c     ................
     674:	38 30 30 30 30 3f 3f 00 00 ff ff c0 c0 c0 c0 c0     80000??.........
     684:	c0 ff ff 00 00 3f 3f 00 00 00 00 00 00 3f 3f 00     .....??......??.
     694:	00 00 00 03 03 ff ff 03 03 00 00 00 00 00 00 30     ...............0
     6a4:	30 3f 3f 30 30 00 00 00 00 00 00 00 00 00 00 00     0??00...........
     6b4:	00 ff ff 00 00 0e 1e 38 30 30 30 30 38 1f 07 00     .......800008...
     6c4:	00 ff ff c0 e0 f0 38 1c 0e 07 03 00 00 3f 3f 00     ......8......??.
     6d4:	01 03 07 0e 1c 38 30 00 00 ff ff 00 00 00 00 00     .....80.........
     6e4:	00 00 00 00 00 3f 3f 30 30 30 30 30 30 30 30 00     .....??00000000.
     6f4:	00 ff ff 1e 78 e0 e0 78 1e ff ff 00 00 3f 3f 00     ....x..x.....??.
     704:	00 01 01 00 00 3f 3f 00 00 ff ff 0e 38 f0 c0 00     .....??.....8...
     714:	00 ff ff 00 00 3f 3f 00 00 00 03 07 1c 3f 3f 00     .....??......??.
     724:	00 f0 fc 0e 07 03 03 07 0e fc f0 00 00 03 0f 1c     ................
     734:	38 30 30 38 1c 0f 03 00 00 ff ff 83 83 83 83 83     8008............
     744:	c7 fe 7c 00 00 3f 3f 01 01 01 01 01 01 00 00 00     ..|..??.........
     754:	00 f0 fc 0e 07 03 03 07 0e fc f0 00 00 03 0f 1c     ................
     764:	38 30 36 3e 1c 3f 33 00 00 ff ff 83 83 83 83 83     806>.?3.........
     774:	c7 fe 7c 00 00 3f 3f 01 01 03 07 0f 1d 38 30 00     ..|..??......80.
     784:	00 3c 7e e7 c3 c3 c3 c3 c7 8e 0c 00 00 0c 1c 38     .<~............8
     794:	30 30 30 30 39 1f 0f 00 00 00 03 03 03 ff ff 03     00009...........
     7a4:	03 03 00 00 00 00 00 00 00 3f 3f 00 00 00 00 00     .........??.....
     7b4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 07 1f 38     ...............8
     7c4:	30 30 30 30 38 1f 07 00 00 07 3f f8 c0 00 00 c0     00008.....?.....
     7d4:	f8 3f 07 00 00 00 00 01 0f 3e 3e 0f 01 00 00 00     .?.......>>.....
     7e4:	00 ff ff 00 00 80 80 00 00 ff ff 00 00 3f 3f 1c     .............??.
     7f4:	06 03 03 06 1c 3f 3f 00 00 03 0f 1c 30 e0 e0 30     .....??.....0..0
     804:	1c 0f 03 00 00 30 3c 0e 03 01 01 03 0e 3c 30 00     .....0<......<0.
     814:	00 03 0f 3c f0 c0 c0 f0 3c 0f 03 00 00 00 00 00     ...<....<.......
     824:	00 3f 3f 00 00 00 00 00 00 03 03 03 03 c3 e3 33     .??............3
     834:	1f 0f 03 00 00 30 3c 3e 33 31 30 30 30 30 30 00     .....0<>3100000.
     844:	00 00 00 ff ff 03 03 03 03 00 00 00 00 00 00 3f     ...............?
     854:	3f 30 30 30 30 00 00 00 00 0e 1c 38 70 e0 c0 80     ?0000......8p...
	...
     86c:	00 00 01 03 07 0e 1c 18 00 00 00 03 03 03 03 ff     ................
     87c:	ff 00 00 00 00 00 00 30 30 30 30 3f 3f 00 00 00     .......0000??...
     88c:	00 60 70 38 1c 0e 07 0e 1c 38 70 60 00 00 00 00     .`p8.....8p`....
	...
     8b0:	00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 00 00 00 00     ................
     8c0:	00 3e 7e 4e 00 00 00 00 00 00 00 00 00 00 00 00     .>~N............
     8d0:	00 00 00 00 00 00 40 60 60 60 60 60 60 e0 c0 00     ......@``````...
     8e0:	00 1c 3e 33 33 33 33 33 33 3f 3f 00 00 ff ff c0     ..>333333??.....
     8f0:	60 60 60 60 e0 c0 80 00 00 3f 3f 30 30 30 30 30     ````.....??00000
     900:	38 1f 0f 00 00 80 c0 e0 60 60 60 60 60 c0 80 00     8.......`````...
     910:	00 0f 1f 38 30 30 30 30 30 18 08 00 00 80 c0 e0     ...800000.......
     920:	60 60 60 e0 c0 ff ff 00 00 0f 1f 38 30 30 30 30     ```........80000
     930:	30 3f 3f 00 00 80 c0 e0 60 60 60 60 60 c0 80 00     0??.....`````...
     940:	00 0f 1f 3b 33 33 33 33 33 13 01 00 00 c0 c0 fc     ...;33333.......
     950:	fe c7 c3 c3 03 00 00 00 00 00 00 3f 3f 00 00 00     ...........??...
     960:	00 00 00 00 00 80 c0 e0 60 60 60 60 60 e0 e0 00     ........`````...
     970:	00 03 c7 ce cc cc cc cc e6 7f 3f 00 00 ff ff c0     ..........?.....
     980:	60 60 60 e0 c0 80 00 00 00 3f 3f 00 00 00 00 00     ```......??.....
     990:	3f 3f 00 00 00 00 00 00 60 ec ec 00 00 00 00 00     ??......`.......
     9a0:	00 00 00 30 30 3f 3f 30 30 00 00 00 00 00 00 00     ...00??00.......
     9b0:	00 00 60 ec ec 00 00 00 00 00 00 60 e0 c0 c0 ff     ..`........`....
     9c0:	7f 00 00 00 00 00 ff ff 00 80 c0 e0 60 00 00 00     ............`...
     9d0:	00 00 3f 3f 03 07 0f 1c 38 30 00 00 00 00 00 00     ..??....80......
     9e0:	03 ff ff 00 00 00 00 00 00 00 00 30 30 3f 3f 30     ...........00??0
     9f0:	30 00 00 00 00 e0 c0 e0 e0 c0 c0 e0 e0 c0 80 00     0...............
     a00:	00 3f 3f 00 00 3f 3f 00 00 3f 3f 00 00 00 e0 e0     .??..??..??.....
     a10:	60 60 60 60 e0 c0 80 00 00 00 3f 3f 00 00 00 00     ````......??....
     a20:	00 3f 3f 00 00 80 c0 e0 60 60 60 60 e0 c0 80 00     .??.....````....
     a30:	00 0f 1f 38 30 30 30 30 38 1f 0f 00 00 e0 e0 60     ...800008......`
     a40:	60 60 60 60 e0 c0 80 00 00 ff ff 0c 18 18 18 18     ````............
     a50:	1c 0f 07 00 00 80 c0 e0 60 60 60 60 60 e0 e0 00     ........`````...
     a60:	00 07 0f 1c 18 18 18 18 0c ff ff 00 00 00 e0 e0     ................
     a70:	c0 60 60 60 60 e0 c0 00 00 00 3f 3f 00 00 00 00     .````.....??....
     a80:	00 00 00 00 00 c0 e0 60 60 60 60 60 40 00 00 00     .......`````@...
     a90:	00 11 33 33 33 33 33 3f 1e 00 00 00 00 60 60 fe     ..33333?.....``.
     aa0:	fe 60 60 60 00 00 00 00 00 00 00 1f 3f 30 30 30     .```........?000
     ab0:	30 00 00 00 00 e0 e0 00 00 00 00 00 00 e0 e0 00     0...............
     ac0:	00 0f 1f 38 30 30 30 30 18 3f 3f 00 00 60 e0 80     ...80000.??..`..
     ad0:	00 00 00 00 80 e0 60 00 00 00 01 07 1e 38 38 1e     ......`......88.
     ae0:	07 01 00 00 00 e0 e0 00 00 e0 e0 00 00 e0 e0 00     ................
     af0:	00 07 1f 38 1c 0f 0f 1c 38 1f 07 00 00 60 e0 c0     ...8....8....`..
     b00:	80 00 80 c0 e0 60 00 00 00 30 38 1d 0f 07 0f 1d     .....`...08.....
     b10:	38 30 00 00 00 00 60 e0 80 00 00 80 e0 60 00 00     80....`......`..
     b20:	00 00 00 81 e7 7e 1e 07 01 00 00 00 00 60 60 60     .....~.......```
     b30:	60 60 e0 e0 60 20 00 00 00 30 38 3c 36 33 31 30     ``..` ...08<6310
     b40:	30 30 00 00 00 00 80 c0 fc 7e 07 03 03 03 00 00     00.......~......
     b50:	00 00 00 01 1f 3f 70 60 60 60 00 00 00 00 00 00     .....?p```......
     b60:	00 ff ff 00 00 00 00 00 00 00 00 00 00 3f 3f 00     .............??.
     b70:	00 00 00 00 00 00 03 03 03 07 7e fc c0 80 00 00     ..........~.....
     b80:	00 00 60 60 60 70 3f 1f 01 00 00 00 00 10 18 0c     ..```p?.........
     b90:	04 0c 18 10 18 0c 04 00 00 00 00 00 00 00 00 00     ................
     ba0:	00 00 00 00 00 00 80 c0 60 30 30 60 c0 80 00 00     ........`00`....
     bb0:	00 0f 0f 0c 0c 0c 0c 0c 0c 0f 0f 00                 ............

00000bbc <BoardDescription>:
     bbc:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

00000bcc <__ctors_end>:
     bcc:	11 24       	eor	r1, r1
     bce:	1f be       	out	0x3f, r1	; 63
     bd0:	cf ef       	ldi	r28, 0xFF	; 255
     bd2:	d4 e0       	ldi	r29, 0x04	; 4
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	cd bf       	out	0x3d, r28	; 61

00000bd8 <__do_copy_data>:
     bd8:	17 e0       	ldi	r17, 0x07	; 7
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b1 e0       	ldi	r27, 0x01	; 1
     bde:	e4 e7       	ldi	r30, 0x74	; 116
     be0:	f2 e5       	ldi	r31, 0x52	; 82
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <__do_copy_data+0x10>
     be4:	05 90       	lpm	r0, Z+
     be6:	0d 92       	st	X+, r0
     be8:	a0 38       	cpi	r26, 0x80	; 128
     bea:	b1 07       	cpc	r27, r17
     bec:	d9 f7       	brne	.-10     	; 0xbe4 <__do_copy_data+0xc>

00000bee <__do_clear_bss>:
     bee:	18 e0       	ldi	r17, 0x08	; 8
     bf0:	a0 e8       	ldi	r26, 0x80	; 128
     bf2:	b7 e0       	ldi	r27, 0x07	; 7
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <.do_clear_bss_start>

00000bf6 <.do_clear_bss_loop>:
     bf6:	1d 92       	st	X+, r1

00000bf8 <.do_clear_bss_start>:
     bf8:	ac 35       	cpi	r26, 0x5C	; 92
     bfa:	b1 07       	cpc	r27, r17
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <.do_clear_bss_loop>
     bfe:	0e 94 56 06 	call	0xcac	; 0xcac <main>
     c02:	0c 94 38 29 	jmp	0x5270	; 0x5270 <_exit>

00000c06 <__bad_interrupt>:
     c06:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c0a <_Z4initv>:
#include "configuration.h"


//***** chip Initialization **********************************
void init()
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
	cli();
     c0e:	f8 94       	cli
    chip_init();    					// Chip initialization
     c10:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_Z9chip_initv>

	// NORMAL CAN INIT + RECEIVING ALL BROADCAST MSGS : 
	read_cal();
     c14:	0e 94 5f 08 	call	0x10be	; 0x10be <_Z8read_calv>
	can_init(CAN_250K_BAUD);			/* Enables Mob0 for Reception! */
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_Z8can_inith>
 	can_remove_instance_from_filter( 1 ); 
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_Z31can_remove_instance_from_filterh>

    // INIT MYINSTANCE:
 	config_init();
     c24:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <_Z11config_initv>
 	can_instance_init();
     c28:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <_Z17can_instance_initv>

 	can_prep_instance_request( &msg2, rand_instance );
     c2c:	c0 ea       	ldi	r28, 0xA0	; 160
     c2e:	d7 e0       	ldi	r29, 0x07	; 7
     c30:	ce 01       	movw	r24, r28
     c32:	60 91 d1 07 	lds	r22, 0x07D1
     c36:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_Z25can_prep_instance_requestP4sCANh>
	can_send_msg_no_wait	 ( 0, &msg2	);	
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	be 01       	movw	r22, r28
     c3e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
	
    //set_rx_callback( can_file_message); No, this is handled in CAN_Q_Timeslice()
	set_configure_callback	( config_change    );
     c42:	8b e5       	ldi	r24, 0x5B	; 91
     c44:	98 e0       	ldi	r25, 0x08	; 8
     c46:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <_Z22set_configure_callbackPFvhE>
    sei();
     c4a:	78 94       	sei
    
    // Time to draw is too slow to handle real-time!
	init_leds  ();
     c4c:	0e 94 b7 1a 	call	0x356e	; 0x356e <_Z9init_ledsv>
	InitDisplay();
     c50:	0e 94 0d 0b 	call	0x161a	; 0x161a <_Z11InitDisplayv>
	backlight_init( );
     c54:	0e 94 bb 07 	call	0xf76	; 0xf76 <_Z14backlight_initv>
	OS_InitTask();
     c58:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_Z11OS_InitTaskv>
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <_Z12title_screenv>:

void title_screen()
{
	DD_DrawAllOff();
     c62:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z13DD_DrawAllOffv>
	byte startx = dCenterLargeText(6, 0, 128 );
     c66:	86 e0       	ldi	r24, 0x06	; 6
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	40 e8       	ldi	r20, 0x80	; 128
     c6c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_Z16dCenterLargeTexthhh>
     c70:	68 2f       	mov	r22, r24
	GotoAddress	( 0, startx	);
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	dText_Out	( "Beyond"	);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 1d 11 	call	0x223a	; 0x223a <_Z9dText_OutPc>
	startx = dCenterLargeText(8, 0, 128 );
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_Z16dCenterLargeTexthhh>
     c8a:	68 2f       	mov	r22, r24
	GotoAddress	( 2, startx		);
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	dText_Out	( "Kinetics"	);	
     c92:	87 e0       	ldi	r24, 0x07	; 7
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 1d 11 	call	0x223a	; 0x223a <_Z9dText_OutPc>
	GotoAddress	( 5, 0			);
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	dText_Out	( "ScratchPad"  );
     ca2:	80 e1       	ldi	r24, 0x10	; 16
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 1d 11 	call	0x223a	; 0x223a <_Z9dText_OutPc>
}
     caa:	08 95       	ret

00000cac <main>:

//***** main *****************************************************
int main(void)
{
	init();
     cac:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z4initv>
	title_screen();					
     cb0:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z12title_screenv>
	set_contrast( 0.5 );		// CONTRAST		
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	9f e3       	ldi	r25, 0x3F	; 63
     cbc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_Z12set_contrastf>
	strobe_leds(1); 
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <_Z11strobe_ledsh>
	set_brightness(0.5);
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	9f e3       	ldi	r25, 0x3F	; 63
     cce:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z14set_brightnessf>
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <main+0x34>
	       			FirstMsg = FALSE;
	       		}
				//show_all_can_msgs();
			}
		}
		delay(2000);
     cd4:	60 ed       	ldi	r22, 0xD0	; 208
     cd6:	77 e0       	ldi	r23, 0x07	; 7
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <_Z5delayl>
	

	byte FirstMsg = TRUE;
    while (1)
    {
		if (NewMessageReceivedFlag)
     ce0:	80 91 be 07 	lds	r24, 0x07BE
     ce4:	88 23       	and	r24, r24
     ce6:	b1 f3       	breq	.-20     	; 0xcd4 <main+0x28>
		{
			NewMessageReceivedFlag = FALSE;
     ce8:	10 92 be 07 	sts	0x07BE, r1
	       	led_off( 4 );
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	0e 94 22 1b 	call	0x3644	; 0x3644 <_Z7led_offh>
     cf2:	f0 cf       	rjmp	.-32     	; 0xcd4 <main+0x28>

00000cf4 <_Z22can_proc_cursor_to_cmdP4sCAN>:
}

/*******************************************************************/
// PROTECTED FUNCTIONS:
void can_proc_cursor_to_cmd( struct sCAN* mMsg )
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
	// MOVE CURSOR:
	byte Line	  = mMsg->data[1];
	byte StartCol = mMsg->data[2];
	GotoAddress(Line, StartCol );
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	6f 81       	ldd	r22, Y+7	; 0x07
     cfe:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>

	// CHANGE FONT IF REQUESTED :		
	byte NewFont  = mMsg->data[3];	
     d02:	88 85       	ldd	r24, Y+8	; 0x08
	if (NewFont)
     d04:	88 23       	and	r24, r24
     d06:	11 f0       	breq	.+4      	; 0xd0c <_Z22can_proc_cursor_to_cmdP4sCAN+0x18>
		SelectedFont = NewFont;
     d08:	80 93 1b 01 	sts	0x011B, r24
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <_Z25can_proc_clear_screen_cmdP4sCAN>:
void can_proc_clear_screen_cmd( struct sCAN* mMsg )
{	
	DD_DrawAllOff();
     d12:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z13DD_DrawAllOffv>
}
     d16:	08 95       	ret

00000d18 <_Z26can_proc_all_on_screen_cmdP4sCAN>:
void can_proc_all_on_screen_cmd( struct sCAN* mMsg )
{	
	DD_DrawAllOn();
     d18:	0e 94 04 0c 	call	0x1808	; 0x1808 <_Z12DD_DrawAllOnv>
}
     d1c:	08 95       	ret

00000d1e <_Z22can_proc_clear_eol_cmdP4sCAN>:
void can_proc_clear_eol_cmd( struct sCAN* mMsg )
{	
     d1e:	fc 01       	movw	r30, r24
	byte Line	  = mMsg->data[1];
	byte StartCol = mMsg->data[2];
	byte EndCol	  = mMsg->data[3];
	DD_EraseLine( Line, StartCol, EndCol );
     d20:	86 81       	ldd	r24, Z+6	; 0x06
     d22:	67 81       	ldd	r22, Z+7	; 0x07
     d24:	40 85       	ldd	r20, Z+8	; 0x08
     d26:	0e 94 41 0c 	call	0x1882	; 0x1882 <_Z12DD_EraseLinehhh>
}
     d2a:	08 95       	ret

00000d2c <_Z23can_proc_draw_graph_cmdP4sCAN>:
void can_proc_draw_graph_cmd( struct sCAN* mMsg )
{	// not implemented
}
     d2c:	08 95       	ret

00000d2e <_Z23can_proc_draw_polar_cmdP4sCAN>:
void can_proc_draw_polar_cmd( struct sCAN* mMsg )
{	// not implemented
}
     d2e:	08 95       	ret

00000d30 <_Z24can_proc_monitor_can_cmdP4sCAN>:
	/* Sender to provide either:   
	#define NO_HISTORY_OP_MODE 		0
	#define NORMAL_HISTORY_OP_MODE 	1
	#define MAILBOX_HISTORY_OP_MODE 2	*/
	//OperationalMode = mMsg->data[1];	
}
     d30:	08 95       	ret

00000d32 <_Z22can_proc_draw_line_cmdP4sCAN>:
void can_proc_draw_line_cmd( struct sCAN* mMsg )
{
}
     d32:	08 95       	ret

00000d34 <_Z28can_proc_draw_horizontal_cmdP4sCAN>:
void can_proc_draw_horizontal_cmd( struct sCAN* mMsg )
{
     d34:	fc 01       	movw	r30, r24
	byte x_row	  = mMsg->data[1];		// [0..63]
	byte StartCol = mMsg->data[2];		// [0..127]
	byte EndCol   = mMsg->data[3];		// [0..127]	
	DD_DrawHorizontalLine( x_row, StartCol, EndCol );
     d36:	86 81       	ldd	r24, Z+6	; 0x06
     d38:	67 81       	ldd	r22, Z+7	; 0x07
     d3a:	40 85       	ldd	r20, Z+8	; 0x08
     d3c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_Z21DD_DrawHorizontalLinehhh>
}
     d40:	08 95       	ret

00000d42 <_Z26can_proc_draw_vertical_cmdP4sCAN>:

void can_proc_draw_vertical_cmd( struct sCAN* mMsg )
{
     d42:	fc 01       	movw	r30, r24
	byte y_col	  = mMsg->data[1];		// [0..63]
	byte StartRow = mMsg->data[2];		// [0..127]
	byte EndRow   = mMsg->data[3];		// [0..127]	
	DD_DrawVerticalLine	( StartRow, EndRow, y_col );
     d44:	87 81       	ldd	r24, Z+7	; 0x07
     d46:	60 85       	ldd	r22, Z+8	; 0x08
     d48:	46 81       	ldd	r20, Z+6	; 0x06
     d4a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_Z19DD_DrawVerticalLinehhh>
}
     d4e:	08 95       	ret

00000d50 <_Z21can_proc_draw_arc_cmdP4sCAN>:

void can_proc_draw_arc_cmd( struct sCAN* mMsg )
{
}
     d50:	08 95       	ret

00000d52 <_Z24can_proc_draw_circle_cmdP4sCAN>:
void can_proc_draw_circle_cmd( struct sCAN* mMsg )
{
}
     d52:	08 95       	ret

00000d54 <_Z21can_proc_draw_box_cmdP4sCAN>:
void can_proc_draw_box_cmd( struct sCAN* mMsg )
{
     d54:	fc 01       	movw	r30, r24
	byte RowStart	 = mMsg->data[1];		// [0..63]
	byte RowEnd 	 = mMsg->data[2];		// [0..63]
	byte ColumnStart = mMsg->data[3];		// [0..127]	
	byte ColumnEnd   = mMsg->data[4];		// [0..127]
	DD_DrawBox( RowStart, RowEnd, ColumnStart, ColumnEnd );
     d56:	86 81       	ldd	r24, Z+6	; 0x06
     d58:	67 81       	ldd	r22, Z+7	; 0x07
     d5a:	40 85       	ldd	r20, Z+8	; 0x08
     d5c:	21 85       	ldd	r18, Z+9	; 0x09
     d5e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_Z10DD_DrawBoxhhhh>
}
     d62:	08 95       	ret

00000d64 <_Z26can_proc_invert_region_cmdP4sCAN>:
void can_proc_invert_region_cmd( struct sCAN* mMsg )
{
}
     d64:	08 95       	ret

00000d66 <_Z23can_proc_set_window_cmdP4sCAN>:
void can_proc_set_window_cmd( struct sCAN* mMsg )
{
}
     d66:	08 95       	ret

00000d68 <_Z17can_proc_beep_cmdP4sCAN>:
void can_proc_beep_cmd( struct sCAN* mMsg )
{
     d68:	fc 01       	movw	r30, r24
	byte On_ms	   = mMsg->data[1];		// [0..63]
	byte Off_ms    = mMsg->data[2];		// [0..63]
	byte NumBeeps  = mMsg->data[3];		// number of repeat times
	set_beep_times(On_ms, Off_ms, NumBeeps);
     d6a:	67 81       	ldd	r22, Z+7	; 0x07
     d6c:	86 81       	ldd	r24, Z+6	; 0x06
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	40 85       	ldd	r20, Z+8	; 0x08
     d74:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_Z14set_beep_timestth>
}
     d78:	08 95       	ret

00000d7a <_Z22can_proc_backlight_cmdP4sCAN>:
void can_proc_backlight_cmd( struct sCAN* mMsg )
{
     d7a:	fc 01       	movw	r30, r24
	word tenth_percent;
	byte hi_ms	 = mMsg->data[1];		// Percent * 10  (ie 100.0 % integer representation)
	byte lo_ms   = mMsg->data[2];		// 
	tenth_percent = lo_ms;
     d7c:	87 81       	ldd	r24, Z+7	; 0x07
	tenth_percent += (hi_ms<<8);
     d7e:	76 81       	ldd	r23, Z+6	; 0x06
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	68 0f       	add	r22, r24
     d84:	71 1d       	adc	r23, r1
	float duty = tenth_percent / 1000.;
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__floatunsisf>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4a e7       	ldi	r20, 0x7A	; 122
     d94:	54 e4       	ldi	r21, 0x44	; 68
     d96:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__divsf3>
	set_brightness( duty );
     d9a:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z14set_brightnessf>
}
     d9e:	08 95       	ret

00000da0 <_Z21can_proc_contrast_cmdP4sCAN>:
void can_proc_contrast_cmd( struct sCAN* mMsg )
{
     da0:	fc 01       	movw	r30, r24
	word tenth_percent;
	byte hi_ms	 = mMsg->data[1];		// Percent * 10  (ie 100.0 % integer representation)
	byte lo_ms   = mMsg->data[2];		// 
	tenth_percent = lo_ms;
     da2:	87 81       	ldd	r24, Z+7	; 0x07
	tenth_percent += (hi_ms<<8);
     da4:	76 81       	ldd	r23, Z+6	; 0x06
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	68 0f       	add	r22, r24
     daa:	71 1d       	adc	r23, r1
	float duty = tenth_percent / 1000.;
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__floatunsisf>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e7       	ldi	r20, 0x7A	; 122
     dba:	54 e4       	ldi	r21, 0x44	; 68
     dbc:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__divsf3>
	set_contrast( duty );		// CONTRAST
     dc0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_Z12set_contrastf>
}
     dc4:	08 95       	ret

00000dc6 <_Z24can_proc_lcd_command_msgP4sCAN>:
void title_screen();		// prototype for function in lcd_main.can

/*******************************************************************/
// CAN MESSAGE HANDLING FUNCTIONS:
void can_proc_lcd_command_msg( struct sCAN* mMsg )
{
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	ec 01       	movw	r28, r24
    led_on( 4 );
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_Z6led_onh>
	switch (mMsg->data[0])
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	8b 30       	cpi	r24, 0x0B	; 11
     dd6:	89 f1       	breq	.+98     	; 0xe3a <_Z24can_proc_lcd_command_msgP4sCAN+0x74>
     dd8:	8c 30       	cpi	r24, 0x0C	; 12
     dda:	70 f0       	brcs	.+28     	; 0xdf8 <_Z24can_proc_lcd_command_msgP4sCAN+0x32>
     ddc:	80 33       	cpi	r24, 0x30	; 48
     dde:	e9 f1       	breq	.+122    	; 0xe5a <_Z24can_proc_lcd_command_msgP4sCAN+0x94>
     de0:	81 33       	cpi	r24, 0x31	; 49
     de2:	b0 f4       	brcc	.+44     	; 0xe10 <_Z24can_proc_lcd_command_msgP4sCAN+0x4a>
     de4:	8e 30       	cpi	r24, 0x0E	; 14
     de6:	a9 f1       	breq	.+106    	; 0xe52 <_Z24can_proc_lcd_command_msgP4sCAN+0x8c>
     de8:	80 32       	cpi	r24, 0x20	; 32
     dea:	19 f4       	brne	.+6      	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	case LCD_CMD_DRAW_ARC		:	can_proc_draw_arc_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_CIRCLE	:	can_proc_draw_circle_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_BOX		:	can_proc_draw_box_cmd		(mMsg);		break;
	case LCD_CMD_INVERT_REGION	:	can_proc_invert_region_cmd	(mMsg);		break;
	case LCD_CMD_SET_WINDOW		:	can_proc_set_window_cmd		(mMsg);		break;
	case LCD_CMD_BEEP			:	can_proc_beep_cmd			(mMsg);		break;
     dec:	ce 01       	movw	r24, r28
     dee:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z17can_proc_beep_cmdP4sCAN>
	case LCD_CMD_BACKLIGHT		:	can_proc_backlight_cmd		(mMsg);		break;
	case LCD_CMD_CONTRAST		:	can_proc_contrast_cmd		(mMsg);		break;	
	case LCD_CMD_TITLE_SCREEN	:	title_screen();							break;	
	default: 		break;
	}
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret
/*******************************************************************/
// CAN MESSAGE HANDLING FUNCTIONS:
void can_proc_lcd_command_msg( struct sCAN* mMsg )
{
    led_on( 4 );
	switch (mMsg->data[0])
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	e1 f0       	breq	.+56     	; 0xe34 <_Z24can_proc_lcd_command_msgP4sCAN+0x6e>
     dfc:	85 30       	cpi	r24, 0x05	; 5
     dfe:	78 f0       	brcs	.+30     	; 0xe1e <_Z24can_proc_lcd_command_msgP4sCAN+0x58>
     e00:	85 30       	cpi	r24, 0x05	; 5
     e02:	f9 f0       	breq	.+62     	; 0xe42 <_Z24can_proc_lcd_command_msgP4sCAN+0x7c>
     e04:	8a 30       	cpi	r24, 0x0A	; 10
     e06:	a9 f7       	brne	.-22     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	case LCD_CMD_CLEAR_EOL		:	can_proc_clear_eol_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_GRAPH		:	can_proc_draw_graph_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_POLAR		:	can_proc_draw_polar_cmd		(mMsg);		break;
	case LCD_CMD_MONITOR_CAN	:	can_proc_monitor_can_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_LINE		:	can_proc_draw_line_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_HORIZONTAL:	can_proc_draw_horizontal_cmd(mMsg);		break;
     e08:	ce 01       	movw	r24, r28
     e0a:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z28can_proc_draw_horizontal_cmdP4sCAN>
     e0e:	f1 cf       	rjmp	.-30     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
/*******************************************************************/
// CAN MESSAGE HANDLING FUNCTIONS:
void can_proc_lcd_command_msg( struct sCAN* mMsg )
{
    led_on( 4 );
	switch (mMsg->data[0])
     e10:	81 33       	cpi	r24, 0x31	; 49
     e12:	61 f0       	breq	.+24     	; 0xe2c <_Z24can_proc_lcd_command_msgP4sCAN+0x66>
     e14:	89 39       	cpi	r24, 0x99	; 153
     e16:	69 f7       	brne	.-38     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	case LCD_CMD_INVERT_REGION	:	can_proc_invert_region_cmd	(mMsg);		break;
	case LCD_CMD_SET_WINDOW		:	can_proc_set_window_cmd		(mMsg);		break;
	case LCD_CMD_BEEP			:	can_proc_beep_cmd			(mMsg);		break;
	case LCD_CMD_BACKLIGHT		:	can_proc_backlight_cmd		(mMsg);		break;
	case LCD_CMD_CONTRAST		:	can_proc_contrast_cmd		(mMsg);		break;	
	case LCD_CMD_TITLE_SCREEN	:	title_screen();							break;	
     e18:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z12title_screenv>
     e1c:	ea cf       	rjmp	.-44     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
/*******************************************************************/
// CAN MESSAGE HANDLING FUNCTIONS:
void can_proc_lcd_command_msg( struct sCAN* mMsg )
{
    led_on( 4 );
	switch (mMsg->data[0])
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	a1 f0       	breq	.+40     	; 0xe4a <_Z24can_proc_lcd_command_msgP4sCAN+0x84>
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	31 f7       	brne	.-52     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	if (NewFont)
		SelectedFont = NewFont;
}
void can_proc_clear_screen_cmd( struct sCAN* mMsg )
{	
	DD_DrawAllOff();
     e26:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z13DD_DrawAllOffv>
    led_on( 4 );
	switch (mMsg->data[0])
	{
	case LCD_CMD_NO_ACTION		:		break;
	case LCD_CMD_CURSOR_TO		:	can_proc_cursor_to_cmd		(mMsg);		break;
	case LCD_CMD_CLEAR_SCREEN	:	can_proc_clear_screen_cmd	(mMsg);		break;
     e2a:	e3 cf       	rjmp	.-58     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	case LCD_CMD_DRAW_BOX		:	can_proc_draw_box_cmd		(mMsg);		break;
	case LCD_CMD_INVERT_REGION	:	can_proc_invert_region_cmd	(mMsg);		break;
	case LCD_CMD_SET_WINDOW		:	can_proc_set_window_cmd		(mMsg);		break;
	case LCD_CMD_BEEP			:	can_proc_beep_cmd			(mMsg);		break;
	case LCD_CMD_BACKLIGHT		:	can_proc_backlight_cmd		(mMsg);		break;
	case LCD_CMD_CONTRAST		:	can_proc_contrast_cmd		(mMsg);		break;	
     e2c:	ce 01       	movw	r24, r28
     e2e:	0e 94 d0 06 	call	0xda0	; 0xda0 <_Z21can_proc_contrast_cmdP4sCAN>
     e32:	df cf       	rjmp	.-66     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
{	
	DD_DrawAllOff();
}
void can_proc_all_on_screen_cmd( struct sCAN* mMsg )
{	
	DD_DrawAllOn();
     e34:	0e 94 04 0c 	call	0x1808	; 0x1808 <_Z12DD_DrawAllOnv>
	switch (mMsg->data[0])
	{
	case LCD_CMD_NO_ACTION		:		break;
	case LCD_CMD_CURSOR_TO		:	can_proc_cursor_to_cmd		(mMsg);		break;
	case LCD_CMD_CLEAR_SCREEN	:	can_proc_clear_screen_cmd	(mMsg);		break;
	case LCD_CMD_ALL_ON_SCREEN	:	can_proc_all_on_screen_cmd	(mMsg);		break;
     e38:	dc cf       	rjmp	.-72     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	case LCD_CMD_DRAW_GRAPH		:	can_proc_draw_graph_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_POLAR		:	can_proc_draw_polar_cmd		(mMsg);		break;
	case LCD_CMD_MONITOR_CAN	:	can_proc_monitor_can_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_LINE		:	can_proc_draw_line_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_HORIZONTAL:	can_proc_draw_horizontal_cmd(mMsg);		break;
	case LCD_CMD_DRAW_VERTICAL	:	can_proc_draw_vertical_cmd	(mMsg);		break;
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_Z26can_proc_draw_vertical_cmdP4sCAN>
     e40:	d8 cf       	rjmp	.-80     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	{
	case LCD_CMD_NO_ACTION		:		break;
	case LCD_CMD_CURSOR_TO		:	can_proc_cursor_to_cmd		(mMsg);		break;
	case LCD_CMD_CLEAR_SCREEN	:	can_proc_clear_screen_cmd	(mMsg);		break;
	case LCD_CMD_ALL_ON_SCREEN	:	can_proc_all_on_screen_cmd	(mMsg);		break;
	case LCD_CMD_CLEAR_EOL		:	can_proc_clear_eol_cmd		(mMsg);		break;
     e42:	ce 01       	movw	r24, r28
     e44:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_Z22can_proc_clear_eol_cmdP4sCAN>
     e48:	d4 cf       	rjmp	.-88     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
{
    led_on( 4 );
	switch (mMsg->data[0])
	{
	case LCD_CMD_NO_ACTION		:		break;
	case LCD_CMD_CURSOR_TO		:	can_proc_cursor_to_cmd		(mMsg);		break;
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_Z22can_proc_cursor_to_cmdP4sCAN>
     e50:	d0 cf       	rjmp	.-96     	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	case LCD_CMD_DRAW_LINE		:	can_proc_draw_line_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_HORIZONTAL:	can_proc_draw_horizontal_cmd(mMsg);		break;
	case LCD_CMD_DRAW_VERTICAL	:	can_proc_draw_vertical_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_ARC		:	can_proc_draw_arc_cmd		(mMsg);		break;
	case LCD_CMD_DRAW_CIRCLE	:	can_proc_draw_circle_cmd	(mMsg);		break;
	case LCD_CMD_DRAW_BOX		:	can_proc_draw_box_cmd		(mMsg);		break;
     e52:	ce 01       	movw	r24, r28
     e54:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z21can_proc_draw_box_cmdP4sCAN>
     e58:	cc cf       	rjmp	.-104    	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>
	case LCD_CMD_INVERT_REGION	:	can_proc_invert_region_cmd	(mMsg);		break;
	case LCD_CMD_SET_WINDOW		:	can_proc_set_window_cmd		(mMsg);		break;
	case LCD_CMD_BEEP			:	can_proc_beep_cmd			(mMsg);		break;
	case LCD_CMD_BACKLIGHT		:	can_proc_backlight_cmd		(mMsg);		break;
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_Z22can_proc_backlight_cmdP4sCAN>
     e60:	c8 cf       	rjmp	.-112    	; 0xdf2 <_Z24can_proc_lcd_command_msgP4sCAN+0x2c>

00000e62 <_Z22can_proc_draw_text_msgP4sCAN>:
	default: 		break;
	}
}

void can_proc_draw_text_msg( sCAN* mMsg )
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	29 97       	sbiw	r28, 0x09	; 9
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	dc 01       	movw	r26, r24
	int i=0;
	char string[9];
	for (i=0; i<mMsg->header.DLC; i++)
     e7c:	14 96       	adiw	r26, 0x04	; 4
     e7e:	2c 91       	ld	r18, X
     e80:	14 97       	sbiw	r26, 0x04	; 4
     e82:	26 95       	lsr	r18
     e84:	2f 70       	andi	r18, 0x0F	; 15
     e86:	91 f1       	breq	.+100    	; 0xeec <_Z22can_proc_draw_text_msgP4sCAN+0x8a>
	case LCD_CMD_TITLE_SCREEN	:	title_screen();							break;	
	default: 		break;
	}
}

void can_proc_draw_text_msg( sCAN* mMsg )
     e88:	15 96       	adiw	r26, 0x05	; 5
{
	int i=0;
	char string[9];
	for (i=0; i<mMsg->header.DLC; i++)
     e8a:	8e 01       	movw	r16, r28
     e8c:	0f 5f       	subi	r16, 0xFF	; 255
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	f8 01       	movw	r30, r16
	case LCD_CMD_TITLE_SCREEN	:	title_screen();							break;	
	default: 		break;
	}
}

void can_proc_draw_text_msg( sCAN* mMsg )
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	c8 01       	movw	r24, r16
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
{
	int i=0;
	char string[9];
	for (i=0; i<mMsg->header.DLC; i++)
		string[i] = mMsg->data[i];
     e9a:	4d 91       	ld	r20, X+
     e9c:	41 93       	st	Z+, r20

void can_proc_draw_text_msg( sCAN* mMsg )
{
	int i=0;
	char string[9];
	for (i=0; i<mMsg->header.DLC; i++)
     e9e:	e8 17       	cp	r30, r24
     ea0:	f9 07       	cpc	r31, r25
     ea2:	d9 f7       	brne	.-10     	; 0xe9a <_Z22can_proc_draw_text_msgP4sCAN+0x38>
     ea4:	f9 01       	movw	r30, r18
		string[i] = mMsg->data[i];
	string[i] = 0;	// null terminator
     ea6:	e0 0f       	add	r30, r16
     ea8:	f1 1f       	adc	r31, r17
     eaa:	10 82       	st	Z, r1

	//GotoAddress( 4, 1 );
	switch(SelectedFont)
     eac:	80 91 1b 01 	lds	r24, 0x011B
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	81 f0       	breq	.+32     	; 0xed4 <_Z22can_proc_draw_text_msgP4sCAN+0x72>
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	91 f0       	breq	.+36     	; 0xedc <_Z22can_proc_draw_text_msgP4sCAN+0x7a>
	{
	case 1	: Text_Out ( string );			break;
	case 2	: dText_Out( string );			break;
	case 3	: selectFont( Arial_bold_14 );
			  aText_Out( string );			break;
	default : Text_Out ( string );			break;
     eb8:	c8 01       	movw	r24, r16
     eba:	0e 94 1e 10 	call	0x203c	; 0x203c <_Z8Text_OutPc>
	}
}
     ebe:	29 96       	adiw	r28, 0x09	; 9
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	08 95       	ret

	//GotoAddress( 4, 1 );
	switch(SelectedFont)
	{
	case 1	: Text_Out ( string );			break;
	case 2	: dText_Out( string );			break;
     ed4:	c8 01       	movw	r24, r16
     ed6:	0e 94 1d 11 	call	0x223a	; 0x223a <_Z9dText_OutPc>
     eda:	f1 cf       	rjmp	.-30     	; 0xebe <_Z22can_proc_draw_text_msgP4sCAN+0x5c>
	case 3	: selectFont( Arial_bold_14 );
     edc:	84 e4       	ldi	r24, 0x44	; 68
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z10selectFontPKh>
			  aText_Out( string );			break;
     ee4:	c8 01       	movw	r24, r16
     ee6:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_Z9aText_OutPc>
     eea:	e9 cf       	rjmp	.-46     	; 0xebe <_Z22can_proc_draw_text_msgP4sCAN+0x5c>

void can_proc_draw_text_msg( sCAN* mMsg )
{
	int i=0;
	char string[9];
	for (i=0; i<mMsg->header.DLC; i++)
     eec:	e0 e0       	ldi	r30, 0x00	; 0
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8e 01       	movw	r16, r28
     ef2:	0f 5f       	subi	r16, 0xFF	; 255
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	d7 cf       	rjmp	.-82     	; 0xea6 <_Z22can_proc_draw_text_msgP4sCAN+0x44>

00000ef8 <_Z16can_file_messageP4sCAN>:
/* INCOMING MESSAGE RESPONSES : 
Call back function from the CAN ISR().  
Will parse the result based on the msg id.  */
/************************************************************/
void can_file_message( sCAN* mMsg )
{
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	ec 01       	movw	r28, r24
	if ( match( mMsg->id , 		create_CAN_eid(ID_LCD_COMMAND, MyInstance)) )
     efe:	80 e6       	ldi	r24, 0x60	; 96
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	60 91 cc 07 	lds	r22, 0x07CC
     f06:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
     f0a:	9b 01       	movw	r18, r22
     f0c:	ac 01       	movw	r20, r24
     f0e:	68 81       	ld	r22, Y
     f10:	79 81       	ldd	r23, Y+1	; 0x01
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
     f1a:	88 23       	and	r24, r24
     f1c:	c9 f4       	brne	.+50     	; 0xf50 <_Z16can_file_messageP4sCAN+0x58>
	{
		//SET_LED_1();
		can_proc_lcd_command_msg( mMsg );
	}
	else if ( match(mMsg->id ,	create_CAN_eid(ID_LCD_DRAW_TEXT, MyInstance)) )
     f1e:	81 e6       	ldi	r24, 0x61	; 97
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	60 91 cc 07 	lds	r22, 0x07CC
     f26:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
     f2e:	68 81       	ld	r22, Y
     f30:	79 81       	ldd	r23, Y+1	; 0x01
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
     f3a:	88 23       	and	r24, r24
     f3c:	19 f4       	brne	.+6      	; 0xf44 <_Z16can_file_messageP4sCAN+0x4c>
	}
	/*else if ( id_match(mMsg->id , create_CAN_eid(ID_COLLECT_GRAPH_DATA, MyInstance)) )
	{
		can_proc_collect_data_msg( mMsg );
	}*/
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret
		can_proc_lcd_command_msg( mMsg );
	}
	else if ( match(mMsg->id ,	create_CAN_eid(ID_LCD_DRAW_TEXT, MyInstance)) )
	{
		//SET_LED_3();
		can_proc_draw_text_msg( mMsg );
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 31 07 	call	0xe62	; 0xe62 <_Z22can_proc_draw_text_msgP4sCAN>
	}
	/*else if ( id_match(mMsg->id , create_CAN_eid(ID_COLLECT_GRAPH_DATA, MyInstance)) )
	{
		can_proc_collect_data_msg( mMsg );
	}*/
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret
void can_file_message( sCAN* mMsg )
{
	if ( match( mMsg->id , 		create_CAN_eid(ID_LCD_COMMAND, MyInstance)) )
	{
		//SET_LED_1();
		can_proc_lcd_command_msg( mMsg );
     f50:	ce 01       	movw	r24, r28
     f52:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <_Z24can_proc_lcd_command_msgP4sCAN>
	}
	/*else if ( id_match(mMsg->id , create_CAN_eid(ID_COLLECT_GRAPH_DATA, MyInstance)) )
	{
		can_proc_collect_data_msg( mMsg );
	}*/
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <_Z25can_proc_collect_data_msgP4sCAN>:
}
       	
void can_proc_collect_data_msg( struct sCAN* mMsg )
{
	// Not implemented
}
     f5c:	08 95       	ret

00000f5e <_Z4buzzh>:
		LCD_CONTROL_PORT &= ~(1<<LCD_BACKLIGHT);
}*/

void buzz( byte mOn )
{
	if (mOn)
     f5e:	88 23       	and	r24, r24
     f60:	11 f4       	brne	.+4      	; 0xf66 <_Z4buzzh+0x8>
		BUZZER_PORT |= BUZZER_MASK;
	else
		BUZZER_PORT &= ~BUZZER_MASK;	
     f62:	59 98       	cbi	0x0b, 1	; 11
     f64:	08 95       	ret
}*/

void buzz( byte mOn )
{
	if (mOn)
		BUZZER_PORT |= BUZZER_MASK;
     f66:	59 9a       	sbi	0x0b, 1	; 11
     f68:	08 95       	ret

00000f6a <_Z12set_contrastf>:
		BUZZER_PORT &= ~BUZZER_MASK;	
}

void set_contrast( float mDuty )
{
	set_dutyA( mDuty );
     f6a:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_Z9set_dutyAf>
}
     f6e:	08 95       	ret

00000f70 <_Z14set_brightnessf>:
void set_brightness( float mDuty )
{
	set_dutyB( mDuty );
     f70:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_Z9set_dutyBf>
}
     f74:	08 95       	ret

00000f76 <_Z14backlight_initv>:

void backlight_init()
{
	// SET OUTPUT:
	BUZZER_DDR		 |= BUZZER_MASK;
     f76:	51 9a       	sbi	0x0a, 1	; 10
	LIGHT_SENSOR_DDR &= ~LIGHT_SENSOR_MASK;
     f78:	55 98       	cbi	0x0a, 5	; 10
	CONTRAST_DDR     |= (1<<CONTRAST_PIN);
     f7a:	52 9a       	sbi	0x0a, 2	; 10

	// adc_init();
	pwm_init( 5000., TRUE, TRUE );
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e4       	ldi	r23, 0x40	; 64
     f80:	8c e9       	ldi	r24, 0x9C	; 156
     f82:	95 e4       	ldi	r25, 0x45	; 69
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_Z8pwm_initfhh>
		BUZZER_PORT &= ~BUZZER_MASK;	
}

void set_contrast( float mDuty )
{
	set_dutyA( mDuty );
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	80 e4       	ldi	r24, 0x40	; 64
     f92:	9f e3       	ldi	r25, 0x3F	; 63
     f94:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_Z9set_dutyAf>
}
void set_brightness( float mDuty )
{
	set_dutyB( mDuty );
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	9f e3       	ldi	r25, 0x3F	; 63
     fa0:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_Z9set_dutyBf>

	// adc_init();
	pwm_init( 5000., TRUE, TRUE );
	set_contrast  (0.75);		// CONTRAST
	set_brightness(0.5);		// BACKLIGHT
}
     fa4:	08 95       	ret

00000fa6 <_Z14set_beep_timestth>:

void set_beep_times( word mOn_ms, word mOff_ms, byte mNumBeeps )
{
	BeepOn_ms  = mOn_ms;
     fa6:	90 93 81 07 	sts	0x0781, r25
     faa:	80 93 80 07 	sts	0x0780, r24
	BeepOff_ms = mOff_ms;
     fae:	70 93 83 07 	sts	0x0783, r23
     fb2:	60 93 82 07 	sts	0x0782, r22
	NumBeeps  = mNumBeeps;
     fb6:	40 93 85 07 	sts	0x0785, r20
     fba:	10 92 86 07 	sts	0x0786, r1
	BeepState = BEEP_ON;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 84 07 	sts	0x0784, r24
	tics      = 0;
     fc4:	10 92 88 07 	sts	0x0788, r1
     fc8:	10 92 87 07 	sts	0x0787, r1
}*/

void buzz( byte mOn )
{
	if (mOn)
		BUZZER_PORT |= BUZZER_MASK;
     fcc:	59 9a       	sbi	0x0b, 1	; 11
	BeepOff_ms = mOff_ms;
	NumBeeps  = mNumBeeps;
	BeepState = BEEP_ON;
	tics      = 0;
	buzz( 1 );
}
     fce:	08 95       	ret

00000fd0 <_Z19backlight_timeslicev>:

// Call every 1ms
void backlight_timeslice()
{	
	tics++;
     fd0:	80 91 87 07 	lds	r24, 0x0787
     fd4:	90 91 88 07 	lds	r25, 0x0788
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	90 93 88 07 	sts	0x0788, r25
     fde:	80 93 87 07 	sts	0x0787, r24
	
	switch(BeepState)
     fe2:	20 91 84 07 	lds	r18, 0x0784
     fe6:	21 30       	cpi	r18, 0x01	; 1
     fe8:	99 f0       	breq	.+38     	; 0x1010 <_Z19backlight_timeslicev+0x40>
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	09 f0       	breq	.+2      	; 0xff0 <_Z19backlight_timeslicev+0x20>
     fee:	08 95       	ret
				if (NumBeeps<=0)
					BeepState = BEEP_OFF;
			}
			break;
	case BEEP_SILENT:
			if (tics == BeepOff_ms) {	
     ff0:	20 91 82 07 	lds	r18, 0x0782
     ff4:	30 91 83 07 	lds	r19, 0x0783
     ff8:	82 17       	cp	r24, r18
     ffa:	93 07       	cpc	r25, r19
     ffc:	c1 f7       	brne	.-16     	; 0xfee <_Z19backlight_timeslicev+0x1e>
}*/

void buzz( byte mOn )
{
	if (mOn)
		BUZZER_PORT |= BUZZER_MASK;
     ffe:	59 9a       	sbi	0x0b, 1	; 11
			}
			break;
	case BEEP_SILENT:
			if (tics == BeepOff_ms) {	
				buzz( 1 );
				tics  = 0;
    1000:	10 92 88 07 	sts	0x0788, r1
    1004:	10 92 87 07 	sts	0x0787, r1
				BeepState = BEEP_ON;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 84 07 	sts	0x0784, r24
    100e:	08 95       	ret
	tics++;
	
	switch(BeepState)
	{
	case BEEP_ON:	
			if (tics == BeepOn_ms) {
    1010:	20 91 80 07 	lds	r18, 0x0780
    1014:	30 91 81 07 	lds	r19, 0x0781
    1018:	82 17       	cp	r24, r18
    101a:	93 07       	cpc	r25, r19
    101c:	41 f7       	brne	.-48     	; 0xfee <_Z19backlight_timeslicev+0x1e>
void buzz( byte mOn )
{
	if (mOn)
		BUZZER_PORT |= BUZZER_MASK;
	else
		BUZZER_PORT &= ~BUZZER_MASK;	
    101e:	59 98       	cbi	0x0b, 1	; 11
	switch(BeepState)
	{
	case BEEP_ON:	
			if (tics == BeepOn_ms) {
				buzz( 0 );
				tics = 0;
    1020:	10 92 88 07 	sts	0x0788, r1
    1024:	10 92 87 07 	sts	0x0787, r1
				NumBeeps--;
    1028:	80 91 85 07 	lds	r24, 0x0785
    102c:	90 91 86 07 	lds	r25, 0x0786
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	90 93 86 07 	sts	0x0786, r25
    1036:	80 93 85 07 	sts	0x0785, r24
				BeepState = BEEP_SILENT;
    103a:	22 e0       	ldi	r18, 0x02	; 2
    103c:	20 93 84 07 	sts	0x0784, r18
				if (NumBeeps<=0)
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	a9 f6       	brne	.-86     	; 0xfee <_Z19backlight_timeslicev+0x1e>
					BeepState = BEEP_OFF;
    1044:	10 92 84 07 	sts	0x0784, r1
    1048:	08 95       	ret

0000104a <_Z11OS_Dispatchv>:
Description	:  Dispatches the tasks when their time is due
******************************************************************************/
int t=0;
void OS_Dispatch()
{	
	backlight_timeslice();		
    104a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_Z19backlight_timeslicev>
	{		
	}
	if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
	{
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    104e:	20 91 48 08 	lds	r18, 0x0848
    1052:	30 91 49 08 	lds	r19, 0x0849
    1056:	c9 01       	movw	r24, r18
    1058:	62 e3       	ldi	r22, 0x32	; 50
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	0e 94 35 28 	call	0x506a	; 0x506a <__divmodhi4>
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	e9 f0       	breq	.+58     	; 0x109e <_Z11OS_Dispatchv+0x54>
	{
		CAN_Q_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
    1064:	c9 01       	movw	r24, r18
    1066:	64 e6       	ldi	r22, 0x64	; 100
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	0e 94 35 28 	call	0x506a	; 0x506a <__divmodhi4>
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	81 f4       	brne	.+32     	; 0x1092 <_Z11OS_Dispatchv+0x48>
	{
		if (t) {
    1072:	80 91 89 07 	lds	r24, 0x0789
    1076:	90 91 8a 07 	lds	r25, 0x078A
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	59 f4       	brne	.+22     	; 0x1094 <_Z11OS_Dispatchv+0x4a>
			//buzz(1);
			t = 0;
		} else {
			//buzz(0);
			//led_off(3);
			t = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	90 93 8a 07 	sts	0x078A, r25
    1086:	80 93 89 07 	sts	0x0789, r24
		}
		RESET_LED_1();
    108a:	5e 98       	cbi	0x0b, 6	; 11
		RESET_LED_2();
    108c:	5f 98       	cbi	0x0b, 7	; 11
		RESET_LED_3();
    108e:	5c 98       	cbi	0x0b, 4	; 11
		RESET_LED_4();
    1090:	5b 98       	cbi	0x0b, 3	; 11
    1092:	08 95       	ret
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
	{
		if (t) {
			//led_on(3);
			//buzz(1);
			t = 0;
    1094:	10 92 8a 07 	sts	0x078A, r1
    1098:	10 92 89 07 	sts	0x0789, r1
    109c:	f6 cf       	rjmp	.-20     	; 0x108a <_Z11OS_Dispatchv+0x40>
	if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
	{
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{
		CAN_Q_Timeslice();
    109e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <_Z15CAN_Q_Timeslicev>
    10a2:	20 91 48 08 	lds	r18, 0x0848
    10a6:	30 91 49 08 	lds	r19, 0x0849
    10aa:	dc cf       	rjmp	.-72     	; 0x1064 <_Z11OS_Dispatchv+0x1a>

000010ac <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
 *******************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0;
    10ac:	10 92 4e 08 	sts	0x084E, r1
	config_byte_2 = 0;
    10b0:	10 92 4f 08 	sts	0x084F, r1
}
    10b4:	08 95       	ret

000010b6 <_Z13config_changeh>:
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
	{
	}
}
    10b6:	08 95       	ret

000010b8 <_Z8save_calv>:

Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr = save_configuration();
    10b8:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_Z18save_configurationv>
//	addr = save_configuration_eeprom	(addr);
	return addr;
};
    10bc:	08 95       	ret

000010be <_Z8read_calv>:

Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr = read_configuration();
    10be:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <_Z18read_configurationv>
	//addr = read_configuration_eeprom	(addr);
	return addr;	
};
    10c2:	08 95       	ret

000010c4 <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
    10c4:	80 91 4f 08 	lds	r24, 0x084F
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	80 7f       	andi	r24, 0xF0	; 240
    10cc:	90 70       	andi	r25, 0x00	; 0
    10ce:	80 32       	cpi	r24, 0x20	; 32
    10d0:	91 05       	cpc	r25, r1
    10d2:	91 f0       	breq	.+36     	; 0x10f8 <_Z13getReportRatev+0x34>
    10d4:	81 32       	cpi	r24, 0x21	; 33
    10d6:	91 05       	cpc	r25, r1
    10d8:	44 f0       	brlt	.+16     	; 0x10ea <_Z13getReportRatev+0x26>
    10da:	80 34       	cpi	r24, 0x40	; 64
    10dc:	91 05       	cpc	r25, r1
    10de:	51 f0       	breq	.+20     	; 0x10f4 <_Z13getReportRatev+0x30>
    10e0:	80 38       	cpi	r24, 0x80	; 128
    10e2:	91 05       	cpc	r25, r1
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <_Z13getReportRatev+0x2c>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
    10e6:	84 e1       	ldi	r24, 0x14	; 20
    10e8:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
    10ea:	80 31       	cpi	r24, 0x10	; 16
    10ec:	91 05       	cpc	r25, r1
    10ee:	31 f0       	breq	.+12     	; 0x10fc <_Z13getReportRatev+0x38>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
    10f4:	8a e0       	ldi	r24, 0x0A	; 10
    10f6:	08 95       	ret
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	08 95       	ret
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
    10fc:	82 e0       	ldi	r24, 0x02	; 2
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
	default: return -1;  break;
	}
}	
    10fe:	08 95       	ret

00001100 <_Z10Port_Drivev>:
Name:          	Port_Drive
Parameters:     none
Returns:        none
Description:    Initial data port direction to outputs (DDRB).
*****************************************************************************/
void Port_Drive()	{	PORT_DDR_0  |= PORT_DDR_0_DRIVE;	}	
    1100:	84 b1       	in	r24, 0x04	; 4
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	84 b9       	out	0x04, r24	; 4
    1106:	08 95       	ret

00001108 <_Z9Port_Readv>:
Name:          	Port_Read
Parameters:     none
Returns:        none
Description:    Initial data port direction to inputs (DDRB).
*****************************************************************************/
void Port_Read()		{	PORT_DDR_0  &= PORT_DDR_0_RECEIVE;	}	
    1108:	84 b1       	in	r24, 0x04	; 4
    110a:	14 b8       	out	0x04, r1	; 4
    110c:	08 95       	ret

0000110e <_Z13Get_x_addressv>:
 ******************************************/
/****************************************************************
*  Following accessor functions used as external interface only; 
*  functions internal to this file handle on their own - smartly  
*****************************************************************/
byte Get_x_address() { return x_address; };
    110e:	80 91 8b 07 	lds	r24, 0x078B
    1112:	08 95       	ret

00001114 <_Z13Get_y_addressv>:
byte Get_y_address() { return y_address; };
    1114:	80 91 8c 07 	lds	r24, 0x078C
    1118:	08 95       	ret

0000111a <_Z13Set_x_addressh>:
byte Set_x_address(byte new_x) 
{
	x_address = new_x;
    111a:	80 93 8b 07 	sts	0x078B, r24
	if (x_address > 7) x_address = 7;
    111e:	88 30       	cpi	r24, 0x08	; 8
    1120:	18 f0       	brcs	.+6      	; 0x1128 <_Z13Set_x_addressh+0xe>
    1122:	87 e0       	ldi	r24, 0x07	; 7
    1124:	80 93 8b 07 	sts	0x078B, r24
	return x_address;
};
    1128:	08 95       	ret

0000112a <_Z13Set_y_addressh>:
byte Set_y_address(byte new_y)
{
	y_address = new_y;
    112a:	80 93 8c 07 	sts	0x078C, r24
	if (y_address > 127) y_address=127;
    112e:	87 fd       	sbrc	r24, 7
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <_Z13Set_y_addressh+0xe>
	if (y_address > 63) {
    1132:	80 34       	cpi	r24, 0x40	; 64
    1134:	20 f4       	brcc	.+8      	; 0x113e <_Z13Set_y_addressh+0x14>
		return (new_y - 64);		// address relative to chip controller
	}
	//else 
		//Active_Controller = 1;
	return y_address;
};
    1136:	08 95       	ret
	return x_address;
};
byte Set_y_address(byte new_y)
{
	y_address = new_y;
	if (y_address > 127) y_address=127;
    1138:	9f e7       	ldi	r25, 0x7F	; 127
    113a:	90 93 8c 07 	sts	0x078C, r25
	if (y_address > 63) {
		//Active_Controller = 2;
		return (new_y - 64);		// address relative to chip controller
    113e:	80 54       	subi	r24, 0x40	; 64
	}
	//else 
		//Active_Controller = 1;
	return y_address;
};
    1140:	08 95       	ret

00001142 <_Z21Get_controller_from_yv>:
byte Get_controller_from_y()
{
	if (y_address < 64) 
    1142:	80 91 8c 07 	lds	r24, 0x078C
    1146:	80 34       	cpi	r24, 0x40	; 64
    1148:	10 f0       	brcs	.+4      	; 0x114e <_Z21Get_controller_from_yv+0xc>
		return 1;
	else 
		return 2;
    114a:	82 e0       	ldi	r24, 0x02	; 2
}
    114c:	08 95       	ret
	return y_address;
};
byte Get_controller_from_y()
{
	if (y_address < 64) 
		return 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	08 95       	ret

00001152 <_Z24update_controller_from_yv>:
		//Active_Controller = 1;
	return y_address;
};
byte Get_controller_from_y()
{
	if (y_address < 64) 
    1152:	80 91 8c 07 	lds	r24, 0x078C
    1156:	80 34       	cpi	r24, 0x40	; 64
    1158:	20 f0       	brcs	.+8      	; 0x1162 <_Z24update_controller_from_yv+0x10>
		return 1;
	else 
		return 2;
    115a:	82 e0       	ldi	r24, 0x02	; 2
}
byte update_controller_from_y() 
{ 
	Active_Controller = Get_controller_from_y(); 
    115c:	80 93 1c 01 	sts	0x011C, r24
	return Active_Controller;
}
    1160:	08 95       	ret
	return y_address;
};
byte Get_controller_from_y()
{
	if (y_address < 64) 
		return 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
	else 
		return 2;
}
byte update_controller_from_y() 
{ 
	Active_Controller = Get_controller_from_y(); 
    1164:	80 93 1c 01 	sts	0x011C, r24
	return Active_Controller;
}
    1168:	08 95       	ret

0000116a <_Z19Increment_x_addressv>:
	}
	return y_address;
}
byte Increment_x_address()			// next line
{
	x_address++;
    116a:	80 91 8b 07 	lds	r24, 0x078B
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	80 93 8b 07 	sts	0x078B, r24
	return x_address;
}
    1174:	08 95       	ret

00001176 <_Z18setup_chip_selectsc>:
								0 = CONTROL
Description:    Does not handle smart controller switching
*****************************************************************************/
void setup_chip_selects(char controller)
{
	if (controller == 1)			// Setup the Chip Select Lines:
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	41 f0       	breq	.+16     	; 0x118a <_Z18setup_chip_selectsc+0x14>
	{
		set_control_pin( CS1_PIN, SELECTED  );			// Left
		set_control_pin( CS2_PIN, UNSELECTED);
	}
	else if (controller == 2)
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	49 f0       	breq	.+18     	; 0x1190 <_Z18setup_chip_selectsc+0x1a>
	{
		set_control_pin( CS1_PIN, UNSELECTED);		 
		set_control_pin( CS2_PIN, SELECTED  );			// Right
	}
	else if (controller == 3)		
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	09 f0       	breq	.+2      	; 0x1184 <_Z18setup_chip_selectsc+0xe>
    1182:	08 95       	ret
	{
		set_control_pin( CS1_PIN, SELECTED );			// Both
    1184:	46 9a       	sbi	0x08, 6	; 8
		set_control_pin( CS2_PIN, SELECTED );
    1186:	47 9a       	sbi	0x08, 7	; 8
    1188:	08 95       	ret
*****************************************************************************/
void setup_chip_selects(char controller)
{
	if (controller == 1)			// Setup the Chip Select Lines:
	{
		set_control_pin( CS1_PIN, SELECTED  );			// Left
    118a:	46 9a       	sbi	0x08, 6	; 8
		set_control_pin( CS2_PIN, UNSELECTED);
    118c:	47 98       	cbi	0x08, 7	; 8
    118e:	08 95       	ret
	}
	else if (controller == 2)
	{
		set_control_pin( CS1_PIN, UNSELECTED);		 
    1190:	46 98       	cbi	0x08, 6	; 8
		set_control_pin( CS2_PIN, SELECTED  );			// Right
    1192:	47 9a       	sbi	0x08, 7	; 8
    1194:	08 95       	ret

00001196 <_Z9LCD_writehhc>:
								1 = DATA
								0 = CONTROL
Description:    Does not handle smart controller switching
*****************************************************************************/
void LCD_write(unsigned char data_or_ctrl, unsigned char value,  char controller)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <_Z9LCD_writehhc+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <_Z9LCD_writehhc+0x8>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
Name:          	Port_Drive
Parameters:     none
Returns:        none
Description:    Initial data port direction to outputs (DDRB).
*****************************************************************************/
void Port_Drive()	{	PORT_DDR_0  |= PORT_DDR_0_DRIVE;	}	
    11a4:	94 b1       	in	r25, 0x04	; 4
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	94 b9       	out	0x04, r25	; 4
Description:    Does not handle smart controller switching
*****************************************************************************/
void LCD_write(unsigned char data_or_ctrl, unsigned char value,  char controller)
{
	Port_Drive();
	set_enable_pin (  LOW   );          			// Prepare cycle
    11aa:	58 98       	cbi	0x0b, 0	; 11
	set_control_pin( RW_PIN, WRITE );				// Read/Write
    11ac:	44 98       	cbi	0x08, 4	; 8
    set_control_pin( DI_PIN, data_or_ctrl );     	// Data/Instruction SELECT (HIGH=DATA, LOW=CTRL)
    11ae:	88 23       	and	r24, r24
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <_Z9LCD_writehhc+0x1e>
    11b2:	45 c0       	rjmp	.+138    	; 0x123e <_Z9LCD_writehhc+0xa8>
    11b4:	45 9a       	sbi	0x08, 5	; 8
	setup_chip_selects( controller );
    11b6:	84 2f       	mov	r24, r20
    11b8:	6d 83       	std	Y+5, r22	; 0x05
    11ba:	0e 94 bb 08 	call	0x1176	; 0x1176 <_Z18setup_chip_selectsc>
Parameters:     value - the value to write
Returns:        none
Description:    Takes the desired value and maps it into the actual hardware 
				pins.  The data is split between 3 ports.
*****************************************************************************/
inline void Send_Data(byte value)	{	DATA_PORT_0 = value;	}
    11be:	6d 81       	ldd	r22, Y+5	; 0x05
    11c0:	65 b9       	out	0x05, r22	; 5
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    11c2:	80 e1       	ldi	r24, 0x10	; 16
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a0 e0       	ldi	r26, 0x00	; 0
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	ab 83       	std	Y+3, r26	; 0x03
    11d0:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	ab 81       	ldd	r26, Y+3	; 0x03
    11d8:	bc 81       	ldd	r27, Y+4	; 0x04
    11da:	9c 01       	movw	r18, r24
    11dc:	ad 01       	movw	r20, r26
    11de:	21 50       	subi	r18, 0x01	; 1
    11e0:	30 40       	sbci	r19, 0x00	; 0
    11e2:	40 40       	sbci	r20, 0x00	; 0
    11e4:	50 40       	sbci	r21, 0x00	; 0
    11e6:	29 83       	std	Y+1, r18	; 0x01
    11e8:	3a 83       	std	Y+2, r19	; 0x02
    11ea:	4b 83       	std	Y+3, r20	; 0x03
    11ec:	5c 83       	std	Y+4, r21	; 0x04
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	a1 05       	cpc	r26, r1
    11f2:	b1 05       	cpc	r27, r1
    11f4:	71 f7       	brne	.-36     	; 0x11d2 <_Z9LCD_writehhc+0x3c>
	
	/* Correct hardware wiring of data pins */
	Send_Data(value);

	DisplayDelay(1);					// We only need a very little delay
    set_enable_pin( HIGH );          	// EN enable chip (HIGH)
    11f6:	58 9a       	sbi	0x0b, 0	; 11
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    11f8:	80 e1       	ldi	r24, 0x10	; 16
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	ab 83       	std	Y+3, r26	; 0x03
    1206:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	ab 81       	ldd	r26, Y+3	; 0x03
    120e:	bc 81       	ldd	r27, Y+4	; 0x04
    1210:	9c 01       	movw	r18, r24
    1212:	ad 01       	movw	r20, r26
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	30 40       	sbci	r19, 0x00	; 0
    1218:	40 40       	sbci	r20, 0x00	; 0
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	29 83       	std	Y+1, r18	; 0x01
    121e:	3a 83       	std	Y+2, r19	; 0x02
    1220:	4b 83       	std	Y+3, r20	; 0x03
    1222:	5c 83       	std	Y+4, r21	; 0x04
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	a1 05       	cpc	r26, r1
    1228:	b1 05       	cpc	r27, r1
    122a:	71 f7       	brne	.-36     	; 0x1208 <_Z9LCD_writehhc+0x72>
	Send_Data(value);

	DisplayDelay(1);					// We only need a very little delay
    set_enable_pin( HIGH );          	// EN enable chip (HIGH)
	DisplayDelay(1);					// We only need a very little delay
    set_enable_pin( LOW );          	// Latch data by dropping EN
    122c:	58 98       	cbi	0x0b, 0	; 11
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret
void LCD_write(unsigned char data_or_ctrl, unsigned char value,  char controller)
{
	Port_Drive();
	set_enable_pin (  LOW   );          			// Prepare cycle
	set_control_pin( RW_PIN, WRITE );				// Read/Write
    set_control_pin( DI_PIN, data_or_ctrl );     	// Data/Instruction SELECT (HIGH=DATA, LOW=CTRL)
    123e:	45 98       	cbi	0x08, 5	; 8
    1240:	ba cf       	rjmp	.-140    	; 0x11b6 <_Z9LCD_writehhc+0x20>

00001242 <_Z8LCD_readhh>:
								0 = CONTROL
Returns:        none
Description:    Writes data to display. Sends command to display.  
*****************************************************************************/
unsigned char LCD_read(unsigned char data_or_ctrl, unsigned char controller)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <_Z8LCD_readhh+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <_Z8LCD_readhh+0x8>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
Name:          	Port_Read
Parameters:     none
Returns:        none
Description:    Initial data port direction to inputs (DDRB).
*****************************************************************************/
void Port_Read()		{	PORT_DDR_0  &= PORT_DDR_0_RECEIVE;	}	
    124e:	94 b1       	in	r25, 0x04	; 4
    1250:	14 b8       	out	0x04, r1	; 4
unsigned char LCD_read(unsigned char data_or_ctrl, unsigned char controller)
{
	int value  = 0;								// return value	
	Port_Read();					
		
	set_enable_pin ( LOW  				  );    // Prepare cycle
    1252:	58 98       	cbi	0x0b, 0	; 11
	set_control_pin( RW_PIN, READ 		  );	// Read/Write
    1254:	44 9a       	sbi	0x08, 4	; 8
    set_control_pin( DI_PIN, data_or_ctrl );    // Data/Instruction (HIGH=DATA, LOW=CTRL)
    1256:	88 23       	and	r24, r24
    1258:	09 f4       	brne	.+2      	; 0x125c <_Z8LCD_readhh+0x1a>
    125a:	42 c0       	rjmp	.+132    	; 0x12e0 <_Z8LCD_readhh+0x9e>
    125c:	45 9a       	sbi	0x08, 5	; 8
	setup_chip_selects( controller 		  );
    125e:	86 2f       	mov	r24, r22
    1260:	0e 94 bb 08 	call	0x1176	; 0x1176 <_Z18setup_chip_selectsc>
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    1264:	80 e1       	ldi	r24, 0x10	; 16
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	ab 83       	std	Y+3, r26	; 0x03
    1272:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	ab 81       	ldd	r26, Y+3	; 0x03
    127a:	bc 81       	ldd	r27, Y+4	; 0x04
    127c:	9c 01       	movw	r18, r24
    127e:	ad 01       	movw	r20, r26
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	30 40       	sbci	r19, 0x00	; 0
    1284:	40 40       	sbci	r20, 0x00	; 0
    1286:	50 40       	sbci	r21, 0x00	; 0
    1288:	29 83       	std	Y+1, r18	; 0x01
    128a:	3a 83       	std	Y+2, r19	; 0x02
    128c:	4b 83       	std	Y+3, r20	; 0x03
    128e:	5c 83       	std	Y+4, r21	; 0x04
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	a1 05       	cpc	r26, r1
    1294:	b1 05       	cpc	r27, r1
    1296:	71 f7       	brne	.-36     	; 0x1274 <_Z8LCD_readhh+0x32>
	set_control_pin( RW_PIN, READ 		  );	// Read/Write
    set_control_pin( DI_PIN, data_or_ctrl );    // Data/Instruction (HIGH=DATA, LOW=CTRL)
	setup_chip_selects( controller 		  );

	DisplayDelay(1);				// Setup time
    set_enable_pin( HIGH );         // EN enable chip (HIGH)
    1298:	58 9a       	sbi	0x0b, 0	; 11
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    129a:	80 e1       	ldi	r24, 0x10	; 16
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	ab 83       	std	Y+3, r26	; 0x03
    12a8:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	ab 81       	ldd	r26, Y+3	; 0x03
    12b0:	bc 81       	ldd	r27, Y+4	; 0x04
    12b2:	9c 01       	movw	r18, r24
    12b4:	ad 01       	movw	r20, r26
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	30 40       	sbci	r19, 0x00	; 0
    12ba:	40 40       	sbci	r20, 0x00	; 0
    12bc:	50 40       	sbci	r21, 0x00	; 0
    12be:	29 83       	std	Y+1, r18	; 0x01
    12c0:	3a 83       	std	Y+2, r19	; 0x02
    12c2:	4b 83       	std	Y+3, r20	; 0x03
    12c4:	5c 83       	std	Y+4, r21	; 0x04
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	a1 05       	cpc	r26, r1
    12ca:	b1 05       	cpc	r27, r1
    12cc:	71 f7       	brne	.-36     	; 0x12aa <_Z8LCD_readhh+0x68>
	DisplayDelay(1);				// Setup time
    set_enable_pin( HIGH );         // EN enable chip (HIGH)
	DisplayDelay(1);				// Hold time

	/* Read Data */
    set_enable_pin( LOW );  		// Latch data by dropping EN
    12ce:	58 98       	cbi	0x0b, 0	; 11
Name:           Read_Data
Parameters:     value - the value to write
Description:    Reads the port values and maps according to the hardware
				values.
*****************************************************************************/
inline byte Read_Data()	{	return DATA_PORT_0_IN;	}
    12d0:	83 b1       	in	r24, 0x03	; 3

	/* Read Data */
    set_enable_pin( LOW );  		// Latch data by dropping EN
	value = Read_Data();	
	return value;
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret
	int value  = 0;								// return value	
	Port_Read();					
		
	set_enable_pin ( LOW  				  );    // Prepare cycle
	set_control_pin( RW_PIN, READ 		  );	// Read/Write
    set_control_pin( DI_PIN, data_or_ctrl );    // Data/Instruction (HIGH=DATA, LOW=CTRL)
    12e0:	45 98       	cbi	0x08, 5	; 8
    12e2:	bd cf       	rjmp	.-134    	; 0x125e <_Z8LCD_readhh+0x1c>

000012e4 <_Z11ReadBusyBitv>:
Parameters:  	controller 1 or 2 (not both)			
Returns:        1 if busy or reset in proc.
Description:    This function returns the busy or reset status
*****************************************************************************/
byte ReadBusyBit()
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <_Z11ReadBusyBitv+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <_Z11ReadBusyBitv+0x8>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
	set_enable_pin( LOW );  		// Latch data by dropping EN
    12f0:	58 98       	cbi	0x0b, 0	; 11
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    12f2:	80 e1       	ldi	r24, 0x10	; 16
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a0 e0       	ldi	r26, 0x00	; 0
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	ab 83       	std	Y+3, r26	; 0x03
    1300:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	ab 81       	ldd	r26, Y+3	; 0x03
    1308:	bc 81       	ldd	r27, Y+4	; 0x04
    130a:	9c 01       	movw	r18, r24
    130c:	ad 01       	movw	r20, r26
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	30 40       	sbci	r19, 0x00	; 0
    1312:	40 40       	sbci	r20, 0x00	; 0
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	29 83       	std	Y+1, r18	; 0x01
    1318:	3a 83       	std	Y+2, r19	; 0x02
    131a:	4b 83       	std	Y+3, r20	; 0x03
    131c:	5c 83       	std	Y+4, r21	; 0x04
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	a1 05       	cpc	r26, r1
    1322:	b1 05       	cpc	r27, r1
    1324:	71 f7       	brne	.-36     	; 0x1302 <_Z11ReadBusyBitv+0x1e>
*****************************************************************************/
byte ReadBusyBit()
{
	set_enable_pin( LOW );  		// Latch data by dropping EN
	DisplayDelay(1);				// Setup time
    set_enable_pin( HIGH );         // EN enable chip (HIGH)
    1326:	58 9a       	sbi	0x0b, 0	; 11
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    1328:	80 e1       	ldi	r24, 0x10	; 16
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	ab 83       	std	Y+3, r26	; 0x03
    1336:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	ab 81       	ldd	r26, Y+3	; 0x03
    133e:	bc 81       	ldd	r27, Y+4	; 0x04
    1340:	9c 01       	movw	r18, r24
    1342:	ad 01       	movw	r20, r26
    1344:	21 50       	subi	r18, 0x01	; 1
    1346:	30 40       	sbci	r19, 0x00	; 0
    1348:	40 40       	sbci	r20, 0x00	; 0
    134a:	50 40       	sbci	r21, 0x00	; 0
    134c:	29 83       	std	Y+1, r18	; 0x01
    134e:	3a 83       	std	Y+2, r19	; 0x02
    1350:	4b 83       	std	Y+3, r20	; 0x03
    1352:	5c 83       	std	Y+4, r21	; 0x04
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	a1 05       	cpc	r26, r1
    1358:	b1 05       	cpc	r27, r1
    135a:	71 f7       	brne	.-36     	; 0x1338 <_Z11ReadBusyBitv+0x54>
{
	set_enable_pin( LOW );  		// Latch data by dropping EN
	DisplayDelay(1);				// Setup time
    set_enable_pin( HIGH );         // EN enable chip (HIGH)
	DisplayDelay(1);				// Hold time
    set_enable_pin( LOW );  		// Latch data by dropping EN
    135c:	58 98       	cbi	0x0b, 0	; 11
Name:           Read_Data
Parameters:     value - the value to write
Description:    Reads the port values and maps according to the hardware
				values.
*****************************************************************************/
inline byte Read_Data()	{	return DATA_PORT_0_IN;	}
    135e:	83 b1       	in	r24, 0x03	; 3
	DisplayDelay(1);				// Setup time
    set_enable_pin( HIGH );         // EN enable chip (HIGH)
	DisplayDelay(1);				// Hold time
    set_enable_pin( LOW );  		// Latch data by dropping EN
	return Read_Data();
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <_Z4Busyc>:
char Busy(char controller)
{
	char temp = 0;	
	if (controller == BOTH)  return -1;
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	31 f0       	breq	.+12     	; 0x137e <_Z4Busyc+0x10>
	temp = ReadBusyBit();		
    1372:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z11ReadBusyBitv>
	return Read_Data();
}
char Busy(char controller)
{
	char temp = 0;	
	if (controller == BOTH)  return -1;
    1376:	88 1f       	adc	r24, r24
    1378:	88 27       	eor	r24, r24
    137a:	88 1f       	adc	r24, r24
    137c:	08 95       	ret
    137e:	8f ef       	ldi	r24, 0xFF	; 255
	temp = ReadBusyBit();		
	if (temp & 0x80)			
		return TRUE;
	else
		return FALSE;
}
    1380:	08 95       	ret

00001382 <_Z7InResetc>:
char InReset(char controller)
{
	char temp;
	if (controller == BOTH)  return -1;
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	51 f0       	breq	.+20     	; 0x139a <_Z7InResetc+0x18>
	temp = ReadBusyBit();		
    1386:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z11ReadBusyBitv>
		return FALSE;
}
char InReset(char controller)
{
	char temp;
	if (controller == BOTH)  return -1;
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	84 ff       	sbrs	r24, 4
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <_Z7InResetc+0x12>
	temp = ReadBusyBit();		
	if (temp & 0x10)		
		return TRUE;
	else
		return FALSE;
}
    1390:	89 2f       	mov	r24, r25
    1392:	08 95       	ret
		return FALSE;
}
char InReset(char controller)
{
	char temp;
	if (controller == BOTH)  return -1;
    1394:	90 e0       	ldi	r25, 0x00	; 0
	temp = ReadBusyBit();		
	if (temp & 0x10)		
		return TRUE;
	else
		return FALSE;
}
    1396:	89 2f       	mov	r24, r25
    1398:	08 95       	ret
		return FALSE;
}
char InReset(char controller)
{
	char temp;
	if (controller == BOTH)  return -1;
    139a:	9f ef       	ldi	r25, 0xFF	; 255
	temp = ReadBusyBit();		
	if (temp & 0x10)		
		return TRUE;
	else
		return FALSE;
}
    139c:	89 2f       	mov	r24, r25
    139e:	08 95       	ret

000013a0 <_Z14WaitForNotBusyc>:
Parameters:  	controller must be 1 or 2
Returns:        none
Description:    This function waits for a controller to clear its busy bit
*****************************************************************************/
void WaitForNotBusy(char controller)
{
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_Z14WaitForNotBusyc+0x10>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <_Z14WaitForNotBusyc+0x12>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	d8 2e       	mov	r13, r24
Name:          	Port_Read
Parameters:     none
Returns:        none
Description:    Initial data port direction to inputs (DDRB).
*****************************************************************************/
void Port_Read()		{	PORT_DDR_0  &= PORT_DDR_0_RECEIVE;	}	
    13b8:	84 b1       	in	r24, 0x04	; 4
    13ba:	14 b8       	out	0x04, r1	; 4
Description:    This function waits for a controller to clear its busy bit
*****************************************************************************/
void WaitForNotBusy(char controller)
{
	Port_Read();
	setup_chip_selects( controller );
    13bc:	8d 2d       	mov	r24, r13
    13be:	0e 94 bb 08 	call	0x1176	; 0x1176 <_Z18setup_chip_selectsc>
	set_control_pin( RW_PIN, READ);
    13c2:	44 9a       	sbi	0x08, 4	; 8
	set_control_pin( DI_PIN, INSTRUCTION);		
    13c4:	45 98       	cbi	0x08, 5	; 8
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    13c6:	80 ea       	ldi	r24, 0xA0	; 160
    13c8:	e8 2e       	mov	r14, r24
    13ca:	f1 2c       	mov	r15, r1
    13cc:	01 2d       	mov	r16, r1
    13ce:	11 2d       	mov	r17, r1
{
	Port_Read();
	setup_chip_selects( controller );
	set_control_pin( RW_PIN, READ);
	set_control_pin( DI_PIN, INSTRUCTION);		
	while (Busy(controller))
    13d0:	8d 2d       	mov	r24, r13
    13d2:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z4Busyc>
    13d6:	88 23       	and	r24, r24
    13d8:	e1 f0       	breq	.+56     	; 0x1412 <_Z14WaitForNotBusyc+0x72>
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    13da:	e9 82       	std	Y+1, r14	; 0x01
    13dc:	fa 82       	std	Y+2, r15	; 0x02
    13de:	0b 83       	std	Y+3, r16	; 0x03
    13e0:	1c 83       	std	Y+4, r17	; 0x04
	while(counter--){	}
    13e2:	29 81       	ldd	r18, Y+1	; 0x01
    13e4:	3a 81       	ldd	r19, Y+2	; 0x02
    13e6:	4b 81       	ldd	r20, Y+3	; 0x03
    13e8:	5c 81       	ldd	r21, Y+4	; 0x04
    13ea:	ca 01       	movw	r24, r20
    13ec:	b9 01       	movw	r22, r18
    13ee:	61 50       	subi	r22, 0x01	; 1
    13f0:	70 40       	sbci	r23, 0x00	; 0
    13f2:	80 40       	sbci	r24, 0x00	; 0
    13f4:	90 40       	sbci	r25, 0x00	; 0
    13f6:	69 83       	std	Y+1, r22	; 0x01
    13f8:	7a 83       	std	Y+2, r23	; 0x02
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	21 15       	cp	r18, r1
    1400:	31 05       	cpc	r19, r1
    1402:	41 05       	cpc	r20, r1
    1404:	51 05       	cpc	r21, r1
    1406:	69 f7       	brne	.-38     	; 0x13e2 <_Z14WaitForNotBusyc+0x42>
{
	Port_Read();
	setup_chip_selects( controller );
	set_control_pin( RW_PIN, READ);
	set_control_pin( DI_PIN, INSTRUCTION);		
	while (Busy(controller))
    1408:	8d 2d       	mov	r24, r13
    140a:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z4Busyc>
    140e:	88 23       	and	r24, r24
    1410:	21 f7       	brne	.-56     	; 0x13da <_Z14WaitForNotBusyc+0x3a>
	{
		  DisplayDelay(10); 
	}
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	08 95       	ret

0000142a <_Z11GotoAddresscc>:
			    y	Column number for display	[0..127]
Returns:        none
Description:    This function controls LCD writes to line 1 or 2 of the LCD.  
*****************************************************************************/
void GotoAddress(char x, char y)
{	
    142a:	cf 93       	push	r28
*****************************************************************/
byte Get_x_address() { return x_address; };
byte Get_y_address() { return y_address; };
byte Set_x_address(byte new_x) 
{
	x_address = new_x;
    142c:	80 93 8b 07 	sts	0x078B, r24
	if (x_address > 7) x_address = 7;
    1430:	88 30       	cpi	r24, 0x08	; 8
    1432:	10 f5       	brcc	.+68     	; 0x1478 <_Z11GotoAddresscc+0x4e>
    1434:	98 2f       	mov	r25, r24
    1436:	98 54       	subi	r25, 0x48	; 72
*****************************************************************************/
void GotoAddress(char x, char y)
{	
	// Control at max values:
	x = Set_x_address( x );
	y = Set_y_address( y );
    1438:	c6 2f       	mov	r28, r22
	if (x_address > 7) x_address = 7;
	return x_address;
};
byte Set_y_address(byte new_y)
{
	y_address = new_y;
    143a:	60 93 8c 07 	sts	0x078C, r22
	if (y_address > 127) y_address=127;
    143e:	67 fd       	sbrc	r22, 7
    1440:	24 c0       	rjmp	.+72     	; 0x148a <_Z11GotoAddresscc+0x60>
	if (y_address > 63) {
    1442:	60 34       	cpi	r22, 0x40	; 64
    1444:	28 f5       	brcc	.+74     	; 0x1490 <_Z11GotoAddresscc+0x66>
    1446:	41 e0       	ldi	r20, 0x01	; 1
	return y_address;
};
byte Get_controller_from_y()
{
	if (y_address < 64) 
		return 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
	else 
		return 2;
}
byte update_controller_from_y() 
{ 
	Active_Controller = Get_controller_from_y(); 
    144a:	80 93 1c 01 	sts	0x011C, r24
	// Control at max values:
	x = Set_x_address( x );
	y = Set_y_address( y );
	update_controller_from_y();

	LCD_write		(CTRL, SET_X_ADDRESS+x, Active_Controller );
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	69 2f       	mov	r22, r25
    1452:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy	(Active_Controller						  );
    1456:	80 91 1c 01 	lds	r24, 0x011C
    145a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
	LCD_write		(CTRL, SET_Y_ADDRESS+y, Active_Controller );
    145e:	6c 2f       	mov	r22, r28
    1460:	60 5c       	subi	r22, 0xC0	; 192
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	40 91 1c 01 	lds	r20, 0x011C
    1468:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy	(Active_Controller						  );
    146c:	80 91 1c 01 	lds	r24, 0x011C
    1470:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
}
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret
byte Get_x_address() { return x_address; };
byte Get_y_address() { return y_address; };
byte Set_x_address(byte new_x) 
{
	x_address = new_x;
	if (x_address > 7) x_address = 7;
    1478:	87 e0       	ldi	r24, 0x07	; 7
    147a:	80 93 8b 07 	sts	0x078B, r24
    147e:	9f eb       	ldi	r25, 0xBF	; 191
*****************************************************************************/
void GotoAddress(char x, char y)
{	
	// Control at max values:
	x = Set_x_address( x );
	y = Set_y_address( y );
    1480:	c6 2f       	mov	r28, r22
	if (x_address > 7) x_address = 7;
	return x_address;
};
byte Set_y_address(byte new_y)
{
	y_address = new_y;
    1482:	60 93 8c 07 	sts	0x078C, r22
	if (y_address > 127) y_address=127;
    1486:	67 ff       	sbrs	r22, 7
    1488:	dc cf       	rjmp	.-72     	; 0x1442 <_Z11GotoAddresscc+0x18>
    148a:	8f e7       	ldi	r24, 0x7F	; 127
    148c:	80 93 8c 07 	sts	0x078C, r24
	if (y_address > 63) {
		//Active_Controller = 2;
		return (new_y - 64);		// address relative to chip controller
    1490:	c6 2f       	mov	r28, r22
    1492:	c0 54       	subi	r28, 0x40	; 64
    1494:	42 e0       	ldi	r20, 0x02	; 2
byte Get_controller_from_y()
{
	if (y_address < 64) 
		return 1;
	else 
		return 2;
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	d8 cf       	rjmp	.-80     	; 0x144a <_Z11GotoAddresscc+0x20>

0000149a <_Z13SendAddressesv>:
Name:          	SendAddresses()
Parameters:     First call Set_y_address() or Set_x_address()
Description:    Send the internal x,y position counters to the display
				Ensures code is in-sync with the driver.
*****************************************************************************/
void SendAddresses()   {	GotoAddress(x_address,y_address);	}
    149a:	80 91 8b 07 	lds	r24, 0x078B
    149e:	60 91 8c 07 	lds	r22, 0x078C
    14a2:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
    14a6:	08 95       	ret

000014a8 <_Z19Increment_y_addressv>:
Returns:        none
Description:    This function controls LCD writes to line 1 or 2 of the LCD.  
*****************************************************************************/
byte Increment_y_address()			// next column
{
	y_address++;
    14a8:	80 91 8c 07 	lds	r24, 0x078C
    14ac:	8f 5f       	subi	r24, 0xFF	; 255
    14ae:	80 93 8c 07 	sts	0x078C, r24
	if (y_address > 127)
    14b2:	87 fd       	sbrc	r24, 7
    14b4:	12 c0       	rjmp	.+36     	; 0x14da <_Z19Increment_y_addressv+0x32>
		//Active_Controller = 1;
	return y_address;
};
byte Get_controller_from_y()
{
	if (y_address < 64) 
    14b6:	80 34       	cpi	r24, 0x40	; 64
    14b8:	70 f0       	brcs	.+28     	; 0x14d6 <_Z19Increment_y_addressv+0x2e>
		return 1;
	else 
		return 2;
    14ba:	92 e0       	ldi	r25, 0x02	; 2
}
byte update_controller_from_y() 
{ 
	Active_Controller = Get_controller_from_y(); 
    14bc:	90 93 1c 01 	sts	0x011C, r25
		Increment_x_address();	
		GotoAddress( x_address, 0 );	// this updates Active_Controller
	}		
	update_controller_from_y();
	
	if (PrevActive_Controller != Active_Controller) {
    14c0:	20 91 1d 01 	lds	r18, 0x011D
    14c4:	29 17       	cp	r18, r25
    14c6:	31 f0       	breq	.+12     	; 0x14d4 <_Z19Increment_y_addressv+0x2c>
		PrevActive_Controller = Active_Controller;
    14c8:	90 93 1d 01 	sts	0x011D, r25
		SendAddresses();
    14cc:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
    14d0:	80 91 8c 07 	lds	r24, 0x078C
	}
	return y_address;
}
    14d4:	08 95       	ret
	return y_address;
};
byte Get_controller_from_y()
{
	if (y_address < 64) 
		return 1;
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	f1 cf       	rjmp	.-30     	; 0x14bc <_Z19Increment_y_addressv+0x14>
byte Increment_y_address()			// next column
{
	y_address++;
	if (y_address > 127)
	{
		Active_Controller = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	80 93 1c 01 	sts	0x011C, r24
	}
	return y_address;
}
byte Increment_x_address()			// next line
{
	x_address++;
    14e0:	80 91 8b 07 	lds	r24, 0x078B
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	80 93 8b 07 	sts	0x078B, r24
	y_address++;
	if (y_address > 127)
	{
		Active_Controller = 1;
		Increment_x_address();	
		GotoAddress( x_address, 0 );	// this updates Active_Controller
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
    14f0:	80 91 8c 07 	lds	r24, 0x078C
    14f4:	e0 cf       	rjmp	.-64     	; 0x14b6 <_Z19Increment_y_addressv+0xe>

000014f6 <_Z14LCD_write_datah>:
				x_address & y_address.
				Then selects the proper controller.
				Updates the addresses automatically.
*****************************************************************************/
void LCD_write_data(unsigned char value)
{
    14f6:	68 2f       	mov	r22, r24
/*		if (Active_Controller != PrevActive_Controller) {
			PrevActive_Controller = Active_Controller;	
			SendAddresses();		// update Active_Controller	
		} */
	}
	LCD_write(DATA, value, Active_Controller);
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	40 91 1c 01 	lds	r20, 0x011C
    14fe:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>

	Increment_y_address();
    1502:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_Z19Increment_y_addressv>
}
    1506:	08 95       	ret

00001508 <_Z26send_controller_xy_addresshcc>:
Returns:        none
Description:    Sends the software y_address out to the controller.
				Ensures that we are in sync.
*****************************************************************************/
void send_controller_xy_address( byte controller, char x, char y)
{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	c8 2f       	mov	r28, r24
    150e:	d4 2f       	mov	r29, r20
	LCD_write		(CTRL, SET_X_ADDRESS+x, controller );
    1510:	68 54       	subi	r22, 0x48	; 72
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	4c 2f       	mov	r20, r28
    1516:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy	(Active_Controller				   );
    151a:	80 91 1c 01 	lds	r24, 0x011C
    151e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
	LCD_write		(CTRL, SET_Y_ADDRESS+y, controller );
    1522:	6d 2f       	mov	r22, r29
    1524:	60 5c       	subi	r22, 0xC0	; 192
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	4c 2f       	mov	r20, r28
    152a:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy	(Active_Controller				   );
    152e:	80 91 1c 01 	lds	r24, 0x011C
    1532:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <_Z25send_controller_y_addressv>:
Description:    Sends the software y_address out to the controller.
				Ensures that we are in sync.
*****************************************************************************/
void send_controller_y_address( )
{
	if (y_address<64)
    153c:	60 91 8c 07 	lds	r22, 0x078C
    1540:	60 34       	cpi	r22, 0x40	; 64
    1542:	40 f0       	brcs	.+16     	; 0x1554 <_Z25send_controller_y_addressv+0x18>
	{
		LCD_write		(CTRL, SET_Y_ADDRESS+y_address, 0 );
		WaitForNotBusy	(0);
	} else {
		LCD_write		(CTRL, SET_Y_ADDRESS+(y_address-64), 1 );
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
		WaitForNotBusy	(1);
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
    1552:	08 95       	ret
*****************************************************************************/
void send_controller_y_address( )
{
	if (y_address<64)
	{
		LCD_write		(CTRL, SET_Y_ADDRESS+y_address, 0 );
    1554:	60 5c       	subi	r22, 0xC0	; 192
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
		WaitForNotBusy	(0);
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
    1564:	08 95       	ret

00001566 <_Z25send_controller_x_addressv>:
Description:    Sends the software x_address out to the controller.
				Ensures that we are in sync.
*****************************************************************************/
void send_controller_x_address()
{
	LCD_write		(CTRL, SET_X_ADDRESS+x_address, 0 );
    1566:	60 91 8b 07 	lds	r22, 0x078B
    156a:	68 54       	subi	r22, 0x48	; 72
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy	(0);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
	LCD_write		(CTRL, SET_X_ADDRESS+x_address, 1 );
    157a:	60 91 8b 07 	lds	r22, 0x078B
    157e:	68 54       	subi	r22, 0x48	; 72
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy	(1);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
}
    158e:	08 95       	ret

00001590 <_Z12WaitForResetc>:
Parameters:  	controller must be 1 or 2
Returns:        none
Description:    This function waits for a controller to finish resetting
*****************************************************************************/
void WaitForReset(char controller)
{
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <_Z12WaitForResetc+0x10>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <_Z12WaitForResetc+0x12>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	d8 2e       	mov	r13, r24
Name:          	Port_Read
Parameters:     none
Returns:        none
Description:    Initial data port direction to inputs (DDRB).
*****************************************************************************/
void Port_Read()		{	PORT_DDR_0  &= PORT_DDR_0_RECEIVE;	}	
    15a8:	84 b1       	in	r24, 0x04	; 4
    15aa:	14 b8       	out	0x04, r1	; 4
Description:    This function waits for a controller to finish resetting
*****************************************************************************/
void WaitForReset(char controller)
{
	Port_Read();
	setup_chip_selects( controller );
    15ac:	8d 2d       	mov	r24, r13
    15ae:	0e 94 bb 08 	call	0x1176	; 0x1176 <_Z18setup_chip_selectsc>
	set_control_pin( RW_PIN, READ);
    15b2:	44 9a       	sbi	0x08, 4	; 8
	set_control_pin( DI_PIN, INSTRUCTION);		
    15b4:	45 98       	cbi	0x08, 5	; 8
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    15b6:	90 ea       	ldi	r25, 0xA0	; 160
    15b8:	e9 2e       	mov	r14, r25
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
{
	Port_Read();
	setup_chip_selects( controller );
	set_control_pin( RW_PIN, READ);
	set_control_pin( DI_PIN, INSTRUCTION);		
	while (InReset(controller)) 
    15c0:	8d 2d       	mov	r24, r13
    15c2:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z7InResetc>
    15c6:	88 23       	and	r24, r24
    15c8:	e1 f0       	breq	.+56     	; 0x1602 <_Z12WaitForResetc+0x72>
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    15ca:	e9 82       	std	Y+1, r14	; 0x01
    15cc:	fa 82       	std	Y+2, r15	; 0x02
    15ce:	0b 83       	std	Y+3, r16	; 0x03
    15d0:	1c 83       	std	Y+4, r17	; 0x04
	while(counter--){	}
    15d2:	29 81       	ldd	r18, Y+1	; 0x01
    15d4:	3a 81       	ldd	r19, Y+2	; 0x02
    15d6:	4b 81       	ldd	r20, Y+3	; 0x03
    15d8:	5c 81       	ldd	r21, Y+4	; 0x04
    15da:	ca 01       	movw	r24, r20
    15dc:	b9 01       	movw	r22, r18
    15de:	61 50       	subi	r22, 0x01	; 1
    15e0:	70 40       	sbci	r23, 0x00	; 0
    15e2:	80 40       	sbci	r24, 0x00	; 0
    15e4:	90 40       	sbci	r25, 0x00	; 0
    15e6:	69 83       	std	Y+1, r22	; 0x01
    15e8:	7a 83       	std	Y+2, r23	; 0x02
    15ea:	8b 83       	std	Y+3, r24	; 0x03
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	21 15       	cp	r18, r1
    15f0:	31 05       	cpc	r19, r1
    15f2:	41 05       	cpc	r20, r1
    15f4:	51 05       	cpc	r21, r1
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <_Z12WaitForResetc+0x42>
{
	Port_Read();
	setup_chip_selects( controller );
	set_control_pin( RW_PIN, READ);
	set_control_pin( DI_PIN, INSTRUCTION);		
	while (InReset(controller)) 
    15f8:	8d 2d       	mov	r24, r13
    15fa:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z7InResetc>
    15fe:	88 23       	and	r24, r24
    1600:	21 f7       	brne	.-56     	; 0x15ca <_Z12WaitForResetc+0x3a>
	{
		  DisplayDelay(10); 
	}
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	08 95       	ret

0000161a <_Z11InitDisplayv>:
Parameters:     none
Returns:        none
Description:    Intializes the LCD display. 
*****************************************************************************/
void InitDisplay( void )
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <_Z11InitDisplayv+0x6>
    1620:	00 d0       	rcall	.+0      	; 0x1622 <_Z11InitDisplayv+0x8>
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
Name:          	Port_Drive
Parameters:     none
Returns:        none
Description:    Initial data port direction to outputs (DDRB).
*****************************************************************************/
void Port_Drive()	{	PORT_DDR_0  |= PORT_DDR_0_DRIVE;	}	
    1626:	84 b1       	in	r24, 0x04	; 4
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	84 b9       	out	0x04, r24	; 4
*****************************************************************************/
void InitDisplay( void )
{
	// Pin Directions:
	Port_Drive();
	set_control_pin_ddr( BACKLIGHT_PIN,	 DRIVE );
    162c:	38 9a       	sbi	0x07, 0	; 7
	set_control_pin_ddr( CS1_PIN_MASK,	 DRIVE );
    162e:	3e 9a       	sbi	0x07, 6	; 7
	set_control_pin_ddr( CS2_PIN_MASK,   DRIVE );
    1630:	3f 9a       	sbi	0x07, 7	; 7
	set_control_pin_ddr( RW_PIN_MASK,	 DRIVE );
    1632:	3c 9a       	sbi	0x07, 4	; 7
	set_control_pin_ddr( DI_PIN_MASK,	 DRIVE );
    1634:	3d 9a       	sbi	0x07, 5	; 7
	set_control_pin_ddr( RESET_PIN_MASK, DRIVE );	
    1636:	38 9a       	sbi	0x07, 0	; 7
	set_enable_pin_ddr ( DRIVE );
    1638:	50 9a       	sbi	0x0a, 0	; 10

	// Pin initial Values:
	set_control_pin( BACKLIGHT_PIN,	LOW 		);
    163a:	41 98       	cbi	0x08, 1	; 8
	set_control_pin( CS1_PIN, 		SELECTED 	);
    163c:	46 9a       	sbi	0x08, 6	; 8
	set_control_pin( CS2_PIN, 		SELECTED 	);
    163e:	47 9a       	sbi	0x08, 7	; 8
	set_control_pin( RW_PIN	, 		WRITE		);
    1640:	44 98       	cbi	0x08, 4	; 8
	set_control_pin( DI_PIN , 		INSTRUCTION	);
    1642:	45 98       	cbi	0x08, 5	; 8
	set_control_pin( RESET_PIN, 	UNASSERTED	);
    1644:	40 9a       	sbi	0x08, 0	; 8
	set_enable_pin ( LOW );
    1646:	58 98       	cbi	0x0b, 0	; 11

	// RESET LCD
	set_control_pin( RESET_PIN, ASSERT   );
    1648:	40 98       	cbi	0x08, 0	; 8
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    164a:	80 e1       	ldi	r24, 0x10	; 16
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	ab 83       	std	Y+3, r26	; 0x03
    1658:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	ab 81       	ldd	r26, Y+3	; 0x03
    1660:	bc 81       	ldd	r27, Y+4	; 0x04
    1662:	9c 01       	movw	r18, r24
    1664:	ad 01       	movw	r20, r26
    1666:	21 50       	subi	r18, 0x01	; 1
    1668:	30 40       	sbci	r19, 0x00	; 0
    166a:	40 40       	sbci	r20, 0x00	; 0
    166c:	50 40       	sbci	r21, 0x00	; 0
    166e:	29 83       	std	Y+1, r18	; 0x01
    1670:	3a 83       	std	Y+2, r19	; 0x02
    1672:	4b 83       	std	Y+3, r20	; 0x03
    1674:	5c 83       	std	Y+4, r21	; 0x04
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	a1 05       	cpc	r26, r1
    167a:	b1 05       	cpc	r27, r1
    167c:	71 f7       	brne	.-36     	; 0x165a <_Z11InitDisplayv+0x40>
	set_enable_pin ( LOW );

	// RESET LCD
	set_control_pin( RESET_PIN, ASSERT   );
	DisplayDelay(1);
	set_control_pin( RESET_PIN, UNASSERTED );
    167e:	40 9a       	sbi	0x08, 0	; 8

	WaitForReset(1);
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_Z12WaitForResetc>
	
	// INITIALIZE REGISTERS:
	GotoAddress( 0,0 );
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	LCD_write(CTRL, SET_DISPLAY_START+0x00, BOTH );
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	60 ec       	ldi	r22, 0xC0	; 192
    1692:	43 e0       	ldi	r20, 0x03	; 3
    1694:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy(1);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
	volatile unsigned long int counter = units * 0x10;
    169e:	80 e1       	ldi	r24, 0x10	; 16
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a0 e0       	ldi	r26, 0x00	; 0
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	ab 83       	std	Y+3, r26	; 0x03
    16ac:	bc 83       	std	Y+4, r27	; 0x04
	while(counter--){	}
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	ab 81       	ldd	r26, Y+3	; 0x03
    16b4:	bc 81       	ldd	r27, Y+4	; 0x04
    16b6:	9c 01       	movw	r18, r24
    16b8:	ad 01       	movw	r20, r26
    16ba:	21 50       	subi	r18, 0x01	; 1
    16bc:	30 40       	sbci	r19, 0x00	; 0
    16be:	40 40       	sbci	r20, 0x00	; 0
    16c0:	50 40       	sbci	r21, 0x00	; 0
    16c2:	29 83       	std	Y+1, r18	; 0x01
    16c4:	3a 83       	std	Y+2, r19	; 0x02
    16c6:	4b 83       	std	Y+3, r20	; 0x03
    16c8:	5c 83       	std	Y+4, r21	; 0x04
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	a1 05       	cpc	r26, r1
    16ce:	b1 05       	cpc	r27, r1
    16d0:	71 f7       	brne	.-36     	; 0x16ae <_Z11InitDisplayv+0x94>
	// INITIALIZE REGISTERS:
	GotoAddress( 0,0 );
	LCD_write(CTRL, SET_DISPLAY_START+0x00, BOTH );
	WaitForNotBusy(1);
	DisplayDelay(1);
	LCD_write(CTRL, DISPLAY_ON, BOTH );
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	6f e3       	ldi	r22, 0x3F	; 63
    16d6:	43 e0       	ldi	r20, 0x03	; 3
    16d8:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	WaitForNotBusy(1);	
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z14WaitForNotBusyc>
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <_Z12DisplayDelaym>:
Returns:       none 
Description:   Delay routine for LCD display.   May be used for setup and 
			   hold times.
*****************************************************************************/
void DisplayDelay(unsigned long int units)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <_Z12DisplayDelaym+0x6>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <_Z12DisplayDelaym+0x8>
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned long int counter = units * 0x10;
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	66 0f       	add	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	88 1f       	adc	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	66 0f       	add	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	88 1f       	adc	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	69 83       	std	Y+1, r22	; 0x01
    171e:	7a 83       	std	Y+2, r23	; 0x02
    1720:	8b 83       	std	Y+3, r24	; 0x03
    1722:	9c 83       	std	Y+4, r25	; 0x04
	while(counter--){	}
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	ab 81       	ldd	r26, Y+3	; 0x03
    172a:	bc 81       	ldd	r27, Y+4	; 0x04
    172c:	9c 01       	movw	r18, r24
    172e:	ad 01       	movw	r20, r26
    1730:	21 50       	subi	r18, 0x01	; 1
    1732:	30 40       	sbci	r19, 0x00	; 0
    1734:	40 40       	sbci	r20, 0x00	; 0
    1736:	50 40       	sbci	r21, 0x00	; 0
    1738:	29 83       	std	Y+1, r18	; 0x01
    173a:	3a 83       	std	Y+2, r19	; 0x02
    173c:	4b 83       	std	Y+3, r20	; 0x03
    173e:	5c 83       	std	Y+4, r21	; 0x04
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	a1 05       	cpc	r26, r1
    1744:	b1 05       	cpc	r27, r1
    1746:	71 f7       	brne	.-36     	; 0x1724 <_Z12DisplayDelaym+0x34>
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <_Z14TransferBufferPc>:
Description:    This function sends data in the buffer to LCD writes.
				Writing beyond a controller limit will result in smooth
				transition to the next controller.				
*****************************************************************************/
void TransferBuffer(_far char * buffer)
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	ec 01       	movw	r28, r24
	do {		
		LCD_write_data( pgm_read_byte(buffer));	
    175c:	fe 01       	movw	r30, r28
    175e:	84 91       	lpm	r24, Z+
    1760:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
		buffer++;
    1764:	21 96       	adiw	r28, 0x01	; 1
				Writing beyond a controller limit will result in smooth
				transition to the next controller.				
*****************************************************************************/
void TransferBuffer(_far char * buffer)
{
	do {		
    1766:	88 81       	ld	r24, Y
    1768:	88 23       	and	r24, r24
    176a:	c1 f7       	brne	.-16     	; 0x175c <_Z14TransferBufferPc+0x6>
		LCD_write_data( pgm_read_byte(buffer));	
		buffer++;
	} while(*buffer);
}
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <_Z18TransferBuffer_RAMPc>:

void TransferBuffer_RAM(_far char * buffer)
{
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
    1778:	89 91       	ld	r24, Y+
	do
	{
		LCD_write_data(*buffer++);
    177a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
	} while(*buffer);
}

void TransferBuffer_RAM(_far char * buffer)
{
	do
    177e:	89 91       	ld	r24, Y+
    1780:	88 23       	and	r24, r24
    1782:	d9 f7       	brne	.-10     	; 0x177a <_Z18TransferBuffer_RAMPc+0x8>
	{
		LCD_write_data(*buffer++);
	}
	while(*buffer);
}
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <_Z25TransferBufferFixedLengthPKch>:
Description:    This function controls LCD writes to line 1 or 2 of the LCD.  
				The string buffer must be located in PROGMEM space!
				
*****************************************************************************/
void TransferBufferFixedLength( _far const char * mData, byte length )
{
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	ec 01       	movw	r28, r24
	int i;
	for (i=0; i < length; i++)
    1798:	e6 2e       	mov	r14, r22
    179a:	ff 24       	eor	r15, r15
    179c:	e1 14       	cp	r14, r1
    179e:	f1 04       	cpc	r15, r1
    17a0:	69 f0       	breq	.+26     	; 0x17bc <_Z25TransferBufferFixedLengthPKch+0x32>
    17a2:	00 e0       	ldi	r16, 0x00	; 0
    17a4:	10 e0       	ldi	r17, 0x00	; 0
	{
		// read from PROGMEM and send:
		LCD_write_data( pgm_read_byte(mData+i));
    17a6:	fe 01       	movw	r30, r28
    17a8:	e0 0f       	add	r30, r16
    17aa:	f1 1f       	adc	r31, r17
    17ac:	84 91       	lpm	r24, Z+
    17ae:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
				
*****************************************************************************/
void TransferBufferFixedLength( _far const char * mData, byte length )
{
	int i;
	for (i=0; i < length; i++)
    17b2:	0f 5f       	subi	r16, 0xFF	; 255
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	0e 15       	cp	r16, r14
    17b8:	1f 05       	cpc	r17, r15
    17ba:	ac f3       	brlt	.-22     	; 0x17a6 <_Z25TransferBufferFixedLengthPKch+0x1c>
	{
		// read from PROGMEM and send:
		LCD_write_data( pgm_read_byte(mData+i));
	}
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	08 95       	ret

000017ca <_Z29TransferBufferFixedLength_RAMPKch>:
				controller  [1,2, 3(both)]
Returns:        none
Description:    This function controls LCD writes to line 1 or 2 of the LCD.  
*****************************************************************************/
void TransferBufferFixedLength_RAM( _far const char * string, byte length )
{
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
	int i;
	for (i=0; i < length; i++)
    17d6:	e6 2e       	mov	r14, r22
    17d8:	ff 24       	eor	r15, r15
    17da:	e1 14       	cp	r14, r1
    17dc:	f1 04       	cpc	r15, r1
    17de:	69 f0       	breq	.+26     	; 0x17fa <_Z29TransferBufferFixedLength_RAMPKch+0x30>
    17e0:	08 2f       	mov	r16, r24
    17e2:	19 2f       	mov	r17, r25
    17e4:	c0 e0       	ldi	r28, 0x00	; 0
    17e6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LCD_write_data( *(string+i) );
    17e8:	f8 01       	movw	r30, r16
    17ea:	81 91       	ld	r24, Z+
    17ec:	8f 01       	movw	r16, r30
    17ee:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
Description:    This function controls LCD writes to line 1 or 2 of the LCD.  
*****************************************************************************/
void TransferBufferFixedLength_RAM( _far const char * string, byte length )
{
	int i;
	for (i=0; i < length; i++)
    17f2:	21 96       	adiw	r28, 0x01	; 1
    17f4:	ce 15       	cp	r28, r14
    17f6:	df 05       	cpc	r29, r15
    17f8:	bc f3       	brlt	.-18     	; 0x17e8 <_Z29TransferBufferFixedLength_RAMPKch+0x1e>
	{
		LCD_write_data( *(string+i) );
	}
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	08 95       	ret

00001808 <_Z12DD_DrawAllOnv>:
				controller  [1,2, 3(both)]
Returns:        none
Description:    This function turns on all pixels in the display.
*****************************************************************************/
void DD_DrawAllOn()
{
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
	int i=0;
	int j=0;
	for (i=0; i < 8; i++)
    1810:	00 e0       	ldi	r16, 0x00	; 0
    1812:	10 e0       	ldi	r17, 0x00	; 0
	{
		send_controller_xy_address( BOTH, i, 0 );	
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	60 2f       	mov	r22, r16
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z26send_controller_xy_addresshcc>
    181e:	c0 e4       	ldi	r28, 0x40	; 64
    1820:	d0 e0       	ldi	r29, 0x00	; 0
		for (j=0; j<64; j++)
			LCD_write(DATA, 0xFF, BOTH);	// BOTH
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	6f ef       	ldi	r22, 0xFF	; 255
    1826:	43 e0       	ldi	r20, 0x03	; 3
    1828:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
    182c:	21 97       	sbiw	r28, 0x01	; 1
	int i=0;
	int j=0;
	for (i=0; i < 8; i++)
	{
		send_controller_xy_address( BOTH, i, 0 );	
		for (j=0; j<64; j++)
    182e:	c9 f7       	brne	.-14     	; 0x1822 <_Z12DD_DrawAllOnv+0x1a>
*****************************************************************************/
void DD_DrawAllOn()
{
	int i=0;
	int j=0;
	for (i=0; i < 8; i++)
    1830:	0f 5f       	subi	r16, 0xFF	; 255
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	08 30       	cpi	r16, 0x08	; 8
    1836:	11 05       	cpc	r17, r1
    1838:	69 f7       	brne	.-38     	; 0x1814 <_Z12DD_DrawAllOnv+0xc>
	{
		send_controller_xy_address( BOTH, i, 0 );	
		for (j=0; j<64; j++)
			LCD_write(DATA, 0xFF, BOTH);	// BOTH
	}
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	08 95       	ret

00001844 <_Z13DD_DrawAllOffv>:
void DD_DrawAllOff()
{
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
	int x,y;	
	for (x=0; x < 8; x++)
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	10 e0       	ldi	r17, 0x00	; 0
	{
	  send_controller_xy_address( BOTH, x, 0 );
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	60 2f       	mov	r22, r16
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z26send_controller_xy_addresshcc>
    185a:	c0 e4       	ldi	r28, 0x40	; 64
    185c:	d0 e0       	ldi	r29, 0x00	; 0
	  for (y=0; y < 64; y++)	
	    LCD_write(DATA, 00, BOTH);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	43 e0       	ldi	r20, 0x03	; 3
    1864:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
    1868:	21 97       	sbiw	r28, 0x01	; 1
{
	int x,y;	
	for (x=0; x < 8; x++)
	{
	  send_controller_xy_address( BOTH, x, 0 );
	  for (y=0; y < 64; y++)	
    186a:	c9 f7       	brne	.-14     	; 0x185e <_Z13DD_DrawAllOffv+0x1a>
	}
}
void DD_DrawAllOff()
{
	int x,y;	
	for (x=0; x < 8; x++)
    186c:	0f 5f       	subi	r16, 0xFF	; 255
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	08 30       	cpi	r16, 0x08	; 8
    1872:	11 05       	cpc	r17, r1
    1874:	69 f7       	brne	.-38     	; 0x1850 <_Z13DD_DrawAllOffv+0xc>
	{
	  send_controller_xy_address( BOTH, x, 0 );
	  for (y=0; y < 64; y++)	
	    LCD_write(DATA, 00, BOTH);
	}
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <_Z13DD_DrawZigZagv>:
void DD_DrawZigZag()
{					 
//	TransferBuffer( (char*)ZigZag );
}
    1880:	08 95       	ret

00001882 <_Z12DD_EraseLinehhh>:

void DD_EraseLine(byte mLine, byte mStartCol, byte mEndCol)
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	c6 2f       	mov	r28, r22
    1888:	d4 2f       	mov	r29, r20
	byte i;
		
	GotoAddress( mLine, mStartCol );
    188a:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	for (i=mStartCol; i<mEndCol; i++)
    188e:	cd 17       	cp	r28, r29
    1890:	30 f4       	brcc	.+12     	; 0x189e <_Z12DD_EraseLinehhh+0x1c>
	{
	  LCD_write_data( 0x00 );
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
void DD_EraseLine(byte mLine, byte mStartCol, byte mEndCol)
{
	byte i;
		
	GotoAddress( mLine, mStartCol );
	for (i=mStartCol; i<mEndCol; i++)
    1898:	cf 5f       	subi	r28, 0xFF	; 255
    189a:	cd 17       	cp	r28, r29
    189c:	d0 f3       	brcs	.-12     	; 0x1892 <_Z12DD_EraseLinehhh+0x10>
	{
	  LCD_write_data( 0x00 );

	}
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	08 95       	ret

000018a4 <_Z12DD_Clear_EOLv>:

void DD_Clear_EOL()
{
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
	// Starts from where ever it left off:
	byte y_save = Get_y_address();
    18ae:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z13Get_y_addressv>
    18b2:	f8 2e       	mov	r15, r24
	byte y_pixs = (127 - y_save);
    18b4:	0f e7       	ldi	r16, 0x7F	; 127
    18b6:	08 1b       	sub	r16, r24
	for (int i=0; i<y_pixs; i++)
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	01 15       	cp	r16, r1
    18bc:	11 05       	cpc	r17, r1
    18be:	49 f0       	breq	.+18     	; 0x18d2 <_Z12DD_Clear_EOLv+0x2e>
    18c0:	c0 e0       	ldi	r28, 0x00	; 0
    18c2:	d0 e0       	ldi	r29, 0x00	; 0
		LCD_write_data(  0x00 );
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
void DD_Clear_EOL()
{
	// Starts from where ever it left off:
	byte y_save = Get_y_address();
	byte y_pixs = (127 - y_save);
	for (int i=0; i<y_pixs; i++)
    18ca:	21 96       	adiw	r28, 0x01	; 1
    18cc:	c0 17       	cp	r28, r16
    18ce:	d1 07       	cpc	r29, r17
    18d0:	cc f3       	brlt	.-14     	; 0x18c4 <_Z12DD_Clear_EOLv+0x20>
		LCD_write_data(  0x00 );

	// Restore the Y_address in the controller :
	Set_y_address( y_save );	
    18d2:	8f 2d       	mov	r24, r15
    18d4:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
	send_controller_y_address();
    18d8:	0e 94 9e 0a 	call	0x153c	; 0x153c <_Z25send_controller_y_addressv>
	  LCD_write( DATA, 0x00 );
//	  y_address = Increment_y_address();
	} 
	while (y_address != 0);
*/	
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	08 95       	ret

000018e8 <_Z11DD_DrawIconhhP6stIcon>:
				
				controller  [1,2, 3(both)]
Description:    This function sends data of the icon to LCD	
*****************************************************************************/
void DD_DrawIcon(byte origx, byte origy, _far struct stIcon* mIcon )
{
    18e8:	bf 92       	push	r11
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	b6 2e       	mov	r11, r22
    18fc:	8a 01       	movw	r16, r20
	int i=origx;
    18fe:	c8 2e       	mov	r12, r24
    1900:	dd 24       	eor	r13, r13
	_far byte* ptr=0;
	
	for (; i < origx+mIcon->sizex; i++)
    1902:	fa 01       	movw	r30, r20
    1904:	83 81       	ldd	r24, Z+3	; 0x03
    1906:	96 01       	movw	r18, r12
    1908:	28 0f       	add	r18, r24
    190a:	31 1d       	adc	r19, r1
    190c:	c2 16       	cp	r12, r18
    190e:	d3 06       	cpc	r13, r19
    1910:	24 f5       	brge	.+72     	; 0x195a <_Z11DD_DrawIconhhP6stIcon+0x72>
    1912:	e6 01       	movw	r28, r12
    1914:	ee 24       	eor	r14, r14
    1916:	ff 24       	eor	r15, r15
	{
		GotoAddress( i, origy );
    1918:	8c 2f       	mov	r24, r28
    191a:	6b 2d       	mov	r22, r11
    191c:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
		ptr = (_far byte*)mIcon->ptr + ((i-origx)*mIcon->sizey);
    1920:	f8 01       	movw	r30, r16
    1922:	62 81       	ldd	r22, Z+2	; 0x02
    1924:	26 2f       	mov	r18, r22
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	e2 9e       	mul	r14, r18
    192a:	c0 01       	movw	r24, r0
    192c:	e3 9e       	mul	r14, r19
    192e:	90 0d       	add	r25, r0
    1930:	f2 9e       	mul	r15, r18
    1932:	90 0d       	add	r25, r0
    1934:	11 24       	eor	r1, r1
    1936:	20 81       	ld	r18, Z
    1938:	31 81       	ldd	r19, Z+1	; 0x01
		TransferBufferFixedLength ((char*)ptr, mIcon->sizey);
    193a:	82 0f       	add	r24, r18
    193c:	93 1f       	adc	r25, r19
    193e:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z25TransferBufferFixedLengthPKch>
void DD_DrawIcon(byte origx, byte origy, _far struct stIcon* mIcon )
{
	int i=origx;
	_far byte* ptr=0;
	
	for (; i < origx+mIcon->sizex; i++)
    1942:	21 96       	adiw	r28, 0x01	; 1
    1944:	08 94       	sec
    1946:	e1 1c       	adc	r14, r1
    1948:	f1 1c       	adc	r15, r1
    194a:	f8 01       	movw	r30, r16
    194c:	83 81       	ldd	r24, Z+3	; 0x03
    194e:	96 01       	movw	r18, r12
    1950:	28 0f       	add	r18, r24
    1952:	31 1d       	adc	r19, r1
    1954:	c2 17       	cp	r28, r18
    1956:	d3 07       	cpc	r29, r19
    1958:	fc f2       	brlt	.-66     	; 0x1918 <_Z11DD_DrawIconhhP6stIcon+0x30>
	{
		GotoAddress( i, origy );
		ptr = (_far byte*)mIcon->ptr + ((i-origx)*mIcon->sizey);
		TransferBufferFixedLength ((char*)ptr, mIcon->sizey);
	}
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	bf 90       	pop	r11
    196c:	08 95       	ret

0000196e <_Z16DD_Inverse_Videohhh>:
Parameters:  					
Description:    This function inverts the dark & light pixels.  Does one 
				complete line from mStart column to mEndColumn.
*****************************************************************************/
void DD_Inverse_Video(byte mLine, byte mStartColumn, byte mEndColumn )
{
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	0f 92       	push	r0
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	f8 2e       	mov	r15, r24
	int i;
	int mController;
	byte  tmp;
	
	for (i=mStartColumn; i < mEndColumn; i++)
    1986:	c6 2e       	mov	r12, r22
    1988:	dd 24       	eor	r13, r13
    198a:	04 2f       	mov	r16, r20
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	c0 16       	cp	r12, r16
    1990:	d1 06       	cpc	r13, r17
    1992:	14 f1       	brlt	.+68     	; 0x19d8 <_Z16DD_Inverse_Videohhh+0x6a>
    1994:	29 c0       	rjmp	.+82     	; 0x19e8 <_Z16DD_Inverse_Videohhh+0x7a>
	{
		mController = (i<64) ?  1 : 2 ;
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	ee 24       	eor	r14, r14
    199a:	e3 94       	inc	r14
		GotoAddress(mLine, i);
    199c:	8f 2d       	mov	r24, r15
    199e:	6c 2d       	mov	r22, r12
    19a0:	49 83       	std	Y+1, r20	; 0x01
    19a2:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
		tmp = LCD_read( DATA, mController );
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	6e 2d       	mov	r22, r14
    19aa:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
		tmp = LCD_read( DATA, mController );	// Read must be done 2x!
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	6e 2d       	mov	r22, r14
    19b2:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
    19b6:	e8 2e       	mov	r14, r24
		tmp ^= 0xFF;					// inverse bits
		GotoAddress(mLine, i);
    19b8:	8f 2d       	mov	r24, r15
    19ba:	6c 2d       	mov	r22, r12
    19bc:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	{
		mController = (i<64) ?  1 : 2 ;
		GotoAddress(mLine, i);
		tmp = LCD_read( DATA, mController );
		tmp = LCD_read( DATA, mController );	// Read must be done 2x!
		tmp ^= 0xFF;					// inverse bits
    19c0:	6e 2d       	mov	r22, r14
    19c2:	60 95       	com	r22
		GotoAddress(mLine, i);
		LCD_write(DATA, tmp, mController);		
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	49 81       	ldd	r20, Y+1	; 0x01
    19c8:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
{
	int i;
	int mController;
	byte  tmp;
	
	for (i=mStartColumn; i < mEndColumn; i++)
    19cc:	08 94       	sec
    19ce:	c1 1c       	adc	r12, r1
    19d0:	d1 1c       	adc	r13, r1
    19d2:	c0 16       	cp	r12, r16
    19d4:	d1 06       	cpc	r13, r17
    19d6:	44 f4       	brge	.+16     	; 0x19e8 <_Z16DD_Inverse_Videohhh+0x7a>
	{
		mController = (i<64) ?  1 : 2 ;
    19d8:	80 e4       	ldi	r24, 0x40	; 64
    19da:	c8 16       	cp	r12, r24
    19dc:	d1 04       	cpc	r13, r1
    19de:	dc f2       	brlt	.-74     	; 0x1996 <_Z16DD_Inverse_Videohhh+0x28>
    19e0:	42 e0       	ldi	r20, 0x02	; 2
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	e8 2e       	mov	r14, r24
    19e6:	da cf       	rjmp	.-76     	; 0x199c <_Z16DD_Inverse_Videohhh+0x2e>
		tmp = LCD_read( DATA, mController );	// Read must be done 2x!
		tmp ^= 0xFF;					// inverse bits
		GotoAddress(mLine, i);
		LCD_write(DATA, tmp, mController);		
	}
}
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	08 95       	ret

000019fc <_Z21DD_DrawHorizontalLinehhh>:
				mStart column								[0..127]
				mEnd column									[0..127]
Description:    This function draws a line horizontally on the LCD	
*****************************************************************************/
void DD_DrawHorizontalLine(byte mVertical, byte mStart, byte mEnd)
{
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	14 2f       	mov	r17, r20
	byte Line 	  = mVertical >> 3;		// divide by 8
	byte FillBit  = mVertical % 8;		// vertical pixel within byte
    1a12:	98 2f       	mov	r25, r24
    1a14:	97 70       	andi	r25, 0x07	; 7
	byte FillMask = 1 << FillBit;		// shift to proper position.
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	02 2f       	mov	r16, r18
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <_Z21DD_DrawHorizontalLinehhh+0x24>
    1a1e:	00 0f       	add	r16, r16
    1a20:	9a 95       	dec	r25
    1a22:	ea f7       	brpl	.-6      	; 0x1a1e <_Z21DD_DrawHorizontalLinehhh+0x22>
	byte i;
	byte Controller;
	byte tmp;
	
	if (mVertical > 63)				// 64 is off screen!
    1a24:	80 34       	cpi	r24, 0x40	; 64
    1a26:	68 f5       	brcc	.+90     	; 0x1a82 <_Z21DD_DrawHorizontalLinehhh+0x86>
		return;	
	
	for (i=mStart; i < mEnd; i++)
    1a28:	64 17       	cp	r22, r20
    1a2a:	58 f5       	brcc	.+86     	; 0x1a82 <_Z21DD_DrawHorizontalLinehhh+0x86>
				mEnd column									[0..127]
Description:    This function draws a line horizontally on the LCD	
*****************************************************************************/
void DD_DrawHorizontalLine(byte mVertical, byte mStart, byte mEnd)
{
	byte Line 	  = mVertical >> 3;		// divide by 8
    1a2c:	d8 2e       	mov	r13, r24
    1a2e:	d6 94       	lsr	r13
    1a30:	d6 94       	lsr	r13
    1a32:	d6 94       	lsr	r13
    1a34:	e6 2e       	mov	r14, r22
    1a36:	1e c0       	rjmp	.+60     	; 0x1a74 <_Z21DD_DrawHorizontalLinehhh+0x78>
	if (mVertical > 63)				// 64 is off screen!
		return;	
	
	for (i=mStart; i < mEnd; i++)
	{
		Controller = (i<64) ?  1 : 2;
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	ff 24       	eor	r15, r15
    1a3c:	f3 94       	inc	r15
		GotoAddress(Line, i);
    1a3e:	8d 2d       	mov	r24, r13
    1a40:	6e 2d       	mov	r22, r14
    1a42:	49 83       	std	Y+1, r20	; 0x01
    1a44:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
		tmp = LCD_read( DATA, Controller );
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	6f 2d       	mov	r22, r15
    1a4c:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
		tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	6f 2d       	mov	r22, r15
    1a54:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
    1a58:	f8 2e       	mov	r15, r24
		tmp |= FillMask;						// inverse bits
		GotoAddress(Line, i);
    1a5a:	8d 2d       	mov	r24, r13
    1a5c:	6e 2d       	mov	r22, r14
    1a5e:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	{
		Controller = (i<64) ?  1 : 2;
		GotoAddress(Line, i);
		tmp = LCD_read( DATA, Controller );
		tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
		tmp |= FillMask;						// inverse bits
    1a62:	6f 2d       	mov	r22, r15
    1a64:	60 2b       	or	r22, r16
		GotoAddress(Line, i);
		LCD_write(DATA, tmp, Controller);			
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	49 81       	ldd	r20, Y+1	; 0x01
    1a6a:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	byte tmp;
	
	if (mVertical > 63)				// 64 is off screen!
		return;	
	
	for (i=mStart; i < mEnd; i++)
    1a6e:	e3 94       	inc	r14
    1a70:	e1 16       	cp	r14, r17
    1a72:	38 f4       	brcc	.+14     	; 0x1a82 <_Z21DD_DrawHorizontalLinehhh+0x86>
	{
		Controller = (i<64) ?  1 : 2;
    1a74:	8e 2d       	mov	r24, r14
    1a76:	80 34       	cpi	r24, 0x40	; 64
    1a78:	f8 f2       	brcs	.-66     	; 0x1a38 <_Z21DD_DrawHorizontalLinehhh+0x3c>
    1a7a:	42 e0       	ldi	r20, 0x02	; 2
    1a7c:	92 e0       	ldi	r25, 0x02	; 2
    1a7e:	f9 2e       	mov	r15, r25
    1a80:	de cf       	rjmp	.-68     	; 0x1a3e <_Z21DD_DrawHorizontalLinehhh+0x42>
		tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
		tmp |= FillMask;						// inverse bits
		GotoAddress(Line, i);
		LCD_write(DATA, tmp, Controller);			
	}
}
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	df 90       	pop	r13
    1a92:	08 95       	ret

00001a94 <_Z19DD_DrawVerticalLinehhh>:
				mEnd 									[0..63]
				mColumn									[0..127]
Description:    This function draws a line horizontally on the LCD	
*****************************************************************************/
void DD_DrawVerticalLine(byte mStart, byte mEnd, byte mColumn)
{
    1a94:	af 92       	push	r10
    1a96:	bf 92       	push	r11
    1a98:	cf 92       	push	r12
    1a9a:	df 92       	push	r13
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	0f 92       	push	r0
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	14 2f       	mov	r17, r20
	byte i,tmp;
	byte Controller = ((mColumn<64) ?  1 : 2);
    1ab0:	40 34       	cpi	r20, 0x40	; 64
    1ab2:	08 f0       	brcs	.+2      	; 0x1ab6 <_Z19DD_DrawVerticalLinehhh+0x22>
    1ab4:	91 c0       	rjmp	.+290    	; 0x1bd8 <_Z19DD_DrawVerticalLinehhh+0x144>
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	dd 24       	eor	r13, r13
    1aba:	d3 94       	inc	r13
	byte StartLine 	= mStart >> 3;			// divide by 8
    1abc:	e8 2e       	mov	r14, r24
    1abe:	e6 94       	lsr	r14
    1ac0:	e6 94       	lsr	r14
    1ac2:	e6 94       	lsr	r14
	byte EndLine 	= mEnd   >> 3;			// divide by 8		
    1ac4:	a6 2e       	mov	r10, r22
    1ac6:	bb 24       	eor	r11, r11
    1ac8:	f6 2e       	mov	r15, r22
    1aca:	f6 94       	lsr	r15
    1acc:	f6 94       	lsr	r15
    1ace:	f6 94       	lsr	r15
	byte FillBit  	= 1 << (mStart % 8);	// vertical pixel within byte
    1ad0:	87 70       	andi	r24, 0x07	; 7
    1ad2:	21 e0       	ldi	r18, 0x01	; 1
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <_Z19DD_DrawVerticalLinehhh+0x48>
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <_Z19DD_DrawVerticalLinehhh+0x44>
    1ae0:	82 2f       	mov	r24, r18
	byte FillMask 	= FillBit;				// shift to proper position.

	// Create Mask:
	while (FillBit < 0x80)
    1ae2:	27 fd       	sbrc	r18, 7
    1ae4:	7d c0       	rjmp	.+250    	; 0x1be0 <_Z19DD_DrawVerticalLinehhh+0x14c>
    1ae6:	02 2f       	mov	r16, r18
	{
		FillBit  = FillBit << 1;
    1ae8:	88 0f       	add	r24, r24
		FillMask = FillMask | FillBit;			
    1aea:	08 2b       	or	r16, r24
	byte EndLine 	= mEnd   >> 3;			// divide by 8		
	byte FillBit  	= 1 << (mStart % 8);	// vertical pixel within byte
	byte FillMask 	= FillBit;				// shift to proper position.

	// Create Mask:
	while (FillBit < 0x80)
    1aec:	87 ff       	sbrs	r24, 7
    1aee:	fc cf       	rjmp	.-8      	; 0x1ae8 <_Z19DD_DrawVerticalLinehhh+0x54>
		FillBit  = FillBit << 1;
		FillMask = FillMask | FillBit;			
	} 
	
	// Draw the First line's mask
	GotoAddress(StartLine, mColumn);
    1af0:	8e 2d       	mov	r24, r14
    1af2:	61 2f       	mov	r22, r17
    1af4:	49 83       	std	Y+1, r20	; 0x01
    1af6:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	tmp = LCD_read( DATA, Controller );
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	6d 2d       	mov	r22, r13
    1afe:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
	tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	6d 2d       	mov	r22, r13
    1b06:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
    1b0a:	d8 2e       	mov	r13, r24
	tmp |= FillMask;						// inverse bits
	GotoAddress(StartLine, mColumn);
    1b0c:	8e 2d       	mov	r24, r14
    1b0e:	61 2f       	mov	r22, r17
    1b10:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	
	// Draw the First line's mask
	GotoAddress(StartLine, mColumn);
	tmp = LCD_read( DATA, Controller );
	tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
	tmp |= FillMask;						// inverse bits
    1b14:	60 2f       	mov	r22, r16
    1b16:	6d 29       	or	r22, r13
	GotoAddress(StartLine, mColumn);
	LCD_write(DATA, tmp, Controller);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	49 81       	ldd	r20, Y+1	; 0x01
    1b1c:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>

	// Create Bottom Mask:
	FillBit  = 1 << (mEnd % 8);		// vertical pixel within byte
    1b20:	87 e0       	ldi	r24, 0x07	; 7
    1b22:	a8 22       	and	r10, r24
    1b24:	bb 24       	eor	r11, r11
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <_Z19DD_DrawVerticalLinehhh+0x9c>
    1b2c:	22 0f       	add	r18, r18
    1b2e:	33 1f       	adc	r19, r19
    1b30:	aa 94       	dec	r10
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <_Z19DD_DrawVerticalLinehhh+0x98>
    1b34:	82 2f       	mov	r24, r18
	FillMask = FillBit;				// shift to proper position
	// Create Mask:
	while (FillBit > 0x01)
    1b36:	22 30       	cpi	r18, 0x02	; 2
    1b38:	08 f4       	brcc	.+2      	; 0x1b3c <_Z19DD_DrawVerticalLinehhh+0xa8>
    1b3a:	54 c0       	rjmp	.+168    	; 0x1be4 <_Z19DD_DrawVerticalLinehhh+0x150>
    1b3c:	c2 2e       	mov	r12, r18
	{
		FillBit  = FillBit >> 1;
    1b3e:	86 95       	lsr	r24
		FillMask = FillMask | FillBit;
    1b40:	c8 2a       	or	r12, r24

	// Create Bottom Mask:
	FillBit  = 1 << (mEnd % 8);		// vertical pixel within byte
	FillMask = FillBit;				// shift to proper position
	// Create Mask:
	while (FillBit > 0x01)
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	e0 f7       	brcc	.-8      	; 0x1b3e <_Z19DD_DrawVerticalLinehhh+0xaa>
		FillBit  = FillBit >> 1;
		FillMask = FillMask | FillBit;
	} 

	// Draw the Bottom line's mask
	Controller = (mColumn<64) ?  1 : 2;
    1b46:	10 34       	cpi	r17, 0x40	; 64
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <_Z19DD_DrawVerticalLinehhh+0xb8>
    1b4a:	42 c0       	rjmp	.+132    	; 0x1bd0 <_Z19DD_DrawVerticalLinehhh+0x13c>
    1b4c:	01 e0       	ldi	r16, 0x01	; 1
    1b4e:	aa 24       	eor	r10, r10
    1b50:	a3 94       	inc	r10
	GotoAddress(EndLine, mColumn);
    1b52:	8f 2d       	mov	r24, r15
    1b54:	61 2f       	mov	r22, r17
    1b56:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	tmp = LCD_read( DATA, Controller );
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	6a 2d       	mov	r22, r10
    1b5e:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
	tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	6a 2d       	mov	r22, r10
    1b66:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
    1b6a:	d8 2e       	mov	r13, r24
	tmp |= FillMask;						// inverse bits
	GotoAddress(EndLine, mColumn);
    1b6c:	8f 2d       	mov	r24, r15
    1b6e:	61 2f       	mov	r22, r17
    1b70:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	// Draw the Bottom line's mask
	Controller = (mColumn<64) ?  1 : 2;
	GotoAddress(EndLine, mColumn);
	tmp = LCD_read( DATA, Controller );
	tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
	tmp |= FillMask;						// inverse bits
    1b74:	6d 2d       	mov	r22, r13
    1b76:	6c 29       	or	r22, r12
	GotoAddress(EndLine, mColumn);
	LCD_write(DATA, tmp, Controller);			
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	40 2f       	mov	r20, r16
    1b7c:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	
	// Now any lines in the middle:	
	StartLine = StartLine+1;
    1b80:	e3 94       	inc	r14
	EndLine   = EndLine -1;
    1b82:	fa 94       	dec	r15
	if (EndLine > StartLine)
    1b84:	ef 14       	cp	r14, r15
    1b86:	c0 f4       	brcc	.+48     	; 0x1bb8 <_Z19DD_DrawVerticalLinehhh+0x124>
	{
		for (i=StartLine; i <= EndLine; i++)
		{
			GotoAddress(i, mColumn);
    1b88:	8e 2d       	mov	r24, r14
    1b8a:	61 2f       	mov	r22, r17
    1b8c:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
			tmp = LCD_read( DATA, Controller );
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	6a 2d       	mov	r22, r10
    1b94:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
			tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	6a 2d       	mov	r22, r10
    1b9c:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
			tmp |= 0xFF;						// inverse bits
			GotoAddress(i, mColumn);
    1ba0:	8e 2d       	mov	r24, r14
    1ba2:	61 2f       	mov	r22, r17
    1ba4:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
			LCD_write(DATA, tmp, Controller);			
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	6f ef       	ldi	r22, 0xFF	; 255
    1bac:	40 2f       	mov	r20, r16
    1bae:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
	// Now any lines in the middle:	
	StartLine = StartLine+1;
	EndLine   = EndLine -1;
	if (EndLine > StartLine)
	{
		for (i=StartLine; i <= EndLine; i++)
    1bb2:	e3 94       	inc	r14
    1bb4:	fe 14       	cp	r15, r14
    1bb6:	40 f7       	brcc	.-48     	; 0x1b88 <_Z19DD_DrawVerticalLinehhh+0xf4>
			tmp |= 0xFF;						// inverse bits
			GotoAddress(i, mColumn);
			LCD_write(DATA, tmp, Controller);			
		}
	}
}
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	08 95       	ret
		FillBit  = FillBit >> 1;
		FillMask = FillMask | FillBit;
	} 

	// Draw the Bottom line's mask
	Controller = (mColumn<64) ?  1 : 2;
    1bd0:	02 e0       	ldi	r16, 0x02	; 2
    1bd2:	22 e0       	ldi	r18, 0x02	; 2
    1bd4:	a2 2e       	mov	r10, r18
    1bd6:	bd cf       	rjmp	.-134    	; 0x1b52 <_Z19DD_DrawVerticalLinehhh+0xbe>
Description:    This function draws a line horizontally on the LCD	
*****************************************************************************/
void DD_DrawVerticalLine(byte mStart, byte mEnd, byte mColumn)
{
	byte i,tmp;
	byte Controller = ((mColumn<64) ?  1 : 2);
    1bd8:	42 e0       	ldi	r20, 0x02	; 2
    1bda:	32 e0       	ldi	r19, 0x02	; 2
    1bdc:	d3 2e       	mov	r13, r19
    1bde:	6e cf       	rjmp	.-292    	; 0x1abc <_Z19DD_DrawVerticalLinehhh+0x28>
	byte StartLine 	= mStart >> 3;			// divide by 8
	byte EndLine 	= mEnd   >> 3;			// divide by 8		
	byte FillBit  	= 1 << (mStart % 8);	// vertical pixel within byte
	byte FillMask 	= FillBit;				// shift to proper position.
    1be0:	02 2f       	mov	r16, r18
    1be2:	86 cf       	rjmp	.-244    	; 0x1af0 <_Z19DD_DrawVerticalLinehhh+0x5c>

	// Create Bottom Mask:
	FillBit  = 1 << (mEnd % 8);		// vertical pixel within byte
	FillMask = FillBit;				// shift to proper position
	// Create Mask:
	while (FillBit > 0x01)
    1be4:	c2 2e       	mov	r12, r18
    1be6:	af cf       	rjmp	.-162    	; 0x1b46 <_Z19DD_DrawVerticalLinehhh+0xb2>

00001be8 <_Z11DD_SetPixelhh>:
Parameters:  	mVertical	Pixel Line number of display	[0..63] 
				mColumn		 column								[0..127]
Description:    This function draws a line horizontally on the LCD	
*****************************************************************************/
void DD_SetPixel(byte mVertical, byte mColumn)
{
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	0f 92       	push	r0
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	f6 2e       	mov	r15, r22
	byte Line = mVertical >> 3;		// divide by 8
    1bfc:	e8 2e       	mov	r14, r24
    1bfe:	e6 94       	lsr	r14
    1c00:	e6 94       	lsr	r14
    1c02:	e6 94       	lsr	r14
	byte Fillbit = mVertical % 8;		// vertical pixel within byte
    1c04:	87 70       	andi	r24, 0x07	; 7
	byte FillMask = 1 << Fillbit;		// shift to proper position.
    1c06:	21 e0       	ldi	r18, 0x01	; 1
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	02 2f       	mov	r16, r18
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <_Z11DD_SetPixelhh+0x28>
    1c0e:	00 0f       	add	r16, r16
    1c10:	8a 95       	dec	r24
    1c12:	ea f7       	brpl	.-6      	; 0x1c0e <_Z11DD_SetPixelhh+0x26>
	byte Controller = 0;
	byte tmp;

	Controller = (mColumn<64) ?  1 : 2;
    1c14:	60 34       	cpi	r22, 0x40	; 64
    1c16:	10 f1       	brcs	.+68     	; 0x1c5c <_Z11DD_SetPixelhh+0x74>
    1c18:	42 e0       	ldi	r20, 0x02	; 2
    1c1a:	12 e0       	ldi	r17, 0x02	; 2
	GotoAddress(Line, mColumn);
    1c1c:	8e 2d       	mov	r24, r14
    1c1e:	6f 2d       	mov	r22, r15
    1c20:	49 83       	std	Y+1, r20	; 0x01
    1c22:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	tmp = LCD_read( DATA, Controller );
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	61 2f       	mov	r22, r17
    1c2a:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
	tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	61 2f       	mov	r22, r17
    1c32:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z8LCD_readhh>
    1c36:	18 2f       	mov	r17, r24
	tmp |= FillMask;						// inverse bits
	GotoAddress(Line, mColumn);
    1c38:	8e 2d       	mov	r24, r14
    1c3a:	6f 2d       	mov	r22, r15
    1c3c:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>

	Controller = (mColumn<64) ?  1 : 2;
	GotoAddress(Line, mColumn);
	tmp = LCD_read( DATA, Controller );
	tmp = LCD_read( DATA, Controller );	// Read must be done 2x!
	tmp |= FillMask;						// inverse bits
    1c40:	61 2f       	mov	r22, r17
    1c42:	60 2b       	or	r22, r16
	GotoAddress(Line, mColumn);
	LCD_write(DATA, tmp, Controller);
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	49 81       	ldd	r20, Y+1	; 0x01
    1c48:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z9LCD_writehhc>
}
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	08 95       	ret
	byte Fillbit = mVertical % 8;		// vertical pixel within byte
	byte FillMask = 1 << Fillbit;		// shift to proper position.
	byte Controller = 0;
	byte tmp;

	Controller = (mColumn<64) ?  1 : 2;
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	11 e0       	ldi	r17, 0x01	; 1
    1c60:	dd cf       	rjmp	.-70     	; 0x1c1c <_Z11DD_SetPixelhh+0x34>

00001c62 <_Z10DD_DrawBoxhhhh>:
				mColumnStart 		[0..127]
				mColumnEnd			[0..127]
Description:    This function draws a line horizontally on the LCD	
*****************************************************************************/
void DD_DrawBox (byte mLinePixStart, byte mLinePixEnd, byte mColumnStart, byte mColumnEnd)
{
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	18 2f       	mov	r17, r24
    1c6c:	d6 2f       	mov	r29, r22
    1c6e:	c4 2f       	mov	r28, r20
    1c70:	02 2f       	mov	r16, r18
	//   
	DD_DrawVerticalLine  ( mLinePixStart, mLinePixEnd, mColumnStart );
    1c72:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_Z19DD_DrawVerticalLinehhh>
	DD_DrawVerticalLine  ( mLinePixStart, mLinePixEnd, mColumnEnd );
    1c76:	81 2f       	mov	r24, r17
    1c78:	6d 2f       	mov	r22, r29
    1c7a:	40 2f       	mov	r20, r16
    1c7c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_Z19DD_DrawVerticalLinehhh>
	//   Row, 
	DD_DrawHorizontalLine( mLinePixStart, mColumnStart, mColumnEnd );
    1c80:	81 2f       	mov	r24, r17
    1c82:	6c 2f       	mov	r22, r28
    1c84:	40 2f       	mov	r20, r16
    1c86:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_Z21DD_DrawHorizontalLinehhh>
	DD_DrawHorizontalLine( mLinePixEnd,   mColumnStart, mColumnEnd );
    1c8a:	8d 2f       	mov	r24, r29
    1c8c:	6c 2f       	mov	r22, r28
    1c8e:	40 2f       	mov	r20, r16
    1c90:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_Z21DD_DrawHorizontalLinehhh>
}
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	08 95       	ret

00001c9e <_Z25DD_Display_Tunnelling_Boxv>:
{
	static byte yl = 0;		// left column
	static byte yr = 128;	// 
	static byte xt = 0;		// top row
	static byte xb = 63;	// 	
	DD_DrawBox( xt,  xb, yl, yr );
    1c9e:	80 91 8d 07 	lds	r24, 0x078D
    1ca2:	60 91 34 01 	lds	r22, 0x0134
    1ca6:	40 91 8e 07 	lds	r20, 0x078E
    1caa:	20 91 35 01 	lds	r18, 0x0135
    1cae:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_Z10DD_DrawBoxhhhh>
	xt++;  xb--;
    1cb2:	90 91 8d 07 	lds	r25, 0x078D
    1cb6:	9f 5f       	subi	r25, 0xFF	; 255
    1cb8:	90 93 8d 07 	sts	0x078D, r25
    1cbc:	80 91 34 01 	lds	r24, 0x0134
    1cc0:	81 50       	subi	r24, 0x01	; 1
    1cc2:	80 93 34 01 	sts	0x0134, r24
	yl++;  yr--;
    1cc6:	20 91 8e 07 	lds	r18, 0x078E
    1cca:	2f 5f       	subi	r18, 0xFF	; 255
    1ccc:	20 93 8e 07 	sts	0x078E, r18
    1cd0:	20 91 35 01 	lds	r18, 0x0135
    1cd4:	21 50       	subi	r18, 0x01	; 1
    1cd6:	20 93 35 01 	sts	0x0135, r18
	if (xt > xb)
    1cda:	89 17       	cp	r24, r25
    1cdc:	50 f4       	brcc	.+20     	; 0x1cf2 <_Z25DD_Display_Tunnelling_Boxv+0x54>
	{
		yl=0; yr=128;
    1cde:	10 92 8e 07 	sts	0x078E, r1
    1ce2:	80 e8       	ldi	r24, 0x80	; 128
    1ce4:	80 93 35 01 	sts	0x0135, r24
		xt=0; xb=63;	
    1ce8:	10 92 8d 07 	sts	0x078D, r1
    1cec:	8f e3       	ldi	r24, 0x3F	; 63
    1cee:	80 93 34 01 	sts	0x0134, r24
    1cf2:	08 95       	ret

00001cf4 <_Z16DD_DrawYesNo_BoxPch>:
					2 	-  No highlight					
Description:    This function draws a dialog box.
				to see all shrinking sizes.
*****************************************************************************/
void DD_DrawYesNo_Box(_far char* mText, byte mHighlight)
{
    1cf4:	ff 92       	push	r15
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	08 2f       	mov	r16, r24
    1d06:	f6 2e       	mov	r15, r22
Description:    This function calculates length of the string on screen in 
				pixels.
*****************************************************************************/
inline byte DD_CalcPixs_For_String(_far char* mString)
{
	return strlen(mString)*6;
    1d08:	e8 2f       	mov	r30, r24
    1d0a:	f9 2f       	mov	r31, r25
    1d0c:	df 01       	movw	r26, r30
    1d0e:	0d 90       	ld	r0, X+
    1d10:	00 20       	and	r0, r0
    1d12:	e9 f7       	brne	.-6      	; 0x1d0e <_Z16DD_DrawYesNo_BoxPch+0x1a>
    1d14:	11 97       	sbiw	r26, 0x01	; 1
    1d16:	a8 1b       	sub	r26, r24
    1d18:	8a 2f       	mov	r24, r26
    1d1a:	88 0f       	add	r24, r24
    1d1c:	8a 0f       	add	r24, r26
    1d1e:	88 0f       	add	r24, r24
void DD_DrawYesNo_Box(_far char* mText, byte mHighlight)
{
	byte Left,Right;
	//DD_DrawAllOff();
	 
	Left = (128-DD_CalcPixs_For_String(mText)-12)>>2;
    1d20:	44 e7       	ldi	r20, 0x74	; 116
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	48 1b       	sub	r20, r24
    1d26:	51 09       	sbc	r21, r1
    1d28:	55 95       	asr	r21
    1d2a:	47 95       	ror	r20
    1d2c:	55 95       	asr	r21
    1d2e:	47 95       	ror	r20
    1d30:	14 2f       	mov	r17, r20
    1d32:	4d 32       	cpi	r20, 0x2D	; 45
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <_Z16DD_DrawYesNo_BoxPch+0x44>
    1d36:	1c e2       	ldi	r17, 0x2C	; 44
	if (Left > 44)
		Left = 44;				// Box not to be smaller than 40 pixs wide.
	Right= 128 - Left;			// Equally centered on display
    1d38:	20 e8       	ldi	r18, 0x80	; 128
    1d3a:	21 1b       	sub	r18, r17
	
	DD_DrawBox( 20, 52, Left, Right);
    1d3c:	84 e1       	ldi	r24, 0x14	; 20
    1d3e:	64 e3       	ldi	r22, 0x34	; 52
    1d40:	41 2f       	mov	r20, r17
    1d42:	99 83       	std	Y+1, r25	; 0x01
    1d44:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_Z10DD_DrawBoxhhhh>
	
	// Draw the Text:
	GotoAddress(3, Left+6); 
    1d48:	61 2f       	mov	r22, r17
    1d4a:	6a 5f       	subi	r22, 0xFA	; 250
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
    1d4e:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	Text_Ln( (_far char*)mText );
    1d52:	80 2f       	mov	r24, r16
    1d54:	99 81       	ldd	r25, Y+1	; 0x01
    1d56:	0e 94 37 10 	call	0x206e	; 0x206e <_Z7Text_LnPc>
	Text_Ln( (char*)"" );
    1d5a:	8e e1       	ldi	r24, 0x1E	; 30
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	0e 94 37 10 	call	0x206e	; 0x206e <_Z7Text_LnPc>
	
	// Draw the Yes/No:
	GotoAddress(5, 36); 
    1d62:	85 e0       	ldi	r24, 0x05	; 5
    1d64:	64 e2       	ldi	r22, 0x24	; 36
    1d66:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	Text_Out ( (char*)" YES ");			// (_far char*)
    1d6a:	8f e1       	ldi	r24, 0x1F	; 31
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	0e 94 1e 10 	call	0x203c	; 0x203c <_Z8Text_OutPc>
	GotoAddress(5, 64); 
    1d72:	85 e0       	ldi	r24, 0x05	; 5
    1d74:	60 e4       	ldi	r22, 0x40	; 64
    1d76:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	Text_Out ( (char*)" NO ");
    1d7a:	85 e2       	ldi	r24, 0x25	; 37
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	0e 94 1e 10 	call	0x203c	; 0x203c <_Z8Text_OutPc>
	
	switch (mHighlight)
    1d82:	8f 2d       	mov	r24, r15
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	71 f0       	breq	.+28     	; 0x1da4 <_Z16DD_DrawYesNo_BoxPch+0xb0>
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <_Z16DD_DrawYesNo_BoxPch+0xa2>
					break;
					
		case 1 : 	DD_Inverse_Video( 5, 40, 63 );
					break;
					
		case 2 :	DD_Inverse_Video( 5, 68, 85 );
    1d8c:	85 e0       	ldi	r24, 0x05	; 5
    1d8e:	64 e4       	ldi	r22, 0x44	; 68
    1d90:	45 e5       	ldi	r20, 0x55	; 85
    1d92:	0e 94 b7 0c 	call	0x196e	; 0x196e <_Z16DD_Inverse_Videohhh>
					break;
		default :
					break;	
	}
}
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	08 95       	ret
	switch (mHighlight)
	{
		case 0 :	// do nothing!
					break;
					
		case 1 : 	DD_Inverse_Video( 5, 40, 63 );
    1da4:	85 e0       	ldi	r24, 0x05	; 5
    1da6:	68 e2       	ldi	r22, 0x28	; 40
    1da8:	4f e3       	ldi	r20, 0x3F	; 63
    1daa:	0e 94 b7 0c 	call	0x196e	; 0x196e <_Z16DD_Inverse_Videohhh>
		case 2 :	DD_Inverse_Video( 5, 68, 85 );
					break;
		default :
					break;	
	}
}
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	08 95       	ret

00001dbc <_Z19DD_DrawOkCancel_BoxPch>:
					2 	-  No highlight					
Description:    This function draws a dialog box.
				to see all shrinking sizes.
*****************************************************************************/
void DD_DrawOkCancel_Box(_far char* mText, byte mHighlight)
{
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	08 2f       	mov	r16, r24
    1dce:	f6 2e       	mov	r15, r22
	byte Left,Right;
	DD_DrawAllOff();
    1dd0:	99 83       	std	Y+1, r25	; 0x01
    1dd2:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z13DD_DrawAllOffv>
Description:    This function calculates length of the string on screen in 
				pixels.
*****************************************************************************/
inline byte DD_CalcPixs_For_String(_far char* mString)
{
	return strlen(mString)*6;
    1dd6:	e0 2f       	mov	r30, r16
    1dd8:	99 81       	ldd	r25, Y+1	; 0x01
    1dda:	f9 2f       	mov	r31, r25
    1ddc:	df 01       	movw	r26, r30
    1dde:	0d 90       	ld	r0, X+
    1de0:	00 20       	and	r0, r0
    1de2:	e9 f7       	brne	.-6      	; 0x1dde <_Z19DD_DrawOkCancel_BoxPch+0x22>
    1de4:	11 97       	sbiw	r26, 0x01	; 1
    1de6:	a0 1b       	sub	r26, r16
    1de8:	8a 2f       	mov	r24, r26
    1dea:	88 0f       	add	r24, r24
    1dec:	8a 0f       	add	r24, r26
    1dee:	88 0f       	add	r24, r24
void DD_DrawOkCancel_Box(_far char* mText, byte mHighlight)
{
	byte Left,Right;
	DD_DrawAllOff();
	 
	Left = (128-DD_CalcPixs_For_String(mText)-12)>>2;
    1df0:	44 e7       	ldi	r20, 0x74	; 116
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	48 1b       	sub	r20, r24
    1df6:	51 09       	sbc	r21, r1
    1df8:	55 95       	asr	r21
    1dfa:	47 95       	ror	r20
    1dfc:	55 95       	asr	r21
    1dfe:	47 95       	ror	r20
    1e00:	14 2f       	mov	r17, r20
    1e02:	4d 32       	cpi	r20, 0x2D	; 45
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <_Z19DD_DrawOkCancel_BoxPch+0x4c>
    1e06:	1c e2       	ldi	r17, 0x2C	; 44
	if (Left > 44)
		Left = 44;				// Box not to be smaller than 40 pixs wide.
	Right= 128 - Left;			// Equally centered on display
    1e08:	20 e8       	ldi	r18, 0x80	; 128
    1e0a:	21 1b       	sub	r18, r17
	
	DD_DrawBox( 20, 52, Left, Right);
    1e0c:	84 e1       	ldi	r24, 0x14	; 20
    1e0e:	64 e3       	ldi	r22, 0x34	; 52
    1e10:	41 2f       	mov	r20, r17
    1e12:	99 83       	std	Y+1, r25	; 0x01
    1e14:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_Z10DD_DrawBoxhhhh>
	
	// Draw the Text:
	GotoAddress(3, Left+6); 
    1e18:	61 2f       	mov	r22, r17
    1e1a:	6a 5f       	subi	r22, 0xFA	; 250
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	Text_Ln( (_far char*)mText );
    1e22:	80 2f       	mov	r24, r16
    1e24:	99 81       	ldd	r25, Y+1	; 0x01
    1e26:	0e 94 37 10 	call	0x206e	; 0x206e <_Z7Text_LnPc>
	Text_Ln( (char*)"" );
    1e2a:	8e e1       	ldi	r24, 0x1E	; 30
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	0e 94 37 10 	call	0x206e	; 0x206e <_Z7Text_LnPc>
	
	// Draw the Yes/No:
	GotoAddress(5, 32); 
    1e32:	85 e0       	ldi	r24, 0x05	; 5
    1e34:	60 e2       	ldi	r22, 0x20	; 32
    1e36:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	Text_Out ( (char*)"Ok");			// (_far char*)
    1e3a:	8a e2       	ldi	r24, 0x2A	; 42
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	0e 94 1e 10 	call	0x203c	; 0x203c <_Z8Text_OutPc>
	GotoAddress(5, 70); 
    1e42:	85 e0       	ldi	r24, 0x05	; 5
    1e44:	66 e4       	ldi	r22, 0x46	; 70
    1e46:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	Text_Out ( (char*)"Cancel");
    1e4a:	8d e2       	ldi	r24, 0x2D	; 45
    1e4c:	91 e0       	ldi	r25, 0x01	; 1
    1e4e:	0e 94 1e 10 	call	0x203c	; 0x203c <_Z8Text_OutPc>
	
	switch (mHighlight)
    1e52:	8f 2d       	mov	r24, r15
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	71 f0       	breq	.+28     	; 0x1e74 <_Z19DD_DrawOkCancel_BoxPch+0xb8>
    1e58:	82 30       	cpi	r24, 0x02	; 2
    1e5a:	29 f4       	brne	.+10     	; 0x1e66 <_Z19DD_DrawOkCancel_BoxPch+0xaa>
					break;
					
		case 1 : 	DD_Inverse_Video( 5, 28, 50 );
					break;
					
		case 2 :	DD_Inverse_Video( 5, 68, 106 );
    1e5c:	85 e0       	ldi	r24, 0x05	; 5
    1e5e:	64 e4       	ldi	r22, 0x44	; 68
    1e60:	4a e6       	ldi	r20, 0x6A	; 106
    1e62:	0e 94 b7 0c 	call	0x196e	; 0x196e <_Z16DD_Inverse_Videohhh>
					break;
		default :
					break;	
	}
}
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	08 95       	ret
	switch (mHighlight)
	{
		case 0 :	// do nothing!
					break;
					
		case 1 : 	DD_Inverse_Video( 5, 28, 50 );
    1e74:	85 e0       	ldi	r24, 0x05	; 5
    1e76:	6c e1       	ldi	r22, 0x1C	; 28
    1e78:	42 e3       	ldi	r20, 0x32	; 50
    1e7a:	0e 94 b7 0c 	call	0x196e	; 0x196e <_Z16DD_Inverse_Videohhh>
		case 2 :	DD_Inverse_Video( 5, 68, 106 );
					break;
		default :
					break;	
	}
}
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	08 95       	ret

00001e8c <_Z11show_can_idP4sCANh>:
#include "LCD_Display.h"
#include "can_buff.h"


void show_can_id( struct sCAN* mCAN, BOOL mShowBlock	)
{ 
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	fc 01       	movw	r30, r24
	byte Block 		= (mCAN->id.group.block & 0x1F);	// 5 bits only valid
    1e94:	80 81       	ld	r24, Z
	word id    		= (mCAN->id.group.id 		  );
    1e96:	c1 81       	ldd	r28, Z+1	; 0x01
    1e98:	d2 81       	ldd	r29, Z+2	; 0x02
	byte instance	= (mCAN->id.group.instance 	  );
    1e9a:	13 81       	ldd	r17, Z+3	; 0x03
	if (mShowBlock)	{ lcd_draw_byte( Block ); Char_Out('-'); }
    1e9c:	66 23       	and	r22, r22
    1e9e:	31 f0       	breq	.+12     	; 0x1eac <_Z11show_can_idP4sCANh+0x20>
    1ea0:	8f 71       	andi	r24, 0x1F	; 31
    1ea2:	0e 94 6f 10 	call	0x20de	; 0x20de <_Z13lcd_draw_byteh>
    1ea6:	8d e2       	ldi	r24, 0x2D	; 45
    1ea8:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
	lcd_draw_word( id );
    1eac:	ce 01       	movw	r24, r28
    1eae:	0e 94 8e 10 	call	0x211c	; 0x211c <_Z13lcd_draw_wordt>
	Char_Out('-');
    1eb2:	8d e2       	ldi	r24, 0x2D	; 45
    1eb4:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
	lcd_draw_byte( instance );
    1eb8:	81 2f       	mov	r24, r17
    1eba:	0e 94 6f 10 	call	0x20de	; 0x20de <_Z13lcd_draw_byteh>
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	08 95       	ret

00001ec6 <_Z13show_can_dataP4sCAN>:

void show_can_data	( struct sCAN* mCAN	)
{
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	7c 01       	movw	r14, r24
	for (int i=0; i<mCAN->header.DLC; i++)
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	84 81       	ldd	r24, Z+4	; 0x04
    1ed8:	86 95       	lsr	r24
    1eda:	8f 70       	andi	r24, 0x0F	; 15
    1edc:	29 f1       	breq	.+74     	; 0x1f28 <_Z13show_can_dataP4sCAN+0x62>
	lcd_draw_word( id );
	Char_Out('-');
	lcd_draw_byte( instance );
}

void show_can_data	( struct sCAN* mCAN	)
    1ede:	87 01       	movw	r16, r14
    1ee0:	0b 5f       	subi	r16, 0xFB	; 251
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
{
	for (int i=0; i<mCAN->header.DLC; i++)
    1ee4:	c0 e0       	ldi	r28, 0x00	; 0
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <_Z13show_can_dataP4sCAN+0x42>
	{
		lcd_draw_byte( mCAN->data[i] );
		if ( i == 1 )	Char_Out( ' ' );
		if ( i == 3 )	Char_Out( '-' );	// half of full msg
    1eea:	c3 30       	cpi	r28, 0x03	; 3
    1eec:	d1 05       	cpc	r29, r1
    1eee:	c1 f0       	breq	.+48     	; 0x1f20 <_Z13show_can_dataP4sCAN+0x5a>
		if ( i == 5 )	Char_Out( ' ' );
    1ef0:	c5 30       	cpi	r28, 0x05	; 5
    1ef2:	d1 05       	cpc	r29, r1
    1ef4:	89 f0       	breq	.+34     	; 0x1f18 <_Z13show_can_dataP4sCAN+0x52>
	lcd_draw_byte( instance );
}

void show_can_data	( struct sCAN* mCAN	)
{
	for (int i=0; i<mCAN->header.DLC; i++)
    1ef6:	21 96       	adiw	r28, 0x01	; 1
    1ef8:	f7 01       	movw	r30, r14
    1efa:	84 81       	ldd	r24, Z+4	; 0x04
    1efc:	86 95       	lsr	r24
    1efe:	8f 70       	andi	r24, 0x0F	; 15
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	c8 17       	cp	r28, r24
    1f04:	d9 07       	cpc	r29, r25
    1f06:	84 f4       	brge	.+32     	; 0x1f28 <_Z13show_can_dataP4sCAN+0x62>
	{
		lcd_draw_byte( mCAN->data[i] );
    1f08:	f8 01       	movw	r30, r16
    1f0a:	81 91       	ld	r24, Z+
    1f0c:	8f 01       	movw	r16, r30
    1f0e:	0e 94 6f 10 	call	0x20de	; 0x20de <_Z13lcd_draw_byteh>
		if ( i == 1 )	Char_Out( ' ' );
    1f12:	c1 30       	cpi	r28, 0x01	; 1
    1f14:	d1 05       	cpc	r29, r1
    1f16:	49 f7       	brne	.-46     	; 0x1eea <_Z13show_can_dataP4sCAN+0x24>
		if ( i == 3 )	Char_Out( '-' );	// half of full msg
		if ( i == 5 )	Char_Out( ' ' );
    1f18:	80 e2       	ldi	r24, 0x20	; 32
    1f1a:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
    1f1e:	eb cf       	rjmp	.-42     	; 0x1ef6 <_Z13show_can_dataP4sCAN+0x30>
{
	for (int i=0; i<mCAN->header.DLC; i++)
	{
		lcd_draw_byte( mCAN->data[i] );
		if ( i == 1 )	Char_Out( ' ' );
		if ( i == 3 )	Char_Out( '-' );	// half of full msg
    1f20:	8d e2       	ldi	r24, 0x2D	; 45
    1f22:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
    1f26:	e7 cf       	rjmp	.-50     	; 0x1ef6 <_Z13show_can_dataP4sCAN+0x30>
		if ( i == 5 )	Char_Out( ' ' );
	}
}
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	08 95       	ret

00001f36 <_Z12show_can_msgP4sCANh>:


byte x=0;
byte y=0;
void show_can_msg( struct sCAN* mCAN, byte mRow	)		// Formats an prints the entire message
{
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	ec 01       	movw	r28, r24
    1f3c:	86 2f       	mov	r24, r22
	GotoAddress(mRow, 0);
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	Text_Out( "id=" );	show_can_id(mCAN, TRUE);
    1f44:	86 e3       	ldi	r24, 0x36	; 54
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	0e 94 1e 10 	call	0x203c	; 0x203c <_Z8Text_OutPc>
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <_Z11show_can_idP4sCANh>

	Increment_x_address();
    1f54:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z19Increment_x_addressv>
	byte x = Get_x_address();		
    1f58:	0e 94 87 08 	call	0x110e	; 0x110e <_Z13Get_x_addressv>
	GotoAddress(x,19);
    1f5c:	63 e1       	ldi	r22, 0x13	; 19
    1f5e:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>

	DD_Clear_EOL();	
    1f62:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_Z12DD_Clear_EOLv>
	show_can_data(mCAN);	
    1f66:	ce 01       	movw	r24, r28
    1f68:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <_Z13show_can_dataP4sCAN>

	Increment_x_address();	
    1f6c:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z19Increment_x_addressv>
}
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	08 95       	ret

00001f76 <_Z17show_all_can_msgsv>:

void show_all_can_msgs(	)
{
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
	for (int i=0; i<4; i++)
    1f7c:	c0 e0       	ldi	r28, 0x00	; 0
    1f7e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		struct sCAN* Msg = GetMessagePtr( i );
    1f80:	8c 2f       	mov	r24, r28
    1f82:	0e 94 3f 1a 	call	0x347e	; 0x347e <_Z13GetMessagePtrh>
		show_can_msg( Msg, i*2 );
    1f86:	6c 2f       	mov	r22, r28
    1f88:	66 0f       	add	r22, r22
    1f8a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_Z12show_can_msgP4sCANh>
	Increment_x_address();	
}

void show_all_can_msgs(	)
{
	for (int i=0; i<4; i++)
    1f8e:	21 96       	adiw	r28, 0x01	; 1
    1f90:	c4 30       	cpi	r28, 0x04	; 4
    1f92:	d1 05       	cpc	r29, r1
    1f94:	a9 f7       	brne	.-22     	; 0x1f80 <_Z17show_all_can_msgsv+0xa>
	{
		struct sCAN* Msg = GetMessagePtr( i );
		show_can_msg( Msg, i*2 );
	}
}
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	08 95       	ret

00001f9e <_Z26EOL_WrapAround_Check_Smallv>:
	{ 0x00,0x02,0x01,0x02,0x01,0x00},	// ~
	{ 0x00,0x3C,0x26,0x23,0x26,0x3C}	// 
};

void EOL_WrapAround_Check_Small()
{
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
	byte y_address = Get_y_address();
    1fa2:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z13Get_y_addressv>
    1fa6:	c8 2f       	mov	r28, r24
	byte x_address = Get_x_address();
    1fa8:	0e 94 87 08 	call	0x110e	; 0x110e <_Z13Get_x_addressv>
    1fac:	d8 2f       	mov	r29, r24
	
	// do EOL carriage return 
	if (y_address > 122) 
    1fae:	cb 37       	cpi	r28, 0x7B	; 123
    1fb0:	18 f4       	brcc	.+6      	; 0x1fb8 <_Z26EOL_WrapAround_Check_Smallv+0x1a>
			x_address += 1;
			
		Set_x_address( x_address );
		SendAddresses();
	}	
}
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	08 95       	ret
	
	// do EOL carriage return 
	if (y_address > 122) 
	{ 	
		// Move back to start of line:
		Set_y_address( 0 );
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
		
		// Goto Next Line
		if (x_address >= 5) 
    1fbe:	d5 30       	cpi	r29, 0x05	; 5
    1fc0:	48 f4       	brcc	.+18     	; 0x1fd4 <_Z26EOL_WrapAround_Check_Smallv+0x36>
			x_address = 0;
		else
			x_address += 1;
    1fc2:	8d 2f       	mov	r24, r29
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
			
		Set_x_address( x_address );
    1fc6:	0e 94 8d 08 	call	0x111a	; 0x111a <_Z13Set_x_addressh>
		SendAddresses();
    1fca:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
	}	
}
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	08 95       	ret
		// Move back to start of line:
		Set_y_address( 0 );
		
		// Goto Next Line
		if (x_address >= 5) 
			x_address = 0;
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	f7 cf       	rjmp	.-18     	; 0x1fc6 <_Z26EOL_WrapAround_Check_Smallv+0x28>

00001fd8 <_Z10CenterTexthhh>:
}

byte CenterText( byte mNumChars, byte mStartCol, byte mEndCol)
{
	word OccupiedX = mNumChars*6;
	word StartX = (mEndCol - mStartCol-OccupiedX)>>1;
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	46 1b       	sub	r20, r22
    1fdc:	51 09       	sbc	r21, r1
	}	
}

byte CenterText( byte mNumChars, byte mStartCol, byte mEndCol)
{
	word OccupiedX = mNumChars*6;
    1fde:	96 e0       	ldi	r25, 0x06	; 6
    1fe0:	89 9f       	mul	r24, r25
    1fe2:	c0 01       	movw	r24, r0
    1fe4:	11 24       	eor	r1, r1
	word StartX = (mEndCol - mStartCol-OccupiedX)>>1;
    1fe6:	48 1b       	sub	r20, r24
    1fe8:	59 0b       	sbc	r21, r25
    1fea:	56 95       	lsr	r21
    1fec:	47 95       	ror	r20
	return StartX;	
}
    1fee:	84 2f       	mov	r24, r20
    1ff0:	08 95       	ret

00001ff2 <_Z9Draw_Chari>:
{
	const _far char* ptr = 0;

	//EOL_WrapAround_Check_Small();

	ptr = (const char*)CharSet[char_index];
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	22 0f       	add	r18, r18
    1ff6:	33 1f       	adc	r19, r19
    1ff8:	28 0f       	add	r18, r24
    1ffa:	39 1f       	adc	r19, r25
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
	TransferBufferFixedLength(ptr, 6);	
    2000:	c9 01       	movw	r24, r18
    2002:	84 58       	subi	r24, 0x84	; 132
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	66 e0       	ldi	r22, 0x06	; 6
    2008:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z25TransferBufferFixedLengthPKch>
};  
    200c:	08 95       	ret

0000200e <_Z8Char_Outc>:
// Draws Character at current cursor position.
// INPUT:  ASCII char
void Char_Out(char ascii)
{
	byte index = ascii - 32;
	Draw_Char(index);
    200e:	80 52       	subi	r24, 0x20	; 32
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_Z9Draw_Chari>
};
    2016:	08 95       	ret

00002018 <_Z16Text_Out_ProgmemPc>:

// Draws a String on LCD at current position.
// The string resides in PROGMEM
void Text_Out_Progmem(_far char* string )
{
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	fc 01       	movw	r30, r24
	int i=0;
	while (string[i] != 0)
    201e:	80 81       	ld	r24, Z
    2020:	88 23       	and	r24, r24
    2022:	49 f0       	breq	.+18     	; 0x2036 <_Z16Text_Out_ProgmemPc+0x1e>
	Draw_Char(index);
};

// Draws a String on LCD at current position.
// The string resides in PROGMEM
void Text_Out_Progmem(_far char* string )
    2024:	ef 01       	movw	r28, r30
    2026:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (string[i] != 0)
	{
		Char_Out( pgm_read_byte(string+i) );
    2028:	84 91       	lpm	r24, Z+
    202a:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
    202e:	fe 01       	movw	r30, r28
// Draws a String on LCD at current position.
// The string resides in PROGMEM
void Text_Out_Progmem(_far char* string )
{
	int i=0;
	while (string[i] != 0)
    2030:	89 91       	ld	r24, Y+
    2032:	88 23       	and	r24, r24
    2034:	c9 f7       	brne	.-14     	; 0x2028 <_Z16Text_Out_ProgmemPc+0x10>
	{
		Char_Out( pgm_read_byte(string+i) );
		i++;
	};
};
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	08 95       	ret

0000203c <_Z8Text_OutPc>:
// Draws a String on LCD at current position.
// The string resides in RAM
void Text_Out(_far char* string )
{
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	ec 01       	movw	r28, r24
	int i=0;
	while (string[i] != 0)
    2042:	88 81       	ld	r24, Y
    2044:	88 23       	and	r24, r24
    2046:	31 f0       	breq	.+12     	; 0x2054 <_Z8Text_OutPc+0x18>
		i++;
	};
};
// Draws a String on LCD at current position.
// The string resides in RAM
void Text_Out(_far char* string )
    2048:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (string[i] != 0)
	{
		Char_Out(string[i++]);
    204a:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
// Draws a String on LCD at current position.
// The string resides in RAM
void Text_Out(_far char* string )
{
	int i=0;
	while (string[i] != 0)
    204e:	89 91       	ld	r24, Y+
    2050:	88 23       	and	r24, r24
    2052:	d9 f7       	brne	.-10     	; 0x204a <_Z8Text_OutPc+0xe>
	{
		Char_Out(string[i++]);
	};
};
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	08 95       	ret

0000205a <_Z15Text_Ln_ProgmemPc>:

// Draws a string and returns to next line.
void Text_Ln_Progmem(_far char* string )
{
	Text_Out_Progmem(string);
    205a:	0e 94 0c 10 	call	0x2018	; 0x2018 <_Z16Text_Out_ProgmemPc>
	Increment_x_address();
    205e:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z19Increment_x_addressv>
	Set_y_address (0);
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
	SendAddresses();
    2068:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
}
    206c:	08 95       	ret

0000206e <_Z7Text_LnPc>:
// Draws a string and returns to next line.
void Text_Ln(_far char* string )
{
	Text_Out(string);
    206e:	0e 94 1e 10 	call	0x203c	; 0x203c <_Z8Text_OutPc>
	Increment_x_address();
    2072:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z19Increment_x_addressv>
	Set_y_address (0);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
	SendAddresses();
    207c:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
}
    2080:	08 95       	ret

00002082 <_Z12Draw_Char_Atiii>:

// Draws char at specified position.
// Row is the line number [0..7]
// Column is the column [0..20]
void Draw_Char_At(int Row, int Column, int char_index)
{	
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	ea 01       	movw	r28, r20
	if (Row > 7)   Row=7;
	if (Column>20) Column=20;

	GotoAddress(Row, Column*6+2 );
    2088:	28 2f       	mov	r18, r24
    208a:	39 2f       	mov	r19, r25
    208c:	c9 01       	movw	r24, r18
    208e:	88 30       	cpi	r24, 0x08	; 8
    2090:	91 05       	cpc	r25, r1
    2092:	14 f0       	brlt	.+4      	; 0x2098 <_Z12Draw_Char_Atiii+0x16>
    2094:	87 e0       	ldi	r24, 0x07	; 7
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	26 2f       	mov	r18, r22
    209a:	37 2f       	mov	r19, r23
    209c:	25 31       	cpi	r18, 0x15	; 21
    209e:	31 05       	cpc	r19, r1
    20a0:	14 f0       	brlt	.+4      	; 0x20a6 <_Z12Draw_Char_Atiii+0x24>
    20a2:	24 e1       	ldi	r18, 0x14	; 20
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	62 2f       	mov	r22, r18
    20a8:	66 0f       	add	r22, r22
    20aa:	62 0f       	add	r22, r18
    20ac:	66 0f       	add	r22, r22
    20ae:	6e 5f       	subi	r22, 0xFE	; 254
    20b0:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	TransferBufferFixedLength( (const char*)CharSet[char_index], 6);
    20b4:	ce 01       	movw	r24, r28
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	8c 0f       	add	r24, r28
    20bc:	9d 1f       	adc	r25, r29
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	84 58       	subi	r24, 0x84	; 132
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	66 e0       	ldi	r22, 0x06	; 6
    20c8:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z25TransferBufferFixedLengthPKch>
};
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	08 95       	ret

000020d2 <_Z16get_ascii_nibbleh>:

byte get_ascii_nibble( byte mNib )
{
	if (mNib < 0x0A)
    20d2:	8a 30       	cpi	r24, 0x0A	; 10
    20d4:	10 f0       	brcs	.+4      	; 0x20da <_Z16get_ascii_nibbleh+0x8>
	{
		return (mNib + 0x30);
	}
	else
	{ 
		return ((mNib-0x0A) + 0x41);
    20d6:	89 5c       	subi	r24, 0xC9	; 201
	}
}
    20d8:	08 95       	ret

byte get_ascii_nibble( byte mNib )
{
	if (mNib < 0x0A)
	{
		return (mNib + 0x30);
    20da:	80 5d       	subi	r24, 0xD0	; 208
    20dc:	08 95       	ret

000020de <_Z13lcd_draw_byteh>:
		return ((mNib-0x0A) + 0x41);
	}
}

void lcd_draw_byte( byte mData )
{
    20de:	cf 93       	push	r28
	byte ascii_l = get_ascii_nibble( mData & 0x0F );
    20e0:	c8 2f       	mov	r28, r24
    20e2:	cf 70       	andi	r28, 0x0F	; 15
	TransferBufferFixedLength( (const char*)CharSet[char_index], 6);
};

byte get_ascii_nibble( byte mNib )
{
	if (mNib < 0x0A)
    20e4:	ca 30       	cpi	r28, 0x0A	; 10
    20e6:	68 f4       	brcc	.+26     	; 0x2102 <_Z13lcd_draw_byteh+0x24>
	{
		return (mNib + 0x30);
    20e8:	c0 5d       	subi	r28, 0xD0	; 208
}

void lcd_draw_byte( byte mData )
{
	byte ascii_l = get_ascii_nibble( mData & 0x0F );
	byte ascii_h = get_ascii_nibble( (mData & 0xF0)>>4 );
    20ea:	82 95       	swap	r24
    20ec:	8f 70       	andi	r24, 0x0F	; 15
	TransferBufferFixedLength( (const char*)CharSet[char_index], 6);
};

byte get_ascii_nibble( byte mNib )
{
	if (mNib < 0x0A)
    20ee:	8a 30       	cpi	r24, 0x0A	; 10
    20f0:	68 f0       	brcs	.+26     	; 0x210c <_Z13lcd_draw_byteh+0x2e>
	{
		return (mNib + 0x30);
	}
	else
	{ 
		return ((mNib-0x0A) + 0x41);
    20f2:	89 5c       	subi	r24, 0xC9	; 201

void lcd_draw_byte( byte mData )
{
	byte ascii_l = get_ascii_nibble( mData & 0x0F );
	byte ascii_h = get_ascii_nibble( (mData & 0xF0)>>4 );
	Char_Out(ascii_h);
    20f4:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
	Char_Out(ascii_l);
    20f8:	8c 2f       	mov	r24, r28
    20fa:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
}
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret
	{
		return (mNib + 0x30);
	}
	else
	{ 
		return ((mNib-0x0A) + 0x41);
    2102:	c9 5c       	subi	r28, 0xC9	; 201
}

void lcd_draw_byte( byte mData )
{
	byte ascii_l = get_ascii_nibble( mData & 0x0F );
	byte ascii_h = get_ascii_nibble( (mData & 0xF0)>>4 );
    2104:	82 95       	swap	r24
    2106:	8f 70       	andi	r24, 0x0F	; 15
	TransferBufferFixedLength( (const char*)CharSet[char_index], 6);
};

byte get_ascii_nibble( byte mNib )
{
	if (mNib < 0x0A)
    2108:	8a 30       	cpi	r24, 0x0A	; 10
    210a:	98 f7       	brcc	.-26     	; 0x20f2 <_Z13lcd_draw_byteh+0x14>
	{
		return (mNib + 0x30);
    210c:	80 5d       	subi	r24, 0xD0	; 208

void lcd_draw_byte( byte mData )
{
	byte ascii_l = get_ascii_nibble( mData & 0x0F );
	byte ascii_h = get_ascii_nibble( (mData & 0xF0)>>4 );
	Char_Out(ascii_h);
    210e:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
	Char_Out(ascii_l);
    2112:	8c 2f       	mov	r24, r28
    2114:	0e 94 07 10 	call	0x200e	; 0x200e <_Z8Char_Outc>
}
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <_Z13lcd_draw_wordt>:

void lcd_draw_word	( word mData )
{
    211c:	cf 93       	push	r28
    211e:	c8 2f       	mov	r28, r24
	lcd_draw_byte( ((mData & 0xFF00)>>8) );	
    2120:	89 2f       	mov	r24, r25
    2122:	0e 94 6f 10 	call	0x20de	; 0x20de <_Z13lcd_draw_byteh>
	lcd_draw_byte( mData & 0x00FF );
    2126:	8c 2f       	mov	r24, r28
    2128:	0e 94 6f 10 	call	0x20de	; 0x20de <_Z13lcd_draw_byteh>
}
    212c:	cf 91       	pop	r28
    212e:	08 95       	ret

00002130 <_Z11DrawCharSetv>:

// For test purposes, draws a row of chars on LCD.
void DrawCharSet()
{	
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
	int index=0;
	GotoAddress (0,0);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	for (index = 0; index < 21; index++)
    213c:	c0 e0       	ldi	r28, 0x00	; 0
    213e:	d0 e0       	ldi	r29, 0x00	; 0
	   Draw_Char( index  );
    2140:	ce 01       	movw	r24, r28
    2142:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_Z9Draw_Chari>
// For test purposes, draws a row of chars on LCD.
void DrawCharSet()
{	
	int index=0;
	GotoAddress (0,0);
	for (index = 0; index < 21; index++)
    2146:	21 96       	adiw	r28, 0x01	; 1
    2148:	c5 31       	cpi	r28, 0x15	; 21
    214a:	d1 05       	cpc	r29, r1
    214c:	c9 f7       	brne	.-14     	; 0x2140 <_Z11DrawCharSetv+0x10>
	   Draw_Char( index  );

	//GotoAddress (1,0);
	for (; index < 42; index++)
	   Draw_Char( index  );
    214e:	ce 01       	movw	r24, r28
    2150:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_Z9Draw_Chari>
	GotoAddress (0,0);
	for (index = 0; index < 21; index++)
	   Draw_Char( index  );

	//GotoAddress (1,0);
	for (; index < 42; index++)
    2154:	21 96       	adiw	r28, 0x01	; 1
    2156:	ca 32       	cpi	r28, 0x2A	; 42
    2158:	d1 05       	cpc	r29, r1
    215a:	c9 f7       	brne	.-14     	; 0x214e <_Z11DrawCharSetv+0x1e>
	   Draw_Char( index  );

	//GotoAddress (2,0);
	for (; index < 63; index++)
	   Draw_Char( index  );
    215c:	ce 01       	movw	r24, r28
    215e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_Z9Draw_Chari>
	//GotoAddress (1,0);
	for (; index < 42; index++)
	   Draw_Char( index  );

	//GotoAddress (2,0);
	for (; index < 63; index++)
    2162:	21 96       	adiw	r28, 0x01	; 1
    2164:	cf 33       	cpi	r28, 0x3F	; 63
    2166:	d1 05       	cpc	r29, r1
    2168:	c9 f7       	brne	.-14     	; 0x215c <_Z11DrawCharSetv+0x2c>
	   Draw_Char( index  );

	//GotoAddress (3,0);
	for (; index < 84; index++)
	   Draw_Char( index  );
    216a:	ce 01       	movw	r24, r28
    216c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_Z9Draw_Chari>
	//GotoAddress (2,0);
	for (; index < 63; index++)
	   Draw_Char( index  );

	//GotoAddress (3,0);
	for (; index < 84; index++)
    2170:	21 96       	adiw	r28, 0x01	; 1
    2172:	c4 35       	cpi	r28, 0x54	; 84
    2174:	d1 05       	cpc	r29, r1
    2176:	cc f3       	brlt	.-14     	; 0x216a <_Z11DrawCharSetv+0x3a>
    2178:	c4 e5       	ldi	r28, 0x54	; 84
    217a:	d0 e0       	ldi	r29, 0x00	; 0
	   Draw_Char( index  );

	//GotoAddress (4,0);
	for (; index < 96; index++)
	   Draw_Char( index  ); 
    217c:	ce 01       	movw	r24, r28
    217e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_Z9Draw_Chari>
	//GotoAddress (3,0);
	for (; index < 84; index++)
	   Draw_Char( index  );

	//GotoAddress (4,0);
	for (; index < 96; index++)
    2182:	21 96       	adiw	r28, 0x01	; 1
    2184:	c0 36       	cpi	r28, 0x60	; 96
    2186:	d1 05       	cpc	r29, r1
    2188:	cc f3       	brlt	.-14     	; 0x217c <_Z11DrawCharSetv+0x4c>
	   Draw_Char( index  ); 
}
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	08 95       	ret

00002190 <_Z20EOL_WrapAround_Checkv>:
};

#define CHAR_WIDTH 12
	
void EOL_WrapAround_Check()
{
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
	byte y_address = Get_y_address();
    2194:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z13Get_y_addressv>
    2198:	c8 2f       	mov	r28, r24
	byte x_address = Get_x_address();
    219a:	0e 94 87 08 	call	0x110e	; 0x110e <_Z13Get_x_addressv>
    219e:	d8 2f       	mov	r29, r24
	
	// do EOL carriage return 
	if (y_address > 115) 
    21a0:	c4 37       	cpi	r28, 0x74	; 116
    21a2:	18 f4       	brcc	.+6      	; 0x21aa <_Z20EOL_WrapAround_Checkv+0x1a>
			x_address += 2;
			
		Set_x_address( x_address );
		SendAddresses();
	}	
}
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret
	
	// do EOL carriage return 
	if (y_address > 115) 
	{ 			
		// Move back to start of line:
		Set_y_address( 0 );
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
				
		// Goto Next Line
		if (x_address >= 5) 
    21b0:	d5 30       	cpi	r29, 0x05	; 5
    21b2:	48 f4       	brcc	.+18     	; 0x21c6 <_Z20EOL_WrapAround_Checkv+0x36>
			x_address = 0;
		else
			x_address += 2;
    21b4:	8d 2f       	mov	r24, r29
    21b6:	8e 5f       	subi	r24, 0xFE	; 254
			
		Set_x_address( x_address );
    21b8:	0e 94 8d 08 	call	0x111a	; 0x111a <_Z13Set_x_addressh>
		SendAddresses();
    21bc:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
	}	
}
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	08 95       	ret
		// Move back to start of line:
		Set_y_address( 0 );
				
		// Goto Next Line
		if (x_address >= 5) 
			x_address = 0;
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	f7 cf       	rjmp	.-18     	; 0x21b8 <_Z20EOL_WrapAround_Checkv+0x28>

000021ca <_Z10dDraw_Chari>:
	}	
}
	
// DRAWS SINGLE (LARGE FONT) CHARACTER AT CURRENT CURSOR POSITION
void dDraw_Char(int char_index)
{
    21ca:	ff 92       	push	r15
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	8c 01       	movw	r16, r24
	byte save_y;
	 _far char* ptr = 0;	// was const

	//EOL_WrapAround_Check();
	save_y = Get_y_address();
    21d6:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z13Get_y_addressv>
    21da:	f8 2e       	mov	r15, r24

	ptr = (char*)dCharSet[char_index];
    21dc:	e8 01       	movw	r28, r16
    21de:	cc 0f       	add	r28, r28
    21e0:	dd 1f       	adc	r29, r29
    21e2:	c0 0f       	add	r28, r16
    21e4:	d1 1f       	adc	r29, r17
    21e6:	cc 0f       	add	r28, r28
    21e8:	dd 1f       	adc	r29, r29
    21ea:	cc 0f       	add	r28, r28
    21ec:	dd 1f       	adc	r29, r29
    21ee:	cc 0f       	add	r28, r28
    21f0:	dd 1f       	adc	r29, r29
    21f2:	c4 54       	subi	r28, 0x44	; 68
    21f4:	dd 4f       	sbci	r29, 0xFD	; 253
	TransferBufferFixedLength(ptr, CHAR_WIDTH);	
    21f6:	ce 01       	movw	r24, r28
    21f8:	6c e0       	ldi	r22, 0x0C	; 12
    21fa:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z25TransferBufferFixedLengthPKch>
	
	// REPOSITION FOR BOTTOM HALF
	Increment_x_address();
    21fe:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z19Increment_x_addressv>
	Set_y_address(save_y);
    2202:	8f 2d       	mov	r24, r15
    2204:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
	SendAddresses();
    2208:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
	
	// DRAW BOTTOM HALF
	ptr+= CHAR_WIDTH;
	TransferBufferFixedLength(ptr, CHAR_WIDTH);
    220c:	ce 01       	movw	r24, r28
    220e:	0c 96       	adiw	r24, 0x0c	; 12
    2210:	6c e0       	ldi	r22, 0x0C	; 12
    2212:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z25TransferBufferFixedLengthPKch>
	
	// ADJUST POSITION FOR NEXT CHARACTER ON SAME LINE:
	Set_x_address( Get_x_address()-1 );
    2216:	0e 94 87 08 	call	0x110e	; 0x110e <_Z13Get_x_addressv>
    221a:	81 50       	subi	r24, 0x01	; 1
    221c:	0e 94 8d 08 	call	0x111a	; 0x111a <_Z13Set_x_addressh>
	SendAddresses();
    2220:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
};
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	08 95       	ret

00002230 <_Z9dChar_Outc>:

// Draws the ASCII Character:
void dChar_Out(char ascii)
{
	byte index = ascii - 32;
	dDraw_Char(index);
    2230:	80 52       	subi	r24, 0x20	; 32
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_Z10dDraw_Chari>
};
    2238:	08 95       	ret

0000223a <_Z9dText_OutPc>:

// Draws a String on LCD at current position.
void dText_Out(_far char* string )
{
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	ec 01       	movw	r28, r24
	int i=0;
	while (string[i] != 0)
    2240:	88 81       	ld	r24, Y
    2242:	88 23       	and	r24, r24
    2244:	31 f0       	breq	.+12     	; 0x2252 <_Z9dText_OutPc+0x18>
	byte index = ascii - 32;
	dDraw_Char(index);
};

// Draws a String on LCD at current position.
void dText_Out(_far char* string )
    2246:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (string[i] != 0)
	{
		dChar_Out(string[i++]);
    2248:	0e 94 18 11 	call	0x2230	; 0x2230 <_Z9dChar_Outc>

// Draws a String on LCD at current position.
void dText_Out(_far char* string )
{
	int i=0;
	while (string[i] != 0)
    224c:	89 91       	ld	r24, Y+
    224e:	88 23       	and	r24, r24
    2250:	d9 f7       	brne	.-10     	; 0x2248 <_Z9dText_OutPc+0xe>
	{
		dChar_Out(string[i++]);
	};
};
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <_Z8dText_LnPc>:

// Draws a String and returns to next line.
void dText_Ln(_far char* string )
{
	dText_Out(string);
    2258:	0e 94 1d 11 	call	0x223a	; 0x223a <_Z9dText_OutPc>

	Increment_x_address();
    225c:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z19Increment_x_addressv>
	Increment_x_address();
    2260:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z19Increment_x_addressv>
	Set_y_address (0);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
	SendAddresses();
    226a:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z13SendAddressesv>
};
    226e:	08 95       	ret

00002270 <_Z13dDraw_Char_Atiic>:
// WORKS IN MULTIPLES OF 6 in Y_ADDRESS,
// AND                   1 in X_ADDRESS
// Row is the line number [0..7]
// Column is the column [0..20]
void dDraw_Char_At(int Row, int Column, char char_index)
{
    2270:	1f 93       	push	r17
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <_Z13dDraw_Char_Atiic+0x8>
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	14 2f       	mov	r17, r20
	if (Row > 7) 	Row=7;
	if (Column>20) 	Column=20;

	Set_x_address( Row );
    227e:	28 2f       	mov	r18, r24
    2280:	39 2f       	mov	r19, r25
    2282:	28 30       	cpi	r18, 0x08	; 8
    2284:	31 05       	cpc	r19, r1
    2286:	14 f0       	brlt	.+4      	; 0x228c <_Z13dDraw_Char_Atiic+0x1c>
    2288:	27 e0       	ldi	r18, 0x07	; 7
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	82 2f       	mov	r24, r18
    228e:	69 83       	std	Y+1, r22	; 0x01
    2290:	7a 83       	std	Y+2, r23	; 0x02
    2292:	0e 94 8d 08 	call	0x111a	; 0x111a <_Z13Set_x_addressh>
	Set_y_address( Column*6+2 );
    2296:	69 81       	ldd	r22, Y+1	; 0x01
    2298:	7a 81       	ldd	r23, Y+2	; 0x02
    229a:	26 2f       	mov	r18, r22
    229c:	37 2f       	mov	r19, r23
    229e:	25 31       	cpi	r18, 0x15	; 21
    22a0:	31 05       	cpc	r19, r1
    22a2:	14 f0       	brlt	.+4      	; 0x22a8 <_Z13dDraw_Char_Atiic+0x38>
    22a4:	24 e1       	ldi	r18, 0x14	; 20
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	82 2f       	mov	r24, r18
    22aa:	88 0f       	add	r24, r24
    22ac:	82 0f       	add	r24, r18
    22ae:	88 0f       	add	r24, r24
    22b0:	8e 5f       	subi	r24, 0xFE	; 254
    22b2:	0e 94 95 08 	call	0x112a	; 0x112a <_Z13Set_y_addressh>
	dChar_Out(char_index);
    22b6:	81 2f       	mov	r24, r17
    22b8:	0e 94 18 11 	call	0x2230	; 0x2230 <_Z9dChar_Outc>
};
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	1f 91       	pop	r17
    22c6:	08 95       	ret

000022c8 <_Z16dCenterLargeTexthhh>:


byte dCenterLargeText( byte mNumChars, byte mStartCol, byte mEndCol)
{
	word OccupiedX = mNumChars*12;	
	word StartX = (mEndCol - mStartCol-OccupiedX)>>1;
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	46 1b       	sub	r20, r22
    22cc:	51 09       	sbc	r21, r1
};


byte dCenterLargeText( byte mNumChars, byte mStartCol, byte mEndCol)
{
	word OccupiedX = mNumChars*12;	
    22ce:	9c e0       	ldi	r25, 0x0C	; 12
    22d0:	89 9f       	mul	r24, r25
    22d2:	c0 01       	movw	r24, r0
    22d4:	11 24       	eor	r1, r1
	word StartX = (mEndCol - mStartCol-OccupiedX)>>1;
    22d6:	48 1b       	sub	r20, r24
    22d8:	59 0b       	sbc	r21, r25
    22da:	56 95       	lsr	r21
    22dc:	47 95       	ror	r20
	return StartX;	
}
    22de:	84 2f       	mov	r24, r20
    22e0:	08 95       	ret

000022e2 <_Z12DrawdCharSetv>:

// For test purposes, draws a row of chars on LCD.
void DrawdCharSet()
{	
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
	int index=0;
	GotoAddress (0,0);
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	for (index = 0; index < 21; index++)
    22ee:	c0 e0       	ldi	r28, 0x00	; 0
    22f0:	d0 e0       	ldi	r29, 0x00	; 0
	   dDraw_Char( index  );
    22f2:	ce 01       	movw	r24, r28
    22f4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_Z10dDraw_Chari>
// For test purposes, draws a row of chars on LCD.
void DrawdCharSet()
{	
	int index=0;
	GotoAddress (0,0);
	for (index = 0; index < 21; index++)
    22f8:	21 96       	adiw	r28, 0x01	; 1
    22fa:	c5 31       	cpi	r28, 0x15	; 21
    22fc:	d1 05       	cpc	r29, r1
    22fe:	c9 f7       	brne	.-14     	; 0x22f2 <_Z12DrawdCharSetv+0x10>
	   dDraw_Char( index  );
	   
	GotoAddress (1,0);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	for (; index < 42; index++)
	   dDraw_Char( index  );
    2308:	ce 01       	movw	r24, r28
    230a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_Z10dDraw_Chari>
	GotoAddress (0,0);
	for (index = 0; index < 21; index++)
	   dDraw_Char( index  );
	   
	GotoAddress (1,0);
	for (; index < 42; index++)
    230e:	21 96       	adiw	r28, 0x01	; 1
    2310:	ca 32       	cpi	r28, 0x2A	; 42
    2312:	d1 05       	cpc	r29, r1
    2314:	c9 f7       	brne	.-14     	; 0x2308 <_Z12DrawdCharSetv+0x26>
	   dDraw_Char( index  );

	GotoAddress (2,0);
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	for (; index < 63; index++)
	   dDraw_Char( index  );
    231e:	ce 01       	movw	r24, r28
    2320:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_Z10dDraw_Chari>
	GotoAddress (1,0);
	for (; index < 42; index++)
	   dDraw_Char( index  );

	GotoAddress (2,0);
	for (; index < 63; index++)
    2324:	21 96       	adiw	r28, 0x01	; 1
    2326:	cf 33       	cpi	r28, 0x3F	; 63
    2328:	d1 05       	cpc	r29, r1
    232a:	c9 f7       	brne	.-14     	; 0x231e <_Z12DrawdCharSetv+0x3c>
	   dDraw_Char( index  );

	GotoAddress (3,0);
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	for (; index < 84; index++)
	   dDraw_Char( index  );
    2334:	ce 01       	movw	r24, r28
    2336:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_Z10dDraw_Chari>
	GotoAddress (2,0);
	for (; index < 63; index++)
	   dDraw_Char( index  );

	GotoAddress (3,0);
	for (; index < 84; index++)
    233a:	21 96       	adiw	r28, 0x01	; 1
    233c:	c4 35       	cpi	r28, 0x54	; 84
    233e:	d1 05       	cpc	r29, r1
    2340:	cc f3       	brlt	.-14     	; 0x2334 <_Z12DrawdCharSetv+0x52>
	   dDraw_Char( index  );

	GotoAddress (4,0);
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
    234a:	c4 e5       	ldi	r28, 0x54	; 84
    234c:	d0 e0       	ldi	r29, 0x00	; 0
	for (; index < 97; index++)
	   dDraw_Char( index  );
    234e:	ce 01       	movw	r24, r28
    2350:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_Z10dDraw_Chari>
	GotoAddress (3,0);
	for (; index < 84; index++)
	   dDraw_Char( index  );

	GotoAddress (4,0);
	for (; index < 97; index++)
    2354:	21 96       	adiw	r28, 0x01	; 1
    2356:	c1 36       	cpi	r28, 0x61	; 97
    2358:	d1 05       	cpc	r29, r1
    235a:	cc f3       	brlt	.-14     	; 0x234e <_Z12DrawdCharSetv+0x6c>
	   dDraw_Char( index  );
}
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	08 95       	ret

00002362 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
    2362:	90 93 c9 07 	sts	0x07C9, r25
    2366:	80 93 c8 07 	sts	0x07C8, r24
}
    236a:	08 95       	ret

0000236c <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
    236c:	90 93 cb 07 	sts	0x07CB, r25
    2370:	80 93 ca 07 	sts	0x07CA, r24
}
    2374:	08 95       	ret

00002376 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
    237a:	ed ee       	ldi	r30, 0xED	; 237
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    2380:	82 95       	swap	r24
    2382:	80 7f       	andi	r24, 0xF0	; 240
    2384:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
    2386:	c1 ef       	ldi	r28, 0xF1	; 241
    2388:	d0 e0       	ldi	r29, 0x00	; 0
    238a:	38 81       	ld	r19, Y
    238c:	cb 01       	movw	r24, r22
    238e:	80 7e       	andi	r24, 0xE0	; 224
    2390:	90 70       	andi	r25, 0x00	; 0
    2392:	96 95       	lsr	r25
    2394:	87 95       	ror	r24
    2396:	92 95       	swap	r25
    2398:	82 95       	swap	r24
    239a:	8f 70       	andi	r24, 0x0F	; 15
    239c:	89 27       	eor	r24, r25
    239e:	9f 70       	andi	r25, 0x0F	; 15
    23a0:	89 27       	eor	r24, r25
    23a2:	38 7f       	andi	r19, 0xF8	; 248
    23a4:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
    23a6:	a0 ef       	ldi	r26, 0xF0	; 240
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	8c 91       	ld	r24, X
    23ac:	66 0f       	add	r22, r22
    23ae:	66 0f       	add	r22, r22
    23b0:	66 0f       	add	r22, r22
    23b2:	87 70       	andi	r24, 0x07	; 7
    23b4:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
    23b6:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
    23b8:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
    23ba:	a5 ef       	ldi	r26, 0xF5	; 245
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	8c 91       	ld	r24, X
    23c0:	87 60       	ori	r24, 0x07	; 7
    23c2:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
    23c4:	a4 ef       	ldi	r26, 0xF4	; 244
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	8c 91       	ld	r24, X
    23ca:	88 6f       	ori	r24, 0xF8	; 248
    23cc:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    23ce:	20 83       	st	Z, r18
}
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    23d6:	ed ee       	ldi	r30, 0xED	; 237
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    23dc:	82 95       	swap	r24
    23de:	80 7f       	andi	r24, 0xF0	; 240
    23e0:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
    23e2:	a5 ef       	ldi	r26, 0xF5	; 245
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	8c 91       	ld	r24, X
    23e8:	88 7f       	andi	r24, 0xF8	; 248
    23ea:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
    23ec:	a4 ef       	ldi	r26, 0xF4	; 244
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	8c 91       	ld	r24, X
    23f2:	87 70       	andi	r24, 0x07	; 7
    23f4:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    23f6:	90 83       	st	Z, r25
}
    23f8:	08 95       	ret

000023fa <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
    23fa:	25 2f       	mov	r18, r21
    23fc:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    23fe:	ed ee       	ldi	r30, 0xED	; 237
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    2404:	82 95       	swap	r24
    2406:	80 7f       	andi	r24, 0xF0	; 240
    2408:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
    240a:	86 2f       	mov	r24, r22
    240c:	82 95       	swap	r24
    240e:	86 95       	lsr	r24
    2410:	87 70       	andi	r24, 0x07	; 7
    2412:	44 0f       	add	r20, r20
    2414:	44 0f       	add	r20, r20
    2416:	44 0f       	add	r20, r20
    2418:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    241a:	c9 01       	movw	r24, r18
    241c:	80 7e       	andi	r24, 0xE0	; 224
    241e:	9f 71       	andi	r25, 0x1F	; 31
    2420:	96 95       	lsr	r25
    2422:	87 95       	ror	r24
    2424:	92 95       	swap	r25
    2426:	82 95       	swap	r24
    2428:	8f 70       	andi	r24, 0x0F	; 15
    242a:	89 27       	eor	r24, r25
    242c:	9f 70       	andi	r25, 0x0F	; 15
    242e:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
    2430:	22 0f       	add	r18, r18
    2432:	22 0f       	add	r18, r18
    2434:	22 0f       	add	r18, r18
    2436:	37 2f       	mov	r19, r23
    2438:	32 95       	swap	r19
    243a:	36 95       	lsr	r19
    243c:	37 70       	andi	r19, 0x07	; 7
    243e:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
    2440:	77 0f       	add	r23, r23
    2442:	77 0f       	add	r23, r23
    2444:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
    2446:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
    244a:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    244e:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
    2452:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
    2456:	50 83       	st	Z, r21
}
    2458:	08 95       	ret

0000245a <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	f8 2e       	mov	r15, r24
    2466:	8b 01       	movw	r16, r22
    2468:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    2470:	c7 2f       	mov	r28, r23
    2472:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
    2474:	c8 01       	movw	r24, r16
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    247c:	27 2f       	mov	r18, r23
    247e:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    2480:	ed ee       	ldi	r30, 0xED	; 237
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    2486:	f2 94       	swap	r15
    2488:	b0 ef       	ldi	r27, 0xF0	; 240
    248a:	fb 22       	and	r15, r27
    248c:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
    248e:	43 ef       	ldi	r20, 0xF3	; 243
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	da 01       	movw	r26, r20
    2494:	6c 91       	ld	r22, X
    2496:	8d 2f       	mov	r24, r29
    2498:	82 95       	swap	r24
    249a:	86 95       	lsr	r24
    249c:	87 70       	andi	r24, 0x07	; 7
    249e:	68 7f       	andi	r22, 0xF8	; 248
    24a0:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    24a2:	ce 01       	movw	r24, r28
    24a4:	80 7e       	andi	r24, 0xE0	; 224
    24a6:	9f 71       	andi	r25, 0x1F	; 31
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	92 95       	swap	r25
    24ae:	82 95       	swap	r24
    24b0:	8f 70       	andi	r24, 0x0F	; 15
    24b2:	89 27       	eor	r24, r25
    24b4:	9f 70       	andi	r25, 0x0F	; 15
    24b6:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
    24b8:	a1 ef       	ldi	r26, 0xF1	; 241
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	7c 91       	ld	r23, X
    24be:	fc 2e       	mov	r15, r28
    24c0:	ff 0c       	add	r15, r15
    24c2:	ff 0c       	add	r15, r15
    24c4:	ff 0c       	add	r15, r15
    24c6:	77 70       	andi	r23, 0x07	; 7
    24c8:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
    24ca:	ea 01       	movw	r28, r20
    24cc:	68 83       	st	Y, r22
	CANIDT2 = idt2;
    24ce:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    24d2:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
    24d4:	c7 ef       	ldi	r28, 0xF7	; 247
    24d6:	d0 e0       	ldi	r29, 0x00	; 0
    24d8:	48 81       	ld	r20, Y
    24da:	83 2f       	mov	r24, r19
    24dc:	82 95       	swap	r24
    24de:	86 95       	lsr	r24
    24e0:	87 70       	andi	r24, 0x07	; 7
    24e2:	48 7f       	andi	r20, 0xF8	; 248
    24e4:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
    24e6:	c9 01       	movw	r24, r18
    24e8:	80 7e       	andi	r24, 0xE0	; 224
    24ea:	9f 71       	andi	r25, 0x1F	; 31
    24ec:	96 95       	lsr	r25
    24ee:	87 95       	ror	r24
    24f0:	92 95       	swap	r25
    24f2:	82 95       	swap	r24
    24f4:	8f 70       	andi	r24, 0x0F	; 15
    24f6:	89 27       	eor	r24, r25
    24f8:	9f 70       	andi	r25, 0x0F	; 15
    24fa:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
    24fc:	a5 ef       	ldi	r26, 0xF5	; 245
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	5c 91       	ld	r21, X
    2502:	22 0f       	add	r18, r18
    2504:	22 0f       	add	r18, r18
    2506:	22 0f       	add	r18, r18
    2508:	57 70       	andi	r21, 0x07	; 7
    250a:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
    250c:	48 83       	st	Y, r20
	CANIDM2 = idm2;
    250e:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
    2512:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
    2514:	00 83       	st	Z, r16
}
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	08 95       	ret

00002522 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
    2522:	ed ee       	ldi	r30, 0xED	; 237
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    2528:	82 95       	swap	r24
    252a:	80 7f       	andi	r24, 0xF0	; 240
    252c:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
    252e:	a7 ef       	ldi	r26, 0xF7	; 247
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	8c 91       	ld	r24, X
    2534:	88 7f       	andi	r24, 0xF8	; 248
    2536:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
    2538:	a6 ef       	ldi	r26, 0xF6	; 246
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	8c 91       	ld	r24, X
    253e:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
    2540:	a5 ef       	ldi	r26, 0xF5	; 245
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	8c 91       	ld	r24, X
    2546:	87 70       	andi	r24, 0x07	; 7
    2548:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    254a:	90 83       	st	Z, r25
}
    254c:	08 95       	ret

0000254e <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    254e:	ed ee       	ldi	r30, 0xED	; 237
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    2554:	82 95       	swap	r24
    2556:	80 7f       	andi	r24, 0xF0	; 240
    2558:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    255a:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    255e:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    2562:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    2566:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    256a:	90 83       	st	Z, r25
}
    256c:	08 95       	ret

0000256e <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    256e:	ed ee       	ldi	r30, 0xED	; 237
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    2574:	82 95       	swap	r24
    2576:	80 7f       	andi	r24, 0xF0	; 240
    2578:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
    257a:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
    257e:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
    2582:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
    2586:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
    258a:	90 83       	st	Z, r25
}
    258c:	08 95       	ret

0000258e <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
    2594:	ed ee       	ldi	r30, 0xED	; 237
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
    259a:	38 2f       	mov	r19, r24
    259c:	32 95       	swap	r19
    259e:	30 7f       	andi	r19, 0xF0	; 240
    25a0:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
    25a2:	ce ed       	ldi	r28, 0xDE	; 222
    25a4:	d0 e0       	ldi	r29, 0x00	; 0
    25a6:	98 81       	ld	r25, Y
    25a8:	a1 e0       	ldi	r26, 0x01	; 1
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <_Z21can_setup_receive_mobhssh+0x24>
    25ae:	aa 0f       	add	r26, r26
    25b0:	bb 1f       	adc	r27, r27
    25b2:	8a 95       	dec	r24
    25b4:	e2 f7       	brpl	.-8      	; 0x25ae <_Z21can_setup_receive_mobhssh+0x20>
    25b6:	9a 2b       	or	r25, r26
    25b8:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    25ba:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    25bc:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    25be:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    25c2:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    25c6:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    25ca:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    25ce:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
    25d0:	20 69       	ori	r18, 0x90	; 144
    25d2:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
    25d6:	a8 ed       	ldi	r26, 0xD8	; 216
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	8c 91       	ld	r24, X
    25dc:	82 60       	ori	r24, 0x02	; 2
    25de:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
    25e0:	10 83       	st	Z, r17
}
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	08 95       	ret

000025ea <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
    25ea:	ef 92       	push	r14
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	28 e0       	ldi	r18, 0x08	; 8
    2602:	0e 94 c7 12 	call	0x258e	; 0x258e <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
    2606:	60 91 cc 07 	lds	r22, 0x07CC
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	70 e0       	ldi	r23, 0x00	; 0
    260e:	0e 94 bb 11 	call	0x2376	; 0x2376 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	28 e0       	ldi	r18, 0x08	; 8
    261e:	0e 94 c7 12 	call	0x258e	; 0x258e <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    2622:	cd ee       	ldi	r28, 0xED	; 237
    2624:	d0 e0       	ldi	r29, 0x00	; 0
    2626:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    2628:	80 e3       	ldi	r24, 0x30	; 48
    262a:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    262c:	05 ef       	ldi	r16, 0xF5	; 245
    262e:	10 e0       	ldi	r17, 0x00	; 0
    2630:	f8 01       	movw	r30, r16
    2632:	80 81       	ld	r24, Z
    2634:	88 7f       	andi	r24, 0xF8	; 248
    2636:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    2638:	84 ef       	ldi	r24, 0xF4	; 244
    263a:	e8 2e       	mov	r14, r24
    263c:	f1 2c       	mov	r15, r1
    263e:	f7 01       	movw	r30, r14
    2640:	80 81       	ld	r24, Z
    2642:	87 70       	andi	r24, 0x07	; 7
    2644:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    2646:	98 83       	st	Y, r25
   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	63 e2       	ldi	r22, 0x23	; 35
    264c:	7c ef       	ldi	r23, 0xFC	; 252
    264e:	43 e2       	ldi	r20, 0x23	; 35
    2650:	5c ef       	ldi	r21, 0xFC	; 252
    2652:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
    2656:	85 e0       	ldi	r24, 0x05	; 5
    2658:	60 e0       	ldi	r22, 0x00	; 0
    265a:	70 e0       	ldi	r23, 0x00	; 0
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	28 e0       	ldi	r18, 0x08	; 8
    2662:	0e 94 c7 12 	call	0x258e	; 0x258e <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    2666:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    2668:	80 e5       	ldi	r24, 0x50	; 80
    266a:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    266c:	f8 01       	movw	r30, r16
    266e:	80 81       	ld	r24, Z
    2670:	88 7f       	andi	r24, 0xF8	; 248
    2672:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    2674:	f7 01       	movw	r30, r14
    2676:	80 81       	ld	r24, Z
    2678:	87 70       	andi	r24, 0x07	; 7
    267a:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    267c:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
    267e:	85 e0       	ldi	r24, 0x05	; 5
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	7c ef       	ldi	r23, 0xFC	; 252
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	5c ef       	ldi	r21, 0xFC	; 252
    2688:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z20can_add_id_to_filterhtt>
}
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	08 95       	ret

0000269a <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
    269a:	ed ee       	ldi	r30, 0xED	; 237
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
    26a0:	82 95       	swap	r24
    26a2:	80 7f       	andi	r24, 0xF0	; 240
    26a4:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
    26a6:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    26aa:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
    26ae:	90 83       	st	Z, r25
}
    26b0:	08 95       	ret

000026b2 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
    26b2:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
    26b4:	40 91 f3 00 	lds	r20, 0x00F3
    26b8:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
    26ba:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
    26be:	80 91 f1 00 	lds	r24, 0x00F1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
    26c4:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
    26c8:	ba 01       	movw	r22, r20
    26ca:	76 95       	lsr	r23
    26cc:	67 95       	ror	r22
    26ce:	76 95       	lsr	r23
    26d0:	67 95       	ror	r22
    26d2:	76 95       	lsr	r23
    26d4:	67 95       	ror	r22
    26d6:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
    26d8:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	22 95       	swap	r18
    26e0:	32 95       	swap	r19
    26e2:	30 7f       	andi	r19, 0xF0	; 240
    26e4:	32 27       	eor	r19, r18
    26e6:	20 7f       	andi	r18, 0xF0	; 240
    26e8:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
    26ea:	54 2f       	mov	r21, r20
    26ec:	44 27       	eor	r20, r20
    26ee:	52 95       	swap	r21
    26f0:	55 0f       	add	r21, r21
    26f2:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    26f4:	24 2b       	or	r18, r20
    26f6:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
    26f8:	ac 01       	movw	r20, r24
    26fa:	56 95       	lsr	r21
    26fc:	47 95       	ror	r20
    26fe:	56 95       	lsr	r21
    2700:	47 95       	ror	r20
    2702:	56 95       	lsr	r21
    2704:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    2706:	24 2b       	or	r18, r20
    2708:	35 2b       	or	r19, r21
    270a:	32 83       	std	Z+2, r19	; 0x02
    270c:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
    270e:	82 95       	swap	r24
    2710:	88 0f       	add	r24, r24
    2712:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
    2714:	a6 95       	lsr	r26
    2716:	a6 95       	lsr	r26
    2718:	a6 95       	lsr	r26
    271a:	a8 2b       	or	r26, r24
    271c:	a3 83       	std	Z+3, r26	; 0x03
}
    271e:	08 95       	ret

00002720 <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
    2726:	0e 94 59 13 	call	0x26b2	; 0x26b2 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
    272a:	80 91 ef 00 	lds	r24, 0x00EF
    272e:	8f 70       	andi	r24, 0x0F	; 15
    2730:	28 2f       	mov	r18, r24
    2732:	22 0f       	add	r18, r18
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	91 7e       	andi	r25, 0xE1	; 225
    2738:	92 2b       	or	r25, r18
    273a:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
    273c:	48 2f       	mov	r20, r24
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	41 15       	cp	r20, r1
    2742:	51 05       	cpc	r21, r1
    2744:	59 f0       	breq	.+22     	; 0x275c <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
    2746:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
    274c:	90 91 fa 00 	lds	r25, 0x00FA
    2750:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    2752:	2f 5f       	subi	r18, 0xFF	; 255
    2754:	3f 4f       	sbci	r19, 0xFF	; 255
    2756:	24 17       	cp	r18, r20
    2758:	35 07       	cpc	r19, r21
    275a:	c4 f3       	brlt	.-16     	; 0x274c <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	08 95       	ret

00002762 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
    2762:	1f 92       	push	r1
    2764:	0f 92       	push	r0
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	0f 92       	push	r0
    276a:	11 24       	eor	r1, r1
    276c:	2f 93       	push	r18
    276e:	3f 93       	push	r19
    2770:	4f 93       	push	r20
    2772:	5f 93       	push	r21
    2774:	6f 93       	push	r22
    2776:	7f 93       	push	r23
    2778:	8f 93       	push	r24
    277a:	9f 93       	push	r25
    277c:	af 93       	push	r26
    277e:	bf 93       	push	r27
    2780:	cf 93       	push	r28
    2782:	ef 93       	push	r30
    2784:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
    2786:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
    278a:	40 91 ec 00 	lds	r20, 0x00EC
    278e:	42 95       	swap	r20
    2790:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    2792:	4f 30       	cpi	r20, 0x0F	; 15
    2794:	09 f4       	brne	.+2      	; 0x2798 <__vector_18+0x36>
    2796:	87 c0       	rjmp	.+270    	; 0x28a6 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
    2798:	80 91 ec 00 	lds	r24, 0x00EC
    279c:	80 7f       	andi	r24, 0xF0	; 240
    279e:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
    27a2:	80 91 ee 00 	lds	r24, 0x00EE
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	8f 71       	andi	r24, 0x1F	; 31
    27aa:	90 70       	andi	r25, 0x00	; 0
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <__vector_18+0x50>
    27b0:	40 c0       	rjmp	.+128    	; 0x2832 <__vector_18+0xd0>
		 byte st = CANSTMOB;
    27b2:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	82 ff       	sbrs	r24, 2
    27ba:	05 c0       	rjmp	.+10     	; 0x27c6 <__vector_18+0x64>
    27bc:	20 91 ee 00 	lds	r18, 0x00EE
    27c0:	2f 7e       	andi	r18, 0xEF	; 239
    27c2:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
    27c6:	9c 01       	movw	r18, r24
    27c8:	23 70       	andi	r18, 0x03	; 3
    27ca:	30 70       	andi	r19, 0x00	; 0
    27cc:	21 15       	cp	r18, r1
    27ce:	31 05       	cpc	r19, r1
    27d0:	29 f0       	breq	.+10     	; 0x27dc <__vector_18+0x7a>
    27d2:	20 91 ee 00 	lds	r18, 0x00EE
    27d6:	27 7f       	andi	r18, 0xF7	; 247
    27d8:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
    27dc:	81 ff       	sbrs	r24, 1
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <__vector_18+0x88>
    27e0:	20 91 ee 00 	lds	r18, 0x00EE
    27e4:	2b 7f       	andi	r18, 0xFB	; 251
    27e6:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
    27ea:	80 ff       	sbrs	r24, 0
    27ec:	05 c0       	rjmp	.+10     	; 0x27f8 <__vector_18+0x96>
    27ee:	80 91 ee 00 	lds	r24, 0x00EE
    27f2:	8d 7f       	andi	r24, 0xFD	; 253
    27f4:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
    27f8:	45 30       	cpi	r20, 0x05	; 5
    27fa:	09 f4       	brne	.+2      	; 0x27fe <__vector_18+0x9c>
    27fc:	4b c0       	rjmp	.+150    	; 0x2894 <__vector_18+0x132>
    27fe:	41 30       	cpi	r20, 0x01	; 1
    2800:	09 f4       	brne	.+2      	; 0x2804 <__vector_18+0xa2>
    2802:	48 c0       	rjmp	.+144    	; 0x2894 <__vector_18+0x132>
    2804:	43 30       	cpi	r20, 0x03	; 3
    2806:	09 f4       	brne	.+2      	; 0x280a <__vector_18+0xa8>
    2808:	45 c0       	rjmp	.+138    	; 0x2894 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
    280a:	c0 93 ed 00 	sts	0x00ED, r28
}
    280e:	ff 91       	pop	r31
    2810:	ef 91       	pop	r30
    2812:	cf 91       	pop	r28
    2814:	bf 91       	pop	r27
    2816:	af 91       	pop	r26
    2818:	9f 91       	pop	r25
    281a:	8f 91       	pop	r24
    281c:	7f 91       	pop	r23
    281e:	6f 91       	pop	r22
    2820:	5f 91       	pop	r21
    2822:	4f 91       	pop	r20
    2824:	3f 91       	pop	r19
    2826:	2f 91       	pop	r18
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	0f 90       	pop	r0
    282e:	1f 90       	pop	r1
    2830:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
    2832:	80 91 ee 00 	lds	r24, 0x00EE
    2836:	85 fd       	sbrc	r24, 5
    2838:	13 c0       	rjmp	.+38     	; 0x2860 <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
    283a:	80 91 ee 00 	lds	r24, 0x00EE
    283e:	86 ff       	sbrs	r24, 6
    2840:	e4 cf       	rjmp	.-56     	; 0x280a <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
    2842:	e0 91 ca 07 	lds	r30, 0x07CA
    2846:	f0 91 cb 07 	lds	r31, 0x07CB
    284a:	30 97       	sbiw	r30, 0x00	; 0
    284c:	09 f0       	breq	.+2      	; 0x2850 <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
    284e:	09 95       	icall

		TransmittedSuccesfully = TRUE;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	80 93 bf 07 	sts	0x07BF, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
    2856:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
    285a:	10 92 ee 00 	sts	0x00EE, r1
    285e:	d5 cf       	rjmp	.-86     	; 0x280a <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	80 93 be 07 	sts	0x07BE, r24
       	can_retrieve_data( &LastReceivedMsg );
    2866:	8f ea       	ldi	r24, 0xAF	; 175
    2868:	97 e0       	ldi	r25, 0x07	; 7
    286a:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
    286e:	8f ea       	ldi	r24, 0xAF	; 175
    2870:	97 e0       	ldi	r25, 0x07	; 7
    2872:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
    2876:	88 23       	and	r24, r24
    2878:	69 f4       	brne	.+26     	; 0x2894 <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
    287a:	8f ea       	ldi	r24, 0xAF	; 175
    287c:	97 e0       	ldi	r25, 0x07	; 7
    287e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
    2882:	e0 91 c8 07 	lds	r30, 0x07C8
    2886:	f0 91 c9 07 	lds	r31, 0x07C9
    288a:	30 97       	sbiw	r30, 0x00	; 0
    288c:	19 f0       	breq	.+6      	; 0x2894 <__vector_18+0x132>
    	   		rx_call_back(&LastReceivedMsg);
    288e:	8f ea       	ldi	r24, 0xAF	; 175
    2890:	97 e0       	ldi	r25, 0x07	; 7
    2892:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
    2894:	88 e9       	ldi	r24, 0x98	; 152
    2896:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
    289a:	80 91 ee 00 	lds	r24, 0x00EE
    289e:	8f 7d       	andi	r24, 0xDF	; 223
    28a0:	80 93 ee 00 	sts	0x00EE, r24
    28a4:	b2 cf       	rjmp	.-156    	; 0x280a <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    28a6:	80 91 da 00 	lds	r24, 0x00DA
    28aa:	80 93 da 00 	sts	0x00DA, r24
    28ae:	af cf       	rjmp	.-162    	; 0x280e <__vector_18+0xac>

000028b0 <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
    28b6:	98 2f       	mov	r25, r24
    28b8:	92 95       	swap	r25
    28ba:	90 7f       	andi	r25, 0xF0	; 240
   cli();
    28bc:	f8 94       	cli
   CANPAGE = page;
    28be:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
    28c2:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
    28c6:	48 81       	ld	r20, Y
    28c8:	59 81       	ldd	r21, Y+1	; 0x01
    28ca:	6a 81       	ldd	r22, Y+2	; 0x02
    28cc:	7b 81       	ldd	r23, Y+3	; 0x03
    28ce:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
    28d2:	8c 81       	ldd	r24, Y+4	; 0x04
    28d4:	86 95       	lsr	r24
    28d6:	8f 70       	andi	r24, 0x0F	; 15
    28d8:	79 f0       	breq	.+30     	; 0x28f8 <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
    28da:	fe 01       	movw	r30, r28
    28dc:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
    28e2:	21 91       	ld	r18, Z+
    28e4:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    28e8:	01 96       	adiw	r24, 0x01	; 1
    28ea:	2c 81       	ldd	r18, Y+4	; 0x04
    28ec:	26 95       	lsr	r18
    28ee:	2f 70       	andi	r18, 0x0F	; 15
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	82 17       	cp	r24, r18
    28f4:	93 07       	cpc	r25, r19
    28f6:	ac f3       	brlt	.-22     	; 0x28e2 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
    28f8:	80 91 f0 00 	lds	r24, 0x00F0
    28fc:	8b 7f       	andi	r24, 0xFB	; 251
    28fe:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
    2902:	8c 81       	ldd	r24, Y+4	; 0x04
    2904:	86 95       	lsr	r24
    2906:	8f 70       	andi	r24, 0x0F	; 15
    2908:	80 65       	ori	r24, 0x50	; 80
    290a:	80 93 ef 00 	sts	0x00EF, r24
   sei();
    290e:	78 94       	sei
}
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
    2916:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
    291a:	80 91 ee 00 	lds	r24, 0x00EE
    291e:	86 ff       	sbrs	r24, 6
    2920:	fc cf       	rjmp	.-8      	; 0x291a <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
    2922:	08 95       	ret

00002924 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    2924:	20 91 f8 00 	lds	r18, 0x00F8
    2928:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
    292a:	40 91 f9 00 	lds	r20, 0x00F9
    292e:	94 2f       	mov	r25, r20
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	28 2b       	or	r18, r24
    2934:	39 2b       	or	r19, r25
  return retval;
}
    2936:	c9 01       	movw	r24, r18
    2938:	08 95       	ret

0000293a <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
    2940:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z17can_retrieve_dataP4sCAN>
    2944:	8f 70       	andi	r24, 0x0F	; 15
    2946:	88 0f       	add	r24, r24
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	91 7e       	andi	r25, 0xE1	; 225
    294c:	98 2b       	or	r25, r24
    294e:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    2950:	80 91 f8 00 	lds	r24, 0x00F8
    2954:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
    2956:	40 91 f9 00 	lds	r20, 0x00F9
    295a:	34 2f       	mov	r19, r20
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	82 2b       	or	r24, r18
    2960:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
    2962:	9e 87       	std	Y+14, r25	; 0x0e
    2964:	8d 87       	std	Y+13, r24	; 0x0d
}
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	08 95       	ret

0000296c <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    296c:	83 30       	cpi	r24, 0x03	; 3
    296e:	61 f0       	breq	.+24     	; 0x2988 <_Z8set_baudh+0x1c>
    2970:	84 30       	cpi	r24, 0x04	; 4
    2972:	30 f0       	brcs	.+12     	; 0x2980 <_Z8set_baudh+0x14>
    2974:	85 30       	cpi	r24, 0x05	; 5
    2976:	d1 f0       	breq	.+52     	; 0x29ac <_Z8set_baudh+0x40>
    2978:	85 30       	cpi	r24, 0x05	; 5
    297a:	80 f4       	brcc	.+32     	; 0x299c <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    297c:	82 e1       	ldi	r24, 0x12	; 18
    297e:	05 c0       	rjmp	.+10     	; 0x298a <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	91 f0       	breq	.+36     	; 0x29a8 <_Z8set_baudh+0x3c>
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	71 f0       	breq	.+28     	; 0x29a4 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    2988:	8e e0       	ldi	r24, 0x0E	; 14
    298a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    298e:	84 e0       	ldi	r24, 0x04	; 4
    2990:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    2994:	83 e1       	ldi	r24, 0x13	; 19
    2996:	80 93 e4 00 	sts	0x00E4, r24
    299a:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    299c:	86 30       	cpi	r24, 0x06	; 6
    299e:	a1 f7       	brne	.-24     	; 0x2988 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    29a0:	86 e2       	ldi	r24, 0x26	; 38
    29a2:	f3 cf       	rjmp	.-26     	; 0x298a <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    29a4:	86 e0       	ldi	r24, 0x06	; 6
    29a6:	f1 cf       	rjmp	.-30     	; 0x298a <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	ef cf       	rjmp	.-34     	; 0x298a <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    29ac:	8e e1       	ldi	r24, 0x1E	; 30
    29ae:	ed cf       	rjmp	.-38     	; 0x298a <_Z8set_baudh+0x1e>

000029b0 <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
    29b6:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    29ba:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
    29bc:	29 2f       	mov	r18, r25
    29be:	22 95       	swap	r18
    29c0:	20 7f       	andi	r18, 0xF0	; 240
    29c2:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
    29c6:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    29ca:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    29ce:	9f 5f       	subi	r25, 0xFF	; 255
    29d0:	96 30       	cpi	r25, 0x06	; 6
    29d2:	a1 f7       	brne	.-24     	; 0x29bc <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
    29d4:	90 ea       	ldi	r25, 0xA0	; 160
    29d6:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
    29da:	0e 94 b6 14 	call	0x296c	; 0x296c <_Z8set_baudh>
   can_init_mobs();
    29de:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
    29e2:	80 91 d9 00 	lds	r24, 0x00D9
    29e6:	82 ff       	sbrs	r24, 2
    29e8:	fc cf       	rjmp	.-8      	; 0x29e2 <_Z8can_inith+0x32>
   }
   //sei();
}
    29ea:	08 95       	ret

000029ec <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
    29ec:	88 23       	and	r24, r24
    29ee:	51 f4       	brne	.+20     	; 0x2a04 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
    29f6:	84 e0       	ldi	r24, 0x04	; 4
    29f8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
    29fc:	83 e1       	ldi	r24, 0x13	; 19
    29fe:	80 93 e4 00 	sts	0x00E4, r24
    2a02:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
    2a04:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
    2a08:	8c e0       	ldi	r24, 0x0C	; 12
    2a0a:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
    2a0e:	86 e3       	ldi	r24, 0x36	; 54
    2a10:	80 93 e4 00 	sts	0x00E4, r24
    2a14:	08 95       	ret

00002a16 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2a16:	88 23       	and	r24, r24
    2a18:	51 f4       	brne	.+20     	; 0x2a2e <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    2a1a:	86 e0       	ldi	r24, 0x06	; 6
    2a1c:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    2a20:	84 e0       	ldi	r24, 0x04	; 4
    2a22:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    2a26:	83 e1       	ldi	r24, 0x13	; 19
    2a28:	80 93 e4 00 	sts	0x00E4, r24
    2a2c:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    2a34:	8c e0       	ldi	r24, 0x0C	; 12
    2a36:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    2a3a:	87 e3       	ldi	r24, 0x37	; 55
    2a3c:	80 93 e4 00 	sts	0x00E4, r24
    2a40:	08 95       	ret

00002a42 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2a42:	88 23       	and	r24, r24
    2a44:	51 f4       	brne	.+20     	; 0x2a5a <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    2a46:	8e e0       	ldi	r24, 0x0E	; 14
    2a48:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    2a4c:	84 e0       	ldi	r24, 0x04	; 4
    2a4e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    2a52:	83 e1       	ldi	r24, 0x13	; 19
    2a54:	80 93 e4 00 	sts	0x00E4, r24
    2a58:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    2a5a:	86 e0       	ldi	r24, 0x06	; 6
    2a5c:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    2a60:	8c e0       	ldi	r24, 0x0C	; 12
    2a62:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    2a66:	87 e3       	ldi	r24, 0x37	; 55
    2a68:	80 93 e4 00 	sts	0x00E4, r24
    2a6c:	08 95       	ret

00002a6e <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2a6e:	88 23       	and	r24, r24
    2a70:	51 f4       	brne	.+20     	; 0x2a86 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    2a72:	82 e1       	ldi	r24, 0x12	; 18
    2a74:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    2a78:	84 e0       	ldi	r24, 0x04	; 4
    2a7a:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    2a7e:	83 e1       	ldi	r24, 0x13	; 19
    2a80:	80 93 e4 00 	sts	0x00E4, r24
    2a84:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    2a86:	88 e0       	ldi	r24, 0x08	; 8
    2a88:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    2a8c:	8c e0       	ldi	r24, 0x0C	; 12
    2a8e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    2a92:	87 e3       	ldi	r24, 0x37	; 55
    2a94:	80 93 e4 00 	sts	0x00E4, r24
    2a98:	08 95       	ret

00002a9a <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2a9a:	88 23       	and	r24, r24
    2a9c:	51 f4       	brne	.+20     	; 0x2ab2 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    2a9e:	8e e1       	ldi	r24, 0x1E	; 30
    2aa0:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    2aa4:	84 e0       	ldi	r24, 0x04	; 4
    2aa6:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    2aaa:	83 e1       	ldi	r24, 0x13	; 19
    2aac:	80 93 e4 00 	sts	0x00E4, r24
    2ab0:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    2ab2:	8e e0       	ldi	r24, 0x0E	; 14
    2ab4:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    2ab8:	8c e0       	ldi	r24, 0x0C	; 12
    2aba:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    2abe:	87 e3       	ldi	r24, 0x37	; 55
    2ac0:	80 93 e4 00 	sts	0x00E4, r24
    2ac4:	08 95       	ret

00002ac6 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2ac6:	88 23       	and	r24, r24
    2ac8:	51 f4       	brne	.+20     	; 0x2ade <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    2aca:	86 e2       	ldi	r24, 0x26	; 38
    2acc:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    2ad6:	83 e1       	ldi	r24, 0x13	; 19
    2ad8:	80 93 e4 00 	sts	0x00E4, r24
    2adc:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    2ade:	82 e1       	ldi	r24, 0x12	; 18
    2ae0:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    2ae4:	8c e0       	ldi	r24, 0x0C	; 12
    2ae6:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    2aea:	87 e3       	ldi	r24, 0x37	; 55
    2aec:	80 93 e4 00 	sts	0x00E4, r24
    2af0:	08 95       	ret

00002af2 <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    2af2:	83 e9       	ldi	r24, 0x93	; 147
    2af4:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    2af8:	ee e7       	ldi	r30, 0x7E	; 126
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	88 60       	ori	r24, 0x08	; 8
    2b00:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    2b02:	80 e8       	ldi	r24, 0x80	; 128
    2b04:	80 93 7b 00 	sts	0x007B, r24
}
    2b08:	08 95       	ret

00002b0a <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
    2b0a:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
    2b14:	e3 e4       	ldi	r30, 0x43	; 67
    2b16:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
    2b1a:	80 91 7a 00 	lds	r24, 0x007A
    2b1e:	80 64       	ori	r24, 0x40	; 64
    2b20:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
    2b24:	80 91 7a 00 	lds	r24, 0x007A
    2b28:	86 fd       	sbrc	r24, 6
    2b2a:	fc cf       	rjmp	.-8      	; 0x2b24 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
    2b2c:	80 91 78 00 	lds	r24, 0x0078
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	81 70       	andi	r24, 0x01	; 1
    2b34:	90 70       	andi	r25, 0x00	; 0
    2b36:	ba 01       	movw	r22, r20
    2b38:	6f 70       	andi	r22, 0x0F	; 15
    2b3a:	70 70       	andi	r23, 0x00	; 0
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <_Z18pick_random_numberv+0x38>
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	6a 95       	dec	r22
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <_Z18pick_random_numberv+0x34>
		result |= (tmp);
    2b46:	28 2b       	or	r18, r24
    2b48:	39 2b       	or	r19, r25
		tmp = ADCH;  
    2b4a:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    2b4e:	4f 5f       	subi	r20, 0xFF	; 255
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255
    2b52:	40 31       	cpi	r20, 0x10	; 16
    2b54:	51 05       	cpc	r21, r1
    2b56:	f9 f6       	brne	.-66     	; 0x2b16 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
    2b58:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
    2b5a:	c9 01       	movw	r24, r18
    2b5c:	08 95       	ret

00002b5e <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    2b5e:	83 e0       	ldi	r24, 0x03	; 3
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	28 e0       	ldi	r18, 0x08	; 8
    2b6a:	0e 94 c7 12 	call	0x258e	; 0x258e <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    2b6e:	83 e0       	ldi	r24, 0x03	; 3
    2b70:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	63 e2       	ldi	r22, 0x23	; 35
    2b78:	7c ef       	ldi	r23, 0xFC	; 252
    2b7a:	43 e2       	ldi	r20, 0x23	; 35
    2b7c:	5c ef       	ldi	r21, 0xFC	; 252
    2b7e:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z20can_add_id_to_filterhtt>
}
    2b82:	08 95       	ret

00002b84 <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    2b84:	83 e9       	ldi	r24, 0x93	; 147
    2b86:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    2b8a:	80 91 7e 00 	lds	r24, 0x007E
    2b8e:	88 60       	ori	r24, 0x08	; 8
    2b90:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    2b94:	80 e8       	ldi	r24, 0x80	; 128
    2b96:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
    2b9a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	90 93 d0 07 	sts	0x07D0, r25
    2ba4:	80 93 cf 07 	sts	0x07CF, r24
    2ba8:	80 93 d1 07 	sts	0x07D1, r24

	// put adc back into mode for POT
	adc_init();
    2bac:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    2bb0:	80 91 cd 07 	lds	r24, 0x07CD
    2bb4:	88 23       	and	r24, r24
    2bb6:	51 f0       	breq	.+20     	; 0x2bcc <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	80 93 cd 07 	sts	0x07CD, r24
    2bbe:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    2bc0:	80 93 d4 07 	sts	0x07D4, r24
	init_complete = TRUE;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 ce 07 	sts	0x07CE, r24
}
    2bca:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME
		init_path = 1;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	80 93 d4 07 	sts	0x07D4, r24
		setup_instance_claim_mob();
    2bd2:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    2bd6:	10 92 cc 07 	sts	0x07CC, r1
    2bda:	80 91 d4 07 	lds	r24, 0x07D4
    2bde:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    2be0:	80 93 d4 07 	sts	0x07D4, r24
	init_complete = TRUE;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	80 93 ce 07 	sts	0x07CE, r24
}
    2bea:	08 95       	ret

00002bec <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    2bf2:	83 e2       	ldi	r24, 0x23	; 35
    2bf4:	9c ef       	ldi	r25, 0xFC	; 252
    2bf6:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    2bfa:	68 83       	st	Y, r22
    2bfc:	79 83       	std	Y+1, r23	; 0x01
    2bfe:	8a 83       	std	Y+2, r24	; 0x02
    2c00:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    2c02:	80 91 cc 07 	lds	r24, 0x07CC
    2c06:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    2c08:	80 91 cd 07 	lds	r24, 0x07CD
    2c0c:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    2c0e:	80 91 d1 07 	lds	r24, 0x07D1
    2c12:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    2c14:	80 91 d4 07 	lds	r24, 0x07D4
    2c18:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    2c1a:	80 91 d5 07 	lds	r24, 0x07D5
    2c1e:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    2c20:	80 91 52 08 	lds	r24, 0x0852
    2c24:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    2c26:	8c 81       	ldd	r24, Y+4	; 0x04
    2c28:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    2c2a:	8e 60       	ori	r24, 0x0E	; 14
    2c2c:	8c 83       	std	Y+4, r24	; 0x04
}
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	08 95       	ret

00002c34 <_Z22can_instance_timeslicev>:

byte ts_state = 0;

void can_instance_timeslice()
{
	ts_state = 1;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	80 93 d5 07 	sts	0x07D5, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    2c3a:	40 91 cd 07 	lds	r20, 0x07CD
    2c3e:	41 30       	cpi	r20, 0x01	; 1
    2c40:	59 f1       	breq	.+86     	; 0x2c98 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    2c42:	80 91 ce 07 	lds	r24, 0x07CE
    2c46:	88 23       	and	r24, r24
    2c48:	39 f1       	breq	.+78     	; 0x2c98 <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    2c4a:	80 91 cf 07 	lds	r24, 0x07CF
    2c4e:	90 91 d0 07 	lds	r25, 0x07D0
    2c52:	9c 01       	movw	r18, r24
    2c54:	21 50       	subi	r18, 0x01	; 1
    2c56:	30 40       	sbci	r19, 0x00	; 0
    2c58:	30 93 d0 07 	sts	0x07D0, r19
    2c5c:	20 93 cf 07 	sts	0x07CF, r18
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	d1 f4       	brne	.+52     	; 0x2c98 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	90 93 d0 07 	sts	0x07D0, r25
    2c6c:	80 93 cf 07 	sts	0x07CF, r24
	ts_state = 2;
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	80 93 d5 07 	sts	0x07D5, r24
	
	if (Confirmed==NOT_CLAIMED)
    2c76:	44 23       	and	r20, r20
    2c78:	91 f0       	breq	.+36     	; 0x2c9e <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    2c7a:	42 30       	cpi	r20, 0x02	; 2
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <_Z22can_instance_timeslicev+0x4c>
    2c7e:	5a c0       	rjmp	.+180    	; 0x2d34 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    2c80:	40 32       	cpi	r20, 0x20	; 32
    2c82:	39 f1       	breq	.+78     	; 0x2cd2 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
    2c84:	40 38       	cpi	r20, 0x80	; 128
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <_Z22can_instance_timeslicev+0x56>
    2c88:	47 c0       	rjmp	.+142    	; 0x2d18 <_Z22can_instance_timeslicev+0xe4>
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    2c8a:	40 34       	cpi	r20, 0x40	; 64
    2c8c:	31 f0       	breq	.+12     	; 0x2c9a <_Z22can_instance_timeslicev+0x66>
    2c8e:	80 91 d5 07 	lds	r24, 0x07D5
    2c92:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
    2c94:	80 93 d5 07 	sts	0x07D5, r24
    2c98:	08 95       	ret
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    2c9a:	86 e8       	ldi	r24, 0x86	; 134
    2c9c:	fb cf       	rjmp	.-10     	; 0x2c94 <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state = 2;
	
	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    2c9e:	83 e0       	ldi	r24, 0x03	; 3
    2ca0:	80 93 d5 07 	sts	0x07D5, r24
		Confirmed = CLAIM_PENDING;
    2ca4:	80 e2       	ldi	r24, 0x20	; 32
    2ca6:	80 93 cd 07 	sts	0x07CD, r24
		can_prep_instance_request( &msg2, rand_instance );
    2caa:	80 ea       	ldi	r24, 0xA0	; 160
    2cac:	97 e0       	ldi	r25, 0x07	; 7
    2cae:	60 91 d1 07 	lds	r22, 0x07D1
    2cb2:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	60 ea       	ldi	r22, 0xA0	; 160
    2cba:	77 e0       	ldi	r23, 0x07	; 7
    2cbc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    2cc0:	8c e2       	ldi	r24, 0x2C	; 44
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	90 93 d3 07 	sts	0x07D3, r25
    2cc8:	80 93 d2 07 	sts	0x07D2, r24
    2ccc:	40 91 cd 07 	lds	r20, 0x07CD
    2cd0:	d4 cf       	rjmp	.-88     	; 0x2c7a <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    2cd2:	84 e0       	ldi	r24, 0x04	; 4
    2cd4:	80 93 d5 07 	sts	0x07D5, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT
		cli();
    2cd8:	f8 94       	cli
		byte restore = CANPAGE;
    2cda:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    2cde:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    2ce2:	80 91 ee 00 	lds	r24, 0x00EE
    2ce6:	86 ff       	sbrs	r24, 6
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    2cea:	80 e8       	ldi	r24, 0x80	; 128
    2cec:	80 93 cd 07 	sts	0x07CD, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    2cf0:	80 91 d2 07 	lds	r24, 0x07D2
    2cf4:	90 91 d3 07 	lds	r25, 0x07D3
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	90 93 d3 07 	sts	0x07D3, r25
    2cfe:	80 93 d2 07 	sts	0x07D2, r24
		if (timeout_10ms_mult == 0)
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	19 f4       	brne	.+6      	; 0x2d0c <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
    2d06:	84 e0       	ldi	r24, 0x04	; 4
    2d08:	80 93 cd 07 	sts	0x07CD, r24
		}
		CANPAGE = restore;
    2d0c:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    2d10:	78 94       	sei
    2d12:	40 91 cd 07 	lds	r20, 0x07CD
    2d16:	b6 cf       	rjmp	.-148    	; 0x2c84 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state = 5;
    2d18:	85 e0       	ldi	r24, 0x05	; 5
    2d1a:	80 93 d5 07 	sts	0x07D5, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	80 93 cd 07 	sts	0x07CD, r24
		cli();  save_configuration();  sei();
    2d24:	f8 94       	cli
    2d26:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_Z18save_configurationv>
    2d2a:	78 94       	sei
    2d2c:	80 91 d5 07 	lds	r24, 0x07D5
    2d30:	80 68       	ori	r24, 0x80	; 128
    2d32:	b0 cf       	rjmp	.-160    	; 0x2c94 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    2d34:	87 e0       	ldi	r24, 0x07	; 7
    2d36:	80 93 d5 07 	sts	0x07D5, r24
		Confirmed = CLAIMED;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	80 93 cd 07 	sts	0x07CD, r24
		can_prep_instance_request( &msg2, MyInstance );
    2d40:	80 ea       	ldi	r24, 0xA0	; 160
    2d42:	97 e0       	ldi	r25, 0x07	; 7
    2d44:	60 91 cc 07 	lds	r22, 0x07CC
    2d48:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	60 ea       	ldi	r22, 0xA0	; 160
    2d50:	77 e0       	ldi	r23, 0x07	; 7
    2d52:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
    2d56:	40 91 cd 07 	lds	r20, 0x07CD
    2d5a:	92 cf       	rjmp	.-220    	; 0x2c80 <_Z22can_instance_timeslicev+0x4c>

00002d5c <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    2d62:	84 e2       	ldi	r24, 0x24	; 36
    2d64:	9c ef       	ldi	r25, 0xFC	; 252
    2d66:	60 91 cc 07 	lds	r22, 0x07CC
    2d6a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    2d6e:	68 83       	st	Y, r22
    2d70:	79 83       	std	Y+1, r23	; 0x01
    2d72:	8a 83       	std	Y+2, r24	; 0x02
    2d74:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    2d76:	80 91 cc 07 	lds	r24, 0x07CC
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    2d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    2d80:	82 60       	ori	r24, 0x02	; 2
    2d82:	8c 83       	std	Y+4, r24	; 0x04
}
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	08 95       	ret

00002d8a <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    2d8e:	90 91 cc 07 	lds	r25, 0x07CC
    2d92:	89 17       	cp	r24, r25
    2d94:	18 f0       	brcs	.+6      	; 0x2d9c <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	80 93 cc 07 	sts	0x07CC, r24
    2d9c:	08 95       	ret

00002d9e <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    2d9e:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	78 2f       	mov	r23, r24
    2da4:	89 2f       	mov	r24, r25
    2da6:	92 2f       	mov	r25, r18
    2da8:	08 95       	ret

00002daa <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    2daa:	38 2f       	mov	r19, r24
    2dac:	26 2f       	mov	r18, r22
    2dae:	87 2f       	mov	r24, r23
    2db0:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    2db2:	63 2f       	mov	r22, r19
    2db4:	72 2f       	mov	r23, r18
    2db6:	08 95       	ret

00002db8 <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    2db8:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    2dba:	08 95       	ret

00002dbc <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    2dbc:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    2dbe:	08 95       	ret

00002dc0 <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    2dc0:	89 2f       	mov	r24, r25
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	08 95       	ret

00002dc6 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    2dc6:	e1 e0       	ldi	r30, 0x01	; 1
    2dc8:	62 17       	cp	r22, r18
    2dca:	73 07       	cpc	r23, r19
    2dcc:	84 07       	cpc	r24, r20
    2dce:	95 07       	cpc	r25, r21
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <_Z5match6idTypeS_+0xe>
    2dd2:	e0 e0       	ldi	r30, 0x00	; 0
}
    2dd4:	8e 2f       	mov	r24, r30
    2dd6:	08 95       	ret

00002dd8 <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	62 13       	cpse	r22, r18
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    2dde:	08 95       	ret

00002de0 <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    2de0:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    2de2:	27 2f       	mov	r18, r23
    2de4:	38 2f       	mov	r19, r24
    2de6:	69 2f       	mov	r22, r25
    2de8:	74 2f       	mov	r23, r20
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	26 17       	cp	r18, r22
    2dee:	37 07       	cpc	r19, r23
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <_Z8id_match6idTypeS_+0x14>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
}
    2df4:	08 95       	ret

00002df6 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	49 13       	cpse	r20, r25
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    2dfc:	08 95       	ret

00002dfe <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    2dfe:	90 93 dc 07 	sts	0x07DC, r25
    2e02:	80 93 db 07 	sts	0x07DB, r24
}
    2e06:	08 95       	ret

00002e08 <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    2e0e:	81 e1       	ldi	r24, 0x11	; 17
    2e10:	9c ef       	ldi	r25, 0xFC	; 252
    2e12:	60 91 cc 07 	lds	r22, 0x07CC
    2e16:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    2e1a:	68 83       	st	Y, r22
    2e1c:	79 83       	std	Y+1, r23	; 0x01
    2e1e:	8a 83       	std	Y+2, r24	; 0x02
    2e20:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    2e22:	86 e0       	ldi	r24, 0x06	; 6
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    2e26:	80 91 cc 07 	lds	r24, 0x07CC
    2e2a:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    2e2c:	80 91 d6 07 	lds	r24, 0x07D6
    2e30:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    2e32:	80 91 d7 07 	lds	r24, 0x07D7
    2e36:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    2e38:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3a:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    2e3c:	88 60       	ori	r24, 0x08	; 8
    2e3e:	8c 83       	std	Y+4, r24	; 0x04
}
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    2e4c:	82 e1       	ldi	r24, 0x12	; 18
    2e4e:	9c ef       	ldi	r25, 0xFC	; 252
    2e50:	60 91 cc 07 	lds	r22, 0x07CC
    2e54:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    2e58:	68 83       	st	Y, r22
    2e5a:	79 83       	std	Y+1, r23	; 0x01
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    2e60:	86 e0       	ldi	r24, 0x06	; 6
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    2e64:	81 e4       	ldi	r24, 0x41	; 65
    2e66:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    2e6c:	9f e0       	ldi	r25, 0x0F	; 15
    2e6e:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    2e70:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    2e72:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    2e78:	8c 60       	ori	r24, 0x0C	; 12
    2e7a:	8c 83       	std	Y+4, r24	; 0x04
}
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    2e88:	83 e1       	ldi	r24, 0x13	; 19
    2e8a:	9c ef       	ldi	r25, 0xFC	; 252
    2e8c:	60 91 cc 07 	lds	r22, 0x07CC
    2e90:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    2e94:	68 83       	st	Y, r22
    2e96:	79 83       	std	Y+1, r23	; 0x01
    2e98:	8a 83       	std	Y+2, r24	; 0x02
    2e9a:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    2e9c:	86 e0       	ldi	r24, 0x06	; 6
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    2ea0:	86 e5       	ldi	r24, 0x56	; 86
    2ea2:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    2ea4:	88 e7       	ldi	r24, 0x78	; 120
    2ea6:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    2ea8:	8c e9       	ldi	r24, 0x9C	; 156
    2eaa:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    2eac:	8e ed       	ldi	r24, 0xDE	; 222
    2eae:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    2eb4:	8a 60       	ori	r24, 0x0A	; 10
    2eb6:	8c 83       	std	Y+4, r24	; 0x04
}
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	08 95       	ret

00002ebe <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    2ec4:	84 e1       	ldi	r24, 0x14	; 20
    2ec6:	9c ef       	ldi	r25, 0xFC	; 252
    2ec8:	60 91 cc 07 	lds	r22, 0x07CC
    2ecc:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    2ed0:	68 83       	st	Y, r22
    2ed2:	79 83       	std	Y+1, r23	; 0x01
    2ed4:	8a 83       	std	Y+2, r24	; 0x02
    2ed6:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    2ed8:	80 91 d8 07 	lds	r24, 0x07D8
    2edc:	8d 83       	std	Y+5, r24	; 0x05
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    2ee0:	de 01       	movw	r26, r28
    2ee2:	16 96       	adiw	r26, 0x06	; 6
    2ee4:	9c 01       	movw	r18, r24
    2ee6:	28 5f       	subi	r18, 0xF8	; 248
    2ee8:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    2eea:	fc 01       	movw	r30, r24
    2eec:	e4 54       	subi	r30, 0x44	; 68
    2eee:	f4 4f       	sbci	r31, 0xF4	; 244
    2ef0:	e4 91       	lpm	r30, Z+
    2ef2:	ed 93       	st	X+, r30
    2ef4:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    2ef6:	82 17       	cp	r24, r18
    2ef8:	93 07       	cpc	r25, r19
    2efa:	b9 f7       	brne	.-18     	; 0x2eea <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    2efc:	8c 81       	ldd	r24, Y+4	; 0x04
    2efe:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    2f00:	82 61       	ori	r24, 0x12	; 18
    2f02:	8c 83       	std	Y+4, r24	; 0x04
}
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	08 95       	ret

00002f0a <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    2f0a:	80 91 dd 07 	lds	r24, 0x07DD
    2f0e:	81 30       	cpi	r24, 0x01	; 1
    2f10:	d9 f0       	breq	.+54     	; 0x2f48 <_Z24can_board_presence_replyv+0x3e>
    2f12:	81 30       	cpi	r24, 0x01	; 1
    2f14:	28 f0       	brcs	.+10     	; 0x2f20 <_Z24can_board_presence_replyv+0x16>
    2f16:	82 30       	cpi	r24, 0x02	; 2
    2f18:	09 f1       	breq	.+66     	; 0x2f5c <_Z24can_board_presence_replyv+0x52>
    2f1a:	83 30       	cpi	r24, 0x03	; 3
    2f1c:	59 f0       	breq	.+22     	; 0x2f34 <_Z24can_board_presence_replyv+0x2a>
    2f1e:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    2f20:	80 ea       	ldi	r24, 0xA0	; 160
    2f22:	97 e0       	ldi	r25, 0x07	; 7
    2f24:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    2f28:	82 e0       	ldi	r24, 0x02	; 2
    2f2a:	60 ea       	ldi	r22, 0xA0	; 160
    2f2c:	77 e0       	ldi	r23, 0x07	; 7
    2f2e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    2f32:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    2f34:	80 ea       	ldi	r24, 0xA0	; 160
    2f36:	97 e0       	ldi	r25, 0x07	; 7
    2f38:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	60 ea       	ldi	r22, 0xA0	; 160
    2f40:	77 e0       	ldi	r23, 0x07	; 7
    2f42:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
    2f46:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    2f48:	80 ea       	ldi	r24, 0xA0	; 160
    2f4a:	97 e0       	ldi	r25, 0x07	; 7
    2f4c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	60 ea       	ldi	r22, 0xA0	; 160
    2f54:	77 e0       	ldi	r23, 0x07	; 7
    2f56:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    2f5a:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    2f5c:	80 ea       	ldi	r24, 0xA0	; 160
    2f5e:	97 e0       	ldi	r25, 0x07	; 7
    2f60:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    2f64:	82 e0       	ldi	r24, 0x02	; 2
    2f66:	60 ea       	ldi	r22, 0xA0	; 160
    2f68:	77 e0       	ldi	r23, 0x07	; 7
    2f6a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    2f6e:	08 95       	ret

00002f70 <_Z19can_board_timeslicev>:
{	
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    2f70:	80 91 d9 07 	lds	r24, 0x07D9
    2f74:	80 fd       	sbrc	r24, 0
    2f76:	56 c0       	rjmp	.+172    	; 0x3024 <_Z19can_board_timeslicev+0xb4>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    2f78:	81 fd       	sbrc	r24, 1
    2f7a:	49 c0       	rjmp	.+146    	; 0x300e <_Z19can_board_timeslicev+0x9e>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    2f7c:	82 fd       	sbrc	r24, 2
    2f7e:	32 c0       	rjmp	.+100    	; 0x2fe4 <_Z19can_board_timeslicev+0x74>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
    2f80:	83 fd       	sbrc	r24, 3
    2f82:	26 c0       	rjmp	.+76     	; 0x2fd0 <_Z19can_board_timeslicev+0x60>
		cli();
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    2f84:	84 fd       	sbrc	r24, 4
    2f86:	1a c0       	rjmp	.+52     	; 0x2fbc <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    2f88:	85 ff       	sbrs	r24, 5
    2f8a:	0d c0       	rjmp	.+26     	; 0x2fa6 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)		
    2f8c:	80 91 3b 01 	lds	r24, 0x013B
    2f90:	90 91 3c 01 	lds	r25, 0x013C
    2f94:	9c 01       	movw	r18, r24
    2f96:	21 50       	subi	r18, 0x01	; 1
    2f98:	30 40       	sbci	r19, 0x00	; 0
    2f9a:	30 93 3c 01 	sts	0x013C, r19
    2f9e:	20 93 3b 01 	sts	0x013B, r18
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <_Z19can_board_timeslicev+0x38>
    2fa6:	08 95       	ret
		{
			cli();
    2fa8:	f8 94       	cli
			can_board_presence_reply( );
    2faa:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    2fae:	80 91 d9 07 	lds	r24, 0x07D9
    2fb2:	8f 7d       	andi	r24, 0xDF	; 223
    2fb4:	80 93 d9 07 	sts	0x07D9, r24
			sei();
    2fb8:	78 94       	sei
    2fba:	08 95       	ret
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    2fbc:	f8 94       	cli
		save_cal();
    2fbe:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_Z8save_calv>
		System_Send_Status &= (~0x10);
    2fc2:	80 91 d9 07 	lds	r24, 0x07D9
    2fc6:	8f 7e       	andi	r24, 0xEF	; 239
    2fc8:	80 93 d9 07 	sts	0x07D9, r24
		sei();
    2fcc:	78 94       	sei
    2fce:	dc cf       	rjmp	.-72     	; 0x2f88 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
		cli();
    2fd0:	f8 94       	cli
		save_configuration();
    2fd2:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_Z18save_configurationv>
		System_Send_Status &= (~0x08);
    2fd6:	80 91 d9 07 	lds	r24, 0x07D9
    2fda:	87 7f       	andi	r24, 0xF7	; 247
    2fdc:	80 93 d9 07 	sts	0x07D9, r24
		sei();
    2fe0:	78 94       	sei
    2fe2:	d0 cf       	rjmp	.-96     	; 0x2f84 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    2fe4:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    2fe6:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    2fea:	80 ea       	ldi	r24, 0xA0	; 160
    2fec:	97 e0       	ldi	r25, 0x07	; 7
    2fee:	60 91 cc 07 	lds	r22, 0x07CC
    2ff2:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	60 ea       	ldi	r22, 0xA0	; 160
    2ffa:	77 e0       	ldi	r23, 0x07	; 7
    2ffc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    3000:	80 91 d9 07 	lds	r24, 0x07D9
    3004:	8b 7f       	andi	r24, 0xFB	; 251
    3006:	80 93 d9 07 	sts	0x07D9, r24
		sei();
    300a:	78 94       	sei
    300c:	b9 cf       	rjmp	.-142    	; 0x2f80 <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	60 ea       	ldi	r22, 0xA0	; 160
    3012:	77 e0       	ldi	r23, 0x07	; 7
    3014:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    3018:	80 91 d9 07 	lds	r24, 0x07D9
    301c:	8d 7f       	andi	r24, 0xFD	; 253
    301e:	80 93 d9 07 	sts	0x07D9, r24
    3022:	ac cf       	rjmp	.-168    	; 0x2f7c <_Z19can_board_timeslicev+0xc>
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	61 e9       	ldi	r22, 0x91	; 145
    3028:	77 e0       	ldi	r23, 0x07	; 7
    302a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    302e:	80 91 d9 07 	lds	r24, 0x07D9
    3032:	8e 7f       	andi	r24, 0xFE	; 254
    3034:	80 93 d9 07 	sts	0x07D9, r24
    3038:	9f cf       	rjmp	.-194    	; 0x2f78 <_Z19can_board_timeslicev+0x8>

0000303a <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    3040:	87 e2       	ldi	r24, 0x27	; 39
    3042:	9c ef       	ldi	r25, 0xFC	; 252
    3044:	60 91 cc 07 	lds	r22, 0x07CC
    3048:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    304c:	68 83       	st	Y, r22
    304e:	79 83       	std	Y+1, r23	; 0x01
    3050:	8a 83       	std	Y+2, r24	; 0x02
    3052:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    3054:	80 91 4e 08 	lds	r24, 0x084E
    3058:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    305a:	80 91 4f 08 	lds	r24, 0x084F
    305e:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    3060:	80 91 50 08 	lds	r24, 0x0850
    3064:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    3066:	80 91 51 08 	lds	r24, 0x0851
    306a:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    306c:	8c 81       	ldd	r24, Y+4	; 0x04
    306e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    3070:	88 60       	ori	r24, 0x08	; 8
    3072:	8c 83       	std	Y+4, r24	; 0x04
}
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	08 95       	ret

0000307a <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    3080:	85 e1       	ldi	r24, 0x15	; 21
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	60 91 cc 07 	lds	r22, 0x07CC
    3088:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    308c:	9b 01       	movw	r18, r22
    308e:	ac 01       	movw	r20, r24
    3090:	68 81       	ld	r22, Y
    3092:	79 81       	ldd	r23, Y+1	; 0x01
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
    309c:	88 23       	and	r24, r24
    309e:	39 f0       	breq	.+14     	; 0x30ae <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
    30a0:	ce 01       	movw	r24, r28
    30a2:	0e 94 87 1b 	call	0x370e	; 0x370e <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    30ae:	85 e1       	ldi	r24, 0x15	; 21
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	6f ef       	ldi	r22, 0xFF	; 255
    30b4:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    30b8:	9b 01       	movw	r18, r22
    30ba:	ac 01       	movw	r20, r24
    30bc:	68 81       	ld	r22, Y
    30be:	79 81       	ldd	r23, Y+1	; 0x01
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
    30c2:	9b 81       	ldd	r25, Y+3	; 0x03
    30c4:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    30c8:	88 23       	and	r24, r24
    30ca:	51 f7       	brne	.-44     	; 0x30a0 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
		return TRUE;
	} else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    30cc:	80 e1       	ldi	r24, 0x10	; 16
    30ce:	9c ef       	ldi	r25, 0xFC	; 252
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    30d6:	9b 01       	movw	r18, r22
    30d8:	ac 01       	movw	r20, r24
    30da:	68 81       	ld	r22, Y
    30dc:	79 81       	ldd	r23, Y+1	; 0x01
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Z8id_match6idTypeS_>
    30e6:	88 23       	and	r24, r24
    30e8:	91 f0       	breq	.+36     	; 0x310e <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.  
			Need to delay by the instance number of timeslices.  
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    30ea:	80 91 d9 07 	lds	r24, 0x07D9
    30ee:	80 62       	ori	r24, 0x20	; 32
    30f0:	80 93 d9 07 	sts	0x07D9, r24
		Board_presence_response_type = mMsg->data[0];
    30f4:	8d 81       	ldd	r24, Y+5	; 0x05
    30f6:	80 93 dd 07 	sts	0x07DD, r24
		Board_presence_delay 		 = MyInstance;
    30fa:	80 91 cc 07 	lds	r24, 0x07CC
    30fe:	80 93 3b 01 	sts	0x013B, r24
    3102:	10 92 3c 01 	sts	0x013C, r1
		return TRUE;
    3106:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    310e:	82 e2       	ldi	r24, 0x22	; 34
    3110:	9c ef       	ldi	r25, 0xFC	; 252
    3112:	60 91 cc 07 	lds	r22, 0x07CC
    3116:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    311a:	9b 01       	movw	r18, r22
    311c:	ac 01       	movw	r20, r24
    311e:	68 81       	ld	r22, Y
    3120:	79 81       	ldd	r23, Y+1	; 0x01
    3122:	8a 81       	ldd	r24, Y+2	; 0x02
    3124:	9b 81       	ldd	r25, Y+3	; 0x03
    3126:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
    312a:	88 23       	and	r24, r24
    312c:	f1 f0       	breq	.+60     	; 0x316a <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    312e:	8d 81       	ldd	r24, Y+5	; 0x05
    3130:	84 ff       	sbrs	r24, 4
    3132:	14 c0       	rjmp	.+40     	; 0x315c <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 ); 
    3134:	81 e9       	ldi	r24, 0x91	; 145
    3136:	97 e0       	ldi	r25, 0x07	; 7
    3138:	0e 94 1d 18 	call	0x303a	; 0x303a <_Z18can_prep_configureP4sCAN>
			System_Send_Status=1;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	80 93 d9 07 	sts	0x07D9, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    3142:	e0 91 db 07 	lds	r30, 0x07DB
    3146:	f0 91 dc 07 	lds	r31, 0x07DC
    314a:	30 97       	sbiw	r30, 0x00	; 0
    314c:	19 f1       	breq	.+70     	; 0x3194 <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	8f 70       	andi	r24, 0x0F	; 15
    3152:	09 95       	icall
		return TRUE;
    3154:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 ); 
			System_Send_Status=1;
		} else {
			can_parse_configure_request( mMsg );	// in configuration.c
    315c:	ce 01       	movw	r24, r28
    315e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    3162:	88 e0       	ldi	r24, 0x08	; 8
    3164:	80 93 d9 07 	sts	0x07D9, r24
    3168:	ec cf       	rjmp	.-40     	; 0x3142 <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    316a:	81 e2       	ldi	r24, 0x21	; 33
    316c:	9c ef       	ldi	r25, 0xFC	; 252
    316e:	60 91 cc 07 	lds	r22, 0x07CC
    3172:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    3176:	9b 01       	movw	r18, r22
    3178:	ac 01       	movw	r20, r24
    317a:	68 81       	ld	r22, Y
    317c:	79 81       	ldd	r23, Y+1	; 0x01
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	9b 81       	ldd	r25, Y+3	; 0x03
    3182:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
    3186:	88 23       	and	r24, r24
    3188:	39 f0       	breq	.+14     	; 0x3198 <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    318a:	88 e0       	ldi	r24, 0x08	; 8
    318c:	80 93 d9 07 	sts	0x07D9, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	8a cf       	rjmp	.-236    	; 0x30a8 <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	88 cf       	rjmp	.-240    	; 0x30a8 <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    3198:	81 e2       	ldi	r24, 0x21	; 33
    319a:	9c ef       	ldi	r25, 0xFC	; 252
    319c:	6f ef       	ldi	r22, 0xFF	; 255
    319e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    31a2:	9b 01       	movw	r18, r22
    31a4:	ac 01       	movw	r20, r24
    31a6:	68 81       	ld	r22, Y
    31a8:	79 81       	ldd	r23, Y+1	; 0x01
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	9b 81       	ldd	r25, Y+3	; 0x03
    31ae:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    31b2:	88 23       	and	r24, r24
    31b4:	51 f7       	brne	.-44     	; 0x318a <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    31b6:	85 e2       	ldi	r24, 0x25	; 37
    31b8:	9c ef       	ldi	r25, 0xFC	; 252
    31ba:	60 91 cc 07 	lds	r22, 0x07CC
    31be:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    31c2:	9b 01       	movw	r18, r22
    31c4:	ac 01       	movw	r20, r24
    31c6:	68 81       	ld	r22, Y
    31c8:	79 81       	ldd	r23, Y+1	; 0x01
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	9b 81       	ldd	r25, Y+3	; 0x03
    31ce:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
    31d2:	88 23       	and	r24, r24
    31d4:	49 f5       	brne	.+82     	; 0x3228 <_Z23can_board_msg_responderP4sCAN+0x1ae>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    31d6:	86 e2       	ldi	r24, 0x26	; 38
    31d8:	9c ef       	ldi	r25, 0xFC	; 252
    31da:	60 91 cc 07 	lds	r22, 0x07CC
    31de:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    31e2:	9b 01       	movw	r18, r22
    31e4:	ac 01       	movw	r20, r24
    31e6:	68 81       	ld	r22, Y
    31e8:	79 81       	ldd	r23, Y+1	; 0x01
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	9b 81       	ldd	r25, Y+3	; 0x03
    31ee:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
    31f2:	88 23       	and	r24, r24
    31f4:	61 f1       	breq	.+88     	; 0x324e <_Z23can_board_msg_responderP4sCAN+0x1d4>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    31f6:	8c 81       	ldd	r24, Y+4	; 0x04
    31f8:	8e 71       	andi	r24, 0x1E	; 30
    31fa:	84 30       	cpi	r24, 0x04	; 4
    31fc:	59 f6       	brne	.-106    	; 0x3194 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    31fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	8e 81       	ldd	r24, Y+6	; 0x06
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	82 2b       	or	r24, r18
    3208:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    320a:	22 e1       	ldi	r18, 0x12	; 18
    320c:	84 33       	cpi	r24, 0x34	; 52
    320e:	92 07       	cpc	r25, r18
    3210:	09 f6       	brne	.-126    	; 0x3194 <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    3212:	85 e5       	ldi	r24, 0x55	; 85
    3214:	80 93 d4 07 	sts	0x07D4, r24
				init_complete = FALSE;
    3218:	10 92 ce 07 	sts	0x07CE, r1
				Confirmed     = NOT_CLAIMED;
    321c:	10 92 cd 07 	sts	0x07CD, r1
				can_instance_init();		// This fires off the sequencing right away.
    3220:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	40 cf       	rjmp	.-384    	; 0x30a8 <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	80 93 cd 07 	sts	0x07CD, r24
		MyInstance = mMsg->data[0];
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	80 93 cc 07 	sts	0x07CC, r24
		save_configuration();
    3234:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_Z18save_configurationv>
   		can_remove_instance_from_filter( 1 );
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    323e:	60 91 cc 07 	lds	r22, 0x07CC
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	0e 94 bb 11 	call	0x2376	; 0x2376 <_Z26can_add_instance_to_filterht>
		return TRUE;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	2d cf       	rjmp	.-422    	; 0x30a8 <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    324e:	86 e2       	ldi	r24, 0x26	; 38
    3250:	9c ef       	ldi	r25, 0xFC	; 252
    3252:	6f ef       	ldi	r22, 0xFF	; 255
    3254:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    3258:	9b 01       	movw	r18, r22
    325a:	ac 01       	movw	r20, r24
    325c:	68 81       	ld	r22, Y
    325e:	79 81       	ldd	r23, Y+1	; 0x01
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_Z5match6idTypeS_>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    3268:	88 23       	and	r24, r24
    326a:	29 f6       	brne	.-118    	; 0x31f6 <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    326c:	83 e2       	ldi	r24, 0x23	; 35
    326e:	9c ef       	ldi	r25, 0xFC	; 252
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_Z14create_CAN_eidth>
    3276:	9b 01       	movw	r18, r22
    3278:	ac 01       	movw	r20, r24
    327a:	68 81       	ld	r22, Y
    327c:	79 81       	ldd	r23, Y+1	; 0x01
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	9b 81       	ldd	r25, Y+3	; 0x03
    3282:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Z8id_match6idTypeS_>
    3286:	88 23       	and	r24, r24
    3288:	09 f4       	brne	.+2      	; 0x328c <_Z23can_board_msg_responderP4sCAN+0x212>
    328a:	0e cf       	rjmp	.-484    	; 0x30a8 <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    328c:	9d 81       	ldd	r25, Y+5	; 0x05
    328e:	80 91 cc 07 	lds	r24, 0x07CC
    3292:	98 17       	cp	r25, r24
    3294:	09 f0       	breq	.+2      	; 0x3298 <_Z23can_board_msg_responderP4sCAN+0x21e>
    3296:	7e cf       	rjmp	.-260    	; 0x3194 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    3298:	80 91 cd 07 	lds	r24, 0x07CD
    329c:	80 32       	cpi	r24, 0x20	; 32
    329e:	41 f0       	breq	.+16     	; 0x32b0 <_Z23can_board_msg_responderP4sCAN+0x236>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    32a0:	88 23       	and	r24, r24
    32a2:	09 f0       	breq	.+2      	; 0x32a6 <_Z23can_board_msg_responderP4sCAN+0x22c>
    32a4:	77 cf       	rjmp	.-274    	; 0x3194 <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    32a6:	ce 01       	movw	r24, r28
    32a8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	fc ce       	rjmp	.-520    	; 0x30a8 <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    32b0:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    32b4:	80 e3       	ldi	r24, 0x30	; 48
    32b6:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    32ba:	80 91 ef 00 	lds	r24, 0x00EF
    32be:	8f 73       	andi	r24, 0x3F	; 63
    32c0:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    32c4:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    32c8:	10 92 cd 07 	sts	0x07CD, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    32cc:	ce 01       	movw	r24, r28
    32ce:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	e9 ce       	rjmp	.-558    	; 0x30a8 <_Z23can_board_msg_responderP4sCAN+0x2e>

000032d6 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	7b 01       	movw	r14, r22
    32e4:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    32e6:	c0 e0       	ldi	r28, 0x00	; 0
    32e8:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    32ea:	ce 01       	movw	r24, r28
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	8c 0f       	add	r24, r28
    32f2:	9d 1f       	adc	r25, r29
    32f4:	fc 01       	movw	r30, r24
    32f6:	ee 0f       	add	r30, r30
    32f8:	ff 1f       	adc	r31, r31
    32fa:	ee 0f       	add	r30, r30
    32fc:	ff 1f       	adc	r31, r31
    32fe:	e8 0f       	add	r30, r24
    3300:	f9 1f       	adc	r31, r25
    3302:	e2 52       	subi	r30, 0x22	; 34
    3304:	f8 4f       	sbci	r31, 0xF8	; 248
    3306:	20 81       	ld	r18, Z
    3308:	31 81       	ldd	r19, Z+1	; 0x01
    330a:	42 81       	ldd	r20, Z+2	; 0x02
    330c:	53 81       	ldd	r21, Z+3	; 0x03
    330e:	c8 01       	movw	r24, r16
    3310:	b7 01       	movw	r22, r14
    3312:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Z8id_match6idTypeS_>
    3316:	88 23       	and	r24, r24
    3318:	61 f4       	brne	.+24     	; 0x3332 <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    331a:	21 96       	adiw	r28, 0x01	; 1
    331c:	c6 30       	cpi	r28, 0x06	; 6
    331e:	d1 05       	cpc	r29, r1
    3320:	21 f7       	brne	.-56     	; 0x32ea <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    3322:	8f ef       	ldi	r24, 0xFF	; 255
}
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16
    332c:	ff 90       	pop	r15
    332e:	ef 90       	pop	r14
    3330:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    3332:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	08 95       	ret

00003342 <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    3342:	28 2f       	mov	r18, r24
    3344:	39 2f       	mov	r19, r25
    3346:	d9 01       	movw	r26, r18
    3348:	86 2f       	mov	r24, r22
    334a:	97 2f       	mov	r25, r23
    334c:	fc 01       	movw	r30, r24
    334e:	8f e0       	ldi	r24, 0x0F	; 15
    3350:	01 90       	ld	r0, Z+
    3352:	0d 92       	st	X+, r0
    3354:	81 50       	subi	r24, 0x01	; 1
    3356:	e1 f7       	brne	.-8      	; 0x3350 <_Z12copy_can_msgP4sCANS0_+0xe>
}
    3358:	08 95       	ret

0000335a <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    335a:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    335c:	80 91 38 08 	lds	r24, 0x0838
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	9c 01       	movw	r18, r24
    3364:	22 0f       	add	r18, r18
    3366:	33 1f       	adc	r19, r19
    3368:	28 0f       	add	r18, r24
    336a:	39 1f       	adc	r19, r25
    336c:	c9 01       	movw	r24, r18
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	82 0f       	add	r24, r18
    3378:	93 1f       	adc	r25, r19
    337a:	82 52       	subi	r24, 0x22	; 34
    337c:	98 4f       	sbci	r25, 0xF8	; 248
    337e:	0e 94 a1 19 	call	0x3342	; 0x3342 <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    3382:	80 91 38 08 	lds	r24, 0x0838
    3386:	8f 5f       	subi	r24, 0xFF	; 255
    3388:	80 93 38 08 	sts	0x0838, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    338c:	86 30       	cpi	r24, 0x06	; 6
    338e:	10 f0       	brcs	.+4      	; 0x3394 <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    3390:	10 92 38 08 	sts	0x0838, r1
    3394:	08 95       	ret

00003396 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    339c:	68 81       	ld	r22, Y
    339e:	79 81       	ldd	r23, Y+1	; 0x01
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    33a8:	8f 3f       	cpi	r24, 0xFF	; 255
    33aa:	a9 f0       	breq	.+42     	; 0x33d6 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	9c 01       	movw	r18, r24
    33b0:	22 0f       	add	r18, r18
    33b2:	33 1f       	adc	r19, r19
    33b4:	28 0f       	add	r18, r24
    33b6:	39 1f       	adc	r19, r25
    33b8:	c9 01       	movw	r24, r18
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	82 0f       	add	r24, r18
    33c4:	93 1f       	adc	r25, r19
    33c6:	82 52       	subi	r24, 0x22	; 34
    33c8:	98 4f       	sbci	r25, 0xF8	; 248
    33ca:	be 01       	movw	r22, r28
    33cc:	0e 94 a1 19 	call	0x3342	; 0x3342 <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    33d6:	80 91 38 08 	lds	r24, 0x0838
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	9c 01       	movw	r18, r24
    33de:	22 0f       	add	r18, r18
    33e0:	33 1f       	adc	r19, r19
    33e2:	28 0f       	add	r18, r24
    33e4:	39 1f       	adc	r19, r25
    33e6:	c9 01       	movw	r24, r18
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	82 0f       	add	r24, r18
    33f2:	93 1f       	adc	r25, r19
    33f4:	82 52       	subi	r24, 0x22	; 34
    33f6:	98 4f       	sbci	r25, 0xF8	; 248
    33f8:	be 01       	movw	r22, r28
    33fa:	0e 94 a1 19 	call	0x3342	; 0x3342 <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    33fe:	80 91 38 08 	lds	r24, 0x0838
    3402:	8f 5f       	subi	r24, 0xFF	; 255
    3404:	80 93 38 08 	sts	0x0838, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    3408:	86 30       	cpi	r24, 0x06	; 6
    340a:	10 f3       	brcs	.-60     	; 0x33d0 <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    340c:	10 92 38 08 	sts	0x0838, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

00003416 <_Z12QueueMessageP4sCAN>:
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    3416:	20 91 51 08 	lds	r18, 0x0851
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    341a:	21 fd       	sbrc	r18, 1
    341c:	03 c0       	rjmp	.+6      	; 0x3424 <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    341e:	0e 94 cb 19 	call	0x3396	; 0x3396 <_Z17addMailboxHistoryP4sCAN>
    3422:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    3424:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z16addNormalHistoryP4sCAN>
    3428:	08 95       	ret

0000342a <_Z15RetrieveMessagev>:
    342a:	80 91 51 08 	lds	r24, 0x0851
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    342e:	81 ff       	sbrs	r24, 1
    3430:	1b c0       	rjmp	.+54     	; 0x3468 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    3432:	20 91 39 08 	lds	r18, 0x0839
    3436:	80 91 38 08 	lds	r24, 0x0838
    343a:	28 17       	cp	r18, r24
    343c:	c9 f0       	breq	.+50     	; 0x3470 <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    343e:	82 2f       	mov	r24, r18
    3440:	8f 5f       	subi	r24, 0xFF	; 255
    3442:	80 93 39 08 	sts	0x0839, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    3446:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    3448:	c9 01       	movw	r24, r18
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	82 0f       	add	r24, r18
    3450:	93 1f       	adc	r25, r19
    3452:	9c 01       	movw	r18, r24
    3454:	22 0f       	add	r18, r18
    3456:	33 1f       	adc	r19, r19
    3458:	22 0f       	add	r18, r18
    345a:	33 1f       	adc	r19, r19
    345c:	28 0f       	add	r18, r24
    345e:	39 1f       	adc	r19, r25
    3460:	22 52       	subi	r18, 0x22	; 34
    3462:	38 4f       	sbci	r19, 0xF8	; 248
		}
	}
	return NULL;
}
    3464:	c9 01       	movw	r24, r18
    3466:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
}
    346c:	c9 01       	movw	r24, r18
    346e:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    3470:	10 92 39 08 	sts	0x0839, r1
			RxHead = 0;
    3474:	10 92 38 08 	sts	0x0838, r1
			return NULL;
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	f3 cf       	rjmp	.-26     	; 0x3464 <_Z15RetrieveMessagev+0x3a>

0000347e <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	ac 01       	movw	r20, r24
    3482:	44 0f       	add	r20, r20
    3484:	55 1f       	adc	r21, r21
    3486:	48 0f       	add	r20, r24
    3488:	59 1f       	adc	r21, r25
    348a:	9a 01       	movw	r18, r20
    348c:	22 0f       	add	r18, r18
    348e:	33 1f       	adc	r19, r19
    3490:	22 0f       	add	r18, r18
    3492:	33 1f       	adc	r19, r19
    3494:	24 0f       	add	r18, r20
    3496:	35 1f       	adc	r19, r21
    3498:	22 52       	subi	r18, 0x22	; 34
    349a:	38 4f       	sbci	r19, 0xF8	; 248
}
    349c:	c9 01       	movw	r24, r18
    349e:	08 95       	ret

000034a0 <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    34a0:	0e 94 15 1a 	call	0x342a	; 0x342a <_Z15RetrieveMessagev>
	if (msg)
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	21 f0       	breq	.+8      	; 0x34b0 <_Z15CAN_Q_Timeslicev+0x10>
	{
		SET_LED_2();
    34a8:	5f 9a       	sbi	0x0b, 7	; 11
    34aa:	20 91 51 08 	lds	r18, 0x0851
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    34ae:	21 ff       	sbrs	r18, 1
    34b0:	08 95       	ret
			can_file_message( msg );
    34b2:	0e 94 7c 07 	call	0xef8	; 0xef8 <_Z16can_file_messageP4sCAN>
    34b6:	08 95       	ret

000034b8 <__vector_27>:
/**************** VARIABLES *************************************/
word LightSensorSample [2];
byte next_channel = 0;

ISR ( ADC_vect )
{
    34b8:	1f 92       	push	r1
    34ba:	0f 92       	push	r0
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	0f 92       	push	r0
    34c0:	11 24       	eor	r1, r1
    34c2:	2f 93       	push	r18
    34c4:	3f 93       	push	r19
    34c6:	8f 93       	push	r24
    34c8:	9f 93       	push	r25
	word result = ADCL;
    34ca:	20 91 78 00 	lds	r18, 0x0078
	result      += (ADCH<<8);
    34ce:	30 91 79 00 	lds	r19, 0x0079
	switch(next_channel)
    34d2:	80 91 3e 08 	lds	r24, 0x083E
    34d6:	88 23       	and	r24, r24
    34d8:	21 f5       	brne	.+72     	; 0x3522 <__vector_27+0x6a>
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
    34da:	80 91 3c 08 	lds	r24, 0x083C
    34de:	90 91 3d 08 	lds	r25, 0x083D
    34e2:	90 93 3b 08 	sts	0x083B, r25
    34e6:	80 93 3a 08 	sts	0x083A, r24
byte next_channel = 0;

ISR ( ADC_vect )
{
	word result = ADCL;
	result      += (ADCH<<8);
    34ea:	93 2f       	mov	r25, r19
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	82 0f       	add	r24, r18
    34f0:	91 1d       	adc	r25, r1
	switch(next_channel)
	{ 
	case 0:	LightSensorSample[0] = LightSensorSample[1];
			LightSensorSample[1] = result;
    34f2:	90 93 3d 08 	sts	0x083D, r25
    34f6:	80 93 3c 08 	sts	0x083C, r24
			next_channel = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	80 93 3e 08 	sts	0x083E, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
			ADMUX = POT_MUX;		// Select POT	
    3500:	82 e4       	ldi	r24, 0x42	; 66
    3502:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    3506:	80 91 7a 00 	lds	r24, 0x007A
    350a:	80 64       	ori	r24, 0x40	; 64
    350c:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    3510:	9f 91       	pop	r25
    3512:	8f 91       	pop	r24
    3514:	3f 91       	pop	r19
    3516:	2f 91       	pop	r18
    3518:	0f 90       	pop	r0
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;
			
	default: 			
			next_channel = 0;
    3522:	10 92 3e 08 	sts	0x083E, r1
    3526:	ec cf       	rjmp	.-40     	; 0x3500 <__vector_27+0x48>

00003528 <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    3528:	ea e7       	ldi	r30, 0x7A	; 122
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	88 7f       	andi	r24, 0xF8	; 248
    3530:	80 83       	st	Z, r24
}
    3532:	08 95       	ret

00003534 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83;
    3534:	8b e9       	ldi	r24, 0x9B	; 155
    3536:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    353a:	ee e7       	ldi	r30, 0x7E	; 126
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	84 60       	ori	r24, 0x04	; 4
    3542:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    3544:	ef e7       	ldi	r30, 0x7F	; 127
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	83 60       	ori	r24, 0x03	; 3
    354c:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    354e:	80 ea       	ldi	r24, 0xA0	; 160
    3550:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    3554:	82 e4       	ldi	r24, 0x42	; 66
    3556:	80 93 7c 00 	sts	0x007C, r24
}
    355a:	08 95       	ret

0000355c <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    355c:	82 e4       	ldi	r24, 0x42	; 66
    355e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    3562:	ea e7       	ldi	r30, 0x7A	; 122
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	80 64       	ori	r24, 0x40	; 64
    356a:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    356c:	08 95       	ret

0000356e <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    356e:	10 92 40 08 	sts	0x0840, r1
	System_LED_Control.pattern    = 0;
    3572:	10 92 3f 08 	sts	0x083F, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    3576:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    3578:	57 9a       	sbi	0x0a, 7	; 10
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    357a:	54 9a       	sbi	0x0a, 4	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    357c:	53 9a       	sbi	0x0a, 3	; 10
#endif
  	RESET_LED_1();
    357e:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_2();
    3580:	5f 98       	cbi	0x0b, 7	; 11
	RESET_LED_3();
    3582:	5c 98       	cbi	0x0b, 4	; 11
	RESET_LED_4();
    3584:	5b 98       	cbi	0x0b, 3	; 11
}
    3586:	08 95       	ret

00003588 <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    3588:	82 30       	cpi	r24, 0x02	; 2
    358a:	69 f0       	breq	.+26     	; 0x35a6 <_Z16protected_led_onh+0x1e>
    358c:	83 30       	cpi	r24, 0x03	; 3
    358e:	28 f0       	brcs	.+10     	; 0x359a <_Z16protected_led_onh+0x12>
    3590:	83 30       	cpi	r24, 0x03	; 3
    3592:	59 f0       	breq	.+22     	; 0x35aa <_Z16protected_led_onh+0x22>
    3594:	84 30       	cpi	r24, 0x04	; 4
    3596:	29 f0       	breq	.+10     	; 0x35a2 <_Z16protected_led_onh+0x1a>
    3598:	08 95       	ret
    359a:	81 30       	cpi	r24, 0x01	; 1
    359c:	e9 f7       	brne	.-6      	; 0x3598 <_Z16protected_led_onh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
    359e:	5e 9a       	sbi	0x0b, 6	; 11
    35a0:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    35a2:	5b 9a       	sbi	0x0b, 3	; 11
    35a4:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
    35a6:	5f 9a       	sbi	0x0b, 7	; 11
    35a8:	08 95       	ret
   case 3:  SET_LED_3();  break;
    35aa:	5c 9a       	sbi	0x0b, 4	; 11
    35ac:	08 95       	ret

000035ae <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    35ae:	82 30       	cpi	r24, 0x02	; 2
    35b0:	69 f0       	breq	.+26     	; 0x35cc <_Z17protected_led_offh+0x1e>
    35b2:	83 30       	cpi	r24, 0x03	; 3
    35b4:	28 f0       	brcs	.+10     	; 0x35c0 <_Z17protected_led_offh+0x12>
    35b6:	83 30       	cpi	r24, 0x03	; 3
    35b8:	59 f0       	breq	.+22     	; 0x35d0 <_Z17protected_led_offh+0x22>
    35ba:	84 30       	cpi	r24, 0x04	; 4
    35bc:	29 f0       	breq	.+10     	; 0x35c8 <_Z17protected_led_offh+0x1a>
    35be:	08 95       	ret
    35c0:	81 30       	cpi	r24, 0x01	; 1
    35c2:	e9 f7       	brne	.-6      	; 0x35be <_Z17protected_led_offh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
    35c4:	5e 98       	cbi	0x0b, 6	; 11
    35c6:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    35c8:	5b 98       	cbi	0x0b, 3	; 11
    35ca:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
    35cc:	5f 98       	cbi	0x0b, 7	; 11
    35ce:	08 95       	ret
   case 3:  RESET_LED_3();  break;
    35d0:	5c 98       	cbi	0x0b, 4	; 11
    35d2:	08 95       	ret

000035d4 <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    35d4:	90 91 40 08 	lds	r25, 0x0840
    35d8:	99 23       	and	r25, r25
    35da:	21 f0       	breq	.+8      	; 0x35e4 <_Z11strobe_ledsh+0x10>
    35dc:	92 30       	cpi	r25, 0x02	; 2
    35de:	11 f0       	breq	.+4      	; 0x35e4 <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	08 95       	ret
    35e4:	90 91 40 01 	lds	r25, 0x0140
    35e8:	29 2f       	mov	r18, r25
    35ea:	21 50       	subi	r18, 0x01	; 1
    35ec:	20 93 40 01 	sts	0x0140, r18
    35f0:	99 23       	and	r25, r25
    35f2:	b1 f7       	brne	.-20     	; 0x35e0 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    35f4:	9a e0       	ldi	r25, 0x0A	; 10
    35f6:	90 93 40 01 	sts	0x0140, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    35fa:	88 23       	and	r24, r24
    35fc:	79 f0       	breq	.+30     	; 0x361c <_Z11strobe_ledsh+0x48>
    35fe:	80 91 3f 01 	lds	r24, 0x013F
    3602:	0e 94 c4 1a 	call	0x3588	; 0x3588 <_Z16protected_led_onh>
		i++;
    3606:	80 91 3f 01 	lds	r24, 0x013F
    360a:	8f 5f       	subi	r24, 0xFF	; 255
    360c:	80 93 3f 01 	sts	0x013F, r24
		if (i>=5)  { i=1; return TRUE; }
    3610:	85 30       	cpi	r24, 0x05	; 5
    3612:	78 f0       	brcs	.+30     	; 0x3632 <_Z11strobe_ledsh+0x5e>
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	80 93 3f 01 	sts	0x013F, r24
    361a:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    361c:	80 91 3f 01 	lds	r24, 0x013F
    3620:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_Z17protected_led_offh>
		i++;
    3624:	80 91 3f 01 	lds	r24, 0x013F
    3628:	8f 5f       	subi	r24, 0xFF	; 255
    362a:	80 93 3f 01 	sts	0x013F, r24
		if (i>=5)  { i=1; return TRUE; }
    362e:	85 30       	cpi	r24, 0x05	; 5
    3630:	88 f7       	brcc	.-30     	; 0x3614 <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    3632:	80 e0       	ldi	r24, 0x00	; 0
}
    3634:	08 95       	ret

00003636 <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    3636:	90 91 40 08 	lds	r25, 0x0840
    363a:	91 11       	cpse	r25, r1
    363c:	08 95       	ret
	protected_led_on(mindex);
    363e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <_Z16protected_led_onh>
    3642:	08 95       	ret

00003644 <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    3644:	90 91 40 08 	lds	r25, 0x0840
    3648:	91 11       	cpse	r25, r1
    364a:	08 95       	ret
	protected_led_off(mindex);
    364c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_Z17protected_led_offh>
    3650:	08 95       	ret

00003652 <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    3652:	66 23       	and	r22, r22
    3654:	19 f4       	brne	.+6      	; 0x365c <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    3656:	0e 94 22 1b 	call	0x3644	; 0x3644 <_Z7led_offh>
    365a:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    365c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_Z6led_onh>
    3660:	08 95       	ret

00003662 <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    3662:	90 91 40 08 	lds	r25, 0x0840
    3666:	91 11       	cpse	r25, r1
    3668:	08 95       	ret
	protected_set_led( mindex, value );
    366a:	0e 94 29 1b 	call	0x3652	; 0x3652 <_Z17protected_set_ledhh>
    366e:	08 95       	ret

00003670 <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    3670:	66 23       	and	r22, r22
    3672:	69 f0       	breq	.+26     	; 0x368e <_Z19protected_show_bytehh+0x1e>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    3674:	87 ff       	sbrs	r24, 7
    3676:	20 c0       	rjmp	.+64     	; 0x36b8 <_Z19protected_show_bytehh+0x48>
    3678:	5b 9a       	sbi	0x0b, 3	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    367a:	86 ff       	sbrs	r24, 6
    367c:	20 c0       	rjmp	.+64     	; 0x36be <_Z19protected_show_bytehh+0x4e>
    367e:	5c 9a       	sbi	0x0b, 4	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    3680:	85 ff       	sbrs	r24, 5
    3682:	20 c0       	rjmp	.+64     	; 0x36c4 <_Z19protected_show_bytehh+0x54>
    3684:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    3686:	84 fd       	sbrc	r24, 4
    3688:	0d c0       	rjmp	.+26     	; 0x36a4 <_Z19protected_show_bytehh+0x34>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    368a:	5e 98       	cbi	0x0b, 6	; 11
    368c:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    368e:	83 ff       	sbrs	r24, 3
    3690:	0b c0       	rjmp	.+22     	; 0x36a8 <_Z19protected_show_bytehh+0x38>
    3692:	5b 9a       	sbi	0x0b, 3	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    3694:	82 ff       	sbrs	r24, 2
    3696:	0b c0       	rjmp	.+22     	; 0x36ae <_Z19protected_show_bytehh+0x3e>
    3698:	5c 9a       	sbi	0x0b, 4	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    369a:	81 ff       	sbrs	r24, 1
    369c:	0b c0       	rjmp	.+22     	; 0x36b4 <_Z19protected_show_bytehh+0x44>
    369e:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    36a0:	80 ff       	sbrs	r24, 0
    36a2:	f3 cf       	rjmp	.-26     	; 0x368a <_Z19protected_show_bytehh+0x1a>
    36a4:	5e 9a       	sbi	0x0b, 6	; 11
    36a6:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    36a8:	5b 98       	cbi	0x0b, 3	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    36aa:	82 fd       	sbrc	r24, 2
    36ac:	f5 cf       	rjmp	.-22     	; 0x3698 <_Z19protected_show_bytehh+0x28>
    36ae:	5c 98       	cbi	0x0b, 4	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    36b0:	81 fd       	sbrc	r24, 1
    36b2:	f5 cf       	rjmp	.-22     	; 0x369e <_Z19protected_show_bytehh+0x2e>
    36b4:	5f 98       	cbi	0x0b, 7	; 11
    36b6:	f4 cf       	rjmp	.-24     	; 0x36a0 <_Z19protected_show_bytehh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    36b8:	5b 98       	cbi	0x0b, 3	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    36ba:	86 fd       	sbrc	r24, 6
    36bc:	e0 cf       	rjmp	.-64     	; 0x367e <_Z19protected_show_bytehh+0xe>
    36be:	5c 98       	cbi	0x0b, 4	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    36c0:	85 fd       	sbrc	r24, 5
    36c2:	e0 cf       	rjmp	.-64     	; 0x3684 <_Z19protected_show_bytehh+0x14>
    36c4:	5f 98       	cbi	0x0b, 7	; 11
    36c6:	df cf       	rjmp	.-66     	; 0x3686 <_Z19protected_show_bytehh+0x16>

000036c8 <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    36c8:	90 91 40 08 	lds	r25, 0x0840
    36cc:	99 23       	and	r25, r25
    36ce:	11 f0       	breq	.+4      	; 0x36d4 <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    36d0:	80 91 3f 08 	lds	r24, 0x083F
	}
    protected_show_byte( result, mHiNibble );
    36d4:	0e 94 38 1b 	call	0x3670	; 0x3670 <_Z19protected_show_bytehh>
}
    36d8:	08 95       	ret

000036da <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    36da:	90 91 40 08 	lds	r25, 0x0840
    36de:	99 23       	and	r25, r25
    36e0:	19 f0       	breq	.+6      	; 0x36e8 <_Z18show_result_toggleh+0xe>
    36e2:	93 30       	cpi	r25, 0x03	; 3
    36e4:	09 f0       	breq	.+2      	; 0x36e8 <_Z18show_result_toggleh+0xe>
    36e6:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    36e8:	90 91 3d 01 	lds	r25, 0x013D
    36ec:	99 23       	and	r25, r25
    36ee:	59 f4       	brne	.+22     	; 0x3706 <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	0e 94 38 1b 	call	0x3670	; 0x3670 <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	90 91 3d 01 	lds	r25, 0x013D
    36fc:	91 11       	cpse	r25, r1
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	80 93 3d 01 	sts	0x013D, r24
    3704:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    3706:	61 e0       	ldi	r22, 0x01	; 1
    3708:	0e 94 38 1b 	call	0x3670	; 0x3670 <_Z19protected_show_bytehh>
    370c:	f4 cf       	rjmp	.-24     	; 0x36f6 <_Z18show_result_toggleh+0x1c>

0000370e <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    370e:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    3710:	95 81       	ldd	r25, Z+5	; 0x05
    3712:	9f 70       	andi	r25, 0x0F	; 15
    3714:	90 93 40 08 	sts	0x0840, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    3718:	86 81       	ldd	r24, Z+6	; 0x06
    371a:	8f 70       	andi	r24, 0x0F	; 15
    371c:	80 93 3f 08 	sts	0x083F, r24

	switch (System_LED_Control.systemMode)
    3720:	92 30       	cpi	r25, 0x02	; 2
    3722:	81 f0       	breq	.+32     	; 0x3744 <_Z21can_parse_led_requestP4sCAN+0x36>
    3724:	93 30       	cpi	r25, 0x03	; 3
    3726:	39 f0       	breq	.+14     	; 0x3736 <_Z21can_parse_led_requestP4sCAN+0x28>
    3728:	91 30       	cpi	r25, 0x01	; 1
    372a:	09 f0       	breq	.+2      	; 0x372e <_Z21can_parse_led_requestP4sCAN+0x20>
    372c:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <_Z9show_bytehh>
									  break;
    3734:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    3736:	80 91 cc 07 	lds	r24, 0x07CC
    373a:	80 93 3f 08 	sts	0x083F, r24
									  show_result_toggle( MyInstance );
    373e:	0e 94 6d 1b 	call	0x36da	; 0x36da <_Z18show_result_toggleh>
    3742:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    3744:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <_Z11strobe_ledsh>
									  break;
    3748:	08 95       	ret

0000374a <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    374a:	80 91 40 08 	lds	r24, 0x0840
    374e:	82 30       	cpi	r24, 0x02	; 2
    3750:	d9 f0       	breq	.+54     	; 0x3788 <_Z19led_timeslice_100msv+0x3e>
    3752:	83 30       	cpi	r24, 0x03	; 3
    3754:	49 f0       	breq	.+18     	; 0x3768 <_Z19led_timeslice_100msv+0x1e>
    3756:	81 30       	cpi	r24, 0x01	; 1
    3758:	09 f0       	breq	.+2      	; 0x375c <_Z19led_timeslice_100msv+0x12>
    375a:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    375c:	80 91 3f 08 	lds	r24, 0x083F
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <_Z9show_bytehh>
									  break;
    3766:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    3768:	80 91 3e 01 	lds	r24, 0x013E
    376c:	98 2f       	mov	r25, r24
    376e:	91 50       	subi	r25, 0x01	; 1
    3770:	90 93 3e 01 	sts	0x013E, r25
    3774:	88 23       	and	r24, r24
    3776:	89 f7       	brne	.-30     	; 0x375a <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    3778:	8a e0       	ldi	r24, 0x0A	; 10
    377a:	80 93 3e 01 	sts	0x013E, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    377e:	80 91 cc 07 	lds	r24, 0x07CC
    3782:	0e 94 6d 1b 	call	0x36da	; 0x36da <_Z18show_result_toggleh>
    3786:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    3788:	80 91 3f 08 	lds	r24, 0x083F
    378c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <_Z11strobe_ledsh>
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	19 f7       	brne	.-58     	; 0x375a <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    3794:	90 91 3f 08 	lds	r25, 0x083F
    3798:	99 23       	and	r25, r25
    379a:	19 f4       	brne	.+6      	; 0x37a2 <_Z19led_timeslice_100msv+0x58>
    379c:	80 93 3f 08 	sts	0x083F, r24
    37a0:	08 95       	ret
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	fb cf       	rjmp	.-10     	; 0x379c <_Z19led_timeslice_100msv+0x52>

000037a6 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    37a6:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    37a8:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    37aa:	90 93 89 00 	sts	0x0089, r25
    37ae:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    37b2:	2f bf       	out	0x3f, r18	; 63
}
    37b4:	08 95       	ret

000037b6 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    37b6:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    37b8:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    37ba:	90 93 8b 00 	sts	0x008B, r25
    37be:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    37c2:	2f bf       	out	0x3f, r18	; 63
}
    37c4:	08 95       	ret

000037c6 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
    37ca:	0f 93       	push	r16
    37cc:	1f 93       	push	r17
    37ce:	7b 01       	movw	r14, r22
    37d0:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    37d2:	20 91 41 01 	lds	r18, 0x0141
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	74 e2       	ldi	r23, 0x24	; 36
    37e0:	84 ef       	ldi	r24, 0xF4	; 244
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	0e 94 48 28 	call	0x5090	; 0x5090 <__divmodsi4>
    37e8:	ca 01       	movw	r24, r20
    37ea:	b9 01       	movw	r22, r18
    37ec:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__floatsisf>
    37f0:	a8 01       	movw	r20, r16
    37f2:	97 01       	movw	r18, r14
    37f4:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__divsf3>
    37f8:	0e 94 02 21 	call	0x4204	; 0x4204 <__fixunssfsi>
	return Top;
}
    37fc:	cb 01       	movw	r24, r22
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	ff 90       	pop	r15
    3804:	ef 90       	pop	r14
    3806:	08 95       	ret

00003808 <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    3808:	90 93 43 01 	sts	0x0143, r25
    380c:	80 93 42 01 	sts	0x0142, r24
	ICR1 = TOP;
    3810:	90 93 87 00 	sts	0x0087, r25
    3814:	80 93 86 00 	sts	0x0086, r24
}
    3818:	08 95       	ret

0000381a <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	9b 01       	movw	r18, r22
    3824:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	74 e2       	ldi	r23, 0x24	; 36
    382a:	84 e7       	ldi	r24, 0x74	; 116
    382c:	9b e4       	ldi	r25, 0x4B	; 75
    382e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__divsf3>
    3832:	8b 01       	movw	r16, r22
    3834:	d8 2f       	mov	r29, r24
    3836:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    3838:	9e 01       	movw	r18, r28
    383a:	71 2f       	mov	r23, r17
    383c:	83 2f       	mov	r24, r19
    383e:	92 2f       	mov	r25, r18
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	3f ef       	ldi	r19, 0xFF	; 255
    3844:	4f e7       	ldi	r20, 0x7F	; 127
    3846:	57 e4       	ldi	r21, 0x47	; 71
    3848:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__gtsf2>
    384c:	18 16       	cp	r1, r24
    384e:	0c f0       	brlt	.+2      	; 0x3852 <_Z16select_prescalerf+0x38>
    3850:	41 c0       	rjmp	.+130    	; 0x38d4 <_Z16select_prescalerf+0xba>
    3852:	9e 01       	movw	r18, r28
    3854:	60 2f       	mov	r22, r16
    3856:	71 2f       	mov	r23, r17
    3858:	83 2f       	mov	r24, r19
    385a:	92 2f       	mov	r25, r18
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e0       	ldi	r20, 0x00	; 0
    3862:	5e e3       	ldi	r21, 0x3E	; 62
    3864:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	3f ef       	ldi	r19, 0xFF	; 255
    386c:	4f e7       	ldi	r20, 0x7F	; 127
    386e:	57 e4       	ldi	r21, 0x47	; 71
    3870:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__gtsf2>
    3874:	18 16       	cp	r1, r24
    3876:	b4 f5       	brge	.+108    	; 0x38e4 <_Z16select_prescalerf+0xca>
    3878:	9e 01       	movw	r18, r28
    387a:	60 2f       	mov	r22, r16
    387c:	71 2f       	mov	r23, r17
    387e:	83 2f       	mov	r24, r19
    3880:	92 2f       	mov	r25, r18
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e8       	ldi	r20, 0x80	; 128
    3888:	5c e3       	ldi	r21, 0x3C	; 60
    388a:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	57 e4       	ldi	r21, 0x47	; 71
    3896:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	4c f5       	brge	.+82     	; 0x38f0 <_Z16select_prescalerf+0xd6>
    389e:	9e 01       	movw	r18, r28
    38a0:	60 2f       	mov	r22, r16
    38a2:	71 2f       	mov	r23, r17
    38a4:	83 2f       	mov	r24, r19
    38a6:	92 2f       	mov	r25, r18
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e8       	ldi	r20, 0x80	; 128
    38ae:	5b e3       	ldi	r21, 0x3B	; 59
    38b0:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	9c f4       	brge	.+38     	; 0x38ea <_Z16select_prescalerf+0xd0>
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    38c8:	c9 01       	movw	r24, r18
    38ca:	df 91       	pop	r29
    38cc:	cf 91       	pop	r28
    38ce:	1f 91       	pop	r17
    38d0:	0f 91       	pop	r16
    38d2:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    38d4:	21 e0       	ldi	r18, 0x01	; 1
    38d6:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    38d8:	c9 01       	movw	r24, r18
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	1f 91       	pop	r17
    38e0:	0f 91       	pop	r16
    38e2:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    38e4:	28 e0       	ldi	r18, 0x08	; 8
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	ef cf       	rjmp	.-34     	; 0x38c8 <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	31 e0       	ldi	r19, 0x01	; 1
    38ee:	ec cf       	rjmp	.-40     	; 0x38c8 <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    38f0:	20 e4       	ldi	r18, 0x40	; 64
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	e9 cf       	rjmp	.-46     	; 0x38c8 <_Z16select_prescalerf+0xae>

000038f6 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    38f6:	80 34       	cpi	r24, 0x40	; 64
    38f8:	91 05       	cpc	r25, r1
    38fa:	d9 f0       	breq	.+54     	; 0x3932 <_Z20get_tccr1b_prescalert+0x3c>
    38fc:	81 34       	cpi	r24, 0x41	; 65
    38fe:	91 05       	cpc	r25, r1
    3900:	50 f0       	brcs	.+20     	; 0x3916 <_Z20get_tccr1b_prescalert+0x20>
    3902:	21 e0       	ldi	r18, 0x01	; 1
    3904:	80 30       	cpi	r24, 0x00	; 0
    3906:	92 07       	cpc	r25, r18
    3908:	81 f0       	breq	.+32     	; 0x392a <_Z20get_tccr1b_prescalert+0x34>
    390a:	24 e0       	ldi	r18, 0x04	; 4
    390c:	80 30       	cpi	r24, 0x00	; 0
    390e:	92 07       	cpc	r25, r18
    3910:	51 f0       	breq	.+20     	; 0x3926 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    3912:	8f ef       	ldi	r24, 0xFF	; 255
    3914:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    3916:	81 30       	cpi	r24, 0x01	; 1
    3918:	91 05       	cpc	r25, r1
    391a:	49 f0       	breq	.+18     	; 0x392e <_Z20get_tccr1b_prescalert+0x38>
    391c:	88 30       	cpi	r24, 0x08	; 8
    391e:	91 05       	cpc	r25, r1
    3920:	c1 f7       	brne	.-16     	; 0x3912 <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    3922:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    3924:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    3926:	85 e0       	ldi	r24, 0x05	; 5
    3928:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    392a:	84 e0       	ldi	r24, 0x04	; 4
    392c:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    3932:	83 e0       	ldi	r24, 0x03	; 3
    3934:	08 95       	ret

00003936 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    3936:	ef 92       	push	r14
    3938:	ff 92       	push	r15
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
    393e:	7b 01       	movw	r14, r22
    3940:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    3942:	20 91 41 01 	lds	r18, 0x0141
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	40 e0       	ldi	r20, 0x00	; 0
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	74 e2       	ldi	r23, 0x24	; 36
    3950:	84 ef       	ldi	r24, 0xF4	; 244
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 48 28 	call	0x5090	; 0x5090 <__divmodsi4>
    3958:	ca 01       	movw	r24, r20
    395a:	b9 01       	movw	r22, r18
    395c:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__floatsisf>
    3960:	a8 01       	movw	r20, r16
    3962:	97 01       	movw	r18, r14
    3964:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__divsf3>
    3968:	0e 94 02 21 	call	0x4204	; 0x4204 <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    396c:	70 93 43 01 	sts	0x0143, r23
    3970:	60 93 42 01 	sts	0x0142, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    3974:	70 93 87 00 	sts	0x0087, r23
    3978:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	ff 90       	pop	r15
    3982:	ef 90       	pop	r14
    3984:	08 95       	ret

00003986 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    3986:	ef 92       	push	r14
    3988:	ff 92       	push	r15
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	7b 01       	movw	r14, r22
    3994:	8c 01       	movw	r16, r24
    3996:	c4 2f       	mov	r28, r20
    3998:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    399a:	41 11       	cpse	r20, r1
    399c:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    399e:	d1 11       	cpse	r29, r1
    39a0:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    39a2:	80 91 64 00 	lds	r24, 0x0064
    39a6:	87 7e       	andi	r24, 0xE7	; 231
    39a8:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    39ac:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    39ae:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    39b0:	10 92 89 00 	sts	0x0089, r1
    39b4:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    39b8:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    39ba:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    39bc:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    39be:	10 92 8b 00 	sts	0x008B, r1
    39c2:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    39c6:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    39c8:	20 91 41 01 	lds	r18, 0x0141
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	74 e2       	ldi	r23, 0x24	; 36
    39d6:	84 ef       	ldi	r24, 0xF4	; 244
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	0e 94 48 28 	call	0x5090	; 0x5090 <__divmodsi4>
    39de:	ca 01       	movw	r24, r20
    39e0:	b9 01       	movw	r22, r18
    39e2:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__floatsisf>
    39e6:	a8 01       	movw	r20, r16
    39e8:	97 01       	movw	r18, r14
    39ea:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__divsf3>
    39ee:	0e 94 02 21 	call	0x4204	; 0x4204 <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    39f2:	70 93 43 01 	sts	0x0143, r23
    39f6:	60 93 42 01 	sts	0x0142, r22
	ICR1 = TOP;
    39fa:	70 93 87 00 	sts	0x0087, r23
    39fe:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    3a02:	cc 23       	and	r28, r28
    3a04:	c1 f4       	brne	.+48     	; 0x3a36 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    3a06:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    3a08:	d1 11       	cpse	r29, r1
    3a0a:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    3a0c:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    3a10:	c8 01       	movw	r24, r16
    3a12:	b7 01       	movw	r22, r14
    3a14:	0e 94 0d 1c 	call	0x381a	; 0x381a <_Z16select_prescalerf>
    3a18:	80 93 41 01 	sts	0x0141, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_Z20get_tccr1b_prescalert>
    3a22:	88 61       	ori	r24, 0x18	; 24
    3a24:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	1f 91       	pop	r17
    3a2e:	0f 91       	pop	r16
    3a30:	ff 90       	pop	r15
    3a32:	ef 90       	pop	r14
    3a34:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    3a36:	82 e8       	ldi	r24, 0x82	; 130
    3a38:	e7 cf       	rjmp	.-50     	; 0x3a08 <_Z8pwm_initfhh+0x82>

00003a3a <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    3a3a:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    3a3e:	29 2f       	mov	r18, r25
    3a40:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    3a42:	88 23       	and	r24, r24
    3a44:	21 f4       	brne	.+8      	; 0x3a4e <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    3a46:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    3a48:	90 93 80 00 	sts	0x0080, r25
}
    3a4c:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    3a4e:	92 2f       	mov	r25, r18
    3a50:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    3a52:	90 93 80 00 	sts	0x0080, r25
}
    3a56:	08 95       	ret

00003a58 <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    3a58:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    3a5c:	29 2f       	mov	r18, r25
    3a5e:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    3a60:	88 23       	and	r24, r24
    3a62:	21 f4       	brne	.+8      	; 0x3a6c <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    3a64:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    3a66:	90 93 80 00 	sts	0x0080, r25
}
    3a6a:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    3a6c:	92 2f       	mov	r25, r18
    3a6e:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    3a70:	90 93 80 00 	sts	0x0080, r25
}
    3a74:	08 95       	ret

00003a76 <_Z9set_dutyAf>:

/* value must be Positive! */
void set_dutyA( float mDuty )
{
    3a76:	ef 92       	push	r14
    3a78:	ff 92       	push	r15
    3a7a:	0f 93       	push	r16
    3a7c:	1f 93       	push	r17
    3a7e:	7b 01       	movw	r14, r22
    3a80:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty; 
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	a9 01       	movw	r20, r18
    3a88:	0e 94 de 24 	call	0x49bc	; 0x49bc <__ltsf2>
    3a8c:	87 ff       	sbrs	r24, 7
    3a8e:	04 c0       	rjmp	.+8      	; 0x3a98 <_Z9set_dutyAf+0x22>
    3a90:	17 fb       	bst	r17, 7
    3a92:	10 95       	com	r17
    3a94:	17 f9       	bld	r17, 7
    3a96:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    3a98:	60 91 42 01 	lds	r22, 0x0142
    3a9c:	70 91 43 01 	lds	r23, 0x0143
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__floatunsisf>
    3aa8:	a8 01       	movw	r20, r16
    3aaa:	97 01       	movw	r18, r14
    3aac:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__mulsf3>
    3ab0:	0e 94 bc 28 	call	0x5178	; 0x5178 <ceil>
    3ab4:	0e 94 02 21 	call	0x4204	; 0x4204 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    3ab8:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    3aba:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    3abc:	70 93 89 00 	sts	0x0089, r23
    3ac0:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    3ac4:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty; 
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    3ac6:	1f 91       	pop	r17
    3ac8:	0f 91       	pop	r16
    3aca:	ff 90       	pop	r15
    3acc:	ef 90       	pop	r14
    3ace:	08 95       	ret

00003ad0 <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    3ad0:	ef 92       	push	r14
    3ad2:	ff 92       	push	r15
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	7b 01       	movw	r14, r22
    3ada:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	a9 01       	movw	r20, r18
    3ae2:	0e 94 de 24 	call	0x49bc	; 0x49bc <__ltsf2>
    3ae6:	87 ff       	sbrs	r24, 7
    3ae8:	04 c0       	rjmp	.+8      	; 0x3af2 <_Z9set_dutyBf+0x22>
    3aea:	17 fb       	bst	r17, 7
    3aec:	10 95       	com	r17
    3aee:	17 f9       	bld	r17, 7
    3af0:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    3af2:	60 91 42 01 	lds	r22, 0x0142
    3af6:	70 91 43 01 	lds	r23, 0x0143
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__floatunsisf>
    3b02:	a8 01       	movw	r20, r16
    3b04:	97 01       	movw	r18, r14
    3b06:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__mulsf3>
    3b0a:	0e 94 bc 28 	call	0x5178	; 0x5178 <ceil>
    3b0e:	0e 94 02 21 	call	0x4204	; 0x4204 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    3b12:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    3b14:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3b16:	70 93 8b 00 	sts	0x008B, r23
    3b1a:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    3b1e:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    3b20:	1f 91       	pop	r17
    3b22:	0f 91       	pop	r16
    3b24:	ff 90       	pop	r15
    3b26:	ef 90       	pop	r14
    3b28:	08 95       	ret

00003b2a <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    3b2a:	9b 01       	movw	r18, r22
    3b2c:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    3b2e:	10 92 42 08 	sts	0x0842, r1
    3b32:	10 92 43 08 	sts	0x0843, r1
    3b36:	10 92 44 08 	sts	0x0844, r1
    3b3a:	10 92 45 08 	sts	0x0845, r1
    3b3e:	80 91 42 08 	lds	r24, 0x0842
    3b42:	90 91 43 08 	lds	r25, 0x0843
    3b46:	a0 91 44 08 	lds	r26, 0x0844
    3b4a:	b0 91 45 08 	lds	r27, 0x0845
    3b4e:	82 17       	cp	r24, r18
    3b50:	93 07       	cpc	r25, r19
    3b52:	a4 07       	cpc	r26, r20
    3b54:	b5 07       	cpc	r27, r21
    3b56:	04 f5       	brge	.+64     	; 0x3b98 <_Z5delayl+0x6e>
    3b58:	80 91 42 08 	lds	r24, 0x0842
    3b5c:	90 91 43 08 	lds	r25, 0x0843
    3b60:	a0 91 44 08 	lds	r26, 0x0844
    3b64:	b0 91 45 08 	lds	r27, 0x0845
    3b68:	01 96       	adiw	r24, 0x01	; 1
    3b6a:	a1 1d       	adc	r26, r1
    3b6c:	b1 1d       	adc	r27, r1
    3b6e:	80 93 42 08 	sts	0x0842, r24
    3b72:	90 93 43 08 	sts	0x0843, r25
    3b76:	a0 93 44 08 	sts	0x0844, r26
    3b7a:	b0 93 45 08 	sts	0x0845, r27
    3b7e:	80 91 42 08 	lds	r24, 0x0842
    3b82:	90 91 43 08 	lds	r25, 0x0843
    3b86:	a0 91 44 08 	lds	r26, 0x0844
    3b8a:	b0 91 45 08 	lds	r27, 0x0845
    3b8e:	82 17       	cp	r24, r18
    3b90:	93 07       	cpc	r25, r19
    3b92:	a4 07       	cpc	r26, r20
    3b94:	b5 07       	cpc	r27, r21
    3b96:	04 f3       	brlt	.-64     	; 0x3b58 <_Z5delayl+0x2e>
    3b98:	08 95       	ret

00003b9a <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    3b9a:	8f ef       	ldi	r24, 0xFF	; 255
    3b9c:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    3b9e:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    3ba0:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    3ba2:	8e ef       	ldi	r24, 0xFE	; 254
    3ba4:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    3ba6:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    3ba8:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    3baa:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    3bac:	10 92 64 00 	sts	0x0064, r1
}
    3bb0:	08 95       	ret

00003bb2 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    3bb2:	82 e0       	ldi	r24, 0x02	; 2
    3bb4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    3bb6:	93 e0       	ldi	r25, 0x03	; 3
    3bb8:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    3bba:	9a ef       	ldi	r25, 0xFA	; 250
    3bbc:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    3bbe:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    3bc2:	10 92 49 08 	sts	0x0849, r1
    3bc6:	10 92 48 08 	sts	0x0848, r1
	/******************* PERIPHERAL INIT ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    3bca:	08 95       	ret

00003bcc <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	80 93 4c 08 	sts	0x084C, r24
}
    3bd2:	08 95       	ret

00003bd4 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    3bd4:	10 92 4c 08 	sts	0x084C, r1
}
    3bd8:	08 95       	ret

00003bda <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    3bda:	20 91 48 08 	lds	r18, 0x0848
    3bde:	30 91 49 08 	lds	r19, 0x0849
    3be2:	c9 01       	movw	r24, r18
    3be4:	65 e0       	ldi	r22, 0x05	; 5
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	0e 94 35 28 	call	0x506a	; 0x506a <__divmodhi4>
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	39 f4       	brne	.+14     	; 0x3bfe <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    3bf0:	c9 01       	movw	r24, r18
    3bf2:	6a e0       	ldi	r22, 0x0A	; 10
    3bf4:	70 e0       	ldi	r23, 0x00	; 0
    3bf6:	0e 94 35 28 	call	0x506a	; 0x506a <__divmodhi4>
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	09 f0       	breq	.+2      	; 0x3c00 <_Z15System_Dispatchv+0x26>
    3bfe:	08 95       	ret
		{
			can_instance_timeslice();
    3c00:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    3c04:	80 91 48 08 	lds	r24, 0x0848
    3c08:	90 91 49 08 	lds	r25, 0x0849
    3c0c:	64 e1       	ldi	r22, 0x14	; 20
    3c0e:	70 e0       	ldi	r23, 0x00	; 0
    3c10:	0e 94 35 28 	call	0x506a	; 0x506a <__divmodhi4>
    3c14:	00 97       	sbiw	r24, 0x00	; 0
    3c16:	99 f7       	brne	.-26     	; 0x3bfe <_Z15System_Dispatchv+0x24>
			{
				can_board_timeslice();
    3c18:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    3c1c:	80 91 48 08 	lds	r24, 0x0848
    3c20:	90 91 49 08 	lds	r25, 0x0849
    3c24:	62 e3       	ldi	r22, 0x32	; 50
    3c26:	70 e0       	ldi	r23, 0x00	; 0
    3c28:	0e 94 35 28 	call	0x506a	; 0x506a <__divmodhi4>
    3c2c:	00 97       	sbiw	r24, 0x00	; 0
    3c2e:	39 f7       	brne	.-50     	; 0x3bfe <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    3c30:	0e 94 a5 1b 	call	0x374a	; 0x374a <_Z19led_timeslice_100msv>
    3c34:	08 95       	ret

00003c36 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    3c36:	1f 92       	push	r1
    3c38:	0f 92       	push	r0
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	0f 92       	push	r0
    3c3e:	11 24       	eor	r1, r1
    3c40:	2f 93       	push	r18
    3c42:	3f 93       	push	r19
    3c44:	4f 93       	push	r20
    3c46:	5f 93       	push	r21
    3c48:	6f 93       	push	r22
    3c4a:	7f 93       	push	r23
    3c4c:	8f 93       	push	r24
    3c4e:	9f 93       	push	r25
    3c50:	af 93       	push	r26
    3c52:	bf 93       	push	r27
    3c54:	ef 93       	push	r30
    3c56:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    3c58:	80 91 4d 08 	lds	r24, 0x084D
    3c5c:	88 23       	and	r24, r24
    3c5e:	41 f1       	breq	.+80     	; 0x3cb0 <__vector_15+0x7a>
    3c60:	10 92 4d 08 	sts	0x084D, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    3c64:	80 91 4c 08 	lds	r24, 0x084C
    3c68:	88 23       	and	r24, r24
    3c6a:	49 f1       	breq	.+82     	; 0x3cbe <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    3c6c:	80 91 46 08 	lds	r24, 0x0846
    3c70:	90 91 47 08 	lds	r25, 0x0847
    3c74:	9c 01       	movw	r18, r24
    3c76:	2f 5f       	subi	r18, 0xFF	; 255
    3c78:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7a:	30 93 47 08 	sts	0x0847, r19
    3c7e:	20 93 46 08 	sts	0x0846, r18
    3c82:	6a e0       	ldi	r22, 0x0A	; 10
    3c84:	70 e0       	ldi	r23, 0x00	; 0
    3c86:	0e 94 21 28 	call	0x5042	; 0x5042 <__udivmodhi4>
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	31 f1       	breq	.+76     	; 0x3cda <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    3c8e:	ff 91       	pop	r31
    3c90:	ef 91       	pop	r30
    3c92:	bf 91       	pop	r27
    3c94:	af 91       	pop	r26
    3c96:	9f 91       	pop	r25
    3c98:	8f 91       	pop	r24
    3c9a:	7f 91       	pop	r23
    3c9c:	6f 91       	pop	r22
    3c9e:	5f 91       	pop	r21
    3ca0:	4f 91       	pop	r20
    3ca2:	3f 91       	pop	r19
    3ca4:	2f 91       	pop	r18
    3ca6:	0f 90       	pop	r0
    3ca8:	0f be       	out	0x3f, r0	; 63
    3caa:	0f 90       	pop	r0
    3cac:	1f 90       	pop	r1
    3cae:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	80 93 4d 08 	sts	0x084D, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    3cb6:	80 91 4c 08 	lds	r24, 0x084C
    3cba:	88 23       	and	r24, r24
    3cbc:	b9 f6       	brne	.-82     	; 0x3c6c <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    3cbe:	80 91 48 08 	lds	r24, 0x0848
    3cc2:	90 91 49 08 	lds	r25, 0x0849
    3cc6:	01 96       	adiw	r24, 0x01	; 1
    3cc8:	90 93 49 08 	sts	0x0849, r25
    3ccc:	80 93 48 08 	sts	0x0848, r24
		System_Dispatch();
    3cd0:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <_Z15System_Dispatchv>
		OS_Dispatch();
    3cd4:	0e 94 25 08 	call	0x104a	; 0x104a <_Z11OS_Dispatchv>
    3cd8:	da cf       	rjmp	.-76     	; 0x3c8e <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    3cda:	10 92 47 08 	sts	0x0847, r1
    3cde:	10 92 46 08 	sts	0x0846, r1
			OS_Event_TIC_Counter++;
    3ce2:	80 91 48 08 	lds	r24, 0x0848
    3ce6:	90 91 49 08 	lds	r25, 0x0849
    3cea:	01 96       	adiw	r24, 0x01	; 1
    3cec:	90 93 49 08 	sts	0x0849, r25
    3cf0:	80 93 48 08 	sts	0x0848, r24
			OS_Dispatch();
    3cf4:	0e 94 25 08 	call	0x104a	; 0x104a <_Z11OS_Dispatchv>
    3cf8:	ca cf       	rjmp	.-108    	; 0x3c8e <__vector_15+0x58>

00003cfa <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    3cfa:	82 e0       	ldi	r24, 0x02	; 2
    3cfc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    3cfe:	93 e0       	ldi	r25, 0x03	; 3
    3d00:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    3d02:	9a ef       	ldi	r25, 0xFA	; 250
    3d04:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    3d06:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    3d0a:	10 92 49 08 	sts	0x0849, r1
    3d0e:	10 92 48 08 	sts	0x0848, r1
}
    3d12:	08 95       	ret

00003d14 <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    3d14:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    3d16:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    3d18:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    3d1a:	85 81       	ldd	r24, Z+5	; 0x05
    3d1c:	82 30       	cpi	r24, 0x02	; 2
    3d1e:	d9 f0       	breq	.+54     	; 0x3d56 <_Z27can_parse_configure_requestP4sCAN+0x42>
    3d20:	83 30       	cpi	r24, 0x03	; 3
    3d22:	71 f0       	breq	.+28     	; 0x3d40 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    3d24:	81 30       	cpi	r24, 0x01	; 1
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <_Z27can_parse_configure_requestP4sCAN+0x16>
    3d28:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    3d2a:	89 2f       	mov	r24, r25
    3d2c:	80 95       	com	r24
    3d2e:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    3d30:	92 23       	and	r25, r18
    3d32:	20 91 4e 08 	lds	r18, 0x084E
    3d36:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    3d38:	89 23       	and	r24, r25
    3d3a:	80 93 4e 08 	sts	0x084E, r24
				 break;
    3d3e:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    3d40:	89 2f       	mov	r24, r25
    3d42:	80 95       	com	r24
    3d44:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    3d46:	92 23       	and	r25, r18
    3d48:	20 91 50 08 	lds	r18, 0x0850
    3d4c:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    3d4e:	89 23       	and	r24, r25
    3d50:	80 93 50 08 	sts	0x0850, r24
    3d54:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    3d56:	89 2f       	mov	r24, r25
    3d58:	80 95       	com	r24
    3d5a:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    3d5c:	92 23       	and	r25, r18
    3d5e:	20 91 4f 08 	lds	r18, 0x084F
    3d62:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    3d64:	89 23       	and	r24, r25
    3d66:	80 93 4f 08 	sts	0x084F, r24
				 break;
    3d6a:	08 95       	ret

00003d6c <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    3d6c:	10 92 4e 08 	sts	0x084E, r1
	config_byte_2 = 0;		// no reports
    3d70:	10 92 4f 08 	sts	0x084F, r1
	config_byte_3 = 0;		// 
    3d74:	10 92 50 08 	sts	0x0850, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    3d78:	82 e4       	ldi	r24, 0x42	; 66
    3d7a:	80 93 51 08 	sts	0x0851, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    3d7e:	10 92 ce 07 	sts	0x07CE, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    3d82:	80 91 52 08 	lds	r24, 0x0852
    3d86:	81 60       	ori	r24, 0x01	; 1
    3d88:	80 93 52 08 	sts	0x0852, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    3d8c:	10 92 cd 07 	sts	0x07CD, r1
	MyInstance 		 = 0x98;
    3d90:	88 e9       	ldi	r24, 0x98	; 152
    3d92:	80 93 cc 07 	sts	0x07CC, r24
}
    3d96:	08 95       	ret

00003d98 <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    3d98:	80 91 52 08 	lds	r24, 0x0852
							// b/c BigMotorEn board already does and we should have a consistent interface.
							// and b/c it's better the user knows when it's read.

	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    3d9c:	80 fd       	sbrc	r24, 0
    3d9e:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    3da0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    3da4:	0e 94 56 08 	call	0x10ac	; 0x10ac <_Z25app_default_configurationv>
    3da8:	08 95       	ret

00003daa <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    3daa:	20 91 cc 07 	lds	r18, 0x07CC
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3dae:	f9 99       	sbic	0x1f, 1	; 31
    3db0:	fe cf       	rjmp	.-4      	; 0x3dae <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3db2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3db4:	92 bd       	out	0x22, r25	; 34
    3db6:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3db8:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	fa 9a       	sbi	0x1f, 2	; 31
    3dc0:	f9 9a       	sbi	0x1f, 1	; 31
    3dc2:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    3dc4:	9c 01       	movw	r18, r24
    3dc6:	2f 5f       	subi	r18, 0xFF	; 255
    3dc8:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3dca:	c9 01       	movw	r24, r18
    3dcc:	08 95       	ret

00003dce <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3dce:	f9 99       	sbic	0x1f, 1	; 31
    3dd0:	fe cf       	rjmp	.-4      	; 0x3dce <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3dd2:	92 bd       	out	0x22, r25	; 34
    3dd4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3dd6:	f8 9a       	sbi	0x1f, 0	; 31
    3dd8:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    3dda:	20 93 cc 07 	sts	0x07CC, r18
    return mEEPROMAddress+1;    
    3dde:	9c 01       	movw	r18, r24
    3de0:	2f 5f       	subi	r18, 0xFF	; 255
    3de2:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3de4:	c9 01       	movw	r24, r18
    3de6:	08 95       	ret

00003de8 <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    3de8:	20 91 cd 07 	lds	r18, 0x07CD
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3dec:	f9 99       	sbic	0x1f, 1	; 31
    3dee:	fe cf       	rjmp	.-4      	; 0x3dec <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3df0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3df2:	92 bd       	out	0x22, r25	; 34
    3df4:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3df6:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	fa 9a       	sbi	0x1f, 2	; 31
    3dfe:	f9 9a       	sbi	0x1f, 1	; 31
    3e00:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    3e02:	9c 01       	movw	r18, r24
    3e04:	2f 5f       	subi	r18, 0xFF	; 255
    3e06:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3e08:	c9 01       	movw	r24, r18
    3e0a:	08 95       	ret

00003e0c <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3e0c:	f9 99       	sbic	0x1f, 1	; 31
    3e0e:	fe cf       	rjmp	.-4      	; 0x3e0c <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3e10:	92 bd       	out	0x22, r25	; 34
    3e12:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3e14:	f8 9a       	sbi	0x1f, 0	; 31
    3e16:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    3e18:	20 93 cd 07 	sts	0x07CD, r18
    return mEEPROMAddress+1;
    3e1c:	9c 01       	movw	r18, r24
    3e1e:	2f 5f       	subi	r18, 0xFF	; 255
    3e20:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3e22:	c9 01       	movw	r24, r18
    3e24:	08 95       	ret

00003e26 <_Z25save_configuration_eepromPh>:
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	eeprom_write_byte( addr++, ~config_byte_1 );
    3e26:	9c 01       	movw	r18, r24
    3e28:	2f 5f       	subi	r18, 0xFF	; 255
    3e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2c:	40 91 4e 08 	lds	r20, 0x084E
    3e30:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3e32:	f9 99       	sbic	0x1f, 1	; 31
    3e34:	fe cf       	rjmp	.-4      	; 0x3e32 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3e36:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3e38:	92 bd       	out	0x22, r25	; 34
    3e3a:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3e3c:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	fa 9a       	sbi	0x1f, 2	; 31
    3e44:	f9 9a       	sbi	0x1f, 1	; 31
    3e46:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    3e48:	c9 01       	movw	r24, r18
    3e4a:	01 96       	adiw	r24, 0x01	; 1
    3e4c:	40 91 4f 08 	lds	r20, 0x084F
    3e50:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3e52:	f9 99       	sbic	0x1f, 1	; 31
    3e54:	fe cf       	rjmp	.-4      	; 0x3e52 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3e56:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3e58:	32 bd       	out	0x22, r19	; 34
    3e5a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    3e5c:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	fa 9a       	sbi	0x1f, 2	; 31
    3e64:	f9 9a       	sbi	0x1f, 1	; 31
    3e66:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    3e68:	9c 01       	movw	r18, r24
    3e6a:	2f 5f       	subi	r18, 0xFF	; 255
    3e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6e:	40 91 50 08 	lds	r20, 0x0850
    3e72:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3e74:	f9 99       	sbic	0x1f, 1	; 31
    3e76:	fe cf       	rjmp	.-4      	; 0x3e74 <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3e78:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3e7a:	92 bd       	out	0x22, r25	; 34
    3e7c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3e7e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3e80:	0f b6       	in	r0, 0x3f	; 63
    3e82:	f8 94       	cli
    3e84:	fa 9a       	sbi	0x1f, 2	; 31
    3e86:	f9 9a       	sbi	0x1f, 1	; 31
    3e88:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    3e8a:	c9 01       	movw	r24, r18
    3e8c:	01 96       	adiw	r24, 0x01	; 1
    3e8e:	40 91 51 08 	lds	r20, 0x0851
    3e92:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3e94:	f9 99       	sbic	0x1f, 1	; 31
    3e96:	fe cf       	rjmp	.-4      	; 0x3e94 <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3e98:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3e9a:	32 bd       	out	0x22, r19	; 34
    3e9c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    3e9e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	fa 9a       	sbi	0x1f, 2	; 31
    3ea6:	f9 9a       	sbi	0x1f, 1	; 31
    3ea8:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    3eaa:	9c 01       	movw	r18, r24
    3eac:	2f 5f       	subi	r18, 0xFF	; 255
    3eae:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb0:	40 91 52 08 	lds	r20, 0x0852
    3eb4:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3eb6:	f9 99       	sbic	0x1f, 1	; 31
    3eb8:	fe cf       	rjmp	.-4      	; 0x3eb6 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3eba:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3ebc:	92 bd       	out	0x22, r25	; 34
    3ebe:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3ec0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	f8 94       	cli
    3ec6:	fa 9a       	sbi	0x1f, 2	; 31
    3ec8:	f9 9a       	sbi	0x1f, 1	; 31
    3eca:	0f be       	out	0x3f, r0	; 63
	return addr;
}
    3ecc:	c9 01       	movw	r24, r18
    3ece:	08 95       	ret

00003ed0 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    3ed8:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    3edc:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <_Z25save_configuration_eepromPh>
}
    3ee0:	08 95       	ret

00003ee2 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    3ee2:	f8 94       	cli
	return save_configuration();
    3ee4:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_Z18save_configurationv>
	sei();
}
    3ee8:	08 95       	ret

00003eea <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    3eea:	22 e1       	ldi	r18, 0x12	; 18
    3eec:	84 33       	cpi	r24, 0x34	; 52
    3eee:	92 07       	cpc	r25, r18
    3ef0:	11 f0       	breq	.+4      	; 0x3ef6 <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    3ef4:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    3ef6:	80 91 52 08 	lds	r24, 0x0852
    3efa:	8e 7f       	andi	r24, 0xFE	; 254
    3efc:	80 93 52 08 	sts	0x0852, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    3f00:	f8 94       	cli
    3f02:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_Z18save_configurationv>
    3f06:	78 94       	sei
		retval = 1;
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	08 95       	ret

00003f0c <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    3f0c:	9c 01       	movw	r18, r24
    3f0e:	2f 5f       	subi	r18, 0xFF	; 255
    3f10:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3f12:	f9 99       	sbic	0x1f, 1	; 31
    3f14:	fe cf       	rjmp	.-4      	; 0x3f12 <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3f16:	92 bd       	out	0x22, r25	; 34
    3f18:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3f1a:	f8 9a       	sbi	0x1f, 0	; 31
    3f1c:	80 b5       	in	r24, 0x20	; 32
    3f1e:	80 95       	com	r24
    3f20:	80 93 4e 08 	sts	0x084E, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    3f24:	c9 01       	movw	r24, r18
    3f26:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3f28:	f9 99       	sbic	0x1f, 1	; 31
    3f2a:	fe cf       	rjmp	.-4      	; 0x3f28 <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3f2c:	32 bd       	out	0x22, r19	; 34
    3f2e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3f30:	f8 9a       	sbi	0x1f, 0	; 31
    3f32:	20 b5       	in	r18, 0x20	; 32
    3f34:	20 95       	com	r18
    3f36:	20 93 4f 08 	sts	0x084F, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    3f3a:	9c 01       	movw	r18, r24
    3f3c:	2f 5f       	subi	r18, 0xFF	; 255
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3f40:	f9 99       	sbic	0x1f, 1	; 31
    3f42:	fe cf       	rjmp	.-4      	; 0x3f40 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3f44:	92 bd       	out	0x22, r25	; 34
    3f46:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3f48:	f8 9a       	sbi	0x1f, 0	; 31
    3f4a:	80 b5       	in	r24, 0x20	; 32
    3f4c:	80 95       	com	r24
    3f4e:	80 93 50 08 	sts	0x0850, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    3f52:	c9 01       	movw	r24, r18
    3f54:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3f56:	f9 99       	sbic	0x1f, 1	; 31
    3f58:	fe cf       	rjmp	.-4      	; 0x3f56 <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3f5a:	32 bd       	out	0x22, r19	; 34
    3f5c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3f5e:	f8 9a       	sbi	0x1f, 0	; 31
    3f60:	20 b5       	in	r18, 0x20	; 32
    3f62:	20 95       	com	r18
    3f64:	20 93 51 08 	sts	0x0851, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    3f68:	9c 01       	movw	r18, r24
    3f6a:	2f 5f       	subi	r18, 0xFF	; 255
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3f6e:	f9 99       	sbic	0x1f, 1	; 31
    3f70:	fe cf       	rjmp	.-4      	; 0x3f6e <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3f72:	92 bd       	out	0x22, r25	; 34
    3f74:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3f76:	f8 9a       	sbi	0x1f, 0	; 31
    3f78:	80 b5       	in	r24, 0x20	; 32
    3f7a:	80 95       	com	r24
    3f7c:	80 93 52 08 	sts	0x0852, r24
	return addr;
}
    3f80:	c9 01       	movw	r24, r18
    3f82:	08 95       	ret

00003f84 <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    3f8c:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    3f90:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <_Z25read_configuration_eepromPh>
}
    3f94:	08 95       	ret

00003f96 <_Z8FontReadPKh>:
 */
struct tarea starea;

Font_t 	Font;
uint8_t	FontColor;
uint8_t FontRead(const uint8_t* value) { return *value;  }
    3f96:	fc 01       	movw	r30, r24
    3f98:	80 81       	ld	r24, Z
    3f9a:	08 95       	ret

00003f9c <_Z10selectFontPKh>:

void selectFont( Font_t mFont )
{
	Font = mFont;
    3f9c:	90 93 5a 08 	sts	0x085A, r25
    3fa0:	80 93 59 08 	sts	0x0859, r24
}
    3fa4:	08 95       	ret

00003fa6 <_Z7PutCharh>:

int PutChar(uint8_t c)
{
    3fa6:	2f 92       	push	r2
    3fa8:	3f 92       	push	r3
    3faa:	4f 92       	push	r4
    3fac:	5f 92       	push	r5
    3fae:	6f 92       	push	r6
    3fb0:	7f 92       	push	r7
    3fb2:	8f 92       	push	r8
    3fb4:	9f 92       	push	r9
    3fb6:	af 92       	push	r10
    3fb8:	bf 92       	push	r11
    3fba:	cf 92       	push	r12
    3fbc:	df 92       	push	r13
    3fbe:	ef 92       	push	r14
    3fc0:	ff 92       	push	r15
    3fc2:	0f 93       	push	r16
    3fc4:	1f 93       	push	r17
    3fc6:	df 93       	push	r29
    3fc8:	cf 93       	push	r28
    3fca:	00 d0       	rcall	.+0      	; 0x3fcc <_Z7PutCharh+0x26>
    3fcc:	0f 92       	push	r0
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	18 2f       	mov	r17, r24
uint8_t			x = Get_x_address();
    3fd4:	0e 94 87 08 	call	0x110e	; 0x110e <_Z13Get_x_addressv>
    3fd8:	78 2e       	mov	r7, r24
uint8_t			y = Get_y_address();
    3fda:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z13Get_y_addressv>
    3fde:	08 2f       	mov	r16, r24

    if(Font == 0)
    3fe0:	e0 91 59 08 	lds	r30, 0x0859
    3fe4:	f0 91 5a 08 	lds	r31, 0x085A
    3fe8:	30 97       	sbiw	r30, 0x00	; 0
    3fea:	09 f4       	brne	.+2      	; 0x3fee <_Z7PutCharh+0x48>
    3fec:	af c0       	rjmp	.+350    	; 0x414c <_Z7PutCharh+0x1a6>

	/*
	 * check for special character processing
	 */

	if(c < 0x20)
    3fee:	10 32       	cpi	r17, 0x20	; 32
    3ff0:	08 f4       	brcc	.+2      	; 0x3ff4 <_Z7PutCharh+0x4e>
    3ff2:	93 c0       	rjmp	.+294    	; 0x411a <_Z7PutCharh+0x174>
 */
struct tarea starea;

Font_t 	Font;
uint8_t	FontColor;
uint8_t FontRead(const uint8_t* value) { return *value;  }
    3ff4:	83 80       	ldd	r8, Z+3	; 0x03
    3ff6:	84 81       	ldd	r24, Z+4	; 0x04
    3ff8:	95 81       	ldd	r25, Z+5	; 0x05
	uint8_t charCount = FontRead(Font+FONT_CHAR_COUNT);
	
	uint16_t index = 0;
	uint8_t thielefont;

	if(c < firstChar || c >= (firstChar+charCount)) {
    3ffa:	18 17       	cp	r17, r24
    3ffc:	08 f4       	brcc	.+2      	; 0x4000 <_Z7PutCharh+0x5a>
    3ffe:	a6 c0       	rjmp	.+332    	; 0x414c <_Z7PutCharh+0x1a6>
    4000:	41 2f       	mov	r20, r17
    4002:	50 e0       	ldi	r21, 0x00	; 0
    4004:	e9 2e       	mov	r14, r25
    4006:	ff 24       	eor	r15, r15
    4008:	97 01       	movw	r18, r14
    400a:	28 0f       	add	r18, r24
    400c:	31 1d       	adc	r19, r1
    400e:	42 17       	cp	r20, r18
    4010:	53 07       	cpc	r21, r19
    4012:	0c f0       	brlt	.+2      	; 0x4016 <_Z7PutCharh+0x70>
    4014:	9b c0       	rjmp	.+310    	; 0x414c <_Z7PutCharh+0x1a6>
		return 1;
	}
	   
	uint8_t width = 0;
	uint8_t height = FontRead(Font+FONT_HEIGHT);
	uint8_t bytes = (height+7)/8; /* calculates height in rounded up bytes */
    4016:	c8 2c       	mov	r12, r8
    4018:	dd 24       	eor	r13, r13
    401a:	96 01       	movw	r18, r12
    401c:	29 5f       	subi	r18, 0xF9	; 249
    401e:	3f 4f       	sbci	r19, 0xFF	; 255
    4020:	35 95       	asr	r19
    4022:	27 95       	ror	r18
    4024:	35 95       	asr	r19
    4026:	27 95       	ror	r18
    4028:	35 95       	asr	r19
    402a:	27 95       	ror	r18
    402c:	42 2e       	mov	r4, r18
	uint8_t thielefont;

	if(c < firstChar || c >= (firstChar+charCount)) {
		return 0; // invalid char
	}
	c-= firstChar;
    402e:	18 1b       	sub	r17, r24

	if( isFixedWidthFont(Font) {
    4030:	80 81       	ld	r24, Z
    4032:	88 23       	and	r24, r24
    4034:	09 f0       	breq	.+2      	; 0x4038 <_Z7PutCharh+0x92>
    4036:	8d c0       	rjmp	.+282    	; 0x4152 <_Z7PutCharh+0x1ac>
    4038:	81 81       	ldd	r24, Z+1	; 0x01
    403a:	88 23       	and	r24, r24
    403c:	09 f0       	breq	.+2      	; 0x4040 <_Z7PutCharh+0x9a>
    403e:	89 c0       	rjmp	.+274    	; 0x4152 <_Z7PutCharh+0x1ac>
 */
struct tarea starea;

Font_t 	Font;
uint8_t	FontColor;
uint8_t FontRead(const uint8_t* value) { return *value;  }
    4040:	92 80       	ldd	r9, Z+2	; 0x02
	c-= firstChar;

	if( isFixedWidthFont(Font) {
		thielefont = 0;
		width = FontRead(Font+FONT_FIXED_WIDTH); 
		index = c*bytes*width+FONT_WIDTH_TABLE;
    4042:	49 2d       	mov	r20, r9
    4044:	14 9f       	mul	r17, r20
    4046:	90 01       	movw	r18, r0
    4048:	11 24       	eor	r1, r1
    404a:	84 2d       	mov	r24, r4
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	28 9f       	mul	r18, r24
    4050:	f0 01       	movw	r30, r0
    4052:	29 9f       	mul	r18, r25
    4054:	f0 0d       	add	r31, r0
    4056:	38 9f       	mul	r19, r24
    4058:	f0 0d       	add	r31, r0
    405a:	11 24       	eor	r1, r1
    405c:	36 96       	adiw	r30, 0x06	; 6
    405e:	fb 83       	std	Y+3, r31	; 0x03
    4060:	ea 83       	std	Y+2, r30	; 0x02
	 * check for a defered scroll
	 * If there is a deferred scroll,
	 * Fake a newline to complete it.
	 */

	if(need_scroll)
    4062:	80 91 53 08 	lds	r24, 0x0853
    4066:	88 23       	and	r24, r24
    4068:	09 f0       	breq	.+2      	; 0x406c <_Z7PutCharh+0xc6>
    406a:	98 c0       	rjmp	.+304    	; 0x419c <_Z7PutCharh+0x1f6>

	// last but not least, draw the character

#ifdef GLCD_OLD_FONTDRAW
/*================== OLD FONT DRAWING ============================*/
	GotoXY(x, y);
    406c:	87 2d       	mov	r24, r7
    406e:	60 2f       	mov	r22, r16
    4070:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	for(uint8_t i=0; i<bytes; i++)	/* each vertical byte */
    4074:	44 20       	and	r4, r4
    4076:	09 f4       	brne	.+2      	; 0x407a <_Z7PutCharh+0xd4>
    4078:	50 c0       	rjmp	.+160    	; 0x411a <_Z7PutCharh+0x174>
    407a:	08 5f       	subi	r16, 0xF8	; 248
    407c:	09 83       	std	Y+1, r16	; 0x01
void selectFont( Font_t mFont )
{
	Font = mFont;
}

int PutChar(uint8_t c)
    407e:	29 2c       	mov	r2, r9
    4080:	33 24       	eor	r3, r3
    4082:	88 e0       	ldi	r24, 0x08	; 8
    4084:	a8 2e       	mov	r10, r24
    4086:	b1 2c       	mov	r11, r1
    4088:	ac 18       	sub	r10, r12
    408a:	bd 08       	sbc	r11, r13
    408c:	08 e0       	ldi	r16, 0x08	; 8
    408e:	10 e0       	ldi	r17, 0x00	; 0
	// last but not least, draw the character

#ifdef GLCD_OLD_FONTDRAW
/*================== OLD FONT DRAWING ============================*/
	GotoXY(x, y);
	for(uint8_t i=0; i<bytes; i++)	/* each vertical byte */
    4090:	66 24       	eor	r6, r6
	{
		uint16_t page = i*width; // page must be 16 bit to prevent overflow
		for(uint8_t j=0; j<width; j++) /* each column */
    4092:	99 20       	and	r9, r9
    4094:	31 f1       	breq	.+76     	; 0x40e2 <_Z7PutCharh+0x13c>
    4096:	5a 2c       	mov	r5, r10
    4098:	ea 80       	ldd	r14, Y+2	; 0x02
    409a:	fb 80       	ldd	r15, Y+3	; 0x03
 */
struct tarea starea;

Font_t 	Font;
uint8_t	FontColor;
uint8_t FontRead(const uint8_t* value) { return *value;  }
    409c:	e0 91 59 08 	lds	r30, 0x0859
    40a0:	f0 91 5a 08 	lds	r31, 0x085A
    40a4:	ee 0d       	add	r30, r14
    40a6:	ff 1d       	adc	r31, r15
    40a8:	80 81       	ld	r24, Z
		uint16_t page = i*width; // page must be 16 bit to prevent overflow
		for(uint8_t j=0; j<width; j++) /* each column */
		{
			uint8_t data = FontRead(Font+index+page+j);

			if(height > 8 && height < (i+1)*8)	/* is it last byte of multibyte tall font? */
    40aa:	58 2d       	mov	r21, r8
    40ac:	59 30       	cpi	r21, 0x09	; 9
    40ae:	50 f0       	brcs	.+20     	; 0x40c4 <_Z7PutCharh+0x11e>
    40b0:	c0 16       	cp	r12, r16
    40b2:	d1 06       	cpc	r13, r17
    40b4:	3c f4       	brge	.+14     	; 0x40c4 <_Z7PutCharh+0x11e>
			{
				data >>= (i+1)*8-height;
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	05 2c       	mov	r0, r5
    40ba:	02 c0       	rjmp	.+4      	; 0x40c0 <_Z7PutCharh+0x11a>
    40bc:	95 95       	asr	r25
    40be:	87 95       	ror	r24
    40c0:	0a 94       	dec	r0
    40c2:	e2 f7       	brpl	.-8      	; 0x40bc <_Z7PutCharh+0x116>
			}
			
			if(FontColor == BLACK) {
    40c4:	90 91 5b 08 	lds	r25, 0x085B
    40c8:	9f 3f       	cpi	r25, 0xFF	; 255
    40ca:	09 f0       	breq	.+2      	; 0x40ce <_Z7PutCharh+0x128>
				WriteData(data);
			} else {
				WriteData(~data);
    40cc:	80 95       	com	r24
    40ce:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
    40d2:	08 94       	sec
    40d4:	e1 1c       	adc	r14, r1
    40d6:	f1 1c       	adc	r15, r1
/*================== OLD FONT DRAWING ============================*/
	GotoXY(x, y);
	for(uint8_t i=0; i<bytes; i++)	/* each vertical byte */
	{
		uint16_t page = i*width; // page must be 16 bit to prevent overflow
		for(uint8_t j=0; j<width; j++) /* each column */
    40d8:	8e 2d       	mov	r24, r14
    40da:	9a 81       	ldd	r25, Y+2	; 0x02
    40dc:	89 1b       	sub	r24, r25
    40de:	89 15       	cp	r24, r9
    40e0:	e8 f2       	brcs	.-70     	; 0x409c <_Z7PutCharh+0xf6>
			} else {
				WriteData(~data);
			}
		}
		// 1px gap between chars
		if(FontColor == BLACK) {
    40e2:	80 91 5b 08 	lds	r24, 0x085B
    40e6:	8f 3f       	cpi	r24, 0xFF	; 255
    40e8:	09 f4       	brne	.+2      	; 0x40ec <_Z7PutCharh+0x146>
    40ea:	54 c0       	rjmp	.+168    	; 0x4194 <_Z7PutCharh+0x1ee>
			WriteData(0x00);
		} else {
			WriteData(0xFF);
    40ec:	8f ef       	ldi	r24, 0xFF	; 255
    40ee:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
		}
		//y_address  Coord.y
		GotoXY(x, y+8);
    40f2:	87 2d       	mov	r24, r7
    40f4:	69 81       	ldd	r22, Y+1	; 0x01
    40f6:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z11GotoAddresscc>
	// last but not least, draw the character

#ifdef GLCD_OLD_FONTDRAW
/*================== OLD FONT DRAWING ============================*/
	GotoXY(x, y);
	for(uint8_t i=0; i<bytes; i++)	/* each vertical byte */
    40fa:	63 94       	inc	r6
    40fc:	ea 81       	ldd	r30, Y+2	; 0x02
    40fe:	fb 81       	ldd	r31, Y+3	; 0x03
    4100:	e2 0d       	add	r30, r2
    4102:	f3 1d       	adc	r31, r3
    4104:	fb 83       	std	Y+3, r31	; 0x03
    4106:	ea 83       	std	Y+2, r30	; 0x02
    4108:	08 5f       	subi	r16, 0xF8	; 248
    410a:	1f 4f       	sbci	r17, 0xFF	; 255
    410c:	48 e0       	ldi	r20, 0x08	; 8
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	a4 0e       	add	r10, r20
    4112:	b5 1e       	adc	r11, r21
    4114:	64 14       	cp	r6, r4
    4116:	08 f4       	brcc	.+2      	; 0x411a <_Z7PutCharh+0x174>
    4118:	bc cf       	rjmp	.-136    	; 0x4092 <_Z7PutCharh+0xec>
		p += 8 - (dy & 7);
	}
	x = x+width+1;
/*================== END of NEW FONT DRAWING ============================*/
#endif // NEW_FONTDRAW
	return 1; // valid char
    411a:	21 e0       	ldi	r18, 0x01	; 1
    411c:	30 e0       	ldi	r19, 0x00	; 0
}
    411e:	c9 01       	movw	r24, r18
    4120:	0f 90       	pop	r0
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	cf 91       	pop	r28
    4128:	df 91       	pop	r29
    412a:	1f 91       	pop	r17
    412c:	0f 91       	pop	r16
    412e:	ff 90       	pop	r15
    4130:	ef 90       	pop	r14
    4132:	df 90       	pop	r13
    4134:	cf 90       	pop	r12
    4136:	bf 90       	pop	r11
    4138:	af 90       	pop	r10
    413a:	9f 90       	pop	r9
    413c:	8f 90       	pop	r8
    413e:	7f 90       	pop	r7
    4140:	6f 90       	pop	r6
    4142:	5f 90       	pop	r5
    4144:	4f 90       	pop	r4
    4146:	3f 90       	pop	r3
    4148:	2f 90       	pop	r2
    414a:	08 95       	ret
	
	uint16_t index = 0;
	uint8_t thielefont;

	if(c < firstChar || c >= (firstChar+charCount)) {
		return 0; // invalid char
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	e6 cf       	rjmp	.-52     	; 0x411e <_Z7PutCharh+0x178>
		 * Because there is no table for the offset of where the data
		 * for each character glyph starts, run the table and add up all the
		 * widths of all the characters prior to the character we
		 * need to locate.
		 */
	   for(uint8_t i=0; i<c; i++) {  
    4152:	11 23       	and	r17, r17
    4154:	49 f1       	breq	.+82     	; 0x41a8 <_Z7PutCharh+0x202>
void selectFont( Font_t mFont )
{
	Font = mFont;
}

int PutChar(uint8_t c)
    4156:	df 01       	movw	r26, r30
    4158:	16 96       	adiw	r26, 0x06	; 6
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
 */
struct tarea starea;

Font_t 	Font;
uint8_t	FontColor;
uint8_t FontRead(const uint8_t* value) { return *value;  }
    4160:	9d 91       	ld	r25, X+
		 * for each character glyph starts, run the table and add up all the
		 * widths of all the characters prior to the character we
		 * need to locate.
		 */
	   for(uint8_t i=0; i<c; i++) {  
		 index += FontRead(Font+FONT_WIDTH_TABLE+i);
    4162:	29 0f       	add	r18, r25
    4164:	31 1d       	adc	r19, r1
		 * Because there is no table for the offset of where the data
		 * for each character glyph starts, run the table and add up all the
		 * widths of all the characters prior to the character we
		 * need to locate.
		 */
	   for(uint8_t i=0; i<c; i++) {  
    4166:	8f 5f       	subi	r24, 0xFF	; 255
    4168:	81 17       	cp	r24, r17
    416a:	d0 f3       	brcs	.-12     	; 0x4160 <_Z7PutCharh+0x1ba>
		 * data for each vertical 8 pixels.
		 * The index is then adjusted to skip over the font width data
		 * and the font header information.
		 */

	   index = index*bytes+charCount+FONT_WIDTH_TABLE;
    416c:	44 2d       	mov	r20, r4
    416e:	50 e0       	ldi	r21, 0x00	; 0
    4170:	24 9f       	mul	r18, r20
    4172:	b0 01       	movw	r22, r0
    4174:	25 9f       	mul	r18, r21
    4176:	70 0d       	add	r23, r0
    4178:	34 9f       	mul	r19, r20
    417a:	70 0d       	add	r23, r0
    417c:	11 24       	eor	r1, r1
    417e:	a7 01       	movw	r20, r14
    4180:	4a 5f       	subi	r20, 0xFA	; 250
    4182:	5f 4f       	sbci	r21, 0xFF	; 255
    4184:	46 0f       	add	r20, r22
    4186:	57 1f       	adc	r21, r23
    4188:	5b 83       	std	Y+3, r21	; 0x03
    418a:	4a 83       	std	Y+2, r20	; 0x02
 */
struct tarea starea;

Font_t 	Font;
uint8_t	FontColor;
uint8_t FontRead(const uint8_t* value) { return *value;  }
    418c:	e1 0f       	add	r30, r17
    418e:	f1 1d       	adc	r31, r1
    4190:	96 80       	ldd	r9, Z+6	; 0x06
    4192:	67 cf       	rjmp	.-306    	; 0x4062 <_Z7PutCharh+0xbc>
				WriteData(~data);
			}
		}
		// 1px gap between chars
		if(FontColor == BLACK) {
			WriteData(0x00);
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z14LCD_write_datah>
    419a:	ab cf       	rjmp	.-170    	; 0x40f2 <_Z7PutCharh+0x14c>
	 * Fake a newline to complete it.
	 */

	if(need_scroll)
	{
		PutChar('\n'); // fake a newline to cause wrap/scroll
    419c:	8a e0       	ldi	r24, 0x0A	; 10
    419e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_Z7PutCharh>
		need_scroll = 0;
    41a2:	10 92 53 08 	sts	0x0853, r1
    41a6:	62 cf       	rjmp	.-316    	; 0x406c <_Z7PutCharh+0xc6>
		 * Because there is no table for the offset of where the data
		 * for each character glyph starts, run the table and add up all the
		 * widths of all the characters prior to the character we
		 * need to locate.
		 */
	   for(uint8_t i=0; i<c; i++) {  
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	df cf       	rjmp	.-66     	; 0x416c <_Z7PutCharh+0x1c6>

000041ae <_Z9aText_OutPc>:
#endif // NEW_FONTDRAW
	return 1; // valid char
}

int aText_Out( char* mString )
{
    41ae:	ef 92       	push	r14
    41b0:	ff 92       	push	r15
    41b2:	0f 93       	push	r16
    41b4:	1f 93       	push	r17
    41b6:	cf 93       	push	r28
    41b8:	df 93       	push	r29
	int i;	
	int length = strlen(mString);
    41ba:	dc 01       	movw	r26, r24
    41bc:	0d 90       	ld	r0, X+
    41be:	00 20       	and	r0, r0
    41c0:	e9 f7       	brne	.-6      	; 0x41bc <_Z9aText_OutPc+0xe>
    41c2:	7d 01       	movw	r14, r26
    41c4:	08 94       	sec
    41c6:	e1 08       	sbc	r14, r1
    41c8:	f1 08       	sbc	r15, r1
    41ca:	e8 1a       	sub	r14, r24
    41cc:	f9 0a       	sbc	r15, r25
	for (i=0; i<length; i++)
    41ce:	1e 14       	cp	r1, r14
    41d0:	1f 04       	cpc	r1, r15
    41d2:	ac f4       	brge	.+42     	; 0x41fe <_Z9aText_OutPc+0x50>
    41d4:	08 2f       	mov	r16, r24
    41d6:	19 2f       	mov	r17, r25
    41d8:	c0 e0       	ldi	r28, 0x00	; 0
    41da:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PutChar( (uint8_t)mString[i] );
    41dc:	f8 01       	movw	r30, r16
    41de:	81 91       	ld	r24, Z+
    41e0:	8f 01       	movw	r16, r30
    41e2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_Z7PutCharh>

int aText_Out( char* mString )
{
	int i;	
	int length = strlen(mString);
	for (i=0; i<length; i++)
    41e6:	21 96       	adiw	r28, 0x01	; 1
    41e8:	ce 15       	cp	r28, r14
    41ea:	df 05       	cpc	r29, r15
    41ec:	bc f3       	brlt	.-18     	; 0x41dc <_Z9aText_OutPc+0x2e>
	{
		PutChar( (uint8_t)mString[i] );
	}
	return i;	// number chars drawn
}
    41ee:	c7 01       	movw	r24, r14
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	1f 91       	pop	r17
    41f6:	0f 91       	pop	r16
    41f8:	ff 90       	pop	r15
    41fa:	ef 90       	pop	r14
    41fc:	08 95       	ret

int aText_Out( char* mString )
{
	int i;	
	int length = strlen(mString);
	for (i=0; i<length; i++)
    41fe:	ee 24       	eor	r14, r14
    4200:	ff 24       	eor	r15, r15
    4202:	f5 cf       	rjmp	.-22     	; 0x41ee <_Z9aText_OutPc+0x40>

00004204 <__fixunssfsi>:
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	7b 01       	movw	r14, r22
    420e:	8c 01       	movw	r16, r24
    4210:	20 e0       	ldi	r18, 0x00	; 0
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	40 e0       	ldi	r20, 0x00	; 0
    4216:	5f e4       	ldi	r21, 0x4F	; 79
    4218:	0e 94 ae 24 	call	0x495c	; 0x495c <__gesf2>
    421c:	87 fd       	sbrc	r24, 7
    421e:	11 c0       	rjmp	.+34     	; 0x4242 <__fixunssfsi+0x3e>
    4220:	c8 01       	movw	r24, r16
    4222:	b7 01       	movw	r22, r14
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e0       	ldi	r20, 0x00	; 0
    422a:	5f e4       	ldi	r21, 0x4F	; 79
    422c:	0e 94 a5 22 	call	0x454a	; 0x454a <__subsf3>
    4230:	0e 94 6e 25 	call	0x4adc	; 0x4adc <__fixsfsi>
    4234:	9b 01       	movw	r18, r22
    4236:	ac 01       	movw	r20, r24
    4238:	20 50       	subi	r18, 0x00	; 0
    423a:	30 40       	sbci	r19, 0x00	; 0
    423c:	40 40       	sbci	r20, 0x00	; 0
    423e:	50 48       	sbci	r21, 0x80	; 128
    4240:	06 c0       	rjmp	.+12     	; 0x424e <__fixunssfsi+0x4a>
    4242:	c8 01       	movw	r24, r16
    4244:	b7 01       	movw	r22, r14
    4246:	0e 94 6e 25 	call	0x4adc	; 0x4adc <__fixsfsi>
    424a:	9b 01       	movw	r18, r22
    424c:	ac 01       	movw	r20, r24
    424e:	b9 01       	movw	r22, r18
    4250:	ca 01       	movw	r24, r20
    4252:	1f 91       	pop	r17
    4254:	0f 91       	pop	r16
    4256:	ff 90       	pop	r15
    4258:	ef 90       	pop	r14
    425a:	08 95       	ret

0000425c <_fpadd_parts>:
    425c:	a0 e0       	ldi	r26, 0x00	; 0
    425e:	b0 e0       	ldi	r27, 0x00	; 0
    4260:	e4 e3       	ldi	r30, 0x34	; 52
    4262:	f1 e2       	ldi	r31, 0x21	; 33
    4264:	0c 94 89 28 	jmp	0x5112	; 0x5112 <__prologue_saves__+0x8>
    4268:	fc 01       	movw	r30, r24
    426a:	ea 01       	movw	r28, r20
    426c:	80 81       	ld	r24, Z
    426e:	82 30       	cpi	r24, 0x02	; 2
    4270:	08 f4       	brcc	.+2      	; 0x4274 <_fpadd_parts+0x18>
    4272:	38 c1       	rjmp	.+624    	; 0x44e4 <_fpadd_parts+0x288>
    4274:	db 01       	movw	r26, r22
    4276:	9c 91       	ld	r25, X
    4278:	92 30       	cpi	r25, 0x02	; 2
    427a:	08 f4       	brcc	.+2      	; 0x427e <_fpadd_parts+0x22>
    427c:	30 c1       	rjmp	.+608    	; 0x44de <_fpadd_parts+0x282>
    427e:	84 30       	cpi	r24, 0x04	; 4
    4280:	59 f4       	brne	.+22     	; 0x4298 <_fpadd_parts+0x3c>
    4282:	94 30       	cpi	r25, 0x04	; 4
    4284:	09 f0       	breq	.+2      	; 0x4288 <_fpadd_parts+0x2c>
    4286:	2e c1       	rjmp	.+604    	; 0x44e4 <_fpadd_parts+0x288>
    4288:	91 81       	ldd	r25, Z+1	; 0x01
    428a:	11 96       	adiw	r26, 0x01	; 1
    428c:	8c 91       	ld	r24, X
    428e:	11 97       	sbiw	r26, 0x01	; 1
    4290:	98 17       	cp	r25, r24
    4292:	09 f0       	breq	.+2      	; 0x4296 <_fpadd_parts+0x3a>
    4294:	21 c1       	rjmp	.+578    	; 0x44d8 <_fpadd_parts+0x27c>
    4296:	26 c1       	rjmp	.+588    	; 0x44e4 <_fpadd_parts+0x288>
    4298:	94 30       	cpi	r25, 0x04	; 4
    429a:	09 f4       	brne	.+2      	; 0x429e <_fpadd_parts+0x42>
    429c:	20 c1       	rjmp	.+576    	; 0x44de <_fpadd_parts+0x282>
    429e:	92 30       	cpi	r25, 0x02	; 2
    42a0:	b1 f4       	brne	.+44     	; 0x42ce <_fpadd_parts+0x72>
    42a2:	82 30       	cpi	r24, 0x02	; 2
    42a4:	09 f0       	breq	.+2      	; 0x42a8 <_fpadd_parts+0x4c>
    42a6:	1e c1       	rjmp	.+572    	; 0x44e4 <_fpadd_parts+0x288>
    42a8:	ca 01       	movw	r24, r20
    42aa:	af 01       	movw	r20, r30
    42ac:	28 e0       	ldi	r18, 0x08	; 8
    42ae:	da 01       	movw	r26, r20
    42b0:	0d 90       	ld	r0, X+
    42b2:	ad 01       	movw	r20, r26
    42b4:	dc 01       	movw	r26, r24
    42b6:	0d 92       	st	X+, r0
    42b8:	cd 01       	movw	r24, r26
    42ba:	21 50       	subi	r18, 0x01	; 1
    42bc:	c1 f7       	brne	.-16     	; 0x42ae <_fpadd_parts+0x52>
    42be:	db 01       	movw	r26, r22
    42c0:	11 96       	adiw	r26, 0x01	; 1
    42c2:	8c 91       	ld	r24, X
    42c4:	11 97       	sbiw	r26, 0x01	; 1
    42c6:	91 81       	ldd	r25, Z+1	; 0x01
    42c8:	89 23       	and	r24, r25
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	0a c1       	rjmp	.+532    	; 0x44e2 <_fpadd_parts+0x286>
    42ce:	82 30       	cpi	r24, 0x02	; 2
    42d0:	09 f4       	brne	.+2      	; 0x42d4 <_fpadd_parts+0x78>
    42d2:	05 c1       	rjmp	.+522    	; 0x44de <_fpadd_parts+0x282>
    42d4:	c2 80       	ldd	r12, Z+2	; 0x02
    42d6:	d3 80       	ldd	r13, Z+3	; 0x03
    42d8:	db 01       	movw	r26, r22
    42da:	12 96       	adiw	r26, 0x02	; 2
    42dc:	6d 90       	ld	r6, X+
    42de:	7c 90       	ld	r7, X
    42e0:	13 97       	sbiw	r26, 0x03	; 3
    42e2:	24 81       	ldd	r18, Z+4	; 0x04
    42e4:	35 81       	ldd	r19, Z+5	; 0x05
    42e6:	46 81       	ldd	r20, Z+6	; 0x06
    42e8:	57 81       	ldd	r21, Z+7	; 0x07
    42ea:	14 96       	adiw	r26, 0x04	; 4
    42ec:	ed 90       	ld	r14, X+
    42ee:	fd 90       	ld	r15, X+
    42f0:	0d 91       	ld	r16, X+
    42f2:	1c 91       	ld	r17, X
    42f4:	17 97       	sbiw	r26, 0x07	; 7
    42f6:	c6 01       	movw	r24, r12
    42f8:	86 19       	sub	r24, r6
    42fa:	97 09       	sbc	r25, r7
    42fc:	5c 01       	movw	r10, r24
    42fe:	97 ff       	sbrs	r25, 7
    4300:	04 c0       	rjmp	.+8      	; 0x430a <_fpadd_parts+0xae>
    4302:	aa 24       	eor	r10, r10
    4304:	bb 24       	eor	r11, r11
    4306:	a8 1a       	sub	r10, r24
    4308:	b9 0a       	sbc	r11, r25
    430a:	b0 e2       	ldi	r27, 0x20	; 32
    430c:	ab 16       	cp	r10, r27
    430e:	b1 04       	cpc	r11, r1
    4310:	0c f0       	brlt	.+2      	; 0x4314 <_fpadd_parts+0xb8>
    4312:	61 c0       	rjmp	.+194    	; 0x43d6 <_fpadd_parts+0x17a>
    4314:	18 16       	cp	r1, r24
    4316:	19 06       	cpc	r1, r25
    4318:	6c f5       	brge	.+90     	; 0x4374 <_fpadd_parts+0x118>
    431a:	37 01       	movw	r6, r14
    431c:	48 01       	movw	r8, r16
    431e:	0a 2c       	mov	r0, r10
    4320:	04 c0       	rjmp	.+8      	; 0x432a <_fpadd_parts+0xce>
    4322:	96 94       	lsr	r9
    4324:	87 94       	ror	r8
    4326:	77 94       	ror	r7
    4328:	67 94       	ror	r6
    432a:	0a 94       	dec	r0
    432c:	d2 f7       	brpl	.-12     	; 0x4322 <_fpadd_parts+0xc6>
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	a0 e0       	ldi	r26, 0x00	; 0
    4334:	b0 e0       	ldi	r27, 0x00	; 0
    4336:	0a 2c       	mov	r0, r10
    4338:	04 c0       	rjmp	.+8      	; 0x4342 <_fpadd_parts+0xe6>
    433a:	88 0f       	add	r24, r24
    433c:	99 1f       	adc	r25, r25
    433e:	aa 1f       	adc	r26, r26
    4340:	bb 1f       	adc	r27, r27
    4342:	0a 94       	dec	r0
    4344:	d2 f7       	brpl	.-12     	; 0x433a <_fpadd_parts+0xde>
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	a1 09       	sbc	r26, r1
    434a:	b1 09       	sbc	r27, r1
    434c:	8e 21       	and	r24, r14
    434e:	9f 21       	and	r25, r15
    4350:	a0 23       	and	r26, r16
    4352:	b1 23       	and	r27, r17
    4354:	ee 24       	eor	r14, r14
    4356:	ff 24       	eor	r15, r15
    4358:	87 01       	movw	r16, r14
    435a:	e3 94       	inc	r14
    435c:	00 97       	sbiw	r24, 0x00	; 0
    435e:	a1 05       	cpc	r26, r1
    4360:	b1 05       	cpc	r27, r1
    4362:	19 f4       	brne	.+6      	; 0x436a <_fpadd_parts+0x10e>
    4364:	ee 24       	eor	r14, r14
    4366:	ff 24       	eor	r15, r15
    4368:	87 01       	movw	r16, r14
    436a:	e6 28       	or	r14, r6
    436c:	f7 28       	or	r15, r7
    436e:	08 29       	or	r16, r8
    4370:	19 29       	or	r17, r9
    4372:	3c c0       	rjmp	.+120    	; 0x43ec <_fpadd_parts+0x190>
    4374:	00 97       	sbiw	r24, 0x00	; 0
    4376:	d1 f1       	breq	.+116    	; 0x43ec <_fpadd_parts+0x190>
    4378:	ca 0c       	add	r12, r10
    437a:	db 1c       	adc	r13, r11
    437c:	39 01       	movw	r6, r18
    437e:	4a 01       	movw	r8, r20
    4380:	0a 2c       	mov	r0, r10
    4382:	04 c0       	rjmp	.+8      	; 0x438c <_fpadd_parts+0x130>
    4384:	96 94       	lsr	r9
    4386:	87 94       	ror	r8
    4388:	77 94       	ror	r7
    438a:	67 94       	ror	r6
    438c:	0a 94       	dec	r0
    438e:	d2 f7       	brpl	.-12     	; 0x4384 <_fpadd_parts+0x128>
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	a0 e0       	ldi	r26, 0x00	; 0
    4396:	b0 e0       	ldi	r27, 0x00	; 0
    4398:	0a 2c       	mov	r0, r10
    439a:	04 c0       	rjmp	.+8      	; 0x43a4 <_fpadd_parts+0x148>
    439c:	88 0f       	add	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	aa 1f       	adc	r26, r26
    43a2:	bb 1f       	adc	r27, r27
    43a4:	0a 94       	dec	r0
    43a6:	d2 f7       	brpl	.-12     	; 0x439c <_fpadd_parts+0x140>
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	a1 09       	sbc	r26, r1
    43ac:	b1 09       	sbc	r27, r1
    43ae:	82 23       	and	r24, r18
    43b0:	93 23       	and	r25, r19
    43b2:	a4 23       	and	r26, r20
    43b4:	b5 23       	and	r27, r21
    43b6:	21 e0       	ldi	r18, 0x01	; 1
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	40 e0       	ldi	r20, 0x00	; 0
    43bc:	50 e0       	ldi	r21, 0x00	; 0
    43be:	00 97       	sbiw	r24, 0x00	; 0
    43c0:	a1 05       	cpc	r26, r1
    43c2:	b1 05       	cpc	r27, r1
    43c4:	19 f4       	brne	.+6      	; 0x43cc <_fpadd_parts+0x170>
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	a9 01       	movw	r20, r18
    43cc:	26 29       	or	r18, r6
    43ce:	37 29       	or	r19, r7
    43d0:	48 29       	or	r20, r8
    43d2:	59 29       	or	r21, r9
    43d4:	0b c0       	rjmp	.+22     	; 0x43ec <_fpadd_parts+0x190>
    43d6:	6c 14       	cp	r6, r12
    43d8:	7d 04       	cpc	r7, r13
    43da:	24 f4       	brge	.+8      	; 0x43e4 <_fpadd_parts+0x188>
    43dc:	ee 24       	eor	r14, r14
    43de:	ff 24       	eor	r15, r15
    43e0:	87 01       	movw	r16, r14
    43e2:	04 c0       	rjmp	.+8      	; 0x43ec <_fpadd_parts+0x190>
    43e4:	63 01       	movw	r12, r6
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	a9 01       	movw	r20, r18
    43ec:	81 81       	ldd	r24, Z+1	; 0x01
    43ee:	fb 01       	movw	r30, r22
    43f0:	91 81       	ldd	r25, Z+1	; 0x01
    43f2:	89 17       	cp	r24, r25
    43f4:	09 f4       	brne	.+2      	; 0x43f8 <_fpadd_parts+0x19c>
    43f6:	45 c0       	rjmp	.+138    	; 0x4482 <_fpadd_parts+0x226>
    43f8:	88 23       	and	r24, r24
    43fa:	49 f0       	breq	.+18     	; 0x440e <_fpadd_parts+0x1b2>
    43fc:	d8 01       	movw	r26, r16
    43fe:	c7 01       	movw	r24, r14
    4400:	82 1b       	sub	r24, r18
    4402:	93 0b       	sbc	r25, r19
    4404:	a4 0b       	sbc	r26, r20
    4406:	b5 0b       	sbc	r27, r21
    4408:	9c 01       	movw	r18, r24
    440a:	ad 01       	movw	r20, r26
    440c:	04 c0       	rjmp	.+8      	; 0x4416 <_fpadd_parts+0x1ba>
    440e:	2e 19       	sub	r18, r14
    4410:	3f 09       	sbc	r19, r15
    4412:	40 0b       	sbc	r20, r16
    4414:	51 0b       	sbc	r21, r17
    4416:	57 fd       	sbrc	r21, 7
    4418:	04 c0       	rjmp	.+8      	; 0x4422 <_fpadd_parts+0x1c6>
    441a:	19 82       	std	Y+1, r1	; 0x01
    441c:	db 82       	std	Y+3, r13	; 0x03
    441e:	ca 82       	std	Y+2, r12	; 0x02
    4420:	0b c0       	rjmp	.+22     	; 0x4438 <_fpadd_parts+0x1dc>
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	89 83       	std	Y+1, r24	; 0x01
    4426:	db 82       	std	Y+3, r13	; 0x03
    4428:	ca 82       	std	Y+2, r12	; 0x02
    442a:	50 95       	com	r21
    442c:	40 95       	com	r20
    442e:	30 95       	com	r19
    4430:	21 95       	neg	r18
    4432:	3f 4f       	sbci	r19, 0xFF	; 255
    4434:	4f 4f       	sbci	r20, 0xFF	; 255
    4436:	5f 4f       	sbci	r21, 0xFF	; 255
    4438:	2c 83       	std	Y+4, r18	; 0x04
    443a:	3d 83       	std	Y+5, r19	; 0x05
    443c:	4e 83       	std	Y+6, r20	; 0x06
    443e:	5f 83       	std	Y+7, r21	; 0x07
    4440:	0d c0       	rjmp	.+26     	; 0x445c <_fpadd_parts+0x200>
    4442:	88 0f       	add	r24, r24
    4444:	99 1f       	adc	r25, r25
    4446:	aa 1f       	adc	r26, r26
    4448:	bb 1f       	adc	r27, r27
    444a:	8c 83       	std	Y+4, r24	; 0x04
    444c:	9d 83       	std	Y+5, r25	; 0x05
    444e:	ae 83       	std	Y+6, r26	; 0x06
    4450:	bf 83       	std	Y+7, r27	; 0x07
    4452:	8a 81       	ldd	r24, Y+2	; 0x02
    4454:	9b 81       	ldd	r25, Y+3	; 0x03
    4456:	01 97       	sbiw	r24, 0x01	; 1
    4458:	9b 83       	std	Y+3, r25	; 0x03
    445a:	8a 83       	std	Y+2, r24	; 0x02
    445c:	8c 81       	ldd	r24, Y+4	; 0x04
    445e:	9d 81       	ldd	r25, Y+5	; 0x05
    4460:	ae 81       	ldd	r26, Y+6	; 0x06
    4462:	bf 81       	ldd	r27, Y+7	; 0x07
    4464:	9c 01       	movw	r18, r24
    4466:	ad 01       	movw	r20, r26
    4468:	21 50       	subi	r18, 0x01	; 1
    446a:	30 40       	sbci	r19, 0x00	; 0
    446c:	40 40       	sbci	r20, 0x00	; 0
    446e:	50 40       	sbci	r21, 0x00	; 0
    4470:	2f 3f       	cpi	r18, 0xFF	; 255
    4472:	ef ef       	ldi	r30, 0xFF	; 255
    4474:	3e 07       	cpc	r19, r30
    4476:	ef ef       	ldi	r30, 0xFF	; 255
    4478:	4e 07       	cpc	r20, r30
    447a:	ef e3       	ldi	r30, 0x3F	; 63
    447c:	5e 07       	cpc	r21, r30
    447e:	08 f3       	brcs	.-62     	; 0x4442 <_fpadd_parts+0x1e6>
    4480:	0b c0       	rjmp	.+22     	; 0x4498 <_fpadd_parts+0x23c>
    4482:	89 83       	std	Y+1, r24	; 0x01
    4484:	db 82       	std	Y+3, r13	; 0x03
    4486:	ca 82       	std	Y+2, r12	; 0x02
    4488:	2e 0d       	add	r18, r14
    448a:	3f 1d       	adc	r19, r15
    448c:	40 1f       	adc	r20, r16
    448e:	51 1f       	adc	r21, r17
    4490:	2c 83       	std	Y+4, r18	; 0x04
    4492:	3d 83       	std	Y+5, r19	; 0x05
    4494:	4e 83       	std	Y+6, r20	; 0x06
    4496:	5f 83       	std	Y+7, r21	; 0x07
    4498:	83 e0       	ldi	r24, 0x03	; 3
    449a:	88 83       	st	Y, r24
    449c:	2c 81       	ldd	r18, Y+4	; 0x04
    449e:	3d 81       	ldd	r19, Y+5	; 0x05
    44a0:	4e 81       	ldd	r20, Y+6	; 0x06
    44a2:	5f 81       	ldd	r21, Y+7	; 0x07
    44a4:	57 ff       	sbrs	r21, 7
    44a6:	1d c0       	rjmp	.+58     	; 0x44e2 <_fpadd_parts+0x286>
    44a8:	da 01       	movw	r26, r20
    44aa:	c9 01       	movw	r24, r18
    44ac:	81 70       	andi	r24, 0x01	; 1
    44ae:	90 70       	andi	r25, 0x00	; 0
    44b0:	a0 70       	andi	r26, 0x00	; 0
    44b2:	b0 70       	andi	r27, 0x00	; 0
    44b4:	56 95       	lsr	r21
    44b6:	47 95       	ror	r20
    44b8:	37 95       	ror	r19
    44ba:	27 95       	ror	r18
    44bc:	82 2b       	or	r24, r18
    44be:	93 2b       	or	r25, r19
    44c0:	a4 2b       	or	r26, r20
    44c2:	b5 2b       	or	r27, r21
    44c4:	8c 83       	std	Y+4, r24	; 0x04
    44c6:	9d 83       	std	Y+5, r25	; 0x05
    44c8:	ae 83       	std	Y+6, r26	; 0x06
    44ca:	bf 83       	std	Y+7, r27	; 0x07
    44cc:	8a 81       	ldd	r24, Y+2	; 0x02
    44ce:	9b 81       	ldd	r25, Y+3	; 0x03
    44d0:	01 96       	adiw	r24, 0x01	; 1
    44d2:	9b 83       	std	Y+3, r25	; 0x03
    44d4:	8a 83       	std	Y+2, r24	; 0x02
    44d6:	05 c0       	rjmp	.+10     	; 0x44e2 <_fpadd_parts+0x286>
    44d8:	e8 e7       	ldi	r30, 0x78	; 120
    44da:	f6 e0       	ldi	r31, 0x06	; 6
    44dc:	03 c0       	rjmp	.+6      	; 0x44e4 <_fpadd_parts+0x288>
    44de:	fb 01       	movw	r30, r22
    44e0:	01 c0       	rjmp	.+2      	; 0x44e4 <_fpadd_parts+0x288>
    44e2:	fe 01       	movw	r30, r28
    44e4:	cf 01       	movw	r24, r30
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	ee e0       	ldi	r30, 0x0E	; 14
    44ec:	0c 94 a5 28 	jmp	0x514a	; 0x514a <__epilogue_restores__+0x8>

000044f0 <__addsf3>:
    44f0:	a0 e2       	ldi	r26, 0x20	; 32
    44f2:	b0 e0       	ldi	r27, 0x00	; 0
    44f4:	ee e7       	ldi	r30, 0x7E	; 126
    44f6:	f2 e2       	ldi	r31, 0x22	; 34
    44f8:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x18>
    44fc:	69 83       	std	Y+1, r22	; 0x01
    44fe:	7a 83       	std	Y+2, r23	; 0x02
    4500:	8b 83       	std	Y+3, r24	; 0x03
    4502:	9c 83       	std	Y+4, r25	; 0x04
    4504:	2d 83       	std	Y+5, r18	; 0x05
    4506:	3e 83       	std	Y+6, r19	; 0x06
    4508:	4f 83       	std	Y+7, r20	; 0x07
    450a:	58 87       	std	Y+8, r21	; 0x08
    450c:	89 e0       	ldi	r24, 0x09	; 9
    450e:	e8 2e       	mov	r14, r24
    4510:	f1 2c       	mov	r15, r1
    4512:	ec 0e       	add	r14, r28
    4514:	fd 1e       	adc	r15, r29
    4516:	ce 01       	movw	r24, r28
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	b7 01       	movw	r22, r14
    451c:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    4520:	8e 01       	movw	r16, r28
    4522:	0f 5e       	subi	r16, 0xEF	; 239
    4524:	1f 4f       	sbci	r17, 0xFF	; 255
    4526:	ce 01       	movw	r24, r28
    4528:	05 96       	adiw	r24, 0x05	; 5
    452a:	b8 01       	movw	r22, r16
    452c:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    4530:	c7 01       	movw	r24, r14
    4532:	b8 01       	movw	r22, r16
    4534:	ae 01       	movw	r20, r28
    4536:	47 5e       	subi	r20, 0xE7	; 231
    4538:	5f 4f       	sbci	r21, 0xFF	; 255
    453a:	0e 94 2e 21 	call	0x425c	; 0x425c <_fpadd_parts>
    453e:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__pack_f>
    4542:	a0 96       	adiw	r28, 0x20	; 32
    4544:	e6 e0       	ldi	r30, 0x06	; 6
    4546:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x18>

0000454a <__subsf3>:
    454a:	a0 e2       	ldi	r26, 0x20	; 32
    454c:	b0 e0       	ldi	r27, 0x00	; 0
    454e:	eb ea       	ldi	r30, 0xAB	; 171
    4550:	f2 e2       	ldi	r31, 0x22	; 34
    4552:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x18>
    4556:	69 83       	std	Y+1, r22	; 0x01
    4558:	7a 83       	std	Y+2, r23	; 0x02
    455a:	8b 83       	std	Y+3, r24	; 0x03
    455c:	9c 83       	std	Y+4, r25	; 0x04
    455e:	2d 83       	std	Y+5, r18	; 0x05
    4560:	3e 83       	std	Y+6, r19	; 0x06
    4562:	4f 83       	std	Y+7, r20	; 0x07
    4564:	58 87       	std	Y+8, r21	; 0x08
    4566:	8e 01       	movw	r16, r28
    4568:	07 5f       	subi	r16, 0xF7	; 247
    456a:	1f 4f       	sbci	r17, 0xFF	; 255
    456c:	ce 01       	movw	r24, r28
    456e:	01 96       	adiw	r24, 0x01	; 1
    4570:	b8 01       	movw	r22, r16
    4572:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    4576:	91 e1       	ldi	r25, 0x11	; 17
    4578:	e9 2e       	mov	r14, r25
    457a:	f1 2c       	mov	r15, r1
    457c:	ec 0e       	add	r14, r28
    457e:	fd 1e       	adc	r15, r29
    4580:	ce 01       	movw	r24, r28
    4582:	05 96       	adiw	r24, 0x05	; 5
    4584:	b7 01       	movw	r22, r14
    4586:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    458a:	8a 89       	ldd	r24, Y+18	; 0x12
    458c:	91 e0       	ldi	r25, 0x01	; 1
    458e:	89 27       	eor	r24, r25
    4590:	8a 8b       	std	Y+18, r24	; 0x12
    4592:	c8 01       	movw	r24, r16
    4594:	b7 01       	movw	r22, r14
    4596:	ae 01       	movw	r20, r28
    4598:	47 5e       	subi	r20, 0xE7	; 231
    459a:	5f 4f       	sbci	r21, 0xFF	; 255
    459c:	0e 94 2e 21 	call	0x425c	; 0x425c <_fpadd_parts>
    45a0:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__pack_f>
    45a4:	a0 96       	adiw	r28, 0x20	; 32
    45a6:	e6 e0       	ldi	r30, 0x06	; 6
    45a8:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x18>

000045ac <__mulsf3>:
    45ac:	a0 e2       	ldi	r26, 0x20	; 32
    45ae:	b0 e0       	ldi	r27, 0x00	; 0
    45b0:	ec ed       	ldi	r30, 0xDC	; 220
    45b2:	f2 e2       	ldi	r31, 0x22	; 34
    45b4:	0c 94 85 28 	jmp	0x510a	; 0x510a <__prologue_saves__>
    45b8:	69 83       	std	Y+1, r22	; 0x01
    45ba:	7a 83       	std	Y+2, r23	; 0x02
    45bc:	8b 83       	std	Y+3, r24	; 0x03
    45be:	9c 83       	std	Y+4, r25	; 0x04
    45c0:	2d 83       	std	Y+5, r18	; 0x05
    45c2:	3e 83       	std	Y+6, r19	; 0x06
    45c4:	4f 83       	std	Y+7, r20	; 0x07
    45c6:	58 87       	std	Y+8, r21	; 0x08
    45c8:	ce 01       	movw	r24, r28
    45ca:	01 96       	adiw	r24, 0x01	; 1
    45cc:	be 01       	movw	r22, r28
    45ce:	67 5f       	subi	r22, 0xF7	; 247
    45d0:	7f 4f       	sbci	r23, 0xFF	; 255
    45d2:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    45d6:	ce 01       	movw	r24, r28
    45d8:	05 96       	adiw	r24, 0x05	; 5
    45da:	be 01       	movw	r22, r28
    45dc:	6f 5e       	subi	r22, 0xEF	; 239
    45de:	7f 4f       	sbci	r23, 0xFF	; 255
    45e0:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    45e4:	99 85       	ldd	r25, Y+9	; 0x09
    45e6:	92 30       	cpi	r25, 0x02	; 2
    45e8:	78 f0       	brcs	.+30     	; 0x4608 <__mulsf3+0x5c>
    45ea:	89 89       	ldd	r24, Y+17	; 0x11
    45ec:	82 30       	cpi	r24, 0x02	; 2
    45ee:	c0 f0       	brcs	.+48     	; 0x4620 <__mulsf3+0x74>
    45f0:	94 30       	cpi	r25, 0x04	; 4
    45f2:	19 f4       	brne	.+6      	; 0x45fa <__mulsf3+0x4e>
    45f4:	82 30       	cpi	r24, 0x02	; 2
    45f6:	41 f4       	brne	.+16     	; 0x4608 <__mulsf3+0x5c>
    45f8:	cb c0       	rjmp	.+406    	; 0x4790 <__mulsf3+0x1e4>
    45fa:	84 30       	cpi	r24, 0x04	; 4
    45fc:	19 f4       	brne	.+6      	; 0x4604 <__mulsf3+0x58>
    45fe:	92 30       	cpi	r25, 0x02	; 2
    4600:	79 f4       	brne	.+30     	; 0x4620 <__mulsf3+0x74>
    4602:	c6 c0       	rjmp	.+396    	; 0x4790 <__mulsf3+0x1e4>
    4604:	92 30       	cpi	r25, 0x02	; 2
    4606:	51 f4       	brne	.+20     	; 0x461c <__mulsf3+0x70>
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	2a 85       	ldd	r18, Y+10	; 0x0a
    460c:	9a 89       	ldd	r25, Y+18	; 0x12
    460e:	29 17       	cp	r18, r25
    4610:	09 f4       	brne	.+2      	; 0x4614 <__mulsf3+0x68>
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	8a 87       	std	Y+10, r24	; 0x0a
    4616:	ce 01       	movw	r24, r28
    4618:	09 96       	adiw	r24, 0x09	; 9
    461a:	bc c0       	rjmp	.+376    	; 0x4794 <__mulsf3+0x1e8>
    461c:	82 30       	cpi	r24, 0x02	; 2
    461e:	51 f4       	brne	.+20     	; 0x4634 <__mulsf3+0x88>
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	2a 85       	ldd	r18, Y+10	; 0x0a
    4624:	9a 89       	ldd	r25, Y+18	; 0x12
    4626:	29 17       	cp	r18, r25
    4628:	09 f4       	brne	.+2      	; 0x462c <__mulsf3+0x80>
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	8a 8b       	std	Y+18, r24	; 0x12
    462e:	ce 01       	movw	r24, r28
    4630:	41 96       	adiw	r24, 0x11	; 17
    4632:	b0 c0       	rjmp	.+352    	; 0x4794 <__mulsf3+0x1e8>
    4634:	6d 84       	ldd	r6, Y+13	; 0x0d
    4636:	7e 84       	ldd	r7, Y+14	; 0x0e
    4638:	8f 84       	ldd	r8, Y+15	; 0x0f
    463a:	98 88       	ldd	r9, Y+16	; 0x10
    463c:	ed 88       	ldd	r14, Y+21	; 0x15
    463e:	fe 88       	ldd	r15, Y+22	; 0x16
    4640:	0f 89       	ldd	r16, Y+23	; 0x17
    4642:	18 8d       	ldd	r17, Y+24	; 0x18
    4644:	e0 e2       	ldi	r30, 0x20	; 32
    4646:	f0 e0       	ldi	r31, 0x00	; 0
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	dc 01       	movw	r26, r24
    464e:	aa 24       	eor	r10, r10
    4650:	bb 24       	eor	r11, r11
    4652:	65 01       	movw	r12, r10
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	a9 01       	movw	r20, r18
    465a:	b3 01       	movw	r22, r6
    465c:	61 70       	andi	r22, 0x01	; 1
    465e:	70 70       	andi	r23, 0x00	; 0
    4660:	61 15       	cp	r22, r1
    4662:	71 05       	cpc	r23, r1
    4664:	d1 f0       	breq	.+52     	; 0x469a <__mulsf3+0xee>
    4666:	2e 0d       	add	r18, r14
    4668:	3f 1d       	adc	r19, r15
    466a:	40 1f       	adc	r20, r16
    466c:	51 1f       	adc	r21, r17
    466e:	15 01       	movw	r2, r10
    4670:	26 01       	movw	r4, r12
    4672:	28 0e       	add	r2, r24
    4674:	39 1e       	adc	r3, r25
    4676:	4a 1e       	adc	r4, r26
    4678:	5b 1e       	adc	r5, r27
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	a0 e0       	ldi	r26, 0x00	; 0
    4680:	b0 e0       	ldi	r27, 0x00	; 0
    4682:	2e 15       	cp	r18, r14
    4684:	3f 05       	cpc	r19, r15
    4686:	40 07       	cpc	r20, r16
    4688:	51 07       	cpc	r21, r17
    468a:	18 f0       	brcs	.+6      	; 0x4692 <__mulsf3+0xe6>
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	dc 01       	movw	r26, r24
    4692:	82 0d       	add	r24, r2
    4694:	93 1d       	adc	r25, r3
    4696:	a4 1d       	adc	r26, r4
    4698:	b5 1d       	adc	r27, r5
    469a:	aa 0c       	add	r10, r10
    469c:	bb 1c       	adc	r11, r11
    469e:	cc 1c       	adc	r12, r12
    46a0:	dd 1c       	adc	r13, r13
    46a2:	17 ff       	sbrs	r17, 7
    46a4:	09 c0       	rjmp	.+18     	; 0x46b8 <__mulsf3+0x10c>
    46a6:	61 e0       	ldi	r22, 0x01	; 1
    46a8:	26 2e       	mov	r2, r22
    46aa:	31 2c       	mov	r3, r1
    46ac:	41 2c       	mov	r4, r1
    46ae:	51 2c       	mov	r5, r1
    46b0:	a2 28       	or	r10, r2
    46b2:	b3 28       	or	r11, r3
    46b4:	c4 28       	or	r12, r4
    46b6:	d5 28       	or	r13, r5
    46b8:	31 97       	sbiw	r30, 0x01	; 1
    46ba:	49 f0       	breq	.+18     	; 0x46ce <__mulsf3+0x122>
    46bc:	ee 0c       	add	r14, r14
    46be:	ff 1c       	adc	r15, r15
    46c0:	00 1f       	adc	r16, r16
    46c2:	11 1f       	adc	r17, r17
    46c4:	96 94       	lsr	r9
    46c6:	87 94       	ror	r8
    46c8:	77 94       	ror	r7
    46ca:	67 94       	ror	r6
    46cc:	c6 cf       	rjmp	.-116    	; 0x465a <__mulsf3+0xae>
    46ce:	6b 89       	ldd	r22, Y+19	; 0x13
    46d0:	7c 89       	ldd	r23, Y+20	; 0x14
    46d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    46d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    46d6:	6e 0f       	add	r22, r30
    46d8:	7f 1f       	adc	r23, r31
    46da:	6e 5f       	subi	r22, 0xFE	; 254
    46dc:	7f 4f       	sbci	r23, 0xFF	; 255
    46de:	7c 8f       	std	Y+28, r23	; 0x1c
    46e0:	6b 8f       	std	Y+27, r22	; 0x1b
    46e2:	61 e0       	ldi	r22, 0x01	; 1
    46e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    46e6:	7a 89       	ldd	r23, Y+18	; 0x12
    46e8:	e7 17       	cp	r30, r23
    46ea:	09 f4       	brne	.+2      	; 0x46ee <__mulsf3+0x142>
    46ec:	60 e0       	ldi	r22, 0x00	; 0
    46ee:	6a 8f       	std	Y+26, r22	; 0x1a
    46f0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    46f2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    46f4:	10 c0       	rjmp	.+32     	; 0x4716 <__mulsf3+0x16a>
    46f6:	fc 01       	movw	r30, r24
    46f8:	e1 70       	andi	r30, 0x01	; 1
    46fa:	f0 70       	andi	r31, 0x00	; 0
    46fc:	30 97       	sbiw	r30, 0x00	; 0
    46fe:	29 f0       	breq	.+10     	; 0x470a <__mulsf3+0x15e>
    4700:	56 95       	lsr	r21
    4702:	47 95       	ror	r20
    4704:	37 95       	ror	r19
    4706:	27 95       	ror	r18
    4708:	50 68       	ori	r21, 0x80	; 128
    470a:	b6 95       	lsr	r27
    470c:	a7 95       	ror	r26
    470e:	97 95       	ror	r25
    4710:	87 95       	ror	r24
    4712:	6f 5f       	subi	r22, 0xFF	; 255
    4714:	7f 4f       	sbci	r23, 0xFF	; 255
    4716:	b7 fd       	sbrc	r27, 7
    4718:	ee cf       	rjmp	.-36     	; 0x46f6 <__mulsf3+0x14a>
    471a:	0c c0       	rjmp	.+24     	; 0x4734 <__mulsf3+0x188>
    471c:	88 0f       	add	r24, r24
    471e:	99 1f       	adc	r25, r25
    4720:	aa 1f       	adc	r26, r26
    4722:	bb 1f       	adc	r27, r27
    4724:	57 fd       	sbrc	r21, 7
    4726:	81 60       	ori	r24, 0x01	; 1
    4728:	22 0f       	add	r18, r18
    472a:	33 1f       	adc	r19, r19
    472c:	44 1f       	adc	r20, r20
    472e:	55 1f       	adc	r21, r21
    4730:	61 50       	subi	r22, 0x01	; 1
    4732:	70 40       	sbci	r23, 0x00	; 0
    4734:	80 30       	cpi	r24, 0x00	; 0
    4736:	e0 e0       	ldi	r30, 0x00	; 0
    4738:	9e 07       	cpc	r25, r30
    473a:	e0 e0       	ldi	r30, 0x00	; 0
    473c:	ae 07       	cpc	r26, r30
    473e:	e0 e4       	ldi	r30, 0x40	; 64
    4740:	be 07       	cpc	r27, r30
    4742:	60 f3       	brcs	.-40     	; 0x471c <__mulsf3+0x170>
    4744:	6b 8f       	std	Y+27, r22	; 0x1b
    4746:	7c 8f       	std	Y+28, r23	; 0x1c
    4748:	6f e7       	ldi	r22, 0x7F	; 127
    474a:	e6 2e       	mov	r14, r22
    474c:	f1 2c       	mov	r15, r1
    474e:	01 2d       	mov	r16, r1
    4750:	11 2d       	mov	r17, r1
    4752:	e8 22       	and	r14, r24
    4754:	f9 22       	and	r15, r25
    4756:	0a 23       	and	r16, r26
    4758:	1b 23       	and	r17, r27
    475a:	60 e4       	ldi	r22, 0x40	; 64
    475c:	e6 16       	cp	r14, r22
    475e:	f1 04       	cpc	r15, r1
    4760:	01 05       	cpc	r16, r1
    4762:	11 05       	cpc	r17, r1
    4764:	61 f4       	brne	.+24     	; 0x477e <__mulsf3+0x1d2>
    4766:	87 fd       	sbrc	r24, 7
    4768:	0a c0       	rjmp	.+20     	; 0x477e <__mulsf3+0x1d2>
    476a:	21 15       	cp	r18, r1
    476c:	31 05       	cpc	r19, r1
    476e:	41 05       	cpc	r20, r1
    4770:	51 05       	cpc	r21, r1
    4772:	29 f0       	breq	.+10     	; 0x477e <__mulsf3+0x1d2>
    4774:	80 5c       	subi	r24, 0xC0	; 192
    4776:	9f 4f       	sbci	r25, 0xFF	; 255
    4778:	af 4f       	sbci	r26, 0xFF	; 255
    477a:	bf 4f       	sbci	r27, 0xFF	; 255
    477c:	80 78       	andi	r24, 0x80	; 128
    477e:	8d 8f       	std	Y+29, r24	; 0x1d
    4780:	9e 8f       	std	Y+30, r25	; 0x1e
    4782:	af 8f       	std	Y+31, r26	; 0x1f
    4784:	b8 a3       	std	Y+32, r27	; 0x20
    4786:	83 e0       	ldi	r24, 0x03	; 3
    4788:	89 8f       	std	Y+25, r24	; 0x19
    478a:	ce 01       	movw	r24, r28
    478c:	49 96       	adiw	r24, 0x19	; 25
    478e:	02 c0       	rjmp	.+4      	; 0x4794 <__mulsf3+0x1e8>
    4790:	88 e7       	ldi	r24, 0x78	; 120
    4792:	96 e0       	ldi	r25, 0x06	; 6
    4794:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__pack_f>
    4798:	a0 96       	adiw	r28, 0x20	; 32
    479a:	e2 e1       	ldi	r30, 0x12	; 18
    479c:	0c 94 a1 28 	jmp	0x5142	; 0x5142 <__epilogue_restores__>

000047a0 <__divsf3>:
    47a0:	a8 e1       	ldi	r26, 0x18	; 24
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	e6 ed       	ldi	r30, 0xD6	; 214
    47a6:	f3 e2       	ldi	r31, 0x23	; 35
    47a8:	0c 94 8d 28 	jmp	0x511a	; 0x511a <__prologue_saves__+0x10>
    47ac:	69 83       	std	Y+1, r22	; 0x01
    47ae:	7a 83       	std	Y+2, r23	; 0x02
    47b0:	8b 83       	std	Y+3, r24	; 0x03
    47b2:	9c 83       	std	Y+4, r25	; 0x04
    47b4:	2d 83       	std	Y+5, r18	; 0x05
    47b6:	3e 83       	std	Y+6, r19	; 0x06
    47b8:	4f 83       	std	Y+7, r20	; 0x07
    47ba:	58 87       	std	Y+8, r21	; 0x08
    47bc:	8e 01       	movw	r16, r28
    47be:	07 5f       	subi	r16, 0xF7	; 247
    47c0:	1f 4f       	sbci	r17, 0xFF	; 255
    47c2:	ce 01       	movw	r24, r28
    47c4:	01 96       	adiw	r24, 0x01	; 1
    47c6:	b8 01       	movw	r22, r16
    47c8:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    47cc:	81 e1       	ldi	r24, 0x11	; 17
    47ce:	e8 2e       	mov	r14, r24
    47d0:	f1 2c       	mov	r15, r1
    47d2:	ec 0e       	add	r14, r28
    47d4:	fd 1e       	adc	r15, r29
    47d6:	ce 01       	movw	r24, r28
    47d8:	05 96       	adiw	r24, 0x05	; 5
    47da:	b7 01       	movw	r22, r14
    47dc:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    47e0:	99 85       	ldd	r25, Y+9	; 0x09
    47e2:	92 30       	cpi	r25, 0x02	; 2
    47e4:	08 f4       	brcc	.+2      	; 0x47e8 <__divsf3+0x48>
    47e6:	83 c0       	rjmp	.+262    	; 0x48ee <__divsf3+0x14e>
    47e8:	89 89       	ldd	r24, Y+17	; 0x11
    47ea:	82 30       	cpi	r24, 0x02	; 2
    47ec:	08 f4       	brcc	.+2      	; 0x47f0 <__divsf3+0x50>
    47ee:	7b c0       	rjmp	.+246    	; 0x48e6 <__divsf3+0x146>
    47f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    47f2:	3a 89       	ldd	r19, Y+18	; 0x12
    47f4:	23 27       	eor	r18, r19
    47f6:	2a 87       	std	Y+10, r18	; 0x0a
    47f8:	94 30       	cpi	r25, 0x04	; 4
    47fa:	11 f0       	breq	.+4      	; 0x4800 <__divsf3+0x60>
    47fc:	92 30       	cpi	r25, 0x02	; 2
    47fe:	21 f4       	brne	.+8      	; 0x4808 <__divsf3+0x68>
    4800:	98 17       	cp	r25, r24
    4802:	09 f0       	breq	.+2      	; 0x4806 <__divsf3+0x66>
    4804:	6c c0       	rjmp	.+216    	; 0x48de <__divsf3+0x13e>
    4806:	71 c0       	rjmp	.+226    	; 0x48ea <__divsf3+0x14a>
    4808:	84 30       	cpi	r24, 0x04	; 4
    480a:	39 f4       	brne	.+14     	; 0x481a <__divsf3+0x7a>
    480c:	1d 86       	std	Y+13, r1	; 0x0d
    480e:	1e 86       	std	Y+14, r1	; 0x0e
    4810:	1f 86       	std	Y+15, r1	; 0x0f
    4812:	18 8a       	std	Y+16, r1	; 0x10
    4814:	1c 86       	std	Y+12, r1	; 0x0c
    4816:	1b 86       	std	Y+11, r1	; 0x0b
    4818:	6a c0       	rjmp	.+212    	; 0x48ee <__divsf3+0x14e>
    481a:	82 30       	cpi	r24, 0x02	; 2
    481c:	19 f4       	brne	.+6      	; 0x4824 <__divsf3+0x84>
    481e:	84 e0       	ldi	r24, 0x04	; 4
    4820:	89 87       	std	Y+9, r24	; 0x09
    4822:	65 c0       	rjmp	.+202    	; 0x48ee <__divsf3+0x14e>
    4824:	8b 85       	ldd	r24, Y+11	; 0x0b
    4826:	9c 85       	ldd	r25, Y+12	; 0x0c
    4828:	2b 89       	ldd	r18, Y+19	; 0x13
    482a:	3c 89       	ldd	r19, Y+20	; 0x14
    482c:	82 1b       	sub	r24, r18
    482e:	93 0b       	sbc	r25, r19
    4830:	9c 87       	std	Y+12, r25	; 0x0c
    4832:	8b 87       	std	Y+11, r24	; 0x0b
    4834:	2d 85       	ldd	r18, Y+13	; 0x0d
    4836:	3e 85       	ldd	r19, Y+14	; 0x0e
    4838:	4f 85       	ldd	r20, Y+15	; 0x0f
    483a:	58 89       	ldd	r21, Y+16	; 0x10
    483c:	ed 88       	ldd	r14, Y+21	; 0x15
    483e:	fe 88       	ldd	r15, Y+22	; 0x16
    4840:	0f 89       	ldd	r16, Y+23	; 0x17
    4842:	18 8d       	ldd	r17, Y+24	; 0x18
    4844:	2e 15       	cp	r18, r14
    4846:	3f 05       	cpc	r19, r15
    4848:	40 07       	cpc	r20, r16
    484a:	51 07       	cpc	r21, r17
    484c:	38 f4       	brcc	.+14     	; 0x485c <__divsf3+0xbc>
    484e:	22 0f       	add	r18, r18
    4850:	33 1f       	adc	r19, r19
    4852:	44 1f       	adc	r20, r20
    4854:	55 1f       	adc	r21, r21
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	9c 87       	std	Y+12, r25	; 0x0c
    485a:	8b 87       	std	Y+11, r24	; 0x0b
    485c:	6f e1       	ldi	r22, 0x1F	; 31
    485e:	70 e0       	ldi	r23, 0x00	; 0
    4860:	a1 2c       	mov	r10, r1
    4862:	b1 2c       	mov	r11, r1
    4864:	c1 2c       	mov	r12, r1
    4866:	a0 e4       	ldi	r26, 0x40	; 64
    4868:	da 2e       	mov	r13, r26
    486a:	80 e0       	ldi	r24, 0x00	; 0
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	dc 01       	movw	r26, r24
    4870:	2e 15       	cp	r18, r14
    4872:	3f 05       	cpc	r19, r15
    4874:	40 07       	cpc	r20, r16
    4876:	51 07       	cpc	r21, r17
    4878:	40 f0       	brcs	.+16     	; 0x488a <__divsf3+0xea>
    487a:	8a 29       	or	r24, r10
    487c:	9b 29       	or	r25, r11
    487e:	ac 29       	or	r26, r12
    4880:	bd 29       	or	r27, r13
    4882:	2e 19       	sub	r18, r14
    4884:	3f 09       	sbc	r19, r15
    4886:	40 0b       	sbc	r20, r16
    4888:	51 0b       	sbc	r21, r17
    488a:	d6 94       	lsr	r13
    488c:	c7 94       	ror	r12
    488e:	b7 94       	ror	r11
    4890:	a7 94       	ror	r10
    4892:	22 0f       	add	r18, r18
    4894:	33 1f       	adc	r19, r19
    4896:	44 1f       	adc	r20, r20
    4898:	55 1f       	adc	r21, r21
    489a:	61 50       	subi	r22, 0x01	; 1
    489c:	70 40       	sbci	r23, 0x00	; 0
    489e:	41 f7       	brne	.-48     	; 0x4870 <__divsf3+0xd0>
    48a0:	6f e7       	ldi	r22, 0x7F	; 127
    48a2:	e6 2e       	mov	r14, r22
    48a4:	f1 2c       	mov	r15, r1
    48a6:	01 2d       	mov	r16, r1
    48a8:	11 2d       	mov	r17, r1
    48aa:	e8 22       	and	r14, r24
    48ac:	f9 22       	and	r15, r25
    48ae:	0a 23       	and	r16, r26
    48b0:	1b 23       	and	r17, r27
    48b2:	60 e4       	ldi	r22, 0x40	; 64
    48b4:	e6 16       	cp	r14, r22
    48b6:	f1 04       	cpc	r15, r1
    48b8:	01 05       	cpc	r16, r1
    48ba:	11 05       	cpc	r17, r1
    48bc:	61 f4       	brne	.+24     	; 0x48d6 <__divsf3+0x136>
    48be:	87 fd       	sbrc	r24, 7
    48c0:	0a c0       	rjmp	.+20     	; 0x48d6 <__divsf3+0x136>
    48c2:	21 15       	cp	r18, r1
    48c4:	31 05       	cpc	r19, r1
    48c6:	41 05       	cpc	r20, r1
    48c8:	51 05       	cpc	r21, r1
    48ca:	29 f0       	breq	.+10     	; 0x48d6 <__divsf3+0x136>
    48cc:	80 5c       	subi	r24, 0xC0	; 192
    48ce:	9f 4f       	sbci	r25, 0xFF	; 255
    48d0:	af 4f       	sbci	r26, 0xFF	; 255
    48d2:	bf 4f       	sbci	r27, 0xFF	; 255
    48d4:	80 78       	andi	r24, 0x80	; 128
    48d6:	8d 87       	std	Y+13, r24	; 0x0d
    48d8:	9e 87       	std	Y+14, r25	; 0x0e
    48da:	af 87       	std	Y+15, r26	; 0x0f
    48dc:	b8 8b       	std	Y+16, r27	; 0x10
    48de:	8e 01       	movw	r16, r28
    48e0:	07 5f       	subi	r16, 0xF7	; 247
    48e2:	1f 4f       	sbci	r17, 0xFF	; 255
    48e4:	04 c0       	rjmp	.+8      	; 0x48ee <__divsf3+0x14e>
    48e6:	87 01       	movw	r16, r14
    48e8:	02 c0       	rjmp	.+4      	; 0x48ee <__divsf3+0x14e>
    48ea:	08 e7       	ldi	r16, 0x78	; 120
    48ec:	16 e0       	ldi	r17, 0x06	; 6
    48ee:	c8 01       	movw	r24, r16
    48f0:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__pack_f>
    48f4:	68 96       	adiw	r28, 0x18	; 24
    48f6:	ea e0       	ldi	r30, 0x0A	; 10
    48f8:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__epilogue_restores__+0x10>

000048fc <__gtsf2>:
    48fc:	a8 e1       	ldi	r26, 0x18	; 24
    48fe:	b0 e0       	ldi	r27, 0x00	; 0
    4900:	e4 e8       	ldi	r30, 0x84	; 132
    4902:	f4 e2       	ldi	r31, 0x24	; 36
    4904:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x18>
    4908:	69 83       	std	Y+1, r22	; 0x01
    490a:	7a 83       	std	Y+2, r23	; 0x02
    490c:	8b 83       	std	Y+3, r24	; 0x03
    490e:	9c 83       	std	Y+4, r25	; 0x04
    4910:	2d 83       	std	Y+5, r18	; 0x05
    4912:	3e 83       	std	Y+6, r19	; 0x06
    4914:	4f 83       	std	Y+7, r20	; 0x07
    4916:	58 87       	std	Y+8, r21	; 0x08
    4918:	8e 01       	movw	r16, r28
    491a:	07 5f       	subi	r16, 0xF7	; 247
    491c:	1f 4f       	sbci	r17, 0xFF	; 255
    491e:	ce 01       	movw	r24, r28
    4920:	01 96       	adiw	r24, 0x01	; 1
    4922:	b8 01       	movw	r22, r16
    4924:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    4928:	81 e1       	ldi	r24, 0x11	; 17
    492a:	e8 2e       	mov	r14, r24
    492c:	f1 2c       	mov	r15, r1
    492e:	ec 0e       	add	r14, r28
    4930:	fd 1e       	adc	r15, r29
    4932:	ce 01       	movw	r24, r28
    4934:	05 96       	adiw	r24, 0x05	; 5
    4936:	b7 01       	movw	r22, r14
    4938:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    493c:	89 85       	ldd	r24, Y+9	; 0x09
    493e:	82 30       	cpi	r24, 0x02	; 2
    4940:	40 f0       	brcs	.+16     	; 0x4952 <__gtsf2+0x56>
    4942:	89 89       	ldd	r24, Y+17	; 0x11
    4944:	82 30       	cpi	r24, 0x02	; 2
    4946:	28 f0       	brcs	.+10     	; 0x4952 <__gtsf2+0x56>
    4948:	c8 01       	movw	r24, r16
    494a:	b7 01       	movw	r22, r14
    494c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__fpcmp_parts_f>
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <__gtsf2+0x58>
    4952:	8f ef       	ldi	r24, 0xFF	; 255
    4954:	68 96       	adiw	r28, 0x18	; 24
    4956:	e6 e0       	ldi	r30, 0x06	; 6
    4958:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x18>

0000495c <__gesf2>:
    495c:	a8 e1       	ldi	r26, 0x18	; 24
    495e:	b0 e0       	ldi	r27, 0x00	; 0
    4960:	e4 eb       	ldi	r30, 0xB4	; 180
    4962:	f4 e2       	ldi	r31, 0x24	; 36
    4964:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x18>
    4968:	69 83       	std	Y+1, r22	; 0x01
    496a:	7a 83       	std	Y+2, r23	; 0x02
    496c:	8b 83       	std	Y+3, r24	; 0x03
    496e:	9c 83       	std	Y+4, r25	; 0x04
    4970:	2d 83       	std	Y+5, r18	; 0x05
    4972:	3e 83       	std	Y+6, r19	; 0x06
    4974:	4f 83       	std	Y+7, r20	; 0x07
    4976:	58 87       	std	Y+8, r21	; 0x08
    4978:	8e 01       	movw	r16, r28
    497a:	07 5f       	subi	r16, 0xF7	; 247
    497c:	1f 4f       	sbci	r17, 0xFF	; 255
    497e:	ce 01       	movw	r24, r28
    4980:	01 96       	adiw	r24, 0x01	; 1
    4982:	b8 01       	movw	r22, r16
    4984:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    4988:	81 e1       	ldi	r24, 0x11	; 17
    498a:	e8 2e       	mov	r14, r24
    498c:	f1 2c       	mov	r15, r1
    498e:	ec 0e       	add	r14, r28
    4990:	fd 1e       	adc	r15, r29
    4992:	ce 01       	movw	r24, r28
    4994:	05 96       	adiw	r24, 0x05	; 5
    4996:	b7 01       	movw	r22, r14
    4998:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    499c:	89 85       	ldd	r24, Y+9	; 0x09
    499e:	82 30       	cpi	r24, 0x02	; 2
    49a0:	40 f0       	brcs	.+16     	; 0x49b2 <__gesf2+0x56>
    49a2:	89 89       	ldd	r24, Y+17	; 0x11
    49a4:	82 30       	cpi	r24, 0x02	; 2
    49a6:	28 f0       	brcs	.+10     	; 0x49b2 <__gesf2+0x56>
    49a8:	c8 01       	movw	r24, r16
    49aa:	b7 01       	movw	r22, r14
    49ac:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__fpcmp_parts_f>
    49b0:	01 c0       	rjmp	.+2      	; 0x49b4 <__gesf2+0x58>
    49b2:	8f ef       	ldi	r24, 0xFF	; 255
    49b4:	68 96       	adiw	r28, 0x18	; 24
    49b6:	e6 e0       	ldi	r30, 0x06	; 6
    49b8:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x18>

000049bc <__ltsf2>:
    49bc:	a8 e1       	ldi	r26, 0x18	; 24
    49be:	b0 e0       	ldi	r27, 0x00	; 0
    49c0:	e4 ee       	ldi	r30, 0xE4	; 228
    49c2:	f4 e2       	ldi	r31, 0x24	; 36
    49c4:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x18>
    49c8:	69 83       	std	Y+1, r22	; 0x01
    49ca:	7a 83       	std	Y+2, r23	; 0x02
    49cc:	8b 83       	std	Y+3, r24	; 0x03
    49ce:	9c 83       	std	Y+4, r25	; 0x04
    49d0:	2d 83       	std	Y+5, r18	; 0x05
    49d2:	3e 83       	std	Y+6, r19	; 0x06
    49d4:	4f 83       	std	Y+7, r20	; 0x07
    49d6:	58 87       	std	Y+8, r21	; 0x08
    49d8:	8e 01       	movw	r16, r28
    49da:	07 5f       	subi	r16, 0xF7	; 247
    49dc:	1f 4f       	sbci	r17, 0xFF	; 255
    49de:	ce 01       	movw	r24, r28
    49e0:	01 96       	adiw	r24, 0x01	; 1
    49e2:	b8 01       	movw	r22, r16
    49e4:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    49e8:	81 e1       	ldi	r24, 0x11	; 17
    49ea:	e8 2e       	mov	r14, r24
    49ec:	f1 2c       	mov	r15, r1
    49ee:	ec 0e       	add	r14, r28
    49f0:	fd 1e       	adc	r15, r29
    49f2:	ce 01       	movw	r24, r28
    49f4:	05 96       	adiw	r24, 0x05	; 5
    49f6:	b7 01       	movw	r22, r14
    49f8:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    49fc:	89 85       	ldd	r24, Y+9	; 0x09
    49fe:	82 30       	cpi	r24, 0x02	; 2
    4a00:	40 f0       	brcs	.+16     	; 0x4a12 <__ltsf2+0x56>
    4a02:	89 89       	ldd	r24, Y+17	; 0x11
    4a04:	82 30       	cpi	r24, 0x02	; 2
    4a06:	28 f0       	brcs	.+10     	; 0x4a12 <__ltsf2+0x56>
    4a08:	c8 01       	movw	r24, r16
    4a0a:	b7 01       	movw	r22, r14
    4a0c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__fpcmp_parts_f>
    4a10:	01 c0       	rjmp	.+2      	; 0x4a14 <__ltsf2+0x58>
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	68 96       	adiw	r28, 0x18	; 24
    4a16:	e6 e0       	ldi	r30, 0x06	; 6
    4a18:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x18>

00004a1c <__floatsisf>:
    4a1c:	a8 e0       	ldi	r26, 0x08	; 8
    4a1e:	b0 e0       	ldi	r27, 0x00	; 0
    4a20:	e4 e1       	ldi	r30, 0x14	; 20
    4a22:	f5 e2       	ldi	r31, 0x25	; 37
    4a24:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x18>
    4a28:	7b 01       	movw	r14, r22
    4a2a:	8c 01       	movw	r16, r24
    4a2c:	83 e0       	ldi	r24, 0x03	; 3
    4a2e:	89 83       	std	Y+1, r24	; 0x01
    4a30:	d8 01       	movw	r26, r16
    4a32:	c7 01       	movw	r24, r14
    4a34:	88 27       	eor	r24, r24
    4a36:	b7 fd       	sbrc	r27, 7
    4a38:	83 95       	inc	r24
    4a3a:	99 27       	eor	r25, r25
    4a3c:	aa 27       	eor	r26, r26
    4a3e:	bb 27       	eor	r27, r27
    4a40:	28 2f       	mov	r18, r24
    4a42:	8a 83       	std	Y+2, r24	; 0x02
    4a44:	e1 14       	cp	r14, r1
    4a46:	f1 04       	cpc	r15, r1
    4a48:	01 05       	cpc	r16, r1
    4a4a:	11 05       	cpc	r17, r1
    4a4c:	19 f4       	brne	.+6      	; 0x4a54 <__floatsisf+0x38>
    4a4e:	82 e0       	ldi	r24, 0x02	; 2
    4a50:	89 83       	std	Y+1, r24	; 0x01
    4a52:	37 c0       	rjmp	.+110    	; 0x4ac2 <__floatsisf+0xa6>
    4a54:	8e e1       	ldi	r24, 0x1E	; 30
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	9c 83       	std	Y+4, r25	; 0x04
    4a5a:	8b 83       	std	Y+3, r24	; 0x03
    4a5c:	22 23       	and	r18, r18
    4a5e:	89 f0       	breq	.+34     	; 0x4a82 <__floatsisf+0x66>
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	e8 16       	cp	r14, r24
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	f8 06       	cpc	r15, r24
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	08 07       	cpc	r16, r24
    4a6c:	80 e8       	ldi	r24, 0x80	; 128
    4a6e:	18 07       	cpc	r17, r24
    4a70:	69 f1       	breq	.+90     	; 0x4acc <__floatsisf+0xb0>
    4a72:	10 95       	com	r17
    4a74:	00 95       	com	r16
    4a76:	f0 94       	com	r15
    4a78:	e0 94       	com	r14
    4a7a:	e1 1c       	adc	r14, r1
    4a7c:	f1 1c       	adc	r15, r1
    4a7e:	01 1d       	adc	r16, r1
    4a80:	11 1d       	adc	r17, r1
    4a82:	ed 82       	std	Y+5, r14	; 0x05
    4a84:	fe 82       	std	Y+6, r15	; 0x06
    4a86:	0f 83       	std	Y+7, r16	; 0x07
    4a88:	18 87       	std	Y+8, r17	; 0x08
    4a8a:	c8 01       	movw	r24, r16
    4a8c:	b7 01       	movw	r22, r14
    4a8e:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__clzsi2>
    4a92:	9c 01       	movw	r18, r24
    4a94:	21 50       	subi	r18, 0x01	; 1
    4a96:	30 40       	sbci	r19, 0x00	; 0
    4a98:	12 16       	cp	r1, r18
    4a9a:	13 06       	cpc	r1, r19
    4a9c:	94 f4       	brge	.+36     	; 0x4ac2 <__floatsisf+0xa6>
    4a9e:	02 2e       	mov	r0, r18
    4aa0:	04 c0       	rjmp	.+8      	; 0x4aaa <__floatsisf+0x8e>
    4aa2:	ee 0c       	add	r14, r14
    4aa4:	ff 1c       	adc	r15, r15
    4aa6:	00 1f       	adc	r16, r16
    4aa8:	11 1f       	adc	r17, r17
    4aaa:	0a 94       	dec	r0
    4aac:	d2 f7       	brpl	.-12     	; 0x4aa2 <__floatsisf+0x86>
    4aae:	ed 82       	std	Y+5, r14	; 0x05
    4ab0:	fe 82       	std	Y+6, r15	; 0x06
    4ab2:	0f 83       	std	Y+7, r16	; 0x07
    4ab4:	18 87       	std	Y+8, r17	; 0x08
    4ab6:	8e e1       	ldi	r24, 0x1E	; 30
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	82 1b       	sub	r24, r18
    4abc:	93 0b       	sbc	r25, r19
    4abe:	9c 83       	std	Y+4, r25	; 0x04
    4ac0:	8b 83       	std	Y+3, r24	; 0x03
    4ac2:	ce 01       	movw	r24, r28
    4ac4:	01 96       	adiw	r24, 0x01	; 1
    4ac6:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__pack_f>
    4aca:	04 c0       	rjmp	.+8      	; 0x4ad4 <__floatsisf+0xb8>
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	9f ec       	ldi	r25, 0xCF	; 207
    4ad4:	28 96       	adiw	r28, 0x08	; 8
    4ad6:	e6 e0       	ldi	r30, 0x06	; 6
    4ad8:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x18>

00004adc <__fixsfsi>:
    4adc:	ac e0       	ldi	r26, 0x0C	; 12
    4ade:	b0 e0       	ldi	r27, 0x00	; 0
    4ae0:	e4 e7       	ldi	r30, 0x74	; 116
    4ae2:	f5 e2       	ldi	r31, 0x25	; 37
    4ae4:	0c 94 95 28 	jmp	0x512a	; 0x512a <__prologue_saves__+0x20>
    4ae8:	69 83       	std	Y+1, r22	; 0x01
    4aea:	7a 83       	std	Y+2, r23	; 0x02
    4aec:	8b 83       	std	Y+3, r24	; 0x03
    4aee:	9c 83       	std	Y+4, r25	; 0x04
    4af0:	ce 01       	movw	r24, r28
    4af2:	01 96       	adiw	r24, 0x01	; 1
    4af4:	be 01       	movw	r22, r28
    4af6:	6b 5f       	subi	r22, 0xFB	; 251
    4af8:	7f 4f       	sbci	r23, 0xFF	; 255
    4afa:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__unpack_f>
    4afe:	8d 81       	ldd	r24, Y+5	; 0x05
    4b00:	82 30       	cpi	r24, 0x02	; 2
    4b02:	81 f1       	breq	.+96     	; 0x4b64 <__fixsfsi+0x88>
    4b04:	82 30       	cpi	r24, 0x02	; 2
    4b06:	70 f1       	brcs	.+92     	; 0x4b64 <__fixsfsi+0x88>
    4b08:	84 30       	cpi	r24, 0x04	; 4
    4b0a:	21 f4       	brne	.+8      	; 0x4b14 <__fixsfsi+0x38>
    4b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b0e:	88 23       	and	r24, r24
    4b10:	69 f1       	breq	.+90     	; 0x4b6c <__fixsfsi+0x90>
    4b12:	0a c0       	rjmp	.+20     	; 0x4b28 <__fixsfsi+0x4c>
    4b14:	2f 81       	ldd	r18, Y+7	; 0x07
    4b16:	38 85       	ldd	r19, Y+8	; 0x08
    4b18:	37 fd       	sbrc	r19, 7
    4b1a:	24 c0       	rjmp	.+72     	; 0x4b64 <__fixsfsi+0x88>
    4b1c:	6e 81       	ldd	r22, Y+6	; 0x06
    4b1e:	2f 31       	cpi	r18, 0x1F	; 31
    4b20:	31 05       	cpc	r19, r1
    4b22:	3c f0       	brlt	.+14     	; 0x4b32 <__fixsfsi+0x56>
    4b24:	66 23       	and	r22, r22
    4b26:	11 f1       	breq	.+68     	; 0x4b6c <__fixsfsi+0x90>
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	40 e0       	ldi	r20, 0x00	; 0
    4b2e:	50 e8       	ldi	r21, 0x80	; 128
    4b30:	21 c0       	rjmp	.+66     	; 0x4b74 <__fixsfsi+0x98>
    4b32:	8e e1       	ldi	r24, 0x1E	; 30
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	82 1b       	sub	r24, r18
    4b38:	93 0b       	sbc	r25, r19
    4b3a:	29 85       	ldd	r18, Y+9	; 0x09
    4b3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b3e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b40:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b42:	04 c0       	rjmp	.+8      	; 0x4b4c <__fixsfsi+0x70>
    4b44:	56 95       	lsr	r21
    4b46:	47 95       	ror	r20
    4b48:	37 95       	ror	r19
    4b4a:	27 95       	ror	r18
    4b4c:	8a 95       	dec	r24
    4b4e:	d2 f7       	brpl	.-12     	; 0x4b44 <__fixsfsi+0x68>
    4b50:	66 23       	and	r22, r22
    4b52:	81 f0       	breq	.+32     	; 0x4b74 <__fixsfsi+0x98>
    4b54:	50 95       	com	r21
    4b56:	40 95       	com	r20
    4b58:	30 95       	com	r19
    4b5a:	21 95       	neg	r18
    4b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5e:	4f 4f       	sbci	r20, 0xFF	; 255
    4b60:	5f 4f       	sbci	r21, 0xFF	; 255
    4b62:	08 c0       	rjmp	.+16     	; 0x4b74 <__fixsfsi+0x98>
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	a9 01       	movw	r20, r18
    4b6a:	04 c0       	rjmp	.+8      	; 0x4b74 <__fixsfsi+0x98>
    4b6c:	2f ef       	ldi	r18, 0xFF	; 255
    4b6e:	3f ef       	ldi	r19, 0xFF	; 255
    4b70:	4f ef       	ldi	r20, 0xFF	; 255
    4b72:	5f e7       	ldi	r21, 0x7F	; 127
    4b74:	b9 01       	movw	r22, r18
    4b76:	ca 01       	movw	r24, r20
    4b78:	2c 96       	adiw	r28, 0x0c	; 12
    4b7a:	e2 e0       	ldi	r30, 0x02	; 2
    4b7c:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <__epilogue_restores__+0x20>

00004b80 <__floatunsisf>:
    4b80:	a8 e0       	ldi	r26, 0x08	; 8
    4b82:	b0 e0       	ldi	r27, 0x00	; 0
    4b84:	e6 ec       	ldi	r30, 0xC6	; 198
    4b86:	f5 e2       	ldi	r31, 0x25	; 37
    4b88:	0c 94 8f 28 	jmp	0x511e	; 0x511e <__prologue_saves__+0x14>
    4b8c:	7b 01       	movw	r14, r22
    4b8e:	8c 01       	movw	r16, r24
    4b90:	1a 82       	std	Y+2, r1	; 0x02
    4b92:	61 15       	cp	r22, r1
    4b94:	71 05       	cpc	r23, r1
    4b96:	81 05       	cpc	r24, r1
    4b98:	91 05       	cpc	r25, r1
    4b9a:	19 f4       	brne	.+6      	; 0x4ba2 <__floatunsisf+0x22>
    4b9c:	82 e0       	ldi	r24, 0x02	; 2
    4b9e:	89 83       	std	Y+1, r24	; 0x01
    4ba0:	5f c0       	rjmp	.+190    	; 0x4c60 <__floatunsisf+0xe0>
    4ba2:	83 e0       	ldi	r24, 0x03	; 3
    4ba4:	89 83       	std	Y+1, r24	; 0x01
    4ba6:	8e e1       	ldi	r24, 0x1E	; 30
    4ba8:	c8 2e       	mov	r12, r24
    4baa:	d1 2c       	mov	r13, r1
    4bac:	dc 82       	std	Y+4, r13	; 0x04
    4bae:	cb 82       	std	Y+3, r12	; 0x03
    4bb0:	ed 82       	std	Y+5, r14	; 0x05
    4bb2:	fe 82       	std	Y+6, r15	; 0x06
    4bb4:	0f 83       	std	Y+7, r16	; 0x07
    4bb6:	18 87       	std	Y+8, r17	; 0x08
    4bb8:	c8 01       	movw	r24, r16
    4bba:	b7 01       	movw	r22, r14
    4bbc:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__clzsi2>
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	31 97       	sbiw	r30, 0x01	; 1
    4bc4:	f7 ff       	sbrs	r31, 7
    4bc6:	3a c0       	rjmp	.+116    	; 0x4c3c <__floatunsisf+0xbc>
    4bc8:	aa 27       	eor	r26, r26
    4bca:	bb 27       	eor	r27, r27
    4bcc:	ae 1b       	sub	r26, r30
    4bce:	bf 0b       	sbc	r27, r31
    4bd0:	21 e0       	ldi	r18, 0x01	; 1
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	40 e0       	ldi	r20, 0x00	; 0
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	0a 2e       	mov	r0, r26
    4bda:	04 c0       	rjmp	.+8      	; 0x4be4 <__floatunsisf+0x64>
    4bdc:	22 0f       	add	r18, r18
    4bde:	33 1f       	adc	r19, r19
    4be0:	44 1f       	adc	r20, r20
    4be2:	55 1f       	adc	r21, r21
    4be4:	0a 94       	dec	r0
    4be6:	d2 f7       	brpl	.-12     	; 0x4bdc <__floatunsisf+0x5c>
    4be8:	21 50       	subi	r18, 0x01	; 1
    4bea:	30 40       	sbci	r19, 0x00	; 0
    4bec:	40 40       	sbci	r20, 0x00	; 0
    4bee:	50 40       	sbci	r21, 0x00	; 0
    4bf0:	2e 21       	and	r18, r14
    4bf2:	3f 21       	and	r19, r15
    4bf4:	40 23       	and	r20, r16
    4bf6:	51 23       	and	r21, r17
    4bf8:	61 e0       	ldi	r22, 0x01	; 1
    4bfa:	70 e0       	ldi	r23, 0x00	; 0
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	21 15       	cp	r18, r1
    4c02:	31 05       	cpc	r19, r1
    4c04:	41 05       	cpc	r20, r1
    4c06:	51 05       	cpc	r21, r1
    4c08:	19 f4       	brne	.+6      	; 0x4c10 <__floatunsisf+0x90>
    4c0a:	60 e0       	ldi	r22, 0x00	; 0
    4c0c:	70 e0       	ldi	r23, 0x00	; 0
    4c0e:	cb 01       	movw	r24, r22
    4c10:	04 c0       	rjmp	.+8      	; 0x4c1a <__floatunsisf+0x9a>
    4c12:	16 95       	lsr	r17
    4c14:	07 95       	ror	r16
    4c16:	f7 94       	ror	r15
    4c18:	e7 94       	ror	r14
    4c1a:	aa 95       	dec	r26
    4c1c:	d2 f7       	brpl	.-12     	; 0x4c12 <__floatunsisf+0x92>
    4c1e:	e6 2a       	or	r14, r22
    4c20:	f7 2a       	or	r15, r23
    4c22:	08 2b       	or	r16, r24
    4c24:	19 2b       	or	r17, r25
    4c26:	ed 82       	std	Y+5, r14	; 0x05
    4c28:	fe 82       	std	Y+6, r15	; 0x06
    4c2a:	0f 83       	std	Y+7, r16	; 0x07
    4c2c:	18 87       	std	Y+8, r17	; 0x08
    4c2e:	8e e1       	ldi	r24, 0x1E	; 30
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	8e 1b       	sub	r24, r30
    4c34:	9f 0b       	sbc	r25, r31
    4c36:	9c 83       	std	Y+4, r25	; 0x04
    4c38:	8b 83       	std	Y+3, r24	; 0x03
    4c3a:	12 c0       	rjmp	.+36     	; 0x4c60 <__floatunsisf+0xe0>
    4c3c:	30 97       	sbiw	r30, 0x00	; 0
    4c3e:	81 f0       	breq	.+32     	; 0x4c60 <__floatunsisf+0xe0>
    4c40:	0e 2e       	mov	r0, r30
    4c42:	04 c0       	rjmp	.+8      	; 0x4c4c <__floatunsisf+0xcc>
    4c44:	ee 0c       	add	r14, r14
    4c46:	ff 1c       	adc	r15, r15
    4c48:	00 1f       	adc	r16, r16
    4c4a:	11 1f       	adc	r17, r17
    4c4c:	0a 94       	dec	r0
    4c4e:	d2 f7       	brpl	.-12     	; 0x4c44 <__floatunsisf+0xc4>
    4c50:	ed 82       	std	Y+5, r14	; 0x05
    4c52:	fe 82       	std	Y+6, r15	; 0x06
    4c54:	0f 83       	std	Y+7, r16	; 0x07
    4c56:	18 87       	std	Y+8, r17	; 0x08
    4c58:	ce 1a       	sub	r12, r30
    4c5a:	df 0a       	sbc	r13, r31
    4c5c:	dc 82       	std	Y+4, r13	; 0x04
    4c5e:	cb 82       	std	Y+3, r12	; 0x03
    4c60:	ce 01       	movw	r24, r28
    4c62:	01 96       	adiw	r24, 0x01	; 1
    4c64:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__pack_f>
    4c68:	28 96       	adiw	r28, 0x08	; 8
    4c6a:	e8 e0       	ldi	r30, 0x08	; 8
    4c6c:	0c 94 ab 28 	jmp	0x5156	; 0x5156 <__epilogue_restores__+0x14>

00004c70 <__clzsi2>:
    4c70:	af 92       	push	r10
    4c72:	bf 92       	push	r11
    4c74:	cf 92       	push	r12
    4c76:	df 92       	push	r13
    4c78:	ef 92       	push	r14
    4c7a:	ff 92       	push	r15
    4c7c:	0f 93       	push	r16
    4c7e:	1f 93       	push	r17
    4c80:	7b 01       	movw	r14, r22
    4c82:	8c 01       	movw	r16, r24
    4c84:	80 e0       	ldi	r24, 0x00	; 0
    4c86:	e8 16       	cp	r14, r24
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	f8 06       	cpc	r15, r24
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	08 07       	cpc	r16, r24
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	18 07       	cpc	r17, r24
    4c94:	58 f4       	brcc	.+22     	; 0x4cac <__clzsi2+0x3c>
    4c96:	ef ef       	ldi	r30, 0xFF	; 255
    4c98:	ee 16       	cp	r14, r30
    4c9a:	f1 04       	cpc	r15, r1
    4c9c:	01 05       	cpc	r16, r1
    4c9e:	11 05       	cpc	r17, r1
    4ca0:	09 f0       	breq	.+2      	; 0x4ca4 <__clzsi2+0x34>
    4ca2:	90 f4       	brcc	.+36     	; 0x4cc8 <__clzsi2+0x58>
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	dc 01       	movw	r26, r24
    4caa:	17 c0       	rjmp	.+46     	; 0x4cda <__clzsi2+0x6a>
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	ef 16       	cp	r14, r31
    4cb0:	f0 e0       	ldi	r31, 0x00	; 0
    4cb2:	ff 06       	cpc	r15, r31
    4cb4:	f0 e0       	ldi	r31, 0x00	; 0
    4cb6:	0f 07       	cpc	r16, r31
    4cb8:	f1 e0       	ldi	r31, 0x01	; 1
    4cba:	1f 07       	cpc	r17, r31
    4cbc:	50 f4       	brcc	.+20     	; 0x4cd2 <__clzsi2+0x62>
    4cbe:	80 e1       	ldi	r24, 0x10	; 16
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	a0 e0       	ldi	r26, 0x00	; 0
    4cc4:	b0 e0       	ldi	r27, 0x00	; 0
    4cc6:	09 c0       	rjmp	.+18     	; 0x4cda <__clzsi2+0x6a>
    4cc8:	88 e0       	ldi	r24, 0x08	; 8
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	a0 e0       	ldi	r26, 0x00	; 0
    4cce:	b0 e0       	ldi	r27, 0x00	; 0
    4cd0:	04 c0       	rjmp	.+8      	; 0x4cda <__clzsi2+0x6a>
    4cd2:	88 e1       	ldi	r24, 0x18	; 24
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	a0 e0       	ldi	r26, 0x00	; 0
    4cd8:	b0 e0       	ldi	r27, 0x00	; 0
    4cda:	20 e2       	ldi	r18, 0x20	; 32
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	40 e0       	ldi	r20, 0x00	; 0
    4ce0:	50 e0       	ldi	r21, 0x00	; 0
    4ce2:	28 1b       	sub	r18, r24
    4ce4:	39 0b       	sbc	r19, r25
    4ce6:	4a 0b       	sbc	r20, r26
    4ce8:	5b 0b       	sbc	r21, r27
    4cea:	57 01       	movw	r10, r14
    4cec:	68 01       	movw	r12, r16
    4cee:	04 c0       	rjmp	.+8      	; 0x4cf8 <__clzsi2+0x88>
    4cf0:	d6 94       	lsr	r13
    4cf2:	c7 94       	ror	r12
    4cf4:	b7 94       	ror	r11
    4cf6:	a7 94       	ror	r10
    4cf8:	8a 95       	dec	r24
    4cfa:	d2 f7       	brpl	.-12     	; 0x4cf0 <__clzsi2+0x80>
    4cfc:	d6 01       	movw	r26, r12
    4cfe:	c5 01       	movw	r24, r10
    4d00:	80 58       	subi	r24, 0x80	; 128
    4d02:	99 4f       	sbci	r25, 0xF9	; 249
    4d04:	fc 01       	movw	r30, r24
    4d06:	80 81       	ld	r24, Z
    4d08:	28 1b       	sub	r18, r24
    4d0a:	31 09       	sbc	r19, r1
    4d0c:	41 09       	sbc	r20, r1
    4d0e:	51 09       	sbc	r21, r1
    4d10:	c9 01       	movw	r24, r18
    4d12:	1f 91       	pop	r17
    4d14:	0f 91       	pop	r16
    4d16:	ff 90       	pop	r15
    4d18:	ef 90       	pop	r14
    4d1a:	df 90       	pop	r13
    4d1c:	cf 90       	pop	r12
    4d1e:	bf 90       	pop	r11
    4d20:	af 90       	pop	r10
    4d22:	08 95       	ret

00004d24 <__pack_f>:
    4d24:	ef 92       	push	r14
    4d26:	ff 92       	push	r15
    4d28:	0f 93       	push	r16
    4d2a:	1f 93       	push	r17
    4d2c:	cf 93       	push	r28
    4d2e:	df 93       	push	r29
    4d30:	fc 01       	movw	r30, r24
    4d32:	24 81       	ldd	r18, Z+4	; 0x04
    4d34:	35 81       	ldd	r19, Z+5	; 0x05
    4d36:	46 81       	ldd	r20, Z+6	; 0x06
    4d38:	57 81       	ldd	r21, Z+7	; 0x07
    4d3a:	61 81       	ldd	r22, Z+1	; 0x01
    4d3c:	80 81       	ld	r24, Z
    4d3e:	82 30       	cpi	r24, 0x02	; 2
    4d40:	20 f4       	brcc	.+8      	; 0x4d4a <__pack_f+0x26>
    4d42:	40 61       	ori	r20, 0x10	; 16
    4d44:	ef ef       	ldi	r30, 0xFF	; 255
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	a3 c0       	rjmp	.+326    	; 0x4e90 <__pack_f+0x16c>
    4d4a:	84 30       	cpi	r24, 0x04	; 4
    4d4c:	09 f4       	brne	.+2      	; 0x4d50 <__pack_f+0x2c>
    4d4e:	9b c0       	rjmp	.+310    	; 0x4e86 <__pack_f+0x162>
    4d50:	82 30       	cpi	r24, 0x02	; 2
    4d52:	09 f4       	brne	.+2      	; 0x4d56 <__pack_f+0x32>
    4d54:	92 c0       	rjmp	.+292    	; 0x4e7a <__pack_f+0x156>
    4d56:	21 15       	cp	r18, r1
    4d58:	31 05       	cpc	r19, r1
    4d5a:	41 05       	cpc	r20, r1
    4d5c:	51 05       	cpc	r21, r1
    4d5e:	09 f4       	brne	.+2      	; 0x4d62 <__pack_f+0x3e>
    4d60:	8f c0       	rjmp	.+286    	; 0x4e80 <__pack_f+0x15c>
    4d62:	02 80       	ldd	r0, Z+2	; 0x02
    4d64:	f3 81       	ldd	r31, Z+3	; 0x03
    4d66:	e0 2d       	mov	r30, r0
    4d68:	7f ef       	ldi	r23, 0xFF	; 255
    4d6a:	e2 38       	cpi	r30, 0x82	; 130
    4d6c:	f7 07       	cpc	r31, r23
    4d6e:	0c f0       	brlt	.+2      	; 0x4d72 <__pack_f+0x4e>
    4d70:	5a c0       	rjmp	.+180    	; 0x4e26 <__pack_f+0x102>
    4d72:	c2 e8       	ldi	r28, 0x82	; 130
    4d74:	df ef       	ldi	r29, 0xFF	; 255
    4d76:	ce 1b       	sub	r28, r30
    4d78:	df 0b       	sbc	r29, r31
    4d7a:	ca 31       	cpi	r28, 0x1A	; 26
    4d7c:	d1 05       	cpc	r29, r1
    4d7e:	6c f5       	brge	.+90     	; 0x4dda <__pack_f+0xb6>
    4d80:	79 01       	movw	r14, r18
    4d82:	8a 01       	movw	r16, r20
    4d84:	0c 2e       	mov	r0, r28
    4d86:	04 c0       	rjmp	.+8      	; 0x4d90 <__pack_f+0x6c>
    4d88:	16 95       	lsr	r17
    4d8a:	07 95       	ror	r16
    4d8c:	f7 94       	ror	r15
    4d8e:	e7 94       	ror	r14
    4d90:	0a 94       	dec	r0
    4d92:	d2 f7       	brpl	.-12     	; 0x4d88 <__pack_f+0x64>
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	a0 e0       	ldi	r26, 0x00	; 0
    4d9a:	b0 e0       	ldi	r27, 0x00	; 0
    4d9c:	0c 2e       	mov	r0, r28
    4d9e:	04 c0       	rjmp	.+8      	; 0x4da8 <__pack_f+0x84>
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	aa 1f       	adc	r26, r26
    4da6:	bb 1f       	adc	r27, r27
    4da8:	0a 94       	dec	r0
    4daa:	d2 f7       	brpl	.-12     	; 0x4da0 <__pack_f+0x7c>
    4dac:	01 97       	sbiw	r24, 0x01	; 1
    4dae:	a1 09       	sbc	r26, r1
    4db0:	b1 09       	sbc	r27, r1
    4db2:	82 23       	and	r24, r18
    4db4:	93 23       	and	r25, r19
    4db6:	a4 23       	and	r26, r20
    4db8:	b5 23       	and	r27, r21
    4dba:	21 e0       	ldi	r18, 0x01	; 1
    4dbc:	30 e0       	ldi	r19, 0x00	; 0
    4dbe:	40 e0       	ldi	r20, 0x00	; 0
    4dc0:	50 e0       	ldi	r21, 0x00	; 0
    4dc2:	00 97       	sbiw	r24, 0x00	; 0
    4dc4:	a1 05       	cpc	r26, r1
    4dc6:	b1 05       	cpc	r27, r1
    4dc8:	19 f4       	brne	.+6      	; 0x4dd0 <__pack_f+0xac>
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	a9 01       	movw	r20, r18
    4dd0:	2e 29       	or	r18, r14
    4dd2:	3f 29       	or	r19, r15
    4dd4:	40 2b       	or	r20, r16
    4dd6:	51 2b       	or	r21, r17
    4dd8:	03 c0       	rjmp	.+6      	; 0x4de0 <__pack_f+0xbc>
    4dda:	20 e0       	ldi	r18, 0x00	; 0
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	a9 01       	movw	r20, r18
    4de0:	da 01       	movw	r26, r20
    4de2:	c9 01       	movw	r24, r18
    4de4:	8f 77       	andi	r24, 0x7F	; 127
    4de6:	90 70       	andi	r25, 0x00	; 0
    4de8:	a0 70       	andi	r26, 0x00	; 0
    4dea:	b0 70       	andi	r27, 0x00	; 0
    4dec:	80 34       	cpi	r24, 0x40	; 64
    4dee:	91 05       	cpc	r25, r1
    4df0:	a1 05       	cpc	r26, r1
    4df2:	b1 05       	cpc	r27, r1
    4df4:	39 f4       	brne	.+14     	; 0x4e04 <__pack_f+0xe0>
    4df6:	27 ff       	sbrs	r18, 7
    4df8:	09 c0       	rjmp	.+18     	; 0x4e0c <__pack_f+0xe8>
    4dfa:	20 5c       	subi	r18, 0xC0	; 192
    4dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dfe:	4f 4f       	sbci	r20, 0xFF	; 255
    4e00:	5f 4f       	sbci	r21, 0xFF	; 255
    4e02:	04 c0       	rjmp	.+8      	; 0x4e0c <__pack_f+0xe8>
    4e04:	21 5c       	subi	r18, 0xC1	; 193
    4e06:	3f 4f       	sbci	r19, 0xFF	; 255
    4e08:	4f 4f       	sbci	r20, 0xFF	; 255
    4e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e0c:	e1 e0       	ldi	r30, 0x01	; 1
    4e0e:	f0 e0       	ldi	r31, 0x00	; 0
    4e10:	20 30       	cpi	r18, 0x00	; 0
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	38 07       	cpc	r19, r24
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	48 07       	cpc	r20, r24
    4e1a:	80 e4       	ldi	r24, 0x40	; 64
    4e1c:	58 07       	cpc	r21, r24
    4e1e:	28 f5       	brcc	.+74     	; 0x4e6a <__pack_f+0x146>
    4e20:	e0 e0       	ldi	r30, 0x00	; 0
    4e22:	f0 e0       	ldi	r31, 0x00	; 0
    4e24:	22 c0       	rjmp	.+68     	; 0x4e6a <__pack_f+0x146>
    4e26:	e0 38       	cpi	r30, 0x80	; 128
    4e28:	f1 05       	cpc	r31, r1
    4e2a:	6c f5       	brge	.+90     	; 0x4e86 <__pack_f+0x162>
    4e2c:	e1 58       	subi	r30, 0x81	; 129
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	da 01       	movw	r26, r20
    4e32:	c9 01       	movw	r24, r18
    4e34:	8f 77       	andi	r24, 0x7F	; 127
    4e36:	90 70       	andi	r25, 0x00	; 0
    4e38:	a0 70       	andi	r26, 0x00	; 0
    4e3a:	b0 70       	andi	r27, 0x00	; 0
    4e3c:	80 34       	cpi	r24, 0x40	; 64
    4e3e:	91 05       	cpc	r25, r1
    4e40:	a1 05       	cpc	r26, r1
    4e42:	b1 05       	cpc	r27, r1
    4e44:	39 f4       	brne	.+14     	; 0x4e54 <__pack_f+0x130>
    4e46:	27 ff       	sbrs	r18, 7
    4e48:	09 c0       	rjmp	.+18     	; 0x4e5c <__pack_f+0x138>
    4e4a:	20 5c       	subi	r18, 0xC0	; 192
    4e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4e:	4f 4f       	sbci	r20, 0xFF	; 255
    4e50:	5f 4f       	sbci	r21, 0xFF	; 255
    4e52:	04 c0       	rjmp	.+8      	; 0x4e5c <__pack_f+0x138>
    4e54:	21 5c       	subi	r18, 0xC1	; 193
    4e56:	3f 4f       	sbci	r19, 0xFF	; 255
    4e58:	4f 4f       	sbci	r20, 0xFF	; 255
    4e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5c:	57 ff       	sbrs	r21, 7
    4e5e:	05 c0       	rjmp	.+10     	; 0x4e6a <__pack_f+0x146>
    4e60:	56 95       	lsr	r21
    4e62:	47 95       	ror	r20
    4e64:	37 95       	ror	r19
    4e66:	27 95       	ror	r18
    4e68:	31 96       	adiw	r30, 0x01	; 1
    4e6a:	87 e0       	ldi	r24, 0x07	; 7
    4e6c:	56 95       	lsr	r21
    4e6e:	47 95       	ror	r20
    4e70:	37 95       	ror	r19
    4e72:	27 95       	ror	r18
    4e74:	8a 95       	dec	r24
    4e76:	d1 f7       	brne	.-12     	; 0x4e6c <__pack_f+0x148>
    4e78:	0b c0       	rjmp	.+22     	; 0x4e90 <__pack_f+0x16c>
    4e7a:	e0 e0       	ldi	r30, 0x00	; 0
    4e7c:	f0 e0       	ldi	r31, 0x00	; 0
    4e7e:	05 c0       	rjmp	.+10     	; 0x4e8a <__pack_f+0x166>
    4e80:	e0 e0       	ldi	r30, 0x00	; 0
    4e82:	f0 e0       	ldi	r31, 0x00	; 0
    4e84:	05 c0       	rjmp	.+10     	; 0x4e90 <__pack_f+0x16c>
    4e86:	ef ef       	ldi	r30, 0xFF	; 255
    4e88:	f0 e0       	ldi	r31, 0x00	; 0
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	a9 01       	movw	r20, r18
    4e90:	8e 2f       	mov	r24, r30
    4e92:	87 95       	ror	r24
    4e94:	88 27       	eor	r24, r24
    4e96:	87 95       	ror	r24
    4e98:	94 2f       	mov	r25, r20
    4e9a:	9f 77       	andi	r25, 0x7F	; 127
    4e9c:	67 95       	ror	r22
    4e9e:	66 27       	eor	r22, r22
    4ea0:	67 95       	ror	r22
    4ea2:	e6 95       	lsr	r30
    4ea4:	a9 2f       	mov	r26, r25
    4ea6:	a8 2b       	or	r26, r24
    4ea8:	fe 2f       	mov	r31, r30
    4eaa:	f6 2b       	or	r31, r22
    4eac:	62 2f       	mov	r22, r18
    4eae:	73 2f       	mov	r23, r19
    4eb0:	8a 2f       	mov	r24, r26
    4eb2:	9f 2f       	mov	r25, r31
    4eb4:	cd b7       	in	r28, 0x3d	; 61
    4eb6:	de b7       	in	r29, 0x3e	; 62
    4eb8:	e6 e0       	ldi	r30, 0x06	; 6
    4eba:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x18>

00004ebe <__unpack_f>:
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	fb 01       	movw	r30, r22
    4ec2:	2c 91       	ld	r18, X
    4ec4:	11 96       	adiw	r26, 0x01	; 1
    4ec6:	3c 91       	ld	r19, X
    4ec8:	11 97       	sbiw	r26, 0x01	; 1
    4eca:	12 96       	adiw	r26, 0x02	; 2
    4ecc:	8c 91       	ld	r24, X
    4ece:	12 97       	sbiw	r26, 0x02	; 2
    4ed0:	48 2f       	mov	r20, r24
    4ed2:	4f 77       	andi	r20, 0x7F	; 127
    4ed4:	50 e0       	ldi	r21, 0x00	; 0
    4ed6:	98 2f       	mov	r25, r24
    4ed8:	99 1f       	adc	r25, r25
    4eda:	99 27       	eor	r25, r25
    4edc:	99 1f       	adc	r25, r25
    4ede:	13 96       	adiw	r26, 0x03	; 3
    4ee0:	6c 91       	ld	r22, X
    4ee2:	13 97       	sbiw	r26, 0x03	; 3
    4ee4:	86 2f       	mov	r24, r22
    4ee6:	88 0f       	add	r24, r24
    4ee8:	89 2b       	or	r24, r25
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	66 1f       	adc	r22, r22
    4eee:	66 27       	eor	r22, r22
    4ef0:	66 1f       	adc	r22, r22
    4ef2:	61 83       	std	Z+1, r22	; 0x01
    4ef4:	00 97       	sbiw	r24, 0x00	; 0
    4ef6:	39 f5       	brne	.+78     	; 0x4f46 <__unpack_f+0x88>
    4ef8:	21 15       	cp	r18, r1
    4efa:	31 05       	cpc	r19, r1
    4efc:	41 05       	cpc	r20, r1
    4efe:	51 05       	cpc	r21, r1
    4f00:	11 f4       	brne	.+4      	; 0x4f06 <__unpack_f+0x48>
    4f02:	82 e0       	ldi	r24, 0x02	; 2
    4f04:	29 c0       	rjmp	.+82     	; 0x4f58 <__unpack_f+0x9a>
    4f06:	82 e8       	ldi	r24, 0x82	; 130
    4f08:	9f ef       	ldi	r25, 0xFF	; 255
    4f0a:	93 83       	std	Z+3, r25	; 0x03
    4f0c:	82 83       	std	Z+2, r24	; 0x02
    4f0e:	67 e0       	ldi	r22, 0x07	; 7
    4f10:	22 0f       	add	r18, r18
    4f12:	33 1f       	adc	r19, r19
    4f14:	44 1f       	adc	r20, r20
    4f16:	55 1f       	adc	r21, r21
    4f18:	6a 95       	dec	r22
    4f1a:	d1 f7       	brne	.-12     	; 0x4f10 <__unpack_f+0x52>
    4f1c:	83 e0       	ldi	r24, 0x03	; 3
    4f1e:	80 83       	st	Z, r24
    4f20:	09 c0       	rjmp	.+18     	; 0x4f34 <__unpack_f+0x76>
    4f22:	22 0f       	add	r18, r18
    4f24:	33 1f       	adc	r19, r19
    4f26:	44 1f       	adc	r20, r20
    4f28:	55 1f       	adc	r21, r21
    4f2a:	82 81       	ldd	r24, Z+2	; 0x02
    4f2c:	93 81       	ldd	r25, Z+3	; 0x03
    4f2e:	01 97       	sbiw	r24, 0x01	; 1
    4f30:	93 83       	std	Z+3, r25	; 0x03
    4f32:	82 83       	std	Z+2, r24	; 0x02
    4f34:	20 30       	cpi	r18, 0x00	; 0
    4f36:	80 e0       	ldi	r24, 0x00	; 0
    4f38:	38 07       	cpc	r19, r24
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	48 07       	cpc	r20, r24
    4f3e:	80 e4       	ldi	r24, 0x40	; 64
    4f40:	58 07       	cpc	r21, r24
    4f42:	78 f3       	brcs	.-34     	; 0x4f22 <__unpack_f+0x64>
    4f44:	20 c0       	rjmp	.+64     	; 0x4f86 <__unpack_f+0xc8>
    4f46:	8f 3f       	cpi	r24, 0xFF	; 255
    4f48:	91 05       	cpc	r25, r1
    4f4a:	79 f4       	brne	.+30     	; 0x4f6a <__unpack_f+0xac>
    4f4c:	21 15       	cp	r18, r1
    4f4e:	31 05       	cpc	r19, r1
    4f50:	41 05       	cpc	r20, r1
    4f52:	51 05       	cpc	r21, r1
    4f54:	19 f4       	brne	.+6      	; 0x4f5c <__unpack_f+0x9e>
    4f56:	84 e0       	ldi	r24, 0x04	; 4
    4f58:	80 83       	st	Z, r24
    4f5a:	08 95       	ret
    4f5c:	44 ff       	sbrs	r20, 4
    4f5e:	03 c0       	rjmp	.+6      	; 0x4f66 <__unpack_f+0xa8>
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	80 83       	st	Z, r24
    4f64:	10 c0       	rjmp	.+32     	; 0x4f86 <__unpack_f+0xc8>
    4f66:	10 82       	st	Z, r1
    4f68:	0e c0       	rjmp	.+28     	; 0x4f86 <__unpack_f+0xc8>
    4f6a:	8f 57       	subi	r24, 0x7F	; 127
    4f6c:	90 40       	sbci	r25, 0x00	; 0
    4f6e:	93 83       	std	Z+3, r25	; 0x03
    4f70:	82 83       	std	Z+2, r24	; 0x02
    4f72:	83 e0       	ldi	r24, 0x03	; 3
    4f74:	80 83       	st	Z, r24
    4f76:	87 e0       	ldi	r24, 0x07	; 7
    4f78:	22 0f       	add	r18, r18
    4f7a:	33 1f       	adc	r19, r19
    4f7c:	44 1f       	adc	r20, r20
    4f7e:	55 1f       	adc	r21, r21
    4f80:	8a 95       	dec	r24
    4f82:	d1 f7       	brne	.-12     	; 0x4f78 <__unpack_f+0xba>
    4f84:	50 64       	ori	r21, 0x40	; 64
    4f86:	24 83       	std	Z+4, r18	; 0x04
    4f88:	35 83       	std	Z+5, r19	; 0x05
    4f8a:	46 83       	std	Z+6, r20	; 0x06
    4f8c:	57 83       	std	Z+7, r21	; 0x07
    4f8e:	08 95       	ret

00004f90 <__fpcmp_parts_f>:
    4f90:	fc 01       	movw	r30, r24
    4f92:	db 01       	movw	r26, r22
    4f94:	90 81       	ld	r25, Z
    4f96:	92 30       	cpi	r25, 0x02	; 2
    4f98:	08 f4       	brcc	.+2      	; 0x4f9c <__fpcmp_parts_f+0xc>
    4f9a:	49 c0       	rjmp	.+146    	; 0x502e <__fpcmp_parts_f+0x9e>
    4f9c:	8c 91       	ld	r24, X
    4f9e:	82 30       	cpi	r24, 0x02	; 2
    4fa0:	08 f4       	brcc	.+2      	; 0x4fa4 <__fpcmp_parts_f+0x14>
    4fa2:	45 c0       	rjmp	.+138    	; 0x502e <__fpcmp_parts_f+0x9e>
    4fa4:	94 30       	cpi	r25, 0x04	; 4
    4fa6:	51 f4       	brne	.+20     	; 0x4fbc <__fpcmp_parts_f+0x2c>
    4fa8:	61 81       	ldd	r22, Z+1	; 0x01
    4faa:	84 30       	cpi	r24, 0x04	; 4
    4fac:	b1 f5       	brne	.+108    	; 0x501a <__fpcmp_parts_f+0x8a>
    4fae:	11 96       	adiw	r26, 0x01	; 1
    4fb0:	2c 91       	ld	r18, X
    4fb2:	11 97       	sbiw	r26, 0x01	; 1
    4fb4:	30 e0       	ldi	r19, 0x00	; 0
    4fb6:	26 1b       	sub	r18, r22
    4fb8:	31 09       	sbc	r19, r1
    4fba:	41 c0       	rjmp	.+130    	; 0x503e <__fpcmp_parts_f+0xae>
    4fbc:	84 30       	cpi	r24, 0x04	; 4
    4fbe:	21 f0       	breq	.+8      	; 0x4fc8 <__fpcmp_parts_f+0x38>
    4fc0:	92 30       	cpi	r25, 0x02	; 2
    4fc2:	41 f4       	brne	.+16     	; 0x4fd4 <__fpcmp_parts_f+0x44>
    4fc4:	82 30       	cpi	r24, 0x02	; 2
    4fc6:	b1 f1       	breq	.+108    	; 0x5034 <__fpcmp_parts_f+0xa4>
    4fc8:	11 96       	adiw	r26, 0x01	; 1
    4fca:	8c 91       	ld	r24, X
    4fcc:	11 97       	sbiw	r26, 0x01	; 1
    4fce:	88 23       	and	r24, r24
    4fd0:	a1 f1       	breq	.+104    	; 0x503a <__fpcmp_parts_f+0xaa>
    4fd2:	2d c0       	rjmp	.+90     	; 0x502e <__fpcmp_parts_f+0x9e>
    4fd4:	61 81       	ldd	r22, Z+1	; 0x01
    4fd6:	82 30       	cpi	r24, 0x02	; 2
    4fd8:	01 f1       	breq	.+64     	; 0x501a <__fpcmp_parts_f+0x8a>
    4fda:	11 96       	adiw	r26, 0x01	; 1
    4fdc:	8c 91       	ld	r24, X
    4fde:	11 97       	sbiw	r26, 0x01	; 1
    4fe0:	68 17       	cp	r22, r24
    4fe2:	d9 f4       	brne	.+54     	; 0x501a <__fpcmp_parts_f+0x8a>
    4fe4:	22 81       	ldd	r18, Z+2	; 0x02
    4fe6:	33 81       	ldd	r19, Z+3	; 0x03
    4fe8:	12 96       	adiw	r26, 0x02	; 2
    4fea:	8d 91       	ld	r24, X+
    4fec:	9c 91       	ld	r25, X
    4fee:	13 97       	sbiw	r26, 0x03	; 3
    4ff0:	82 17       	cp	r24, r18
    4ff2:	93 07       	cpc	r25, r19
    4ff4:	94 f0       	brlt	.+36     	; 0x501a <__fpcmp_parts_f+0x8a>
    4ff6:	28 17       	cp	r18, r24
    4ff8:	39 07       	cpc	r19, r25
    4ffa:	bc f0       	brlt	.+46     	; 0x502a <__fpcmp_parts_f+0x9a>
    4ffc:	24 81       	ldd	r18, Z+4	; 0x04
    4ffe:	35 81       	ldd	r19, Z+5	; 0x05
    5000:	46 81       	ldd	r20, Z+6	; 0x06
    5002:	57 81       	ldd	r21, Z+7	; 0x07
    5004:	14 96       	adiw	r26, 0x04	; 4
    5006:	8d 91       	ld	r24, X+
    5008:	9d 91       	ld	r25, X+
    500a:	0d 90       	ld	r0, X+
    500c:	bc 91       	ld	r27, X
    500e:	a0 2d       	mov	r26, r0
    5010:	82 17       	cp	r24, r18
    5012:	93 07       	cpc	r25, r19
    5014:	a4 07       	cpc	r26, r20
    5016:	b5 07       	cpc	r27, r21
    5018:	18 f4       	brcc	.+6      	; 0x5020 <__fpcmp_parts_f+0x90>
    501a:	66 23       	and	r22, r22
    501c:	41 f0       	breq	.+16     	; 0x502e <__fpcmp_parts_f+0x9e>
    501e:	0d c0       	rjmp	.+26     	; 0x503a <__fpcmp_parts_f+0xaa>
    5020:	28 17       	cp	r18, r24
    5022:	39 07       	cpc	r19, r25
    5024:	4a 07       	cpc	r20, r26
    5026:	5b 07       	cpc	r21, r27
    5028:	28 f4       	brcc	.+10     	; 0x5034 <__fpcmp_parts_f+0xa4>
    502a:	66 23       	and	r22, r22
    502c:	31 f0       	breq	.+12     	; 0x503a <__fpcmp_parts_f+0xaa>
    502e:	21 e0       	ldi	r18, 0x01	; 1
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	05 c0       	rjmp	.+10     	; 0x503e <__fpcmp_parts_f+0xae>
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	02 c0       	rjmp	.+4      	; 0x503e <__fpcmp_parts_f+0xae>
    503a:	2f ef       	ldi	r18, 0xFF	; 255
    503c:	3f ef       	ldi	r19, 0xFF	; 255
    503e:	c9 01       	movw	r24, r18
    5040:	08 95       	ret

00005042 <__udivmodhi4>:
    5042:	aa 1b       	sub	r26, r26
    5044:	bb 1b       	sub	r27, r27
    5046:	51 e1       	ldi	r21, 0x11	; 17
    5048:	07 c0       	rjmp	.+14     	; 0x5058 <__udivmodhi4_ep>

0000504a <__udivmodhi4_loop>:
    504a:	aa 1f       	adc	r26, r26
    504c:	bb 1f       	adc	r27, r27
    504e:	a6 17       	cp	r26, r22
    5050:	b7 07       	cpc	r27, r23
    5052:	10 f0       	brcs	.+4      	; 0x5058 <__udivmodhi4_ep>
    5054:	a6 1b       	sub	r26, r22
    5056:	b7 0b       	sbc	r27, r23

00005058 <__udivmodhi4_ep>:
    5058:	88 1f       	adc	r24, r24
    505a:	99 1f       	adc	r25, r25
    505c:	5a 95       	dec	r21
    505e:	a9 f7       	brne	.-22     	; 0x504a <__udivmodhi4_loop>
    5060:	80 95       	com	r24
    5062:	90 95       	com	r25
    5064:	bc 01       	movw	r22, r24
    5066:	cd 01       	movw	r24, r26
    5068:	08 95       	ret

0000506a <__divmodhi4>:
    506a:	97 fb       	bst	r25, 7
    506c:	09 2e       	mov	r0, r25
    506e:	07 26       	eor	r0, r23
    5070:	0a d0       	rcall	.+20     	; 0x5086 <__divmodhi4_neg1>
    5072:	77 fd       	sbrc	r23, 7
    5074:	04 d0       	rcall	.+8      	; 0x507e <__divmodhi4_neg2>
    5076:	e5 df       	rcall	.-54     	; 0x5042 <__udivmodhi4>
    5078:	06 d0       	rcall	.+12     	; 0x5086 <__divmodhi4_neg1>
    507a:	00 20       	and	r0, r0
    507c:	1a f4       	brpl	.+6      	; 0x5084 <__divmodhi4_exit>

0000507e <__divmodhi4_neg2>:
    507e:	70 95       	com	r23
    5080:	61 95       	neg	r22
    5082:	7f 4f       	sbci	r23, 0xFF	; 255

00005084 <__divmodhi4_exit>:
    5084:	08 95       	ret

00005086 <__divmodhi4_neg1>:
    5086:	f6 f7       	brtc	.-4      	; 0x5084 <__divmodhi4_exit>
    5088:	90 95       	com	r25
    508a:	81 95       	neg	r24
    508c:	9f 4f       	sbci	r25, 0xFF	; 255
    508e:	08 95       	ret

00005090 <__divmodsi4>:
    5090:	97 fb       	bst	r25, 7
    5092:	09 2e       	mov	r0, r25
    5094:	05 26       	eor	r0, r21
    5096:	0e d0       	rcall	.+28     	; 0x50b4 <__divmodsi4_neg1>
    5098:	57 fd       	sbrc	r21, 7
    509a:	04 d0       	rcall	.+8      	; 0x50a4 <__divmodsi4_neg2>
    509c:	14 d0       	rcall	.+40     	; 0x50c6 <__udivmodsi4>
    509e:	0a d0       	rcall	.+20     	; 0x50b4 <__divmodsi4_neg1>
    50a0:	00 1c       	adc	r0, r0
    50a2:	38 f4       	brcc	.+14     	; 0x50b2 <__divmodsi4_exit>

000050a4 <__divmodsi4_neg2>:
    50a4:	50 95       	com	r21
    50a6:	40 95       	com	r20
    50a8:	30 95       	com	r19
    50aa:	21 95       	neg	r18
    50ac:	3f 4f       	sbci	r19, 0xFF	; 255
    50ae:	4f 4f       	sbci	r20, 0xFF	; 255
    50b0:	5f 4f       	sbci	r21, 0xFF	; 255

000050b2 <__divmodsi4_exit>:
    50b2:	08 95       	ret

000050b4 <__divmodsi4_neg1>:
    50b4:	f6 f7       	brtc	.-4      	; 0x50b2 <__divmodsi4_exit>
    50b6:	90 95       	com	r25
    50b8:	80 95       	com	r24
    50ba:	70 95       	com	r23
    50bc:	61 95       	neg	r22
    50be:	7f 4f       	sbci	r23, 0xFF	; 255
    50c0:	8f 4f       	sbci	r24, 0xFF	; 255
    50c2:	9f 4f       	sbci	r25, 0xFF	; 255
    50c4:	08 95       	ret

000050c6 <__udivmodsi4>:
    50c6:	a1 e2       	ldi	r26, 0x21	; 33
    50c8:	1a 2e       	mov	r1, r26
    50ca:	aa 1b       	sub	r26, r26
    50cc:	bb 1b       	sub	r27, r27
    50ce:	fd 01       	movw	r30, r26
    50d0:	0d c0       	rjmp	.+26     	; 0x50ec <__udivmodsi4_ep>

000050d2 <__udivmodsi4_loop>:
    50d2:	aa 1f       	adc	r26, r26
    50d4:	bb 1f       	adc	r27, r27
    50d6:	ee 1f       	adc	r30, r30
    50d8:	ff 1f       	adc	r31, r31
    50da:	a2 17       	cp	r26, r18
    50dc:	b3 07       	cpc	r27, r19
    50de:	e4 07       	cpc	r30, r20
    50e0:	f5 07       	cpc	r31, r21
    50e2:	20 f0       	brcs	.+8      	; 0x50ec <__udivmodsi4_ep>
    50e4:	a2 1b       	sub	r26, r18
    50e6:	b3 0b       	sbc	r27, r19
    50e8:	e4 0b       	sbc	r30, r20
    50ea:	f5 0b       	sbc	r31, r21

000050ec <__udivmodsi4_ep>:
    50ec:	66 1f       	adc	r22, r22
    50ee:	77 1f       	adc	r23, r23
    50f0:	88 1f       	adc	r24, r24
    50f2:	99 1f       	adc	r25, r25
    50f4:	1a 94       	dec	r1
    50f6:	69 f7       	brne	.-38     	; 0x50d2 <__udivmodsi4_loop>
    50f8:	60 95       	com	r22
    50fa:	70 95       	com	r23
    50fc:	80 95       	com	r24
    50fe:	90 95       	com	r25
    5100:	9b 01       	movw	r18, r22
    5102:	ac 01       	movw	r20, r24
    5104:	bd 01       	movw	r22, r26
    5106:	cf 01       	movw	r24, r30
    5108:	08 95       	ret

0000510a <__prologue_saves__>:
    510a:	2f 92       	push	r2
    510c:	3f 92       	push	r3
    510e:	4f 92       	push	r4
    5110:	5f 92       	push	r5
    5112:	6f 92       	push	r6
    5114:	7f 92       	push	r7
    5116:	8f 92       	push	r8
    5118:	9f 92       	push	r9
    511a:	af 92       	push	r10
    511c:	bf 92       	push	r11
    511e:	cf 92       	push	r12
    5120:	df 92       	push	r13
    5122:	ef 92       	push	r14
    5124:	ff 92       	push	r15
    5126:	0f 93       	push	r16
    5128:	1f 93       	push	r17
    512a:	cf 93       	push	r28
    512c:	df 93       	push	r29
    512e:	cd b7       	in	r28, 0x3d	; 61
    5130:	de b7       	in	r29, 0x3e	; 62
    5132:	ca 1b       	sub	r28, r26
    5134:	db 0b       	sbc	r29, r27
    5136:	0f b6       	in	r0, 0x3f	; 63
    5138:	f8 94       	cli
    513a:	de bf       	out	0x3e, r29	; 62
    513c:	0f be       	out	0x3f, r0	; 63
    513e:	cd bf       	out	0x3d, r28	; 61
    5140:	09 94       	ijmp

00005142 <__epilogue_restores__>:
    5142:	2a 88       	ldd	r2, Y+18	; 0x12
    5144:	39 88       	ldd	r3, Y+17	; 0x11
    5146:	48 88       	ldd	r4, Y+16	; 0x10
    5148:	5f 84       	ldd	r5, Y+15	; 0x0f
    514a:	6e 84       	ldd	r6, Y+14	; 0x0e
    514c:	7d 84       	ldd	r7, Y+13	; 0x0d
    514e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5150:	9b 84       	ldd	r9, Y+11	; 0x0b
    5152:	aa 84       	ldd	r10, Y+10	; 0x0a
    5154:	b9 84       	ldd	r11, Y+9	; 0x09
    5156:	c8 84       	ldd	r12, Y+8	; 0x08
    5158:	df 80       	ldd	r13, Y+7	; 0x07
    515a:	ee 80       	ldd	r14, Y+6	; 0x06
    515c:	fd 80       	ldd	r15, Y+5	; 0x05
    515e:	0c 81       	ldd	r16, Y+4	; 0x04
    5160:	1b 81       	ldd	r17, Y+3	; 0x03
    5162:	aa 81       	ldd	r26, Y+2	; 0x02
    5164:	b9 81       	ldd	r27, Y+1	; 0x01
    5166:	ce 0f       	add	r28, r30
    5168:	d1 1d       	adc	r29, r1
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	f8 94       	cli
    516e:	de bf       	out	0x3e, r29	; 62
    5170:	0f be       	out	0x3f, r0	; 63
    5172:	cd bf       	out	0x3d, r28	; 61
    5174:	ed 01       	movw	r28, r26
    5176:	08 95       	ret

00005178 <ceil>:
    5178:	3b d0       	rcall	.+118    	; 0x51f0 <__fp_trunc>
    517a:	80 f0       	brcs	.+32     	; 0x519c <ceil+0x24>
    517c:	9f 37       	cpi	r25, 0x7F	; 127
    517e:	40 f4       	brcc	.+16     	; 0x5190 <ceil+0x18>
    5180:	91 11       	cpse	r25, r1
    5182:	0e f4       	brtc	.+2      	; 0x5186 <ceil+0xe>
    5184:	4d c0       	rjmp	.+154    	; 0x5220 <__fp_szero>
    5186:	60 e0       	ldi	r22, 0x00	; 0
    5188:	70 e0       	ldi	r23, 0x00	; 0
    518a:	80 e8       	ldi	r24, 0x80	; 128
    518c:	9f e3       	ldi	r25, 0x3F	; 63
    518e:	08 95       	ret
    5190:	26 f0       	brts	.+8      	; 0x519a <ceil+0x22>
    5192:	1b 16       	cp	r1, r27
    5194:	61 1d       	adc	r22, r1
    5196:	71 1d       	adc	r23, r1
    5198:	81 1d       	adc	r24, r1
    519a:	01 c0       	rjmp	.+2      	; 0x519e <__fp_mintl>
    519c:	1b c0       	rjmp	.+54     	; 0x51d4 <__fp_mpack>

0000519e <__fp_mintl>:
    519e:	88 23       	and	r24, r24
    51a0:	71 f4       	brne	.+28     	; 0x51be <__fp_mintl+0x20>
    51a2:	77 23       	and	r23, r23
    51a4:	21 f0       	breq	.+8      	; 0x51ae <__fp_mintl+0x10>
    51a6:	98 50       	subi	r25, 0x08	; 8
    51a8:	87 2b       	or	r24, r23
    51aa:	76 2f       	mov	r23, r22
    51ac:	07 c0       	rjmp	.+14     	; 0x51bc <__fp_mintl+0x1e>
    51ae:	66 23       	and	r22, r22
    51b0:	11 f4       	brne	.+4      	; 0x51b6 <__fp_mintl+0x18>
    51b2:	99 27       	eor	r25, r25
    51b4:	0d c0       	rjmp	.+26     	; 0x51d0 <__fp_mintl+0x32>
    51b6:	90 51       	subi	r25, 0x10	; 16
    51b8:	86 2b       	or	r24, r22
    51ba:	70 e0       	ldi	r23, 0x00	; 0
    51bc:	60 e0       	ldi	r22, 0x00	; 0
    51be:	2a f0       	brmi	.+10     	; 0x51ca <__fp_mintl+0x2c>
    51c0:	9a 95       	dec	r25
    51c2:	66 0f       	add	r22, r22
    51c4:	77 1f       	adc	r23, r23
    51c6:	88 1f       	adc	r24, r24
    51c8:	da f7       	brpl	.-10     	; 0x51c0 <__fp_mintl+0x22>
    51ca:	88 0f       	add	r24, r24
    51cc:	96 95       	lsr	r25
    51ce:	87 95       	ror	r24
    51d0:	97 f9       	bld	r25, 7
    51d2:	08 95       	ret

000051d4 <__fp_mpack>:
    51d4:	9f 3f       	cpi	r25, 0xFF	; 255
    51d6:	31 f0       	breq	.+12     	; 0x51e4 <__fp_mpack_finite+0xc>

000051d8 <__fp_mpack_finite>:
    51d8:	91 50       	subi	r25, 0x01	; 1
    51da:	20 f4       	brcc	.+8      	; 0x51e4 <__fp_mpack_finite+0xc>
    51dc:	87 95       	ror	r24
    51de:	77 95       	ror	r23
    51e0:	67 95       	ror	r22
    51e2:	b7 95       	ror	r27
    51e4:	88 0f       	add	r24, r24
    51e6:	91 1d       	adc	r25, r1
    51e8:	96 95       	lsr	r25
    51ea:	87 95       	ror	r24
    51ec:	97 f9       	bld	r25, 7
    51ee:	08 95       	ret

000051f0 <__fp_trunc>:
    51f0:	25 d0       	rcall	.+74     	; 0x523c <__fp_splitA>
    51f2:	a0 f0       	brcs	.+40     	; 0x521c <__fp_trunc+0x2c>
    51f4:	be e7       	ldi	r27, 0x7E	; 126
    51f6:	b9 17       	cp	r27, r25
    51f8:	88 f4       	brcc	.+34     	; 0x521c <__fp_trunc+0x2c>
    51fa:	bb 27       	eor	r27, r27
    51fc:	9f 38       	cpi	r25, 0x8F	; 143
    51fe:	60 f4       	brcc	.+24     	; 0x5218 <__fp_trunc+0x28>
    5200:	16 16       	cp	r1, r22
    5202:	b1 1d       	adc	r27, r1
    5204:	67 2f       	mov	r22, r23
    5206:	78 2f       	mov	r23, r24
    5208:	88 27       	eor	r24, r24
    520a:	98 5f       	subi	r25, 0xF8	; 248
    520c:	f7 cf       	rjmp	.-18     	; 0x51fc <__fp_trunc+0xc>
    520e:	86 95       	lsr	r24
    5210:	77 95       	ror	r23
    5212:	67 95       	ror	r22
    5214:	b1 1d       	adc	r27, r1
    5216:	93 95       	inc	r25
    5218:	96 39       	cpi	r25, 0x96	; 150
    521a:	c8 f3       	brcs	.-14     	; 0x520e <__fp_trunc+0x1e>
    521c:	08 95       	ret

0000521e <__fp_zero>:
    521e:	e8 94       	clt

00005220 <__fp_szero>:
    5220:	bb 27       	eor	r27, r27
    5222:	66 27       	eor	r22, r22
    5224:	77 27       	eor	r23, r23
    5226:	cb 01       	movw	r24, r22
    5228:	97 f9       	bld	r25, 7
    522a:	08 95       	ret

0000522c <__fp_split3>:
    522c:	57 fd       	sbrc	r21, 7
    522e:	90 58       	subi	r25, 0x80	; 128
    5230:	44 0f       	add	r20, r20
    5232:	55 1f       	adc	r21, r21
    5234:	59 f0       	breq	.+22     	; 0x524c <__fp_splitA+0x10>
    5236:	5f 3f       	cpi	r21, 0xFF	; 255
    5238:	71 f0       	breq	.+28     	; 0x5256 <__fp_splitA+0x1a>
    523a:	47 95       	ror	r20

0000523c <__fp_splitA>:
    523c:	88 0f       	add	r24, r24
    523e:	97 fb       	bst	r25, 7
    5240:	99 1f       	adc	r25, r25
    5242:	61 f0       	breq	.+24     	; 0x525c <__fp_splitA+0x20>
    5244:	9f 3f       	cpi	r25, 0xFF	; 255
    5246:	79 f0       	breq	.+30     	; 0x5266 <__fp_splitA+0x2a>
    5248:	87 95       	ror	r24
    524a:	08 95       	ret
    524c:	12 16       	cp	r1, r18
    524e:	13 06       	cpc	r1, r19
    5250:	14 06       	cpc	r1, r20
    5252:	55 1f       	adc	r21, r21
    5254:	f2 cf       	rjmp	.-28     	; 0x523a <__fp_split3+0xe>
    5256:	46 95       	lsr	r20
    5258:	f1 df       	rcall	.-30     	; 0x523c <__fp_splitA>
    525a:	08 c0       	rjmp	.+16     	; 0x526c <__fp_splitA+0x30>
    525c:	16 16       	cp	r1, r22
    525e:	17 06       	cpc	r1, r23
    5260:	18 06       	cpc	r1, r24
    5262:	99 1f       	adc	r25, r25
    5264:	f1 cf       	rjmp	.-30     	; 0x5248 <__fp_splitA+0xc>
    5266:	86 95       	lsr	r24
    5268:	71 05       	cpc	r23, r1
    526a:	61 05       	cpc	r22, r1
    526c:	08 94       	sec
    526e:	08 95       	ret

00005270 <_exit>:
    5270:	f8 94       	cli

00005272 <__stop_program>:
    5272:	ff cf       	rjmp	.-2      	; 0x5272 <__stop_program>
