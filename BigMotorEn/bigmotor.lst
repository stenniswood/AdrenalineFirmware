
bigmotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  000049c0  00004a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000125  0080021e  0080021e  00004b72  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00004b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002fe  00000000  00000000  00005b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000400  00000000  00000000  00005e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000018e8  00000000  00000000  00006202  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008454  00000000  00000000  00007aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000322c  00000000  00000000  0000ff3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005bbf  00000000  00000000  0001316a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f10  00000000  00000000  00018d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000029db  00000000  00000000  00019c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003840  00000000  00000000  0001c617  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000a3c  00000000  00000000  0001fe57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000378  00000000  00000000  00020893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__vector_22>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ec       	ldi	r30, 0xC0	; 192
      a0:	f9 e4       	ldi	r31, 0x49	; 73
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ae 31       	cpi	r26, 0x1E	; 30
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	ae e1       	ldi	r26, 0x1E	; 30
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 34       	cpi	r26, 0x43	; 67
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
      c2:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z24can_prep_eeprom_dump_msgP4sCANPh>:
#include "adc.h"
#include "configuration.h"
#include "calibrations.h"

void can_prep_eeprom_dump_msg( sCAN* mMsg, byte* addr )
{
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	ec 01       	movw	r28, r24
      d4:	8b 01       	movw	r16, r22
	mMsg->id  = create_CAN_eid( 0x0111, MyInstance );
      d6:	81 e1       	ldi	r24, 0x11	; 17
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	60 91 c1 02 	lds	r22, 0x02C1
      de:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
      e2:	68 83       	st	Y, r22
      e4:	79 83       	std	Y+1, r23	; 0x01
      e6:	8a 83       	std	Y+2, r24	; 0x02
      e8:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = (eeprom_read_byte( addr++ ));
      ea:	98 01       	movw	r18, r16
      ec:	2f 5f       	subi	r18, 0xFF	; 255
      ee:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      f0:	f9 99       	sbic	0x1f, 1	; 31
      f2:	fe cf       	rjmp	.-4      	; 0xf0 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
      f4:	12 bd       	out	0x22, r17	; 34
      f6:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
      f8:	f8 9a       	sbi	0x1f, 0	; 31
      fa:	80 b5       	in	r24, 0x20	; 32
      fc:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (eeprom_read_byte( addr++ ));
      fe:	c9 01       	movw	r24, r18
     100:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     102:	f9 99       	sbic	0x1f, 1	; 31
     104:	fe cf       	rjmp	.-4      	; 0x102 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x38>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     106:	32 bd       	out	0x22, r19	; 34
     108:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     10a:	f8 9a       	sbi	0x1f, 0	; 31
     10c:	20 b5       	in	r18, 0x20	; 32
     10e:	2e 83       	std	Y+6, r18	; 0x06
    mMsg->data[2] = (eeprom_read_byte( addr++ ));
     110:	9c 01       	movw	r18, r24
     112:	2f 5f       	subi	r18, 0xFF	; 255
     114:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     116:	f9 99       	sbic	0x1f, 1	; 31
     118:	fe cf       	rjmp	.-4      	; 0x116 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     11a:	92 bd       	out	0x22, r25	; 34
     11c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     11e:	f8 9a       	sbi	0x1f, 0	; 31
     120:	80 b5       	in	r24, 0x20	; 32
     122:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (eeprom_read_byte( addr++ ));
     124:	c9 01       	movw	r24, r18
     126:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     128:	f9 99       	sbic	0x1f, 1	; 31
     12a:	fe cf       	rjmp	.-4      	; 0x128 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     12c:	32 bd       	out	0x22, r19	; 34
     12e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     130:	f8 9a       	sbi	0x1f, 0	; 31
     132:	20 b5       	in	r18, 0x20	; 32
     134:	28 87       	std	Y+8, r18	; 0x08
    mMsg->data[4] = (eeprom_read_byte( addr++ ));
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     13c:	f9 99       	sbic	0x1f, 1	; 31
     13e:	fe cf       	rjmp	.-4      	; 0x13c <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x72>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     140:	92 bd       	out	0x22, r25	; 34
     142:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     144:	f8 9a       	sbi	0x1f, 0	; 31
     146:	80 b5       	in	r24, 0x20	; 32
     148:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = (eeprom_read_byte( addr++ ));
     14a:	c9 01       	movw	r24, r18
     14c:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     14e:	f9 99       	sbic	0x1f, 1	; 31
     150:	fe cf       	rjmp	.-4      	; 0x14e <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x84>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     152:	32 bd       	out	0x22, r19	; 34
     154:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     156:	f8 9a       	sbi	0x1f, 0	; 31
     158:	20 b5       	in	r18, 0x20	; 32
     15a:	2a 87       	std	Y+10, r18	; 0x0a
    mMsg->data[6] = (eeprom_read_byte( addr++ ));
     15c:	9c 01       	movw	r18, r24
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     162:	f9 99       	sbic	0x1f, 1	; 31
     164:	fe cf       	rjmp	.-4      	; 0x162 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x98>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     166:	92 bd       	out	0x22, r25	; 34
     168:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     16a:	f8 9a       	sbi	0x1f, 0	; 31
     16c:	80 b5       	in	r24, 0x20	; 32
     16e:	8b 87       	std	Y+11, r24	; 0x0b
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     170:	f9 99       	sbic	0x1f, 1	; 31
     172:	fe cf       	rjmp	.-4      	; 0x170 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0xa6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     174:	32 bd       	out	0x22, r19	; 34
     176:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     178:	f8 9a       	sbi	0x1f, 0	; 31
     17a:	80 b5       	in	r24, 0x20	; 32
    mMsg->data[7] = (eeprom_read_byte( addr++ ));
     17c:	8c 87       	std	Y+12, r24	; 0x0c
    mMsg->header.DLC	= 8;
     17e:	8c 81       	ldd	r24, Y+4	; 0x04
     180:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
     182:	80 61       	ori	r24, 0x10	; 16
     184:	8c 83       	std	Y+4, r24	; 0x04
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <_Z25can_prep_eeprom_dump1_msgv>:
void can_prep_eeprom_dump1_msg( )
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
	byte* addr = INSTANCE_EEPROM_ADDRESS;
	can_prep_eeprom_dump_msg( &msg1, addr );
     194:	c6 e8       	ldi	r28, 0x86	; 134
     196:	d2 e0       	ldi	r29, 0x02	; 2
     198:	ce 01       	movw	r24, r28
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 0, &msg1 );
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	be 01       	movw	r22, r28
     1a6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_Z12can_send_msghP4sCAN>
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <_Z25can_prep_eeprom_dump2_msgv>:
void can_prep_eeprom_dump2_msg( )
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
	byte* addr = (byte*)(INSTANCE_EEPROM_ADDRESS+8);
	can_prep_eeprom_dump_msg( &msg2, addr );
     1b4:	c5 e9       	ldi	r28, 0x95	; 149
     1b6:	d2 e0       	ldi	r29, 0x02	; 2
     1b8:	ce 01       	movw	r24, r28
     1ba:	69 e0       	ldi	r22, 0x09	; 9
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 2, &msg2 );
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	be 01       	movw	r22, r28
     1c6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_Z12can_send_msghP4sCAN>
}
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <_Z25can_prep_eeprom_dump3_msgv>:
void can_prep_eeprom_dump3_msg( )
{
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
	byte* addr = (byte*)(INSTANCE_EEPROM_ADDRESS+16);
	can_prep_eeprom_dump_msg( &msg1, addr );
     1d4:	c6 e8       	ldi	r28, 0x86	; 134
     1d6:	d2 e0       	ldi	r29, 0x02	; 2
     1d8:	ce 01       	movw	r24, r28
     1da:	61 e1       	ldi	r22, 0x11	; 17
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 4, &msg1 );
     1e2:	84 e0       	ldi	r24, 0x04	; 4
     1e4:	be 01       	movw	r22, r28
     1e6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_Z12can_send_msghP4sCAN>
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <_Z4initv>:
byte ResetReason = 0x00;

void init()
{
	ResetReason = MCUSR;		
     1f0:	84 b7       	in	r24, 0x34	; 52
     1f2:	80 93 1e 02 	sts	0x021E, r24
 	cli();
     1f6:	f8 94       	cli
    chip_init ();    				// Chip initialization
     1f8:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z9chip_initv>
	init_leds ();
     1fc:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_Z9init_ledsv>
	delay(1000000);					// ~ 2 sec
     200:	60 e4       	ldi	r22, 0x40	; 64
     202:	72 e4       	ldi	r23, 0x42	; 66
     204:	8f e0       	ldi	r24, 0x0F	; 15
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_Z5delayl>
	read_cal();						// Read everything including motor stops.	
     20c:	0e 94 7d 07 	call	0xefa	; 0xefa <_Z8read_calv>
	// yes can_init() needs MyInstance to be set already for filtering!
	can_init(CAN_250K_BAUD);		/* Enables Mob0 for Reception! */
     210:	83 e0       	ldi	r24, 0x03	; 3
     212:	0e 94 21 12 	call	0x2442	; 0x2442 <_Z8can_inith>

    // INIT MYINSTANCE:	
	config_init();
     216:	0e 94 89 1b 	call	0x3712	; 0x3712 <_Z11config_initv>
	can_instance_init();
     21a:	0e 94 0b 13 	call	0x2616	; 0x2616 <_Z17can_instance_initv>
	
    set_rx_callback			( can_file_message );
     21e:	80 ea       	ldi	r24, 0xA0	; 160
     220:	93 e0       	ldi	r25, 0x03	; 3
     222:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_Z15set_rx_callbackPFvP4sCANE>
	set_configure_callback	( config_change    );
     226:	8c e3       	ldi	r24, 0x3C	; 60
     228:	96 e0       	ldi	r25, 0x06	; 6
     22a:	0e 94 48 14 	call	0x2890	; 0x2890 <_Z22set_configure_callbackPFvhE>
	sei();
     22e:	78 94       	sei

	OS_InitTask();
     230:	0e 94 96 1a 	call	0x352c	; 0x352c <_Z11OS_InitTaskv>
	pot_init();	
     234:	0e 94 17 09 	call	0x122e	; 0x122e <_Z8pot_initv>
	motor_init ();
     238:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_Z10motor_initv>
	//encoder_init();
	
//	can_prep_instance_request( &msg2, 0xBB );
//	can_send_msg( 0, &msg2 );
}
     23c:	08 95       	ret

0000023e <main>:

//********** main *****************************************************
word prevPosition = 0;
int main(void)
{
	init();
     23e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z4initv>

    	// CAN Messaging will directly Start/Stop the motor.
//   	SET_LED_3();
//		delay(one_second); delay(one_second); 
//		RESET_LED_3();
		delay(one_second); delay(one_second); 
     242:	60 e8       	ldi	r22, 0x80	; 128
     244:	7a e1       	ldi	r23, 0x1A	; 26
     246:	86 e0       	ldi	r24, 0x06	; 6
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_Z5delayl>
     24e:	60 e8       	ldi	r22, 0x80	; 128
     250:	7a e1       	ldi	r23, 0x1A	; 26
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_Z5delayl>
     25a:	f3 cf       	rjmp	.-26     	; 0x242 <main+0x4>

0000025c <_Z17extract_float_msgPh>:
/**************** VARIABLES *************************************/
uint8_t  size = sizeof(float);

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
     25c:	df 93       	push	r29
     25e:	cf 93       	push	r28
     260:	00 d0       	rcall	.+0      	; 0x262 <_Z17extract_float_msgPh+0x6>
     262:	00 d0       	rcall	.+0      	; 0x264 <_Z17extract_float_msgPh+0x8>
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	a8 2f       	mov	r26, r24
     26a:	b9 2f       	mov	r27, r25
     26c:	fe 01       	movw	r30, r28
     26e:	31 96       	adiw	r30, 0x01	; 1

/**************** VARIABLES *************************************/
uint8_t  size = sizeof(float);

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
     270:	ce 01       	movw	r24, r28
     272:	05 96       	adiw	r24, 0x05	; 5
{
	float_array 	floater;
	for (int i=0; i<4; i++)
		floater.array[i] = mdata[i];
     274:	2d 91       	ld	r18, X+
     276:	21 93       	st	Z+, r18

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
	float_array 	floater;
	for (int i=0; i<4; i++)
     278:	e8 17       	cp	r30, r24
     27a:	f9 07       	cpc	r31, r25
     27c:	d9 f7       	brne	.-10     	; 0x274 <_Z17extract_float_msgPh+0x18>
		floater.array[i] = mdata[i];
	return floater.value;
}
     27e:	59 81       	ldd	r21, Y+1	; 0x01
     280:	4a 81       	ldd	r20, Y+2	; 0x02
     282:	3b 81       	ldd	r19, Y+3	; 0x03
     284:	2c 81       	ldd	r18, Y+4	; 0x04
     286:	65 2f       	mov	r22, r21
     288:	74 2f       	mov	r23, r20
     28a:	83 2f       	mov	r24, r19
     28c:	92 2f       	mov	r25, r18
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	08 95       	ret

0000029c <_Z15extract_word_bePh>:
word extract_word_be( byte* mData )
{
     29c:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= (mData[0]<<8);
     29e:	30 81       	ld	r19, Z
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	44 27       	eor	r20, r20
     2a4:	37 fd       	sbrc	r19, 7
     2a6:	40 95       	com	r20
     2a8:	54 2f       	mov	r21, r20
	retval |= mData[1];
     2aa:	81 81       	ldd	r24, Z+1	; 0x01
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	28 2b       	or	r18, r24
     2b4:	39 2b       	or	r19, r25
     2b6:	4a 2b       	or	r20, r26
     2b8:	5b 2b       	or	r21, r27
	return retval;
}
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <_Z15extract_word_lePh>:
word extract_word_le( byte* mData )
{
     2be:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     2c0:	31 81       	ldd	r19, Z+1	; 0x01
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
	return retval;
}
word extract_word_le( byte* mData )
{
	long int retval = 0;
	retval |= mData[0];
     2cc:	80 81       	ld	r24, Z
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
	retval |= (mData[1]<<8 );
     2d4:	28 2b       	or	r18, r24
     2d6:	39 2b       	or	r19, r25
     2d8:	4a 2b       	or	r20, r26
     2da:	5b 2b       	or	r21, r27
	return retval;
}
     2dc:	c9 01       	movw	r24, r18
     2de:	08 95       	ret

000002e0 <_Z19extract_long_int_bePh>:

long int extract_long_int_be( byte* mData)
{
     2e0:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
	retval |= (((unsigned long)mData[2])<<8);
	retval |= (((unsigned long)mData[3]));
     2e2:	23 81       	ldd	r18, Z+3	; 0x03
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
}

long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
     2ea:	80 81       	ld	r24, Z
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	b8 2f       	mov	r27, r24
     2f4:	aa 27       	eor	r26, r26
     2f6:	99 27       	eor	r25, r25
     2f8:	88 27       	eor	r24, r24
	retval |= (((unsigned long)mData[1])<<16);
     2fa:	28 2b       	or	r18, r24
     2fc:	39 2b       	or	r19, r25
     2fe:	4a 2b       	or	r20, r26
     300:	5b 2b       	or	r21, r27
     302:	61 81       	ldd	r22, Z+1	; 0x01
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	cb 01       	movw	r24, r22
     30c:	77 27       	eor	r23, r23
     30e:	66 27       	eor	r22, r22
	retval |= (((unsigned long)mData[2])<<8);
     310:	26 2b       	or	r18, r22
     312:	37 2b       	or	r19, r23
     314:	48 2b       	or	r20, r24
     316:	59 2b       	or	r21, r25
     318:	82 81       	ldd	r24, Z+2	; 0x02
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	ba 2f       	mov	r27, r26
     322:	a9 2f       	mov	r26, r25
     324:	98 2f       	mov	r25, r24
     326:	88 27       	eor	r24, r24
	retval |= (((unsigned long)mData[3]));
     328:	28 2b       	or	r18, r24
     32a:	39 2b       	or	r19, r25
     32c:	4a 2b       	or	r20, r26
     32e:	5b 2b       	or	r21, r27
	return retval;
}
     330:	b9 01       	movw	r22, r18
     332:	ca 01       	movw	r24, r20
     334:	08 95       	ret

00000336 <_Z19extract_long_int_lePh>:
long int extract_long_int_le( byte* mData)
{
     336:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     338:	22 81       	ldd	r18, Z+2	; 0x02
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	a9 01       	movw	r20, r18
     342:	33 27       	eor	r19, r19
     344:	22 27       	eor	r18, r18
	retval |= ((long)mData[3]<<24);
     346:	63 81       	ldd	r22, Z+3	; 0x03
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	96 2f       	mov	r25, r22
     350:	88 27       	eor	r24, r24
     352:	77 27       	eor	r23, r23
     354:	66 27       	eor	r22, r22
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     356:	26 2b       	or	r18, r22
     358:	37 2b       	or	r19, r23
     35a:	48 2b       	or	r20, r24
     35c:	59 2b       	or	r21, r25
	return retval;
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
     35e:	60 81       	ld	r22, Z
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     366:	26 2b       	or	r18, r22
     368:	37 2b       	or	r19, r23
     36a:	48 2b       	or	r20, r24
     36c:	59 2b       	or	r21, r25
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     36e:	91 81       	ldd	r25, Z+1	; 0x01
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	aa 27       	eor	r26, r26
     374:	97 fd       	sbrc	r25, 7
     376:	a0 95       	com	r26
     378:	ba 2f       	mov	r27, r26
	retval |= ((long)mData[2])<<16;
	retval |= ((long)mData[3]<<24);
     37a:	28 2b       	or	r18, r24
     37c:	39 2b       	or	r19, r25
     37e:	4a 2b       	or	r20, r26
     380:	5b 2b       	or	r21, r27
	return retval;
}
     382:	b9 01       	movw	r22, r18
     384:	ca 01       	movw	r24, r20
     386:	08 95       	ret

00000388 <_Z17can_proc_tilt_msgP4sCAN>:
}

/* Extract angle from the Message */
#define KConst 0.25
void can_proc_tilt_msg( sCAN* mMsg )
{
     388:	cf 93       	push	r28
     38a:	fc 01       	movw	r30, r24
	byte yh  = mMsg->data[3];
	byte yl  = mMsg->data[2];
	short y1  = ((yh<<8) | yl);
     38c:	30 85       	ldd	r19, Z+8	; 0x08
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	67 81       	ldd	r22, Z+7	; 0x07
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	62 2b       	or	r22, r18
     396:	73 2b       	or	r23, r19
	float y2 = ((float)y1 / (16535.0));
     398:	88 27       	eor	r24, r24
     39a:	77 fd       	sbrc	r23, 7
     39c:	80 95       	com	r24
     39e:	98 2f       	mov	r25, r24
     3a0:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	3e e2       	ldi	r19, 0x2E	; 46
     3a8:	41 e8       	ldi	r20, 0x81	; 129
     3aa:	56 e4       	ldi	r21, 0x46	; 70
     3ac:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
	// multiply by proportionality constant

	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
     3b4:	8a e0       	ldi	r24, 0x0A	; 10
     3b6:	80 93 37 02 	sts	0x0237, r24
	Destination.speed     = fabs(y2);
     3ba:	da 01       	movw	r26, r20
     3bc:	c9 01       	movw	r24, r18
     3be:	bf 77       	andi	r27, 0x7F	; 127
     3c0:	80 93 52 02 	sts	0x0252, r24
     3c4:	90 93 53 02 	sts	0x0253, r25
     3c8:	a0 93 54 02 	sts	0x0254, r26
     3cc:	b0 93 55 02 	sts	0x0255, r27
	Destination.direction = (y2 > 0);
     3d0:	c1 e0       	ldi	r28, 0x01	; 1
     3d2:	ca 01       	movw	r24, r20
     3d4:	b9 01       	movw	r22, r18
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	a9 01       	movw	r20, r18
     3dc:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
     3e0:	18 16       	cp	r1, r24
     3e2:	24 f4       	brge	.+8      	; 0x3ec <_Z17can_proc_tilt_msgP4sCAN+0x64>
     3e4:	c0 93 51 02 	sts	0x0251, r28
}
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret
	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
	Destination.speed     = fabs(y2);
	Destination.direction = (y2 > 0);
     3ec:	c0 e0       	ldi	r28, 0x00	; 0
     3ee:	c0 93 51 02 	sts	0x0251, r28
}
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <_Z21can_proc_set_stop_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_set_stop_msg( sCAN* mMsg )
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ec 01       	movw	r28, r24
	if (mMsg->data[0] == 1)
     3fc:	8d 81       	ldd	r24, Y+5	; 0x05
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	31 f1       	breq	.+76     	; 0x44e <_Z21can_proc_set_stop_msgP4sCAN+0x58>
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
	} else if (mMsg->data[0] == 2)
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	19 f0       	breq	.+6      	; 0x40c <_Z21can_proc_set_stop_msgP4sCAN+0x16>
	//EndPoint1.angle = 0xFFFFFF12;
	//EndPoint2.angle = 0xFFFFFF13;
	//order_stops_by_value();
	//compute_range();
	//save_cal();
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
	} else if (mMsg->data[0] == 2)
	{
		EndPoint2.angle = extract_long_int_be( &(mMsg->data[1]) );
     40c:	ce 01       	movw	r24, r28
     40e:	06 96       	adiw	r24, 0x06	; 6
     410:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z19extract_long_int_bePh>
     414:	60 93 27 02 	sts	0x0227, r22
     418:	70 93 28 02 	sts	0x0228, r23
     41c:	80 93 29 02 	sts	0x0229, r24
     420:	90 93 2a 02 	sts	0x022A, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     424:	9a 85       	ldd	r25, Y+10	; 0x0a
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	aa 27       	eor	r26, r26
     42a:	97 fd       	sbrc	r25, 7
     42c:	a0 95       	com	r26
     42e:	ba 2f       	mov	r27, r26
	retval |= mData[1];
     430:	2b 85       	ldd	r18, Y+11	; 0x0b
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	82 2b       	or	r24, r18
     43a:	93 2b       	or	r25, r19
     43c:	a4 2b       	or	r26, r20
     43e:	b5 2b       	or	r27, r21
	return retval;
     440:	90 93 2c 02 	sts	0x022C, r25
     444:	80 93 2b 02 	sts	0x022B, r24
	//EndPoint1.angle = 0xFFFFFF12;
	//EndPoint2.angle = 0xFFFFFF13;
	//order_stops_by_value();
	//compute_range();
	//save_cal();
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret
/* Extract angle from the Message */
void can_proc_set_stop_msg( sCAN* mMsg )
{
	if (mMsg->data[0] == 1)
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
     44e:	ce 01       	movw	r24, r28
     450:	06 96       	adiw	r24, 0x06	; 6
     452:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z19extract_long_int_bePh>
     456:	60 93 21 02 	sts	0x0221, r22
     45a:	70 93 22 02 	sts	0x0222, r23
     45e:	80 93 23 02 	sts	0x0223, r24
     462:	90 93 24 02 	sts	0x0224, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     466:	9a 85       	ldd	r25, Y+10	; 0x0a
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	aa 27       	eor	r26, r26
     46c:	97 fd       	sbrc	r25, 7
     46e:	a0 95       	com	r26
     470:	ba 2f       	mov	r27, r26
	retval |= mData[1];
     472:	2b 85       	ldd	r18, Y+11	; 0x0b
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	82 2b       	or	r24, r18
     47c:	93 2b       	or	r25, r19
     47e:	a4 2b       	or	r26, r20
     480:	b5 2b       	or	r27, r21
	return retval;
     482:	90 93 26 02 	sts	0x0226, r25
     486:	80 93 25 02 	sts	0x0225, r24
	//EndPoint1.angle = 0xFFFFFF12;
	//EndPoint2.angle = 0xFFFFFF13;
	//order_stops_by_value();
	//compute_range();
	//save_cal();
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <_Z26can_proc_move_to_angle_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_move_to_angle_msg ( sCAN* mMsg )
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
	// Angle is a 4 byte signed integer.  
	// It is degrees * 100 
	long int tmp_angle 	 		  = extract_long_int_be( mMsg->data );
     496:	05 96       	adiw	r24, 0x05	; 5
     498:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z19extract_long_int_bePh>
	Destination.starting_position = PotSample[1];
     49c:	20 91 7e 02 	lds	r18, 0x027E
     4a0:	30 91 7f 02 	lds	r19, 0x027F
     4a4:	30 93 4e 02 	sts	0x024E, r19
     4a8:	20 93 4d 02 	sts	0x024D, r18
	Destination.position 		  = convert_to_value(tmp_angle);
     4ac:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_Z16convert_to_valuel>
     4b0:	90 93 50 02 	sts	0x0250, r25
     4b4:	80 93 4f 02 	sts	0x024F, r24
	Destination.coast 			  = 0x00;  // apply when destination is reached.
     4b8:	10 92 5a 02 	sts	0x025A, r1

	short speed  = (mMsg->data[4]<<8) + mMsg->data[5];
     4bc:	99 85       	ldd	r25, Y+9	; 0x09
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	2a 85       	ldd	r18, Y+10	; 0x0a
     4c2:	82 0f       	add	r24, r18
     4c4:	91 1d       	adc	r25, r1
	Destination.speed = (speed/100);	    // hundredth percent is sent.
     4c6:	64 e6       	ldi	r22, 0x64	; 100
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
     4ce:	88 27       	eor	r24, r24
     4d0:	77 fd       	sbrc	r23, 7
     4d2:	80 95       	com	r24
     4d4:	98 2f       	mov	r25, r24
     4d6:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     4da:	60 93 52 02 	sts	0x0252, r22
     4de:	70 93 53 02 	sts	0x0253, r23
     4e2:	80 93 54 02 	sts	0x0254, r24
     4e6:	90 93 55 02 	sts	0x0255, r25
	get_direction_to_destination();
     4ea:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z28get_direction_to_destinationv>
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <_Z23can_proc_move_speed_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_move_speed_msg( sCAN* mMsg )
{
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	fc 01       	movw	r30, r24
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     4fe:	75 81       	ldd	r23, Z+5	; 0x05
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	88 27       	eor	r24, r24
     504:	77 fd       	sbrc	r23, 7
     506:	80 95       	com	r24
     508:	98 2f       	mov	r25, r24
	retval |= mData[1];
     50a:	26 81       	ldd	r18, Z+6	; 0x06
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	62 2b       	or	r22, r18
     514:	73 2b       	or	r23, r19
     516:	84 2b       	or	r24, r20
     518:	95 2b       	or	r25, r21
{
	// speed is a float
	// Value is a number [-100.00 to 100.00]  * 100  == [-10000..10000]
	// So 10,000 represents 100.00%
	short speed = extract_word_be( mMsg->data );	
	Destination.coast = 0; 
     51a:	10 92 5a 02 	sts	0x025A, r1
	Destination.speed = ((float)speed / 10000.0);
     51e:	88 27       	eor	r24, r24
     520:	77 fd       	sbrc	r23, 7
     522:	80 95       	com	r24
     524:	98 2f       	mov	r25, r24
     526:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e4       	ldi	r19, 0x40	; 64
     52e:	4c e1       	ldi	r20, 0x1C	; 28
     530:	56 e4       	ldi	r21, 0x46	; 70
     532:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     536:	e6 2e       	mov	r14, r22
     538:	f7 2e       	mov	r15, r23
     53a:	08 2f       	mov	r16, r24
     53c:	19 2f       	mov	r17, r25
     53e:	26 2f       	mov	r18, r22
     540:	37 2f       	mov	r19, r23
     542:	48 2f       	mov	r20, r24
     544:	59 2f       	mov	r21, r25
     546:	20 93 52 02 	sts	0x0252, r18
     54a:	30 93 53 02 	sts	0x0253, r19
     54e:	40 93 54 02 	sts	0x0254, r20
     552:	50 93 55 02 	sts	0x0255, r21
	if (Destination.speed > 0)
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	a9 01       	movw	r20, r18
     55c:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
     560:	18 16       	cp	r1, r24
     562:	9c f0       	brlt	.+38     	; 0x58a <__stack+0x8b>
		Destination.direction = 1;
	else {
		Destination.direction = 0;
     564:	10 92 51 02 	sts	0x0251, r1
		Destination.speed = -Destination.speed;	// make it positive
     568:	17 fb       	bst	r17, 7
     56a:	10 95       	com	r17
     56c:	17 f9       	bld	r17, 7
     56e:	10 95       	com	r17
     570:	e0 92 52 02 	sts	0x0252, r14
     574:	f0 92 53 02 	sts	0x0253, r15
     578:	00 93 54 02 	sts	0x0254, r16
     57c:	10 93 55 02 	sts	0x0255, r17
	}
}
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	08 95       	ret
	// So 10,000 represents 100.00%
	short speed = extract_word_be( mMsg->data );	
	Destination.coast = 0; 
	Destination.speed = ((float)speed / 10000.0);
	if (Destination.speed > 0)
		Destination.direction = 1;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 51 02 	sts	0x0251, r24
	else {
		Destination.direction = 0;
		Destination.speed = -Destination.speed;	// make it positive
	}
}
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	08 95       	ret

0000059a <_Z23can_proc_stop_motor_msgP4sCAN>:

void can_proc_stop_motor_msg( sCAN* mMsg )
{
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ec 01       	movw	r28, r24
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     5a0:	7d 81       	ldd	r23, Y+5	; 0x05
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	88 27       	eor	r24, r24
     5a6:	77 fd       	sbrc	r23, 7
     5a8:	80 95       	com	r24
     5aa:	98 2f       	mov	r25, r24
	retval |= mData[1];
     5ac:	2e 81       	ldd	r18, Y+6	; 0x06
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	62 2b       	or	r22, r18
     5b6:	73 2b       	or	r23, r19
     5b8:	84 2b       	or	r24, r20
     5ba:	95 2b       	or	r25, r21
}

void can_proc_stop_motor_msg( sCAN* mMsg )
{
	short brake = extract_word_be( &(mMsg->data[0])  );
	Destination.speed = fabs(((float)brake / 10000.0));
     5bc:	88 27       	eor	r24, r24
     5be:	77 fd       	sbrc	r23, 7
     5c0:	80 95       	com	r24
     5c2:	98 2f       	mov	r25, r24
     5c4:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e4       	ldi	r19, 0x40	; 64
     5cc:	4c e1       	ldi	r20, 0x1C	; 28
     5ce:	56 e4       	ldi	r21, 0x46	; 70
     5d0:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     5d4:	9f 77       	andi	r25, 0x7F	; 127
     5d6:	60 93 52 02 	sts	0x0252, r22
     5da:	70 93 53 02 	sts	0x0253, r23
     5de:	80 93 54 02 	sts	0x0254, r24
     5e2:	90 93 55 02 	sts	0x0255, r25

	/* We can have coast (both directions low) with a duty cycle.
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
     5e6:	8f 81       	ldd	r24, Y+7	; 0x07
     5e8:	88 23       	and	r24, r24
     5ea:	29 f0       	breq	.+10     	; 0x5f6 <_Z23can_proc_stop_motor_msgP4sCAN+0x5c>
		Destination.coast = HARD_STOP_MOTOR;		// STOP
	else 
		Destination.coast = mMsg->data[2];
     5ec:	80 93 5a 02 	sts	0x025A, r24
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

	/* We can have coast (both directions low) with a duty cycle.
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
		Destination.coast = HARD_STOP_MOTOR;		// STOP
     5f6:	83 e6       	ldi	r24, 0x63	; 99
     5f8:	80 93 5a 02 	sts	0x025A, r24
	else 
		Destination.coast = mMsg->data[2];
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <_Z28can_proc_move_dual_speed_msgP4sCAN>:

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ec 01       	movw	r28, r24
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     608:	7d 81       	ldd	r23, Y+5	; 0x05
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	88 27       	eor	r24, r24
     60e:	77 fd       	sbrc	r23, 7
     610:	80 95       	com	r24
     612:	98 2f       	mov	r25, r24
	retval |= mData[1];
     614:	2e 81       	ldd	r18, Y+6	; 0x06
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	62 2b       	or	r22, r18
     61e:	73 2b       	or	r23, r19
     620:	84 2b       	or	r24, r20
     622:	95 2b       	or	r25, r21

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float
     624:	88 27       	eor	r24, r24
     626:	77 fd       	sbrc	r23, 7
     628:	80 95       	com	r24
     62a:	98 2f       	mov	r25, r24
     62c:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e4       	ldi	r19, 0x40	; 64
     634:	4c e1       	ldi	r20, 0x1C	; 28
     636:	56 e4       	ldi	r21, 0x46	; 70
     638:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     63c:	60 93 52 02 	sts	0x0252, r22
     640:	70 93 53 02 	sts	0x0253, r23
     644:	80 93 54 02 	sts	0x0254, r24
     648:	90 93 55 02 	sts	0x0255, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     64c:	7f 81       	ldd	r23, Y+7	; 0x07
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	88 27       	eor	r24, r24
     652:	77 fd       	sbrc	r23, 7
     654:	80 95       	com	r24
     656:	98 2f       	mov	r25, r24
	retval |= mData[1];
     658:	28 85       	ldd	r18, Y+8	; 0x08
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	62 2b       	or	r22, r18
     662:	73 2b       	or	r23, r19
     664:	84 2b       	or	r24, r20
     666:	95 2b       	or	r25, r21
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float

	speed = extract_word_be( &(mMsg->data[2]) );
	Destination.speed2 = ((float)speed / 10000.0);
     668:	88 27       	eor	r24, r24
     66a:	77 fd       	sbrc	r23, 7
     66c:	80 95       	com	r24
     66e:	98 2f       	mov	r25, r24
     670:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e4       	ldi	r19, 0x40	; 64
     678:	4c e1       	ldi	r20, 0x1C	; 28
     67a:	56 e4       	ldi	r21, 0x46	; 70
     67c:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     680:	60 93 56 02 	sts	0x0256, r22
     684:	70 93 57 02 	sts	0x0257, r23
     688:	80 93 58 02 	sts	0x0258, r24
     68c:	90 93 59 02 	sts	0x0259, r25

	// There's no direction for unidirectional mode!
	//Destination.direction = 1;	
	//MotorState = MOTOR_REQUEST_PENDING;
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <_Z29can_proc_max_acceleration_msgP4sCAN>:

void can_proc_max_acceleration_msg ( sCAN* mMsg )
{
}
     696:	08 95       	ret

00000698 <_Z13can_prep_stopP4sCANh>:
		Calibrated Stop 1	(POT value & angle)
		Calibrated Stop 2	(POT value & angle)
***********************************************************/
/* For informational purposes, send our travel end points. */
void can_prep_stop( sCAN* mMsg, byte mStopNumber )
{
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	ec 01       	movw	r28, r24
     6a0:	16 2f       	mov	r17, r22
	word PotValue = 0xFFFF;
	long int Angle= -1;
    mMsg->id 	  = create_CAN_eid( 0x00, ID_CALIBRATED_STOP, MyInstance );
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	65 e4       	ldi	r22, 0x45	; 69
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	40 91 c1 02 	lds	r20, 0x02C1
     6ac:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z14create_CAN_eidhth>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	88 83       	st	Y, r24
     6b6:	99 83       	std	Y+1, r25	; 0x01
     6b8:	aa 83       	std	Y+2, r26	; 0x02
     6ba:	bb 83       	std	Y+3, r27	; 0x03

    if (mStopNumber==1) {
     6bc:	11 30       	cpi	r17, 0x01	; 1
     6be:	61 f1       	breq	.+88     	; 0x718 <_Z13can_prep_stopP4sCANh+0x80>
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
    } else if (mStopNumber==2) { 
     6c0:	12 30       	cpi	r17, 0x02	; 2
     6c2:	b1 f0       	breq	.+44     	; 0x6f0 <_Z13can_prep_stopP4sCANh+0x58>
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	3f ef       	ldi	r19, 0xFF	; 255
     6ca:	4f ef       	ldi	r20, 0xFF	; 255
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	5f ef       	ldi	r21, 0xFF	; 255
    	PotValue = EndPoint2.value;
    	Angle    = EndPoint2.angle;
    }
    mMsg->data[0] = mStopNumber&0x0F;
     6d0:	1f 70       	andi	r17, 0x0F	; 15
     6d2:	1d 83       	std	Y+5, r17	; 0x05
	word tmp = hi_word(Angle);
	mMsg->data[1] = hi(tmp);
     6d4:	5e 83       	std	Y+6, r21	; 0x06
	mMsg->data[2] = lo(tmp);	
     6d6:	8f 83       	std	Y+7, r24	; 0x07
	tmp = lo_word(Angle);
	mMsg->data[3] = hi(tmp);
     6d8:	48 87       	std	Y+8, r20	; 0x08
	mMsg->data[4] = lo(tmp);
     6da:	39 87       	std	Y+9, r19	; 0x09
	mMsg->data[5] = hi(PotValue);
     6dc:	2a 87       	std	Y+10, r18	; 0x0a
	mMsg->data[6] = lo(PotValue);
     6de:	9b 87       	std	Y+11, r25	; 0x0b
    mMsg->header.DLC = 7;
     6e0:	8c 81       	ldd	r24, Y+4	; 0x04
     6e2:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     6e4:	8e 60       	ori	r24, 0x0E	; 14
     6e6:	8c 83       	std	Y+4, r24	; 0x04
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	08 95       	ret
    if (mStopNumber==1) {
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
    } else if (mStopNumber==2) { 
    	PotValue = EndPoint2.value;
    	Angle    = EndPoint2.angle;
     6f0:	20 91 27 02 	lds	r18, 0x0227
     6f4:	40 91 28 02 	lds	r20, 0x0228
     6f8:	82 2f       	mov	r24, r18
     6fa:	94 2f       	mov	r25, r20
     6fc:	a0 91 29 02 	lds	r26, 0x0229
     700:	b0 91 2a 02 	lds	r27, 0x022A
     704:	cd 01       	movw	r24, r26
     706:	aa 27       	eor	r26, r26
     708:	bb 27       	eor	r27, r27
     70a:	59 2f       	mov	r21, r25
     70c:	32 2f       	mov	r19, r18
     70e:	20 91 2c 02 	lds	r18, 0x022C
     712:	90 91 2b 02 	lds	r25, 0x022B
     716:	dc cf       	rjmp	.-72     	; 0x6d0 <_Z13can_prep_stopP4sCANh+0x38>
	long int Angle= -1;
    mMsg->id 	  = create_CAN_eid( 0x00, ID_CALIBRATED_STOP, MyInstance );

    if (mStopNumber==1) {
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
     718:	20 91 21 02 	lds	r18, 0x0221
     71c:	40 91 22 02 	lds	r20, 0x0222
     720:	82 2f       	mov	r24, r18
     722:	94 2f       	mov	r25, r20
     724:	a0 91 23 02 	lds	r26, 0x0223
     728:	b0 91 24 02 	lds	r27, 0x0224
     72c:	cd 01       	movw	r24, r26
     72e:	aa 27       	eor	r26, r26
     730:	bb 27       	eor	r27, r27
     732:	59 2f       	mov	r21, r25
     734:	32 2f       	mov	r19, r18
     736:	20 91 26 02 	lds	r18, 0x0226
     73a:	90 91 25 02 	lds	r25, 0x0225
     73e:	c8 cf       	rjmp	.-112    	; 0x6d0 <_Z13can_prep_stopP4sCANh+0x38>

00000740 <_Z16can_file_messageP4sCAN>:
#define ID_MOVE_TO_ANGLE				0x0042		 Instance goes with intended Receiver
#define ID_MOVE_SPEED					0x0043
#define ID_SET_MAX_MOTOR_ACCEL			0x0044		*/

void can_file_message( sCAN* mMsg )
{
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
     746:	80 e4       	ldi	r24, 0x40	; 64
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	60 91 c1 02 	lds	r22, 0x02C1
     74e:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	68 81       	ld	r22, Y
     758:	79 81       	ldd	r23, Y+1	; 0x01
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	9b 81       	ldd	r25, Y+3	; 0x03
     75e:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
     762:	88 23       	and	r24, r24
     764:	e1 f0       	breq	.+56     	; 0x79e <_Z16can_file_messageP4sCAN+0x5e>
	{
		// data[0] == [0x1x] means report on the mark stop.
		if ( (mMsg->data[0] & 0x10) == 0x10) 	// READ?
     766:	8d 81       	ldd	r24, Y+5	; 0x05
     768:	84 fd       	sbrc	r24, 4
     76a:	09 c0       	rjmp	.+18     	; 0x77e <_Z16can_file_messageP4sCAN+0x3e>
			can_prep_stop( &msg1, 1 ); 
			can_prep_stop( &msg2, 2 );
			System_Send_Status=0x03;		// buff 1 & 2
		} else {
			// The request has been to set "mark" a stop.
			can_proc_set_stop_msg( mMsg );
     76c:	ce 01       	movw	r24, r28
     76e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z21can_proc_set_stop_msgP4sCAN>
			System_Send_Status = 0x10;
     772:	80 e1       	ldi	r24, 0x10	; 16
     774:	80 93 ce 02 	sts	0x02CE, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
	{
		// data[0] == [0x1x] means report on the mark stop.
		if ( (mMsg->data[0] & 0x10) == 0x10) 	// READ?
		{
			can_prep_stop( &msg1, 1 ); 
     77e:	86 e8       	ldi	r24, 0x86	; 134
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	0e 94 4c 03 	call	0x698	; 0x698 <_Z13can_prep_stopP4sCANh>
			can_prep_stop( &msg2, 2 );
     788:	85 e9       	ldi	r24, 0x95	; 149
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	62 e0       	ldi	r22, 0x02	; 2
     78e:	0e 94 4c 03 	call	0x698	; 0x698 <_Z13can_prep_stopP4sCANh>
			System_Send_Status=0x03;		// buff 1 & 2
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	80 93 ce 02 	sts	0x02CE, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret
			can_proc_set_stop_msg( mMsg );
			System_Send_Status = 0x10;
			// Save EEPROM occurs in time slice function!
		}
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_TO_ANGLE, MyInstance)) )
     79e:	81 e4       	ldi	r24, 0x41	; 65
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	60 91 c1 02 	lds	r22, 0x02C1
     7a6:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	68 81       	ld	r22, Y
     7b0:	79 81       	ldd	r23, Y+1	; 0x01
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	9b 81       	ldd	r25, Y+3	; 0x03
     7b6:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
     7ba:	88 23       	and	r24, r24
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <_Z16can_file_messageP4sCAN+0x80>
     7be:	4e c0       	rjmp	.+156    	; 0x85c <_Z16can_file_messageP4sCAN+0x11c>
	{
		// includes a speed:
		can_proc_move_to_angle_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_SPEED, MyInstance)) )	
     7c0:	82 e4       	ldi	r24, 0x42	; 66
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	60 91 c1 02 	lds	r22, 0x02C1
     7c8:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	68 81       	ld	r22, Y
     7d2:	79 81       	ldd	r23, Y+1	; 0x01
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	9b 81       	ldd	r25, Y+3	; 0x03
     7d8:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
     7dc:	88 23       	and	r24, r24
     7de:	09 f0       	breq	.+2      	; 0x7e2 <_Z16can_file_messageP4sCAN+0xa2>
     7e0:	46 c0       	rjmp	.+140    	; 0x86e <_Z16can_file_messageP4sCAN+0x12e>
	{
		can_proc_move_speed_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_STOP_MOTOR, MyInstance)) )
     7e2:	8b e4       	ldi	r24, 0x4B	; 75
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	60 91 c1 02 	lds	r22, 0x02C1
     7ea:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     7ee:	9b 01       	movw	r18, r22
     7f0:	ac 01       	movw	r20, r24
     7f2:	68 81       	ld	r22, Y
     7f4:	79 81       	ldd	r23, Y+1	; 0x01
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	9b 81       	ldd	r25, Y+3	; 0x03
     7fa:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
     7fe:	88 23       	and	r24, r24
     800:	09 f4       	brne	.+2      	; 0x804 <_Z16can_file_messageP4sCAN+0xc4>
     802:	40 c0       	rjmp	.+128    	; 0x884 <_Z16can_file_messageP4sCAN+0x144>
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     804:	7d 81       	ldd	r23, Y+5	; 0x05
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	88 27       	eor	r24, r24
     80a:	77 fd       	sbrc	r23, 7
     80c:	80 95       	com	r24
     80e:	98 2f       	mov	r25, r24
	retval |= mData[1];
     810:	2e 81       	ldd	r18, Y+6	; 0x06
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	62 2b       	or	r22, r18
     81a:	73 2b       	or	r23, r19
     81c:	84 2b       	or	r24, r20
     81e:	95 2b       	or	r25, r21
}

void can_proc_stop_motor_msg( sCAN* mMsg )
{
	short brake = extract_word_be( &(mMsg->data[0])  );
	Destination.speed = fabs(((float)brake / 10000.0));
     820:	88 27       	eor	r24, r24
     822:	77 fd       	sbrc	r23, 7
     824:	80 95       	com	r24
     826:	98 2f       	mov	r25, r24
     828:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e4       	ldi	r19, 0x40	; 64
     830:	4c e1       	ldi	r20, 0x1C	; 28
     832:	56 e4       	ldi	r21, 0x46	; 70
     834:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     838:	9f 77       	andi	r25, 0x7F	; 127
     83a:	60 93 52 02 	sts	0x0252, r22
     83e:	70 93 53 02 	sts	0x0253, r23
     842:	80 93 54 02 	sts	0x0254, r24
     846:	90 93 55 02 	sts	0x0255, r25

	/* We can have coast (both directions low) with a duty cycle.
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
     84a:	8f 81       	ldd	r24, Y+7	; 0x07
     84c:	88 23       	and	r24, r24
     84e:	b1 f0       	breq	.+44     	; 0x87c <_Z16can_file_messageP4sCAN+0x13c>
		Destination.coast = HARD_STOP_MOTOR;		// STOP
	else 
		Destination.coast = mMsg->data[2];
     850:	80 93 5a 02 	sts	0x025A, r24
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
	{
		can_proc_move_dual_speed_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
     854:	8a e0       	ldi	r24, 0x0A	; 10
     856:	80 93 37 02 	sts	0x0237, r24
     85a:	8e cf       	rjmp	.-228    	; 0x778 <_Z16can_file_messageP4sCAN+0x38>
		}
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_TO_ANGLE, MyInstance)) )
	{
		// includes a speed:
		can_proc_move_to_angle_msg( mMsg );
     85c:	ce 01       	movw	r24, r28
     85e:	0e 94 48 02 	call	0x490	; 0x490 <_Z26can_proc_move_to_angle_msgP4sCAN>
		MotorState = MOTOR_REQUEST_PENDING;
     862:	8a e0       	ldi	r24, 0x0A	; 10
     864:	80 93 37 02 	sts	0x0237, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret
		can_proc_move_to_angle_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_SPEED, MyInstance)) )	
	{
		can_proc_move_speed_msg( mMsg );
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z23can_proc_move_speed_msgP4sCAN>
		MotorState = MOTOR_REQUEST_PENDING;
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	80 93 37 02 	sts	0x0237, r24
     87a:	7e cf       	rjmp	.-260    	; 0x778 <_Z16can_file_messageP4sCAN+0x38>

	/* We can have coast (both directions low) with a duty cycle.
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
		Destination.coast = HARD_STOP_MOTOR;		// STOP
     87c:	83 e6       	ldi	r24, 0x63	; 99
     87e:	80 93 5a 02 	sts	0x025A, r24
     882:	e8 cf       	rjmp	.-48     	; 0x854 <_Z16can_file_messageP4sCAN+0x114>
	else if ( match(mMsg->id, create_CAN_eid(ID_STOP_MOTOR, MyInstance)) )
	{
		can_proc_stop_motor_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
     884:	84 e4       	ldi	r24, 0x44	; 68
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	60 91 c1 02 	lds	r22, 0x02C1
     88c:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	68 81       	ld	r22, Y
     896:	79 81       	ldd	r23, Y+1	; 0x01
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	9b 81       	ldd	r25, Y+3	; 0x03
     89c:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <_Z16can_file_messageP4sCAN+0x166>
     8a4:	45 c0       	rjmp	.+138    	; 0x930 <_Z16can_file_messageP4sCAN+0x1f0>
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     8a6:	7d 81       	ldd	r23, Y+5	; 0x05
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	88 27       	eor	r24, r24
     8ac:	77 fd       	sbrc	r23, 7
     8ae:	80 95       	com	r24
     8b0:	98 2f       	mov	r25, r24
	retval |= mData[1];
     8b2:	2e 81       	ldd	r18, Y+6	; 0x06
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	62 2b       	or	r22, r18
     8bc:	73 2b       	or	r23, r19
     8be:	84 2b       	or	r24, r20
     8c0:	95 2b       	or	r25, r21

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float
     8c2:	88 27       	eor	r24, r24
     8c4:	77 fd       	sbrc	r23, 7
     8c6:	80 95       	com	r24
     8c8:	98 2f       	mov	r25, r24
     8ca:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e4       	ldi	r19, 0x40	; 64
     8d2:	4c e1       	ldi	r20, 0x1C	; 28
     8d4:	56 e4       	ldi	r21, 0x46	; 70
     8d6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     8da:	60 93 52 02 	sts	0x0252, r22
     8de:	70 93 53 02 	sts	0x0253, r23
     8e2:	80 93 54 02 	sts	0x0254, r24
     8e6:	90 93 55 02 	sts	0x0255, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     8ea:	7f 81       	ldd	r23, Y+7	; 0x07
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	88 27       	eor	r24, r24
     8f0:	77 fd       	sbrc	r23, 7
     8f2:	80 95       	com	r24
     8f4:	98 2f       	mov	r25, r24
	retval |= mData[1];
     8f6:	28 85       	ldd	r18, Y+8	; 0x08
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	62 2b       	or	r22, r18
     900:	73 2b       	or	r23, r19
     902:	84 2b       	or	r24, r20
     904:	95 2b       	or	r25, r21
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float

	speed = extract_word_be( &(mMsg->data[2]) );
	Destination.speed2 = ((float)speed / 10000.0);
     906:	88 27       	eor	r24, r24
     908:	77 fd       	sbrc	r23, 7
     90a:	80 95       	com	r24
     90c:	98 2f       	mov	r25, r24
     90e:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e4       	ldi	r19, 0x40	; 64
     916:	4c e1       	ldi	r20, 0x1C	; 28
     918:	56 e4       	ldi	r21, 0x46	; 70
     91a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     91e:	60 93 56 02 	sts	0x0256, r22
     922:	70 93 57 02 	sts	0x0257, r23
     926:	80 93 58 02 	sts	0x0258, r24
     92a:	90 93 59 02 	sts	0x0259, r25
     92e:	92 cf       	rjmp	.-220    	; 0x854 <_Z16can_file_messageP4sCAN+0x114>
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
	{
		can_proc_move_dual_speed_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_SET_MAX_MOTOR_ACCEL, MyInstance)) )
     930:	83 e4       	ldi	r24, 0x43	; 67
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	60 91 c1 02 	lds	r22, 0x02C1
     938:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	68 81       	ld	r22, Y
     942:	79 81       	ldd	r23, Y+1	; 0x01
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	9b 81       	ldd	r25, Y+3	; 0x03
     948:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
     94c:	88 23       	and	r24, r24
     94e:	09 f0       	breq	.+2      	; 0x952 <_Z16can_file_messageP4sCAN+0x212>
     950:	13 cf       	rjmp	.-474    	; 0x778 <_Z16can_file_messageP4sCAN+0x38>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     952:	80 91 3e 03 	lds	r24, 0x033E
	{
		can_proc_max_acceleration_msg( mMsg );
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
     956:	84 ff       	sbrs	r24, 4
     958:	0f cf       	rjmp	.-482    	; 0x778 <_Z16can_file_messageP4sCAN+0x38>
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
     95a:	81 e7       	ldi	r24, 0x71	; 113
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	68 81       	ld	r22, Y
     96a:	79 81       	ldd	r23, Y+1	; 0x01
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	9b 81       	ldd	r25, Y+3	; 0x03
     970:	0e 94 39 14 	call	0x2872	; 0x2872 <_Z8id_match6idTypeS_>
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_SET_MAX_MOTOR_ACCEL, MyInstance)) )
	{
		can_proc_max_acceleration_msg( mMsg );
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <_Z16can_file_messageP4sCAN+0x23a>
     978:	ff ce       	rjmp	.-514    	; 0x778 <_Z16can_file_messageP4sCAN+0x38>
#define KConst 0.25
void can_proc_tilt_msg( sCAN* mMsg )
{
	byte yh  = mMsg->data[3];
	byte yl  = mMsg->data[2];
	short y1  = ((yh<<8) | yl);
     97a:	98 85       	ldd	r25, Y+8	; 0x08
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	6f 81       	ldd	r22, Y+7	; 0x07
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	68 2b       	or	r22, r24
     984:	79 2b       	or	r23, r25
	float y2 = ((float)y1 / (16535.0));
     986:	88 27       	eor	r24, r24
     988:	77 fd       	sbrc	r23, 7
     98a:	80 95       	com	r24
     98c:	98 2f       	mov	r25, r24
     98e:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	3e e2       	ldi	r19, 0x2E	; 46
     996:	41 e8       	ldi	r20, 0x81	; 129
     998:	56 e4       	ldi	r21, 0x46	; 70
     99a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
	// multiply by proportionality constant

	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
     9a2:	8a e0       	ldi	r24, 0x0A	; 10
     9a4:	80 93 37 02 	sts	0x0237, r24
	Destination.speed     = fabs(y2);
     9a8:	da 01       	movw	r26, r20
     9aa:	c9 01       	movw	r24, r18
     9ac:	bf 77       	andi	r27, 0x7F	; 127
     9ae:	80 93 52 02 	sts	0x0252, r24
     9b2:	90 93 53 02 	sts	0x0253, r25
     9b6:	a0 93 54 02 	sts	0x0254, r26
     9ba:	b0 93 55 02 	sts	0x0255, r27
	Destination.direction = (y2 > 0);
     9be:	c1 e0       	ldi	r28, 0x01	; 1
     9c0:	ca 01       	movw	r24, r20
     9c2:	b9 01       	movw	r22, r18
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	a9 01       	movw	r20, r18
     9ca:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
     9ce:	18 16       	cp	r1, r24
     9d0:	1c f4       	brge	.+6      	; 0x9d8 <_Z16can_file_messageP4sCAN+0x298>
     9d2:	c0 93 51 02 	sts	0x0251, r28
     9d6:	d0 ce       	rjmp	.-608    	; 0x778 <_Z16can_file_messageP4sCAN+0x38>
     9d8:	c0 e0       	ldi	r28, 0x00	; 0
     9da:	fb cf       	rjmp	.-10     	; 0x9d2 <_Z16can_file_messageP4sCAN+0x292>

000009dc <_Z20can_prep_motor_angleP4sCAN>:
    mMsg->header.DLC = 7;
    mMsg->header.rtr = 0;
}

void can_prep_motor_angle( sCAN* mMsg )
{
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24
	byte size = 4;
    mMsg->id = create_CAN_eid( ID_MOTOR_ANGLE, MyInstance );
     9e2:	86 e4       	ldi	r24, 0x46	; 70
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	60 91 c1 02 	lds	r22, 0x02C1
     9ea:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
     9ee:	68 83       	st	Y, r22
     9f0:	79 83       	std	Y+1, r23	; 0x01
     9f2:	8a 83       	std	Y+2, r24	; 0x02
     9f4:	9b 83       	std	Y+3, r25	; 0x03

	// FILL CURRENT ANGLE :
	// Fixed point, 
	float_array Angle; 
	Angle.value = get_motor_angle();
     9f6:	0e 94 3b 08 	call	0x1076	; 0x1076 <_Z15get_motor_anglev>
	for (int i=0; i<size; i++)
	    mMsg->data[i] = Angle.array[i];
     9fa:	6d 83       	std	Y+5, r22	; 0x05
     9fc:	7e 83       	std	Y+6, r23	; 0x06
     9fe:	8f 83       	std	Y+7, r24	; 0x07
     a00:	98 87       	std	Y+8, r25	; 0x08
	mMsg->data[size+0] = hi(CurrentAvg);
	mMsg->data[size+1] = lo(CurrentAvg); */

	// Make (TENTH DEG/SEC) ANGLE SPEED INSTEAD!!!!!:
	//short TenthDegSec = PotSpeed[1]
	mMsg->data[size+0] = hi(PotSpeed[1]);
     a02:	80 91 3a 02 	lds	r24, 0x023A
     a06:	90 91 3b 02 	lds	r25, 0x023B
     a0a:	99 87       	std	Y+9, r25	; 0x09
	mMsg->data[size+1] = lo(PotSpeed[1]);
     a0c:	8a 87       	std	Y+10, r24	; 0x0a

    mMsg->header.DLC = size+2;
     a0e:	8c 81       	ldd	r24, Y+4	; 0x04
     a10:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     a12:	8c 60       	ori	r24, 0x0C	; 12
     a14:	8c 83       	std	Y+4, r24	; 0x04
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <_Z25can_prep_motor_values_rawP4sCAN>:

/* Reports: Position, Speed, and electrical Current draw */
void can_prep_motor_values_raw( sCAN* mMsg )
{
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_VALUE, MyInstance );
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	67 e4       	ldi	r22, 0x47	; 71
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	40 91 c1 02 	lds	r20, 0x02C1
     a3c:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z14create_CAN_eidhth>
     a40:	68 83       	st	Y, r22
     a42:	79 83       	std	Y+1, r23	; 0x01
     a44:	8a 83       	std	Y+2, r24	; 0x02
     a46:	9b 83       	std	Y+3, r25	; 0x03
     a48:	80 91 3e 03 	lds	r24, 0x033E
    word position = 0;        
    short speed = 0;
	if (isConfigured(MODE_USE_ENCODER))  {
     a4c:	80 ff       	sbrs	r24, 0
     a4e:	65 c0       	rjmp	.+202    	; 0xb1a <_Z25can_prep_motor_values_rawP4sCAN+0xfe>
		position = EncoderCount;
     a50:	20 91 63 02 	lds	r18, 0x0263
     a54:	30 91 64 02 	lds	r19, 0x0264
		speed    = EncoderSpeed;
     a58:	80 91 65 02 	lds	r24, 0x0265
     a5c:	90 91 66 02 	lds	r25, 0x0266
		position = PotSample[1];
		speed    = PotSpeed[1];
	}

	// POSITION
	mMsg->data[0] = hi( position );
     a60:	3d 83       	std	Y+5, r19	; 0x05
	mMsg->data[1] = lo( position );
     a62:	2e 83       	std	Y+6, r18	; 0x06

	// SPEED
	mMsg->data[2] = hi(speed);
     a64:	9f 83       	std	Y+7, r25	; 0x07
	mMsg->data[3] = lo(speed);
     a66:	88 87       	std	Y+8, r24	; 0x08

	// MOTOR CURRENT:
	//  (Larger of left/right) (in Amps*10):
	word CurrentAvg = max(LeftCurrentSampleAvg*10, 
     a68:	60 91 70 02 	lds	r22, 0x0270
     a6c:	70 91 71 02 	lds	r23, 0x0271
     a70:	80 91 72 02 	lds	r24, 0x0272
     a74:	90 91 73 02 	lds	r25, 0x0273
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e2       	ldi	r20, 0x20	; 32
     a7e:	51 e4       	ldi	r21, 0x41	; 65
     a80:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
     a84:	d6 2e       	mov	r13, r22
     a86:	c7 2e       	mov	r12, r23
     a88:	b8 2e       	mov	r11, r24
     a8a:	a9 2e       	mov	r10, r25
     a8c:	60 91 74 02 	lds	r22, 0x0274
     a90:	70 91 75 02 	lds	r23, 0x0275
     a94:	80 91 76 02 	lds	r24, 0x0276
     a98:	90 91 77 02 	lds	r25, 0x0277
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e2       	ldi	r20, 0x20	; 32
     aa2:	51 e4       	ldi	r21, 0x41	; 65
     aa4:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
     aa8:	16 2f       	mov	r17, r22
     aaa:	07 2f       	mov	r16, r23
     aac:	f8 2e       	mov	r15, r24
     aae:	e9 2e       	mov	r14, r25
     ab0:	a6 01       	movw	r20, r12
     ab2:	95 01       	movw	r18, r10
     ab4:	65 2f       	mov	r22, r21
     ab6:	74 2f       	mov	r23, r20
     ab8:	83 2f       	mov	r24, r19
     aba:	92 2f       	mov	r25, r18
     abc:	d8 01       	movw	r26, r16
     abe:	f7 01       	movw	r30, r14
     ac0:	2b 2f       	mov	r18, r27
     ac2:	3a 2f       	mov	r19, r26
     ac4:	4f 2f       	mov	r20, r31
     ac6:	5e 2f       	mov	r21, r30
     ac8:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
     acc:	18 16       	cp	r1, r24
     ace:	74 f1       	brlt	.+92     	; 0xb2c <_Z25can_prep_motor_values_rawP4sCAN+0x110>
     ad0:	a8 01       	movw	r20, r16
     ad2:	97 01       	movw	r18, r14
     ad4:	65 2f       	mov	r22, r21
     ad6:	74 2f       	mov	r23, r20
     ad8:	83 2f       	mov	r24, r19
     ada:	92 2f       	mov	r25, r18
     adc:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
						  RightCurrentSampleAvg*10 );
	mMsg->data[4] = hi(CurrentAvg);
     ae0:	79 87       	std	Y+9, r23	; 0x09
	mMsg->data[5] = lo(CurrentAvg);
     ae2:	6a 87       	std	Y+10, r22	; 0x0a

	// for DEBUG ONLY
	short RCurrentAvg = round(RightCurrentSampleAvg*10.); 
     ae4:	a8 01       	movw	r20, r16
     ae6:	97 01       	movw	r18, r14
     ae8:	65 2f       	mov	r22, r21
     aea:	70 2f       	mov	r23, r16
     aec:	83 2f       	mov	r24, r19
     aee:	9e 2d       	mov	r25, r14
     af0:	0e 94 9c 24 	call	0x4938	; 0x4938 <round>
     af4:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__fixsfsi>
	mMsg->data[6] = hi(RCurrentAvg);
     af8:	7b 87       	std	Y+11, r23	; 0x0b
	mMsg->data[7] = lo(RCurrentAvg);
     afa:	6c 87       	std	Y+12, r22	; 0x0c
	
    mMsg->header.DLC = 8;
     afc:	8c 81       	ldd	r24, Y+4	; 0x04
     afe:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     b00:	80 61       	ori	r24, 0x10	; 16
     b02:	8c 83       	std	Y+4, r24	; 0x04
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	08 95       	ret
    short speed = 0;
	if (isConfigured(MODE_USE_ENCODER))  {
		position = EncoderCount;
		speed    = EncoderSpeed;
	} else {
		position = PotSample[1];
     b1a:	20 91 7e 02 	lds	r18, 0x027E
     b1e:	30 91 7f 02 	lds	r19, 0x027F
		speed    = PotSpeed[1];
     b22:	80 91 3a 02 	lds	r24, 0x023A
     b26:	90 91 3b 02 	lds	r25, 0x023B
     b2a:	9a cf       	rjmp	.-204    	; 0xa60 <_Z25can_prep_motor_values_rawP4sCAN+0x44>
	mMsg->data[2] = hi(speed);
	mMsg->data[3] = lo(speed);

	// MOTOR CURRENT:
	//  (Larger of left/right) (in Amps*10):
	word CurrentAvg = max(LeftCurrentSampleAvg*10, 
     b2c:	a6 01       	movw	r20, r12
     b2e:	95 01       	movw	r18, r10
     b30:	d1 cf       	rjmp	.-94     	; 0xad4 <_Z25can_prep_motor_values_rawP4sCAN+0xb8>

00000b32 <_Z20can_prep_motor_speedP4sCAN11float_array>:
    mMsg->header.DLC = 8;
    mMsg->header.rtr = 0;
}

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
{
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <_Z20can_prep_motor_speedP4sCAN11float_array+0xa>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <_Z20can_prep_motor_speedP4sCAN11float_array+0xc>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	8c 01       	movw	r16, r24
     b44:	49 83       	std	Y+1, r20	; 0x01
     b46:	5a 83       	std	Y+2, r21	; 0x02
     b48:	6b 83       	std	Y+3, r22	; 0x03
     b4a:	7c 83       	std	Y+4, r23	; 0x04
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_SPEED, MyInstance );
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	68 e4       	ldi	r22, 0x48	; 72
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	40 91 c1 02 	lds	r20, 0x02C1
     b56:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z14create_CAN_eidhth>
     b5a:	f8 01       	movw	r30, r16
     b5c:	60 83       	st	Z, r22
     b5e:	71 83       	std	Z+1, r23	; 0x01
     b60:	82 83       	std	Z+2, r24	; 0x02
     b62:	93 83       	std	Z+3, r25	; 0x03
	if (config_byte_1 & MODE_USE_ENCODER)  {
     b64:	80 91 3e 03 	lds	r24, 0x033E
     b68:	80 fd       	sbrc	r24, 0
     b6a:	25 c0       	rjmp	.+74     	; 0xbb6 <_Z20can_prep_motor_speedP4sCAN11float_array+0x84>
		mMsg->data[0] = 2;	// 2 byte speed
		mMsg->data[1] = hi(EncoderSpeed);
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
     b6c:	30 91 00 01 	lds	r19, 0x0100
     b70:	f8 01       	movw	r30, r16
     b72:	35 83       	std	Z+5, r19	; 0x05
		for (int i=0; i<size; i++)
     b74:	33 23       	and	r19, r19
     b76:	61 f0       	breq	.+24     	; 0xb90 <_Z20can_prep_motor_speedP4sCAN11float_array+0x5e>
     b78:	fe 01       	movw	r30, r28
     b7a:	31 96       	adiw	r30, 0x01	; 1
	
    mMsg->header.DLC = 8;
    mMsg->header.rtr = 0;
}

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
     b7c:	d8 01       	movw	r26, r16
     b7e:	16 96       	adiw	r26, 0x06	; 6
     b80:	cf 01       	movw	r24, r30
     b82:	83 0f       	add	r24, r19
     b84:	91 1d       	adc	r25, r1
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
		for (int i=0; i<size; i++)
		    mMsg->data[i+1] = mSpeed.array[i];
     b86:	21 91       	ld	r18, Z+
     b88:	2d 93       	st	X+, r18
		mMsg->data[1] = hi(EncoderSpeed);
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
		for (int i=0; i<size; i++)
     b8a:	e8 17       	cp	r30, r24
     b8c:	f9 07       	cpc	r31, r25
     b8e:	d9 f7       	brne	.-10     	; 0xb86 <_Z20can_prep_motor_speedP4sCAN11float_array+0x54>
		    mMsg->data[i+1] = mSpeed.array[i];
	    mMsg->header.DLC = size;
     b90:	3f 70       	andi	r19, 0x0F	; 15
     b92:	33 0f       	add	r19, r19
     b94:	f8 01       	movw	r30, r16
     b96:	84 81       	ldd	r24, Z+4	; 0x04
     b98:	81 7e       	andi	r24, 0xE1	; 225
     b9a:	83 2b       	or	r24, r19
     b9c:	84 83       	std	Z+4, r24	; 0x04
	}
    mMsg->header.rtr = 0;
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	f8 01       	movw	r30, r16
     ba2:	84 83       	std	Z+4, r24	; 0x04
}
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
{
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_SPEED, MyInstance );
	if (config_byte_1 & MODE_USE_ENCODER)  {
		mMsg->data[0] = 2;	// 2 byte speed
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	85 83       	std	Z+5, r24	; 0x05
		mMsg->data[1] = hi(EncoderSpeed);
     bba:	80 91 65 02 	lds	r24, 0x0265
     bbe:	90 91 66 02 	lds	r25, 0x0266
     bc2:	96 83       	std	Z+6, r25	; 0x06
		mMsg->data[2] = lo(EncoderSpeed);
     bc4:	87 83       	std	Z+7, r24	; 0x07
		mMsg->header.DLC = 2;
     bc6:	84 81       	ldd	r24, Z+4	; 0x04
     bc8:	81 7e       	andi	r24, 0xE1	; 225
     bca:	84 60       	ori	r24, 0x04	; 4
     bcc:	84 83       	std	Z+4, r24	; 0x04
     bce:	e7 cf       	rjmp	.-50     	; 0xb9e <_Z20can_prep_motor_speedP4sCAN11float_array+0x6c>

00000bd0 <_Z20can_prep_motor_accelP4sCAN11float_array>:
    mMsg->header.rtr = 0;
}

/* size of a float IEEE single precision is usually 4 bytes */
void can_prep_motor_accel( sCAN* mMsg, float_array mAccel )
{
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_ACCEL, MyInstance );
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	69 e4       	ldi	r22, 0x49	; 73
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	40 91 c1 02 	lds	r20, 0x02C1
     be0:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z14create_CAN_eidhth>
     be4:	68 83       	st	Y, r22
     be6:	79 83       	std	Y+1, r23	; 0x01
     be8:	8a 83       	std	Y+2, r24	; 0x02
     bea:	9b 83       	std	Y+3, r25	; 0x03
	if (config_byte_1 & MODE_USE_ENCODER)  {    
     bec:	80 91 3e 03 	lds	r24, 0x033E
     bf0:	80 fd       	sbrc	r24, 0
     bf2:	11 c0       	rjmp	.+34     	; 0xc16 <_Z20can_prep_motor_accelP4sCAN11float_array+0x46>
		mMsg->data[0] = hi(EncoderAcceleration);
		mMsg->data[1] = lo(EncoderAcceleration);
	} else {
   		mMsg->data[0] = hi(PotAcceleration[1]);
     bf4:	80 91 3e 02 	lds	r24, 0x023E
     bf8:	90 91 3f 02 	lds	r25, 0x023F
     bfc:	9d 83       	std	Y+5, r25	; 0x05
   		mMsg->data[1] = lo(PotAcceleration[1]);
     bfe:	8e 83       	std	Y+6, r24	; 0x06
	}
    mMsg->header.DLC = size;
     c00:	90 91 00 01 	lds	r25, 0x0100
     c04:	9f 70       	andi	r25, 0x0F	; 15
     c06:	99 0f       	add	r25, r25
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     c0c:	89 2b       	or	r24, r25
     c0e:	8c 83       	std	Y+4, r24	; 0x04
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret
/* size of a float IEEE single precision is usually 4 bytes */
void can_prep_motor_accel( sCAN* mMsg, float_array mAccel )
{
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_ACCEL, MyInstance );
	if (config_byte_1 & MODE_USE_ENCODER)  {    
		mMsg->data[0] = hi(EncoderAcceleration);
     c16:	80 91 67 02 	lds	r24, 0x0267
     c1a:	90 91 68 02 	lds	r25, 0x0268
     c1e:	9d 83       	std	Y+5, r25	; 0x05
		mMsg->data[1] = lo(EncoderAcceleration);
     c20:	8e 83       	std	Y+6, r24	; 0x06
     c22:	ee cf       	rjmp	.-36     	; 0xc00 <_Z20can_prep_motor_accelP4sCAN11float_array+0x30>

00000c24 <_Z21can_prep_motor_statusP4sCAN>:
    mMsg->header.DLC = size;
    mMsg->header.rtr = 0;
}

void can_prep_motor_status( sCAN* mMsg )
{
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_STATUS, MyInstance );
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	6a e4       	ldi	r22, 0x4A	; 74
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	40 91 c1 02 	lds	r20, 0x02C1
     c34:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z14create_CAN_eidhth>
     c38:	68 83       	st	Y, r22
     c3a:	79 83       	std	Y+1, r23	; 0x01
     c3c:	8a 83       	std	Y+2, r24	; 0x02
     c3e:	9b 83       	std	Y+3, r25	; 0x03
	/* Send status byte:  0=stopped, 1=forward, 2=backward, 3=in stop 1 region
							4=in stop 2 region, 5=OverTemp, 6=OverVoltage,
							8= Trouble Codes set,					*/
	mMsg->data[0] = MotorState;							
     c40:	80 91 37 02 	lds	r24, 0x0237
     c44:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC = 1;
     c46:	8c 81       	ldd	r24, Y+4	; 0x04
     c48:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	8c 83       	std	Y+4, r24	; 0x04
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
 ***************************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0x08;		// Free Spin.
     c54:	88 e0       	ldi	r24, 0x08	; 8
     c56:	80 93 3e 03 	sts	0x033E, r24
	config_byte_2 = 0;
     c5a:	10 92 3f 03 	sts	0x033F, r1
	compute_default_stops();
     c5e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <_Z21compute_default_stopsv>
	
	// Default Thresholds:
	current_1_threshold = 0x7FF;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	97 e0       	ldi	r25, 0x07	; 7
     c66:	90 93 02 01 	sts	0x0102, r25
     c6a:	80 93 01 01 	sts	0x0101, r24
	current_2_threshold = 0x7FF;
     c6e:	90 93 04 01 	sts	0x0104, r25
     c72:	80 93 03 01 	sts	0x0103, r24
}
     c76:	08 95       	ret

00000c78 <_Z13config_changeh>:

/* Callback for configuration change. */
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <_Z13config_changeh+0x6>
     c7c:	08 95       	ret
     c7e:	80 91 3e 03 	lds	r24, 0x033E
	{
		if (isConfigured(MODE_USE_ENCODER)) { 
     c82:	80 fd       	sbrc	r24, 0
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <_Z13config_changeh+0x18>
			encoder_init();
		} else {
			encoder_disable();
     c86:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_Z15encoder_disablev>
		}

		// Update BaseFrequency (even if not changed)
		SetBaseFrequency();
     c8a:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z16SetBaseFrequencyv>
     c8e:	08 95       	ret
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
	{
		if (isConfigured(MODE_USE_ENCODER)) { 
			encoder_init();
     c90:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_Z12encoder_initv>
     c94:	fa cf       	rjmp	.-12     	; 0xc8a <_Z13config_changeh+0x12>

00000c96 <_Z17save_stops_eepromPh>:
Save both structures EndPoint1 & EndPoint2.
RETURN:		Last address written + 1 (ie. next available
			EEPROM address)
*******************************************************/
byte* save_stops_eeprom(byte* addr)
{
     c96:	9c 01       	movw	r18, r24
	byte size = sizeof(sEndPoint);
	// Save only EndPoint1 & EndPoint2:

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
     c98:	e1 e2       	ldi	r30, 0x21	; 33
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
     c9c:	ac 01       	movw	r20, r24
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );
     c9e:	81 91       	ld	r24, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     ca0:	f9 99       	sbic	0x1f, 1	; 31
     ca2:	fe cf       	rjmp	.-4      	; 0xca0 <_Z17save_stops_eepromPh+0xa>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     ca4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     ca6:	52 bd       	out	0x22, r21	; 34
     ca8:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     caa:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	fa 9a       	sbi	0x1f, 2	; 31
     cb2:	f9 9a       	sbi	0x1f, 1	; 31
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	4f 5f       	subi	r20, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
	byte size = sizeof(sEndPoint);
	// Save only EndPoint1 & EndPoint2:

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	e7 32       	cpi	r30, 0x27	; 39
     cbe:	f8 07       	cpc	r31, r24
     cc0:	71 f7       	brne	.-36     	; 0xc9e <_Z17save_stops_eepromPh+0x8>
     cc2:	2a 5f       	subi	r18, 0xFA	; 250
     cc4:	3f 4f       	sbci	r19, 0xFF	; 255
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
     cca:	a9 01       	movw	r20, r18
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );	
     ccc:	81 91       	ld	r24, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     cce:	f9 99       	sbic	0x1f, 1	; 31
     cd0:	fe cf       	rjmp	.-4      	; 0xcce <_Z17save_stops_eepromPh+0x38>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     cd2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     cd4:	52 bd       	out	0x22, r21	; 34
     cd6:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     cd8:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	fa 9a       	sbi	0x1f, 2	; 31
     ce0:	f9 9a       	sbi	0x1f, 1	; 31
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	4f 5f       	subi	r20, 0xFF	; 255
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	ed 32       	cpi	r30, 0x2D	; 45
     cec:	f8 07       	cpc	r31, r24
     cee:	71 f7       	brne	.-36     	; 0xccc <_Z17save_stops_eepromPh+0x36>
     cf0:	2a 5f       	subi	r18, 0xFA	; 250
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
		eeprom_write_byte( addr++, *(ptr++) );	
	return addr;
}
     cf4:	c9 01       	movw	r24, r18
     cf6:	08 95       	ret

00000cf8 <_Z17read_stops_eepromPh>:

Reads both structures EndPoint1 & EndPoint2 from EEPROM, 
and stores into the RAM.
***********************************************************/
byte* read_stops_eeprom(byte* addr)
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	9c 01       	movw	r18, r24
     cfe:	e1 e2       	ldi	r30, 0x21	; 33
     d00:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d02:	f9 99       	sbic	0x1f, 1	; 31
     d04:	fe cf       	rjmp	.-4      	; 0xd02 <_Z17read_stops_eepromPh+0xa>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d06:	32 bd       	out	0x22, r19	; 34
     d08:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d0a:	f8 9a       	sbi	0x1f, 0	; 31
     d0c:	40 b5       	in	r20, 0x20	; 32
	// Save only EndPoint1 & EndPoint2
	byte size = sizeof(sEndPoint);

	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     d0e:	41 93       	st	Z+, r20
     d10:	2f 5f       	subi	r18, 0xFF	; 255
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
{
	// Save only EndPoint1 & EndPoint2
	byte size = sizeof(sEndPoint);

	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     d14:	42 e0       	ldi	r20, 0x02	; 2
     d16:	e7 32       	cpi	r30, 0x27	; 39
     d18:	f4 07       	cpc	r31, r20
     d1a:	99 f7       	brne	.-26     	; 0xd02 <_Z17read_stops_eepromPh+0xa>
     d1c:	ec 01       	movw	r28, r24
     d1e:	26 96       	adiw	r28, 0x06	; 6
     d20:	ce 01       	movw	r24, r28
     d22:	e7 e2       	ldi	r30, 0x27	; 39
     d24:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d26:	f9 99       	sbic	0x1f, 1	; 31
     d28:	fe cf       	rjmp	.-4      	; 0xd26 <_Z17read_stops_eepromPh+0x2e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d2a:	92 bd       	out	0x22, r25	; 34
     d2c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d2e:	f8 9a       	sbi	0x1f, 0	; 31
     d30:	20 b5       	in	r18, 0x20	; 32
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     d32:	21 93       	st	Z+, r18
     d34:	01 96       	adiw	r24, 0x01	; 1
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     d36:	22 e0       	ldi	r18, 0x02	; 2
     d38:	ed 32       	cpi	r30, 0x2D	; 45
     d3a:	f2 07       	cpc	r31, r18
     d3c:	a1 f7       	brne	.-24     	; 0xd26 <_Z17read_stops_eepromPh+0x2e>
		*(ptr++) = eeprom_read_byte( addr++ );
	
	compute_range();
     d3e:	0e 94 01 0b 	call	0x1602	; 0x1602 <_Z13compute_rangev>
     d42:	26 96       	adiw	r28, 0x06	; 6
	return addr;
}
     d44:	ce 01       	movw	r24, r28
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <_Z29save_currentThresholds_eepromPh>:
****************************************************/
byte* save_currentThresholds_eeprom(byte* addr)
{
	// CURRENT THRESHOLD (for shutoff)
	// SAMPLING IS 10 BITS ONLY.
	eeprom_write_byte( addr++, lo(current_1_threshold>>2) );	
     d4c:	ac 01       	movw	r20, r24
     d4e:	4f 5f       	subi	r20, 0xFF	; 255
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	20 91 01 01 	lds	r18, 0x0101
     d56:	30 91 02 01 	lds	r19, 0x0102
     d5a:	36 95       	lsr	r19
     d5c:	27 95       	ror	r18
     d5e:	36 95       	lsr	r19
     d60:	27 95       	ror	r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     d62:	f9 99       	sbic	0x1f, 1	; 31
     d64:	fe cf       	rjmp	.-4      	; 0xd62 <_Z29save_currentThresholds_eepromPh+0x16>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     d66:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d68:	92 bd       	out	0x22, r25	; 34
     d6a:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     d6c:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	fa 9a       	sbi	0x1f, 2	; 31
     d74:	f9 9a       	sbi	0x1f, 1	; 31
     d76:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, lo(current_2_threshold>>2) );	
     d78:	9a 01       	movw	r18, r20
     d7a:	2f 5f       	subi	r18, 0xFF	; 255
     d7c:	3f 4f       	sbci	r19, 0xFF	; 255
     d7e:	80 91 03 01 	lds	r24, 0x0103
     d82:	90 91 04 01 	lds	r25, 0x0104
     d86:	96 95       	lsr	r25
     d88:	87 95       	ror	r24
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     d8e:	f9 99       	sbic	0x1f, 1	; 31
     d90:	fe cf       	rjmp	.-4      	; 0xd8e <_Z29save_currentThresholds_eepromPh+0x42>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     d92:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d94:	52 bd       	out	0x22, r21	; 34
     d96:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     d98:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	fa 9a       	sbi	0x1f, 2	; 31
     da0:	f9 9a       	sbi	0x1f, 1	; 31
     da2:	0f be       	out	0x3f, r0	; 63
	return addr;
}
     da4:	c9 01       	movw	r24, r18
     da6:	08 95       	ret

00000da8 <_Z29read_currentThresholds_eepromPh>:

Reads from stall currents from EEPROM, and stores into RAM
***********************************************************/
byte* read_currentThresholds_eeprom(byte* addr)
{	// CURRENT THRESHOLD (for shutoff)	
	current_1_threshold = ((eeprom_read_byte( addr++ ))<<2);
     da8:	ac 01       	movw	r20, r24
     daa:	4f 5f       	subi	r20, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     dae:	f9 99       	sbic	0x1f, 1	; 31
     db0:	fe cf       	rjmp	.-4      	; 0xdae <_Z29read_currentThresholds_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     db2:	92 bd       	out	0x22, r25	; 34
     db4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     db6:	f8 9a       	sbi	0x1f, 0	; 31
     db8:	80 b5       	in	r24, 0x20	; 32
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	90 93 02 01 	sts	0x0102, r25
     dc8:	80 93 01 01 	sts	0x0101, r24
	current_2_threshold = ((eeprom_read_byte( addr++ ))<<2);
     dcc:	9a 01       	movw	r18, r20
     dce:	2f 5f       	subi	r18, 0xFF	; 255
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     dd2:	f9 99       	sbic	0x1f, 1	; 31
     dd4:	fe cf       	rjmp	.-4      	; 0xdd2 <_Z29read_currentThresholds_eepromPh+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     dd6:	52 bd       	out	0x22, r21	; 34
     dd8:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     dda:	f8 9a       	sbi	0x1f, 0	; 31
     ddc:	80 b5       	in	r24, 0x20	; 32
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	90 93 04 01 	sts	0x0104, r25
     dec:	80 93 03 01 	sts	0x0103, r24
	return addr;
}
     df0:	c9 01       	movw	r24, r18
     df2:	08 95       	ret

00000df4 <_Z27save_latest_position_eepromPh>:
     df4:	20 91 3e 03 	lds	r18, 0x033E
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* save_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
     df8:	20 fd       	sbrc	r18, 0
     dfa:	22 c0       	rjmp	.+68     	; 0xe40 <_Z27save_latest_position_eepromPh+0x4c>
		eeprom_write_byte( addr++, hi(EncoderCount) );
		eeprom_write_byte( addr++, lo(EncoderCount) );
	}else {
		eeprom_write_byte( addr++, hi(PotSample[1]) );	
     dfc:	ac 01       	movw	r20, r24
     dfe:	4f 5f       	subi	r20, 0xFF	; 255
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	20 91 7f 02 	lds	r18, 0x027F
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     e06:	f9 99       	sbic	0x1f, 1	; 31
     e08:	fe cf       	rjmp	.-4      	; 0xe06 <_Z27save_latest_position_eepromPh+0x12>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     e0a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     e0c:	92 bd       	out	0x22, r25	; 34
     e0e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     e10:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	fa 9a       	sbi	0x1f, 2	; 31
     e18:	f9 9a       	sbi	0x1f, 1	; 31
     e1a:	0f be       	out	0x3f, r0	; 63
		eeprom_write_byte( addr++, lo(PotSample[1]) );
     e1c:	9a 01       	movw	r18, r20
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	80 91 7e 02 	lds	r24, 0x027E
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     e26:	f9 99       	sbic	0x1f, 1	; 31
     e28:	fe cf       	rjmp	.-4      	; 0xe26 <_Z27save_latest_position_eepromPh+0x32>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     e2a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     e2c:	52 bd       	out	0x22, r21	; 34
     e2e:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     e30:	80 bd       	out	0x20, r24	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	fa 9a       	sbi	0x1f, 2	; 31
     e38:	f9 9a       	sbi	0x1f, 1	; 31
     e3a:	0f be       	out	0x3f, r0	; 63
	}
	return addr;
}
     e3c:	c9 01       	movw	r24, r18
     e3e:	08 95       	ret
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* save_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
		eeprom_write_byte( addr++, hi(EncoderCount) );
     e40:	ac 01       	movw	r20, r24
     e42:	4f 5f       	subi	r20, 0xFF	; 255
     e44:	5f 4f       	sbci	r21, 0xFF	; 255
     e46:	20 91 64 02 	lds	r18, 0x0264
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     e4a:	f9 99       	sbic	0x1f, 1	; 31
     e4c:	fe cf       	rjmp	.-4      	; 0xe4a <_Z27save_latest_position_eepromPh+0x56>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     e4e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     e50:	92 bd       	out	0x22, r25	; 34
     e52:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     e54:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	fa 9a       	sbi	0x1f, 2	; 31
     e5c:	f9 9a       	sbi	0x1f, 1	; 31
     e5e:	0f be       	out	0x3f, r0	; 63
		eeprom_write_byte( addr++, lo(EncoderCount) );
     e60:	9a 01       	movw	r18, r20
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	80 91 63 02 	lds	r24, 0x0263
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     e6a:	f9 99       	sbic	0x1f, 1	; 31
     e6c:	fe cf       	rjmp	.-4      	; 0xe6a <_Z27save_latest_position_eepromPh+0x76>
     e6e:	dd cf       	rjmp	.-70     	; 0xe2a <_Z27save_latest_position_eepromPh+0x36>

00000e70 <_Z8save_calv>:
Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr;
	addr = save_configuration			(    );		// MyInstance & Confirmed & config bytes
     e70:	0e 94 25 1c 	call	0x384a	; 0x384a <_Z18save_configurationv>
	addr = save_stops_eeprom			(addr);
     e74:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z17save_stops_eepromPh>
	addr = save_currentThresholds_eeprom(addr);
     e78:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_Z29save_currentThresholds_eepromPh>
	addr = save_latest_position_eeprom  (addr);
     e7c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_Z27save_latest_position_eepromPh>
	return addr;
}
     e80:	08 95       	ret

00000e82 <_Z27read_latest_position_eepromPh>:
     e82:	20 91 3e 03 	lds	r18, 0x033E
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* read_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
     e86:	20 ff       	sbrs	r18, 0
     e88:	1c c0       	rjmp	.+56     	; 0xec2 <_Z27read_latest_position_eepromPh+0x40>
		EncoderCount = (eeprom_read_byte( addr++ )<<8);
     e8a:	ac 01       	movw	r20, r24
     e8c:	4f 5f       	subi	r20, 0xFF	; 255
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e90:	f9 99       	sbic	0x1f, 1	; 31
     e92:	fe cf       	rjmp	.-4      	; 0xe90 <_Z27read_latest_position_eepromPh+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e94:	92 bd       	out	0x22, r25	; 34
     e96:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e98:	f8 9a       	sbi	0x1f, 0	; 31
     e9a:	80 b5       	in	r24, 0x20	; 32
     e9c:	10 92 63 02 	sts	0x0263, r1
     ea0:	80 93 64 02 	sts	0x0264, r24
		EncoderCount = (eeprom_read_byte( addr++ ));
     ea4:	9a 01       	movw	r18, r20
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     eaa:	f9 99       	sbic	0x1f, 1	; 31
     eac:	fe cf       	rjmp	.-4      	; 0xeaa <_Z27read_latest_position_eepromPh+0x28>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     eae:	52 bd       	out	0x22, r21	; 34
     eb0:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     eb2:	f8 9a       	sbi	0x1f, 0	; 31
     eb4:	80 b5       	in	r24, 0x20	; 32
     eb6:	80 93 63 02 	sts	0x0263, r24
     eba:	10 92 64 02 	sts	0x0264, r1
	}else {
		PotSample[1] = (eeprom_read_byte( addr++ )<<8);
		PotSample[1] = (eeprom_read_byte( addr++ ));
	}
	return addr;
}
     ebe:	c9 01       	movw	r24, r18
     ec0:	08 95       	ret
{
	if (isConfigured(MODE_USE_ENCODER)) {
		EncoderCount = (eeprom_read_byte( addr++ )<<8);
		EncoderCount = (eeprom_read_byte( addr++ ));
	}else {
		PotSample[1] = (eeprom_read_byte( addr++ )<<8);
     ec2:	ac 01       	movw	r20, r24
     ec4:	4f 5f       	subi	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ec8:	f9 99       	sbic	0x1f, 1	; 31
     eca:	fe cf       	rjmp	.-4      	; 0xec8 <_Z27read_latest_position_eepromPh+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ecc:	92 bd       	out	0x22, r25	; 34
     ece:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ed0:	f8 9a       	sbi	0x1f, 0	; 31
     ed2:	80 b5       	in	r24, 0x20	; 32
     ed4:	10 92 7e 02 	sts	0x027E, r1
     ed8:	80 93 7f 02 	sts	0x027F, r24
		PotSample[1] = (eeprom_read_byte( addr++ ));
     edc:	9a 01       	movw	r18, r20
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ee2:	f9 99       	sbic	0x1f, 1	; 31
     ee4:	fe cf       	rjmp	.-4      	; 0xee2 <_Z27read_latest_position_eepromPh+0x60>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ee6:	52 bd       	out	0x22, r21	; 34
     ee8:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     eea:	f8 9a       	sbi	0x1f, 0	; 31
     eec:	80 b5       	in	r24, 0x20	; 32
     eee:	80 93 7e 02 	sts	0x027E, r24
     ef2:	10 92 7f 02 	sts	0x027F, r1
	}
	return addr;
}
     ef6:	c9 01       	movw	r24, r18
     ef8:	08 95       	ret

00000efa <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr;
	addr = read_configuration();		// myinstance, confirmed status, config bytes
     efa:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <_Z18read_configurationv>
	addr = read_stops_eeprom			(addr);
     efe:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_Z17read_stops_eepromPh>
	addr = read_currentThresholds_eeprom(addr);
     f02:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z29read_currentThresholds_eepromPh>
	addr = read_latest_position_eeprom	(addr);
     f06:	0e 94 41 07 	call	0xe82	; 0xe82 <_Z27read_latest_position_eepromPh>
	return addr;
}
     f0a:	08 95       	ret

00000f0c <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate() 		
{
	switch ( (config_byte_2 & 0xF0) )
     f0c:	80 91 3f 03 	lds	r24, 0x033F
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	80 7f       	andi	r24, 0xF0	; 240
     f14:	90 70       	andi	r25, 0x00	; 0
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	91 05       	cpc	r25, r1
     f1a:	b1 f0       	breq	.+44     	; 0xf48 <_Z13getReportRatev+0x3c>
     f1c:	81 32       	cpi	r24, 0x21	; 33
     f1e:	91 05       	cpc	r25, r1
     f20:	44 f0       	brlt	.+16     	; 0xf32 <_Z13getReportRatev+0x26>
     f22:	80 34       	cpi	r24, 0x40	; 64
     f24:	91 05       	cpc	r25, r1
     f26:	91 f0       	breq	.+36     	; 0xf4c <_Z13getReportRatev+0x40>
     f28:	80 38       	cpi	r24, 0x80	; 128
     f2a:	91 05       	cpc	r25, r1
     f2c:	59 f0       	breq	.+22     	; 0xf44 <_Z13getReportRatev+0x38>
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
	default: return -1;  break;
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate() 		
{
	switch ( (config_byte_2 & 0xF0) )
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	29 f0       	breq	.+10     	; 0xf40 <_Z13getReportRatev+0x34>
     f36:	80 31       	cpi	r24, 0x10	; 16
     f38:	91 05       	cpc	r25, r1
     f3a:	c9 f7       	brne	.-14     	; 0xf2e <_Z13getReportRatev+0x22>
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
	default: return -1;  break;
	}
}	
     f3e:	08 95       	ret
*************************************************************/
byte getReportRate() 		
{
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
     f44:	8a e0       	ldi	r24, 0x0A	; 10
     f46:	08 95       	ret
{
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	08 95       	ret
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	08 95       	ret

00000f50 <_Z18isReportingEnabledv>:
	}
}	

BOOL isReportingEnabled()
{
	if (getReportRate() != MODE_SEND_UPDATES_NONE)
     f50:	0e 94 86 07 	call	0xf0c	; 0xf0c <_Z13getReportRatev>
		return TRUE;
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	88 23       	and	r24, r24
     f58:	09 f4       	brne	.+2      	; 0xf5c <_Z18isReportingEnabledv+0xc>
     f5a:	90 e0       	ldi	r25, 0x00	; 0
	else
		return FALSE;
}
     f5c:	89 2f       	mov	r24, r25
     f5e:	08 95       	ret

00000f60 <_Z16SetBaseFrequencyv>:
#define MODE_FREE_SPIN	 	0x08		// ignore stops.  default (0) is to stop
#define MODE_TILT_RESPONDER 0x10		// 1=> respond to tilt Y axis readings
#define MODE_PID_CONTROL	0x20		// PID or constant speed.
#define MODE_BASE_FREQ_1	0x40		// 00->100Hz;  01--> 300Hz
#define MODE_BASE_FREQ_2	0x80		// 10->1000hz; 11--> 5000Hz
inline byte getBaseFreq() 	{  return ((config_byte_1 & 0xC0)>>6);  }
     f60:	80 91 3e 03 	lds	r24, 0x033E
     f64:	82 95       	swap	r24
     f66:	86 95       	lsr	r24
     f68:	86 95       	lsr	r24
     f6a:	83 70       	andi	r24, 0x03	; 3
/************************************************************
SetBaseFrequency()	based on config_byte_1
*************************************************************/
void SetBaseFrequency( )
{
	switch (getBaseFreq())
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	b1 f0       	breq	.+44     	; 0xf9c <_Z16SetBaseFrequencyv+0x3c>
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	58 f0       	brcs	.+22     	; 0xf8a <_Z16SetBaseFrequencyv+0x2a>
     f74:	82 30       	cpi	r24, 0x02	; 2
     f76:	d9 f0       	breq	.+54     	; 0xfae <_Z16SetBaseFrequencyv+0x4e>
	{
		case 0:	pwm_init( 100., TRUE, TRUE );	break;
		case 1:	pwm_init( 300., TRUE, TRUE );	break;
		case 2:	pwm_init( 1000., TRUE, TRUE );	break;
		case 3:	pwm_init( 5000., TRUE, TRUE );	break;
		default: pwm_init( 5000., TRUE, TRUE ); break;
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e4       	ldi	r23, 0x40	; 64
     f7c:	8c e9       	ldi	r24, 0x9C	; 156
     f7e:	95 e4       	ldi	r25, 0x45	; 69
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	21 e0       	ldi	r18, 0x01	; 1
     f84:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8pwm_initfhh>
     f88:	08 95       	ret
*************************************************************/
void SetBaseFrequency( )
{
	switch (getBaseFreq())
	{
		case 0:	pwm_init( 100., TRUE, TRUE );	break;
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	88 ec       	ldi	r24, 0xC8	; 200
     f90:	92 e4       	ldi	r25, 0x42	; 66
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	21 e0       	ldi	r18, 0x01	; 1
     f96:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8pwm_initfhh>
     f9a:	08 95       	ret
		case 1:	pwm_init( 300., TRUE, TRUE );	break;
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	86 e9       	ldi	r24, 0x96	; 150
     fa2:	93 e4       	ldi	r25, 0x43	; 67
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8pwm_initfhh>
     fac:	08 95       	ret
		case 2:	pwm_init( 1000., TRUE, TRUE );	break;
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	8a e7       	ldi	r24, 0x7A	; 122
     fb4:	94 e4       	ldi	r25, 0x44	; 68
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8pwm_initfhh>
     fbe:	08 95       	ret

00000fc0 <_Z10motor_initv>:
		Both PWMs are HIGH;		(ie Polarities are the same)
		INHibit signal is LOW;
	Base Frequency of the BTS7960 chips can go upto 25khz	*/
void motor_init()
{
	HILOW_DDR  |=  HILOW_DDR_MASK;			// HBridge Enable lines (outputs)
     fc0:	84 b1       	in	r24, 0x04	; 4
     fc2:	80 66       	ori	r24, 0x60	; 96
     fc4:	84 b9       	out	0x04, r24	; 4
	CURRENT_SENSE_DDR &=  ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
     fc6:	87 b1       	in	r24, 0x07	; 7
     fc8:	8f 7c       	andi	r24, 0xCF	; 207
     fca:	87 b9       	out	0x07, r24	; 7

	SetBaseFrequency( );		// config_byte_1
     fcc:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z16SetBaseFrequencyv>
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	80 93 37 02 	sts	0x0237, r24
     fd6:	80 91 3e 03 	lds	r24, 0x033E
	CURRENT_SENSE_DDR &=  ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));

	SetBaseFrequency( );		// config_byte_1
	motor_enable    (TRUE);		// 
	
	if (isConfigured(MODE_USE_ENCODER))
     fda:	80 fd       	sbrc	r24, 0
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <_Z10motor_initv+0x2a>
		encoder_init();

	if (isConfigured(MODE_TILT_RESPONDER))
     fde:	84 ff       	sbrs	r24, 4
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <_Z10motor_initv+0x28>
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
     fe2:	88 e0       	ldi	r24, 0x08	; 8
     fe4:	80 93 37 02 	sts	0x0237, r24
     fe8:	08 95       	ret

	SetBaseFrequency( );		// config_byte_1
	motor_enable    (TRUE);		// 
	
	if (isConfigured(MODE_USE_ENCODER))
		encoder_init();
     fea:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_Z12encoder_initv>
     fee:	80 91 3e 03 	lds	r24, 0x033E
     ff2:	f5 cf       	rjmp	.-22     	; 0xfde <_Z10motor_initv+0x1e>

00000ff4 <_Z21report_timeslice_10msv>:

static short ReportCounter = 1;		// when zero sends update of the motor angle & currents
void report_timeslice_10ms()
{
	// Time To Report:
	if (isReportingEnabled())
     ff4:	0e 94 a8 07 	call	0xf50	; 0xf50 <_Z18isReportingEnabledv>
     ff8:	88 23       	and	r24, r24
     ffa:	61 f0       	breq	.+24     	; 0x1014 <_Z21report_timeslice_10msv+0x20>
	{
		ReportCounter--;
     ffc:	80 91 05 01 	lds	r24, 0x0105
    1000:	90 91 06 01 	lds	r25, 0x0106
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	90 93 06 01 	sts	0x0106, r25
    100a:	80 93 05 01 	sts	0x0105, r24
		if (ReportCounter<=0)
    100e:	18 16       	cp	r1, r24
    1010:	19 06       	cpc	r1, r25
    1012:	0c f4       	brge	.+2      	; 0x1016 <_Z21report_timeslice_10msv+0x22>
    1014:	08 95       	ret
		{
			ReportCounter = getReportRate();		// Refill
    1016:	0e 94 86 07 	call	0xf0c	; 0xf0c <_Z13getReportRatev>
    101a:	80 93 05 01 	sts	0x0105, r24
    101e:	10 92 06 01 	sts	0x0106, r1
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
    1022:	80 91 3f 03 	lds	r24, 0x033F
			if (isConfigured2(MODE_SEND_POSITION_SPEED_CURRENT))
    1026:	80 fd       	sbrc	r24, 0
    1028:	1a c0       	rjmp	.+52     	; 0x105e <_Z21report_timeslice_10msv+0x6a>
			{	
				/* Sends:  Position count, Speed, and Current */
				can_prep_motor_values_raw( &msg1 );
				can_send_msg_no_wait( 0, &msg1 );
			}
			if (isConfigured2(MODE_SEND_ANGLE))
    102a:	81 fd       	sbrc	r24, 1
    102c:	0c c0       	rjmp	.+24     	; 0x1046 <_Z21report_timeslice_10msv+0x52>
			{
				/* Sends: Motor Angle (based on calibrated stops) */
				can_prep_motor_angle(    &msg2 );
				can_send_msg_no_wait( 2, &msg2 );	// MOB2 is also unused
			}
			if (isConfigured2(MODE_SEND_STATUS))
    102e:	82 ff       	sbrs	r24, 2
    1030:	f1 cf       	rjmp	.-30     	; 0x1014 <_Z21report_timeslice_10msv+0x20>
			{
				can_prep_motor_status(    &msg1 );
    1032:	86 e8       	ldi	r24, 0x86	; 134
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	0e 94 12 06 	call	0xc24	; 0xc24 <_Z21can_prep_motor_statusP4sCAN>
				can_send_msg_no_wait ( 4, &msg1 );	// MOB4 is also unused
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	66 e8       	ldi	r22, 0x86	; 134
    103e:	72 e0       	ldi	r23, 0x02	; 2
    1040:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
    1044:	08 95       	ret
				can_send_msg_no_wait( 0, &msg1 );
			}
			if (isConfigured2(MODE_SEND_ANGLE))
			{
				/* Sends: Motor Angle (based on calibrated stops) */
				can_prep_motor_angle(    &msg2 );
    1046:	85 e9       	ldi	r24, 0x95	; 149
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z20can_prep_motor_angleP4sCAN>
				can_send_msg_no_wait( 2, &msg2 );	// MOB2 is also unused
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	65 e9       	ldi	r22, 0x95	; 149
    1052:	72 e0       	ldi	r23, 0x02	; 2
    1054:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
    1058:	80 91 3f 03 	lds	r24, 0x033F
    105c:	e8 cf       	rjmp	.-48     	; 0x102e <_Z21report_timeslice_10msv+0x3a>
		{
			ReportCounter = getReportRate();		// Refill
			if (isConfigured2(MODE_SEND_POSITION_SPEED_CURRENT))
			{	
				/* Sends:  Position count, Speed, and Current */
				can_prep_motor_values_raw( &msg1 );
    105e:	86 e8       	ldi	r24, 0x86	; 134
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z25can_prep_motor_values_rawP4sCAN>
				can_send_msg_no_wait( 0, &msg1 );
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	66 e8       	ldi	r22, 0x86	; 134
    106a:	72 e0       	ldi	r23, 0x02	; 2
    106c:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
    1070:	80 91 3f 03 	lds	r24, 0x033F
    1074:	da cf       	rjmp	.-76     	; 0x102a <_Z21report_timeslice_10msv+0x36>

00001076 <_Z15get_motor_anglev>:
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
    1076:	80 91 3e 03 	lds	r24, 0x033E
}

float get_motor_angle()
{
    float_array Angle;
    if (isConfigured(MODE_USE_ENCODER))
    107a:	80 fd       	sbrc	r24, 0
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <_Z15get_motor_anglev+0x12>
    {
    	Angle.value = get_encoder_angle();
    } else {
    	Angle.value = get_pot_angle();
    107e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_Z13get_pot_anglev>
    1082:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    }
    return Angle.value;
}
    1086:	08 95       	ret
float get_motor_angle()
{
    float_array Angle;
    if (isConfigured(MODE_USE_ENCODER))
    {
    	Angle.value = get_encoder_angle();
    1088:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_Z17get_encoder_anglev>
    108c:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    } else {
    	Angle.value = get_pot_angle();
    }
    return Angle.value;
}
    1090:	08 95       	ret

00001092 <_Z12motor_enableh>:

void motor_enable( BOOL mEnable )
{
	if (mEnable)
    1092:	88 23       	and	r24, r24
    1094:	21 f4       	brne	.+8      	; 0x109e <_Z12motor_enableh+0xc>
		MotorState = MOTOR_ENABLED;
	else 
		MotorState = MOTOR_DISABLED;
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	80 93 37 02 	sts	0x0237, r24
    109c:	08 95       	ret
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
    109e:	88 e0       	ldi	r24, 0x08	; 8
    10a0:	80 93 37 02 	sts	0x0237, r24
    10a4:	08 95       	ret

000010a6 <_Z11motor_brakev>:
}

void motor_brake()
{ 
	// The dutys are INHIBIT's!  So 1.0 means completely inhibit current.
	set_dutyA(1.0);
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	80 e8       	ldi	r24, 0x80	; 128
    10ac:	9f e3       	ldi	r25, 0x3F	; 63
    10ae:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_Z9set_dutyAf>
	set_dutyB(1.0);
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e8       	ldi	r24, 0x80	; 128
    10b8:	9f e3       	ldi	r25, 0x3F	; 63
    10ba:	0e 94 25 1a 	call	0x344a	; 0x344a <_Z9set_dutyBf>

	HILOW_PORT |= (1<<HILOW_LEFT);
    10be:	2d 9a       	sbi	0x05, 5	; 5
	HILOW_PORT |= (1<<HILOW_RIGHT);
    10c0:	2e 9a       	sbi	0x05, 6	; 5

	MotorState = MOTOR_BRAKING;	
    10c2:	89 e0       	ldi	r24, 0x09	; 9
    10c4:	80 93 37 02 	sts	0x0237, r24
}
    10c8:	08 95       	ret

000010ca <_Z10motor_stopv>:
void motor_stop()
{
	motor_brake();
    10ca:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_Z11motor_brakev>
	MotorState = MOTOR_OFF;
    10ce:	10 92 37 02 	sts	0x0237, r1
}
    10d2:	08 95       	ret

000010d4 <_Z11stop_actionh>:
	}
}

void stop_action(byte mStop)
{
	if (mStop)
    10d4:	88 23       	and	r24, r24
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <_Z11stop_actionh+0xc>
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	80 93 37 02 	sts	0x0237, r24
    10de:	08 95       	ret
}

void stop_action(byte mStop)
{
	if (mStop)
		motor_stop();
    10e0:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z10motor_stopv>
    10e4:	08 95       	ret

000010e6 <_Z11motor_coastf>:
Input:	mFraction - specifies amount of braking. 
					 1.0 => most Braking.
					 0.0 => most coasting.
*/
void motor_coast( float mFraction )
{
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	7b 01       	movw	r14, r22
    10f0:	8c 01       	movw	r16, r24
	set_dutyA(mFraction);
    10f2:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_Z9set_dutyAf>
	set_dutyB(mFraction);
    10f6:	c8 01       	movw	r24, r16
    10f8:	b7 01       	movw	r22, r14
    10fa:	0e 94 25 1a 	call	0x344a	; 0x344a <_Z9set_dutyBf>

	HILOW_PORT &= ~(1<<HILOW_LEFT);
    10fe:	2d 98       	cbi	0x05, 5	; 5
	HILOW_PORT &= ~(1<<HILOW_RIGHT);
    1100:	2e 98       	cbi	0x05, 6	; 5
	MotorState = MOTOR_COASTING;	
    1102:	8b e0       	ldi	r24, 0x0B	; 11
    1104:	80 93 37 02 	sts	0x0237, r24
}
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <_Z19set_motor_directionh>:
Rev C (red boards) wiggle the INH line (ENable).  
So these below are the DIRECTION (HI OR LOW SIDE SELECTOR) pins:
*/
void set_motor_direction( BOOL mForward )
{
	if (mForward)
    1112:	88 23       	and	r24, r24
    1114:	19 f4       	brne	.+6      	; 0x111c <_Z19set_motor_directionh+0xa>
	{
		HILOW_PORT |=  (1<<HILOW_RIGHT );		
		HILOW_PORT &= ~(1<<HILOW_LEFT  );
	}
	else {
		HILOW_PORT |=  (1<<HILOW_LEFT );
    1116:	2d 9a       	sbi	0x05, 5	; 5
		HILOW_PORT &= ~(1<<HILOW_RIGHT);
    1118:	2e 98       	cbi	0x05, 6	; 5
    111a:	08 95       	ret
*/
void set_motor_direction( BOOL mForward )
{
	if (mForward)
	{
		HILOW_PORT |=  (1<<HILOW_RIGHT );		
    111c:	2e 9a       	sbi	0x05, 6	; 5
		HILOW_PORT &= ~(1<<HILOW_LEFT  );
    111e:	2d 98       	cbi	0x05, 5	; 5
    1120:	08 95       	ret

00001122 <_Z14motor_set_dutyfh>:
	
NOTE :	Enable lines are changed in call to set_motor_direction() in this function!
INPUT:	mPercent - [-1.00 .. +1.00]
*********************************************/
void motor_set_duty( float mFraction, BOOL mDirection )
{
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	7b 01       	movw	r14, r22
    112c:	8c 01       	movw	r16, r24
	if (mDirection)
    112e:	44 23       	and	r20, r20
    1130:	91 f4       	brne	.+36     	; 0x1156 <_Z14motor_set_dutyfh+0x34>
	}
	else 
	{
		// Right is low; Left is high:
		// DutyB			DutyA
		set_motor_direction( FALSE );
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z19set_motor_directionh>
		set_dutyA( 1.00		 );		// Hold ON!
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e8       	ldi	r24, 0x80	; 128
    113e:	9f e3       	ldi	r25, 0x3F	; 63
    1140:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_Z9set_dutyAf>
		set_dutyB( mFraction );		// wiggle Right side power
    1144:	c8 01       	movw	r24, r16
    1146:	b7 01       	movw	r22, r14
    1148:	0e 94 25 1a 	call	0x344a	; 0x344a <_Z9set_dutyBf>
	}
}
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	08 95       	ret
{
	if (mDirection)
	{
		// Right is high; Left is low:
		// DutyB			DutyA
		set_motor_direction( TRUE );
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z19set_motor_directionh>
		set_dutyA( mFraction );			// wiggle Left side power
    115c:	c8 01       	movw	r24, r16
    115e:	b7 01       	movw	r22, r14
    1160:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_Z9set_dutyAf>
		set_dutyB( 1.000 );				// Hold ON!
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 e8       	ldi	r24, 0x80	; 128
    116a:	9f e3       	ldi	r25, 0x3F	; 63
    116c:	0e 94 25 1a 	call	0x344a	; 0x344a <_Z9set_dutyBf>
		// DutyB			DutyA
		set_motor_direction( FALSE );
		set_dutyA( 1.00		 );		// Hold ON!
		set_dutyB( mFraction );		// wiggle Right side power
	}
}
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	08 95       	ret

0000117a <_Z20motor_timeslice_10msv>:
	word position;

	// Check for STOP conditions:
	// Note if the lights stop working, or this timeslice is not going at all,
	// 	it could be hung up on can_instance.  ie if there are not any other boards in the network.
	if (MotorState == MOTOR_REQUEST_PENDING)
    117a:	80 91 37 02 	lds	r24, 0x0237
    117e:	8a 30       	cpi	r24, 0x0A	; 10
    1180:	b1 f0       	breq	.+44     	; 0x11ae <_Z20motor_timeslice_10msv+0x34>
    1182:	20 91 3e 03 	lds	r18, 0x033E
			set_dutyB( Destination.speed2 );		// left side needs power too.  
		}
	}

	// READ LATEST POSITION:
	if (isConfigured(MODE_USE_ENCODER) ) {		
    1186:	20 ff       	sbrs	r18, 0
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <_Z20motor_timeslice_10msv+0x2a>
		position = EncoderCount; 	
    118a:	80 91 63 02 	lds	r24, 0x0263
    118e:	90 91 64 02 	lds	r25, 0x0264
	} else {
		position = get_pot(); 	
		// update speed & accel in new Pot_timeslice()
	}

	if (isConfigured(MODE_FREE_SPIN)==FALSE)
    1192:	23 fd       	sbrc	r18, 3
    1194:	04 c0       	rjmp	.+8      	; 0x119e <_Z20motor_timeslice_10msv+0x24>
	{
		byte stop = check_stops( position );
    1196:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_Z11check_stopst>
		stop_action( stop );		// check stops and stop motor if necessary	
    119a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z11stop_actionh>
	}
	
	if (destination_reached()) {		// destination works in free spin mode.
    119e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_Z19destination_reachedv>
		//	save_cal();
		//motor_enable(FALSE); 
		//cli();
		// micro to sleep mode:
	}
}
    11a2:	08 95       	ret

	// READ LATEST POSITION:
	if (isConfigured(MODE_USE_ENCODER) ) {		
		position = EncoderCount; 	
	} else {
		position = get_pot(); 	
    11a4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_Z7get_potv>
    11a8:	20 91 3e 03 	lds	r18, 0x033E
    11ac:	f2 cf       	rjmp	.-28     	; 0x1192 <_Z20motor_timeslice_10msv+0x18>
    11ae:	80 91 3e 03 	lds	r24, 0x033E
	// Check for STOP conditions:
	// Note if the lights stop working, or this timeslice is not going at all,
	// 	it could be hung up on can_instance.  ie if there are not any other boards in the network.
	if (MotorState == MOTOR_REQUEST_PENDING)
	{	
		if (isConfigured(MODE_2_MOTORS)==FALSE)
    11b2:	81 fd       	sbrc	r24, 1
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <_Z20motor_timeslice_10msv+0x5e>
		{
			if (Destination.coast == HARD_STOP_MOTOR) {
    11b6:	80 91 5a 02 	lds	r24, 0x025A
    11ba:	83 36       	cpi	r24, 0x63	; 99
    11bc:	a9 f1       	breq	.+106    	; 0x1228 <_Z20motor_timeslice_10msv+0xae>
				motor_stop(); 
			} else if (Destination.coast) {
    11be:	88 23       	and	r24, r24
    11c0:	11 f1       	breq	.+68     	; 0x1206 <_Z20motor_timeslice_10msv+0x8c>
				motor_coast( Destination.speed );
    11c2:	60 91 52 02 	lds	r22, 0x0252
    11c6:	70 91 53 02 	lds	r23, 0x0253
    11ca:	80 91 54 02 	lds	r24, 0x0254
    11ce:	90 91 55 02 	lds	r25, 0x0255
    11d2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_Z11motor_coastf>
    11d6:	d5 cf       	rjmp	.-86     	; 0x1182 <_Z20motor_timeslice_10msv+0x8>
				motor_set_duty( Destination.speed, Destination.direction );
			}
		}
		else 
		{	// 2 unidirectional motors (independant PWM dutys)
			HILOW_PORT &= ~(1<<HILOW_LEFT );		// want both low - pulldowns.
    11d8:	2d 98       	cbi	0x05, 5	; 5
			HILOW_PORT &= ~(1<<HILOW_RIGHT);		// 0=> Low side active
    11da:	2e 98       	cbi	0x05, 6	; 5
			set_dutyA( Destination.speed  );		
    11dc:	60 91 52 02 	lds	r22, 0x0252
    11e0:	70 91 53 02 	lds	r23, 0x0253
    11e4:	80 91 54 02 	lds	r24, 0x0254
    11e8:	90 91 55 02 	lds	r25, 0x0255
    11ec:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_Z9set_dutyAf>
			set_dutyB( Destination.speed2 );		// left side needs power too.  
    11f0:	60 91 56 02 	lds	r22, 0x0256
    11f4:	70 91 57 02 	lds	r23, 0x0257
    11f8:	80 91 58 02 	lds	r24, 0x0258
    11fc:	90 91 59 02 	lds	r25, 0x0259
    1200:	0e 94 25 1a 	call	0x344a	; 0x344a <_Z9set_dutyBf>
    1204:	be cf       	rjmp	.-132    	; 0x1182 <_Z20motor_timeslice_10msv+0x8>
			if (Destination.coast == HARD_STOP_MOTOR) {
				motor_stop(); 
			} else if (Destination.coast) {
				motor_coast( Destination.speed );
			} else {
				set_motor_direction( Destination.direction );
    1206:	80 91 51 02 	lds	r24, 0x0251
    120a:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z19set_motor_directionh>
				motor_set_duty( Destination.speed, Destination.direction );
    120e:	60 91 52 02 	lds	r22, 0x0252
    1212:	70 91 53 02 	lds	r23, 0x0253
    1216:	80 91 54 02 	lds	r24, 0x0254
    121a:	90 91 55 02 	lds	r25, 0x0255
    121e:	40 91 51 02 	lds	r20, 0x0251
    1222:	0e 94 91 08 	call	0x1122	; 0x1122 <_Z14motor_set_dutyfh>
    1226:	ad cf       	rjmp	.-166    	; 0x1182 <_Z20motor_timeslice_10msv+0x8>
	if (MotorState == MOTOR_REQUEST_PENDING)
	{	
		if (isConfigured(MODE_2_MOTORS)==FALSE)
		{
			if (Destination.coast == HARD_STOP_MOTOR) {
				motor_stop(); 
    1228:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z10motor_stopv>
    122c:	aa cf       	rjmp	.-172    	; 0x1182 <_Z20motor_timeslice_10msv+0x8>

0000122e <_Z8pot_initv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void pot_init()
{
	Destination.continuous = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 93 4c 02 	sts	0x024C, r24

	// SET AS INPUT:	
	CURRENT_SENSE_DDR  &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
    1234:	87 b1       	in	r24, 0x07	; 7
    1236:	8f 7c       	andi	r24, 0xCF	; 207
    1238:	87 b9       	out	0x07, r24	; 7
	CURRENT_SENSE_PORT &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
    123a:	88 b1       	in	r24, 0x08	; 8
    123c:	8f 7c       	andi	r24, 0xCF	; 207
    123e:	88 b9       	out	0x08, r24	; 8

	// SET AS INPUT:
	POT_DDR  &= ~(1<<POT);
    1240:	55 98       	cbi	0x0a, 5	; 10
	POT_PORT &= ~(1<<POT);
    1242:	5d 98       	cbi	0x0b, 5	; 11

	adc_init();	
    1244:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_Z8adc_initv>
	start_sampling();		// Need to call 1 Time to get it started (ISR will keep going)
    1248:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_Z14start_samplingv>
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
    124c:	80 91 27 02 	lds	r24, 0x0227
    1250:	90 91 28 02 	lds	r25, 0x0228
    1254:	a0 91 29 02 	lds	r26, 0x0229
    1258:	b0 91 2a 02 	lds	r27, 0x022A
    125c:	20 91 21 02 	lds	r18, 0x0221
    1260:	30 91 22 02 	lds	r19, 0x0222
    1264:	40 91 23 02 	lds	r20, 0x0223
    1268:	50 91 24 02 	lds	r21, 0x0224
    126c:	82 1b       	sub	r24, r18
    126e:	93 0b       	sbc	r25, r19
    1270:	a4 0b       	sbc	r26, r20
    1272:	b5 0b       	sbc	r27, r21
    1274:	80 93 2d 02 	sts	0x022D, r24
    1278:	90 93 2e 02 	sts	0x022E, r25
    127c:	a0 93 2f 02 	sts	0x022F, r26
    1280:	b0 93 30 02 	sts	0x0230, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
    1284:	80 91 2b 02 	lds	r24, 0x022B
    1288:	90 91 2c 02 	lds	r25, 0x022C
    128c:	20 91 25 02 	lds	r18, 0x0225
    1290:	30 91 26 02 	lds	r19, 0x0226
    1294:	82 1b       	sub	r24, r18
    1296:	93 0b       	sbc	r25, r19
    1298:	90 93 32 02 	sts	0x0232, r25
    129c:	80 93 31 02 	sts	0x0231, r24
	POT_PORT &= ~(1<<POT);

	adc_init();	
	start_sampling();		// Need to call 1 Time to get it started (ISR will keep going)
	compute_range();
}
    12a0:	08 95       	ret

000012a2 <_Z13pot_timeslicev>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
    12a2:	20 91 3a 02 	lds	r18, 0x023A
    12a6:	30 91 3b 02 	lds	r19, 0x023B
    12aa:	30 93 39 02 	sts	0x0239, r19
    12ae:	20 93 38 02 	sts	0x0238, r18
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
    12b2:	80 91 7e 02 	lds	r24, 0x027E
    12b6:	90 91 7f 02 	lds	r25, 0x027F
    12ba:	ee e7       	ldi	r30, 0x7E	; 126
    12bc:	f2 e0       	ldi	r31, 0x02	; 2
    12be:	52 91       	ld	r21, -Z
    12c0:	42 91       	ld	r20, -Z
    12c2:	bc 01       	movw	r22, r24
    12c4:	64 1b       	sub	r22, r20
    12c6:	75 0b       	sbc	r23, r21
    12c8:	ab 01       	movw	r20, r22
    12ca:	70 93 3b 02 	sts	0x023B, r23
    12ce:	60 93 3a 02 	sts	0x023A, r22
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
    12d2:	60 91 3e 02 	lds	r22, 0x023E
    12d6:	70 91 3f 02 	lds	r23, 0x023F
    12da:	70 93 3d 02 	sts	0x023D, r23
    12de:	60 93 3c 02 	sts	0x023C, r22
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
    12e2:	42 1b       	sub	r20, r18
    12e4:	53 0b       	sbc	r21, r19
    12e6:	50 93 3f 02 	sts	0x023F, r21
    12ea:	40 93 3e 02 	sts	0x023E, r20
***********************************************/
void pot_timeslice()
{
	compute_pot_speed();
	compute_pot_acceleration();
	PotSample[0] = PotSample[1];
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
}
    12f2:	08 95       	ret

000012f4 <_Z7get_potv>:
Return	:	The motor position in degrees * 10
***********************************************/
word get_pot()
{
	return PotSample[1];
}
    12f4:	80 91 7e 02 	lds	r24, 0x027E
    12f8:	90 91 7f 02 	lds	r25, 0x027F
    12fc:	08 95       	ret

000012fe <_Z27get_distance_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
word get_distance_to_destination()
{
	return (Destination.position - PotSample[1]);
    12fe:	20 91 4f 02 	lds	r18, 0x024F
    1302:	30 91 50 02 	lds	r19, 0x0250
    1306:	80 91 7e 02 	lds	r24, 0x027E
    130a:	90 91 7f 02 	lds	r25, 0x027F
    130e:	28 1b       	sub	r18, r24
    1310:	39 0b       	sbc	r19, r25
}
    1312:	c9 01       	movw	r24, r18
    1314:	08 95       	ret

00001316 <_Z28get_direction_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
    1316:	20 91 4f 02 	lds	r18, 0x024F
    131a:	30 91 50 02 	lds	r19, 0x0250
    131e:	80 91 7e 02 	lds	r24, 0x027E
    1322:	90 91 7f 02 	lds	r25, 0x027F
    1326:	82 17       	cp	r24, r18
    1328:	93 07       	cpc	r25, r19
    132a:	58 f0       	brcs	.+22     	; 0x1342 <_Z28get_direction_to_destinationv+0x2c>
		Destination.direction = 1;
		return 1;
	}
	else if (Destination.position < PotSample[1]) {
    132c:	28 17       	cp	r18, r24
    132e:	39 07       	cpc	r19, r25
    1330:	20 f4       	brcc	.+8      	; 0x133a <_Z28get_direction_to_destinationv+0x24>
		Destination.direction = -1;	
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	80 93 51 02 	sts	0x0251, r24
		return -1;
    1338:	08 95       	ret
	}
	else {
		Destination.direction = 0;
    133a:	10 92 51 02 	sts	0x0251, r1
		return 0;	// exactly at destination
    133e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1340:	08 95       	ret
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
		Destination.direction = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 51 02 	sts	0x0251, r24
		return 1;
    1348:	08 95       	ret

0000134a <_Z17compute_pot_speedv>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
    134a:	80 91 3a 02 	lds	r24, 0x023A
    134e:	90 91 3b 02 	lds	r25, 0x023B
    1352:	90 93 39 02 	sts	0x0239, r25
    1356:	80 93 38 02 	sts	0x0238, r24
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
    135a:	80 91 7e 02 	lds	r24, 0x027E
    135e:	90 91 7f 02 	lds	r25, 0x027F
    1362:	20 91 7c 02 	lds	r18, 0x027C
    1366:	30 91 7d 02 	lds	r19, 0x027D
    136a:	82 1b       	sub	r24, r18
    136c:	93 0b       	sbc	r25, r19
    136e:	90 93 3b 02 	sts	0x023B, r25
    1372:	80 93 3a 02 	sts	0x023A, r24
}
    1376:	08 95       	ret

00001378 <_Z24compute_pot_accelerationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
    1378:	80 91 3e 02 	lds	r24, 0x023E
    137c:	90 91 3f 02 	lds	r25, 0x023F
    1380:	90 93 3d 02 	sts	0x023D, r25
    1384:	80 93 3c 02 	sts	0x023C, r24
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
    1388:	80 91 3a 02 	lds	r24, 0x023A
    138c:	90 91 3b 02 	lds	r25, 0x023B
    1390:	20 91 38 02 	lds	r18, 0x0238
    1394:	30 91 39 02 	lds	r19, 0x0239
    1398:	82 1b       	sub	r24, r18
    139a:	93 0b       	sbc	r25, r19
    139c:	90 93 3f 02 	sts	0x023F, r25
    13a0:	80 93 3e 02 	sts	0x023E, r24
}
    13a4:	08 95       	ret

000013a6 <_Z11pot_percentv>:
Forward is duty > 0.50
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
	float position = PotSample[1];
	word half = (Range.value>>2) + EndPoint1.value;
    13ae:	60 91 31 02 	lds	r22, 0x0231
    13b2:	70 91 32 02 	lds	r23, 0x0232
    13b6:	76 95       	lsr	r23
    13b8:	67 95       	ror	r22
    13ba:	76 95       	lsr	r23
    13bc:	67 95       	ror	r22
    13be:	80 91 25 02 	lds	r24, 0x0225
    13c2:	90 91 26 02 	lds	r25, 0x0226
    13c6:	68 0f       	add	r22, r24
    13c8:	79 1f       	adc	r23, r25
	
	float delta    = (position - half);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    13d2:	7b 01       	movw	r14, r22
    13d4:	8c 01       	movw	r16, r24
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
	float position = PotSample[1];
    13d6:	60 91 7e 02 	lds	r22, 0x027E
    13da:	70 91 7f 02 	lds	r23, 0x027F
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
	word half = (Range.value>>2) + EndPoint1.value;
	
	float delta    = (position - half);
    13e6:	a8 01       	movw	r20, r16
    13e8:	97 01       	movw	r18, r14
    13ea:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__subsf3>
	float percent  = (delta / (float)half);
    13ee:	a8 01       	movw	r20, r16
    13f0:	97 01       	movw	r18, r14
    13f2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
	return percent;
}
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	08 95       	ret

00001400 <_Z16convert_to_anglet>:
convert_to_angle( word  mPotValue )
RETURN	:	Takes a Pot reading and converts to an angle
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( word  mPotValue )
{
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	ec 01       	movw	r28, r24
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
    1416:	20 91 27 02 	lds	r18, 0x0227
    141a:	30 91 28 02 	lds	r19, 0x0228
    141e:	40 91 29 02 	lds	r20, 0x0229
    1422:	50 91 2a 02 	lds	r21, 0x022A
    1426:	60 91 21 02 	lds	r22, 0x0221
    142a:	70 91 22 02 	lds	r23, 0x0222
    142e:	80 91 23 02 	lds	r24, 0x0223
    1432:	90 91 24 02 	lds	r25, 0x0224
    1436:	26 17       	cp	r18, r22
    1438:	37 07       	cpc	r19, r23
    143a:	48 07       	cpc	r20, r24
    143c:	59 07       	cpc	r21, r25
    143e:	14 f4       	brge	.+4      	; 0x1444 <_Z16convert_to_anglet+0x44>
    1440:	ca 01       	movw	r24, r20
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    1448:	5b 01       	movw	r10, r22
    144a:	6c 01       	movw	r12, r24
******************************************************/
float convert_to_angle( word  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
    144c:	60 91 2d 02 	lds	r22, 0x022D
    1450:	70 91 2e 02 	lds	r23, 0x022E
    1454:	80 91 2f 02 	lds	r24, 0x022F
    1458:	90 91 30 02 	lds	r25, 0x0230
    145c:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    1460:	7b 01       	movw	r14, r22
    1462:	8c 01       	movw	r16, r24
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( word  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
    1464:	20 91 2b 02 	lds	r18, 0x022B
    1468:	30 91 2c 02 	lds	r19, 0x022C
    146c:	80 91 25 02 	lds	r24, 0x0225
    1470:	90 91 26 02 	lds	r25, 0x0226
    1474:	28 17       	cp	r18, r24
    1476:	39 07       	cpc	r19, r25
    1478:	08 f4       	brcc	.+2      	; 0x147c <_Z16convert_to_anglet+0x7c>
    147a:	c9 01       	movw	r24, r18
    147c:	9e 01       	movw	r18, r28
    147e:	28 1b       	sub	r18, r24
    1480:	39 0b       	sbc	r19, r25
    1482:	c9 01       	movw	r24, r18
    1484:	60 91 31 02 	lds	r22, 0x0231
    1488:	70 91 32 02 	lds	r23, 0x0232
    148c:	0e 94 a7 23 	call	0x474e	; 0x474e <__udivmodhi4>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    1498:	9b 01       	movw	r18, r22
    149a:	ac 01       	movw	r20, r24
	float angle = ( ratio * Range.angle );			// range has the *100 in it
    149c:	c8 01       	movw	r24, r16
    149e:	b7 01       	movw	r22, r14
    14a0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    14a4:	9b 01       	movw	r18, r22
    14a6:	ac 01       	movw	r20, r24
	return angle + get_min_stop_angle();
    14a8:	c6 01       	movw	r24, r12
    14aa:	b5 01       	movw	r22, r10
    14ac:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__addsf3>
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	cf 90       	pop	r12
    14c0:	bf 90       	pop	r11
    14c2:	af 90       	pop	r10
    14c4:	08 95       	ret

000014c6 <_Z13get_pot_anglev>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
long int  get_pot_angle()
{
	return convert_to_angle(PotSample[1]);
    14c6:	80 91 7e 02 	lds	r24, 0x027E
    14ca:	90 91 7f 02 	lds	r25, 0x027F
    14ce:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z16convert_to_anglet>
    14d2:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__fixsfsi>
}
    14d6:	08 95       	ret

000014d8 <_Z21convert_to_fixedpointf>:
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
}
long int convert_to_fixedpoint( float  mRealNumber )
{
	long int fp = (mRealNumber * 100);
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	48 ec       	ldi	r20, 0xC8	; 200
    14de:	52 e4       	ldi	r21, 0x42	; 66
    14e0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    14e4:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__fixsfsi>
	return fp;
}
    14e8:	08 95       	ret

000014ea <_Z16convert_to_valuel>:
convert_to_value( float mAngle )
RETURN	:	Takes an Angle and converts to an expected
	POT reading.
******************************************************/
word  convert_to_value( long mAngleHundredthDeg )
{
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	7b 01       	movw	r14, r22
    14fc:	8c 01       	movw	r16, r24
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
	float pot_value = (ratio * Range.value) + get_min_stop_value();
    14fe:	60 91 31 02 	lds	r22, 0x0231
    1502:	70 91 32 02 	lds	r23, 0x0232
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    150e:	5b 01       	movw	r10, r22
    1510:	6c 01       	movw	r12, r24
	POT reading.
******************************************************/
word  convert_to_value( long mAngleHundredthDeg )
{
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
    1512:	20 91 27 02 	lds	r18, 0x0227
    1516:	30 91 28 02 	lds	r19, 0x0228
    151a:	40 91 29 02 	lds	r20, 0x0229
    151e:	50 91 2a 02 	lds	r21, 0x022A
    1522:	80 91 21 02 	lds	r24, 0x0221
    1526:	90 91 22 02 	lds	r25, 0x0222
    152a:	a0 91 23 02 	lds	r26, 0x0223
    152e:	b0 91 24 02 	lds	r27, 0x0224
    1532:	28 17       	cp	r18, r24
    1534:	39 07       	cpc	r19, r25
    1536:	4a 07       	cpc	r20, r26
    1538:	5b 07       	cpc	r21, r27
    153a:	14 f4       	brge	.+4      	; 0x1540 <_Z16convert_to_valuel+0x56>
    153c:	da 01       	movw	r26, r20
    153e:	c9 01       	movw	r24, r18
    1540:	a8 01       	movw	r20, r16
    1542:	97 01       	movw	r18, r14
    1544:	28 1b       	sub	r18, r24
    1546:	39 0b       	sbc	r19, r25
    1548:	4a 0b       	sbc	r20, r26
    154a:	5b 0b       	sbc	r21, r27
    154c:	ca 01       	movw	r24, r20
    154e:	b9 01       	movw	r22, r18
    1550:	20 91 2d 02 	lds	r18, 0x022D
    1554:	30 91 2e 02 	lds	r19, 0x022E
    1558:	40 91 2f 02 	lds	r20, 0x022F
    155c:	50 91 30 02 	lds	r21, 0x0230
    1560:	0e 94 ce 23 	call	0x479c	; 0x479c <__divmodsi4>
    1564:	ca 01       	movw	r24, r20
    1566:	b9 01       	movw	r22, r18
    1568:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
	float pot_value = (ratio * Range.value) + get_min_stop_value();
    1570:	c6 01       	movw	r24, r12
    1572:	b5 01       	movw	r22, r10
    1574:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1578:	7b 01       	movw	r14, r22
    157a:	8c 01       	movw	r16, r24
    157c:	80 91 2b 02 	lds	r24, 0x022B
    1580:	90 91 2c 02 	lds	r25, 0x022C
    1584:	60 91 25 02 	lds	r22, 0x0225
    1588:	70 91 26 02 	lds	r23, 0x0226
    158c:	86 17       	cp	r24, r22
    158e:	97 07       	cpc	r25, r23
    1590:	08 f4       	brcc	.+2      	; 0x1594 <_Z16convert_to_valuel+0xaa>
    1592:	bc 01       	movw	r22, r24
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    159c:	9b 01       	movw	r18, r22
    159e:	ac 01       	movw	r20, r24
    15a0:	c8 01       	movw	r24, r16
    15a2:	b7 01       	movw	r22, r14
    15a4:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__addsf3>
	return (word)pot_value;
    15a8:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
}
    15ac:	cb 01       	movw	r24, r22
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	af 90       	pop	r10
    15be:	08 95       	ret

000015c0 <_Z21compute_default_stopsv>:
RETURN	:	float => Percentage between [0.0 .. 1.0]

******************************************************/
void  compute_default_stops()
{
	EndPoint1.value = 25; 			//(0.1 * MIN_POT_VALUE);		// 10 % limits
    15c0:	89 e1       	ldi	r24, 0x19	; 25
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	90 93 26 02 	sts	0x0226, r25
    15c8:	80 93 25 02 	sts	0x0225, r24
	EndPoint2.value = 0x3ff-25; 	//(0.9 * MAX_POT_VALUE);		// 10 % limits	
    15cc:	86 ee       	ldi	r24, 0xE6	; 230
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	90 93 2c 02 	sts	0x022C, r25
    15d4:	80 93 2b 02 	sts	0x022B, r24
	
	EndPoint1.angle =   0*100;		// 0 degrees
    15d8:	10 92 21 02 	sts	0x0221, r1
    15dc:	10 92 22 02 	sts	0x0222, r1
    15e0:	10 92 23 02 	sts	0x0223, r1
    15e4:	10 92 24 02 	sts	0x0224, r1
	EndPoint2.angle = 300*100;		// Most Pots turn 300 degrees
    15e8:	80 e3       	ldi	r24, 0x30	; 48
    15ea:	95 e7       	ldi	r25, 0x75	; 117
    15ec:	a0 e0       	ldi	r26, 0x00	; 0
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	80 93 27 02 	sts	0x0227, r24
    15f4:	90 93 28 02 	sts	0x0228, r25
    15f8:	a0 93 29 02 	sts	0x0229, r26
    15fc:	b0 93 2a 02 	sts	0x022A, r27
}
    1600:	08 95       	ret

00001602 <_Z13compute_rangev>:
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
    1602:	80 91 27 02 	lds	r24, 0x0227
    1606:	90 91 28 02 	lds	r25, 0x0228
    160a:	a0 91 29 02 	lds	r26, 0x0229
    160e:	b0 91 2a 02 	lds	r27, 0x022A
    1612:	20 91 21 02 	lds	r18, 0x0221
    1616:	30 91 22 02 	lds	r19, 0x0222
    161a:	40 91 23 02 	lds	r20, 0x0223
    161e:	50 91 24 02 	lds	r21, 0x0224
    1622:	82 1b       	sub	r24, r18
    1624:	93 0b       	sbc	r25, r19
    1626:	a4 0b       	sbc	r26, r20
    1628:	b5 0b       	sbc	r27, r21
    162a:	80 93 2d 02 	sts	0x022D, r24
    162e:	90 93 2e 02 	sts	0x022E, r25
    1632:	a0 93 2f 02 	sts	0x022F, r26
    1636:	b0 93 30 02 	sts	0x0230, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
    163a:	80 91 2b 02 	lds	r24, 0x022B
    163e:	90 91 2c 02 	lds	r25, 0x022C
    1642:	20 91 25 02 	lds	r18, 0x0225
    1646:	30 91 26 02 	lds	r19, 0x0226
    164a:	82 1b       	sub	r24, r18
    164c:	93 0b       	sbc	r25, r19
    164e:	90 93 32 02 	sts	0x0232, r25
    1652:	80 93 31 02 	sts	0x0231, r24
}
    1656:	08 95       	ret

00001658 <_Z18get_min_stop_valuev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_min_stop_value()
{
    1658:	80 91 2b 02 	lds	r24, 0x022B
    165c:	90 91 2c 02 	lds	r25, 0x022C
    1660:	20 91 25 02 	lds	r18, 0x0225
    1664:	30 91 26 02 	lds	r19, 0x0226
    1668:	82 17       	cp	r24, r18
    166a:	93 07       	cpc	r25, r19
    166c:	08 f4       	brcc	.+2      	; 0x1670 <_Z18get_min_stop_valuev+0x18>
    166e:	9c 01       	movw	r18, r24
	return min( EndPoint2.value, EndPoint1.value);	
}
    1670:	c9 01       	movw	r24, r18
    1672:	08 95       	ret

00001674 <_Z18get_min_stop_anglev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
    1674:	80 91 27 02 	lds	r24, 0x0227
    1678:	90 91 28 02 	lds	r25, 0x0228
    167c:	a0 91 29 02 	lds	r26, 0x0229
    1680:	b0 91 2a 02 	lds	r27, 0x022A
    1684:	20 91 21 02 	lds	r18, 0x0221
    1688:	30 91 22 02 	lds	r19, 0x0222
    168c:	40 91 23 02 	lds	r20, 0x0223
    1690:	50 91 24 02 	lds	r21, 0x0224
    1694:	82 17       	cp	r24, r18
    1696:	93 07       	cpc	r25, r19
    1698:	a4 07       	cpc	r26, r20
    169a:	b5 07       	cpc	r27, r21
    169c:	14 f4       	brge	.+4      	; 0x16a2 <_Z18get_min_stop_anglev+0x2e>
    169e:	9c 01       	movw	r18, r24
    16a0:	ad 01       	movw	r20, r26
	return min( EndPoint2.angle , EndPoint1.angle);
}
    16a2:	b9 01       	movw	r22, r18
    16a4:	ca 01       	movw	r24, r20
    16a6:	08 95       	ret

000016a8 <_Z18get_max_stop_valuev>:
/*******************************************************
get_max_stop_value()
RETURN	:	Greater of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_max_stop_value()
{
    16a8:	80 91 2b 02 	lds	r24, 0x022B
    16ac:	90 91 2c 02 	lds	r25, 0x022C
    16b0:	20 91 25 02 	lds	r18, 0x0225
    16b4:	30 91 26 02 	lds	r19, 0x0226
    16b8:	28 17       	cp	r18, r24
    16ba:	39 07       	cpc	r19, r25
    16bc:	08 f4       	brcc	.+2      	; 0x16c0 <_Z18get_max_stop_valuev+0x18>
    16be:	9c 01       	movw	r18, r24
	return max( EndPoint2.value, EndPoint1.value );
}
    16c0:	c9 01       	movw	r24, r18
    16c2:	08 95       	ret

000016c4 <_Z18get_max_stop_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
long int  get_max_stop_angle()
{
    16c4:	80 91 27 02 	lds	r24, 0x0227
    16c8:	90 91 28 02 	lds	r25, 0x0228
    16cc:	a0 91 29 02 	lds	r26, 0x0229
    16d0:	b0 91 2a 02 	lds	r27, 0x022A
    16d4:	20 91 21 02 	lds	r18, 0x0221
    16d8:	30 91 22 02 	lds	r19, 0x0222
    16dc:	40 91 23 02 	lds	r20, 0x0223
    16e0:	50 91 24 02 	lds	r21, 0x0224
    16e4:	28 17       	cp	r18, r24
    16e6:	39 07       	cpc	r19, r25
    16e8:	4a 07       	cpc	r20, r26
    16ea:	5b 07       	cpc	r21, r27
    16ec:	14 f4       	brge	.+4      	; 0x16f2 <_Z18get_max_stop_anglev+0x2e>
    16ee:	9c 01       	movw	r18, r24
    16f0:	ad 01       	movw	r20, r26
	return max( EndPoint2.angle , EndPoint1.angle);
}
    16f2:	b9 01       	movw	r22, r18
    16f4:	ca 01       	movw	r24, r20
    16f6:	08 95       	ret

000016f8 <_Z20order_stops_by_valuev>:
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_min_stop_value()
{
	return min( EndPoint2.value, EndPoint1.value);	
    16f8:	e0 91 2b 02 	lds	r30, 0x022B
    16fc:	f0 91 2c 02 	lds	r31, 0x022C
    1700:	60 91 25 02 	lds	r22, 0x0225
    1704:	70 91 26 02 	lds	r23, 0x0226
    1708:	e6 17       	cp	r30, r22
    170a:	f7 07       	cpc	r31, r23
    170c:	40 f5       	brcc	.+80     	; 0x175e <_Z20order_stops_by_valuev+0x66>
{
	word Min = get_min_stop_value();
	if (EndPoint1.value == Min) return;		// okay

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
    170e:	80 91 21 02 	lds	r24, 0x0221
    1712:	90 91 22 02 	lds	r25, 0x0222
    1716:	a0 91 23 02 	lds	r26, 0x0223
    171a:	b0 91 24 02 	lds	r27, 0x0224
	word     tvalue = EndPoint1.value;
	
	EndPoint1.angle = EndPoint2.angle;
    171e:	20 91 27 02 	lds	r18, 0x0227
    1722:	30 91 28 02 	lds	r19, 0x0228
    1726:	40 91 29 02 	lds	r20, 0x0229
    172a:	50 91 2a 02 	lds	r21, 0x022A
    172e:	20 93 21 02 	sts	0x0221, r18
    1732:	30 93 22 02 	sts	0x0222, r19
    1736:	40 93 23 02 	sts	0x0223, r20
    173a:	50 93 24 02 	sts	0x0224, r21
	EndPoint1.value = EndPoint2.value;		
    173e:	f0 93 26 02 	sts	0x0226, r31
    1742:	e0 93 25 02 	sts	0x0225, r30
	EndPoint2.angle = tangle;
    1746:	80 93 27 02 	sts	0x0227, r24
    174a:	90 93 28 02 	sts	0x0228, r25
    174e:	a0 93 29 02 	sts	0x0229, r26
    1752:	b0 93 2a 02 	sts	0x022A, r27
	EndPoint2.value = tvalue;	
    1756:	70 93 2c 02 	sts	0x022C, r23
    175a:	60 93 2b 02 	sts	0x022B, r22
    175e:	08 95       	ret

00001760 <_Z20order_stops_by_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
	return min( EndPoint2.angle , EndPoint1.angle);
    1768:	20 91 27 02 	lds	r18, 0x0227
    176c:	30 91 28 02 	lds	r19, 0x0228
    1770:	40 91 29 02 	lds	r20, 0x0229
    1774:	50 91 2a 02 	lds	r21, 0x022A
    1778:	80 91 21 02 	lds	r24, 0x0221
    177c:	90 91 22 02 	lds	r25, 0x0222
    1780:	a0 91 23 02 	lds	r26, 0x0223
    1784:	b0 91 24 02 	lds	r27, 0x0224
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
	word Min = get_min_stop_angle();
    1788:	7c 01       	movw	r14, r24
    178a:	8d 01       	movw	r16, r26
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	4a 07       	cpc	r20, r26
    1792:	5b 07       	cpc	r21, r27
    1794:	14 f4       	brge	.+4      	; 0x179a <_Z20order_stops_by_anglev+0x3a>
    1796:	79 01       	movw	r14, r18
    1798:	8a 01       	movw	r16, r20
	if (EndPoint1.angle == Min) return;		// okay
    179a:	00 e0       	ldi	r16, 0x00	; 0
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	e8 16       	cp	r14, r24
    17a0:	f9 06       	cpc	r15, r25
    17a2:	0a 07       	cpc	r16, r26
    17a4:	1b 07       	cpc	r17, r27
    17a6:	01 f1       	breq	.+64     	; 0x17e8 <_Z20order_stops_by_anglev+0x88>

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
	word     tvalue = EndPoint1.value;
    17a8:	60 91 25 02 	lds	r22, 0x0225
    17ac:	70 91 26 02 	lds	r23, 0x0226
	
	EndPoint1.angle = EndPoint2.angle;
    17b0:	20 93 21 02 	sts	0x0221, r18
    17b4:	30 93 22 02 	sts	0x0222, r19
    17b8:	40 93 23 02 	sts	0x0223, r20
    17bc:	50 93 24 02 	sts	0x0224, r21
	EndPoint1.value = EndPoint2.value;		
    17c0:	20 91 2b 02 	lds	r18, 0x022B
    17c4:	30 91 2c 02 	lds	r19, 0x022C
    17c8:	30 93 26 02 	sts	0x0226, r19
    17cc:	20 93 25 02 	sts	0x0225, r18
	EndPoint2.angle = tangle;
    17d0:	80 93 27 02 	sts	0x0227, r24
    17d4:	90 93 28 02 	sts	0x0228, r25
    17d8:	a0 93 29 02 	sts	0x0229, r26
    17dc:	b0 93 2a 02 	sts	0x022A, r27
	EndPoint2.value = tvalue;
    17e0:	70 93 2c 02 	sts	0x022C, r23
    17e4:	60 93 2b 02 	sts	0x022B, r22
}
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	08 95       	ret

000017f2 <_Z11check_stopst>:
			1 = Under the Lower stop
			2 = Over the top stop
***********************************************/
#define HYSTERESIS_THRESHOLD 7
byte  check_stops( word  mPotValue )
{
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	ec 01       	movw	r28, r24
	static byte previous_state = 0;
	led_off(LIMIT_MIN);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_Z7led_offh>
	led_off(LIMIT_MAX);
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_Z7led_offh>

	if (previous_state==1)		// IN STOP 1
    1804:	80 91 5c 02 	lds	r24, 0x025C
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	a1 f0       	breq	.+40     	; 0x1834 <_Z11check_stopst+0x42>
		else {
			led_on(LIMIT_MIN);
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	01 f1       	breq	.+64     	; 0x1850 <_Z11check_stopst+0x5e>
			led_on(LIMIT_MAX);		
			return previous_state;		
		}
	}
		
	if (mPotValue < EndPoint1.value)
    1810:	80 91 25 02 	lds	r24, 0x0225
    1814:	90 91 26 02 	lds	r25, 0x0226
    1818:	c8 17       	cp	r28, r24
    181a:	d9 07       	cpc	r29, r25
    181c:	38 f1       	brcs	.+78     	; 0x186c <_Z11check_stopst+0x7a>
	{
		led_on(LIMIT_MIN);
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
    181e:	80 91 2b 02 	lds	r24, 0x022B
    1822:	90 91 2c 02 	lds	r25, 0x022C
    1826:	8c 17       	cp	r24, r28
    1828:	9d 07       	cpc	r25, r29
    182a:	78 f1       	brcs	.+94     	; 0x188a <_Z11check_stopst+0x98>
	{
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
    182c:	80 e0       	ldi	r24, 0x00	; 0
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret
	led_off(LIMIT_MIN);
	led_off(LIMIT_MAX);

	if (previous_state==1)		// IN STOP 1
	{
		word hysteresis = EndPoint1.value + HYSTERESIS_THRESHOLD;
    1834:	80 91 25 02 	lds	r24, 0x0225
    1838:	90 91 26 02 	lds	r25, 0x0226
    183c:	07 96       	adiw	r24, 0x07	; 7
		if (mPotValue > hysteresis) {
    183e:	8c 17       	cp	r24, r28
    1840:	9d 07       	cpc	r25, r29
    1842:	e8 f4       	brcc	.+58     	; 0x187e <_Z11check_stopst+0x8c>
	}
	if (previous_state==2)		// IN STOP 2
	{
		word hysteresis = EndPoint2.value - HYSTERESIS_THRESHOLD;
		if (mPotValue < hysteresis) {
			previous_state = 0;
    1844:	10 92 5c 02 	sts	0x025C, r1
			return 0;
    1848:	80 e0       	ldi	r24, 0x00	; 0
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	08 95       	ret
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
	{
		word hysteresis = EndPoint2.value - HYSTERESIS_THRESHOLD;
    1850:	80 91 2b 02 	lds	r24, 0x022B
    1854:	90 91 2c 02 	lds	r25, 0x022C
    1858:	07 97       	sbiw	r24, 0x07	; 7
		if (mPotValue < hysteresis) {
    185a:	c8 17       	cp	r28, r24
    185c:	d9 07       	cpc	r29, r25
    185e:	90 f3       	brcs	.-28     	; 0x1844 <_Z11check_stopst+0x52>
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MAX);		
    1860:	84 e0       	ldi	r24, 0x04	; 4
    1862:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_Z6led_onh>
			return previous_state;		
    1866:	80 91 5c 02 	lds	r24, 0x025C
    186a:	e1 cf       	rjmp	.-62     	; 0x182e <_Z11check_stopst+0x3c>
		}
	}
		
	if (mPotValue < EndPoint1.value)
	{
		led_on(LIMIT_MIN);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_Z6led_onh>
		previous_state = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 93 5c 02 	sts	0x025C, r24
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret
		if (mPotValue > hysteresis) {
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MIN);
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_Z6led_onh>
			return previous_state;		
    1884:	80 91 5c 02 	lds	r24, 0x025C
    1888:	d2 cf       	rjmp	.-92     	; 0x182e <_Z11check_stopst+0x3c>
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
	{
		led_on(LIMIT_MAX);
    188a:	84 e0       	ldi	r24, 0x04	; 4
    188c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_Z6led_onh>
		previous_state = 2;
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	80 93 5c 02 	sts	0x025C, r24
		return 2;
	}
	return 0;
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <_Z11check_stalltt>:
			1 = Over current Left side
			2 = Over current Right side
***********************************************/
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
    189c:	20 91 03 01 	lds	r18, 0x0103
    18a0:	30 91 04 01 	lds	r19, 0x0104
    18a4:	28 17       	cp	r18, r24
    18a6:	39 07       	cpc	r19, r25
    18a8:	38 f0       	brcs	.+14     	; 0x18b8 <_Z11check_stalltt+0x1c>
		return 1;
	if (mRightCurrent > current_2_threshold)
    18aa:	26 17       	cp	r18, r22
    18ac:	37 07       	cpc	r19, r23
    18ae:	10 f0       	brcs	.+4      	; 0x18b4 <_Z11check_stalltt+0x18>
		return 2;
	return 0;
    18b0:	80 e0       	ldi	r24, 0x00	; 0
}
    18b2:	08 95       	ret
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
		return 1;
	if (mRightCurrent > current_2_threshold)
		return 2;
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	08 95       	ret
			2 = Over current Right side
***********************************************/
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
		return 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	08 95       	ret

000018bc <_Z19destination_reachedv>:
			1 = Exactly reached
			2 = Close over
			3 = Close under
***********************************************/
byte	  destination_reached(  )
{
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;
    18c8:	80 91 4c 02 	lds	r24, 0x024C
    18cc:	88 23       	and	r24, r24
    18ce:	f9 f4       	brne	.+62     	; 0x190e <_Z19destination_reachedv+0x52>

	if (Destination.position == PotSample[1])
    18d0:	60 91 4f 02 	lds	r22, 0x024F
    18d4:	70 91 50 02 	lds	r23, 0x0250
    18d8:	c0 91 7e 02 	lds	r28, 0x027E
    18dc:	d0 91 7f 02 	lds	r29, 0x027F
    18e0:	6c 17       	cp	r22, r28
    18e2:	7d 07       	cpc	r23, r29
    18e4:	19 f1       	breq	.+70     	; 0x192c <_Z19destination_reachedv+0x70>
		return 1;

	if (previous_state==2)
    18e6:	80 91 5b 02 	lds	r24, 0x025B
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	39 f1       	breq	.+78     	; 0x193c <_Z19destination_reachedv+0x80>
			return 0;
		}
		else return previous_state;		
	}

	if (previous_state==3)
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	f1 f1       	breq	.+124    	; 0x196e <_Z19destination_reachedv+0xb2>
		}
		else return previous_state;
	}

	// Check for overage
	if (Destination.starting_position < Destination.position)
    18f2:	80 91 4d 02 	lds	r24, 0x024D
    18f6:	90 91 4e 02 	lds	r25, 0x024E
    18fa:	86 17       	cp	r24, r22
    18fc:	97 07       	cpc	r25, r23
    18fe:	78 f4       	brcc	.+30     	; 0x191e <_Z19destination_reachedv+0x62>
	{
		// Approaching upward:
		if (PotSample[1] > Destination.position) {
    1900:	6c 17       	cp	r22, r28
    1902:	7d 07       	cpc	r23, r29
    1904:	20 f4       	brcc	.+8      	; 0x190e <_Z19destination_reachedv+0x52>
			previous_state = 2;
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	80 93 5b 02 	sts	0x025B, r24
			return 2;		// reached upwardly
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <_Z19destination_reachedv+0x54>
		if ( PotSample[1] < Destination.position ) {
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
    190e:	80 e0       	ldi	r24, 0x00	; 0
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	08 95       	ret
			return 2;		// reached upwardly
		} 
	}
	else 
	{	// Approaching downward:
		if ( PotSample[1] < Destination.position ) {
    191e:	c6 17       	cp	r28, r22
    1920:	d7 07       	cpc	r29, r23
    1922:	a8 f7       	brcc	.-22     	; 0x190e <_Z19destination_reachedv+0x52>
			previous_state = 3;
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	80 93 5b 02 	sts	0x025B, r24
			return 3;		// reached downwardly
    192a:	f2 cf       	rjmp	.-28     	; 0x1910 <_Z19destination_reachedv+0x54>
{
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;

	if (Destination.position == PotSample[1])
		return 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	08 95       	ret
	if (Destination.position == PotSample[1])
		return 1;

	if (previous_state==2)
	{
		word hysteresis = Destination.position - (0.1*Destination.position);
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    1944:	7b 01       	movw	r14, r22
    1946:	8c 01       	movw	r16, r24
    1948:	2d ec       	ldi	r18, 0xCD	; 205
    194a:	3c ec       	ldi	r19, 0xCC	; 204
    194c:	4c ec       	ldi	r20, 0xCC	; 204
    194e:	5d e3       	ldi	r21, 0x3D	; 61
    1950:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	c8 01       	movw	r24, r16
    195a:	b7 01       	movw	r22, r14
    195c:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__subsf3>
    1960:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
		if (PotSample[1] < hysteresis) {
    1964:	c6 17       	cp	r28, r22
    1966:	d7 07       	cpc	r29, r23
    1968:	c8 f0       	brcs	.+50     	; 0x199c <_Z19destination_reachedv+0xe0>
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	d1 cf       	rjmp	.-94     	; 0x1910 <_Z19destination_reachedv+0x54>
		else return previous_state;		
	}

	if (previous_state==3)
	{
		word hysteresis = Destination.position + (0.1*Destination.position);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    1976:	7b 01       	movw	r14, r22
    1978:	8c 01       	movw	r16, r24
    197a:	2d ec       	ldi	r18, 0xCD	; 205
    197c:	3c ec       	ldi	r19, 0xCC	; 204
    197e:	4c ec       	ldi	r20, 0xCC	; 204
    1980:	5d e3       	ldi	r21, 0x3D	; 61
    1982:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1986:	9b 01       	movw	r18, r22
    1988:	ac 01       	movw	r20, r24
    198a:	c8 01       	movw	r24, r16
    198c:	b7 01       	movw	r22, r14
    198e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__addsf3>
    1992:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
		if (PotSample[1] > hysteresis) {
    1996:	6c 17       	cp	r22, r28
    1998:	7d 07       	cpc	r23, r29
    199a:	50 f4       	brcc	.+20     	; 0x19b0 <_Z19destination_reachedv+0xf4>
			previous_state = 0;
    199c:	10 92 5b 02 	sts	0x025B, r1
			return 0;
    19a0:	80 e0       	ldi	r24, 0x00	; 0
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret
	}

	if (previous_state==3)
	{
		word hysteresis = Destination.position + (0.1*Destination.position);
		if (PotSample[1] > hysteresis) {
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	ae cf       	rjmp	.-164    	; 0x1910 <_Z19destination_reachedv+0x54>

000019b4 <__vector_22>:
byte prev_q2 = 0;			// Holds the previous sample of the Q1 quadrature input.
byte prev_direction = CW;

// This covers PCint pins[7:0]
ISR ( PCINT0_vect )
{
    19b4:	1f 92       	push	r1
    19b6:	0f 92       	push	r0
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	0f 92       	push	r0
    19bc:	11 24       	eor	r1, r1
    19be:	2f 93       	push	r18
    19c0:	3f 93       	push	r19
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
	byte reg = PINB;		// PortB In
    19c6:	83 b1       	in	r24, 0x03	; 3
	byte q1 = (reg & (1<<ENCODER_Q1));
    19c8:	28 2f       	mov	r18, r24
    19ca:	28 70       	andi	r18, 0x08	; 8
	byte q2 = (reg & (1<<ENCODER_Q2));
    19cc:	38 2f       	mov	r19, r24
    19ce:	30 71       	andi	r19, 0x10	; 16
	byte Direction = CW;

	// Decode Direction & Count!
	// Determine direction by the value of Q2 when Q1 transitions high.
	if ((prev_q1==0) && (q1))		// Low to High
    19d0:	80 91 6b 02 	lds	r24, 0x026B
    19d4:	88 23       	and	r24, r24
    19d6:	69 f4       	brne	.+26     	; 0x19f2 <__vector_22+0x3e>
    19d8:	22 23       	and	r18, r18
    19da:	59 f0       	breq	.+22     	; 0x19f2 <__vector_22+0x3e>
	{
		if (q2) Direction = CW;
    19dc:	33 23       	and	r19, r19
    19de:	b1 f0       	breq	.+44     	; 0x1a0c <__vector_22+0x58>
		else 	Direction = CCW;
		
		if (Direction == CW)
			EncoderCount++;		// never reset.  Holds _THE_ count from min stop.
    19e0:	80 91 63 02 	lds	r24, 0x0263
    19e4:	90 91 64 02 	lds	r25, 0x0264
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	90 93 64 02 	sts	0x0264, r25
    19ee:	80 93 63 02 	sts	0x0263, r24
		else 
			EncoderCount--;
	}

	prev_q1 = q1;
    19f2:	20 93 6b 02 	sts	0x026B, r18
	prev_q2 = q2;
    19f6:	30 93 6c 02 	sts	0x026C, r19
	// PCIF flag is automatically cleared by entering this routine!
}
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	3f 91       	pop	r19
    1a00:	2f 91       	pop	r18
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti
		else 	Direction = CCW;
		
		if (Direction == CW)
			EncoderCount++;		// never reset.  Holds _THE_ count from min stop.
		else 
			EncoderCount--;
    1a0c:	80 91 63 02 	lds	r24, 0x0263
    1a10:	90 91 64 02 	lds	r25, 0x0264
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	90 93 64 02 	sts	0x0264, r25
    1a1a:	80 93 63 02 	sts	0x0263, r24
    1a1e:	e9 cf       	rjmp	.-46     	; 0x19f2 <__vector_22+0x3e>

00001a20 <_Z12encoder_initv>:
}

void encoder_init()
{
	// SET INPUTS:
	ENCODER_DDR &= ~ENCODER_DDR_INPUT_MASK;		// see pin_definitions.h
    1a20:	84 b1       	in	r24, 0x04	; 4
    1a22:	83 7e       	andi	r24, 0xE3	; 227
    1a24:	84 b9       	out	0x04, r24	; 4

	// Enable Interrupts on Rising Edges:
	PCMSK0 |= ((1<<ENCODER_Q1) | (1<<ENCODER_Q2));	  // | (1<<ENCODER_INDEX);
    1a26:	ea e6       	ldi	r30, 0x6A	; 106
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 61       	ori	r24, 0x18	; 24
    1a2e:	80 83       	st	Z, r24
	PCICR  |= 0x01;     //PCIE0;
    1a30:	e8 e6       	ldi	r30, 0x68	; 104
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	81 60       	ori	r24, 0x01	; 1
    1a38:	80 83       	st	Z, r24
	
	// Think these are for the non-maskable INT0,INT1,INT2,INT3.
	// Anyway they are totally different pins!
	//EIMSK |= 0x01;		//INT0
	//EICRA |= 0x03;		// Rising edges.
}
    1a3a:	08 95       	ret

00001a3c <_Z15encoder_disablev>:

void encoder_disable()
{
	// Disable Interrupts on Rising Edges: 
	PCMSK0 &= ~((1<<ENCODER_Q1) | (1<<ENCODER_Q2));		// zero the bits.	
    1a3c:	ea e6       	ldi	r30, 0x6A	; 106
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	87 7e       	andi	r24, 0xE7	; 231
    1a44:	80 83       	st	Z, r24
	PCICR  &= ~0x01;     //PCIE0;		
    1a46:	e8 e6       	ldi	r30, 0x68	; 104
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8e 7f       	andi	r24, 0xFE	; 254
    1a4e:	80 83       	st	Z, r24
}
    1a50:	08 95       	ret

00001a52 <_Z17encoder_timeslicev>:

/* Call every ~20ms ==> 50hz */
// Counts per Second : 
void encoder_timeslice()
{
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
	EncoderSpeed 		= (EncoderCount - EncoderCountPrev) * 50;		// for 10ms task : *100
    1a5e:	c0 91 63 02 	lds	r28, 0x0263
    1a62:	d0 91 64 02 	lds	r29, 0x0264
    1a66:	80 91 5d 02 	lds	r24, 0x025D
    1a6a:	90 91 5e 02 	lds	r25, 0x025E
    1a6e:	9e 01       	movw	r18, r28
    1a70:	28 1b       	sub	r18, r24
    1a72:	39 0b       	sbc	r19, r25
    1a74:	82 e3       	ldi	r24, 0x32	; 50
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	28 9f       	mul	r18, r24
    1a7a:	b0 01       	movw	r22, r0
    1a7c:	29 9f       	mul	r18, r25
    1a7e:	70 0d       	add	r23, r0
    1a80:	38 9f       	mul	r19, r24
    1a82:	70 0d       	add	r23, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	70 93 66 02 	sts	0x0266, r23
    1a8a:	60 93 65 02 	sts	0x0265, r22
	EncoderAcceleration = (EncoderSpeed - EncoderSpeedPrev) * 50;		// counts per second per second
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    1a96:	7b 01       	movw	r14, r22
    1a98:	8c 01       	movw	r16, r24
    1a9a:	20 91 5f 02 	lds	r18, 0x025F
    1a9e:	30 91 60 02 	lds	r19, 0x0260
    1aa2:	40 91 61 02 	lds	r20, 0x0261
    1aa6:	50 91 62 02 	lds	r21, 0x0262
    1aaa:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__subsf3>
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	48 e4       	ldi	r20, 0x48	; 72
    1ab4:	52 e4       	ldi	r21, 0x42	; 66
    1ab6:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1aba:	60 93 67 02 	sts	0x0267, r22
    1abe:	70 93 68 02 	sts	0x0268, r23
    1ac2:	80 93 69 02 	sts	0x0269, r24
    1ac6:	90 93 6a 02 	sts	0x026A, r25

	//EncoderSpeed++;	// for debug!	to tell if we're getting here.
	
	EncoderCountPrev 	= EncoderCount;
    1aca:	d0 93 5e 02 	sts	0x025E, r29
    1ace:	c0 93 5d 02 	sts	0x025D, r28
	EncoderSpeedPrev 	= EncoderSpeed;
    1ad2:	e0 92 5f 02 	sts	0x025F, r14
    1ad6:	f0 92 60 02 	sts	0x0260, r15
    1ada:	00 93 61 02 	sts	0x0261, r16
    1ade:	10 93 62 02 	sts	0x0262, r17
}
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	08 95       	ret

00001af0 <_Z17get_encoder_anglev>:
long int  get_encoder_angle()
{
	// Need to fix!  Verify stops are at least word size.  
	//return convert_to_angle( EncoderCount );
	return 0;
}
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	cb 01       	movw	r24, r22
    1af6:	08 95       	ret

00001af8 <_Z11OS_Dispatchv>:
{	
	if ((OS_Event_TIC_Counter % 5) == 0)	// 5ms tasks
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    1af8:	20 91 38 03 	lds	r18, 0x0338
    1afc:	30 91 39 03 	lds	r19, 0x0339
    1b00:	c9 01       	movw	r24, r18
    1b02:	6a e0       	ldi	r22, 0x0A	; 10
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	21 f1       	breq	.+72     	; 0x1b56 <_Z11OS_Dispatchv+0x5e>
	{		
		motor_timeslice_10ms();		
		report_timeslice_10ms();
		pot_timeslice();			// update speed,accel.	
	}
	if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    1b0e:	c9 01       	movw	r24, r18
    1b10:	64 e1       	ldi	r22, 0x14	; 20
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	21 f4       	brne	.+8      	; 0x1b24 <_Z11OS_Dispatchv+0x2c>
    1b1c:	80 91 3e 03 	lds	r24, 0x033E
	{	
		if (isConfigured(MODE_USE_ENCODER))
    1b20:	80 fd       	sbrc	r24, 0
    1b22:	24 c0       	rjmp	.+72     	; 0x1b6c <_Z11OS_Dispatchv+0x74>
			encoder_timeslice();
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{
	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
    1b24:	c9 01       	movw	r24, r18
    1b26:	64 e6       	ldi	r22, 0x64	; 100
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	61 f4       	brne	.+24     	; 0x1b4a <_Z11OS_Dispatchv+0x52>
	{
		if (t) {
    1b32:	80 91 6e 02 	lds	r24, 0x026E
    1b36:	90 91 6f 02 	lds	r25, 0x026F
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	39 f4       	brne	.+14     	; 0x1b4c <_Z11OS_Dispatchv+0x54>
			//led_on(3);
			//RESET_LED_4();
			t = 0;
		} else {
			//led_off(3);
			t = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	90 93 6f 02 	sts	0x026F, r25
    1b46:	80 93 6e 02 	sts	0x026E, r24
    1b4a:	08 95       	ret
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
	{
		if (t) {
			//led_on(3);
			//RESET_LED_4();
			t = 0;
    1b4c:	10 92 6f 02 	sts	0x026F, r1
    1b50:	10 92 6e 02 	sts	0x026E, r1
    1b54:	08 95       	ret
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
	{		
		motor_timeslice_10ms();		
    1b56:	0e 94 bd 08 	call	0x117a	; 0x117a <_Z20motor_timeslice_10msv>
		report_timeslice_10ms();
    1b5a:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z21report_timeslice_10msv>
		pot_timeslice();			// update speed,accel.	
    1b5e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_Z13pot_timeslicev>
    1b62:	20 91 38 03 	lds	r18, 0x0338
    1b66:	30 91 39 03 	lds	r19, 0x0339
    1b6a:	d1 cf       	rjmp	.-94     	; 0x1b0e <_Z11OS_Dispatchv+0x16>
	}
	if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
	{	
		if (isConfigured(MODE_USE_ENCODER))
			encoder_timeslice();
    1b6c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_Z17encoder_timeslicev>
    1b70:	20 91 38 03 	lds	r18, 0x0338
    1b74:	30 91 39 03 	lds	r19, 0x0339
    1b78:	d5 cf       	rjmp	.-86     	; 0x1b24 <_Z11OS_Dispatchv+0x2c>

00001b7a <__vector_27>:
byte next_channel = 0;
byte sample_counter = 0;
#define NUM_AVGS 10

ISR ( ADC_vect )
{
    1b7a:	1f 92       	push	r1
    1b7c:	0f 92       	push	r0
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	0f 92       	push	r0
    1b82:	11 24       	eor	r1, r1
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
	if (sample_counter++ > NUM_AVGS) {
    1ba8:	80 91 81 02 	lds	r24, 0x0281
    1bac:	98 2f       	mov	r25, r24
    1bae:	9f 5f       	subi	r25, 0xFF	; 255
    1bb0:	90 93 81 02 	sts	0x0281, r25
    1bb4:	8b 30       	cpi	r24, 0x0B	; 11
    1bb6:	10 f0       	brcs	.+4      	; 0x1bbc <__vector_27+0x42>
		sample_counter=0;
    1bb8:	10 92 81 02 	sts	0x0281, r1
	}
	word result = ADCL;
    1bbc:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
    1bc0:	90 91 79 00 	lds	r25, 0x0079
    1bc4:	d9 2f       	mov	r29, r25
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	c9 2f       	mov	r28, r25
    1bca:	c8 0f       	add	r28, r24
    1bcc:	d1 1d       	adc	r29, r1
	switch(next_channel)				// Round Robin style measurements
    1bce:	80 91 80 02 	lds	r24, 0x0280
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <__vector_27+0x5e>
    1bd6:	63 c0       	rjmp	.+198    	; 0x1c9e <__vector_27+0x124>
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	08 f4       	brcc	.+2      	; 0x1bde <__vector_27+0x64>
    1bdc:	50 c0       	rjmp	.+160    	; 0x1c7e <__vector_27+0x104>
    1bde:	82 30       	cpi	r24, 0x02	; 2
    1be0:	69 f5       	brne	.+90     	; 0x1c3c <__vector_27+0xc2>
			next_channel = 2;
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
			ADCSRA |= (1<<ADSC);			// Start conversion
			break;
			
	case 2:	RightCurrentSample = result;	
    1be2:	d0 93 7b 02 	sts	0x027B, r29
    1be6:	c0 93 7a 02 	sts	0x027A, r28
			RightCurrentSampleAvg = (gamma*RightCurrentSampleAvg) + alpha*((float)RightCurrentSample);
    1bea:	60 91 74 02 	lds	r22, 0x0274
    1bee:	70 91 75 02 	lds	r23, 0x0275
    1bf2:	80 91 76 02 	lds	r24, 0x0276
    1bf6:	90 91 77 02 	lds	r25, 0x0277
    1bfa:	2d ec       	ldi	r18, 0xCD	; 205
    1bfc:	3c ec       	ldi	r19, 0xCC	; 204
    1bfe:	4c e4       	ldi	r20, 0x4C	; 76
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1c06:	7b 01       	movw	r14, r22
    1c08:	8c 01       	movw	r16, r24
    1c0a:	be 01       	movw	r22, r28
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    1c14:	2d ec       	ldi	r18, 0xCD	; 205
    1c16:	3c ec       	ldi	r19, 0xCC	; 204
    1c18:	4c e4       	ldi	r20, 0x4C	; 76
    1c1a:	5e e3       	ldi	r21, 0x3E	; 62
    1c1c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	c8 01       	movw	r24, r16
    1c26:	b7 01       	movw	r22, r14
    1c28:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__addsf3>
    1c2c:	60 93 74 02 	sts	0x0274, r22
    1c30:	70 93 75 02 	sts	0x0275, r23
    1c34:	80 93 76 02 	sts	0x0276, r24
    1c38:	90 93 77 02 	sts	0x0277, r25
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;

	default: 			
			next_channel = 0;
    1c3c:	10 92 80 02 	sts	0x0280, r1
			ADMUX = POT_MUX;		// Select POT	
    1c40:	82 e4       	ldi	r24, 0x42	; 66
    1c42:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    1c46:	80 91 7a 00 	lds	r24, 0x007A
    1c4a:	80 64       	ori	r24, 0x40	; 64
    1c4c:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	bf 91       	pop	r27
    1c5a:	af 91       	pop	r26
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	7f 91       	pop	r23
    1c62:	6f 91       	pop	r22
    1c64:	5f 91       	pop	r21
    1c66:	4f 91       	pop	r20
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti
	}
	word result = ADCL;
	result      += (ADCH<<8);
	switch(next_channel)				// Round Robin style measurements
	{
	case 0:	PotSample[1] = result;
    1c7e:	d0 93 7f 02 	sts	0x027F, r29
    1c82:	c0 93 7e 02 	sts	0x027E, r28
			next_channel = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 80 02 	sts	0x0280, r24
			ADMUX = CURRSENSE_LEFT_MUX;		// Select Left Current Read
    1c8c:	88 e4       	ldi	r24, 0x48	; 72
    1c8e:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
    1c92:	80 91 7a 00 	lds	r24, 0x007A
    1c96:	80 64       	ori	r24, 0x40	; 64
    1c98:	80 93 7a 00 	sts	0x007A, r24
			break;
    1c9c:	d9 cf       	rjmp	.-78     	; 0x1c50 <__vector_27+0xd6>
			
	case 1:	LeftCurrentSample = result;
    1c9e:	d0 93 79 02 	sts	0x0279, r29
    1ca2:	c0 93 78 02 	sts	0x0278, r28
			LeftCurrentSampleAvg = (gamma*LeftCurrentSampleAvg) + alpha*((float)LeftCurrentSample);
    1ca6:	60 91 70 02 	lds	r22, 0x0270
    1caa:	70 91 71 02 	lds	r23, 0x0271
    1cae:	80 91 72 02 	lds	r24, 0x0272
    1cb2:	90 91 73 02 	lds	r25, 0x0273
    1cb6:	2d ec       	ldi	r18, 0xCD	; 205
    1cb8:	3c ec       	ldi	r19, 0xCC	; 204
    1cba:	4c e4       	ldi	r20, 0x4C	; 76
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1cc2:	7b 01       	movw	r14, r22
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	be 01       	movw	r22, r28
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    1cd0:	2d ec       	ldi	r18, 0xCD	; 205
    1cd2:	3c ec       	ldi	r19, 0xCC	; 204
    1cd4:	4c e4       	ldi	r20, 0x4C	; 76
    1cd6:	5e e3       	ldi	r21, 0x3E	; 62
    1cd8:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	b7 01       	movw	r22, r14
    1ce4:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__addsf3>
    1ce8:	60 93 70 02 	sts	0x0270, r22
    1cec:	70 93 71 02 	sts	0x0271, r23
    1cf0:	80 93 72 02 	sts	0x0272, r24
    1cf4:	90 93 73 02 	sts	0x0273, r25
			next_channel = 2;
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	80 93 80 02 	sts	0x0280, r24
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
    1cfe:	89 e4       	ldi	r24, 0x49	; 73
    1d00:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
    1d04:	80 91 7a 00 	lds	r24, 0x007A
    1d08:	80 64       	ori	r24, 0x40	; 64
    1d0a:	80 93 7a 00 	sts	0x007A, r24
			break;
    1d0e:	a0 cf       	rjmp	.-192    	; 0x1c50 <__vector_27+0xd6>

00001d10 <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    1d10:	ea e7       	ldi	r30, 0x7A	; 122
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	88 7f       	andi	r24, 0xF8	; 248
    1d18:	80 83       	st	Z, r24
}
    1d1a:	08 95       	ret

00001d1c <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83; 
    1d1c:	8b e9       	ldi	r24, 0x9B	; 155
    1d1e:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    1d22:	ee e7       	ldi	r30, 0x7E	; 126
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	84 60       	ori	r24, 0x04	; 4
    1d2a:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    1d2c:	ef e7       	ldi	r30, 0x7F	; 127
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	83 60       	ori	r24, 0x03	; 3
    1d34:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    1d36:	80 ea       	ldi	r24, 0xA0	; 160
    1d38:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    1d3c:	82 e4       	ldi	r24, 0x42	; 66
    1d3e:	80 93 7c 00 	sts	0x007C, r24
}
    1d42:	08 95       	ret

00001d44 <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    1d44:	82 e4       	ldi	r24, 0x42	; 66
    1d46:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    1d4a:	ea e7       	ldi	r30, 0x7A	; 122
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 64       	ori	r24, 0x40	; 64
    1d52:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    1d54:	08 95       	ret

00001d56 <_Z36calc_load_current_from_sense_currentt>:
float Ioffset = 0.0;

float calc_load_current_from_sense_current( word mIsense )
{
	// ILoad = dK_ilis(Isense - Ioffset)
	return dK * (mIsense - Ioffset);	
    1d56:	bc 01       	movw	r22, r24
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    1d60:	20 91 82 02 	lds	r18, 0x0282
    1d64:	30 91 83 02 	lds	r19, 0x0283
    1d68:	40 91 84 02 	lds	r20, 0x0284
    1d6c:	50 91 85 02 	lds	r21, 0x0285
    1d70:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__subsf3>
    1d74:	20 91 07 01 	lds	r18, 0x0107
    1d78:	30 91 08 01 	lds	r19, 0x0108
    1d7c:	40 91 09 01 	lds	r20, 0x0109
    1d80:	50 91 0a 01 	lds	r21, 0x010A
    1d84:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
}
    1d88:	08 95       	ret

00001d8a <_Z15convert_to_ampst>:
void convert_to_amps( word mAmps )
{
	
}
    1d8a:	08 95       	ret

00001d8c <_Z17read_current_leftv>:
	on to calculate load current.
***********************************************/
word read_current_left()
{	
	// SELECT AND START CONVERSION:
	ADMUX  = CURRSENSE_LEFT_MUX;
    1d8c:	88 e4       	ldi	r24, 0x48	; 72
    1d8e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    1d92:	80 91 7a 00 	lds	r24, 0x007A
    1d96:	80 64       	ori	r24, 0x40	; 64
    1d98:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1d9c:	80 91 7a 00 	lds	r24, 0x007A
    1da0:	86 fd       	sbrc	r24, 6
    1da2:	fc cf       	rjmp	.-8      	; 0x1d9c <_Z17read_current_leftv+0x10>
	
	// PICK UP RESULT:
	word result = ADCL;
    1da4:	80 91 78 00 	lds	r24, 0x0078
	result += (ADCH<<8);
    1da8:	90 91 79 00 	lds	r25, 0x0079
    1dac:	39 2f       	mov	r19, r25
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	28 0f       	add	r18, r24
    1db2:	31 1d       	adc	r19, r1
	LeftCurrentSample = result;
    1db4:	30 93 79 02 	sts	0x0279, r19
    1db8:	20 93 78 02 	sts	0x0278, r18
	return result;
}
    1dbc:	c9 01       	movw	r24, r18
    1dbe:	08 95       	ret

00001dc0 <_Z18read_current_rightv>:
Return	:	The motor position in degrees * 10
***********************************************/
word read_current_right()
{
	// SELECT AND START CONVERSION:
	ADMUX = CURRSENSE_RIGHT_MUX;
    1dc0:	89 e4       	ldi	r24, 0x49	; 73
    1dc2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    1dc6:	80 91 7a 00 	lds	r24, 0x007A
    1dca:	80 64       	ori	r24, 0x40	; 64
    1dcc:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1dd0:	80 91 7a 00 	lds	r24, 0x007A
    1dd4:	86 fd       	sbrc	r24, 6
    1dd6:	fc cf       	rjmp	.-8      	; 0x1dd0 <_Z18read_current_rightv+0x10>
	
	// PICK UP RESULT:
	word result = ADCL;
    1dd8:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
    1ddc:	90 91 79 00 	lds	r25, 0x0079
    1de0:	39 2f       	mov	r19, r25
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	28 0f       	add	r18, r24
    1de6:	31 1d       	adc	r19, r1
	RightCurrentSample = result;		
    1de8:	30 93 7b 02 	sts	0x027B, r19
    1dec:	20 93 7a 02 	sts	0x027A, r18
	return result;
}
    1df0:	c9 01       	movw	r24, r18
    1df2:	08 95       	ret

00001df4 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
    1df4:	90 93 be 02 	sts	0x02BE, r25
    1df8:	80 93 bd 02 	sts	0x02BD, r24
}
    1dfc:	08 95       	ret

00001dfe <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
    1dfe:	90 93 c0 02 	sts	0x02C0, r25
    1e02:	80 93 bf 02 	sts	0x02BF, r24
}
    1e06:	08 95       	ret

00001e08 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
    1e0c:	ed ee       	ldi	r30, 0xED	; 237
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1e12:	82 95       	swap	r24
    1e14:	80 7f       	andi	r24, 0xF0	; 240
    1e16:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
    1e18:	c1 ef       	ldi	r28, 0xF1	; 241
    1e1a:	d0 e0       	ldi	r29, 0x00	; 0
    1e1c:	38 81       	ld	r19, Y
    1e1e:	cb 01       	movw	r24, r22
    1e20:	80 7e       	andi	r24, 0xE0	; 224
    1e22:	90 70       	andi	r25, 0x00	; 0
    1e24:	96 95       	lsr	r25
    1e26:	87 95       	ror	r24
    1e28:	92 95       	swap	r25
    1e2a:	82 95       	swap	r24
    1e2c:	8f 70       	andi	r24, 0x0F	; 15
    1e2e:	89 27       	eor	r24, r25
    1e30:	9f 70       	andi	r25, 0x0F	; 15
    1e32:	89 27       	eor	r24, r25
    1e34:	38 7f       	andi	r19, 0xF8	; 248
    1e36:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
    1e38:	a0 ef       	ldi	r26, 0xF0	; 240
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	8c 91       	ld	r24, X
    1e3e:	66 0f       	add	r22, r22
    1e40:	66 0f       	add	r22, r22
    1e42:	66 0f       	add	r22, r22
    1e44:	87 70       	andi	r24, 0x07	; 7
    1e46:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
    1e48:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
    1e4a:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
    1e4c:	a5 ef       	ldi	r26, 0xF5	; 245
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	8c 91       	ld	r24, X
    1e52:	87 60       	ori	r24, 0x07	; 7
    1e54:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
    1e56:	a4 ef       	ldi	r26, 0xF4	; 244
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	8c 91       	ld	r24, X
    1e5c:	88 6f       	ori	r24, 0xF8	; 248
    1e5e:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1e60:	20 83       	st	Z, r18
}
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1e68:	ed ee       	ldi	r30, 0xED	; 237
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1e6e:	82 95       	swap	r24
    1e70:	80 7f       	andi	r24, 0xF0	; 240
    1e72:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
    1e74:	a5 ef       	ldi	r26, 0xF5	; 245
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	8c 91       	ld	r24, X
    1e7a:	88 7f       	andi	r24, 0xF8	; 248
    1e7c:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
    1e7e:	a4 ef       	ldi	r26, 0xF4	; 244
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	8c 91       	ld	r24, X
    1e84:	87 70       	andi	r24, 0x07	; 7
    1e86:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1e88:	90 83       	st	Z, r25
}
    1e8a:	08 95       	ret

00001e8c <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
    1e8c:	25 2f       	mov	r18, r21
    1e8e:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1e90:	ed ee       	ldi	r30, 0xED	; 237
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1e96:	82 95       	swap	r24
    1e98:	80 7f       	andi	r24, 0xF0	; 240
    1e9a:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
    1e9c:	86 2f       	mov	r24, r22
    1e9e:	82 95       	swap	r24
    1ea0:	86 95       	lsr	r24
    1ea2:	87 70       	andi	r24, 0x07	; 7
    1ea4:	44 0f       	add	r20, r20
    1ea6:	44 0f       	add	r20, r20
    1ea8:	44 0f       	add	r20, r20
    1eaa:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    1eac:	c9 01       	movw	r24, r18
    1eae:	80 7e       	andi	r24, 0xE0	; 224
    1eb0:	9f 71       	andi	r25, 0x1F	; 31
    1eb2:	96 95       	lsr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	92 95       	swap	r25
    1eb8:	82 95       	swap	r24
    1eba:	8f 70       	andi	r24, 0x0F	; 15
    1ebc:	89 27       	eor	r24, r25
    1ebe:	9f 70       	andi	r25, 0x0F	; 15
    1ec0:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
    1ec2:	22 0f       	add	r18, r18
    1ec4:	22 0f       	add	r18, r18
    1ec6:	22 0f       	add	r18, r18
    1ec8:	37 2f       	mov	r19, r23
    1eca:	32 95       	swap	r19
    1ecc:	36 95       	lsr	r19
    1ece:	37 70       	andi	r19, 0x07	; 7
    1ed0:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
    1ed2:	77 0f       	add	r23, r23
    1ed4:	77 0f       	add	r23, r23
    1ed6:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
    1ed8:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
    1edc:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    1ee0:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
    1ee4:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
    1ee8:	50 83       	st	Z, r21
}
    1eea:	08 95       	ret

00001eec <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	f8 2e       	mov	r15, r24
    1ef8:	8b 01       	movw	r16, r22
    1efa:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    1f02:	c7 2f       	mov	r28, r23
    1f04:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
    1f06:	c8 01       	movw	r24, r16
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    1f0e:	27 2f       	mov	r18, r23
    1f10:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1f12:	ed ee       	ldi	r30, 0xED	; 237
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1f18:	f2 94       	swap	r15
    1f1a:	b0 ef       	ldi	r27, 0xF0	; 240
    1f1c:	fb 22       	and	r15, r27
    1f1e:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
    1f20:	43 ef       	ldi	r20, 0xF3	; 243
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	da 01       	movw	r26, r20
    1f26:	6c 91       	ld	r22, X
    1f28:	8d 2f       	mov	r24, r29
    1f2a:	82 95       	swap	r24
    1f2c:	86 95       	lsr	r24
    1f2e:	87 70       	andi	r24, 0x07	; 7
    1f30:	68 7f       	andi	r22, 0xF8	; 248
    1f32:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    1f34:	ce 01       	movw	r24, r28
    1f36:	80 7e       	andi	r24, 0xE0	; 224
    1f38:	9f 71       	andi	r25, 0x1F	; 31
    1f3a:	96 95       	lsr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	92 95       	swap	r25
    1f40:	82 95       	swap	r24
    1f42:	8f 70       	andi	r24, 0x0F	; 15
    1f44:	89 27       	eor	r24, r25
    1f46:	9f 70       	andi	r25, 0x0F	; 15
    1f48:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
    1f4a:	a1 ef       	ldi	r26, 0xF1	; 241
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	7c 91       	ld	r23, X
    1f50:	fc 2e       	mov	r15, r28
    1f52:	ff 0c       	add	r15, r15
    1f54:	ff 0c       	add	r15, r15
    1f56:	ff 0c       	add	r15, r15
    1f58:	77 70       	andi	r23, 0x07	; 7
    1f5a:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
    1f5c:	ea 01       	movw	r28, r20
    1f5e:	68 83       	st	Y, r22
	CANIDT2 = idt2;
    1f60:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    1f64:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
    1f66:	c7 ef       	ldi	r28, 0xF7	; 247
    1f68:	d0 e0       	ldi	r29, 0x00	; 0
    1f6a:	48 81       	ld	r20, Y
    1f6c:	83 2f       	mov	r24, r19
    1f6e:	82 95       	swap	r24
    1f70:	86 95       	lsr	r24
    1f72:	87 70       	andi	r24, 0x07	; 7
    1f74:	48 7f       	andi	r20, 0xF8	; 248
    1f76:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
    1f78:	c9 01       	movw	r24, r18
    1f7a:	80 7e       	andi	r24, 0xE0	; 224
    1f7c:	9f 71       	andi	r25, 0x1F	; 31
    1f7e:	96 95       	lsr	r25
    1f80:	87 95       	ror	r24
    1f82:	92 95       	swap	r25
    1f84:	82 95       	swap	r24
    1f86:	8f 70       	andi	r24, 0x0F	; 15
    1f88:	89 27       	eor	r24, r25
    1f8a:	9f 70       	andi	r25, 0x0F	; 15
    1f8c:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
    1f8e:	a5 ef       	ldi	r26, 0xF5	; 245
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	5c 91       	ld	r21, X
    1f94:	22 0f       	add	r18, r18
    1f96:	22 0f       	add	r18, r18
    1f98:	22 0f       	add	r18, r18
    1f9a:	57 70       	andi	r21, 0x07	; 7
    1f9c:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
    1f9e:	48 83       	st	Y, r20
	CANIDM2 = idm2;
    1fa0:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
    1fa4:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
    1fa6:	00 83       	st	Z, r16
}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	08 95       	ret

00001fb4 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
    1fb4:	ed ee       	ldi	r30, 0xED	; 237
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1fba:	82 95       	swap	r24
    1fbc:	80 7f       	andi	r24, 0xF0	; 240
    1fbe:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
    1fc0:	a7 ef       	ldi	r26, 0xF7	; 247
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	8c 91       	ld	r24, X
    1fc6:	88 7f       	andi	r24, 0xF8	; 248
    1fc8:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
    1fca:	a6 ef       	ldi	r26, 0xF6	; 246
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	8c 91       	ld	r24, X
    1fd0:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
    1fd2:	a5 ef       	ldi	r26, 0xF5	; 245
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	8c 91       	ld	r24, X
    1fd8:	87 70       	andi	r24, 0x07	; 7
    1fda:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1fdc:	90 83       	st	Z, r25
}
    1fde:	08 95       	ret

00001fe0 <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1fe0:	ed ee       	ldi	r30, 0xED	; 237
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1fe6:	82 95       	swap	r24
    1fe8:	80 7f       	andi	r24, 0xF0	; 240
    1fea:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1fec:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    1ff0:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    1ff4:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    1ff8:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    1ffc:	90 83       	st	Z, r25
}
    1ffe:	08 95       	ret

00002000 <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    2000:	ed ee       	ldi	r30, 0xED	; 237
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    2006:	82 95       	swap	r24
    2008:	80 7f       	andi	r24, 0xF0	; 240
    200a:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
    200c:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
    2010:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
    2014:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
    2018:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
    201c:	90 83       	st	Z, r25
}
    201e:	08 95       	ret

00002020 <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
    2026:	ed ee       	ldi	r30, 0xED	; 237
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
    202c:	38 2f       	mov	r19, r24
    202e:	32 95       	swap	r19
    2030:	30 7f       	andi	r19, 0xF0	; 240
    2032:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
    2034:	ce ed       	ldi	r28, 0xDE	; 222
    2036:	d0 e0       	ldi	r29, 0x00	; 0
    2038:	98 81       	ld	r25, Y
    203a:	a1 e0       	ldi	r26, 0x01	; 1
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <_Z21can_setup_receive_mobhssh+0x24>
    2040:	aa 0f       	add	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	8a 95       	dec	r24
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <_Z21can_setup_receive_mobhssh+0x20>
    2048:	9a 2b       	or	r25, r26
    204a:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    204c:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    204e:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    2050:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    2054:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    2058:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    205c:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    2060:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
    2062:	20 69       	ori	r18, 0x90	; 144
    2064:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
    2068:	a8 ed       	ldi	r26, 0xD8	; 216
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	8c 91       	ld	r24, X
    206e:	82 60       	ori	r24, 0x02	; 2
    2070:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
    2072:	10 83       	st	Z, r17
}
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	08 95       	ret

0000207c <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
    207c:	ef 92       	push	r14
    207e:	ff 92       	push	r15
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	28 e0       	ldi	r18, 0x08	; 8
    2094:	0e 94 10 10 	call	0x2020	; 0x2020 <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
    2098:	60 91 c1 02 	lds	r22, 0x02C1
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	28 e0       	ldi	r18, 0x08	; 8
    20b0:	0e 94 10 10 	call	0x2020	; 0x2020 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    20b4:	cd ee       	ldi	r28, 0xED	; 237
    20b6:	d0 e0       	ldi	r29, 0x00	; 0
    20b8:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    20ba:	80 e3       	ldi	r24, 0x30	; 48
    20bc:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    20be:	05 ef       	ldi	r16, 0xF5	; 245
    20c0:	10 e0       	ldi	r17, 0x00	; 0
    20c2:	f8 01       	movw	r30, r16
    20c4:	80 81       	ld	r24, Z
    20c6:	88 7f       	andi	r24, 0xF8	; 248
    20c8:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    20ca:	84 ef       	ldi	r24, 0xF4	; 244
    20cc:	e8 2e       	mov	r14, r24
    20ce:	f1 2c       	mov	r15, r1
    20d0:	f7 01       	movw	r30, r14
    20d2:	80 81       	ld	r24, Z
    20d4:	87 70       	andi	r24, 0x07	; 7
    20d6:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    20d8:	98 83       	st	Y, r25
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	63 e2       	ldi	r22, 0x23	; 35
    20de:	7c ef       	ldi	r23, 0xFC	; 252
    20e0:	43 e2       	ldi	r20, 0x23	; 35
    20e2:	5c ef       	ldi	r21, 0xFC	; 252
    20e4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
    20e8:	85 e0       	ldi	r24, 0x05	; 5
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	28 e0       	ldi	r18, 0x08	; 8
    20f4:	0e 94 10 10 	call	0x2020	; 0x2020 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    20f8:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    20fa:	80 e5       	ldi	r24, 0x50	; 80
    20fc:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    20fe:	f8 01       	movw	r30, r16
    2100:	80 81       	ld	r24, Z
    2102:	88 7f       	andi	r24, 0xF8	; 248
    2104:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    2106:	f7 01       	movw	r30, r14
    2108:	80 81       	ld	r24, Z
    210a:	87 70       	andi	r24, 0x07	; 7
    210c:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    210e:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
    2110:	85 e0       	ldi	r24, 0x05	; 5
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	7c ef       	ldi	r23, 0xFC	; 252
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	5c ef       	ldi	r21, 0xFC	; 252
    211a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_Z20can_add_id_to_filterhtt>
}
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	08 95       	ret

0000212c <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
    212c:	ed ee       	ldi	r30, 0xED	; 237
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
    2132:	82 95       	swap	r24
    2134:	80 7f       	andi	r24, 0xF0	; 240
    2136:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
    2138:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    213c:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
    2140:	90 83       	st	Z, r25
}
    2142:	08 95       	ret

00002144 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
    2144:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
    2146:	40 91 f3 00 	lds	r20, 0x00F3
    214a:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
    214c:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
    2150:	80 91 f1 00 	lds	r24, 0x00F1
    2154:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
    2156:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
    215a:	ba 01       	movw	r22, r20
    215c:	76 95       	lsr	r23
    215e:	67 95       	ror	r22
    2160:	76 95       	lsr	r23
    2162:	67 95       	ror	r22
    2164:	76 95       	lsr	r23
    2166:	67 95       	ror	r22
    2168:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
    216a:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
    216c:	22 0f       	add	r18, r18
    216e:	33 1f       	adc	r19, r19
    2170:	22 95       	swap	r18
    2172:	32 95       	swap	r19
    2174:	30 7f       	andi	r19, 0xF0	; 240
    2176:	32 27       	eor	r19, r18
    2178:	20 7f       	andi	r18, 0xF0	; 240
    217a:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
    217c:	54 2f       	mov	r21, r20
    217e:	44 27       	eor	r20, r20
    2180:	52 95       	swap	r21
    2182:	55 0f       	add	r21, r21
    2184:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    2186:	24 2b       	or	r18, r20
    2188:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
    218a:	ac 01       	movw	r20, r24
    218c:	56 95       	lsr	r21
    218e:	47 95       	ror	r20
    2190:	56 95       	lsr	r21
    2192:	47 95       	ror	r20
    2194:	56 95       	lsr	r21
    2196:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    2198:	24 2b       	or	r18, r20
    219a:	35 2b       	or	r19, r21
    219c:	32 83       	std	Z+2, r19	; 0x02
    219e:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
    21a0:	82 95       	swap	r24
    21a2:	88 0f       	add	r24, r24
    21a4:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
    21a6:	a6 95       	lsr	r26
    21a8:	a6 95       	lsr	r26
    21aa:	a6 95       	lsr	r26
    21ac:	a8 2b       	or	r26, r24
    21ae:	a3 83       	std	Z+3, r26	; 0x03
}
    21b0:	08 95       	ret

000021b2 <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
    21b8:	0e 94 a2 10 	call	0x2144	; 0x2144 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
    21bc:	80 91 ef 00 	lds	r24, 0x00EF
    21c0:	8f 70       	andi	r24, 0x0F	; 15
    21c2:	28 2f       	mov	r18, r24
    21c4:	22 0f       	add	r18, r18
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	91 7e       	andi	r25, 0xE1	; 225
    21ca:	92 2b       	or	r25, r18
    21cc:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
    21ce:	48 2f       	mov	r20, r24
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	41 15       	cp	r20, r1
    21d4:	51 05       	cpc	r21, r1
    21d6:	59 f0       	breq	.+22     	; 0x21ee <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
    21d8:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
    21de:	90 91 fa 00 	lds	r25, 0x00FA
    21e2:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    21e4:	2f 5f       	subi	r18, 0xFF	; 255
    21e6:	3f 4f       	sbci	r19, 0xFF	; 255
    21e8:	24 17       	cp	r18, r20
    21ea:	35 07       	cpc	r19, r21
    21ec:	c4 f3       	brlt	.-16     	; 0x21de <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
    21f4:	1f 92       	push	r1
    21f6:	0f 92       	push	r0
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	0f 92       	push	r0
    21fc:	11 24       	eor	r1, r1
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	4f 93       	push	r20
    2204:	5f 93       	push	r21
    2206:	6f 93       	push	r22
    2208:	7f 93       	push	r23
    220a:	8f 93       	push	r24
    220c:	9f 93       	push	r25
    220e:	af 93       	push	r26
    2210:	bf 93       	push	r27
    2212:	cf 93       	push	r28
    2214:	ef 93       	push	r30
    2216:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
    2218:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
    221c:	40 91 ec 00 	lds	r20, 0x00EC
    2220:	42 95       	swap	r20
    2222:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    2224:	4f 30       	cpi	r20, 0x0F	; 15
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_18+0x36>
    2228:	87 c0       	rjmp	.+270    	; 0x2338 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
    222a:	80 91 ec 00 	lds	r24, 0x00EC
    222e:	80 7f       	andi	r24, 0xF0	; 240
    2230:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
    2234:	80 91 ee 00 	lds	r24, 0x00EE
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	8f 71       	andi	r24, 0x1F	; 31
    223c:	90 70       	andi	r25, 0x00	; 0
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	09 f4       	brne	.+2      	; 0x2244 <__vector_18+0x50>
    2242:	40 c0       	rjmp	.+128    	; 0x22c4 <__vector_18+0xd0>
		 byte st = CANSTMOB;
    2244:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	82 ff       	sbrs	r24, 2
    224c:	05 c0       	rjmp	.+10     	; 0x2258 <__vector_18+0x64>
    224e:	20 91 ee 00 	lds	r18, 0x00EE
    2252:	2f 7e       	andi	r18, 0xEF	; 239
    2254:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
    2258:	9c 01       	movw	r18, r24
    225a:	23 70       	andi	r18, 0x03	; 3
    225c:	30 70       	andi	r19, 0x00	; 0
    225e:	21 15       	cp	r18, r1
    2260:	31 05       	cpc	r19, r1
    2262:	29 f0       	breq	.+10     	; 0x226e <__vector_18+0x7a>
    2264:	20 91 ee 00 	lds	r18, 0x00EE
    2268:	27 7f       	andi	r18, 0xF7	; 247
    226a:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
    226e:	81 ff       	sbrs	r24, 1
    2270:	05 c0       	rjmp	.+10     	; 0x227c <__vector_18+0x88>
    2272:	20 91 ee 00 	lds	r18, 0x00EE
    2276:	2b 7f       	andi	r18, 0xFB	; 251
    2278:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
    227c:	80 ff       	sbrs	r24, 0
    227e:	05 c0       	rjmp	.+10     	; 0x228a <__vector_18+0x96>
    2280:	80 91 ee 00 	lds	r24, 0x00EE
    2284:	8d 7f       	andi	r24, 0xFD	; 253
    2286:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
    228a:	45 30       	cpi	r20, 0x05	; 5
    228c:	09 f4       	brne	.+2      	; 0x2290 <__vector_18+0x9c>
    228e:	4b c0       	rjmp	.+150    	; 0x2326 <__vector_18+0x132>
    2290:	41 30       	cpi	r20, 0x01	; 1
    2292:	09 f4       	brne	.+2      	; 0x2296 <__vector_18+0xa2>
    2294:	48 c0       	rjmp	.+144    	; 0x2326 <__vector_18+0x132>
    2296:	43 30       	cpi	r20, 0x03	; 3
    2298:	09 f4       	brne	.+2      	; 0x229c <__vector_18+0xa8>
    229a:	45 c0       	rjmp	.+138    	; 0x2326 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
    229c:	c0 93 ed 00 	sts	0x00ED, r28
}
    22a0:	ff 91       	pop	r31
    22a2:	ef 91       	pop	r30
    22a4:	cf 91       	pop	r28
    22a6:	bf 91       	pop	r27
    22a8:	af 91       	pop	r26
    22aa:	9f 91       	pop	r25
    22ac:	8f 91       	pop	r24
    22ae:	7f 91       	pop	r23
    22b0:	6f 91       	pop	r22
    22b2:	5f 91       	pop	r21
    22b4:	4f 91       	pop	r20
    22b6:	3f 91       	pop	r19
    22b8:	2f 91       	pop	r18
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	0f 90       	pop	r0
    22c0:	1f 90       	pop	r1
    22c2:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
    22c4:	80 91 ee 00 	lds	r24, 0x00EE
    22c8:	85 fd       	sbrc	r24, 5
    22ca:	13 c0       	rjmp	.+38     	; 0x22f2 <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
    22cc:	80 91 ee 00 	lds	r24, 0x00EE
    22d0:	86 ff       	sbrs	r24, 6
    22d2:	e4 cf       	rjmp	.-56     	; 0x229c <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
    22d4:	e0 91 bf 02 	lds	r30, 0x02BF
    22d8:	f0 91 c0 02 	lds	r31, 0x02C0
    22dc:	30 97       	sbiw	r30, 0x00	; 0
    22de:	09 f0       	breq	.+2      	; 0x22e2 <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
    22e0:	09 95       	icall

		TransmittedSuccesfully = TRUE;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	80 93 b4 02 	sts	0x02B4, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
    22e8:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
    22ec:	10 92 ee 00 	sts	0x00EE, r1
    22f0:	d5 cf       	rjmp	.-86     	; 0x229c <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 b3 02 	sts	0x02B3, r24
       	can_retrieve_data( &LastReceivedMsg );
    22f8:	84 ea       	ldi	r24, 0xA4	; 164
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
    2300:	84 ea       	ldi	r24, 0xA4	; 164
    2302:	92 e0       	ldi	r25, 0x02	; 2
    2304:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
    2308:	88 23       	and	r24, r24
    230a:	69 f4       	brne	.+26     	; 0x2326 <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
    230c:	84 ea       	ldi	r24, 0xA4	; 164
    230e:	92 e0       	ldi	r25, 0x02	; 2
    2310:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
    2314:	e0 91 bd 02 	lds	r30, 0x02BD
    2318:	f0 91 be 02 	lds	r31, 0x02BE
    231c:	30 97       	sbiw	r30, 0x00	; 0
    231e:	19 f0       	breq	.+6      	; 0x2326 <__vector_18+0x132>
    	   		rx_call_back( &LastReceivedMsg );
    2320:	84 ea       	ldi	r24, 0xA4	; 164
    2322:	92 e0       	ldi	r25, 0x02	; 2
    2324:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
    2326:	88 e9       	ldi	r24, 0x98	; 152
    2328:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
    232c:	80 91 ee 00 	lds	r24, 0x00EE
    2330:	8f 7d       	andi	r24, 0xDF	; 223
    2332:	80 93 ee 00 	sts	0x00EE, r24
    2336:	b2 cf       	rjmp	.-156    	; 0x229c <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    2338:	80 91 da 00 	lds	r24, 0x00DA
    233c:	80 93 da 00 	sts	0x00DA, r24
    2340:	af cf       	rjmp	.-162    	; 0x22a0 <__vector_18+0xac>

00002342 <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
    2348:	98 2f       	mov	r25, r24
    234a:	92 95       	swap	r25
    234c:	90 7f       	andi	r25, 0xF0	; 240
   cli();
    234e:	f8 94       	cli
   CANPAGE = page;
    2350:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
    2354:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
    2358:	48 81       	ld	r20, Y
    235a:	59 81       	ldd	r21, Y+1	; 0x01
    235c:	6a 81       	ldd	r22, Y+2	; 0x02
    235e:	7b 81       	ldd	r23, Y+3	; 0x03
    2360:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	86 95       	lsr	r24
    2368:	8f 70       	andi	r24, 0x0F	; 15
    236a:	79 f0       	breq	.+30     	; 0x238a <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
    236c:	fe 01       	movw	r30, r28
    236e:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
    2374:	21 91       	ld	r18, Z+
    2376:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	2c 81       	ldd	r18, Y+4	; 0x04
    237e:	26 95       	lsr	r18
    2380:	2f 70       	andi	r18, 0x0F	; 15
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	82 17       	cp	r24, r18
    2386:	93 07       	cpc	r25, r19
    2388:	ac f3       	brlt	.-22     	; 0x2374 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
    238a:	80 91 f0 00 	lds	r24, 0x00F0
    238e:	8b 7f       	andi	r24, 0xFB	; 251
    2390:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	86 95       	lsr	r24
    2398:	8f 70       	andi	r24, 0x0F	; 15
    239a:	80 65       	ori	r24, 0x50	; 80
    239c:	80 93 ef 00 	sts	0x00EF, r24
   sei();
    23a0:	78 94       	sei
}
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
    23a8:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
    23ac:	80 91 ee 00 	lds	r24, 0x00EE
    23b0:	86 ff       	sbrs	r24, 6
    23b2:	fc cf       	rjmp	.-8      	; 0x23ac <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
    23b4:	08 95       	ret

000023b6 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    23b6:	20 91 f8 00 	lds	r18, 0x00F8
    23ba:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
    23bc:	40 91 f9 00 	lds	r20, 0x00F9
    23c0:	94 2f       	mov	r25, r20
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	28 2b       	or	r18, r24
    23c6:	39 2b       	or	r19, r25
  return retval;
}
    23c8:	c9 01       	movw	r24, r18
    23ca:	08 95       	ret

000023cc <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
    23d2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <_Z17can_retrieve_dataP4sCAN>
    23d6:	8f 70       	andi	r24, 0x0F	; 15
    23d8:	88 0f       	add	r24, r24
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	91 7e       	andi	r25, 0xE1	; 225
    23de:	98 2b       	or	r25, r24
    23e0:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    23e2:	80 91 f8 00 	lds	r24, 0x00F8
    23e6:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
    23e8:	40 91 f9 00 	lds	r20, 0x00F9
    23ec:	34 2f       	mov	r19, r20
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	82 2b       	or	r24, r18
    23f2:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
    23f4:	9e 87       	std	Y+14, r25	; 0x0e
    23f6:	8d 87       	std	Y+13, r24	; 0x0d
}
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret

000023fe <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	61 f0       	breq	.+24     	; 0x241a <_Z8set_baudh+0x1c>
    2402:	84 30       	cpi	r24, 0x04	; 4
    2404:	30 f0       	brcs	.+12     	; 0x2412 <_Z8set_baudh+0x14>
    2406:	85 30       	cpi	r24, 0x05	; 5
    2408:	d1 f0       	breq	.+52     	; 0x243e <_Z8set_baudh+0x40>
    240a:	85 30       	cpi	r24, 0x05	; 5
    240c:	80 f4       	brcc	.+32     	; 0x242e <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    240e:	82 e1       	ldi	r24, 0x12	; 18
    2410:	05 c0       	rjmp	.+10     	; 0x241c <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	91 f0       	breq	.+36     	; 0x243a <_Z8set_baudh+0x3c>
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	71 f0       	breq	.+28     	; 0x2436 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    241a:	8e e0       	ldi	r24, 0x0E	; 14
    241c:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    2426:	83 e1       	ldi	r24, 0x13	; 19
    2428:	80 93 e4 00 	sts	0x00E4, r24
    242c:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    242e:	86 30       	cpi	r24, 0x06	; 6
    2430:	a1 f7       	brne	.-24     	; 0x241a <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    2432:	86 e2       	ldi	r24, 0x26	; 38
    2434:	f3 cf       	rjmp	.-26     	; 0x241c <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    2436:	86 e0       	ldi	r24, 0x06	; 6
    2438:	f1 cf       	rjmp	.-30     	; 0x241c <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	ef cf       	rjmp	.-34     	; 0x241c <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    243e:	8e e1       	ldi	r24, 0x1E	; 30
    2440:	ed cf       	rjmp	.-38     	; 0x241c <_Z8set_baudh+0x1e>

00002442 <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
    2448:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    244c:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
    244e:	29 2f       	mov	r18, r25
    2450:	22 95       	swap	r18
    2452:	20 7f       	andi	r18, 0xF0	; 240
    2454:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
    2458:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    245c:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    2460:	9f 5f       	subi	r25, 0xFF	; 255
    2462:	96 30       	cpi	r25, 0x06	; 6
    2464:	a1 f7       	brne	.-24     	; 0x244e <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
    2466:	90 ea       	ldi	r25, 0xA0	; 160
    2468:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
    246c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <_Z8set_baudh>
   can_init_mobs();
    2470:	0e 94 3e 10 	call	0x207c	; 0x207c <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
    2474:	80 91 d9 00 	lds	r24, 0x00D9
    2478:	82 ff       	sbrs	r24, 2
    247a:	fc cf       	rjmp	.-8      	; 0x2474 <_Z8can_inith+0x32>
   }
   //sei();
}
    247c:	08 95       	ret

0000247e <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
    247e:	88 23       	and	r24, r24
    2480:	51 f4       	brne	.+20     	; 0x2496 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
    2488:	84 e0       	ldi	r24, 0x04	; 4
    248a:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
    248e:	83 e1       	ldi	r24, 0x13	; 19
    2490:	80 93 e4 00 	sts	0x00E4, r24
    2494:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
    2496:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
    249a:	8c e0       	ldi	r24, 0x0C	; 12
    249c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
    24a0:	86 e3       	ldi	r24, 0x36	; 54
    24a2:	80 93 e4 00 	sts	0x00E4, r24
    24a6:	08 95       	ret

000024a8 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    24a8:	88 23       	and	r24, r24
    24aa:	51 f4       	brne	.+20     	; 0x24c0 <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    24ac:	86 e0       	ldi	r24, 0x06	; 6
    24ae:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    24b2:	84 e0       	ldi	r24, 0x04	; 4
    24b4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    24b8:	83 e1       	ldi	r24, 0x13	; 19
    24ba:	80 93 e4 00 	sts	0x00E4, r24
    24be:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    24c6:	8c e0       	ldi	r24, 0x0C	; 12
    24c8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    24cc:	87 e3       	ldi	r24, 0x37	; 55
    24ce:	80 93 e4 00 	sts	0x00E4, r24
    24d2:	08 95       	ret

000024d4 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    24d4:	88 23       	and	r24, r24
    24d6:	51 f4       	brne	.+20     	; 0x24ec <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    24d8:	8e e0       	ldi	r24, 0x0E	; 14
    24da:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    24de:	84 e0       	ldi	r24, 0x04	; 4
    24e0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    24e4:	83 e1       	ldi	r24, 0x13	; 19
    24e6:	80 93 e4 00 	sts	0x00E4, r24
    24ea:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    24ec:	86 e0       	ldi	r24, 0x06	; 6
    24ee:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    24f2:	8c e0       	ldi	r24, 0x0C	; 12
    24f4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    24f8:	87 e3       	ldi	r24, 0x37	; 55
    24fa:	80 93 e4 00 	sts	0x00E4, r24
    24fe:	08 95       	ret

00002500 <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2500:	88 23       	and	r24, r24
    2502:	51 f4       	brne	.+20     	; 0x2518 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    2504:	82 e1       	ldi	r24, 0x12	; 18
    2506:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    250a:	84 e0       	ldi	r24, 0x04	; 4
    250c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    2510:	83 e1       	ldi	r24, 0x13	; 19
    2512:	80 93 e4 00 	sts	0x00E4, r24
    2516:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    2518:	88 e0       	ldi	r24, 0x08	; 8
    251a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    251e:	8c e0       	ldi	r24, 0x0C	; 12
    2520:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    2524:	87 e3       	ldi	r24, 0x37	; 55
    2526:	80 93 e4 00 	sts	0x00E4, r24
    252a:	08 95       	ret

0000252c <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    252c:	88 23       	and	r24, r24
    252e:	51 f4       	brne	.+20     	; 0x2544 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    2530:	8e e1       	ldi	r24, 0x1E	; 30
    2532:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    2536:	84 e0       	ldi	r24, 0x04	; 4
    2538:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    253c:	83 e1       	ldi	r24, 0x13	; 19
    253e:	80 93 e4 00 	sts	0x00E4, r24
    2542:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    2544:	8e e0       	ldi	r24, 0x0E	; 14
    2546:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    254a:	8c e0       	ldi	r24, 0x0C	; 12
    254c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    2550:	87 e3       	ldi	r24, 0x37	; 55
    2552:	80 93 e4 00 	sts	0x00E4, r24
    2556:	08 95       	ret

00002558 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2558:	88 23       	and	r24, r24
    255a:	51 f4       	brne	.+20     	; 0x2570 <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    255c:	86 e2       	ldi	r24, 0x26	; 38
    255e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    2562:	84 e0       	ldi	r24, 0x04	; 4
    2564:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    2568:	83 e1       	ldi	r24, 0x13	; 19
    256a:	80 93 e4 00 	sts	0x00E4, r24
    256e:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    2570:	82 e1       	ldi	r24, 0x12	; 18
    2572:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    2576:	8c e0       	ldi	r24, 0x0C	; 12
    2578:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    257c:	87 e3       	ldi	r24, 0x37	; 55
    257e:	80 93 e4 00 	sts	0x00E4, r24
    2582:	08 95       	ret

00002584 <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    2584:	83 e9       	ldi	r24, 0x93	; 147
    2586:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    258a:	ee e7       	ldi	r30, 0x7E	; 126
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	88 60       	ori	r24, 0x08	; 8
    2592:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    2594:	80 e8       	ldi	r24, 0x80	; 128
    2596:	80 93 7b 00 	sts	0x007B, r24
}
    259a:	08 95       	ret

0000259c <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
    259c:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
    25a6:	e3 e4       	ldi	r30, 0x43	; 67
    25a8:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
    25ac:	80 91 7a 00 	lds	r24, 0x007A
    25b0:	80 64       	ori	r24, 0x40	; 64
    25b2:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
    25b6:	80 91 7a 00 	lds	r24, 0x007A
    25ba:	86 fd       	sbrc	r24, 6
    25bc:	fc cf       	rjmp	.-8      	; 0x25b6 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
    25be:	80 91 78 00 	lds	r24, 0x0078
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	81 70       	andi	r24, 0x01	; 1
    25c6:	90 70       	andi	r25, 0x00	; 0
    25c8:	ba 01       	movw	r22, r20
    25ca:	6f 70       	andi	r22, 0x0F	; 15
    25cc:	70 70       	andi	r23, 0x00	; 0
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <_Z18pick_random_numberv+0x38>
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	6a 95       	dec	r22
    25d6:	e2 f7       	brpl	.-8      	; 0x25d0 <_Z18pick_random_numberv+0x34>
		result |= (tmp);
    25d8:	28 2b       	or	r18, r24
    25da:	39 2b       	or	r19, r25
		tmp = ADCH;  
    25dc:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    25e0:	4f 5f       	subi	r20, 0xFF	; 255
    25e2:	5f 4f       	sbci	r21, 0xFF	; 255
    25e4:	40 31       	cpi	r20, 0x10	; 16
    25e6:	51 05       	cpc	r21, r1
    25e8:	f9 f6       	brne	.-66     	; 0x25a8 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
    25ea:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
    25ec:	c9 01       	movw	r24, r18
    25ee:	08 95       	ret

000025f0 <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    25f0:	83 e0       	ldi	r24, 0x03	; 3
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	28 e0       	ldi	r18, 0x08	; 8
    25fc:	0e 94 10 10 	call	0x2020	; 0x2020 <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    2600:	83 e0       	ldi	r24, 0x03	; 3
    2602:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	63 e2       	ldi	r22, 0x23	; 35
    260a:	7c ef       	ldi	r23, 0xFC	; 252
    260c:	43 e2       	ldi	r20, 0x23	; 35
    260e:	5c ef       	ldi	r21, 0xFC	; 252
    2610:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_Z20can_add_id_to_filterhtt>
}
    2614:	08 95       	ret

00002616 <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    2616:	83 e9       	ldi	r24, 0x93	; 147
    2618:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    261c:	80 91 7e 00 	lds	r24, 0x007E
    2620:	88 60       	ori	r24, 0x08	; 8
    2622:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    2626:	80 e8       	ldi	r24, 0x80	; 128
    2628:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
    262c:	0e 94 ce 12 	call	0x259c	; 0x259c <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	90 93 c5 02 	sts	0x02C5, r25
    2636:	80 93 c4 02 	sts	0x02C4, r24
    263a:	80 93 c6 02 	sts	0x02C6, r24

	// put adc back into mode for POT
	adc_init();
    263e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    2642:	80 91 c2 02 	lds	r24, 0x02C2
    2646:	88 23       	and	r24, r24
    2648:	51 f0       	breq	.+20     	; 0x265e <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	80 93 c2 02 	sts	0x02C2, r24
    2650:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    2652:	80 93 c9 02 	sts	0x02C9, r24
	init_complete = TRUE;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	80 93 c3 02 	sts	0x02C3, r24
}
    265c:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME
		init_path = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	80 93 c9 02 	sts	0x02C9, r24
		setup_instance_claim_mob();
    2664:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    2668:	10 92 c1 02 	sts	0x02C1, r1
    266c:	80 91 c9 02 	lds	r24, 0x02C9
    2670:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    2672:	80 93 c9 02 	sts	0x02C9, r24
	init_complete = TRUE;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	80 93 c3 02 	sts	0x02C3, r24
}
    267c:	08 95       	ret

0000267e <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    2684:	83 e2       	ldi	r24, 0x23	; 35
    2686:	9c ef       	ldi	r25, 0xFC	; 252
    2688:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    268c:	68 83       	st	Y, r22
    268e:	79 83       	std	Y+1, r23	; 0x01
    2690:	8a 83       	std	Y+2, r24	; 0x02
    2692:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    2694:	80 91 c1 02 	lds	r24, 0x02C1
    2698:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    269a:	80 91 c2 02 	lds	r24, 0x02C2
    269e:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    26a0:	80 91 c6 02 	lds	r24, 0x02C6
    26a4:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    26a6:	80 91 c9 02 	lds	r24, 0x02C9
    26aa:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    26ac:	80 91 ca 02 	lds	r24, 0x02CA
    26b0:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    26b2:	80 91 42 03 	lds	r24, 0x0342
    26b6:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    26bc:	8e 60       	ori	r24, 0x0E	; 14
    26be:	8c 83       	std	Y+4, r24	; 0x04
}
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <_Z22can_instance_timeslicev>:

byte ts_state = 0;

void can_instance_timeslice()
{
	ts_state = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	80 93 ca 02 	sts	0x02CA, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    26cc:	40 91 c2 02 	lds	r20, 0x02C2
    26d0:	41 30       	cpi	r20, 0x01	; 1
    26d2:	59 f1       	breq	.+86     	; 0x272a <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    26d4:	80 91 c3 02 	lds	r24, 0x02C3
    26d8:	88 23       	and	r24, r24
    26da:	39 f1       	breq	.+78     	; 0x272a <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    26dc:	80 91 c4 02 	lds	r24, 0x02C4
    26e0:	90 91 c5 02 	lds	r25, 0x02C5
    26e4:	9c 01       	movw	r18, r24
    26e6:	21 50       	subi	r18, 0x01	; 1
    26e8:	30 40       	sbci	r19, 0x00	; 0
    26ea:	30 93 c5 02 	sts	0x02C5, r19
    26ee:	20 93 c4 02 	sts	0x02C4, r18
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	d1 f4       	brne	.+52     	; 0x272a <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	90 93 c5 02 	sts	0x02C5, r25
    26fe:	80 93 c4 02 	sts	0x02C4, r24
	ts_state = 2;
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	80 93 ca 02 	sts	0x02CA, r24
	
	if (Confirmed==NOT_CLAIMED)
    2708:	44 23       	and	r20, r20
    270a:	91 f0       	breq	.+36     	; 0x2730 <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    270c:	42 30       	cpi	r20, 0x02	; 2
    270e:	09 f4       	brne	.+2      	; 0x2712 <_Z22can_instance_timeslicev+0x4c>
    2710:	5a c0       	rjmp	.+180    	; 0x27c6 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    2712:	40 32       	cpi	r20, 0x20	; 32
    2714:	39 f1       	breq	.+78     	; 0x2764 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
    2716:	40 38       	cpi	r20, 0x80	; 128
    2718:	09 f4       	brne	.+2      	; 0x271c <_Z22can_instance_timeslicev+0x56>
    271a:	47 c0       	rjmp	.+142    	; 0x27aa <_Z22can_instance_timeslicev+0xe4>
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    271c:	40 34       	cpi	r20, 0x40	; 64
    271e:	31 f0       	breq	.+12     	; 0x272c <_Z22can_instance_timeslicev+0x66>
    2720:	80 91 ca 02 	lds	r24, 0x02CA
    2724:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
    2726:	80 93 ca 02 	sts	0x02CA, r24
    272a:	08 95       	ret
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    272c:	86 e8       	ldi	r24, 0x86	; 134
    272e:	fb cf       	rjmp	.-10     	; 0x2726 <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state = 2;
	
	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	80 93 ca 02 	sts	0x02CA, r24
		Confirmed = CLAIM_PENDING;
    2736:	80 e2       	ldi	r24, 0x20	; 32
    2738:	80 93 c2 02 	sts	0x02C2, r24
		can_prep_instance_request( &msg2, rand_instance );
    273c:	85 e9       	ldi	r24, 0x95	; 149
    273e:	92 e0       	ldi	r25, 0x02	; 2
    2740:	60 91 c6 02 	lds	r22, 0x02C6
    2744:	0e 94 3f 13 	call	0x267e	; 0x267e <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	65 e9       	ldi	r22, 0x95	; 149
    274c:	72 e0       	ldi	r23, 0x02	; 2
    274e:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    2752:	8c e2       	ldi	r24, 0x2C	; 44
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	90 93 c8 02 	sts	0x02C8, r25
    275a:	80 93 c7 02 	sts	0x02C7, r24
    275e:	40 91 c2 02 	lds	r20, 0x02C2
    2762:	d4 cf       	rjmp	.-88     	; 0x270c <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    2764:	84 e0       	ldi	r24, 0x04	; 4
    2766:	80 93 ca 02 	sts	0x02CA, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT
		cli();
    276a:	f8 94       	cli
		byte restore = CANPAGE;
    276c:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    2770:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    2774:	80 91 ee 00 	lds	r24, 0x00EE
    2778:	86 ff       	sbrs	r24, 6
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    277c:	80 e8       	ldi	r24, 0x80	; 128
    277e:	80 93 c2 02 	sts	0x02C2, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    2782:	80 91 c7 02 	lds	r24, 0x02C7
    2786:	90 91 c8 02 	lds	r25, 0x02C8
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	90 93 c8 02 	sts	0x02C8, r25
    2790:	80 93 c7 02 	sts	0x02C7, r24
		if (timeout_10ms_mult == 0)
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	19 f4       	brne	.+6      	; 0x279e <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
    2798:	84 e0       	ldi	r24, 0x04	; 4
    279a:	80 93 c2 02 	sts	0x02C2, r24
		}
		CANPAGE = restore;
    279e:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    27a2:	78 94       	sei
    27a4:	40 91 c2 02 	lds	r20, 0x02C2
    27a8:	b6 cf       	rjmp	.-148    	; 0x2716 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state = 5;
    27aa:	85 e0       	ldi	r24, 0x05	; 5
    27ac:	80 93 ca 02 	sts	0x02CA, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	80 93 c2 02 	sts	0x02C2, r24
		cli();  save_configuration();  sei();
    27b6:	f8 94       	cli
    27b8:	0e 94 25 1c 	call	0x384a	; 0x384a <_Z18save_configurationv>
    27bc:	78 94       	sei
    27be:	80 91 ca 02 	lds	r24, 0x02CA
    27c2:	80 68       	ori	r24, 0x80	; 128
    27c4:	b0 cf       	rjmp	.-160    	; 0x2726 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    27c6:	87 e0       	ldi	r24, 0x07	; 7
    27c8:	80 93 ca 02 	sts	0x02CA, r24
		Confirmed = CLAIMED;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 c2 02 	sts	0x02C2, r24
		can_prep_instance_request( &msg2, MyInstance );
    27d2:	85 e9       	ldi	r24, 0x95	; 149
    27d4:	92 e0       	ldi	r25, 0x02	; 2
    27d6:	60 91 c1 02 	lds	r22, 0x02C1
    27da:	0e 94 3f 13 	call	0x267e	; 0x267e <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	65 e9       	ldi	r22, 0x95	; 149
    27e2:	72 e0       	ldi	r23, 0x02	; 2
    27e4:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
    27e8:	40 91 c2 02 	lds	r20, 0x02C2
    27ec:	92 cf       	rjmp	.-220    	; 0x2712 <_Z22can_instance_timeslicev+0x4c>

000027ee <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    27f4:	84 e2       	ldi	r24, 0x24	; 36
    27f6:	9c ef       	ldi	r25, 0xFC	; 252
    27f8:	60 91 c1 02 	lds	r22, 0x02C1
    27fc:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2800:	68 83       	st	Y, r22
    2802:	79 83       	std	Y+1, r23	; 0x01
    2804:	8a 83       	std	Y+2, r24	; 0x02
    2806:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    2808:	80 91 c1 02 	lds	r24, 0x02C1
    280c:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    280e:	8c 81       	ldd	r24, Y+4	; 0x04
    2810:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    2812:	82 60       	ori	r24, 0x02	; 2
    2814:	8c 83       	std	Y+4, r24	; 0x04
}
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	08 95       	ret

0000281c <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    281c:	fc 01       	movw	r30, r24
    281e:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    2820:	90 91 c1 02 	lds	r25, 0x02C1
    2824:	89 17       	cp	r24, r25
    2826:	18 f0       	brcs	.+6      	; 0x282e <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	80 93 c1 02 	sts	0x02C1, r24
    282e:	08 95       	ret

00002830 <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    2830:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	78 2f       	mov	r23, r24
    2836:	89 2f       	mov	r24, r25
    2838:	92 2f       	mov	r25, r18
    283a:	08 95       	ret

0000283c <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    283c:	38 2f       	mov	r19, r24
    283e:	26 2f       	mov	r18, r22
    2840:	87 2f       	mov	r24, r23
    2842:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    2844:	63 2f       	mov	r22, r19
    2846:	72 2f       	mov	r23, r18
    2848:	08 95       	ret

0000284a <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    284a:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    284c:	08 95       	ret

0000284e <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    284e:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    2850:	08 95       	ret

00002852 <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    2852:	89 2f       	mov	r24, r25
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	08 95       	ret

00002858 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    2858:	e1 e0       	ldi	r30, 0x01	; 1
    285a:	62 17       	cp	r22, r18
    285c:	73 07       	cpc	r23, r19
    285e:	84 07       	cpc	r24, r20
    2860:	95 07       	cpc	r25, r21
    2862:	09 f0       	breq	.+2      	; 0x2866 <_Z5match6idTypeS_+0xe>
    2864:	e0 e0       	ldi	r30, 0x00	; 0
}
    2866:	8e 2f       	mov	r24, r30
    2868:	08 95       	ret

0000286a <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	62 13       	cpse	r22, r18
    286e:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    2870:	08 95       	ret

00002872 <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    2872:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    2874:	27 2f       	mov	r18, r23
    2876:	38 2f       	mov	r19, r24
    2878:	69 2f       	mov	r22, r25
    287a:	74 2f       	mov	r23, r20
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	26 17       	cp	r18, r22
    2880:	37 07       	cpc	r19, r23
    2882:	09 f0       	breq	.+2      	; 0x2886 <_Z8id_match6idTypeS_+0x14>
    2884:	80 e0       	ldi	r24, 0x00	; 0
}
    2886:	08 95       	ret

00002888 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	49 13       	cpse	r20, r25
    288c:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    288e:	08 95       	ret

00002890 <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    2890:	90 93 d1 02 	sts	0x02D1, r25
    2894:	80 93 d0 02 	sts	0x02D0, r24
}
    2898:	08 95       	ret

0000289a <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    28a0:	81 e1       	ldi	r24, 0x11	; 17
    28a2:	9c ef       	ldi	r25, 0xFC	; 252
    28a4:	60 91 c1 02 	lds	r22, 0x02C1
    28a8:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    28ac:	68 83       	st	Y, r22
    28ae:	79 83       	std	Y+1, r23	; 0x01
    28b0:	8a 83       	std	Y+2, r24	; 0x02
    28b2:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    28b4:	84 e0       	ldi	r24, 0x04	; 4
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    28b8:	80 91 c1 02 	lds	r24, 0x02C1
    28bc:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    28be:	80 91 cb 02 	lds	r24, 0x02CB
    28c2:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    28c4:	80 91 cc 02 	lds	r24, 0x02CC
    28c8:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    28ca:	8c 81       	ldd	r24, Y+4	; 0x04
    28cc:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    28ce:	88 60       	ori	r24, 0x08	; 8
    28d0:	8c 83       	std	Y+4, r24	; 0x04
}
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	08 95       	ret

000028d8 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    28de:	82 e1       	ldi	r24, 0x12	; 18
    28e0:	9c ef       	ldi	r25, 0xFC	; 252
    28e2:	60 91 c1 02 	lds	r22, 0x02C1
    28e6:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    28ea:	68 83       	st	Y, r22
    28ec:	79 83       	std	Y+1, r23	; 0x01
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    28f0:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    28f2:	84 e0       	ldi	r24, 0x04	; 4
    28f4:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    28f6:	81 e4       	ldi	r24, 0x41	; 65
    28f8:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    28fe:	9f e0       	ldi	r25, 0x0F	; 15
    2900:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    2902:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    2904:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    290a:	8c 60       	ori	r24, 0x0C	; 12
    290c:	8c 83       	std	Y+4, r24	; 0x04
}
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret

00002914 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    291a:	83 e1       	ldi	r24, 0x13	; 19
    291c:	9c ef       	ldi	r25, 0xFC	; 252
    291e:	60 91 c1 02 	lds	r22, 0x02C1
    2922:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2926:	68 83       	st	Y, r22
    2928:	79 83       	std	Y+1, r23	; 0x01
    292a:	8a 83       	std	Y+2, r24	; 0x02
    292c:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    292e:	84 e0       	ldi	r24, 0x04	; 4
    2930:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    2932:	86 e5       	ldi	r24, 0x56	; 86
    2934:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    2936:	88 e7       	ldi	r24, 0x78	; 120
    2938:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    293a:	8c e9       	ldi	r24, 0x9C	; 156
    293c:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    293e:	8e ed       	ldi	r24, 0xDE	; 222
    2940:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    2942:	8c 81       	ldd	r24, Y+4	; 0x04
    2944:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    2946:	8a 60       	ori	r24, 0x0A	; 10
    2948:	8c 83       	std	Y+4, r24	; 0x04
}
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	08 95       	ret

00002950 <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    2956:	84 e1       	ldi	r24, 0x14	; 20
    2958:	9c ef       	ldi	r25, 0xFC	; 252
    295a:	60 91 c1 02 	lds	r22, 0x02C1
    295e:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2962:	68 83       	st	Y, r22
    2964:	79 83       	std	Y+1, r23	; 0x01
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    296a:	80 91 cd 02 	lds	r24, 0x02CD
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    2972:	de 01       	movw	r26, r28
    2974:	16 96       	adiw	r26, 0x06	; 6
    2976:	9c 01       	movw	r18, r24
    2978:	28 5f       	subi	r18, 0xF8	; 248
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    297c:	fc 01       	movw	r30, r24
    297e:	e4 58       	subi	r30, 0x84	; 132
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	e4 91       	lpm	r30, Z+
    2984:	ed 93       	st	X+, r30
    2986:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    2988:	82 17       	cp	r24, r18
    298a:	93 07       	cpc	r25, r19
    298c:	b9 f7       	brne	.-18     	; 0x297c <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    2992:	82 61       	ori	r24, 0x12	; 18
    2994:	8c 83       	std	Y+4, r24	; 0x04
}
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	08 95       	ret

0000299c <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    299c:	80 91 d2 02 	lds	r24, 0x02D2
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	d9 f0       	breq	.+54     	; 0x29da <_Z24can_board_presence_replyv+0x3e>
    29a4:	81 30       	cpi	r24, 0x01	; 1
    29a6:	28 f0       	brcs	.+10     	; 0x29b2 <_Z24can_board_presence_replyv+0x16>
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	09 f1       	breq	.+66     	; 0x29ee <_Z24can_board_presence_replyv+0x52>
    29ac:	83 30       	cpi	r24, 0x03	; 3
    29ae:	59 f0       	breq	.+22     	; 0x29c6 <_Z24can_board_presence_replyv+0x2a>
    29b0:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    29b2:	85 e9       	ldi	r24, 0x95	; 149
    29b4:	92 e0       	ldi	r25, 0x02	; 2
    29b6:	0e 94 4d 14 	call	0x289a	; 0x289a <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	65 e9       	ldi	r22, 0x95	; 149
    29be:	72 e0       	ldi	r23, 0x02	; 2
    29c0:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    29c4:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    29c6:	85 e9       	ldi	r24, 0x95	; 149
    29c8:	92 e0       	ldi	r25, 0x02	; 2
    29ca:	0e 94 a8 14 	call	0x2950	; 0x2950 <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	65 e9       	ldi	r22, 0x95	; 149
    29d2:	72 e0       	ldi	r23, 0x02	; 2
    29d4:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
    29d8:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    29da:	85 e9       	ldi	r24, 0x95	; 149
    29dc:	92 e0       	ldi	r25, 0x02	; 2
    29de:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	65 e9       	ldi	r22, 0x95	; 149
    29e6:	72 e0       	ldi	r23, 0x02	; 2
    29e8:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    29ec:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    29ee:	85 e9       	ldi	r24, 0x95	; 149
    29f0:	92 e0       	ldi	r25, 0x02	; 2
    29f2:	0e 94 8a 14 	call	0x2914	; 0x2914 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	65 e9       	ldi	r22, 0x95	; 149
    29fa:	72 e0       	ldi	r23, 0x02	; 2
    29fc:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
			break;
    2a00:	08 95       	ret

00002a02 <_Z19can_board_timeslicev>:
{	
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    2a02:	80 91 ce 02 	lds	r24, 0x02CE
    2a06:	80 fd       	sbrc	r24, 0
    2a08:	56 c0       	rjmp	.+172    	; 0x2ab6 <_Z19can_board_timeslicev+0xb4>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    2a0a:	81 fd       	sbrc	r24, 1
    2a0c:	49 c0       	rjmp	.+146    	; 0x2aa0 <_Z19can_board_timeslicev+0x9e>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    2a0e:	82 fd       	sbrc	r24, 2
    2a10:	32 c0       	rjmp	.+100    	; 0x2a76 <_Z19can_board_timeslicev+0x74>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
    2a12:	83 fd       	sbrc	r24, 3
    2a14:	26 c0       	rjmp	.+76     	; 0x2a62 <_Z19can_board_timeslicev+0x60>
		cli();
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    2a16:	84 fd       	sbrc	r24, 4
    2a18:	1a c0       	rjmp	.+52     	; 0x2a4e <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    2a1a:	85 ff       	sbrs	r24, 5
    2a1c:	0d c0       	rjmp	.+26     	; 0x2a38 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)
    2a1e:	80 91 0c 01 	lds	r24, 0x010C
    2a22:	90 91 0d 01 	lds	r25, 0x010D
    2a26:	9c 01       	movw	r18, r24
    2a28:	21 50       	subi	r18, 0x01	; 1
    2a2a:	30 40       	sbci	r19, 0x00	; 0
    2a2c:	30 93 0d 01 	sts	0x010D, r19
    2a30:	20 93 0c 01 	sts	0x010C, r18
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	09 f0       	breq	.+2      	; 0x2a3a <_Z19can_board_timeslicev+0x38>
    2a38:	08 95       	ret
		{
			cli();
    2a3a:	f8 94       	cli
			can_board_presence_reply( );
    2a3c:	0e 94 ce 14 	call	0x299c	; 0x299c <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    2a40:	80 91 ce 02 	lds	r24, 0x02CE
    2a44:	8f 7d       	andi	r24, 0xDF	; 223
    2a46:	80 93 ce 02 	sts	0x02CE, r24
			sei();
    2a4a:	78 94       	sei
    2a4c:	08 95       	ret
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    2a4e:	f8 94       	cli
		save_cal();
    2a50:	0e 94 38 07 	call	0xe70	; 0xe70 <_Z8save_calv>
		System_Send_Status &= (~0x10);
    2a54:	80 91 ce 02 	lds	r24, 0x02CE
    2a58:	8f 7e       	andi	r24, 0xEF	; 239
    2a5a:	80 93 ce 02 	sts	0x02CE, r24
		sei();
    2a5e:	78 94       	sei
    2a60:	dc cf       	rjmp	.-72     	; 0x2a1a <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
		cli();
    2a62:	f8 94       	cli
		save_configuration();
    2a64:	0e 94 25 1c 	call	0x384a	; 0x384a <_Z18save_configurationv>
		System_Send_Status &= (~0x08);
    2a68:	80 91 ce 02 	lds	r24, 0x02CE
    2a6c:	87 7f       	andi	r24, 0xF7	; 247
    2a6e:	80 93 ce 02 	sts	0x02CE, r24
		sei();
    2a72:	78 94       	sei
    2a74:	d0 cf       	rjmp	.-96     	; 0x2a16 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    2a76:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    2a78:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    2a7c:	85 e9       	ldi	r24, 0x95	; 149
    2a7e:	92 e0       	ldi	r25, 0x02	; 2
    2a80:	60 91 c1 02 	lds	r22, 0x02C1
    2a84:	0e 94 3f 13 	call	0x267e	; 0x267e <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	65 e9       	ldi	r22, 0x95	; 149
    2a8c:	72 e0       	ldi	r23, 0x02	; 2
    2a8e:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    2a92:	80 91 ce 02 	lds	r24, 0x02CE
    2a96:	8b 7f       	andi	r24, 0xFB	; 251
    2a98:	80 93 ce 02 	sts	0x02CE, r24
		sei();
    2a9c:	78 94       	sei
    2a9e:	b9 cf       	rjmp	.-142    	; 0x2a12 <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    2aa0:	82 e0       	ldi	r24, 0x02	; 2
    2aa2:	65 e9       	ldi	r22, 0x95	; 149
    2aa4:	72 e0       	ldi	r23, 0x02	; 2
    2aa6:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    2aaa:	80 91 ce 02 	lds	r24, 0x02CE
    2aae:	8d 7f       	andi	r24, 0xFD	; 253
    2ab0:	80 93 ce 02 	sts	0x02CE, r24
    2ab4:	ac cf       	rjmp	.-168    	; 0x2a0e <_Z19can_board_timeslicev+0xc>
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	66 e8       	ldi	r22, 0x86	; 134
    2aba:	72 e0       	ldi	r23, 0x02	; 2
    2abc:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    2ac0:	80 91 ce 02 	lds	r24, 0x02CE
    2ac4:	8e 7f       	andi	r24, 0xFE	; 254
    2ac6:	80 93 ce 02 	sts	0x02CE, r24
    2aca:	9f cf       	rjmp	.-194    	; 0x2a0a <_Z19can_board_timeslicev+0x8>

00002acc <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    2ad2:	87 e2       	ldi	r24, 0x27	; 39
    2ad4:	9c ef       	ldi	r25, 0xFC	; 252
    2ad6:	60 91 c1 02 	lds	r22, 0x02C1
    2ada:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2ade:	68 83       	st	Y, r22
    2ae0:	79 83       	std	Y+1, r23	; 0x01
    2ae2:	8a 83       	std	Y+2, r24	; 0x02
    2ae4:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    2ae6:	80 91 3e 03 	lds	r24, 0x033E
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    2aec:	80 91 3f 03 	lds	r24, 0x033F
    2af0:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    2af2:	80 91 40 03 	lds	r24, 0x0340
    2af6:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    2af8:	80 91 41 03 	lds	r24, 0x0341
    2afc:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    2afe:	8c 81       	ldd	r24, Y+4	; 0x04
    2b00:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    2b02:	88 60       	ori	r24, 0x08	; 8
    2b04:	8c 83       	std	Y+4, r24	; 0x04
}
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	08 95       	ret

00002b0c <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    2b12:	85 e1       	ldi	r24, 0x15	; 21
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	60 91 c1 02 	lds	r22, 0x02C1
    2b1a:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2b1e:	9b 01       	movw	r18, r22
    2b20:	ac 01       	movw	r20, r24
    2b22:	68 81       	ld	r22, Y
    2b24:	79 81       	ldd	r23, Y+1	; 0x01
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
    2b2e:	88 23       	and	r24, r24
    2b30:	39 f0       	breq	.+14     	; 0x2b40 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
    2b32:	ce 01       	movw	r24, r28
    2b34:	0e 94 44 18 	call	0x3088	; 0x3088 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    2b40:	85 e1       	ldi	r24, 0x15	; 21
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	6f ef       	ldi	r22, 0xFF	; 255
    2b46:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2b4a:	9b 01       	movw	r18, r22
    2b4c:	ac 01       	movw	r20, r24
    2b4e:	68 81       	ld	r22, Y
    2b50:	79 81       	ldd	r23, Y+1	; 0x01
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    2b5a:	88 23       	and	r24, r24
    2b5c:	51 f7       	brne	.-44     	; 0x2b32 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
		return TRUE;
	} 
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    2b5e:	80 e1       	ldi	r24, 0x10	; 16
    2b60:	9c ef       	ldi	r25, 0xFC	; 252
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2b68:	9b 01       	movw	r18, r22
    2b6a:	ac 01       	movw	r20, r24
    2b6c:	68 81       	ld	r22, Y
    2b6e:	79 81       	ldd	r23, Y+1	; 0x01
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	0e 94 39 14 	call	0x2872	; 0x2872 <_Z8id_match6idTypeS_>
    2b78:	88 23       	and	r24, r24
    2b7a:	91 f0       	breq	.+36     	; 0x2ba0 <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.
			Need to delay by the instance number of timeslices.
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    2b7c:	80 91 ce 02 	lds	r24, 0x02CE
    2b80:	80 62       	ori	r24, 0x20	; 32
    2b82:	80 93 ce 02 	sts	0x02CE, r24
		Board_presence_response_type = mMsg->data[0];
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	80 93 d2 02 	sts	0x02D2, r24
		Board_presence_delay 		 = MyInstance;
    2b8c:	80 91 c1 02 	lds	r24, 0x02C1
    2b90:	80 93 0c 01 	sts	0x010C, r24
    2b94:	10 92 0d 01 	sts	0x010D, r1
		return TRUE;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    2ba0:	82 e2       	ldi	r24, 0x22	; 34
    2ba2:	9c ef       	ldi	r25, 0xFC	; 252
    2ba4:	60 91 c1 02 	lds	r22, 0x02C1
    2ba8:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2bac:	9b 01       	movw	r18, r22
    2bae:	ac 01       	movw	r20, r24
    2bb0:	68 81       	ld	r22, Y
    2bb2:	79 81       	ldd	r23, Y+1	; 0x01
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
    2bbc:	88 23       	and	r24, r24
    2bbe:	f1 f0       	breq	.+60     	; 0x2bfc <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	84 ff       	sbrs	r24, 4
    2bc4:	14 c0       	rjmp	.+40     	; 0x2bee <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 ); 
    2bc6:	86 e8       	ldi	r24, 0x86	; 134
    2bc8:	92 e0       	ldi	r25, 0x02	; 2
    2bca:	0e 94 66 15 	call	0x2acc	; 0x2acc <_Z18can_prep_configureP4sCAN>
			System_Send_Status = 1;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	80 93 ce 02 	sts	0x02CE, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    2bd4:	e0 91 d0 02 	lds	r30, 0x02D0
    2bd8:	f0 91 d1 02 	lds	r31, 0x02D1
    2bdc:	30 97       	sbiw	r30, 0x00	; 0
    2bde:	19 f1       	breq	.+70     	; 0x2c26 <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
    2be2:	8f 70       	andi	r24, 0x0F	; 15
    2be4:	09 95       	icall
		return TRUE;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 ); 
			System_Send_Status = 1;
		} else {
			can_parse_configure_request( mMsg );	// in configuration.c
    2bee:	ce 01       	movw	r24, r28
    2bf0:	0e 94 47 1b 	call	0x368e	; 0x368e <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    2bf4:	88 e0       	ldi	r24, 0x08	; 8
    2bf6:	80 93 ce 02 	sts	0x02CE, r24
    2bfa:	ec cf       	rjmp	.-40     	; 0x2bd4 <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    2bfc:	81 e2       	ldi	r24, 0x21	; 33
    2bfe:	9c ef       	ldi	r25, 0xFC	; 252
    2c00:	60 91 c1 02 	lds	r22, 0x02C1
    2c04:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2c08:	9b 01       	movw	r18, r22
    2c0a:	ac 01       	movw	r20, r24
    2c0c:	68 81       	ld	r22, Y
    2c0e:	79 81       	ldd	r23, Y+1	; 0x01
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
    2c18:	88 23       	and	r24, r24
    2c1a:	39 f0       	breq	.+14     	; 0x2c2a <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    2c1c:	88 e0       	ldi	r24, 0x08	; 8
    2c1e:	80 93 ce 02 	sts	0x02CE, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	8a cf       	rjmp	.-236    	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	88 cf       	rjmp	.-240    	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    2c2a:	81 e2       	ldi	r24, 0x21	; 33
    2c2c:	9c ef       	ldi	r25, 0xFC	; 252
    2c2e:	6f ef       	ldi	r22, 0xFF	; 255
    2c30:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2c34:	9b 01       	movw	r18, r22
    2c36:	ac 01       	movw	r20, r24
    2c38:	68 81       	ld	r22, Y
    2c3a:	79 81       	ldd	r23, Y+1	; 0x01
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c40:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    2c44:	88 23       	and	r24, r24
    2c46:	51 f7       	brne	.-44     	; 0x2c1c <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    2c48:	85 e2       	ldi	r24, 0x25	; 37
    2c4a:	9c ef       	ldi	r25, 0xFC	; 252
    2c4c:	60 91 c1 02 	lds	r22, 0x02C1
    2c50:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2c54:	9b 01       	movw	r18, r22
    2c56:	ac 01       	movw	r20, r24
    2c58:	68 81       	ld	r22, Y
    2c5a:	79 81       	ldd	r23, Y+1	; 0x01
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
    2c64:	88 23       	and	r24, r24
    2c66:	49 f5       	brne	.+82     	; 0x2cba <_Z23can_board_msg_responderP4sCAN+0x1ae>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    2c68:	86 e2       	ldi	r24, 0x26	; 38
    2c6a:	9c ef       	ldi	r25, 0xFC	; 252
    2c6c:	60 91 c1 02 	lds	r22, 0x02C1
    2c70:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2c74:	9b 01       	movw	r18, r22
    2c76:	ac 01       	movw	r20, r24
    2c78:	68 81       	ld	r22, Y
    2c7a:	79 81       	ldd	r23, Y+1	; 0x01
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c80:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
    2c84:	88 23       	and	r24, r24
    2c86:	61 f1       	breq	.+88     	; 0x2ce0 <_Z23can_board_msg_responderP4sCAN+0x1d4>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	8e 71       	andi	r24, 0x1E	; 30
    2c8c:	84 30       	cpi	r24, 0x04	; 4
    2c8e:	59 f6       	brne	.-106    	; 0x2c26 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    2c90:	3d 81       	ldd	r19, Y+5	; 0x05
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	8e 81       	ldd	r24, Y+6	; 0x06
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	82 2b       	or	r24, r18
    2c9a:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    2c9c:	22 e1       	ldi	r18, 0x12	; 18
    2c9e:	84 33       	cpi	r24, 0x34	; 52
    2ca0:	92 07       	cpc	r25, r18
    2ca2:	09 f6       	brne	.-126    	; 0x2c26 <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    2ca4:	85 e5       	ldi	r24, 0x55	; 85
    2ca6:	80 93 c9 02 	sts	0x02C9, r24
				init_complete = FALSE;
    2caa:	10 92 c3 02 	sts	0x02C3, r1
				Confirmed     = NOT_CLAIMED;
    2cae:	10 92 c2 02 	sts	0x02C2, r1
				can_instance_init();		// This fires off the sequencing right away.
    2cb2:	0e 94 0b 13 	call	0x2616	; 0x2616 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	40 cf       	rjmp	.-384    	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	80 93 c2 02 	sts	0x02C2, r24
		MyInstance = mMsg->data[0];
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	80 93 c1 02 	sts	0x02C1, r24
		save_configuration();
    2cc6:	0e 94 25 1c 	call	0x384a	; 0x384a <_Z18save_configurationv>
   		can_remove_instance_from_filter( 1 );
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    2cd0:	60 91 c1 02 	lds	r22, 0x02C1
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	70 e0       	ldi	r23, 0x00	; 0
    2cd8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <_Z26can_add_instance_to_filterht>
		return TRUE;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	2d cf       	rjmp	.-422    	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    2ce0:	86 e2       	ldi	r24, 0x26	; 38
    2ce2:	9c ef       	ldi	r25, 0xFC	; 252
    2ce4:	6f ef       	ldi	r22, 0xFF	; 255
    2ce6:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2cea:	9b 01       	movw	r18, r22
    2cec:	ac 01       	movw	r20, r24
    2cee:	68 81       	ld	r22, Y
    2cf0:	79 81       	ldd	r23, Y+1	; 0x01
    2cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf6:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z5match6idTypeS_>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    2cfa:	88 23       	and	r24, r24
    2cfc:	29 f6       	brne	.-118    	; 0x2c88 <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    2cfe:	83 e2       	ldi	r24, 0x23	; 35
    2d00:	9c ef       	ldi	r25, 0xFC	; 252
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	0e 94 18 14 	call	0x2830	; 0x2830 <_Z14create_CAN_eidth>
    2d08:	9b 01       	movw	r18, r22
    2d0a:	ac 01       	movw	r20, r24
    2d0c:	68 81       	ld	r22, Y
    2d0e:	79 81       	ldd	r23, Y+1	; 0x01
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	0e 94 39 14 	call	0x2872	; 0x2872 <_Z8id_match6idTypeS_>
    2d18:	88 23       	and	r24, r24
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <_Z23can_board_msg_responderP4sCAN+0x212>
    2d1c:	0e cf       	rjmp	.-484    	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    2d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d20:	80 91 c1 02 	lds	r24, 0x02C1
    2d24:	98 17       	cp	r25, r24
    2d26:	09 f0       	breq	.+2      	; 0x2d2a <_Z23can_board_msg_responderP4sCAN+0x21e>
    2d28:	7e cf       	rjmp	.-260    	; 0x2c26 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    2d2a:	80 91 c2 02 	lds	r24, 0x02C2
    2d2e:	80 32       	cpi	r24, 0x20	; 32
    2d30:	41 f0       	breq	.+16     	; 0x2d42 <_Z23can_board_msg_responderP4sCAN+0x236>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    2d32:	88 23       	and	r24, r24
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <_Z23can_board_msg_responderP4sCAN+0x22c>
    2d36:	77 cf       	rjmp	.-274    	; 0x2c26 <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    2d38:	ce 01       	movw	r24, r28
    2d3a:	0e 94 0e 14 	call	0x281c	; 0x281c <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	fc ce       	rjmp	.-520    	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    2d42:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    2d46:	80 e3       	ldi	r24, 0x30	; 48
    2d48:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    2d4c:	80 91 ef 00 	lds	r24, 0x00EF
    2d50:	8f 73       	andi	r24, 0x3F	; 63
    2d52:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    2d56:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    2d5a:	10 92 c2 02 	sts	0x02C2, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    2d5e:	ce 01       	movw	r24, r28
    2d60:	0e 94 0e 14 	call	0x281c	; 0x281c <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	e9 ce       	rjmp	.-558    	; 0x2b3a <_Z23can_board_msg_responderP4sCAN+0x2e>

00002d68 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    2d68:	ef 92       	push	r14
    2d6a:	ff 92       	push	r15
    2d6c:	0f 93       	push	r16
    2d6e:	1f 93       	push	r17
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	7b 01       	movw	r14, r22
    2d76:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    2d78:	c0 e0       	ldi	r28, 0x00	; 0
    2d7a:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	8c 0f       	add	r24, r28
    2d84:	9d 1f       	adc	r25, r29
    2d86:	fc 01       	movw	r30, r24
    2d88:	ee 0f       	add	r30, r30
    2d8a:	ff 1f       	adc	r31, r31
    2d8c:	ee 0f       	add	r30, r30
    2d8e:	ff 1f       	adc	r31, r31
    2d90:	e8 0f       	add	r30, r24
    2d92:	f9 1f       	adc	r31, r25
    2d94:	ed 52       	subi	r30, 0x2D	; 45
    2d96:	fd 4f       	sbci	r31, 0xFD	; 253
    2d98:	20 81       	ld	r18, Z
    2d9a:	31 81       	ldd	r19, Z+1	; 0x01
    2d9c:	42 81       	ldd	r20, Z+2	; 0x02
    2d9e:	53 81       	ldd	r21, Z+3	; 0x03
    2da0:	c8 01       	movw	r24, r16
    2da2:	b7 01       	movw	r22, r14
    2da4:	0e 94 39 14 	call	0x2872	; 0x2872 <_Z8id_match6idTypeS_>
    2da8:	88 23       	and	r24, r24
    2daa:	61 f4       	brne	.+24     	; 0x2dc4 <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    2dac:	21 96       	adiw	r28, 0x01	; 1
    2dae:	c6 30       	cpi	r28, 0x06	; 6
    2db0:	d1 05       	cpc	r29, r1
    2db2:	21 f7       	brne	.-56     	; 0x2d7c <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
}
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	0f 91       	pop	r16
    2dbe:	ff 90       	pop	r15
    2dc0:	ef 90       	pop	r14
    2dc2:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    2dc4:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	ff 90       	pop	r15
    2dd0:	ef 90       	pop	r14
    2dd2:	08 95       	ret

00002dd4 <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	39 2f       	mov	r19, r25
    2dd8:	d9 01       	movw	r26, r18
    2dda:	86 2f       	mov	r24, r22
    2ddc:	97 2f       	mov	r25, r23
    2dde:	fc 01       	movw	r30, r24
    2de0:	8f e0       	ldi	r24, 0x0F	; 15
    2de2:	01 90       	ld	r0, Z+
    2de4:	0d 92       	st	X+, r0
    2de6:	81 50       	subi	r24, 0x01	; 1
    2de8:	e1 f7       	brne	.-8      	; 0x2de2 <_Z12copy_can_msgP4sCANS0_+0xe>
}
    2dea:	08 95       	ret

00002dec <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    2dec:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    2dee:	80 91 2d 03 	lds	r24, 0x032D
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	9c 01       	movw	r18, r24
    2df6:	22 0f       	add	r18, r18
    2df8:	33 1f       	adc	r19, r19
    2dfa:	28 0f       	add	r18, r24
    2dfc:	39 1f       	adc	r19, r25
    2dfe:	c9 01       	movw	r24, r18
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	82 0f       	add	r24, r18
    2e0a:	93 1f       	adc	r25, r19
    2e0c:	8d 52       	subi	r24, 0x2D	; 45
    2e0e:	9d 4f       	sbci	r25, 0xFD	; 253
    2e10:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    2e14:	80 91 2d 03 	lds	r24, 0x032D
    2e18:	8f 5f       	subi	r24, 0xFF	; 255
    2e1a:	80 93 2d 03 	sts	0x032D, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    2e1e:	86 30       	cpi	r24, 0x06	; 6
    2e20:	10 f0       	brcs	.+4      	; 0x2e26 <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    2e22:	10 92 2d 03 	sts	0x032D, r1
    2e26:	08 95       	ret

00002e28 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    2e2e:	68 81       	ld	r22, Y
    2e30:	79 81       	ldd	r23, Y+1	; 0x01
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	9b 81       	ldd	r25, Y+3	; 0x03
    2e36:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    2e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e3c:	a9 f0       	breq	.+42     	; 0x2e68 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9c 01       	movw	r18, r24
    2e42:	22 0f       	add	r18, r18
    2e44:	33 1f       	adc	r19, r19
    2e46:	28 0f       	add	r18, r24
    2e48:	39 1f       	adc	r19, r25
    2e4a:	c9 01       	movw	r24, r18
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	82 0f       	add	r24, r18
    2e56:	93 1f       	adc	r25, r19
    2e58:	8d 52       	subi	r24, 0x2D	; 45
    2e5a:	9d 4f       	sbci	r25, 0xFD	; 253
    2e5c:	be 01       	movw	r22, r28
    2e5e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    2e68:	80 91 2d 03 	lds	r24, 0x032D
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9c 01       	movw	r18, r24
    2e70:	22 0f       	add	r18, r18
    2e72:	33 1f       	adc	r19, r19
    2e74:	28 0f       	add	r18, r24
    2e76:	39 1f       	adc	r19, r25
    2e78:	c9 01       	movw	r24, r18
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	82 0f       	add	r24, r18
    2e84:	93 1f       	adc	r25, r19
    2e86:	8d 52       	subi	r24, 0x2D	; 45
    2e88:	9d 4f       	sbci	r25, 0xFD	; 253
    2e8a:	be 01       	movw	r22, r28
    2e8c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    2e90:	80 91 2d 03 	lds	r24, 0x032D
    2e94:	8f 5f       	subi	r24, 0xFF	; 255
    2e96:	80 93 2d 03 	sts	0x032D, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    2e9a:	86 30       	cpi	r24, 0x06	; 6
    2e9c:	10 f3       	brcs	.-60     	; 0x2e62 <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    2e9e:	10 92 2d 03 	sts	0x032D, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	08 95       	ret

00002ea8 <_Z12QueueMessageP4sCAN>:
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    2ea8:	20 91 41 03 	lds	r18, 0x0341
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2eac:	21 fd       	sbrc	r18, 1
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    2eb0:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_Z17addMailboxHistoryP4sCAN>
    2eb4:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    2eb6:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_Z16addNormalHistoryP4sCAN>
    2eba:	08 95       	ret

00002ebc <_Z15RetrieveMessagev>:
    2ebc:	80 91 41 03 	lds	r24, 0x0341
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2ec0:	81 ff       	sbrs	r24, 1
    2ec2:	1b c0       	rjmp	.+54     	; 0x2efa <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    2ec4:	20 91 2e 03 	lds	r18, 0x032E
    2ec8:	80 91 2d 03 	lds	r24, 0x032D
    2ecc:	28 17       	cp	r18, r24
    2ece:	c9 f0       	breq	.+50     	; 0x2f02 <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2ed0:	82 2f       	mov	r24, r18
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	80 93 2e 03 	sts	0x032E, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2eda:	c9 01       	movw	r24, r18
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	82 0f       	add	r24, r18
    2ee2:	93 1f       	adc	r25, r19
    2ee4:	9c 01       	movw	r18, r24
    2ee6:	22 0f       	add	r18, r18
    2ee8:	33 1f       	adc	r19, r19
    2eea:	22 0f       	add	r18, r18
    2eec:	33 1f       	adc	r19, r19
    2eee:	28 0f       	add	r18, r24
    2ef0:	39 1f       	adc	r19, r25
    2ef2:	2d 52       	subi	r18, 0x2D	; 45
    2ef4:	3d 4f       	sbci	r19, 0xFD	; 253
		}
	}
	return NULL;
}
    2ef6:	c9 01       	movw	r24, r18
    2ef8:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
}
    2efe:	c9 01       	movw	r24, r18
    2f00:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    2f02:	10 92 2e 03 	sts	0x032E, r1
			RxHead = 0;
    2f06:	10 92 2d 03 	sts	0x032D, r1
			return NULL;
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	f3 cf       	rjmp	.-26     	; 0x2ef6 <_Z15RetrieveMessagev+0x3a>

00002f10 <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	ac 01       	movw	r20, r24
    2f14:	44 0f       	add	r20, r20
    2f16:	55 1f       	adc	r21, r21
    2f18:	48 0f       	add	r20, r24
    2f1a:	59 1f       	adc	r21, r25
    2f1c:	9a 01       	movw	r18, r20
    2f1e:	22 0f       	add	r18, r18
    2f20:	33 1f       	adc	r19, r19
    2f22:	22 0f       	add	r18, r18
    2f24:	33 1f       	adc	r19, r19
    2f26:	24 0f       	add	r18, r20
    2f28:	35 1f       	adc	r19, r21
    2f2a:	2d 52       	subi	r18, 0x2D	; 45
    2f2c:	3d 4f       	sbci	r19, 0xFD	; 253
}
    2f2e:	c9 01       	movw	r24, r18
    2f30:	08 95       	ret

00002f32 <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    2f32:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <_Z15RetrieveMessagev>
	if (msg)
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	19 f0       	breq	.+6      	; 0x2f40 <_Z15CAN_Q_Timeslicev+0xe>
    2f3a:	20 91 41 03 	lds	r18, 0x0341
	{
		SET_LED_2();
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2f3e:	21 ff       	sbrs	r18, 1
    2f40:	08 95       	ret
			can_file_message( msg );
    2f42:	0e 94 a0 03 	call	0x740	; 0x740 <_Z16can_file_messageP4sCAN>
    2f46:	08 95       	ret

00002f48 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    2f48:	10 92 30 03 	sts	0x0330, r1
	System_LED_Control.pattern    = 0;
    2f4c:	10 92 2f 03 	sts	0x032F, r1
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    2f50:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    2f52:	57 9a       	sbi	0x0a, 7	; 10
#endif
  	RESET_LED_1();
	RESET_LED_2();
	RESET_LED_3();
    2f54:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_4();
    2f56:	5f 98       	cbi	0x0b, 7	; 11
}
    2f58:	08 95       	ret

00002f5a <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    2f5a:	83 30       	cpi	r24, 0x03	; 3
    2f5c:	29 f0       	breq	.+10     	; 0x2f68 <_Z16protected_led_onh+0xe>
    2f5e:	84 30       	cpi	r24, 0x04	; 4
    2f60:	09 f0       	breq	.+2      	; 0x2f64 <_Z16protected_led_onh+0xa>
    2f62:	08 95       	ret
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    2f64:	5f 9a       	sbi	0x0b, 7	; 11
    2f66:	08 95       	ret
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
    2f68:	5e 9a       	sbi	0x0b, 6	; 11
    2f6a:	08 95       	ret

00002f6c <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    2f6c:	83 30       	cpi	r24, 0x03	; 3
    2f6e:	29 f0       	breq	.+10     	; 0x2f7a <_Z17protected_led_offh+0xe>
    2f70:	84 30       	cpi	r24, 0x04	; 4
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <_Z17protected_led_offh+0xa>
    2f74:	08 95       	ret
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    2f76:	5f 98       	cbi	0x0b, 7	; 11
    2f78:	08 95       	ret
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
    2f7a:	5e 98       	cbi	0x0b, 6	; 11
    2f7c:	08 95       	ret

00002f7e <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2f7e:	90 91 30 03 	lds	r25, 0x0330
    2f82:	99 23       	and	r25, r25
    2f84:	21 f0       	breq	.+8      	; 0x2f8e <_Z11strobe_ledsh+0x10>
    2f86:	92 30       	cpi	r25, 0x02	; 2
    2f88:	11 f0       	breq	.+4      	; 0x2f8e <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	08 95       	ret
    2f8e:	90 91 11 01 	lds	r25, 0x0111
    2f92:	29 2f       	mov	r18, r25
    2f94:	21 50       	subi	r18, 0x01	; 1
    2f96:	20 93 11 01 	sts	0x0111, r18
    2f9a:	99 23       	and	r25, r25
    2f9c:	b1 f7       	brne	.-20     	; 0x2f8a <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    2f9e:	9a e0       	ldi	r25, 0x0A	; 10
    2fa0:	90 93 11 01 	sts	0x0111, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2fa4:	88 23       	and	r24, r24
    2fa6:	79 f0       	breq	.+30     	; 0x2fc6 <_Z11strobe_ledsh+0x48>
    2fa8:	80 91 10 01 	lds	r24, 0x0110
    2fac:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_Z16protected_led_onh>
		i++;
    2fb0:	80 91 10 01 	lds	r24, 0x0110
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	80 93 10 01 	sts	0x0110, r24
		if (i>=5)  { i=1; return TRUE; }
    2fba:	85 30       	cpi	r24, 0x05	; 5
    2fbc:	78 f0       	brcs	.+30     	; 0x2fdc <_Z11strobe_ledsh+0x5e>
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	80 93 10 01 	sts	0x0110, r24
    2fc4:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2fc6:	80 91 10 01 	lds	r24, 0x0110
    2fca:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <_Z17protected_led_offh>
		i++;
    2fce:	80 91 10 01 	lds	r24, 0x0110
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	80 93 10 01 	sts	0x0110, r24
		if (i>=5)  { i=1; return TRUE; }
    2fd8:	85 30       	cpi	r24, 0x05	; 5
    2fda:	88 f7       	brcc	.-30     	; 0x2fbe <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
}
    2fde:	08 95       	ret

00002fe0 <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2fe0:	90 91 30 03 	lds	r25, 0x0330
    2fe4:	91 11       	cpse	r25, r1
    2fe6:	08 95       	ret
	protected_led_on(mindex);
    2fe8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_Z16protected_led_onh>
    2fec:	08 95       	ret

00002fee <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2fee:	90 91 30 03 	lds	r25, 0x0330
    2ff2:	91 11       	cpse	r25, r1
    2ff4:	08 95       	ret
	protected_led_off(mindex);
    2ff6:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <_Z17protected_led_offh>
    2ffa:	08 95       	ret

00002ffc <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    2ffc:	66 23       	and	r22, r22
    2ffe:	19 f4       	brne	.+6      	; 0x3006 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    3000:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_Z7led_offh>
    3004:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    3006:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_Z6led_onh>
    300a:	08 95       	ret

0000300c <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    300c:	90 91 30 03 	lds	r25, 0x0330
    3010:	91 11       	cpse	r25, r1
    3012:	08 95       	ret
	protected_set_led( mindex, value );
    3014:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_Z17protected_set_ledhh>
    3018:	08 95       	ret

0000301a <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    301a:	66 23       	and	r22, r22
    301c:	39 f0       	breq	.+14     	; 0x302c <_Z19protected_show_bytehh+0x12>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    301e:	87 ff       	sbrs	r24, 7
    3020:	0e c0       	rjmp	.+28     	; 0x303e <_Z19protected_show_bytehh+0x24>
    3022:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    3024:	86 fd       	sbrc	r24, 6
    3026:	07 c0       	rjmp	.+14     	; 0x3036 <_Z19protected_show_bytehh+0x1c>
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    3028:	5e 98       	cbi	0x0b, 6	; 11
    302a:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    302c:	83 ff       	sbrs	r24, 3
    302e:	05 c0       	rjmp	.+10     	; 0x303a <_Z19protected_show_bytehh+0x20>
    3030:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    3032:	82 ff       	sbrs	r24, 2
    3034:	f9 cf       	rjmp	.-14     	; 0x3028 <_Z19protected_show_bytehh+0xe>
    3036:	5e 9a       	sbi	0x0b, 6	; 11
    3038:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    303a:	5f 98       	cbi	0x0b, 7	; 11
    303c:	fa cf       	rjmp	.-12     	; 0x3032 <_Z19protected_show_bytehh+0x18>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    303e:	5f 98       	cbi	0x0b, 7	; 11
    3040:	f1 cf       	rjmp	.-30     	; 0x3024 <_Z19protected_show_bytehh+0xa>

00003042 <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    3042:	90 91 30 03 	lds	r25, 0x0330
    3046:	99 23       	and	r25, r25
    3048:	11 f0       	breq	.+4      	; 0x304e <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    304a:	80 91 2f 03 	lds	r24, 0x032F
	}
    protected_show_byte( result, mHiNibble );
    304e:	0e 94 0d 18 	call	0x301a	; 0x301a <_Z19protected_show_bytehh>
}
    3052:	08 95       	ret

00003054 <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    3054:	90 91 30 03 	lds	r25, 0x0330
    3058:	99 23       	and	r25, r25
    305a:	19 f0       	breq	.+6      	; 0x3062 <_Z18show_result_toggleh+0xe>
    305c:	93 30       	cpi	r25, 0x03	; 3
    305e:	09 f0       	breq	.+2      	; 0x3062 <_Z18show_result_toggleh+0xe>
    3060:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    3062:	90 91 0e 01 	lds	r25, 0x010E
    3066:	99 23       	and	r25, r25
    3068:	59 f4       	brne	.+22     	; 0x3080 <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	0e 94 0d 18 	call	0x301a	; 0x301a <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 91 0e 01 	lds	r25, 0x010E
    3076:	91 11       	cpse	r25, r1
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	80 93 0e 01 	sts	0x010E, r24
    307e:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    3080:	61 e0       	ldi	r22, 0x01	; 1
    3082:	0e 94 0d 18 	call	0x301a	; 0x301a <_Z19protected_show_bytehh>
    3086:	f4 cf       	rjmp	.-24     	; 0x3070 <_Z18show_result_toggleh+0x1c>

00003088 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    3088:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    308a:	95 81       	ldd	r25, Z+5	; 0x05
    308c:	9f 70       	andi	r25, 0x0F	; 15
    308e:	90 93 30 03 	sts	0x0330, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    3092:	86 81       	ldd	r24, Z+6	; 0x06
    3094:	8f 70       	andi	r24, 0x0F	; 15
    3096:	80 93 2f 03 	sts	0x032F, r24

	switch (System_LED_Control.systemMode)
    309a:	92 30       	cpi	r25, 0x02	; 2
    309c:	81 f0       	breq	.+32     	; 0x30be <_Z21can_parse_led_requestP4sCAN+0x36>
    309e:	93 30       	cpi	r25, 0x03	; 3
    30a0:	39 f0       	breq	.+14     	; 0x30b0 <_Z21can_parse_led_requestP4sCAN+0x28>
    30a2:	91 30       	cpi	r25, 0x01	; 1
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <_Z21can_parse_led_requestP4sCAN+0x20>
    30a6:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	0e 94 21 18 	call	0x3042	; 0x3042 <_Z9show_bytehh>
									  break;
    30ae:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    30b0:	80 91 c1 02 	lds	r24, 0x02C1
    30b4:	80 93 2f 03 	sts	0x032F, r24
									  show_result_toggle( MyInstance );
    30b8:	0e 94 2a 18 	call	0x3054	; 0x3054 <_Z18show_result_toggleh>
    30bc:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    30be:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <_Z11strobe_ledsh>
									  break;
    30c2:	08 95       	ret

000030c4 <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    30c4:	80 91 30 03 	lds	r24, 0x0330
    30c8:	82 30       	cpi	r24, 0x02	; 2
    30ca:	d9 f0       	breq	.+54     	; 0x3102 <_Z19led_timeslice_100msv+0x3e>
    30cc:	83 30       	cpi	r24, 0x03	; 3
    30ce:	49 f0       	breq	.+18     	; 0x30e2 <_Z19led_timeslice_100msv+0x1e>
    30d0:	81 30       	cpi	r24, 0x01	; 1
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <_Z19led_timeslice_100msv+0x12>
    30d4:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    30d6:	80 91 2f 03 	lds	r24, 0x032F
    30da:	60 e0       	ldi	r22, 0x00	; 0
    30dc:	0e 94 21 18 	call	0x3042	; 0x3042 <_Z9show_bytehh>
									  break;
    30e0:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    30e2:	80 91 0f 01 	lds	r24, 0x010F
    30e6:	98 2f       	mov	r25, r24
    30e8:	91 50       	subi	r25, 0x01	; 1
    30ea:	90 93 0f 01 	sts	0x010F, r25
    30ee:	88 23       	and	r24, r24
    30f0:	89 f7       	brne	.-30     	; 0x30d4 <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    30f2:	8a e0       	ldi	r24, 0x0A	; 10
    30f4:	80 93 0f 01 	sts	0x010F, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    30f8:	80 91 c1 02 	lds	r24, 0x02C1
    30fc:	0e 94 2a 18 	call	0x3054	; 0x3054 <_Z18show_result_toggleh>
    3100:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    3102:	80 91 2f 03 	lds	r24, 0x032F
    3106:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <_Z11strobe_ledsh>
    310a:	81 30       	cpi	r24, 0x01	; 1
    310c:	19 f7       	brne	.-58     	; 0x30d4 <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    310e:	90 91 2f 03 	lds	r25, 0x032F
    3112:	99 23       	and	r25, r25
    3114:	19 f4       	brne	.+6      	; 0x311c <_Z19led_timeslice_100msv+0x58>
    3116:	80 93 2f 03 	sts	0x032F, r24
    311a:	08 95       	ret
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	fb cf       	rjmp	.-10     	; 0x3116 <_Z19led_timeslice_100msv+0x52>

00003120 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    3120:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    3122:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    3124:	90 93 89 00 	sts	0x0089, r25
    3128:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    312c:	2f bf       	out	0x3f, r18	; 63
}
    312e:	08 95       	ret

00003130 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    3130:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    3132:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3134:	90 93 8b 00 	sts	0x008B, r25
    3138:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    313c:	2f bf       	out	0x3f, r18	; 63
}
    313e:	08 95       	ret

00003140 <_Z13get_top_valuef>:

word get_top_value( float mHerz )
{
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	7b 01       	movw	r14, r22
    314a:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    314c:	20 91 12 01 	lds	r18, 0x0112
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	60 e0       	ldi	r22, 0x00	; 0
    3158:	74 e2       	ldi	r23, 0x24	; 36
    315a:	84 ef       	ldi	r24, 0xF4	; 244
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	0e 94 ce 23 	call	0x479c	; 0x479c <__divmodsi4>
    3162:	ca 01       	movw	r24, r20
    3164:	b9 01       	movw	r22, r18
    3166:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    316a:	a8 01       	movw	r20, r16
    316c:	97 01       	movw	r18, r14
    316e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
    3172:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
	return Top;
}
    3176:	cb 01       	movw	r24, r22
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	08 95       	ret

00003182 <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    3182:	90 93 14 01 	sts	0x0114, r25
    3186:	80 93 13 01 	sts	0x0113, r24
	ICR1 = TOP;
    318a:	90 93 87 00 	sts	0x0087, r25
    318e:	80 93 86 00 	sts	0x0086, r24
}
    3192:	08 95       	ret

00003194 <_Z16select_prescalerf>:

word select_prescaler( float mHerz )
{
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	9b 01       	movw	r18, r22
    319e:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    31a0:	60 e0       	ldi	r22, 0x00	; 0
    31a2:	74 e2       	ldi	r23, 0x24	; 36
    31a4:	84 e7       	ldi	r24, 0x74	; 116
    31a6:	9b e4       	ldi	r25, 0x4B	; 75
    31a8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
    31ac:	8b 01       	movw	r16, r22
    31ae:	d8 2f       	mov	r29, r24
    31b0:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    31b2:	9e 01       	movw	r18, r28
    31b4:	71 2f       	mov	r23, r17
    31b6:	83 2f       	mov	r24, r19
    31b8:	92 2f       	mov	r25, r18
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	3f ef       	ldi	r19, 0xFF	; 255
    31be:	4f e7       	ldi	r20, 0x7F	; 127
    31c0:	57 e4       	ldi	r21, 0x47	; 71
    31c2:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
    31c6:	18 16       	cp	r1, r24
    31c8:	0c f0       	brlt	.+2      	; 0x31cc <_Z16select_prescalerf+0x38>
    31ca:	41 c0       	rjmp	.+130    	; 0x324e <_Z16select_prescalerf+0xba>
    31cc:	9e 01       	movw	r18, r28
    31ce:	60 2f       	mov	r22, r16
    31d0:	71 2f       	mov	r23, r17
    31d2:	83 2f       	mov	r24, r19
    31d4:	92 2f       	mov	r25, r18
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	5e e3       	ldi	r21, 0x3E	; 62
    31de:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	3f ef       	ldi	r19, 0xFF	; 255
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	57 e4       	ldi	r21, 0x47	; 71
    31ea:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
    31ee:	18 16       	cp	r1, r24
    31f0:	b4 f5       	brge	.+108    	; 0x325e <_Z16select_prescalerf+0xca>
    31f2:	9e 01       	movw	r18, r28
    31f4:	60 2f       	mov	r22, r16
    31f6:	71 2f       	mov	r23, r17
    31f8:	83 2f       	mov	r24, r19
    31fa:	92 2f       	mov	r25, r18
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5c e3       	ldi	r21, 0x3C	; 60
    3204:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	4f e7       	ldi	r20, 0x7F	; 127
    320e:	57 e4       	ldi	r21, 0x47	; 71
    3210:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
    3214:	18 16       	cp	r1, r24
    3216:	4c f5       	brge	.+82     	; 0x326a <_Z16select_prescalerf+0xd6>
    3218:	9e 01       	movw	r18, r28
    321a:	60 2f       	mov	r22, r16
    321c:	71 2f       	mov	r23, r17
    321e:	83 2f       	mov	r24, r19
    3220:	92 2f       	mov	r25, r18
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5b e3       	ldi	r21, 0x3B	; 59
    322a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	3f ef       	ldi	r19, 0xFF	; 255
    3232:	4f e7       	ldi	r20, 0x7F	; 127
    3234:	57 e4       	ldi	r21, 0x47	; 71
    3236:	0e 94 04 20 	call	0x4008	; 0x4008 <__gtsf2>
    323a:	18 16       	cp	r1, r24
    323c:	9c f4       	brge	.+38     	; 0x3264 <_Z16select_prescalerf+0xd0>
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    3242:	c9 01       	movw	r24, r18
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	08 95       	ret
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    324e:	21 e0       	ldi	r18, 0x01	; 1
    3250:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    3252:	c9 01       	movw	r24, r18
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	08 95       	ret
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    325e:	28 e0       	ldi	r18, 0x08	; 8
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	ef cf       	rjmp	.-34     	; 0x3242 <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	31 e0       	ldi	r19, 0x01	; 1
    3268:	ec cf       	rjmp	.-40     	; 0x3242 <_Z16select_prescalerf+0xae>
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    326a:	20 e4       	ldi	r18, 0x40	; 64
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	e9 cf       	rjmp	.-46     	; 0x3242 <_Z16select_prescalerf+0xae>

00003270 <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    3270:	80 34       	cpi	r24, 0x40	; 64
    3272:	91 05       	cpc	r25, r1
    3274:	d9 f0       	breq	.+54     	; 0x32ac <_Z20get_tccr1b_prescalert+0x3c>
    3276:	81 34       	cpi	r24, 0x41	; 65
    3278:	91 05       	cpc	r25, r1
    327a:	50 f0       	brcs	.+20     	; 0x3290 <_Z20get_tccr1b_prescalert+0x20>
    327c:	21 e0       	ldi	r18, 0x01	; 1
    327e:	80 30       	cpi	r24, 0x00	; 0
    3280:	92 07       	cpc	r25, r18
    3282:	81 f0       	breq	.+32     	; 0x32a4 <_Z20get_tccr1b_prescalert+0x34>
    3284:	24 e0       	ldi	r18, 0x04	; 4
    3286:	80 30       	cpi	r24, 0x00	; 0
    3288:	92 07       	cpc	r25, r18
    328a:	51 f0       	breq	.+20     	; 0x32a0 <_Z20get_tccr1b_prescalert+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    328c:	8f ef       	ldi	r24, 0xFF	; 255
    328e:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    3290:	81 30       	cpi	r24, 0x01	; 1
    3292:	91 05       	cpc	r25, r1
    3294:	49 f0       	breq	.+18     	; 0x32a8 <_Z20get_tccr1b_prescalert+0x38>
    3296:	88 30       	cpi	r24, 0x08	; 8
    3298:	91 05       	cpc	r25, r1
    329a:	c1 f7       	brne	.-16     	; 0x328c <_Z20get_tccr1b_prescalert+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    329c:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    329e:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    32a0:	85 e0       	ldi	r24, 0x05	; 5
    32a2:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    32a4:	84 e0       	ldi	r24, 0x04	; 4
    32a6:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    32ac:	83 e0       	ldi	r24, 0x03	; 3
    32ae:	08 95       	ret

000032b0 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    32b0:	ef 92       	push	r14
    32b2:	ff 92       	push	r15
    32b4:	0f 93       	push	r16
    32b6:	1f 93       	push	r17
    32b8:	7b 01       	movw	r14, r22
    32ba:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    32bc:	20 91 12 01 	lds	r18, 0x0112
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	74 e2       	ldi	r23, 0x24	; 36
    32ca:	84 ef       	ldi	r24, 0xF4	; 244
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 ce 23 	call	0x479c	; 0x479c <__divmodsi4>
    32d2:	ca 01       	movw	r24, r20
    32d4:	b9 01       	movw	r22, r18
    32d6:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    32da:	a8 01       	movw	r20, r16
    32dc:	97 01       	movw	r18, r14
    32de:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
    32e2:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    32e6:	70 93 14 01 	sts	0x0114, r23
    32ea:	60 93 13 01 	sts	0x0113, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    32ee:	70 93 87 00 	sts	0x0087, r23
    32f2:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    32f6:	1f 91       	pop	r17
    32f8:	0f 91       	pop	r16
    32fa:	ff 90       	pop	r15
    32fc:	ef 90       	pop	r14
    32fe:	08 95       	ret

00003300 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	7b 01       	movw	r14, r22
    330e:	8c 01       	movw	r16, r24
    3310:	c4 2f       	mov	r28, r20
    3312:	d2 2f       	mov	r29, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    3314:	41 11       	cpse	r20, r1
    3316:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    3318:	d1 11       	cpse	r29, r1
    331a:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    331c:	80 91 64 00 	lds	r24, 0x0064
    3320:	87 7e       	andi	r24, 0xE7	; 231
    3322:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    3326:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    3328:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    332a:	10 92 89 00 	sts	0x0089, r1
    332e:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    3332:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    3334:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    3336:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3338:	10 92 8b 00 	sts	0x008B, r1
    333c:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    3340:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    3342:	20 91 12 01 	lds	r18, 0x0112
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	74 e2       	ldi	r23, 0x24	; 36
    3350:	84 ef       	ldi	r24, 0xF4	; 244
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 ce 23 	call	0x479c	; 0x479c <__divmodsi4>
    3358:	ca 01       	movw	r24, r20
    335a:	b9 01       	movw	r22, r18
    335c:	0e 94 94 20 	call	0x4128	; 0x4128 <__floatsisf>
    3360:	a8 01       	movw	r20, r16
    3362:	97 01       	movw	r18, r14
    3364:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divsf3>
    3368:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    336c:	70 93 14 01 	sts	0x0114, r23
    3370:	60 93 13 01 	sts	0x0113, r22
	ICR1 = TOP;
    3374:	70 93 87 00 	sts	0x0087, r23
    3378:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    337c:	cc 23       	and	r28, r28
    337e:	c1 f4       	brne	.+48     	; 0x33b0 <_Z8pwm_initfhh+0xb0>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    3380:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    3382:	d1 11       	cpse	r29, r1
    3384:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    3386:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    338a:	c8 01       	movw	r24, r16
    338c:	b7 01       	movw	r22, r14
    338e:	0e 94 ca 18 	call	0x3194	; 0x3194 <_Z16select_prescalerf>
    3392:	80 93 12 01 	sts	0x0112, r24
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e 94 38 19 	call	0x3270	; 0x3270 <_Z20get_tccr1b_prescalert>
    339c:	88 61       	ori	r24, 0x18	; 24
    339e:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	0f 91       	pop	r16
    33aa:	ff 90       	pop	r15
    33ac:	ef 90       	pop	r14
    33ae:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    33b0:	82 e8       	ldi	r24, 0x82	; 130
    33b2:	e7 cf       	rjmp	.-50     	; 0x3382 <_Z8pwm_initfhh+0x82>

000033b4 <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    33b4:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    33b8:	29 2f       	mov	r18, r25
    33ba:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    33bc:	88 23       	and	r24, r24
    33be:	21 f4       	brne	.+8      	; 0x33c8 <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    33c0:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    33c2:	90 93 80 00 	sts	0x0080, r25
}
    33c6:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    33c8:	92 2f       	mov	r25, r18
    33ca:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    33cc:	90 93 80 00 	sts	0x0080, r25
}
    33d0:	08 95       	ret

000033d2 <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    33d2:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    33d6:	29 2f       	mov	r18, r25
    33d8:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    33da:	88 23       	and	r24, r24
    33dc:	21 f4       	brne	.+8      	; 0x33e6 <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    33de:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    33e0:	90 93 80 00 	sts	0x0080, r25
}
    33e4:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    33e6:	92 2f       	mov	r25, r18
    33e8:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    33ea:	90 93 80 00 	sts	0x0080, r25
}
    33ee:	08 95       	ret

000033f0 <_Z9set_dutyAf>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_dutyA( float mDuty )
{
    33f0:	ef 92       	push	r14
    33f2:	ff 92       	push	r15
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	7b 01       	movw	r14, r22
    33fa:	8c 01       	movw	r16, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	a9 01       	movw	r20, r18
    3402:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__ltsf2>
    3406:	87 ff       	sbrs	r24, 7
    3408:	04 c0       	rjmp	.+8      	; 0x3412 <_Z9set_dutyAf+0x22>
    340a:	17 fb       	bst	r17, 7
    340c:	10 95       	com	r17
    340e:	17 f9       	bld	r17, 7
    3410:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    3412:	60 91 13 01 	lds	r22, 0x0113
    3416:	70 91 14 01 	lds	r23, 0x0114
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    3422:	a8 01       	movw	r20, r16
    3424:	97 01       	movw	r18, r14
    3426:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    342a:	0e 94 42 24 	call	0x4884	; 0x4884 <ceil>
    342e:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    3432:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    3434:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    3436:	70 93 89 00 	sts	0x0089, r23
    343a:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    343e:	8f bf       	out	0x3f, r24	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive.
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	ff 90       	pop	r15
    3446:	ef 90       	pop	r14
    3448:	08 95       	ret

0000344a <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    344a:	ef 92       	push	r14
    344c:	ff 92       	push	r15
    344e:	0f 93       	push	r16
    3450:	1f 93       	push	r17
    3452:	7b 01       	movw	r14, r22
    3454:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	a9 01       	movw	r20, r18
    345c:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__ltsf2>
    3460:	87 ff       	sbrs	r24, 7
    3462:	04 c0       	rjmp	.+8      	; 0x346c <_Z9set_dutyBf+0x22>
    3464:	17 fb       	bst	r17, 7
    3466:	10 95       	com	r17
    3468:	17 f9       	bld	r17, 7
    346a:	10 95       	com	r17
	word counts = ceil( (float)TOP * mDuty );
    346c:	60 91 13 01 	lds	r22, 0x0113
    3470:	70 91 14 01 	lds	r23, 0x0114
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 46 21 	call	0x428c	; 0x428c <__floatunsisf>
    347c:	a8 01       	movw	r20, r16
    347e:	97 01       	movw	r18, r14
    3480:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__mulsf3>
    3484:	0e 94 42 24 	call	0x4884	; 0x4884 <ceil>
    3488:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    348c:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    348e:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3490:	70 93 8b 00 	sts	0x008B, r23
    3494:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    3498:	8f bf       	out	0x3f, r24	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	ff 90       	pop	r15
    34a0:	ef 90       	pop	r14
    34a2:	08 95       	ret

000034a4 <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    34a4:	9b 01       	movw	r18, r22
    34a6:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    34a8:	10 92 32 03 	sts	0x0332, r1
    34ac:	10 92 33 03 	sts	0x0333, r1
    34b0:	10 92 34 03 	sts	0x0334, r1
    34b4:	10 92 35 03 	sts	0x0335, r1
    34b8:	80 91 32 03 	lds	r24, 0x0332
    34bc:	90 91 33 03 	lds	r25, 0x0333
    34c0:	a0 91 34 03 	lds	r26, 0x0334
    34c4:	b0 91 35 03 	lds	r27, 0x0335
    34c8:	82 17       	cp	r24, r18
    34ca:	93 07       	cpc	r25, r19
    34cc:	a4 07       	cpc	r26, r20
    34ce:	b5 07       	cpc	r27, r21
    34d0:	04 f5       	brge	.+64     	; 0x3512 <_Z5delayl+0x6e>
    34d2:	80 91 32 03 	lds	r24, 0x0332
    34d6:	90 91 33 03 	lds	r25, 0x0333
    34da:	a0 91 34 03 	lds	r26, 0x0334
    34de:	b0 91 35 03 	lds	r27, 0x0335
    34e2:	01 96       	adiw	r24, 0x01	; 1
    34e4:	a1 1d       	adc	r26, r1
    34e6:	b1 1d       	adc	r27, r1
    34e8:	80 93 32 03 	sts	0x0332, r24
    34ec:	90 93 33 03 	sts	0x0333, r25
    34f0:	a0 93 34 03 	sts	0x0334, r26
    34f4:	b0 93 35 03 	sts	0x0335, r27
    34f8:	80 91 32 03 	lds	r24, 0x0332
    34fc:	90 91 33 03 	lds	r25, 0x0333
    3500:	a0 91 34 03 	lds	r26, 0x0334
    3504:	b0 91 35 03 	lds	r27, 0x0335
    3508:	82 17       	cp	r24, r18
    350a:	93 07       	cpc	r25, r19
    350c:	a4 07       	cpc	r26, r20
    350e:	b5 07       	cpc	r27, r21
    3510:	04 f3       	brlt	.-64     	; 0x34d2 <_Z5delayl+0x2e>
    3512:	08 95       	ret

00003514 <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    3518:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    351a:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    351c:	8e ef       	ldi	r24, 0xFE	; 254
    351e:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    3520:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    3522:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    3524:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    3526:	10 92 64 00 	sts	0x0064, r1
}
    352a:	08 95       	ret

0000352c <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    352c:	82 e0       	ldi	r24, 0x02	; 2
    352e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    3530:	93 e0       	ldi	r25, 0x03	; 3
    3532:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    3534:	9a ef       	ldi	r25, 0xFA	; 250
    3536:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    3538:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    353c:	10 92 39 03 	sts	0x0339, r1
    3540:	10 92 38 03 	sts	0x0338, r1
	/******************* PERIPHERAL INIT ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    3544:	08 95       	ret

00003546 <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	80 93 3c 03 	sts	0x033C, r24
}
    354c:	08 95       	ret

0000354e <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    354e:	10 92 3c 03 	sts	0x033C, r1
}
    3552:	08 95       	ret

00003554 <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    3554:	20 91 38 03 	lds	r18, 0x0338
    3558:	30 91 39 03 	lds	r19, 0x0339
    355c:	c9 01       	movw	r24, r18
    355e:	65 e0       	ldi	r22, 0x05	; 5
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	39 f4       	brne	.+14     	; 0x3578 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    356a:	c9 01       	movw	r24, r18
    356c:	6a e0       	ldi	r22, 0x0A	; 10
    356e:	70 e0       	ldi	r23, 0x00	; 0
    3570:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	09 f0       	breq	.+2      	; 0x357a <_Z15System_Dispatchv+0x26>
    3578:	08 95       	ret
		{
			can_instance_timeslice();
    357a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    357e:	80 91 38 03 	lds	r24, 0x0338
    3582:	90 91 39 03 	lds	r25, 0x0339
    3586:	64 e1       	ldi	r22, 0x14	; 20
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	99 f7       	brne	.-26     	; 0x3578 <_Z15System_Dispatchv+0x24>
			{
				can_board_timeslice();
    3592:	0e 94 01 15 	call	0x2a02	; 0x2a02 <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    3596:	80 91 38 03 	lds	r24, 0x0338
    359a:	90 91 39 03 	lds	r25, 0x0339
    359e:	62 e3       	ldi	r22, 0x32	; 50
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	0e 94 bb 23 	call	0x4776	; 0x4776 <__divmodhi4>
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	39 f7       	brne	.-50     	; 0x3578 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    35aa:	0e 94 62 18 	call	0x30c4	; 0x30c4 <_Z19led_timeslice_100msv>
    35ae:	08 95       	ret

000035b0 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    35b0:	1f 92       	push	r1
    35b2:	0f 92       	push	r0
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	0f 92       	push	r0
    35b8:	11 24       	eor	r1, r1
    35ba:	2f 93       	push	r18
    35bc:	3f 93       	push	r19
    35be:	4f 93       	push	r20
    35c0:	5f 93       	push	r21
    35c2:	6f 93       	push	r22
    35c4:	7f 93       	push	r23
    35c6:	8f 93       	push	r24
    35c8:	9f 93       	push	r25
    35ca:	af 93       	push	r26
    35cc:	bf 93       	push	r27
    35ce:	ef 93       	push	r30
    35d0:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    35d2:	80 91 3d 03 	lds	r24, 0x033D
    35d6:	88 23       	and	r24, r24
    35d8:	41 f1       	breq	.+80     	; 0x362a <__vector_15+0x7a>
    35da:	10 92 3d 03 	sts	0x033D, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    35de:	80 91 3c 03 	lds	r24, 0x033C
    35e2:	88 23       	and	r24, r24
    35e4:	49 f1       	breq	.+82     	; 0x3638 <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    35e6:	80 91 36 03 	lds	r24, 0x0336
    35ea:	90 91 37 03 	lds	r25, 0x0337
    35ee:	9c 01       	movw	r18, r24
    35f0:	2f 5f       	subi	r18, 0xFF	; 255
    35f2:	3f 4f       	sbci	r19, 0xFF	; 255
    35f4:	30 93 37 03 	sts	0x0337, r19
    35f8:	20 93 36 03 	sts	0x0336, r18
    35fc:	6a e0       	ldi	r22, 0x0A	; 10
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	0e 94 a7 23 	call	0x474e	; 0x474e <__udivmodhi4>
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	31 f1       	breq	.+76     	; 0x3654 <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    3608:	ff 91       	pop	r31
    360a:	ef 91       	pop	r30
    360c:	bf 91       	pop	r27
    360e:	af 91       	pop	r26
    3610:	9f 91       	pop	r25
    3612:	8f 91       	pop	r24
    3614:	7f 91       	pop	r23
    3616:	6f 91       	pop	r22
    3618:	5f 91       	pop	r21
    361a:	4f 91       	pop	r20
    361c:	3f 91       	pop	r19
    361e:	2f 91       	pop	r18
    3620:	0f 90       	pop	r0
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	0f 90       	pop	r0
    3626:	1f 90       	pop	r1
    3628:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	80 93 3d 03 	sts	0x033D, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    3630:	80 91 3c 03 	lds	r24, 0x033C
    3634:	88 23       	and	r24, r24
    3636:	b9 f6       	brne	.-82     	; 0x35e6 <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    3638:	80 91 38 03 	lds	r24, 0x0338
    363c:	90 91 39 03 	lds	r25, 0x0339
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	90 93 39 03 	sts	0x0339, r25
    3646:	80 93 38 03 	sts	0x0338, r24
		System_Dispatch();
    364a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_Z15System_Dispatchv>
		OS_Dispatch();
    364e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_Z11OS_Dispatchv>
    3652:	da cf       	rjmp	.-76     	; 0x3608 <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    3654:	10 92 37 03 	sts	0x0337, r1
    3658:	10 92 36 03 	sts	0x0336, r1
			OS_Event_TIC_Counter++;
    365c:	80 91 38 03 	lds	r24, 0x0338
    3660:	90 91 39 03 	lds	r25, 0x0339
    3664:	01 96       	adiw	r24, 0x01	; 1
    3666:	90 93 39 03 	sts	0x0339, r25
    366a:	80 93 38 03 	sts	0x0338, r24
			OS_Dispatch();
    366e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_Z11OS_Dispatchv>
    3672:	ca cf       	rjmp	.-108    	; 0x3608 <__vector_15+0x58>

00003674 <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    3678:	93 e0       	ldi	r25, 0x03	; 3
    367a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    367c:	9a ef       	ldi	r25, 0xFA	; 250
    367e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    3680:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    3684:	10 92 39 03 	sts	0x0339, r1
    3688:	10 92 38 03 	sts	0x0338, r1
}
    368c:	08 95       	ret

0000368e <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    368e:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    3690:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    3692:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    3694:	85 81       	ldd	r24, Z+5	; 0x05
    3696:	82 30       	cpi	r24, 0x02	; 2
    3698:	d9 f0       	breq	.+54     	; 0x36d0 <_Z27can_parse_configure_requestP4sCAN+0x42>
    369a:	83 30       	cpi	r24, 0x03	; 3
    369c:	71 f0       	breq	.+28     	; 0x36ba <_Z27can_parse_configure_requestP4sCAN+0x2c>
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <_Z27can_parse_configure_requestP4sCAN+0x16>
    36a2:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    36a4:	89 2f       	mov	r24, r25
    36a6:	80 95       	com	r24
    36a8:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    36aa:	92 23       	and	r25, r18
    36ac:	20 91 3e 03 	lds	r18, 0x033E
    36b0:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    36b2:	89 23       	and	r24, r25
    36b4:	80 93 3e 03 	sts	0x033E, r24
				 break;
    36b8:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    36ba:	89 2f       	mov	r24, r25
    36bc:	80 95       	com	r24
    36be:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    36c0:	92 23       	and	r25, r18
    36c2:	20 91 40 03 	lds	r18, 0x0340
    36c6:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    36c8:	89 23       	and	r24, r25
    36ca:	80 93 40 03 	sts	0x0340, r24
    36ce:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    36d0:	89 2f       	mov	r24, r25
    36d2:	80 95       	com	r24
    36d4:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    36d6:	92 23       	and	r25, r18
    36d8:	20 91 3f 03 	lds	r18, 0x033F
    36dc:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    36de:	89 23       	and	r24, r25
    36e0:	80 93 3f 03 	sts	0x033F, r24
				 break;
    36e4:	08 95       	ret

000036e6 <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    36e6:	10 92 3e 03 	sts	0x033E, r1
	config_byte_2 = 0;		// no reports
    36ea:	10 92 3f 03 	sts	0x033F, r1
	config_byte_3 = 0;		// 
    36ee:	10 92 40 03 	sts	0x0340, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    36f2:	82 e4       	ldi	r24, 0x42	; 66
    36f4:	80 93 41 03 	sts	0x0341, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    36f8:	10 92 c3 02 	sts	0x02C3, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    36fc:	80 91 42 03 	lds	r24, 0x0342
    3700:	81 60       	ori	r24, 0x01	; 1
    3702:	80 93 42 03 	sts	0x0342, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    3706:	10 92 c2 02 	sts	0x02C2, r1
	MyInstance 		 = 0x98;
    370a:	88 e9       	ldi	r24, 0x98	; 152
    370c:	80 93 c1 02 	sts	0x02C1, r24
}
    3710:	08 95       	ret

00003712 <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    3712:	80 91 42 03 	lds	r24, 0x0342
							// b/c BigMotorEn board already does and we should have a consistent interface.
							// and b/c it's better the user knows when it's read.

	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    3716:	80 fd       	sbrc	r24, 0
    3718:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    371a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    371e:	0e 94 2a 06 	call	0xc54	; 0xc54 <_Z25app_default_configurationv>
    3722:	08 95       	ret

00003724 <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    3724:	20 91 c1 02 	lds	r18, 0x02C1
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3728:	f9 99       	sbic	0x1f, 1	; 31
    372a:	fe cf       	rjmp	.-4      	; 0x3728 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    372c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    372e:	92 bd       	out	0x22, r25	; 34
    3730:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3732:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	fa 9a       	sbi	0x1f, 2	; 31
    373a:	f9 9a       	sbi	0x1f, 1	; 31
    373c:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    373e:	9c 01       	movw	r18, r24
    3740:	2f 5f       	subi	r18, 0xFF	; 255
    3742:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3744:	c9 01       	movw	r24, r18
    3746:	08 95       	ret

00003748 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3748:	f9 99       	sbic	0x1f, 1	; 31
    374a:	fe cf       	rjmp	.-4      	; 0x3748 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    374c:	92 bd       	out	0x22, r25	; 34
    374e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3750:	f8 9a       	sbi	0x1f, 0	; 31
    3752:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    3754:	20 93 c1 02 	sts	0x02C1, r18
    return mEEPROMAddress+1;    
    3758:	9c 01       	movw	r18, r24
    375a:	2f 5f       	subi	r18, 0xFF	; 255
    375c:	3f 4f       	sbci	r19, 0xFF	; 255
}
    375e:	c9 01       	movw	r24, r18
    3760:	08 95       	ret

00003762 <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    3762:	20 91 c2 02 	lds	r18, 0x02C2
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3766:	f9 99       	sbic	0x1f, 1	; 31
    3768:	fe cf       	rjmp	.-4      	; 0x3766 <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    376a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    376c:	92 bd       	out	0x22, r25	; 34
    376e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3770:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	fa 9a       	sbi	0x1f, 2	; 31
    3778:	f9 9a       	sbi	0x1f, 1	; 31
    377a:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    377c:	9c 01       	movw	r18, r24
    377e:	2f 5f       	subi	r18, 0xFF	; 255
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3782:	c9 01       	movw	r24, r18
    3784:	08 95       	ret

00003786 <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3786:	f9 99       	sbic	0x1f, 1	; 31
    3788:	fe cf       	rjmp	.-4      	; 0x3786 <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    378a:	92 bd       	out	0x22, r25	; 34
    378c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    378e:	f8 9a       	sbi	0x1f, 0	; 31
    3790:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    3792:	20 93 c2 02 	sts	0x02C2, r18
    return mEEPROMAddress+1;
    3796:	9c 01       	movw	r18, r24
    3798:	2f 5f       	subi	r18, 0xFF	; 255
    379a:	3f 4f       	sbci	r19, 0xFF	; 255
}
    379c:	c9 01       	movw	r24, r18
    379e:	08 95       	ret

000037a0 <_Z25save_configuration_eepromPh>:
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	eeprom_write_byte( addr++, ~config_byte_1 );
    37a0:	9c 01       	movw	r18, r24
    37a2:	2f 5f       	subi	r18, 0xFF	; 255
    37a4:	3f 4f       	sbci	r19, 0xFF	; 255
    37a6:	40 91 3e 03 	lds	r20, 0x033E
    37aa:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    37ac:	f9 99       	sbic	0x1f, 1	; 31
    37ae:	fe cf       	rjmp	.-4      	; 0x37ac <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    37b0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    37b2:	92 bd       	out	0x22, r25	; 34
    37b4:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    37b6:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	fa 9a       	sbi	0x1f, 2	; 31
    37be:	f9 9a       	sbi	0x1f, 1	; 31
    37c0:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    37c2:	c9 01       	movw	r24, r18
    37c4:	01 96       	adiw	r24, 0x01	; 1
    37c6:	40 91 3f 03 	lds	r20, 0x033F
    37ca:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    37cc:	f9 99       	sbic	0x1f, 1	; 31
    37ce:	fe cf       	rjmp	.-4      	; 0x37cc <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    37d0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    37d2:	32 bd       	out	0x22, r19	; 34
    37d4:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    37d6:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	fa 9a       	sbi	0x1f, 2	; 31
    37de:	f9 9a       	sbi	0x1f, 1	; 31
    37e0:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    37e2:	9c 01       	movw	r18, r24
    37e4:	2f 5f       	subi	r18, 0xFF	; 255
    37e6:	3f 4f       	sbci	r19, 0xFF	; 255
    37e8:	40 91 40 03 	lds	r20, 0x0340
    37ec:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    37ee:	f9 99       	sbic	0x1f, 1	; 31
    37f0:	fe cf       	rjmp	.-4      	; 0x37ee <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    37f2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    37f4:	92 bd       	out	0x22, r25	; 34
    37f6:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    37f8:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	fa 9a       	sbi	0x1f, 2	; 31
    3800:	f9 9a       	sbi	0x1f, 1	; 31
    3802:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    3804:	c9 01       	movw	r24, r18
    3806:	01 96       	adiw	r24, 0x01	; 1
    3808:	40 91 41 03 	lds	r20, 0x0341
    380c:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    380e:	f9 99       	sbic	0x1f, 1	; 31
    3810:	fe cf       	rjmp	.-4      	; 0x380e <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3812:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3814:	32 bd       	out	0x22, r19	; 34
    3816:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    3818:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	fa 9a       	sbi	0x1f, 2	; 31
    3820:	f9 9a       	sbi	0x1f, 1	; 31
    3822:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    3824:	9c 01       	movw	r18, r24
    3826:	2f 5f       	subi	r18, 0xFF	; 255
    3828:	3f 4f       	sbci	r19, 0xFF	; 255
    382a:	40 91 42 03 	lds	r20, 0x0342
    382e:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3830:	f9 99       	sbic	0x1f, 1	; 31
    3832:	fe cf       	rjmp	.-4      	; 0x3830 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3834:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3836:	92 bd       	out	0x22, r25	; 34
    3838:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    383a:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    383c:	0f b6       	in	r0, 0x3f	; 63
    383e:	f8 94       	cli
    3840:	fa 9a       	sbi	0x1f, 2	; 31
    3842:	f9 9a       	sbi	0x1f, 1	; 31
    3844:	0f be       	out	0x3f, r0	; 63
	return addr;
}
    3846:	c9 01       	movw	r24, r18
    3848:	08 95       	ret

0000384a <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	0e 94 92 1b 	call	0x3724	; 0x3724 <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    3852:	0e 94 b1 1b 	call	0x3762	; 0x3762 <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    3856:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_Z25save_configuration_eepromPh>
}
    385a:	08 95       	ret

0000385c <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    385c:	f8 94       	cli
	return save_configuration();
    385e:	0e 94 25 1c 	call	0x384a	; 0x384a <_Z18save_configurationv>
	sei();
}
    3862:	08 95       	ret

00003864 <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    3864:	22 e1       	ldi	r18, 0x12	; 18
    3866:	84 33       	cpi	r24, 0x34	; 52
    3868:	92 07       	cpc	r25, r18
    386a:	11 f0       	breq	.+4      	; 0x3870 <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    386c:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    386e:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    3870:	80 91 42 03 	lds	r24, 0x0342
    3874:	8e 7f       	andi	r24, 0xFE	; 254
    3876:	80 93 42 03 	sts	0x0342, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    387a:	f8 94       	cli
    387c:	0e 94 25 1c 	call	0x384a	; 0x384a <_Z18save_configurationv>
    3880:	78 94       	sei
		retval = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	08 95       	ret

00003886 <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    3886:	9c 01       	movw	r18, r24
    3888:	2f 5f       	subi	r18, 0xFF	; 255
    388a:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    388c:	f9 99       	sbic	0x1f, 1	; 31
    388e:	fe cf       	rjmp	.-4      	; 0x388c <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3890:	92 bd       	out	0x22, r25	; 34
    3892:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3894:	f8 9a       	sbi	0x1f, 0	; 31
    3896:	80 b5       	in	r24, 0x20	; 32
    3898:	80 95       	com	r24
    389a:	80 93 3e 03 	sts	0x033E, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    389e:	c9 01       	movw	r24, r18
    38a0:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38a2:	f9 99       	sbic	0x1f, 1	; 31
    38a4:	fe cf       	rjmp	.-4      	; 0x38a2 <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38a6:	32 bd       	out	0x22, r19	; 34
    38a8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38aa:	f8 9a       	sbi	0x1f, 0	; 31
    38ac:	20 b5       	in	r18, 0x20	; 32
    38ae:	20 95       	com	r18
    38b0:	20 93 3f 03 	sts	0x033F, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    38b4:	9c 01       	movw	r18, r24
    38b6:	2f 5f       	subi	r18, 0xFF	; 255
    38b8:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38ba:	f9 99       	sbic	0x1f, 1	; 31
    38bc:	fe cf       	rjmp	.-4      	; 0x38ba <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38be:	92 bd       	out	0x22, r25	; 34
    38c0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38c2:	f8 9a       	sbi	0x1f, 0	; 31
    38c4:	80 b5       	in	r24, 0x20	; 32
    38c6:	80 95       	com	r24
    38c8:	80 93 40 03 	sts	0x0340, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    38cc:	c9 01       	movw	r24, r18
    38ce:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38d0:	f9 99       	sbic	0x1f, 1	; 31
    38d2:	fe cf       	rjmp	.-4      	; 0x38d0 <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38d4:	32 bd       	out	0x22, r19	; 34
    38d6:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38d8:	f8 9a       	sbi	0x1f, 0	; 31
    38da:	20 b5       	in	r18, 0x20	; 32
    38dc:	20 95       	com	r18
    38de:	20 93 41 03 	sts	0x0341, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    38e2:	9c 01       	movw	r18, r24
    38e4:	2f 5f       	subi	r18, 0xFF	; 255
    38e6:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38e8:	f9 99       	sbic	0x1f, 1	; 31
    38ea:	fe cf       	rjmp	.-4      	; 0x38e8 <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38ec:	92 bd       	out	0x22, r25	; 34
    38ee:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38f0:	f8 9a       	sbi	0x1f, 0	; 31
    38f2:	80 b5       	in	r24, 0x20	; 32
    38f4:	80 95       	com	r24
    38f6:	80 93 42 03 	sts	0x0342, r24
	return addr;
}
    38fa:	c9 01       	movw	r24, r18
    38fc:	08 95       	ret

000038fe <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	0e 94 a4 1b 	call	0x3748	; 0x3748 <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    3906:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    390a:	0e 94 43 1c 	call	0x3886	; 0x3886 <_Z25read_configuration_eepromPh>
}
    390e:	08 95       	ret

00003910 <__fixunssfsi>:
    3910:	ef 92       	push	r14
    3912:	ff 92       	push	r15
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	7b 01       	movw	r14, r22
    391a:	8c 01       	movw	r16, r24
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	5f e4       	ldi	r21, 0x4F	; 79
    3924:	0e 94 34 20 	call	0x4068	; 0x4068 <__gesf2>
    3928:	87 fd       	sbrc	r24, 7
    392a:	11 c0       	rjmp	.+34     	; 0x394e <__fixunssfsi+0x3e>
    392c:	c8 01       	movw	r24, r16
    392e:	b7 01       	movw	r22, r14
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	5f e4       	ldi	r21, 0x4F	; 79
    3938:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__subsf3>
    393c:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__fixsfsi>
    3940:	9b 01       	movw	r18, r22
    3942:	ac 01       	movw	r20, r24
    3944:	20 50       	subi	r18, 0x00	; 0
    3946:	30 40       	sbci	r19, 0x00	; 0
    3948:	40 40       	sbci	r20, 0x00	; 0
    394a:	50 48       	sbci	r21, 0x80	; 128
    394c:	06 c0       	rjmp	.+12     	; 0x395a <__fixunssfsi+0x4a>
    394e:	c8 01       	movw	r24, r16
    3950:	b7 01       	movw	r22, r14
    3952:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__fixsfsi>
    3956:	9b 01       	movw	r18, r22
    3958:	ac 01       	movw	r20, r24
    395a:	b9 01       	movw	r22, r18
    395c:	ca 01       	movw	r24, r20
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	ff 90       	pop	r15
    3964:	ef 90       	pop	r14
    3966:	08 95       	ret

00003968 <_fpadd_parts>:
    3968:	a0 e0       	ldi	r26, 0x00	; 0
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	ea eb       	ldi	r30, 0xBA	; 186
    396e:	fc e1       	ldi	r31, 0x1C	; 28
    3970:	0c 94 0f 24 	jmp	0x481e	; 0x481e <__prologue_saves__+0x8>
    3974:	fc 01       	movw	r30, r24
    3976:	ea 01       	movw	r28, r20
    3978:	80 81       	ld	r24, Z
    397a:	82 30       	cpi	r24, 0x02	; 2
    397c:	08 f4       	brcc	.+2      	; 0x3980 <_fpadd_parts+0x18>
    397e:	38 c1       	rjmp	.+624    	; 0x3bf0 <_fpadd_parts+0x288>
    3980:	db 01       	movw	r26, r22
    3982:	9c 91       	ld	r25, X
    3984:	92 30       	cpi	r25, 0x02	; 2
    3986:	08 f4       	brcc	.+2      	; 0x398a <_fpadd_parts+0x22>
    3988:	30 c1       	rjmp	.+608    	; 0x3bea <_fpadd_parts+0x282>
    398a:	84 30       	cpi	r24, 0x04	; 4
    398c:	59 f4       	brne	.+22     	; 0x39a4 <_fpadd_parts+0x3c>
    398e:	94 30       	cpi	r25, 0x04	; 4
    3990:	09 f0       	breq	.+2      	; 0x3994 <_fpadd_parts+0x2c>
    3992:	2e c1       	rjmp	.+604    	; 0x3bf0 <_fpadd_parts+0x288>
    3994:	91 81       	ldd	r25, Z+1	; 0x01
    3996:	11 96       	adiw	r26, 0x01	; 1
    3998:	8c 91       	ld	r24, X
    399a:	11 97       	sbiw	r26, 0x01	; 1
    399c:	98 17       	cp	r25, r24
    399e:	09 f0       	breq	.+2      	; 0x39a2 <_fpadd_parts+0x3a>
    39a0:	21 c1       	rjmp	.+578    	; 0x3be4 <_fpadd_parts+0x27c>
    39a2:	26 c1       	rjmp	.+588    	; 0x3bf0 <_fpadd_parts+0x288>
    39a4:	94 30       	cpi	r25, 0x04	; 4
    39a6:	09 f4       	brne	.+2      	; 0x39aa <_fpadd_parts+0x42>
    39a8:	20 c1       	rjmp	.+576    	; 0x3bea <_fpadd_parts+0x282>
    39aa:	92 30       	cpi	r25, 0x02	; 2
    39ac:	b1 f4       	brne	.+44     	; 0x39da <_fpadd_parts+0x72>
    39ae:	82 30       	cpi	r24, 0x02	; 2
    39b0:	09 f0       	breq	.+2      	; 0x39b4 <_fpadd_parts+0x4c>
    39b2:	1e c1       	rjmp	.+572    	; 0x3bf0 <_fpadd_parts+0x288>
    39b4:	ca 01       	movw	r24, r20
    39b6:	af 01       	movw	r20, r30
    39b8:	28 e0       	ldi	r18, 0x08	; 8
    39ba:	da 01       	movw	r26, r20
    39bc:	0d 90       	ld	r0, X+
    39be:	ad 01       	movw	r20, r26
    39c0:	dc 01       	movw	r26, r24
    39c2:	0d 92       	st	X+, r0
    39c4:	cd 01       	movw	r24, r26
    39c6:	21 50       	subi	r18, 0x01	; 1
    39c8:	c1 f7       	brne	.-16     	; 0x39ba <_fpadd_parts+0x52>
    39ca:	db 01       	movw	r26, r22
    39cc:	11 96       	adiw	r26, 0x01	; 1
    39ce:	8c 91       	ld	r24, X
    39d0:	11 97       	sbiw	r26, 0x01	; 1
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	89 23       	and	r24, r25
    39d6:	89 83       	std	Y+1, r24	; 0x01
    39d8:	0a c1       	rjmp	.+532    	; 0x3bee <_fpadd_parts+0x286>
    39da:	82 30       	cpi	r24, 0x02	; 2
    39dc:	09 f4       	brne	.+2      	; 0x39e0 <_fpadd_parts+0x78>
    39de:	05 c1       	rjmp	.+522    	; 0x3bea <_fpadd_parts+0x282>
    39e0:	c2 80       	ldd	r12, Z+2	; 0x02
    39e2:	d3 80       	ldd	r13, Z+3	; 0x03
    39e4:	db 01       	movw	r26, r22
    39e6:	12 96       	adiw	r26, 0x02	; 2
    39e8:	6d 90       	ld	r6, X+
    39ea:	7c 90       	ld	r7, X
    39ec:	13 97       	sbiw	r26, 0x03	; 3
    39ee:	24 81       	ldd	r18, Z+4	; 0x04
    39f0:	35 81       	ldd	r19, Z+5	; 0x05
    39f2:	46 81       	ldd	r20, Z+6	; 0x06
    39f4:	57 81       	ldd	r21, Z+7	; 0x07
    39f6:	14 96       	adiw	r26, 0x04	; 4
    39f8:	ed 90       	ld	r14, X+
    39fa:	fd 90       	ld	r15, X+
    39fc:	0d 91       	ld	r16, X+
    39fe:	1c 91       	ld	r17, X
    3a00:	17 97       	sbiw	r26, 0x07	; 7
    3a02:	c6 01       	movw	r24, r12
    3a04:	86 19       	sub	r24, r6
    3a06:	97 09       	sbc	r25, r7
    3a08:	5c 01       	movw	r10, r24
    3a0a:	97 ff       	sbrs	r25, 7
    3a0c:	04 c0       	rjmp	.+8      	; 0x3a16 <_fpadd_parts+0xae>
    3a0e:	aa 24       	eor	r10, r10
    3a10:	bb 24       	eor	r11, r11
    3a12:	a8 1a       	sub	r10, r24
    3a14:	b9 0a       	sbc	r11, r25
    3a16:	b0 e2       	ldi	r27, 0x20	; 32
    3a18:	ab 16       	cp	r10, r27
    3a1a:	b1 04       	cpc	r11, r1
    3a1c:	0c f0       	brlt	.+2      	; 0x3a20 <_fpadd_parts+0xb8>
    3a1e:	61 c0       	rjmp	.+194    	; 0x3ae2 <_fpadd_parts+0x17a>
    3a20:	18 16       	cp	r1, r24
    3a22:	19 06       	cpc	r1, r25
    3a24:	6c f5       	brge	.+90     	; 0x3a80 <_fpadd_parts+0x118>
    3a26:	37 01       	movw	r6, r14
    3a28:	48 01       	movw	r8, r16
    3a2a:	0a 2c       	mov	r0, r10
    3a2c:	04 c0       	rjmp	.+8      	; 0x3a36 <_fpadd_parts+0xce>
    3a2e:	96 94       	lsr	r9
    3a30:	87 94       	ror	r8
    3a32:	77 94       	ror	r7
    3a34:	67 94       	ror	r6
    3a36:	0a 94       	dec	r0
    3a38:	d2 f7       	brpl	.-12     	; 0x3a2e <_fpadd_parts+0xc6>
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a0 e0       	ldi	r26, 0x00	; 0
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	0a 2c       	mov	r0, r10
    3a44:	04 c0       	rjmp	.+8      	; 0x3a4e <_fpadd_parts+0xe6>
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	aa 1f       	adc	r26, r26
    3a4c:	bb 1f       	adc	r27, r27
    3a4e:	0a 94       	dec	r0
    3a50:	d2 f7       	brpl	.-12     	; 0x3a46 <_fpadd_parts+0xde>
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	a1 09       	sbc	r26, r1
    3a56:	b1 09       	sbc	r27, r1
    3a58:	8e 21       	and	r24, r14
    3a5a:	9f 21       	and	r25, r15
    3a5c:	a0 23       	and	r26, r16
    3a5e:	b1 23       	and	r27, r17
    3a60:	ee 24       	eor	r14, r14
    3a62:	ff 24       	eor	r15, r15
    3a64:	87 01       	movw	r16, r14
    3a66:	e3 94       	inc	r14
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	a1 05       	cpc	r26, r1
    3a6c:	b1 05       	cpc	r27, r1
    3a6e:	19 f4       	brne	.+6      	; 0x3a76 <_fpadd_parts+0x10e>
    3a70:	ee 24       	eor	r14, r14
    3a72:	ff 24       	eor	r15, r15
    3a74:	87 01       	movw	r16, r14
    3a76:	e6 28       	or	r14, r6
    3a78:	f7 28       	or	r15, r7
    3a7a:	08 29       	or	r16, r8
    3a7c:	19 29       	or	r17, r9
    3a7e:	3c c0       	rjmp	.+120    	; 0x3af8 <_fpadd_parts+0x190>
    3a80:	00 97       	sbiw	r24, 0x00	; 0
    3a82:	d1 f1       	breq	.+116    	; 0x3af8 <_fpadd_parts+0x190>
    3a84:	ca 0c       	add	r12, r10
    3a86:	db 1c       	adc	r13, r11
    3a88:	39 01       	movw	r6, r18
    3a8a:	4a 01       	movw	r8, r20
    3a8c:	0a 2c       	mov	r0, r10
    3a8e:	04 c0       	rjmp	.+8      	; 0x3a98 <_fpadd_parts+0x130>
    3a90:	96 94       	lsr	r9
    3a92:	87 94       	ror	r8
    3a94:	77 94       	ror	r7
    3a96:	67 94       	ror	r6
    3a98:	0a 94       	dec	r0
    3a9a:	d2 f7       	brpl	.-12     	; 0x3a90 <_fpadd_parts+0x128>
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	a0 e0       	ldi	r26, 0x00	; 0
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	0a 2c       	mov	r0, r10
    3aa6:	04 c0       	rjmp	.+8      	; 0x3ab0 <_fpadd_parts+0x148>
    3aa8:	88 0f       	add	r24, r24
    3aaa:	99 1f       	adc	r25, r25
    3aac:	aa 1f       	adc	r26, r26
    3aae:	bb 1f       	adc	r27, r27
    3ab0:	0a 94       	dec	r0
    3ab2:	d2 f7       	brpl	.-12     	; 0x3aa8 <_fpadd_parts+0x140>
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	a1 09       	sbc	r26, r1
    3ab8:	b1 09       	sbc	r27, r1
    3aba:	82 23       	and	r24, r18
    3abc:	93 23       	and	r25, r19
    3abe:	a4 23       	and	r26, r20
    3ac0:	b5 23       	and	r27, r21
    3ac2:	21 e0       	ldi	r18, 0x01	; 1
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	40 e0       	ldi	r20, 0x00	; 0
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	00 97       	sbiw	r24, 0x00	; 0
    3acc:	a1 05       	cpc	r26, r1
    3ace:	b1 05       	cpc	r27, r1
    3ad0:	19 f4       	brne	.+6      	; 0x3ad8 <_fpadd_parts+0x170>
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	a9 01       	movw	r20, r18
    3ad8:	26 29       	or	r18, r6
    3ada:	37 29       	or	r19, r7
    3adc:	48 29       	or	r20, r8
    3ade:	59 29       	or	r21, r9
    3ae0:	0b c0       	rjmp	.+22     	; 0x3af8 <_fpadd_parts+0x190>
    3ae2:	6c 14       	cp	r6, r12
    3ae4:	7d 04       	cpc	r7, r13
    3ae6:	24 f4       	brge	.+8      	; 0x3af0 <_fpadd_parts+0x188>
    3ae8:	ee 24       	eor	r14, r14
    3aea:	ff 24       	eor	r15, r15
    3aec:	87 01       	movw	r16, r14
    3aee:	04 c0       	rjmp	.+8      	; 0x3af8 <_fpadd_parts+0x190>
    3af0:	63 01       	movw	r12, r6
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	a9 01       	movw	r20, r18
    3af8:	81 81       	ldd	r24, Z+1	; 0x01
    3afa:	fb 01       	movw	r30, r22
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	89 17       	cp	r24, r25
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <_fpadd_parts+0x19c>
    3b02:	45 c0       	rjmp	.+138    	; 0x3b8e <_fpadd_parts+0x226>
    3b04:	88 23       	and	r24, r24
    3b06:	49 f0       	breq	.+18     	; 0x3b1a <_fpadd_parts+0x1b2>
    3b08:	d8 01       	movw	r26, r16
    3b0a:	c7 01       	movw	r24, r14
    3b0c:	82 1b       	sub	r24, r18
    3b0e:	93 0b       	sbc	r25, r19
    3b10:	a4 0b       	sbc	r26, r20
    3b12:	b5 0b       	sbc	r27, r21
    3b14:	9c 01       	movw	r18, r24
    3b16:	ad 01       	movw	r20, r26
    3b18:	04 c0       	rjmp	.+8      	; 0x3b22 <_fpadd_parts+0x1ba>
    3b1a:	2e 19       	sub	r18, r14
    3b1c:	3f 09       	sbc	r19, r15
    3b1e:	40 0b       	sbc	r20, r16
    3b20:	51 0b       	sbc	r21, r17
    3b22:	57 fd       	sbrc	r21, 7
    3b24:	04 c0       	rjmp	.+8      	; 0x3b2e <_fpadd_parts+0x1c6>
    3b26:	19 82       	std	Y+1, r1	; 0x01
    3b28:	db 82       	std	Y+3, r13	; 0x03
    3b2a:	ca 82       	std	Y+2, r12	; 0x02
    3b2c:	0b c0       	rjmp	.+22     	; 0x3b44 <_fpadd_parts+0x1dc>
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	89 83       	std	Y+1, r24	; 0x01
    3b32:	db 82       	std	Y+3, r13	; 0x03
    3b34:	ca 82       	std	Y+2, r12	; 0x02
    3b36:	50 95       	com	r21
    3b38:	40 95       	com	r20
    3b3a:	30 95       	com	r19
    3b3c:	21 95       	neg	r18
    3b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b40:	4f 4f       	sbci	r20, 0xFF	; 255
    3b42:	5f 4f       	sbci	r21, 0xFF	; 255
    3b44:	2c 83       	std	Y+4, r18	; 0x04
    3b46:	3d 83       	std	Y+5, r19	; 0x05
    3b48:	4e 83       	std	Y+6, r20	; 0x06
    3b4a:	5f 83       	std	Y+7, r21	; 0x07
    3b4c:	0d c0       	rjmp	.+26     	; 0x3b68 <_fpadd_parts+0x200>
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	aa 1f       	adc	r26, r26
    3b54:	bb 1f       	adc	r27, r27
    3b56:	8c 83       	std	Y+4, r24	; 0x04
    3b58:	9d 83       	std	Y+5, r25	; 0x05
    3b5a:	ae 83       	std	Y+6, r26	; 0x06
    3b5c:	bf 83       	std	Y+7, r27	; 0x07
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	9b 81       	ldd	r25, Y+3	; 0x03
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	9b 83       	std	Y+3, r25	; 0x03
    3b66:	8a 83       	std	Y+2, r24	; 0x02
    3b68:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b6c:	ae 81       	ldd	r26, Y+6	; 0x06
    3b6e:	bf 81       	ldd	r27, Y+7	; 0x07
    3b70:	9c 01       	movw	r18, r24
    3b72:	ad 01       	movw	r20, r26
    3b74:	21 50       	subi	r18, 0x01	; 1
    3b76:	30 40       	sbci	r19, 0x00	; 0
    3b78:	40 40       	sbci	r20, 0x00	; 0
    3b7a:	50 40       	sbci	r21, 0x00	; 0
    3b7c:	2f 3f       	cpi	r18, 0xFF	; 255
    3b7e:	ef ef       	ldi	r30, 0xFF	; 255
    3b80:	3e 07       	cpc	r19, r30
    3b82:	ef ef       	ldi	r30, 0xFF	; 255
    3b84:	4e 07       	cpc	r20, r30
    3b86:	ef e3       	ldi	r30, 0x3F	; 63
    3b88:	5e 07       	cpc	r21, r30
    3b8a:	08 f3       	brcs	.-62     	; 0x3b4e <_fpadd_parts+0x1e6>
    3b8c:	0b c0       	rjmp	.+22     	; 0x3ba4 <_fpadd_parts+0x23c>
    3b8e:	89 83       	std	Y+1, r24	; 0x01
    3b90:	db 82       	std	Y+3, r13	; 0x03
    3b92:	ca 82       	std	Y+2, r12	; 0x02
    3b94:	2e 0d       	add	r18, r14
    3b96:	3f 1d       	adc	r19, r15
    3b98:	40 1f       	adc	r20, r16
    3b9a:	51 1f       	adc	r21, r17
    3b9c:	2c 83       	std	Y+4, r18	; 0x04
    3b9e:	3d 83       	std	Y+5, r19	; 0x05
    3ba0:	4e 83       	std	Y+6, r20	; 0x06
    3ba2:	5f 83       	std	Y+7, r21	; 0x07
    3ba4:	83 e0       	ldi	r24, 0x03	; 3
    3ba6:	88 83       	st	Y, r24
    3ba8:	2c 81       	ldd	r18, Y+4	; 0x04
    3baa:	3d 81       	ldd	r19, Y+5	; 0x05
    3bac:	4e 81       	ldd	r20, Y+6	; 0x06
    3bae:	5f 81       	ldd	r21, Y+7	; 0x07
    3bb0:	57 ff       	sbrs	r21, 7
    3bb2:	1d c0       	rjmp	.+58     	; 0x3bee <_fpadd_parts+0x286>
    3bb4:	da 01       	movw	r26, r20
    3bb6:	c9 01       	movw	r24, r18
    3bb8:	81 70       	andi	r24, 0x01	; 1
    3bba:	90 70       	andi	r25, 0x00	; 0
    3bbc:	a0 70       	andi	r26, 0x00	; 0
    3bbe:	b0 70       	andi	r27, 0x00	; 0
    3bc0:	56 95       	lsr	r21
    3bc2:	47 95       	ror	r20
    3bc4:	37 95       	ror	r19
    3bc6:	27 95       	ror	r18
    3bc8:	82 2b       	or	r24, r18
    3bca:	93 2b       	or	r25, r19
    3bcc:	a4 2b       	or	r26, r20
    3bce:	b5 2b       	or	r27, r21
    3bd0:	8c 83       	std	Y+4, r24	; 0x04
    3bd2:	9d 83       	std	Y+5, r25	; 0x05
    3bd4:	ae 83       	std	Y+6, r26	; 0x06
    3bd6:	bf 83       	std	Y+7, r27	; 0x07
    3bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bda:	9b 81       	ldd	r25, Y+3	; 0x03
    3bdc:	01 96       	adiw	r24, 0x01	; 1
    3bde:	9b 83       	std	Y+3, r25	; 0x03
    3be0:	8a 83       	std	Y+2, r24	; 0x02
    3be2:	05 c0       	rjmp	.+10     	; 0x3bee <_fpadd_parts+0x286>
    3be4:	e5 e1       	ldi	r30, 0x15	; 21
    3be6:	f1 e0       	ldi	r31, 0x01	; 1
    3be8:	03 c0       	rjmp	.+6      	; 0x3bf0 <_fpadd_parts+0x288>
    3bea:	fb 01       	movw	r30, r22
    3bec:	01 c0       	rjmp	.+2      	; 0x3bf0 <_fpadd_parts+0x288>
    3bee:	fe 01       	movw	r30, r28
    3bf0:	cf 01       	movw	r24, r30
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	ee e0       	ldi	r30, 0x0E	; 14
    3bf8:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <__epilogue_restores__+0x8>

00003bfc <__addsf3>:
    3bfc:	a0 e2       	ldi	r26, 0x20	; 32
    3bfe:	b0 e0       	ldi	r27, 0x00	; 0
    3c00:	e4 e0       	ldi	r30, 0x04	; 4
    3c02:	fe e1       	ldi	r31, 0x1E	; 30
    3c04:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x18>
    3c08:	69 83       	std	Y+1, r22	; 0x01
    3c0a:	7a 83       	std	Y+2, r23	; 0x02
    3c0c:	8b 83       	std	Y+3, r24	; 0x03
    3c0e:	9c 83       	std	Y+4, r25	; 0x04
    3c10:	2d 83       	std	Y+5, r18	; 0x05
    3c12:	3e 83       	std	Y+6, r19	; 0x06
    3c14:	4f 83       	std	Y+7, r20	; 0x07
    3c16:	58 87       	std	Y+8, r21	; 0x08
    3c18:	89 e0       	ldi	r24, 0x09	; 9
    3c1a:	e8 2e       	mov	r14, r24
    3c1c:	f1 2c       	mov	r15, r1
    3c1e:	ec 0e       	add	r14, r28
    3c20:	fd 1e       	adc	r15, r29
    3c22:	ce 01       	movw	r24, r28
    3c24:	01 96       	adiw	r24, 0x01	; 1
    3c26:	b7 01       	movw	r22, r14
    3c28:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3c2c:	8e 01       	movw	r16, r28
    3c2e:	0f 5e       	subi	r16, 0xEF	; 239
    3c30:	1f 4f       	sbci	r17, 0xFF	; 255
    3c32:	ce 01       	movw	r24, r28
    3c34:	05 96       	adiw	r24, 0x05	; 5
    3c36:	b8 01       	movw	r22, r16
    3c38:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3c3c:	c7 01       	movw	r24, r14
    3c3e:	b8 01       	movw	r22, r16
    3c40:	ae 01       	movw	r20, r28
    3c42:	47 5e       	subi	r20, 0xE7	; 231
    3c44:	5f 4f       	sbci	r21, 0xFF	; 255
    3c46:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_fpadd_parts>
    3c4a:	0e 94 18 22 	call	0x4430	; 0x4430 <__pack_f>
    3c4e:	a0 96       	adiw	r28, 0x20	; 32
    3c50:	e6 e0       	ldi	r30, 0x06	; 6
    3c52:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x18>

00003c56 <__subsf3>:
    3c56:	a0 e2       	ldi	r26, 0x20	; 32
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	e1 e3       	ldi	r30, 0x31	; 49
    3c5c:	fe e1       	ldi	r31, 0x1E	; 30
    3c5e:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x18>
    3c62:	69 83       	std	Y+1, r22	; 0x01
    3c64:	7a 83       	std	Y+2, r23	; 0x02
    3c66:	8b 83       	std	Y+3, r24	; 0x03
    3c68:	9c 83       	std	Y+4, r25	; 0x04
    3c6a:	2d 83       	std	Y+5, r18	; 0x05
    3c6c:	3e 83       	std	Y+6, r19	; 0x06
    3c6e:	4f 83       	std	Y+7, r20	; 0x07
    3c70:	58 87       	std	Y+8, r21	; 0x08
    3c72:	8e 01       	movw	r16, r28
    3c74:	07 5f       	subi	r16, 0xF7	; 247
    3c76:	1f 4f       	sbci	r17, 0xFF	; 255
    3c78:	ce 01       	movw	r24, r28
    3c7a:	01 96       	adiw	r24, 0x01	; 1
    3c7c:	b8 01       	movw	r22, r16
    3c7e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3c82:	91 e1       	ldi	r25, 0x11	; 17
    3c84:	e9 2e       	mov	r14, r25
    3c86:	f1 2c       	mov	r15, r1
    3c88:	ec 0e       	add	r14, r28
    3c8a:	fd 1e       	adc	r15, r29
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	05 96       	adiw	r24, 0x05	; 5
    3c90:	b7 01       	movw	r22, r14
    3c92:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3c96:	8a 89       	ldd	r24, Y+18	; 0x12
    3c98:	91 e0       	ldi	r25, 0x01	; 1
    3c9a:	89 27       	eor	r24, r25
    3c9c:	8a 8b       	std	Y+18, r24	; 0x12
    3c9e:	c8 01       	movw	r24, r16
    3ca0:	b7 01       	movw	r22, r14
    3ca2:	ae 01       	movw	r20, r28
    3ca4:	47 5e       	subi	r20, 0xE7	; 231
    3ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca8:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_fpadd_parts>
    3cac:	0e 94 18 22 	call	0x4430	; 0x4430 <__pack_f>
    3cb0:	a0 96       	adiw	r28, 0x20	; 32
    3cb2:	e6 e0       	ldi	r30, 0x06	; 6
    3cb4:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x18>

00003cb8 <__mulsf3>:
    3cb8:	a0 e2       	ldi	r26, 0x20	; 32
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	e2 e6       	ldi	r30, 0x62	; 98
    3cbe:	fe e1       	ldi	r31, 0x1E	; 30
    3cc0:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__prologue_saves__>
    3cc4:	69 83       	std	Y+1, r22	; 0x01
    3cc6:	7a 83       	std	Y+2, r23	; 0x02
    3cc8:	8b 83       	std	Y+3, r24	; 0x03
    3cca:	9c 83       	std	Y+4, r25	; 0x04
    3ccc:	2d 83       	std	Y+5, r18	; 0x05
    3cce:	3e 83       	std	Y+6, r19	; 0x06
    3cd0:	4f 83       	std	Y+7, r20	; 0x07
    3cd2:	58 87       	std	Y+8, r21	; 0x08
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	01 96       	adiw	r24, 0x01	; 1
    3cd8:	be 01       	movw	r22, r28
    3cda:	67 5f       	subi	r22, 0xF7	; 247
    3cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cde:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	05 96       	adiw	r24, 0x05	; 5
    3ce6:	be 01       	movw	r22, r28
    3ce8:	6f 5e       	subi	r22, 0xEF	; 239
    3cea:	7f 4f       	sbci	r23, 0xFF	; 255
    3cec:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3cf0:	99 85       	ldd	r25, Y+9	; 0x09
    3cf2:	92 30       	cpi	r25, 0x02	; 2
    3cf4:	78 f0       	brcs	.+30     	; 0x3d14 <__mulsf3+0x5c>
    3cf6:	89 89       	ldd	r24, Y+17	; 0x11
    3cf8:	82 30       	cpi	r24, 0x02	; 2
    3cfa:	c0 f0       	brcs	.+48     	; 0x3d2c <__mulsf3+0x74>
    3cfc:	94 30       	cpi	r25, 0x04	; 4
    3cfe:	19 f4       	brne	.+6      	; 0x3d06 <__mulsf3+0x4e>
    3d00:	82 30       	cpi	r24, 0x02	; 2
    3d02:	41 f4       	brne	.+16     	; 0x3d14 <__mulsf3+0x5c>
    3d04:	cb c0       	rjmp	.+406    	; 0x3e9c <__mulsf3+0x1e4>
    3d06:	84 30       	cpi	r24, 0x04	; 4
    3d08:	19 f4       	brne	.+6      	; 0x3d10 <__mulsf3+0x58>
    3d0a:	92 30       	cpi	r25, 0x02	; 2
    3d0c:	79 f4       	brne	.+30     	; 0x3d2c <__mulsf3+0x74>
    3d0e:	c6 c0       	rjmp	.+396    	; 0x3e9c <__mulsf3+0x1e4>
    3d10:	92 30       	cpi	r25, 0x02	; 2
    3d12:	51 f4       	brne	.+20     	; 0x3d28 <__mulsf3+0x70>
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	2a 85       	ldd	r18, Y+10	; 0x0a
    3d18:	9a 89       	ldd	r25, Y+18	; 0x12
    3d1a:	29 17       	cp	r18, r25
    3d1c:	09 f4       	brne	.+2      	; 0x3d20 <__mulsf3+0x68>
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	8a 87       	std	Y+10, r24	; 0x0a
    3d22:	ce 01       	movw	r24, r28
    3d24:	09 96       	adiw	r24, 0x09	; 9
    3d26:	bc c0       	rjmp	.+376    	; 0x3ea0 <__mulsf3+0x1e8>
    3d28:	82 30       	cpi	r24, 0x02	; 2
    3d2a:	51 f4       	brne	.+20     	; 0x3d40 <__mulsf3+0x88>
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3d30:	9a 89       	ldd	r25, Y+18	; 0x12
    3d32:	29 17       	cp	r18, r25
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <__mulsf3+0x80>
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	8a 8b       	std	Y+18, r24	; 0x12
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	41 96       	adiw	r24, 0x11	; 17
    3d3e:	b0 c0       	rjmp	.+352    	; 0x3ea0 <__mulsf3+0x1e8>
    3d40:	6d 84       	ldd	r6, Y+13	; 0x0d
    3d42:	7e 84       	ldd	r7, Y+14	; 0x0e
    3d44:	8f 84       	ldd	r8, Y+15	; 0x0f
    3d46:	98 88       	ldd	r9, Y+16	; 0x10
    3d48:	ed 88       	ldd	r14, Y+21	; 0x15
    3d4a:	fe 88       	ldd	r15, Y+22	; 0x16
    3d4c:	0f 89       	ldd	r16, Y+23	; 0x17
    3d4e:	18 8d       	ldd	r17, Y+24	; 0x18
    3d50:	e0 e2       	ldi	r30, 0x20	; 32
    3d52:	f0 e0       	ldi	r31, 0x00	; 0
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	dc 01       	movw	r26, r24
    3d5a:	aa 24       	eor	r10, r10
    3d5c:	bb 24       	eor	r11, r11
    3d5e:	65 01       	movw	r12, r10
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	a9 01       	movw	r20, r18
    3d66:	b3 01       	movw	r22, r6
    3d68:	61 70       	andi	r22, 0x01	; 1
    3d6a:	70 70       	andi	r23, 0x00	; 0
    3d6c:	61 15       	cp	r22, r1
    3d6e:	71 05       	cpc	r23, r1
    3d70:	d1 f0       	breq	.+52     	; 0x3da6 <__mulsf3+0xee>
    3d72:	2e 0d       	add	r18, r14
    3d74:	3f 1d       	adc	r19, r15
    3d76:	40 1f       	adc	r20, r16
    3d78:	51 1f       	adc	r21, r17
    3d7a:	15 01       	movw	r2, r10
    3d7c:	26 01       	movw	r4, r12
    3d7e:	28 0e       	add	r2, r24
    3d80:	39 1e       	adc	r3, r25
    3d82:	4a 1e       	adc	r4, r26
    3d84:	5b 1e       	adc	r5, r27
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	a0 e0       	ldi	r26, 0x00	; 0
    3d8c:	b0 e0       	ldi	r27, 0x00	; 0
    3d8e:	2e 15       	cp	r18, r14
    3d90:	3f 05       	cpc	r19, r15
    3d92:	40 07       	cpc	r20, r16
    3d94:	51 07       	cpc	r21, r17
    3d96:	18 f0       	brcs	.+6      	; 0x3d9e <__mulsf3+0xe6>
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	82 0d       	add	r24, r2
    3da0:	93 1d       	adc	r25, r3
    3da2:	a4 1d       	adc	r26, r4
    3da4:	b5 1d       	adc	r27, r5
    3da6:	aa 0c       	add	r10, r10
    3da8:	bb 1c       	adc	r11, r11
    3daa:	cc 1c       	adc	r12, r12
    3dac:	dd 1c       	adc	r13, r13
    3dae:	17 ff       	sbrs	r17, 7
    3db0:	09 c0       	rjmp	.+18     	; 0x3dc4 <__mulsf3+0x10c>
    3db2:	61 e0       	ldi	r22, 0x01	; 1
    3db4:	26 2e       	mov	r2, r22
    3db6:	31 2c       	mov	r3, r1
    3db8:	41 2c       	mov	r4, r1
    3dba:	51 2c       	mov	r5, r1
    3dbc:	a2 28       	or	r10, r2
    3dbe:	b3 28       	or	r11, r3
    3dc0:	c4 28       	or	r12, r4
    3dc2:	d5 28       	or	r13, r5
    3dc4:	31 97       	sbiw	r30, 0x01	; 1
    3dc6:	49 f0       	breq	.+18     	; 0x3dda <__mulsf3+0x122>
    3dc8:	ee 0c       	add	r14, r14
    3dca:	ff 1c       	adc	r15, r15
    3dcc:	00 1f       	adc	r16, r16
    3dce:	11 1f       	adc	r17, r17
    3dd0:	96 94       	lsr	r9
    3dd2:	87 94       	ror	r8
    3dd4:	77 94       	ror	r7
    3dd6:	67 94       	ror	r6
    3dd8:	c6 cf       	rjmp	.-116    	; 0x3d66 <__mulsf3+0xae>
    3dda:	6b 89       	ldd	r22, Y+19	; 0x13
    3ddc:	7c 89       	ldd	r23, Y+20	; 0x14
    3dde:	eb 85       	ldd	r30, Y+11	; 0x0b
    3de0:	fc 85       	ldd	r31, Y+12	; 0x0c
    3de2:	6e 0f       	add	r22, r30
    3de4:	7f 1f       	adc	r23, r31
    3de6:	6e 5f       	subi	r22, 0xFE	; 254
    3de8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dea:	7c 8f       	std	Y+28, r23	; 0x1c
    3dec:	6b 8f       	std	Y+27, r22	; 0x1b
    3dee:	61 e0       	ldi	r22, 0x01	; 1
    3df0:	ea 85       	ldd	r30, Y+10	; 0x0a
    3df2:	7a 89       	ldd	r23, Y+18	; 0x12
    3df4:	e7 17       	cp	r30, r23
    3df6:	09 f4       	brne	.+2      	; 0x3dfa <__mulsf3+0x142>
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	6a 8f       	std	Y+26, r22	; 0x1a
    3dfc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3dfe:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3e00:	10 c0       	rjmp	.+32     	; 0x3e22 <__mulsf3+0x16a>
    3e02:	fc 01       	movw	r30, r24
    3e04:	e1 70       	andi	r30, 0x01	; 1
    3e06:	f0 70       	andi	r31, 0x00	; 0
    3e08:	30 97       	sbiw	r30, 0x00	; 0
    3e0a:	29 f0       	breq	.+10     	; 0x3e16 <__mulsf3+0x15e>
    3e0c:	56 95       	lsr	r21
    3e0e:	47 95       	ror	r20
    3e10:	37 95       	ror	r19
    3e12:	27 95       	ror	r18
    3e14:	50 68       	ori	r21, 0x80	; 128
    3e16:	b6 95       	lsr	r27
    3e18:	a7 95       	ror	r26
    3e1a:	97 95       	ror	r25
    3e1c:	87 95       	ror	r24
    3e1e:	6f 5f       	subi	r22, 0xFF	; 255
    3e20:	7f 4f       	sbci	r23, 0xFF	; 255
    3e22:	b7 fd       	sbrc	r27, 7
    3e24:	ee cf       	rjmp	.-36     	; 0x3e02 <__mulsf3+0x14a>
    3e26:	0c c0       	rjmp	.+24     	; 0x3e40 <__mulsf3+0x188>
    3e28:	88 0f       	add	r24, r24
    3e2a:	99 1f       	adc	r25, r25
    3e2c:	aa 1f       	adc	r26, r26
    3e2e:	bb 1f       	adc	r27, r27
    3e30:	57 fd       	sbrc	r21, 7
    3e32:	81 60       	ori	r24, 0x01	; 1
    3e34:	22 0f       	add	r18, r18
    3e36:	33 1f       	adc	r19, r19
    3e38:	44 1f       	adc	r20, r20
    3e3a:	55 1f       	adc	r21, r21
    3e3c:	61 50       	subi	r22, 0x01	; 1
    3e3e:	70 40       	sbci	r23, 0x00	; 0
    3e40:	80 30       	cpi	r24, 0x00	; 0
    3e42:	e0 e0       	ldi	r30, 0x00	; 0
    3e44:	9e 07       	cpc	r25, r30
    3e46:	e0 e0       	ldi	r30, 0x00	; 0
    3e48:	ae 07       	cpc	r26, r30
    3e4a:	e0 e4       	ldi	r30, 0x40	; 64
    3e4c:	be 07       	cpc	r27, r30
    3e4e:	60 f3       	brcs	.-40     	; 0x3e28 <__mulsf3+0x170>
    3e50:	6b 8f       	std	Y+27, r22	; 0x1b
    3e52:	7c 8f       	std	Y+28, r23	; 0x1c
    3e54:	6f e7       	ldi	r22, 0x7F	; 127
    3e56:	e6 2e       	mov	r14, r22
    3e58:	f1 2c       	mov	r15, r1
    3e5a:	01 2d       	mov	r16, r1
    3e5c:	11 2d       	mov	r17, r1
    3e5e:	e8 22       	and	r14, r24
    3e60:	f9 22       	and	r15, r25
    3e62:	0a 23       	and	r16, r26
    3e64:	1b 23       	and	r17, r27
    3e66:	60 e4       	ldi	r22, 0x40	; 64
    3e68:	e6 16       	cp	r14, r22
    3e6a:	f1 04       	cpc	r15, r1
    3e6c:	01 05       	cpc	r16, r1
    3e6e:	11 05       	cpc	r17, r1
    3e70:	61 f4       	brne	.+24     	; 0x3e8a <__mulsf3+0x1d2>
    3e72:	87 fd       	sbrc	r24, 7
    3e74:	0a c0       	rjmp	.+20     	; 0x3e8a <__mulsf3+0x1d2>
    3e76:	21 15       	cp	r18, r1
    3e78:	31 05       	cpc	r19, r1
    3e7a:	41 05       	cpc	r20, r1
    3e7c:	51 05       	cpc	r21, r1
    3e7e:	29 f0       	breq	.+10     	; 0x3e8a <__mulsf3+0x1d2>
    3e80:	80 5c       	subi	r24, 0xC0	; 192
    3e82:	9f 4f       	sbci	r25, 0xFF	; 255
    3e84:	af 4f       	sbci	r26, 0xFF	; 255
    3e86:	bf 4f       	sbci	r27, 0xFF	; 255
    3e88:	80 78       	andi	r24, 0x80	; 128
    3e8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3e8c:	9e 8f       	std	Y+30, r25	; 0x1e
    3e8e:	af 8f       	std	Y+31, r26	; 0x1f
    3e90:	b8 a3       	std	Y+32, r27	; 0x20
    3e92:	83 e0       	ldi	r24, 0x03	; 3
    3e94:	89 8f       	std	Y+25, r24	; 0x19
    3e96:	ce 01       	movw	r24, r28
    3e98:	49 96       	adiw	r24, 0x19	; 25
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <__mulsf3+0x1e8>
    3e9c:	85 e1       	ldi	r24, 0x15	; 21
    3e9e:	91 e0       	ldi	r25, 0x01	; 1
    3ea0:	0e 94 18 22 	call	0x4430	; 0x4430 <__pack_f>
    3ea4:	a0 96       	adiw	r28, 0x20	; 32
    3ea6:	e2 e1       	ldi	r30, 0x12	; 18
    3ea8:	0c 94 27 24 	jmp	0x484e	; 0x484e <__epilogue_restores__>

00003eac <__divsf3>:
    3eac:	a8 e1       	ldi	r26, 0x18	; 24
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	ec e5       	ldi	r30, 0x5C	; 92
    3eb2:	ff e1       	ldi	r31, 0x1F	; 31
    3eb4:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x10>
    3eb8:	69 83       	std	Y+1, r22	; 0x01
    3eba:	7a 83       	std	Y+2, r23	; 0x02
    3ebc:	8b 83       	std	Y+3, r24	; 0x03
    3ebe:	9c 83       	std	Y+4, r25	; 0x04
    3ec0:	2d 83       	std	Y+5, r18	; 0x05
    3ec2:	3e 83       	std	Y+6, r19	; 0x06
    3ec4:	4f 83       	std	Y+7, r20	; 0x07
    3ec6:	58 87       	std	Y+8, r21	; 0x08
    3ec8:	8e 01       	movw	r16, r28
    3eca:	07 5f       	subi	r16, 0xF7	; 247
    3ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ece:	ce 01       	movw	r24, r28
    3ed0:	01 96       	adiw	r24, 0x01	; 1
    3ed2:	b8 01       	movw	r22, r16
    3ed4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3ed8:	81 e1       	ldi	r24, 0x11	; 17
    3eda:	e8 2e       	mov	r14, r24
    3edc:	f1 2c       	mov	r15, r1
    3ede:	ec 0e       	add	r14, r28
    3ee0:	fd 1e       	adc	r15, r29
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	05 96       	adiw	r24, 0x05	; 5
    3ee6:	b7 01       	movw	r22, r14
    3ee8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    3eec:	99 85       	ldd	r25, Y+9	; 0x09
    3eee:	92 30       	cpi	r25, 0x02	; 2
    3ef0:	08 f4       	brcc	.+2      	; 0x3ef4 <__divsf3+0x48>
    3ef2:	83 c0       	rjmp	.+262    	; 0x3ffa <__divsf3+0x14e>
    3ef4:	89 89       	ldd	r24, Y+17	; 0x11
    3ef6:	82 30       	cpi	r24, 0x02	; 2
    3ef8:	08 f4       	brcc	.+2      	; 0x3efc <__divsf3+0x50>
    3efa:	7b c0       	rjmp	.+246    	; 0x3ff2 <__divsf3+0x146>
    3efc:	2a 85       	ldd	r18, Y+10	; 0x0a
    3efe:	3a 89       	ldd	r19, Y+18	; 0x12
    3f00:	23 27       	eor	r18, r19
    3f02:	2a 87       	std	Y+10, r18	; 0x0a
    3f04:	94 30       	cpi	r25, 0x04	; 4
    3f06:	11 f0       	breq	.+4      	; 0x3f0c <__divsf3+0x60>
    3f08:	92 30       	cpi	r25, 0x02	; 2
    3f0a:	21 f4       	brne	.+8      	; 0x3f14 <__divsf3+0x68>
    3f0c:	98 17       	cp	r25, r24
    3f0e:	09 f0       	breq	.+2      	; 0x3f12 <__divsf3+0x66>
    3f10:	6c c0       	rjmp	.+216    	; 0x3fea <__divsf3+0x13e>
    3f12:	71 c0       	rjmp	.+226    	; 0x3ff6 <__divsf3+0x14a>
    3f14:	84 30       	cpi	r24, 0x04	; 4
    3f16:	39 f4       	brne	.+14     	; 0x3f26 <__divsf3+0x7a>
    3f18:	1d 86       	std	Y+13, r1	; 0x0d
    3f1a:	1e 86       	std	Y+14, r1	; 0x0e
    3f1c:	1f 86       	std	Y+15, r1	; 0x0f
    3f1e:	18 8a       	std	Y+16, r1	; 0x10
    3f20:	1c 86       	std	Y+12, r1	; 0x0c
    3f22:	1b 86       	std	Y+11, r1	; 0x0b
    3f24:	6a c0       	rjmp	.+212    	; 0x3ffa <__divsf3+0x14e>
    3f26:	82 30       	cpi	r24, 0x02	; 2
    3f28:	19 f4       	brne	.+6      	; 0x3f30 <__divsf3+0x84>
    3f2a:	84 e0       	ldi	r24, 0x04	; 4
    3f2c:	89 87       	std	Y+9, r24	; 0x09
    3f2e:	65 c0       	rjmp	.+202    	; 0x3ffa <__divsf3+0x14e>
    3f30:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f32:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f34:	2b 89       	ldd	r18, Y+19	; 0x13
    3f36:	3c 89       	ldd	r19, Y+20	; 0x14
    3f38:	82 1b       	sub	r24, r18
    3f3a:	93 0b       	sbc	r25, r19
    3f3c:	9c 87       	std	Y+12, r25	; 0x0c
    3f3e:	8b 87       	std	Y+11, r24	; 0x0b
    3f40:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f42:	3e 85       	ldd	r19, Y+14	; 0x0e
    3f44:	4f 85       	ldd	r20, Y+15	; 0x0f
    3f46:	58 89       	ldd	r21, Y+16	; 0x10
    3f48:	ed 88       	ldd	r14, Y+21	; 0x15
    3f4a:	fe 88       	ldd	r15, Y+22	; 0x16
    3f4c:	0f 89       	ldd	r16, Y+23	; 0x17
    3f4e:	18 8d       	ldd	r17, Y+24	; 0x18
    3f50:	2e 15       	cp	r18, r14
    3f52:	3f 05       	cpc	r19, r15
    3f54:	40 07       	cpc	r20, r16
    3f56:	51 07       	cpc	r21, r17
    3f58:	38 f4       	brcc	.+14     	; 0x3f68 <__divsf3+0xbc>
    3f5a:	22 0f       	add	r18, r18
    3f5c:	33 1f       	adc	r19, r19
    3f5e:	44 1f       	adc	r20, r20
    3f60:	55 1f       	adc	r21, r21
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	9c 87       	std	Y+12, r25	; 0x0c
    3f66:	8b 87       	std	Y+11, r24	; 0x0b
    3f68:	6f e1       	ldi	r22, 0x1F	; 31
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	a1 2c       	mov	r10, r1
    3f6e:	b1 2c       	mov	r11, r1
    3f70:	c1 2c       	mov	r12, r1
    3f72:	a0 e4       	ldi	r26, 0x40	; 64
    3f74:	da 2e       	mov	r13, r26
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	2e 15       	cp	r18, r14
    3f7e:	3f 05       	cpc	r19, r15
    3f80:	40 07       	cpc	r20, r16
    3f82:	51 07       	cpc	r21, r17
    3f84:	40 f0       	brcs	.+16     	; 0x3f96 <__divsf3+0xea>
    3f86:	8a 29       	or	r24, r10
    3f88:	9b 29       	or	r25, r11
    3f8a:	ac 29       	or	r26, r12
    3f8c:	bd 29       	or	r27, r13
    3f8e:	2e 19       	sub	r18, r14
    3f90:	3f 09       	sbc	r19, r15
    3f92:	40 0b       	sbc	r20, r16
    3f94:	51 0b       	sbc	r21, r17
    3f96:	d6 94       	lsr	r13
    3f98:	c7 94       	ror	r12
    3f9a:	b7 94       	ror	r11
    3f9c:	a7 94       	ror	r10
    3f9e:	22 0f       	add	r18, r18
    3fa0:	33 1f       	adc	r19, r19
    3fa2:	44 1f       	adc	r20, r20
    3fa4:	55 1f       	adc	r21, r21
    3fa6:	61 50       	subi	r22, 0x01	; 1
    3fa8:	70 40       	sbci	r23, 0x00	; 0
    3faa:	41 f7       	brne	.-48     	; 0x3f7c <__divsf3+0xd0>
    3fac:	6f e7       	ldi	r22, 0x7F	; 127
    3fae:	e6 2e       	mov	r14, r22
    3fb0:	f1 2c       	mov	r15, r1
    3fb2:	01 2d       	mov	r16, r1
    3fb4:	11 2d       	mov	r17, r1
    3fb6:	e8 22       	and	r14, r24
    3fb8:	f9 22       	and	r15, r25
    3fba:	0a 23       	and	r16, r26
    3fbc:	1b 23       	and	r17, r27
    3fbe:	60 e4       	ldi	r22, 0x40	; 64
    3fc0:	e6 16       	cp	r14, r22
    3fc2:	f1 04       	cpc	r15, r1
    3fc4:	01 05       	cpc	r16, r1
    3fc6:	11 05       	cpc	r17, r1
    3fc8:	61 f4       	brne	.+24     	; 0x3fe2 <__divsf3+0x136>
    3fca:	87 fd       	sbrc	r24, 7
    3fcc:	0a c0       	rjmp	.+20     	; 0x3fe2 <__divsf3+0x136>
    3fce:	21 15       	cp	r18, r1
    3fd0:	31 05       	cpc	r19, r1
    3fd2:	41 05       	cpc	r20, r1
    3fd4:	51 05       	cpc	r21, r1
    3fd6:	29 f0       	breq	.+10     	; 0x3fe2 <__divsf3+0x136>
    3fd8:	80 5c       	subi	r24, 0xC0	; 192
    3fda:	9f 4f       	sbci	r25, 0xFF	; 255
    3fdc:	af 4f       	sbci	r26, 0xFF	; 255
    3fde:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe0:	80 78       	andi	r24, 0x80	; 128
    3fe2:	8d 87       	std	Y+13, r24	; 0x0d
    3fe4:	9e 87       	std	Y+14, r25	; 0x0e
    3fe6:	af 87       	std	Y+15, r26	; 0x0f
    3fe8:	b8 8b       	std	Y+16, r27	; 0x10
    3fea:	8e 01       	movw	r16, r28
    3fec:	07 5f       	subi	r16, 0xF7	; 247
    3fee:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff0:	04 c0       	rjmp	.+8      	; 0x3ffa <__divsf3+0x14e>
    3ff2:	87 01       	movw	r16, r14
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <__divsf3+0x14e>
    3ff6:	05 e1       	ldi	r16, 0x15	; 21
    3ff8:	11 e0       	ldi	r17, 0x01	; 1
    3ffa:	c8 01       	movw	r24, r16
    3ffc:	0e 94 18 22 	call	0x4430	; 0x4430 <__pack_f>
    4000:	68 96       	adiw	r28, 0x18	; 24
    4002:	ea e0       	ldi	r30, 0x0A	; 10
    4004:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x10>

00004008 <__gtsf2>:
    4008:	a8 e1       	ldi	r26, 0x18	; 24
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	ea e0       	ldi	r30, 0x0A	; 10
    400e:	f0 e2       	ldi	r31, 0x20	; 32
    4010:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x18>
    4014:	69 83       	std	Y+1, r22	; 0x01
    4016:	7a 83       	std	Y+2, r23	; 0x02
    4018:	8b 83       	std	Y+3, r24	; 0x03
    401a:	9c 83       	std	Y+4, r25	; 0x04
    401c:	2d 83       	std	Y+5, r18	; 0x05
    401e:	3e 83       	std	Y+6, r19	; 0x06
    4020:	4f 83       	std	Y+7, r20	; 0x07
    4022:	58 87       	std	Y+8, r21	; 0x08
    4024:	8e 01       	movw	r16, r28
    4026:	07 5f       	subi	r16, 0xF7	; 247
    4028:	1f 4f       	sbci	r17, 0xFF	; 255
    402a:	ce 01       	movw	r24, r28
    402c:	01 96       	adiw	r24, 0x01	; 1
    402e:	b8 01       	movw	r22, r16
    4030:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    4034:	81 e1       	ldi	r24, 0x11	; 17
    4036:	e8 2e       	mov	r14, r24
    4038:	f1 2c       	mov	r15, r1
    403a:	ec 0e       	add	r14, r28
    403c:	fd 1e       	adc	r15, r29
    403e:	ce 01       	movw	r24, r28
    4040:	05 96       	adiw	r24, 0x05	; 5
    4042:	b7 01       	movw	r22, r14
    4044:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    4048:	89 85       	ldd	r24, Y+9	; 0x09
    404a:	82 30       	cpi	r24, 0x02	; 2
    404c:	40 f0       	brcs	.+16     	; 0x405e <__gtsf2+0x56>
    404e:	89 89       	ldd	r24, Y+17	; 0x11
    4050:	82 30       	cpi	r24, 0x02	; 2
    4052:	28 f0       	brcs	.+10     	; 0x405e <__gtsf2+0x56>
    4054:	c8 01       	movw	r24, r16
    4056:	b7 01       	movw	r22, r14
    4058:	0e 94 4e 23 	call	0x469c	; 0x469c <__fpcmp_parts_f>
    405c:	01 c0       	rjmp	.+2      	; 0x4060 <__gtsf2+0x58>
    405e:	8f ef       	ldi	r24, 0xFF	; 255
    4060:	68 96       	adiw	r28, 0x18	; 24
    4062:	e6 e0       	ldi	r30, 0x06	; 6
    4064:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x18>

00004068 <__gesf2>:
    4068:	a8 e1       	ldi	r26, 0x18	; 24
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	ea e3       	ldi	r30, 0x3A	; 58
    406e:	f0 e2       	ldi	r31, 0x20	; 32
    4070:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x18>
    4074:	69 83       	std	Y+1, r22	; 0x01
    4076:	7a 83       	std	Y+2, r23	; 0x02
    4078:	8b 83       	std	Y+3, r24	; 0x03
    407a:	9c 83       	std	Y+4, r25	; 0x04
    407c:	2d 83       	std	Y+5, r18	; 0x05
    407e:	3e 83       	std	Y+6, r19	; 0x06
    4080:	4f 83       	std	Y+7, r20	; 0x07
    4082:	58 87       	std	Y+8, r21	; 0x08
    4084:	8e 01       	movw	r16, r28
    4086:	07 5f       	subi	r16, 0xF7	; 247
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
    408a:	ce 01       	movw	r24, r28
    408c:	01 96       	adiw	r24, 0x01	; 1
    408e:	b8 01       	movw	r22, r16
    4090:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    4094:	81 e1       	ldi	r24, 0x11	; 17
    4096:	e8 2e       	mov	r14, r24
    4098:	f1 2c       	mov	r15, r1
    409a:	ec 0e       	add	r14, r28
    409c:	fd 1e       	adc	r15, r29
    409e:	ce 01       	movw	r24, r28
    40a0:	05 96       	adiw	r24, 0x05	; 5
    40a2:	b7 01       	movw	r22, r14
    40a4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    40a8:	89 85       	ldd	r24, Y+9	; 0x09
    40aa:	82 30       	cpi	r24, 0x02	; 2
    40ac:	40 f0       	brcs	.+16     	; 0x40be <__gesf2+0x56>
    40ae:	89 89       	ldd	r24, Y+17	; 0x11
    40b0:	82 30       	cpi	r24, 0x02	; 2
    40b2:	28 f0       	brcs	.+10     	; 0x40be <__gesf2+0x56>
    40b4:	c8 01       	movw	r24, r16
    40b6:	b7 01       	movw	r22, r14
    40b8:	0e 94 4e 23 	call	0x469c	; 0x469c <__fpcmp_parts_f>
    40bc:	01 c0       	rjmp	.+2      	; 0x40c0 <__gesf2+0x58>
    40be:	8f ef       	ldi	r24, 0xFF	; 255
    40c0:	68 96       	adiw	r28, 0x18	; 24
    40c2:	e6 e0       	ldi	r30, 0x06	; 6
    40c4:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x18>

000040c8 <__ltsf2>:
    40c8:	a8 e1       	ldi	r26, 0x18	; 24
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	ea e6       	ldi	r30, 0x6A	; 106
    40ce:	f0 e2       	ldi	r31, 0x20	; 32
    40d0:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x18>
    40d4:	69 83       	std	Y+1, r22	; 0x01
    40d6:	7a 83       	std	Y+2, r23	; 0x02
    40d8:	8b 83       	std	Y+3, r24	; 0x03
    40da:	9c 83       	std	Y+4, r25	; 0x04
    40dc:	2d 83       	std	Y+5, r18	; 0x05
    40de:	3e 83       	std	Y+6, r19	; 0x06
    40e0:	4f 83       	std	Y+7, r20	; 0x07
    40e2:	58 87       	std	Y+8, r21	; 0x08
    40e4:	8e 01       	movw	r16, r28
    40e6:	07 5f       	subi	r16, 0xF7	; 247
    40e8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ea:	ce 01       	movw	r24, r28
    40ec:	01 96       	adiw	r24, 0x01	; 1
    40ee:	b8 01       	movw	r22, r16
    40f0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    40f4:	81 e1       	ldi	r24, 0x11	; 17
    40f6:	e8 2e       	mov	r14, r24
    40f8:	f1 2c       	mov	r15, r1
    40fa:	ec 0e       	add	r14, r28
    40fc:	fd 1e       	adc	r15, r29
    40fe:	ce 01       	movw	r24, r28
    4100:	05 96       	adiw	r24, 0x05	; 5
    4102:	b7 01       	movw	r22, r14
    4104:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    4108:	89 85       	ldd	r24, Y+9	; 0x09
    410a:	82 30       	cpi	r24, 0x02	; 2
    410c:	40 f0       	brcs	.+16     	; 0x411e <__ltsf2+0x56>
    410e:	89 89       	ldd	r24, Y+17	; 0x11
    4110:	82 30       	cpi	r24, 0x02	; 2
    4112:	28 f0       	brcs	.+10     	; 0x411e <__ltsf2+0x56>
    4114:	c8 01       	movw	r24, r16
    4116:	b7 01       	movw	r22, r14
    4118:	0e 94 4e 23 	call	0x469c	; 0x469c <__fpcmp_parts_f>
    411c:	01 c0       	rjmp	.+2      	; 0x4120 <__ltsf2+0x58>
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	68 96       	adiw	r28, 0x18	; 24
    4122:	e6 e0       	ldi	r30, 0x06	; 6
    4124:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x18>

00004128 <__floatsisf>:
    4128:	a8 e0       	ldi	r26, 0x08	; 8
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	ea e9       	ldi	r30, 0x9A	; 154
    412e:	f0 e2       	ldi	r31, 0x20	; 32
    4130:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x18>
    4134:	7b 01       	movw	r14, r22
    4136:	8c 01       	movw	r16, r24
    4138:	83 e0       	ldi	r24, 0x03	; 3
    413a:	89 83       	std	Y+1, r24	; 0x01
    413c:	d8 01       	movw	r26, r16
    413e:	c7 01       	movw	r24, r14
    4140:	88 27       	eor	r24, r24
    4142:	b7 fd       	sbrc	r27, 7
    4144:	83 95       	inc	r24
    4146:	99 27       	eor	r25, r25
    4148:	aa 27       	eor	r26, r26
    414a:	bb 27       	eor	r27, r27
    414c:	28 2f       	mov	r18, r24
    414e:	8a 83       	std	Y+2, r24	; 0x02
    4150:	e1 14       	cp	r14, r1
    4152:	f1 04       	cpc	r15, r1
    4154:	01 05       	cpc	r16, r1
    4156:	11 05       	cpc	r17, r1
    4158:	19 f4       	brne	.+6      	; 0x4160 <__floatsisf+0x38>
    415a:	82 e0       	ldi	r24, 0x02	; 2
    415c:	89 83       	std	Y+1, r24	; 0x01
    415e:	37 c0       	rjmp	.+110    	; 0x41ce <__floatsisf+0xa6>
    4160:	8e e1       	ldi	r24, 0x1E	; 30
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	9c 83       	std	Y+4, r25	; 0x04
    4166:	8b 83       	std	Y+3, r24	; 0x03
    4168:	22 23       	and	r18, r18
    416a:	89 f0       	breq	.+34     	; 0x418e <__floatsisf+0x66>
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	e8 16       	cp	r14, r24
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	f8 06       	cpc	r15, r24
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	08 07       	cpc	r16, r24
    4178:	80 e8       	ldi	r24, 0x80	; 128
    417a:	18 07       	cpc	r17, r24
    417c:	69 f1       	breq	.+90     	; 0x41d8 <__floatsisf+0xb0>
    417e:	10 95       	com	r17
    4180:	00 95       	com	r16
    4182:	f0 94       	com	r15
    4184:	e0 94       	com	r14
    4186:	e1 1c       	adc	r14, r1
    4188:	f1 1c       	adc	r15, r1
    418a:	01 1d       	adc	r16, r1
    418c:	11 1d       	adc	r17, r1
    418e:	ed 82       	std	Y+5, r14	; 0x05
    4190:	fe 82       	std	Y+6, r15	; 0x06
    4192:	0f 83       	std	Y+7, r16	; 0x07
    4194:	18 87       	std	Y+8, r17	; 0x08
    4196:	c8 01       	movw	r24, r16
    4198:	b7 01       	movw	r22, r14
    419a:	0e 94 be 21 	call	0x437c	; 0x437c <__clzsi2>
    419e:	9c 01       	movw	r18, r24
    41a0:	21 50       	subi	r18, 0x01	; 1
    41a2:	30 40       	sbci	r19, 0x00	; 0
    41a4:	12 16       	cp	r1, r18
    41a6:	13 06       	cpc	r1, r19
    41a8:	94 f4       	brge	.+36     	; 0x41ce <__floatsisf+0xa6>
    41aa:	02 2e       	mov	r0, r18
    41ac:	04 c0       	rjmp	.+8      	; 0x41b6 <__floatsisf+0x8e>
    41ae:	ee 0c       	add	r14, r14
    41b0:	ff 1c       	adc	r15, r15
    41b2:	00 1f       	adc	r16, r16
    41b4:	11 1f       	adc	r17, r17
    41b6:	0a 94       	dec	r0
    41b8:	d2 f7       	brpl	.-12     	; 0x41ae <__floatsisf+0x86>
    41ba:	ed 82       	std	Y+5, r14	; 0x05
    41bc:	fe 82       	std	Y+6, r15	; 0x06
    41be:	0f 83       	std	Y+7, r16	; 0x07
    41c0:	18 87       	std	Y+8, r17	; 0x08
    41c2:	8e e1       	ldi	r24, 0x1E	; 30
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	82 1b       	sub	r24, r18
    41c8:	93 0b       	sbc	r25, r19
    41ca:	9c 83       	std	Y+4, r25	; 0x04
    41cc:	8b 83       	std	Y+3, r24	; 0x03
    41ce:	ce 01       	movw	r24, r28
    41d0:	01 96       	adiw	r24, 0x01	; 1
    41d2:	0e 94 18 22 	call	0x4430	; 0x4430 <__pack_f>
    41d6:	04 c0       	rjmp	.+8      	; 0x41e0 <__floatsisf+0xb8>
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	70 e0       	ldi	r23, 0x00	; 0
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	9f ec       	ldi	r25, 0xCF	; 207
    41e0:	28 96       	adiw	r28, 0x08	; 8
    41e2:	e6 e0       	ldi	r30, 0x06	; 6
    41e4:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x18>

000041e8 <__fixsfsi>:
    41e8:	ac e0       	ldi	r26, 0x0C	; 12
    41ea:	b0 e0       	ldi	r27, 0x00	; 0
    41ec:	ea ef       	ldi	r30, 0xFA	; 250
    41ee:	f0 e2       	ldi	r31, 0x20	; 32
    41f0:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <__prologue_saves__+0x20>
    41f4:	69 83       	std	Y+1, r22	; 0x01
    41f6:	7a 83       	std	Y+2, r23	; 0x02
    41f8:	8b 83       	std	Y+3, r24	; 0x03
    41fa:	9c 83       	std	Y+4, r25	; 0x04
    41fc:	ce 01       	movw	r24, r28
    41fe:	01 96       	adiw	r24, 0x01	; 1
    4200:	be 01       	movw	r22, r28
    4202:	6b 5f       	subi	r22, 0xFB	; 251
    4204:	7f 4f       	sbci	r23, 0xFF	; 255
    4206:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__unpack_f>
    420a:	8d 81       	ldd	r24, Y+5	; 0x05
    420c:	82 30       	cpi	r24, 0x02	; 2
    420e:	81 f1       	breq	.+96     	; 0x4270 <__fixsfsi+0x88>
    4210:	82 30       	cpi	r24, 0x02	; 2
    4212:	70 f1       	brcs	.+92     	; 0x4270 <__fixsfsi+0x88>
    4214:	84 30       	cpi	r24, 0x04	; 4
    4216:	21 f4       	brne	.+8      	; 0x4220 <__fixsfsi+0x38>
    4218:	8e 81       	ldd	r24, Y+6	; 0x06
    421a:	88 23       	and	r24, r24
    421c:	69 f1       	breq	.+90     	; 0x4278 <__fixsfsi+0x90>
    421e:	0a c0       	rjmp	.+20     	; 0x4234 <__fixsfsi+0x4c>
    4220:	2f 81       	ldd	r18, Y+7	; 0x07
    4222:	38 85       	ldd	r19, Y+8	; 0x08
    4224:	37 fd       	sbrc	r19, 7
    4226:	24 c0       	rjmp	.+72     	; 0x4270 <__fixsfsi+0x88>
    4228:	6e 81       	ldd	r22, Y+6	; 0x06
    422a:	2f 31       	cpi	r18, 0x1F	; 31
    422c:	31 05       	cpc	r19, r1
    422e:	3c f0       	brlt	.+14     	; 0x423e <__fixsfsi+0x56>
    4230:	66 23       	and	r22, r22
    4232:	11 f1       	breq	.+68     	; 0x4278 <__fixsfsi+0x90>
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	40 e0       	ldi	r20, 0x00	; 0
    423a:	50 e8       	ldi	r21, 0x80	; 128
    423c:	21 c0       	rjmp	.+66     	; 0x4280 <__fixsfsi+0x98>
    423e:	8e e1       	ldi	r24, 0x1E	; 30
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	82 1b       	sub	r24, r18
    4244:	93 0b       	sbc	r25, r19
    4246:	29 85       	ldd	r18, Y+9	; 0x09
    4248:	3a 85       	ldd	r19, Y+10	; 0x0a
    424a:	4b 85       	ldd	r20, Y+11	; 0x0b
    424c:	5c 85       	ldd	r21, Y+12	; 0x0c
    424e:	04 c0       	rjmp	.+8      	; 0x4258 <__fixsfsi+0x70>
    4250:	56 95       	lsr	r21
    4252:	47 95       	ror	r20
    4254:	37 95       	ror	r19
    4256:	27 95       	ror	r18
    4258:	8a 95       	dec	r24
    425a:	d2 f7       	brpl	.-12     	; 0x4250 <__fixsfsi+0x68>
    425c:	66 23       	and	r22, r22
    425e:	81 f0       	breq	.+32     	; 0x4280 <__fixsfsi+0x98>
    4260:	50 95       	com	r21
    4262:	40 95       	com	r20
    4264:	30 95       	com	r19
    4266:	21 95       	neg	r18
    4268:	3f 4f       	sbci	r19, 0xFF	; 255
    426a:	4f 4f       	sbci	r20, 0xFF	; 255
    426c:	5f 4f       	sbci	r21, 0xFF	; 255
    426e:	08 c0       	rjmp	.+16     	; 0x4280 <__fixsfsi+0x98>
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	a9 01       	movw	r20, r18
    4276:	04 c0       	rjmp	.+8      	; 0x4280 <__fixsfsi+0x98>
    4278:	2f ef       	ldi	r18, 0xFF	; 255
    427a:	3f ef       	ldi	r19, 0xFF	; 255
    427c:	4f ef       	ldi	r20, 0xFF	; 255
    427e:	5f e7       	ldi	r21, 0x7F	; 127
    4280:	b9 01       	movw	r22, r18
    4282:	ca 01       	movw	r24, r20
    4284:	2c 96       	adiw	r28, 0x0c	; 12
    4286:	e2 e0       	ldi	r30, 0x02	; 2
    4288:	0c 94 37 24 	jmp	0x486e	; 0x486e <__epilogue_restores__+0x20>

0000428c <__floatunsisf>:
    428c:	a8 e0       	ldi	r26, 0x08	; 8
    428e:	b0 e0       	ldi	r27, 0x00	; 0
    4290:	ec e4       	ldi	r30, 0x4C	; 76
    4292:	f1 e2       	ldi	r31, 0x21	; 33
    4294:	0c 94 15 24 	jmp	0x482a	; 0x482a <__prologue_saves__+0x14>
    4298:	7b 01       	movw	r14, r22
    429a:	8c 01       	movw	r16, r24
    429c:	1a 82       	std	Y+2, r1	; 0x02
    429e:	61 15       	cp	r22, r1
    42a0:	71 05       	cpc	r23, r1
    42a2:	81 05       	cpc	r24, r1
    42a4:	91 05       	cpc	r25, r1
    42a6:	19 f4       	brne	.+6      	; 0x42ae <__floatunsisf+0x22>
    42a8:	82 e0       	ldi	r24, 0x02	; 2
    42aa:	89 83       	std	Y+1, r24	; 0x01
    42ac:	5f c0       	rjmp	.+190    	; 0x436c <__floatunsisf+0xe0>
    42ae:	83 e0       	ldi	r24, 0x03	; 3
    42b0:	89 83       	std	Y+1, r24	; 0x01
    42b2:	8e e1       	ldi	r24, 0x1E	; 30
    42b4:	c8 2e       	mov	r12, r24
    42b6:	d1 2c       	mov	r13, r1
    42b8:	dc 82       	std	Y+4, r13	; 0x04
    42ba:	cb 82       	std	Y+3, r12	; 0x03
    42bc:	ed 82       	std	Y+5, r14	; 0x05
    42be:	fe 82       	std	Y+6, r15	; 0x06
    42c0:	0f 83       	std	Y+7, r16	; 0x07
    42c2:	18 87       	std	Y+8, r17	; 0x08
    42c4:	c8 01       	movw	r24, r16
    42c6:	b7 01       	movw	r22, r14
    42c8:	0e 94 be 21 	call	0x437c	; 0x437c <__clzsi2>
    42cc:	fc 01       	movw	r30, r24
    42ce:	31 97       	sbiw	r30, 0x01	; 1
    42d0:	f7 ff       	sbrs	r31, 7
    42d2:	3a c0       	rjmp	.+116    	; 0x4348 <__floatunsisf+0xbc>
    42d4:	aa 27       	eor	r26, r26
    42d6:	bb 27       	eor	r27, r27
    42d8:	ae 1b       	sub	r26, r30
    42da:	bf 0b       	sbc	r27, r31
    42dc:	21 e0       	ldi	r18, 0x01	; 1
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	40 e0       	ldi	r20, 0x00	; 0
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	0a 2e       	mov	r0, r26
    42e6:	04 c0       	rjmp	.+8      	; 0x42f0 <__floatunsisf+0x64>
    42e8:	22 0f       	add	r18, r18
    42ea:	33 1f       	adc	r19, r19
    42ec:	44 1f       	adc	r20, r20
    42ee:	55 1f       	adc	r21, r21
    42f0:	0a 94       	dec	r0
    42f2:	d2 f7       	brpl	.-12     	; 0x42e8 <__floatunsisf+0x5c>
    42f4:	21 50       	subi	r18, 0x01	; 1
    42f6:	30 40       	sbci	r19, 0x00	; 0
    42f8:	40 40       	sbci	r20, 0x00	; 0
    42fa:	50 40       	sbci	r21, 0x00	; 0
    42fc:	2e 21       	and	r18, r14
    42fe:	3f 21       	and	r19, r15
    4300:	40 23       	and	r20, r16
    4302:	51 23       	and	r21, r17
    4304:	61 e0       	ldi	r22, 0x01	; 1
    4306:	70 e0       	ldi	r23, 0x00	; 0
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	21 15       	cp	r18, r1
    430e:	31 05       	cpc	r19, r1
    4310:	41 05       	cpc	r20, r1
    4312:	51 05       	cpc	r21, r1
    4314:	19 f4       	brne	.+6      	; 0x431c <__floatunsisf+0x90>
    4316:	60 e0       	ldi	r22, 0x00	; 0
    4318:	70 e0       	ldi	r23, 0x00	; 0
    431a:	cb 01       	movw	r24, r22
    431c:	04 c0       	rjmp	.+8      	; 0x4326 <__floatunsisf+0x9a>
    431e:	16 95       	lsr	r17
    4320:	07 95       	ror	r16
    4322:	f7 94       	ror	r15
    4324:	e7 94       	ror	r14
    4326:	aa 95       	dec	r26
    4328:	d2 f7       	brpl	.-12     	; 0x431e <__floatunsisf+0x92>
    432a:	e6 2a       	or	r14, r22
    432c:	f7 2a       	or	r15, r23
    432e:	08 2b       	or	r16, r24
    4330:	19 2b       	or	r17, r25
    4332:	ed 82       	std	Y+5, r14	; 0x05
    4334:	fe 82       	std	Y+6, r15	; 0x06
    4336:	0f 83       	std	Y+7, r16	; 0x07
    4338:	18 87       	std	Y+8, r17	; 0x08
    433a:	8e e1       	ldi	r24, 0x1E	; 30
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	8e 1b       	sub	r24, r30
    4340:	9f 0b       	sbc	r25, r31
    4342:	9c 83       	std	Y+4, r25	; 0x04
    4344:	8b 83       	std	Y+3, r24	; 0x03
    4346:	12 c0       	rjmp	.+36     	; 0x436c <__floatunsisf+0xe0>
    4348:	30 97       	sbiw	r30, 0x00	; 0
    434a:	81 f0       	breq	.+32     	; 0x436c <__floatunsisf+0xe0>
    434c:	0e 2e       	mov	r0, r30
    434e:	04 c0       	rjmp	.+8      	; 0x4358 <__floatunsisf+0xcc>
    4350:	ee 0c       	add	r14, r14
    4352:	ff 1c       	adc	r15, r15
    4354:	00 1f       	adc	r16, r16
    4356:	11 1f       	adc	r17, r17
    4358:	0a 94       	dec	r0
    435a:	d2 f7       	brpl	.-12     	; 0x4350 <__floatunsisf+0xc4>
    435c:	ed 82       	std	Y+5, r14	; 0x05
    435e:	fe 82       	std	Y+6, r15	; 0x06
    4360:	0f 83       	std	Y+7, r16	; 0x07
    4362:	18 87       	std	Y+8, r17	; 0x08
    4364:	ce 1a       	sub	r12, r30
    4366:	df 0a       	sbc	r13, r31
    4368:	dc 82       	std	Y+4, r13	; 0x04
    436a:	cb 82       	std	Y+3, r12	; 0x03
    436c:	ce 01       	movw	r24, r28
    436e:	01 96       	adiw	r24, 0x01	; 1
    4370:	0e 94 18 22 	call	0x4430	; 0x4430 <__pack_f>
    4374:	28 96       	adiw	r28, 0x08	; 8
    4376:	e8 e0       	ldi	r30, 0x08	; 8
    4378:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__epilogue_restores__+0x14>

0000437c <__clzsi2>:
    437c:	af 92       	push	r10
    437e:	bf 92       	push	r11
    4380:	cf 92       	push	r12
    4382:	df 92       	push	r13
    4384:	ef 92       	push	r14
    4386:	ff 92       	push	r15
    4388:	0f 93       	push	r16
    438a:	1f 93       	push	r17
    438c:	7b 01       	movw	r14, r22
    438e:	8c 01       	movw	r16, r24
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	e8 16       	cp	r14, r24
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	f8 06       	cpc	r15, r24
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	08 07       	cpc	r16, r24
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	18 07       	cpc	r17, r24
    43a0:	58 f4       	brcc	.+22     	; 0x43b8 <__clzsi2+0x3c>
    43a2:	ef ef       	ldi	r30, 0xFF	; 255
    43a4:	ee 16       	cp	r14, r30
    43a6:	f1 04       	cpc	r15, r1
    43a8:	01 05       	cpc	r16, r1
    43aa:	11 05       	cpc	r17, r1
    43ac:	09 f0       	breq	.+2      	; 0x43b0 <__clzsi2+0x34>
    43ae:	90 f4       	brcc	.+36     	; 0x43d4 <__clzsi2+0x58>
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	dc 01       	movw	r26, r24
    43b6:	17 c0       	rjmp	.+46     	; 0x43e6 <__clzsi2+0x6a>
    43b8:	f0 e0       	ldi	r31, 0x00	; 0
    43ba:	ef 16       	cp	r14, r31
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	ff 06       	cpc	r15, r31
    43c0:	f0 e0       	ldi	r31, 0x00	; 0
    43c2:	0f 07       	cpc	r16, r31
    43c4:	f1 e0       	ldi	r31, 0x01	; 1
    43c6:	1f 07       	cpc	r17, r31
    43c8:	50 f4       	brcc	.+20     	; 0x43de <__clzsi2+0x62>
    43ca:	80 e1       	ldi	r24, 0x10	; 16
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	a0 e0       	ldi	r26, 0x00	; 0
    43d0:	b0 e0       	ldi	r27, 0x00	; 0
    43d2:	09 c0       	rjmp	.+18     	; 0x43e6 <__clzsi2+0x6a>
    43d4:	88 e0       	ldi	r24, 0x08	; 8
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	a0 e0       	ldi	r26, 0x00	; 0
    43da:	b0 e0       	ldi	r27, 0x00	; 0
    43dc:	04 c0       	rjmp	.+8      	; 0x43e6 <__clzsi2+0x6a>
    43de:	88 e1       	ldi	r24, 0x18	; 24
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	a0 e0       	ldi	r26, 0x00	; 0
    43e4:	b0 e0       	ldi	r27, 0x00	; 0
    43e6:	20 e2       	ldi	r18, 0x20	; 32
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	28 1b       	sub	r18, r24
    43f0:	39 0b       	sbc	r19, r25
    43f2:	4a 0b       	sbc	r20, r26
    43f4:	5b 0b       	sbc	r21, r27
    43f6:	57 01       	movw	r10, r14
    43f8:	68 01       	movw	r12, r16
    43fa:	04 c0       	rjmp	.+8      	; 0x4404 <__clzsi2+0x88>
    43fc:	d6 94       	lsr	r13
    43fe:	c7 94       	ror	r12
    4400:	b7 94       	ror	r11
    4402:	a7 94       	ror	r10
    4404:	8a 95       	dec	r24
    4406:	d2 f7       	brpl	.-12     	; 0x43fc <__clzsi2+0x80>
    4408:	d6 01       	movw	r26, r12
    440a:	c5 01       	movw	r24, r10
    440c:	83 5e       	subi	r24, 0xE3	; 227
    440e:	9e 4f       	sbci	r25, 0xFE	; 254
    4410:	fc 01       	movw	r30, r24
    4412:	80 81       	ld	r24, Z
    4414:	28 1b       	sub	r18, r24
    4416:	31 09       	sbc	r19, r1
    4418:	41 09       	sbc	r20, r1
    441a:	51 09       	sbc	r21, r1
    441c:	c9 01       	movw	r24, r18
    441e:	1f 91       	pop	r17
    4420:	0f 91       	pop	r16
    4422:	ff 90       	pop	r15
    4424:	ef 90       	pop	r14
    4426:	df 90       	pop	r13
    4428:	cf 90       	pop	r12
    442a:	bf 90       	pop	r11
    442c:	af 90       	pop	r10
    442e:	08 95       	ret

00004430 <__pack_f>:
    4430:	ef 92       	push	r14
    4432:	ff 92       	push	r15
    4434:	0f 93       	push	r16
    4436:	1f 93       	push	r17
    4438:	cf 93       	push	r28
    443a:	df 93       	push	r29
    443c:	fc 01       	movw	r30, r24
    443e:	24 81       	ldd	r18, Z+4	; 0x04
    4440:	35 81       	ldd	r19, Z+5	; 0x05
    4442:	46 81       	ldd	r20, Z+6	; 0x06
    4444:	57 81       	ldd	r21, Z+7	; 0x07
    4446:	61 81       	ldd	r22, Z+1	; 0x01
    4448:	80 81       	ld	r24, Z
    444a:	82 30       	cpi	r24, 0x02	; 2
    444c:	20 f4       	brcc	.+8      	; 0x4456 <__pack_f+0x26>
    444e:	40 61       	ori	r20, 0x10	; 16
    4450:	ef ef       	ldi	r30, 0xFF	; 255
    4452:	f0 e0       	ldi	r31, 0x00	; 0
    4454:	a3 c0       	rjmp	.+326    	; 0x459c <__pack_f+0x16c>
    4456:	84 30       	cpi	r24, 0x04	; 4
    4458:	09 f4       	brne	.+2      	; 0x445c <__pack_f+0x2c>
    445a:	9b c0       	rjmp	.+310    	; 0x4592 <__pack_f+0x162>
    445c:	82 30       	cpi	r24, 0x02	; 2
    445e:	09 f4       	brne	.+2      	; 0x4462 <__pack_f+0x32>
    4460:	92 c0       	rjmp	.+292    	; 0x4586 <__pack_f+0x156>
    4462:	21 15       	cp	r18, r1
    4464:	31 05       	cpc	r19, r1
    4466:	41 05       	cpc	r20, r1
    4468:	51 05       	cpc	r21, r1
    446a:	09 f4       	brne	.+2      	; 0x446e <__pack_f+0x3e>
    446c:	8f c0       	rjmp	.+286    	; 0x458c <__pack_f+0x15c>
    446e:	02 80       	ldd	r0, Z+2	; 0x02
    4470:	f3 81       	ldd	r31, Z+3	; 0x03
    4472:	e0 2d       	mov	r30, r0
    4474:	7f ef       	ldi	r23, 0xFF	; 255
    4476:	e2 38       	cpi	r30, 0x82	; 130
    4478:	f7 07       	cpc	r31, r23
    447a:	0c f0       	brlt	.+2      	; 0x447e <__pack_f+0x4e>
    447c:	5a c0       	rjmp	.+180    	; 0x4532 <__pack_f+0x102>
    447e:	c2 e8       	ldi	r28, 0x82	; 130
    4480:	df ef       	ldi	r29, 0xFF	; 255
    4482:	ce 1b       	sub	r28, r30
    4484:	df 0b       	sbc	r29, r31
    4486:	ca 31       	cpi	r28, 0x1A	; 26
    4488:	d1 05       	cpc	r29, r1
    448a:	6c f5       	brge	.+90     	; 0x44e6 <__pack_f+0xb6>
    448c:	79 01       	movw	r14, r18
    448e:	8a 01       	movw	r16, r20
    4490:	0c 2e       	mov	r0, r28
    4492:	04 c0       	rjmp	.+8      	; 0x449c <__pack_f+0x6c>
    4494:	16 95       	lsr	r17
    4496:	07 95       	ror	r16
    4498:	f7 94       	ror	r15
    449a:	e7 94       	ror	r14
    449c:	0a 94       	dec	r0
    449e:	d2 f7       	brpl	.-12     	; 0x4494 <__pack_f+0x64>
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	a0 e0       	ldi	r26, 0x00	; 0
    44a6:	b0 e0       	ldi	r27, 0x00	; 0
    44a8:	0c 2e       	mov	r0, r28
    44aa:	04 c0       	rjmp	.+8      	; 0x44b4 <__pack_f+0x84>
    44ac:	88 0f       	add	r24, r24
    44ae:	99 1f       	adc	r25, r25
    44b0:	aa 1f       	adc	r26, r26
    44b2:	bb 1f       	adc	r27, r27
    44b4:	0a 94       	dec	r0
    44b6:	d2 f7       	brpl	.-12     	; 0x44ac <__pack_f+0x7c>
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	a1 09       	sbc	r26, r1
    44bc:	b1 09       	sbc	r27, r1
    44be:	82 23       	and	r24, r18
    44c0:	93 23       	and	r25, r19
    44c2:	a4 23       	and	r26, r20
    44c4:	b5 23       	and	r27, r21
    44c6:	21 e0       	ldi	r18, 0x01	; 1
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e0       	ldi	r20, 0x00	; 0
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	a1 05       	cpc	r26, r1
    44d2:	b1 05       	cpc	r27, r1
    44d4:	19 f4       	brne	.+6      	; 0x44dc <__pack_f+0xac>
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	a9 01       	movw	r20, r18
    44dc:	2e 29       	or	r18, r14
    44de:	3f 29       	or	r19, r15
    44e0:	40 2b       	or	r20, r16
    44e2:	51 2b       	or	r21, r17
    44e4:	03 c0       	rjmp	.+6      	; 0x44ec <__pack_f+0xbc>
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	a9 01       	movw	r20, r18
    44ec:	da 01       	movw	r26, r20
    44ee:	c9 01       	movw	r24, r18
    44f0:	8f 77       	andi	r24, 0x7F	; 127
    44f2:	90 70       	andi	r25, 0x00	; 0
    44f4:	a0 70       	andi	r26, 0x00	; 0
    44f6:	b0 70       	andi	r27, 0x00	; 0
    44f8:	80 34       	cpi	r24, 0x40	; 64
    44fa:	91 05       	cpc	r25, r1
    44fc:	a1 05       	cpc	r26, r1
    44fe:	b1 05       	cpc	r27, r1
    4500:	39 f4       	brne	.+14     	; 0x4510 <__pack_f+0xe0>
    4502:	27 ff       	sbrs	r18, 7
    4504:	09 c0       	rjmp	.+18     	; 0x4518 <__pack_f+0xe8>
    4506:	20 5c       	subi	r18, 0xC0	; 192
    4508:	3f 4f       	sbci	r19, 0xFF	; 255
    450a:	4f 4f       	sbci	r20, 0xFF	; 255
    450c:	5f 4f       	sbci	r21, 0xFF	; 255
    450e:	04 c0       	rjmp	.+8      	; 0x4518 <__pack_f+0xe8>
    4510:	21 5c       	subi	r18, 0xC1	; 193
    4512:	3f 4f       	sbci	r19, 0xFF	; 255
    4514:	4f 4f       	sbci	r20, 0xFF	; 255
    4516:	5f 4f       	sbci	r21, 0xFF	; 255
    4518:	e1 e0       	ldi	r30, 0x01	; 1
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	20 30       	cpi	r18, 0x00	; 0
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	38 07       	cpc	r19, r24
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	48 07       	cpc	r20, r24
    4526:	80 e4       	ldi	r24, 0x40	; 64
    4528:	58 07       	cpc	r21, r24
    452a:	28 f5       	brcc	.+74     	; 0x4576 <__pack_f+0x146>
    452c:	e0 e0       	ldi	r30, 0x00	; 0
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	22 c0       	rjmp	.+68     	; 0x4576 <__pack_f+0x146>
    4532:	e0 38       	cpi	r30, 0x80	; 128
    4534:	f1 05       	cpc	r31, r1
    4536:	6c f5       	brge	.+90     	; 0x4592 <__pack_f+0x162>
    4538:	e1 58       	subi	r30, 0x81	; 129
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	da 01       	movw	r26, r20
    453e:	c9 01       	movw	r24, r18
    4540:	8f 77       	andi	r24, 0x7F	; 127
    4542:	90 70       	andi	r25, 0x00	; 0
    4544:	a0 70       	andi	r26, 0x00	; 0
    4546:	b0 70       	andi	r27, 0x00	; 0
    4548:	80 34       	cpi	r24, 0x40	; 64
    454a:	91 05       	cpc	r25, r1
    454c:	a1 05       	cpc	r26, r1
    454e:	b1 05       	cpc	r27, r1
    4550:	39 f4       	brne	.+14     	; 0x4560 <__pack_f+0x130>
    4552:	27 ff       	sbrs	r18, 7
    4554:	09 c0       	rjmp	.+18     	; 0x4568 <__pack_f+0x138>
    4556:	20 5c       	subi	r18, 0xC0	; 192
    4558:	3f 4f       	sbci	r19, 0xFF	; 255
    455a:	4f 4f       	sbci	r20, 0xFF	; 255
    455c:	5f 4f       	sbci	r21, 0xFF	; 255
    455e:	04 c0       	rjmp	.+8      	; 0x4568 <__pack_f+0x138>
    4560:	21 5c       	subi	r18, 0xC1	; 193
    4562:	3f 4f       	sbci	r19, 0xFF	; 255
    4564:	4f 4f       	sbci	r20, 0xFF	; 255
    4566:	5f 4f       	sbci	r21, 0xFF	; 255
    4568:	57 ff       	sbrs	r21, 7
    456a:	05 c0       	rjmp	.+10     	; 0x4576 <__pack_f+0x146>
    456c:	56 95       	lsr	r21
    456e:	47 95       	ror	r20
    4570:	37 95       	ror	r19
    4572:	27 95       	ror	r18
    4574:	31 96       	adiw	r30, 0x01	; 1
    4576:	87 e0       	ldi	r24, 0x07	; 7
    4578:	56 95       	lsr	r21
    457a:	47 95       	ror	r20
    457c:	37 95       	ror	r19
    457e:	27 95       	ror	r18
    4580:	8a 95       	dec	r24
    4582:	d1 f7       	brne	.-12     	; 0x4578 <__pack_f+0x148>
    4584:	0b c0       	rjmp	.+22     	; 0x459c <__pack_f+0x16c>
    4586:	e0 e0       	ldi	r30, 0x00	; 0
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	05 c0       	rjmp	.+10     	; 0x4596 <__pack_f+0x166>
    458c:	e0 e0       	ldi	r30, 0x00	; 0
    458e:	f0 e0       	ldi	r31, 0x00	; 0
    4590:	05 c0       	rjmp	.+10     	; 0x459c <__pack_f+0x16c>
    4592:	ef ef       	ldi	r30, 0xFF	; 255
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	a9 01       	movw	r20, r18
    459c:	8e 2f       	mov	r24, r30
    459e:	87 95       	ror	r24
    45a0:	88 27       	eor	r24, r24
    45a2:	87 95       	ror	r24
    45a4:	94 2f       	mov	r25, r20
    45a6:	9f 77       	andi	r25, 0x7F	; 127
    45a8:	67 95       	ror	r22
    45aa:	66 27       	eor	r22, r22
    45ac:	67 95       	ror	r22
    45ae:	e6 95       	lsr	r30
    45b0:	a9 2f       	mov	r26, r25
    45b2:	a8 2b       	or	r26, r24
    45b4:	fe 2f       	mov	r31, r30
    45b6:	f6 2b       	or	r31, r22
    45b8:	62 2f       	mov	r22, r18
    45ba:	73 2f       	mov	r23, r19
    45bc:	8a 2f       	mov	r24, r26
    45be:	9f 2f       	mov	r25, r31
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
    45c4:	e6 e0       	ldi	r30, 0x06	; 6
    45c6:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x18>

000045ca <__unpack_f>:
    45ca:	dc 01       	movw	r26, r24
    45cc:	fb 01       	movw	r30, r22
    45ce:	2c 91       	ld	r18, X
    45d0:	11 96       	adiw	r26, 0x01	; 1
    45d2:	3c 91       	ld	r19, X
    45d4:	11 97       	sbiw	r26, 0x01	; 1
    45d6:	12 96       	adiw	r26, 0x02	; 2
    45d8:	8c 91       	ld	r24, X
    45da:	12 97       	sbiw	r26, 0x02	; 2
    45dc:	48 2f       	mov	r20, r24
    45de:	4f 77       	andi	r20, 0x7F	; 127
    45e0:	50 e0       	ldi	r21, 0x00	; 0
    45e2:	98 2f       	mov	r25, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	99 27       	eor	r25, r25
    45e8:	99 1f       	adc	r25, r25
    45ea:	13 96       	adiw	r26, 0x03	; 3
    45ec:	6c 91       	ld	r22, X
    45ee:	13 97       	sbiw	r26, 0x03	; 3
    45f0:	86 2f       	mov	r24, r22
    45f2:	88 0f       	add	r24, r24
    45f4:	89 2b       	or	r24, r25
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	66 1f       	adc	r22, r22
    45fa:	66 27       	eor	r22, r22
    45fc:	66 1f       	adc	r22, r22
    45fe:	61 83       	std	Z+1, r22	; 0x01
    4600:	00 97       	sbiw	r24, 0x00	; 0
    4602:	39 f5       	brne	.+78     	; 0x4652 <__unpack_f+0x88>
    4604:	21 15       	cp	r18, r1
    4606:	31 05       	cpc	r19, r1
    4608:	41 05       	cpc	r20, r1
    460a:	51 05       	cpc	r21, r1
    460c:	11 f4       	brne	.+4      	; 0x4612 <__unpack_f+0x48>
    460e:	82 e0       	ldi	r24, 0x02	; 2
    4610:	29 c0       	rjmp	.+82     	; 0x4664 <__unpack_f+0x9a>
    4612:	82 e8       	ldi	r24, 0x82	; 130
    4614:	9f ef       	ldi	r25, 0xFF	; 255
    4616:	93 83       	std	Z+3, r25	; 0x03
    4618:	82 83       	std	Z+2, r24	; 0x02
    461a:	67 e0       	ldi	r22, 0x07	; 7
    461c:	22 0f       	add	r18, r18
    461e:	33 1f       	adc	r19, r19
    4620:	44 1f       	adc	r20, r20
    4622:	55 1f       	adc	r21, r21
    4624:	6a 95       	dec	r22
    4626:	d1 f7       	brne	.-12     	; 0x461c <__unpack_f+0x52>
    4628:	83 e0       	ldi	r24, 0x03	; 3
    462a:	80 83       	st	Z, r24
    462c:	09 c0       	rjmp	.+18     	; 0x4640 <__unpack_f+0x76>
    462e:	22 0f       	add	r18, r18
    4630:	33 1f       	adc	r19, r19
    4632:	44 1f       	adc	r20, r20
    4634:	55 1f       	adc	r21, r21
    4636:	82 81       	ldd	r24, Z+2	; 0x02
    4638:	93 81       	ldd	r25, Z+3	; 0x03
    463a:	01 97       	sbiw	r24, 0x01	; 1
    463c:	93 83       	std	Z+3, r25	; 0x03
    463e:	82 83       	std	Z+2, r24	; 0x02
    4640:	20 30       	cpi	r18, 0x00	; 0
    4642:	80 e0       	ldi	r24, 0x00	; 0
    4644:	38 07       	cpc	r19, r24
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	48 07       	cpc	r20, r24
    464a:	80 e4       	ldi	r24, 0x40	; 64
    464c:	58 07       	cpc	r21, r24
    464e:	78 f3       	brcs	.-34     	; 0x462e <__unpack_f+0x64>
    4650:	20 c0       	rjmp	.+64     	; 0x4692 <__unpack_f+0xc8>
    4652:	8f 3f       	cpi	r24, 0xFF	; 255
    4654:	91 05       	cpc	r25, r1
    4656:	79 f4       	brne	.+30     	; 0x4676 <__unpack_f+0xac>
    4658:	21 15       	cp	r18, r1
    465a:	31 05       	cpc	r19, r1
    465c:	41 05       	cpc	r20, r1
    465e:	51 05       	cpc	r21, r1
    4660:	19 f4       	brne	.+6      	; 0x4668 <__unpack_f+0x9e>
    4662:	84 e0       	ldi	r24, 0x04	; 4
    4664:	80 83       	st	Z, r24
    4666:	08 95       	ret
    4668:	44 ff       	sbrs	r20, 4
    466a:	03 c0       	rjmp	.+6      	; 0x4672 <__unpack_f+0xa8>
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	80 83       	st	Z, r24
    4670:	10 c0       	rjmp	.+32     	; 0x4692 <__unpack_f+0xc8>
    4672:	10 82       	st	Z, r1
    4674:	0e c0       	rjmp	.+28     	; 0x4692 <__unpack_f+0xc8>
    4676:	8f 57       	subi	r24, 0x7F	; 127
    4678:	90 40       	sbci	r25, 0x00	; 0
    467a:	93 83       	std	Z+3, r25	; 0x03
    467c:	82 83       	std	Z+2, r24	; 0x02
    467e:	83 e0       	ldi	r24, 0x03	; 3
    4680:	80 83       	st	Z, r24
    4682:	87 e0       	ldi	r24, 0x07	; 7
    4684:	22 0f       	add	r18, r18
    4686:	33 1f       	adc	r19, r19
    4688:	44 1f       	adc	r20, r20
    468a:	55 1f       	adc	r21, r21
    468c:	8a 95       	dec	r24
    468e:	d1 f7       	brne	.-12     	; 0x4684 <__unpack_f+0xba>
    4690:	50 64       	ori	r21, 0x40	; 64
    4692:	24 83       	std	Z+4, r18	; 0x04
    4694:	35 83       	std	Z+5, r19	; 0x05
    4696:	46 83       	std	Z+6, r20	; 0x06
    4698:	57 83       	std	Z+7, r21	; 0x07
    469a:	08 95       	ret

0000469c <__fpcmp_parts_f>:
    469c:	fc 01       	movw	r30, r24
    469e:	db 01       	movw	r26, r22
    46a0:	90 81       	ld	r25, Z
    46a2:	92 30       	cpi	r25, 0x02	; 2
    46a4:	08 f4       	brcc	.+2      	; 0x46a8 <__fpcmp_parts_f+0xc>
    46a6:	49 c0       	rjmp	.+146    	; 0x473a <__fpcmp_parts_f+0x9e>
    46a8:	8c 91       	ld	r24, X
    46aa:	82 30       	cpi	r24, 0x02	; 2
    46ac:	08 f4       	brcc	.+2      	; 0x46b0 <__fpcmp_parts_f+0x14>
    46ae:	45 c0       	rjmp	.+138    	; 0x473a <__fpcmp_parts_f+0x9e>
    46b0:	94 30       	cpi	r25, 0x04	; 4
    46b2:	51 f4       	brne	.+20     	; 0x46c8 <__fpcmp_parts_f+0x2c>
    46b4:	61 81       	ldd	r22, Z+1	; 0x01
    46b6:	84 30       	cpi	r24, 0x04	; 4
    46b8:	b1 f5       	brne	.+108    	; 0x4726 <__fpcmp_parts_f+0x8a>
    46ba:	11 96       	adiw	r26, 0x01	; 1
    46bc:	2c 91       	ld	r18, X
    46be:	11 97       	sbiw	r26, 0x01	; 1
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	26 1b       	sub	r18, r22
    46c4:	31 09       	sbc	r19, r1
    46c6:	41 c0       	rjmp	.+130    	; 0x474a <__fpcmp_parts_f+0xae>
    46c8:	84 30       	cpi	r24, 0x04	; 4
    46ca:	21 f0       	breq	.+8      	; 0x46d4 <__fpcmp_parts_f+0x38>
    46cc:	92 30       	cpi	r25, 0x02	; 2
    46ce:	41 f4       	brne	.+16     	; 0x46e0 <__fpcmp_parts_f+0x44>
    46d0:	82 30       	cpi	r24, 0x02	; 2
    46d2:	b1 f1       	breq	.+108    	; 0x4740 <__fpcmp_parts_f+0xa4>
    46d4:	11 96       	adiw	r26, 0x01	; 1
    46d6:	8c 91       	ld	r24, X
    46d8:	11 97       	sbiw	r26, 0x01	; 1
    46da:	88 23       	and	r24, r24
    46dc:	a1 f1       	breq	.+104    	; 0x4746 <__fpcmp_parts_f+0xaa>
    46de:	2d c0       	rjmp	.+90     	; 0x473a <__fpcmp_parts_f+0x9e>
    46e0:	61 81       	ldd	r22, Z+1	; 0x01
    46e2:	82 30       	cpi	r24, 0x02	; 2
    46e4:	01 f1       	breq	.+64     	; 0x4726 <__fpcmp_parts_f+0x8a>
    46e6:	11 96       	adiw	r26, 0x01	; 1
    46e8:	8c 91       	ld	r24, X
    46ea:	11 97       	sbiw	r26, 0x01	; 1
    46ec:	68 17       	cp	r22, r24
    46ee:	d9 f4       	brne	.+54     	; 0x4726 <__fpcmp_parts_f+0x8a>
    46f0:	22 81       	ldd	r18, Z+2	; 0x02
    46f2:	33 81       	ldd	r19, Z+3	; 0x03
    46f4:	12 96       	adiw	r26, 0x02	; 2
    46f6:	8d 91       	ld	r24, X+
    46f8:	9c 91       	ld	r25, X
    46fa:	13 97       	sbiw	r26, 0x03	; 3
    46fc:	82 17       	cp	r24, r18
    46fe:	93 07       	cpc	r25, r19
    4700:	94 f0       	brlt	.+36     	; 0x4726 <__fpcmp_parts_f+0x8a>
    4702:	28 17       	cp	r18, r24
    4704:	39 07       	cpc	r19, r25
    4706:	bc f0       	brlt	.+46     	; 0x4736 <__fpcmp_parts_f+0x9a>
    4708:	24 81       	ldd	r18, Z+4	; 0x04
    470a:	35 81       	ldd	r19, Z+5	; 0x05
    470c:	46 81       	ldd	r20, Z+6	; 0x06
    470e:	57 81       	ldd	r21, Z+7	; 0x07
    4710:	14 96       	adiw	r26, 0x04	; 4
    4712:	8d 91       	ld	r24, X+
    4714:	9d 91       	ld	r25, X+
    4716:	0d 90       	ld	r0, X+
    4718:	bc 91       	ld	r27, X
    471a:	a0 2d       	mov	r26, r0
    471c:	82 17       	cp	r24, r18
    471e:	93 07       	cpc	r25, r19
    4720:	a4 07       	cpc	r26, r20
    4722:	b5 07       	cpc	r27, r21
    4724:	18 f4       	brcc	.+6      	; 0x472c <__fpcmp_parts_f+0x90>
    4726:	66 23       	and	r22, r22
    4728:	41 f0       	breq	.+16     	; 0x473a <__fpcmp_parts_f+0x9e>
    472a:	0d c0       	rjmp	.+26     	; 0x4746 <__fpcmp_parts_f+0xaa>
    472c:	28 17       	cp	r18, r24
    472e:	39 07       	cpc	r19, r25
    4730:	4a 07       	cpc	r20, r26
    4732:	5b 07       	cpc	r21, r27
    4734:	28 f4       	brcc	.+10     	; 0x4740 <__fpcmp_parts_f+0xa4>
    4736:	66 23       	and	r22, r22
    4738:	31 f0       	breq	.+12     	; 0x4746 <__fpcmp_parts_f+0xaa>
    473a:	21 e0       	ldi	r18, 0x01	; 1
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	05 c0       	rjmp	.+10     	; 0x474a <__fpcmp_parts_f+0xae>
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	02 c0       	rjmp	.+4      	; 0x474a <__fpcmp_parts_f+0xae>
    4746:	2f ef       	ldi	r18, 0xFF	; 255
    4748:	3f ef       	ldi	r19, 0xFF	; 255
    474a:	c9 01       	movw	r24, r18
    474c:	08 95       	ret

0000474e <__udivmodhi4>:
    474e:	aa 1b       	sub	r26, r26
    4750:	bb 1b       	sub	r27, r27
    4752:	51 e1       	ldi	r21, 0x11	; 17
    4754:	07 c0       	rjmp	.+14     	; 0x4764 <__udivmodhi4_ep>

00004756 <__udivmodhi4_loop>:
    4756:	aa 1f       	adc	r26, r26
    4758:	bb 1f       	adc	r27, r27
    475a:	a6 17       	cp	r26, r22
    475c:	b7 07       	cpc	r27, r23
    475e:	10 f0       	brcs	.+4      	; 0x4764 <__udivmodhi4_ep>
    4760:	a6 1b       	sub	r26, r22
    4762:	b7 0b       	sbc	r27, r23

00004764 <__udivmodhi4_ep>:
    4764:	88 1f       	adc	r24, r24
    4766:	99 1f       	adc	r25, r25
    4768:	5a 95       	dec	r21
    476a:	a9 f7       	brne	.-22     	; 0x4756 <__udivmodhi4_loop>
    476c:	80 95       	com	r24
    476e:	90 95       	com	r25
    4770:	bc 01       	movw	r22, r24
    4772:	cd 01       	movw	r24, r26
    4774:	08 95       	ret

00004776 <__divmodhi4>:
    4776:	97 fb       	bst	r25, 7
    4778:	09 2e       	mov	r0, r25
    477a:	07 26       	eor	r0, r23
    477c:	0a d0       	rcall	.+20     	; 0x4792 <__divmodhi4_neg1>
    477e:	77 fd       	sbrc	r23, 7
    4780:	04 d0       	rcall	.+8      	; 0x478a <__divmodhi4_neg2>
    4782:	e5 df       	rcall	.-54     	; 0x474e <__udivmodhi4>
    4784:	06 d0       	rcall	.+12     	; 0x4792 <__divmodhi4_neg1>
    4786:	00 20       	and	r0, r0
    4788:	1a f4       	brpl	.+6      	; 0x4790 <__divmodhi4_exit>

0000478a <__divmodhi4_neg2>:
    478a:	70 95       	com	r23
    478c:	61 95       	neg	r22
    478e:	7f 4f       	sbci	r23, 0xFF	; 255

00004790 <__divmodhi4_exit>:
    4790:	08 95       	ret

00004792 <__divmodhi4_neg1>:
    4792:	f6 f7       	brtc	.-4      	; 0x4790 <__divmodhi4_exit>
    4794:	90 95       	com	r25
    4796:	81 95       	neg	r24
    4798:	9f 4f       	sbci	r25, 0xFF	; 255
    479a:	08 95       	ret

0000479c <__divmodsi4>:
    479c:	97 fb       	bst	r25, 7
    479e:	09 2e       	mov	r0, r25
    47a0:	05 26       	eor	r0, r21
    47a2:	0e d0       	rcall	.+28     	; 0x47c0 <__divmodsi4_neg1>
    47a4:	57 fd       	sbrc	r21, 7
    47a6:	04 d0       	rcall	.+8      	; 0x47b0 <__divmodsi4_neg2>
    47a8:	14 d0       	rcall	.+40     	; 0x47d2 <__udivmodsi4>
    47aa:	0a d0       	rcall	.+20     	; 0x47c0 <__divmodsi4_neg1>
    47ac:	00 1c       	adc	r0, r0
    47ae:	38 f4       	brcc	.+14     	; 0x47be <__divmodsi4_exit>

000047b0 <__divmodsi4_neg2>:
    47b0:	50 95       	com	r21
    47b2:	40 95       	com	r20
    47b4:	30 95       	com	r19
    47b6:	21 95       	neg	r18
    47b8:	3f 4f       	sbci	r19, 0xFF	; 255
    47ba:	4f 4f       	sbci	r20, 0xFF	; 255
    47bc:	5f 4f       	sbci	r21, 0xFF	; 255

000047be <__divmodsi4_exit>:
    47be:	08 95       	ret

000047c0 <__divmodsi4_neg1>:
    47c0:	f6 f7       	brtc	.-4      	; 0x47be <__divmodsi4_exit>
    47c2:	90 95       	com	r25
    47c4:	80 95       	com	r24
    47c6:	70 95       	com	r23
    47c8:	61 95       	neg	r22
    47ca:	7f 4f       	sbci	r23, 0xFF	; 255
    47cc:	8f 4f       	sbci	r24, 0xFF	; 255
    47ce:	9f 4f       	sbci	r25, 0xFF	; 255
    47d0:	08 95       	ret

000047d2 <__udivmodsi4>:
    47d2:	a1 e2       	ldi	r26, 0x21	; 33
    47d4:	1a 2e       	mov	r1, r26
    47d6:	aa 1b       	sub	r26, r26
    47d8:	bb 1b       	sub	r27, r27
    47da:	fd 01       	movw	r30, r26
    47dc:	0d c0       	rjmp	.+26     	; 0x47f8 <__udivmodsi4_ep>

000047de <__udivmodsi4_loop>:
    47de:	aa 1f       	adc	r26, r26
    47e0:	bb 1f       	adc	r27, r27
    47e2:	ee 1f       	adc	r30, r30
    47e4:	ff 1f       	adc	r31, r31
    47e6:	a2 17       	cp	r26, r18
    47e8:	b3 07       	cpc	r27, r19
    47ea:	e4 07       	cpc	r30, r20
    47ec:	f5 07       	cpc	r31, r21
    47ee:	20 f0       	brcs	.+8      	; 0x47f8 <__udivmodsi4_ep>
    47f0:	a2 1b       	sub	r26, r18
    47f2:	b3 0b       	sbc	r27, r19
    47f4:	e4 0b       	sbc	r30, r20
    47f6:	f5 0b       	sbc	r31, r21

000047f8 <__udivmodsi4_ep>:
    47f8:	66 1f       	adc	r22, r22
    47fa:	77 1f       	adc	r23, r23
    47fc:	88 1f       	adc	r24, r24
    47fe:	99 1f       	adc	r25, r25
    4800:	1a 94       	dec	r1
    4802:	69 f7       	brne	.-38     	; 0x47de <__udivmodsi4_loop>
    4804:	60 95       	com	r22
    4806:	70 95       	com	r23
    4808:	80 95       	com	r24
    480a:	90 95       	com	r25
    480c:	9b 01       	movw	r18, r22
    480e:	ac 01       	movw	r20, r24
    4810:	bd 01       	movw	r22, r26
    4812:	cf 01       	movw	r24, r30
    4814:	08 95       	ret

00004816 <__prologue_saves__>:
    4816:	2f 92       	push	r2
    4818:	3f 92       	push	r3
    481a:	4f 92       	push	r4
    481c:	5f 92       	push	r5
    481e:	6f 92       	push	r6
    4820:	7f 92       	push	r7
    4822:	8f 92       	push	r8
    4824:	9f 92       	push	r9
    4826:	af 92       	push	r10
    4828:	bf 92       	push	r11
    482a:	cf 92       	push	r12
    482c:	df 92       	push	r13
    482e:	ef 92       	push	r14
    4830:	ff 92       	push	r15
    4832:	0f 93       	push	r16
    4834:	1f 93       	push	r17
    4836:	cf 93       	push	r28
    4838:	df 93       	push	r29
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
    483e:	ca 1b       	sub	r28, r26
    4840:	db 0b       	sbc	r29, r27
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	cd bf       	out	0x3d, r28	; 61
    484c:	09 94       	ijmp

0000484e <__epilogue_restores__>:
    484e:	2a 88       	ldd	r2, Y+18	; 0x12
    4850:	39 88       	ldd	r3, Y+17	; 0x11
    4852:	48 88       	ldd	r4, Y+16	; 0x10
    4854:	5f 84       	ldd	r5, Y+15	; 0x0f
    4856:	6e 84       	ldd	r6, Y+14	; 0x0e
    4858:	7d 84       	ldd	r7, Y+13	; 0x0d
    485a:	8c 84       	ldd	r8, Y+12	; 0x0c
    485c:	9b 84       	ldd	r9, Y+11	; 0x0b
    485e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4860:	b9 84       	ldd	r11, Y+9	; 0x09
    4862:	c8 84       	ldd	r12, Y+8	; 0x08
    4864:	df 80       	ldd	r13, Y+7	; 0x07
    4866:	ee 80       	ldd	r14, Y+6	; 0x06
    4868:	fd 80       	ldd	r15, Y+5	; 0x05
    486a:	0c 81       	ldd	r16, Y+4	; 0x04
    486c:	1b 81       	ldd	r17, Y+3	; 0x03
    486e:	aa 81       	ldd	r26, Y+2	; 0x02
    4870:	b9 81       	ldd	r27, Y+1	; 0x01
    4872:	ce 0f       	add	r28, r30
    4874:	d1 1d       	adc	r29, r1
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	ed 01       	movw	r28, r26
    4882:	08 95       	ret

00004884 <ceil>:
    4884:	3b d0       	rcall	.+118    	; 0x48fc <__fp_trunc>
    4886:	80 f0       	brcs	.+32     	; 0x48a8 <ceil+0x24>
    4888:	9f 37       	cpi	r25, 0x7F	; 127
    488a:	40 f4       	brcc	.+16     	; 0x489c <ceil+0x18>
    488c:	91 11       	cpse	r25, r1
    488e:	0e f4       	brtc	.+2      	; 0x4892 <ceil+0xe>
    4890:	4d c0       	rjmp	.+154    	; 0x492c <__fp_szero>
    4892:	60 e0       	ldi	r22, 0x00	; 0
    4894:	70 e0       	ldi	r23, 0x00	; 0
    4896:	80 e8       	ldi	r24, 0x80	; 128
    4898:	9f e3       	ldi	r25, 0x3F	; 63
    489a:	08 95       	ret
    489c:	26 f0       	brts	.+8      	; 0x48a6 <ceil+0x22>
    489e:	1b 16       	cp	r1, r27
    48a0:	61 1d       	adc	r22, r1
    48a2:	71 1d       	adc	r23, r1
    48a4:	81 1d       	adc	r24, r1
    48a6:	01 c0       	rjmp	.+2      	; 0x48aa <__fp_mintl>
    48a8:	1b c0       	rjmp	.+54     	; 0x48e0 <__fp_mpack>

000048aa <__fp_mintl>:
    48aa:	88 23       	and	r24, r24
    48ac:	71 f4       	brne	.+28     	; 0x48ca <__fp_mintl+0x20>
    48ae:	77 23       	and	r23, r23
    48b0:	21 f0       	breq	.+8      	; 0x48ba <__fp_mintl+0x10>
    48b2:	98 50       	subi	r25, 0x08	; 8
    48b4:	87 2b       	or	r24, r23
    48b6:	76 2f       	mov	r23, r22
    48b8:	07 c0       	rjmp	.+14     	; 0x48c8 <__fp_mintl+0x1e>
    48ba:	66 23       	and	r22, r22
    48bc:	11 f4       	brne	.+4      	; 0x48c2 <__fp_mintl+0x18>
    48be:	99 27       	eor	r25, r25
    48c0:	0d c0       	rjmp	.+26     	; 0x48dc <__fp_mintl+0x32>
    48c2:	90 51       	subi	r25, 0x10	; 16
    48c4:	86 2b       	or	r24, r22
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	2a f0       	brmi	.+10     	; 0x48d6 <__fp_mintl+0x2c>
    48cc:	9a 95       	dec	r25
    48ce:	66 0f       	add	r22, r22
    48d0:	77 1f       	adc	r23, r23
    48d2:	88 1f       	adc	r24, r24
    48d4:	da f7       	brpl	.-10     	; 0x48cc <__fp_mintl+0x22>
    48d6:	88 0f       	add	r24, r24
    48d8:	96 95       	lsr	r25
    48da:	87 95       	ror	r24
    48dc:	97 f9       	bld	r25, 7
    48de:	08 95       	ret

000048e0 <__fp_mpack>:
    48e0:	9f 3f       	cpi	r25, 0xFF	; 255
    48e2:	31 f0       	breq	.+12     	; 0x48f0 <__fp_mpack_finite+0xc>

000048e4 <__fp_mpack_finite>:
    48e4:	91 50       	subi	r25, 0x01	; 1
    48e6:	20 f4       	brcc	.+8      	; 0x48f0 <__fp_mpack_finite+0xc>
    48e8:	87 95       	ror	r24
    48ea:	77 95       	ror	r23
    48ec:	67 95       	ror	r22
    48ee:	b7 95       	ror	r27
    48f0:	88 0f       	add	r24, r24
    48f2:	91 1d       	adc	r25, r1
    48f4:	96 95       	lsr	r25
    48f6:	87 95       	ror	r24
    48f8:	97 f9       	bld	r25, 7
    48fa:	08 95       	ret

000048fc <__fp_trunc>:
    48fc:	45 d0       	rcall	.+138    	; 0x4988 <__fp_splitA>
    48fe:	a0 f0       	brcs	.+40     	; 0x4928 <__fp_trunc+0x2c>
    4900:	be e7       	ldi	r27, 0x7E	; 126
    4902:	b9 17       	cp	r27, r25
    4904:	88 f4       	brcc	.+34     	; 0x4928 <__fp_trunc+0x2c>
    4906:	bb 27       	eor	r27, r27
    4908:	9f 38       	cpi	r25, 0x8F	; 143
    490a:	60 f4       	brcc	.+24     	; 0x4924 <__fp_trunc+0x28>
    490c:	16 16       	cp	r1, r22
    490e:	b1 1d       	adc	r27, r1
    4910:	67 2f       	mov	r22, r23
    4912:	78 2f       	mov	r23, r24
    4914:	88 27       	eor	r24, r24
    4916:	98 5f       	subi	r25, 0xF8	; 248
    4918:	f7 cf       	rjmp	.-18     	; 0x4908 <__fp_trunc+0xc>
    491a:	86 95       	lsr	r24
    491c:	77 95       	ror	r23
    491e:	67 95       	ror	r22
    4920:	b1 1d       	adc	r27, r1
    4922:	93 95       	inc	r25
    4924:	96 39       	cpi	r25, 0x96	; 150
    4926:	c8 f3       	brcs	.-14     	; 0x491a <__fp_trunc+0x1e>
    4928:	08 95       	ret

0000492a <__fp_zero>:
    492a:	e8 94       	clt

0000492c <__fp_szero>:
    492c:	bb 27       	eor	r27, r27
    492e:	66 27       	eor	r22, r22
    4930:	77 27       	eor	r23, r23
    4932:	cb 01       	movw	r24, r22
    4934:	97 f9       	bld	r25, 7
    4936:	08 95       	ret

00004938 <round>:
    4938:	27 d0       	rcall	.+78     	; 0x4988 <__fp_splitA>
    493a:	e0 f0       	brcs	.+56     	; 0x4974 <round+0x3c>
    493c:	9e 37       	cpi	r25, 0x7E	; 126
    493e:	d8 f0       	brcs	.+54     	; 0x4976 <round+0x3e>
    4940:	96 39       	cpi	r25, 0x96	; 150
    4942:	b8 f4       	brcc	.+46     	; 0x4972 <round+0x3a>
    4944:	9e 38       	cpi	r25, 0x8E	; 142
    4946:	48 f4       	brcc	.+18     	; 0x495a <round+0x22>
    4948:	67 2f       	mov	r22, r23
    494a:	78 2f       	mov	r23, r24
    494c:	88 27       	eor	r24, r24
    494e:	98 5f       	subi	r25, 0xF8	; 248
    4950:	f9 cf       	rjmp	.-14     	; 0x4944 <round+0xc>
    4952:	86 95       	lsr	r24
    4954:	77 95       	ror	r23
    4956:	67 95       	ror	r22
    4958:	93 95       	inc	r25
    495a:	95 39       	cpi	r25, 0x95	; 149
    495c:	d0 f3       	brcs	.-12     	; 0x4952 <round+0x1a>
    495e:	b6 2f       	mov	r27, r22
    4960:	b1 70       	andi	r27, 0x01	; 1
    4962:	6b 0f       	add	r22, r27
    4964:	71 1d       	adc	r23, r1
    4966:	81 1d       	adc	r24, r1
    4968:	20 f4       	brcc	.+8      	; 0x4972 <round+0x3a>
    496a:	87 95       	ror	r24
    496c:	77 95       	ror	r23
    496e:	67 95       	ror	r22
    4970:	93 95       	inc	r25
    4972:	9b cf       	rjmp	.-202    	; 0x48aa <__fp_mintl>
    4974:	b5 cf       	rjmp	.-150    	; 0x48e0 <__fp_mpack>
    4976:	da cf       	rjmp	.-76     	; 0x492c <__fp_szero>

00004978 <__fp_split3>:
    4978:	57 fd       	sbrc	r21, 7
    497a:	90 58       	subi	r25, 0x80	; 128
    497c:	44 0f       	add	r20, r20
    497e:	55 1f       	adc	r21, r21
    4980:	59 f0       	breq	.+22     	; 0x4998 <__fp_splitA+0x10>
    4982:	5f 3f       	cpi	r21, 0xFF	; 255
    4984:	71 f0       	breq	.+28     	; 0x49a2 <__fp_splitA+0x1a>
    4986:	47 95       	ror	r20

00004988 <__fp_splitA>:
    4988:	88 0f       	add	r24, r24
    498a:	97 fb       	bst	r25, 7
    498c:	99 1f       	adc	r25, r25
    498e:	61 f0       	breq	.+24     	; 0x49a8 <__fp_splitA+0x20>
    4990:	9f 3f       	cpi	r25, 0xFF	; 255
    4992:	79 f0       	breq	.+30     	; 0x49b2 <__fp_splitA+0x2a>
    4994:	87 95       	ror	r24
    4996:	08 95       	ret
    4998:	12 16       	cp	r1, r18
    499a:	13 06       	cpc	r1, r19
    499c:	14 06       	cpc	r1, r20
    499e:	55 1f       	adc	r21, r21
    49a0:	f2 cf       	rjmp	.-28     	; 0x4986 <__fp_split3+0xe>
    49a2:	46 95       	lsr	r20
    49a4:	f1 df       	rcall	.-30     	; 0x4988 <__fp_splitA>
    49a6:	08 c0       	rjmp	.+16     	; 0x49b8 <__fp_splitA+0x30>
    49a8:	16 16       	cp	r1, r22
    49aa:	17 06       	cpc	r1, r23
    49ac:	18 06       	cpc	r1, r24
    49ae:	99 1f       	adc	r25, r25
    49b0:	f1 cf       	rjmp	.-30     	; 0x4994 <__fp_splitA+0xc>
    49b2:	86 95       	lsr	r24
    49b4:	71 05       	cpc	r23, r1
    49b6:	61 05       	cpc	r22, r1
    49b8:	08 94       	sec
    49ba:	08 95       	ret

000049bc <_exit>:
    49bc:	f8 94       	cli

000049be <__stop_program>:
    49be:	ff cf       	rjmp	.-2      	; 0x49be <__stop_program>
