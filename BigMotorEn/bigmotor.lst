
bigmotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00003f82  00004016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000126  00800116  00800116  0000402c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007faa  00000000  00000000  00004285  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002861  00000000  00000000  0000c22f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001acf  00000000  00000000  0000ea90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000012d8  00000000  00000000  00010560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000029da  00000000  00000000  00011838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000576f  00000000  00000000  00014212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000358  00000000  00000000  00019981  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 85 10 	jmp	0x210a	; 0x210a <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__vector_22>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_27>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	44 72       	andi	r20, 0x24	; 36
      7e:	69 76       	andi	r22, 0x69	; 105
      80:	65 73       	andi	r22, 0x35	; 53
      82:	20 44       	sbci	r18, 0x40	; 64
      84:	43 20       	and	r4, r3
      86:	6d 6f       	ori	r22, 0xFD	; 253
      88:	74 6f       	ori	r23, 0xF4	; 244
      8a:	72 00       	.word	0x0072	; ????

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e8       	ldi	r30, 0x82	; 130
      a0:	ff e3       	ldi	r31, 0x3F	; 63
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 31       	cpi	r26, 0x16	; 22
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	22 e0       	ldi	r18, 0x02	; 2
      b0:	a6 e1       	ldi	r26, 0x16	; 22
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ac 33       	cpi	r26, 0x3C	; 60
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 98 1c 	call	0x3930	; 0x3930 <main>
      c2:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z24can_prep_eeprom_dump_msgP4sCANPh>:

bool okay_to_read_cal = false;


void can_prep_eeprom_dump_msg( sCAN* mMsg, byte* addr )
{
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	ec 01       	movw	r28, r24
      d4:	8b 01       	movw	r16, r22
	mMsg->id  = create_CAN_eid( 0x0111, MyInstance );
      d6:	60 91 c3 01 	lds	r22, 0x01C3
      da:	81 e1       	ldi	r24, 0x11	; 17
      dc:	91 e0       	ldi	r25, 0x01	; 1
      de:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
      e2:	68 83       	st	Y, r22
      e4:	79 83       	std	Y+1, r23	; 0x01
      e6:	8a 83       	std	Y+2, r24	; 0x02
      e8:	9b 83       	std	Y+3, r25	; 0x03
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      ea:	f9 99       	sbic	0x1f, 1	; 31
      ec:	fe cf       	rjmp	.-4      	; 0xea <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x20>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
      ee:	12 bd       	out	0x22, r17	; 34
      f0:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
      f2:	f8 9a       	sbi	0x1f, 0	; 31
      f4:	80 b5       	in	r24, 0x20	; 32
    mMsg->data[0] = (eeprom_read_byte( addr++ ));
      f6:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (eeprom_read_byte( addr++ ));
      f8:	c8 01       	movw	r24, r16
      fa:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      fc:	f9 99       	sbic	0x1f, 1	; 31
      fe:	fe cf       	rjmp	.-4      	; 0xfc <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x32>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     100:	92 bd       	out	0x22, r25	; 34
     102:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     104:	f8 9a       	sbi	0x1f, 0	; 31
     106:	80 b5       	in	r24, 0x20	; 32
     108:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (eeprom_read_byte( addr++ ));
     10a:	c8 01       	movw	r24, r16
     10c:	02 96       	adiw	r24, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     10e:	f9 99       	sbic	0x1f, 1	; 31
     110:	fe cf       	rjmp	.-4      	; 0x10e <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x44>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     112:	92 bd       	out	0x22, r25	; 34
     114:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     116:	f8 9a       	sbi	0x1f, 0	; 31
     118:	80 b5       	in	r24, 0x20	; 32
     11a:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (eeprom_read_byte( addr++ ));
     11c:	c8 01       	movw	r24, r16
     11e:	03 96       	adiw	r24, 0x03	; 3
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     120:	f9 99       	sbic	0x1f, 1	; 31
     122:	fe cf       	rjmp	.-4      	; 0x120 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x56>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     124:	92 bd       	out	0x22, r25	; 34
     126:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     128:	f8 9a       	sbi	0x1f, 0	; 31
     12a:	80 b5       	in	r24, 0x20	; 32
     12c:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (eeprom_read_byte( addr++ ));
     12e:	c8 01       	movw	r24, r16
     130:	04 96       	adiw	r24, 0x04	; 4
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     132:	f9 99       	sbic	0x1f, 1	; 31
     134:	fe cf       	rjmp	.-4      	; 0x132 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x68>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     136:	92 bd       	out	0x22, r25	; 34
     138:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     13a:	f8 9a       	sbi	0x1f, 0	; 31
     13c:	80 b5       	in	r24, 0x20	; 32
     13e:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = (eeprom_read_byte( addr++ ));
     140:	c8 01       	movw	r24, r16
     142:	05 96       	adiw	r24, 0x05	; 5
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     144:	f9 99       	sbic	0x1f, 1	; 31
     146:	fe cf       	rjmp	.-4      	; 0x144 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x7a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     148:	92 bd       	out	0x22, r25	; 34
     14a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     14c:	f8 9a       	sbi	0x1f, 0	; 31
     14e:	80 b5       	in	r24, 0x20	; 32
     150:	8a 87       	std	Y+10, r24	; 0x0a
    mMsg->data[6] = (eeprom_read_byte( addr++ ));
     152:	c8 01       	movw	r24, r16
     154:	06 96       	adiw	r24, 0x06	; 6
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     156:	f9 99       	sbic	0x1f, 1	; 31
     158:	fe cf       	rjmp	.-4      	; 0x156 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x8c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     15a:	92 bd       	out	0x22, r25	; 34
     15c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     15e:	f8 9a       	sbi	0x1f, 0	; 31
     160:	80 b5       	in	r24, 0x20	; 32
     162:	8b 87       	std	Y+11, r24	; 0x0b
    mMsg->data[7] = (eeprom_read_byte( addr++ ));
     164:	09 5f       	subi	r16, 0xF9	; 249
     166:	1f 4f       	sbci	r17, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     168:	f9 99       	sbic	0x1f, 1	; 31
     16a:	fe cf       	rjmp	.-4      	; 0x168 <_Z24can_prep_eeprom_dump_msgP4sCANPh+0x9e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     16c:	12 bd       	out	0x22, r17	; 34
     16e:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     170:	f8 9a       	sbi	0x1f, 0	; 31
     172:	80 b5       	in	r24, 0x20	; 32
     174:	8c 87       	std	Y+12, r24	; 0x0c
    mMsg->header.DLC	= 8;
     176:	8c 81       	ldd	r24, Y+4	; 0x04
     178:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr    = 0;
     17a:	80 61       	ori	r24, 0x10	; 16
     17c:	8e 7f       	andi	r24, 0xFE	; 254
     17e:	8c 83       	std	Y+4, r24	; 0x04
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	08 95       	ret

0000018a <_Z25can_prep_eeprom_dump1_msgv>:
void can_prep_eeprom_dump1_msg( )
{
	byte* addr = INSTANCE_EEPROM_ADDRESS;
	can_prep_eeprom_dump_msg( &msg1, addr );
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	8b ea       	ldi	r24, 0xAB	; 171
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 0, &msg1 );
     196:	6b ea       	ldi	r22, 0xAB	; 171
     198:	71 e0       	ldi	r23, 0x01	; 1
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <_Z12can_send_msghP4sCAN>

000001a0 <_Z25can_prep_eeprom_dump2_msgv>:
}
void can_prep_eeprom_dump2_msg( )
{
	byte* addr = (byte*)(INSTANCE_EEPROM_ADDRESS+8);
	can_prep_eeprom_dump_msg( &msg2, addr );
     1a0:	69 e0       	ldi	r22, 0x09	; 9
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	8c e9       	ldi	r24, 0x9C	; 156
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 2, &msg2 );
     1ac:	6c e9       	ldi	r22, 0x9C	; 156
     1ae:	71 e0       	ldi	r23, 0x01	; 1
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <_Z12can_send_msghP4sCAN>

000001b6 <_Z25can_prep_eeprom_dump3_msgv>:
}
void can_prep_eeprom_dump3_msg( )
{
	byte* addr = (byte*)(INSTANCE_EEPROM_ADDRESS+16);
	can_prep_eeprom_dump_msg( &msg1, addr );
     1b6:	61 e1       	ldi	r22, 0x11	; 17
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	8b ea       	ldi	r24, 0xAB	; 171
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 65 00 	call	0xca	; 0xca <_Z24can_prep_eeprom_dump_msgP4sCANPh>
	can_send_msg( 4, &msg1 );
     1c2:	6b ea       	ldi	r22, 0xAB	; 171
     1c4:	71 e0       	ldi	r23, 0x01	; 1
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <_Z12can_send_msghP4sCAN>

000001cc <_Z4initv>:
}
byte ResetReason = 0x00;

void init()
{
	ResetReason = MCUSR;		
     1cc:	84 b7       	in	r24, 0x34	; 52
     1ce:	80 93 18 01 	sts	0x0118, r24
 	cli();
     1d2:	f8 94       	cli
    chip_init ();    				// Chip initialization
     1d4:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <_Z9chip_initv>
	init_leds ();
     1d8:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_Z9init_ledsv>
	delay(1000000);					// ~ 2 sec
     1dc:	60 e4       	ldi	r22, 0x40	; 64
     1de:	72 e4       	ldi	r23, 0x42	; 66
     1e0:	8f e0       	ldi	r24, 0x0F	; 15
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 3e 1a 	call	0x347c	; 0x347c <_Z5delayl>
	read_cal();						// Read everything including motor stops.	
     1e8:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z8read_calv>
	// yes can_init() needs MyInstance to be set already for filtering!
	can_init(CAN_250K_BAUD);		/* Enables Mob0 for Reception! */
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	0e 94 b3 11 	call	0x2366	; 0x2366 <_Z8can_inith>

    // INIT MYINSTANCE:	
	config_init();
     1f2:	0e 94 88 1b 	call	0x3710	; 0x3710 <_Z11config_initv>
	can_instance_init();
     1f6:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z17can_instance_initv>
	
    set_rx_callback			( can_file_message );
     1fa:	8e e4       	ldi	r24, 0x4E	; 78
     1fc:	93 e0       	ldi	r25, 0x03	; 3
     1fe:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_Z15set_rx_callbackPFvP4sCANE>
	set_configure_callback	( config_change    );
     202:	86 e2       	ldi	r24, 0x26	; 38
     204:	96 e0       	ldi	r25, 0x06	; 6
     206:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <_Z22set_configure_callbackPFvhE>
	sei();
     20a:	78 94       	sei

	OS_InitTask();
     20c:	0e 94 85 1a 	call	0x350a	; 0x350a <_Z11OS_InitTaskv>
	pot_init();	
     210:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z8pot_initv>
	motor_init ();
     214:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <_Z10motor_initv>

00000218 <_Z17extract_float_msgPh>:
/**************** VARIABLES *************************************/
uint8_t  size = sizeof(float);

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	00 d0       	rcall	.+0      	; 0x21e <_Z17extract_float_msgPh+0x6>
     21e:	00 d0       	rcall	.+0      	; 0x220 <_Z17extract_float_msgPh+0x8>
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	dc 01       	movw	r26, r24
     226:	fe 01       	movw	r30, r28
     228:	31 96       	adiw	r30, 0x01	; 1
     22a:	ce 01       	movw	r24, r28
     22c:	05 96       	adiw	r24, 0x05	; 5
	float_array 	floater;
	for (int i=0; i<4; i++)
		floater.array[i] = mdata[i];
     22e:	2d 91       	ld	r18, X+
     230:	21 93       	st	Z+, r18

/************************ UTILITY FUNCTIONS *******************************/
float extract_float_msg( byte* mdata )
{
	float_array 	floater;
	for (int i=0; i<4; i++)
     232:	e8 17       	cp	r30, r24
     234:	f9 07       	cpc	r31, r25
     236:	d9 f7       	brne	.-10     	; 0x22e <_Z17extract_float_msgPh+0x16>
		floater.array[i] = mdata[i];
	return floater.value;
     238:	69 81       	ldd	r22, Y+1	; 0x01
     23a:	7a 81       	ldd	r23, Y+2	; 0x02
     23c:	8b 81       	ldd	r24, Y+3	; 0x03
     23e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <_Z15extract_word_bePh>:
word extract_word_be( byte* mData )
{
     24e:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= (mData[0]<<8);
     250:	80 81       	ld	r24, Z
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	98 2f       	mov	r25, r24
     256:	88 27       	eor	r24, r24
     258:	aa 27       	eor	r26, r26
     25a:	97 fd       	sbrc	r25, 7
     25c:	a0 95       	com	r26
     25e:	ba 2f       	mov	r27, r26
	retval |= mData[1];
     260:	21 81       	ldd	r18, Z+1	; 0x01
     262:	82 2b       	or	r24, r18
	return retval;
}
     264:	08 95       	ret

00000266 <_Z15extract_word_lePh>:
word extract_word_le( byte* mData )
{
     266:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     268:	81 81       	ldd	r24, Z+1	; 0x01
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	98 2f       	mov	r25, r24
     26e:	88 27       	eor	r24, r24
     270:	aa 27       	eor	r26, r26
     272:	97 fd       	sbrc	r25, 7
     274:	a0 95       	com	r26
     276:	ba 2f       	mov	r27, r26
	return retval;
}
word extract_word_le( byte* mData )
{
	long int retval = 0;
	retval |= mData[0];
     278:	20 81       	ld	r18, Z
	retval |= (mData[1]<<8 );
     27a:	82 2b       	or	r24, r18
	return retval;
}
     27c:	08 95       	ret

0000027e <_Z19extract_long_int_bePh>:

long int extract_long_int_be( byte* mData)
{
     27e:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
     280:	20 81       	ld	r18, Z
	retval |= (((unsigned long)mData[1])<<16);
     282:	61 81       	ldd	r22, Z+1	; 0x01
     284:	86 2f       	mov	r24, r22
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	77 27       	eor	r23, r23
     28e:	66 27       	eor	r22, r22
     290:	92 2b       	or	r25, r18
	retval |= (((unsigned long)mData[2])<<8);
	retval |= (((unsigned long)mData[3]));
     292:	23 81       	ldd	r18, Z+3	; 0x03
long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
	retval |= (((unsigned long)mData[2])<<8);
     294:	62 2b       	or	r22, r18
     296:	22 81       	ldd	r18, Z+2	; 0x02
	retval |= (((unsigned long)mData[3]));
     298:	72 2b       	or	r23, r18
	return retval;
}
     29a:	08 95       	ret

0000029c <_Z19extract_long_int_lePh>:
long int extract_long_int_le( byte* mData)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	fc 01       	movw	r30, r24
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     2a2:	22 81       	ldd	r18, Z+2	; 0x02
	retval |= ((long)mData[3]<<24);
     2a4:	63 81       	ldd	r22, Z+3	; 0x03
     2a6:	86 2f       	mov	r24, r22
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	98 2f       	mov	r25, r24
     2b0:	88 27       	eor	r24, r24
     2b2:	77 27       	eor	r23, r23
     2b4:	66 27       	eor	r22, r22
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     2b6:	82 2b       	or	r24, r18
	return retval;
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
     2b8:	20 81       	ld	r18, Z
	retval |= (mData[1]<<8 );
	retval |= ((long)mData[2])<<16;
     2ba:	62 2b       	or	r22, r18
}
long int extract_long_int_le( byte* mData)
{
	long int retval = 0;
	retval |= mData[0];
	retval |= (mData[1]<<8 );
     2bc:	01 81       	ldd	r16, Z+1	; 0x01
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	10 2f       	mov	r17, r16
     2c2:	00 27       	eor	r16, r16
     2c4:	22 27       	eor	r18, r18
     2c6:	17 fd       	sbrc	r17, 7
     2c8:	20 95       	com	r18
     2ca:	32 2f       	mov	r19, r18
	retval |= ((long)mData[2])<<16;
	retval |= ((long)mData[3]<<24);
     2cc:	60 2b       	or	r22, r16
     2ce:	71 2b       	or	r23, r17
     2d0:	82 2b       	or	r24, r18
     2d2:	93 2b       	or	r25, r19
	return retval;
}
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <_Z17can_proc_tilt_msgP4sCAN>:
}

/* Extract angle from the Message */
#define KConst 0.25
void can_proc_tilt_msg( sCAN* mMsg )
{
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
	byte yh  = mMsg->data[3];
	byte yl  = mMsg->data[2];
	short y1  = ((yh<<8) | yl);
     2de:	fc 01       	movw	r30, r24
     2e0:	60 85       	ldd	r22, Z+8	; 0x08
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	76 2f       	mov	r23, r22
     2e6:	66 27       	eor	r22, r22
     2e8:	87 81       	ldd	r24, Z+7	; 0x07
     2ea:	68 2b       	or	r22, r24
	float y2 = ((float)y1 / (16535.0));
     2ec:	88 27       	eor	r24, r24
     2ee:	77 fd       	sbrc	r23, 7
     2f0:	80 95       	com	r24
     2f2:	98 2f       	mov	r25, r24
     2f4:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	3e e2       	ldi	r19, 0x2E	; 46
     2fc:	41 e8       	ldi	r20, 0x81	; 129
     2fe:	56 e4       	ldi	r21, 0x46	; 70
     300:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
	// multiply by proportionality constant

	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
     304:	2a e0       	ldi	r18, 0x0A	; 10
     306:	20 93 2c 01 	sts	0x012C, r18
	Destination.speed     = fabs(y2);
     30a:	8b 01       	movw	r16, r22
     30c:	9c 01       	movw	r18, r24
     30e:	3f 77       	andi	r19, 0x7F	; 127
     310:	00 93 37 01 	sts	0x0137, r16
     314:	10 93 38 01 	sts	0x0138, r17
     318:	20 93 39 01 	sts	0x0139, r18
     31c:	30 93 3a 01 	sts	0x013A, r19
	Destination.direction = (y2 > 0);
     320:	11 e0       	ldi	r17, 0x01	; 1
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	a9 01       	movw	r20, r18
     328:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
     32c:	18 16       	cp	r1, r24
     32e:	2c f4       	brge	.+10     	; 0x33a <_Z17can_proc_tilt_msgP4sCAN+0x60>
     330:	10 93 36 01 	sts	0x0136, r17
}
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	08 95       	ret
	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
	Destination.speed     = fabs(y2);
	Destination.direction = (y2 > 0);
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	10 93 36 01 	sts	0x0136, r17
}
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	08 95       	ret

00000346 <_Z21can_proc_set_stop_msgP4sCAN>:

/* Extract angle from the Message */
void can_proc_set_stop_msg( sCAN* mMsg )
{
     346:	fc 01       	movw	r30, r24
	if (mMsg->data[0] == 1)
     348:	85 81       	ldd	r24, Z+5	; 0x05
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	39 f1       	breq	.+78     	; 0x39c <_Z21can_proc_set_stop_msgP4sCAN+0x56>
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
	} else if (mMsg->data[0] == 2)
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	09 f0       	breq	.+2      	; 0x354 <_Z21can_proc_set_stop_msgP4sCAN+0xe>
     352:	08 95       	ret
}

long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
     354:	86 81       	ldd	r24, Z+6	; 0x06
	retval |= (((unsigned long)mData[1])<<16);
     356:	47 81       	ldd	r20, Z+7	; 0x07
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	ba 01       	movw	r22, r20
     360:	55 27       	eor	r21, r21
     362:	44 27       	eor	r20, r20
     364:	78 2b       	or	r23, r24
	retval |= (((unsigned long)mData[2])<<8);
	retval |= (((unsigned long)mData[3]));
     366:	81 85       	ldd	r24, Z+9	; 0x09
long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
	retval |= (((unsigned long)mData[2])<<8);
     368:	48 2b       	or	r20, r24
     36a:	80 85       	ldd	r24, Z+8	; 0x08
	retval |= (((unsigned long)mData[3]));
     36c:	58 2b       	or	r21, r24
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
		EndPoint1.value = extract_word_be	 ( &(mMsg->data[5]) );
	} else if (mMsg->data[0] == 2)
	{
		EndPoint2.angle = extract_long_int_be( &(mMsg->data[1]) );
     36e:	40 93 20 01 	sts	0x0120, r20
     372:	50 93 21 01 	sts	0x0121, r21
     376:	60 93 22 01 	sts	0x0122, r22
     37a:	70 93 23 01 	sts	0x0123, r23
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     37e:	42 85       	ldd	r20, Z+10	; 0x0a
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	54 2f       	mov	r21, r20
     384:	44 27       	eor	r20, r20
     386:	66 27       	eor	r22, r22
     388:	57 fd       	sbrc	r21, 7
     38a:	60 95       	com	r22
     38c:	76 2f       	mov	r23, r22
	retval |= mData[1];
     38e:	83 85       	ldd	r24, Z+11	; 0x0b
     390:	48 2b       	or	r20, r24
	return retval;
     392:	50 93 25 01 	sts	0x0125, r21
     396:	40 93 24 01 	sts	0x0124, r20
     39a:	08 95       	ret
}

long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
     39c:	86 81       	ldd	r24, Z+6	; 0x06
	retval |= (((unsigned long)mData[1])<<16);
     39e:	47 81       	ldd	r20, Z+7	; 0x07
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	ba 01       	movw	r22, r20
     3a8:	55 27       	eor	r21, r21
     3aa:	44 27       	eor	r20, r20
     3ac:	78 2b       	or	r23, r24
	retval |= (((unsigned long)mData[2])<<8);
	retval |= (((unsigned long)mData[3]));
     3ae:	81 85       	ldd	r24, Z+9	; 0x09
long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
	retval |= (((unsigned long)mData[2])<<8);
     3b0:	48 2b       	or	r20, r24
     3b2:	80 85       	ldd	r24, Z+8	; 0x08
	retval |= (((unsigned long)mData[3]));
     3b4:	58 2b       	or	r21, r24
/* Extract angle from the Message */
void can_proc_set_stop_msg( sCAN* mMsg )
{
	if (mMsg->data[0] == 1)
	{
		EndPoint1.angle = extract_long_int_be( &(mMsg->data[1]) );
     3b6:	40 93 26 01 	sts	0x0126, r20
     3ba:	50 93 27 01 	sts	0x0127, r21
     3be:	60 93 28 01 	sts	0x0128, r22
     3c2:	70 93 29 01 	sts	0x0129, r23
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     3c6:	42 85       	ldd	r20, Z+10	; 0x0a
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	54 2f       	mov	r21, r20
     3cc:	44 27       	eor	r20, r20
     3ce:	66 27       	eor	r22, r22
     3d0:	57 fd       	sbrc	r21, 7
     3d2:	60 95       	com	r22
     3d4:	76 2f       	mov	r23, r22
	retval |= mData[1];
     3d6:	83 85       	ldd	r24, Z+11	; 0x0b
     3d8:	48 2b       	or	r20, r24
	return retval;
     3da:	50 93 2b 01 	sts	0x012B, r21
     3de:	40 93 2a 01 	sts	0x012A, r20
     3e2:	08 95       	ret

000003e4 <_Z26can_proc_move_to_angle_msgP4sCAN>:
	//save_cal();
}

/* Extract angle from the Message */
void can_proc_move_to_angle_msg ( sCAN* mMsg )
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
}

long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
     3ea:	2d 81       	ldd	r18, Y+5	; 0x05
	retval |= (((unsigned long)mData[1])<<16);
     3ec:	6e 81       	ldd	r22, Y+6	; 0x06
     3ee:	86 2f       	mov	r24, r22
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	77 27       	eor	r23, r23
     3f8:	66 27       	eor	r22, r22
     3fa:	92 2b       	or	r25, r18
	retval |= (((unsigned long)mData[2])<<8);
	retval |= (((unsigned long)mData[3]));
     3fc:	28 85       	ldd	r18, Y+8	; 0x08
long int extract_long_int_be( byte* mData)
{
	long int retval = 0;
	retval |= (((unsigned long)mData[0])<<24);
	retval |= (((unsigned long)mData[1])<<16);
	retval |= (((unsigned long)mData[2])<<8);
     3fe:	62 2b       	or	r22, r18
     400:	2f 81       	ldd	r18, Y+7	; 0x07
	retval |= (((unsigned long)mData[3]));
     402:	72 2b       	or	r23, r18
void can_proc_move_to_angle_msg ( sCAN* mMsg )
{
	// Angle is a 4 byte signed integer.  
	// It is degrees * 100 
	long int tmp_angle 	 		  = extract_long_int_be( mMsg->data );
	Destination.starting_position = PotSample[1];
     404:	20 91 71 01 	lds	r18, 0x0171
     408:	30 91 72 01 	lds	r19, 0x0172
     40c:	30 93 33 01 	sts	0x0133, r19
     410:	20 93 32 01 	sts	0x0132, r18
	Destination.position 		  = convert_to_value(tmp_angle);
     414:	0e 94 44 0a 	call	0x1488	; 0x1488 <_Z16convert_to_valuel>
     418:	90 93 35 01 	sts	0x0135, r25
     41c:	80 93 34 01 	sts	0x0134, r24
	Destination.coast 			  = 0x00;  // apply when destination is reached.
     420:	10 92 3f 01 	sts	0x013F, r1

	short speed  = (mMsg->data[4]<<8) + mMsg->data[5];
     424:	89 85       	ldd	r24, Y+9	; 0x09
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	98 2f       	mov	r25, r24
     42a:	88 27       	eor	r24, r24
     42c:	2a 85       	ldd	r18, Y+10	; 0x0a
     42e:	82 0f       	add	r24, r18
     430:	91 1d       	adc	r25, r1
	Destination.speed = (speed/100);	    // hundredth percent is sent.
     432:	64 e6       	ldi	r22, 0x64	; 100
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divmodhi4>
     43a:	88 27       	eor	r24, r24
     43c:	77 fd       	sbrc	r23, 7
     43e:	80 95       	com	r24
     440:	98 2f       	mov	r25, r24
     442:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     446:	60 93 37 01 	sts	0x0137, r22
     44a:	70 93 38 01 	sts	0x0138, r23
     44e:	80 93 39 01 	sts	0x0139, r24
     452:	90 93 3a 01 	sts	0x013A, r25
	get_direction_to_destination();
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
	Destination.position 		  = convert_to_value(tmp_angle);
	Destination.coast 			  = 0x00;  // apply when destination is reached.

	short speed  = (mMsg->data[4]<<8) + mMsg->data[5];
	Destination.speed = (speed/100);	    // hundredth percent is sent.
	get_direction_to_destination();
     45a:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <_Z28get_direction_to_destinationv>

0000045e <_Z23can_proc_move_speed_msgP4sCAN>:
}

/* Extract angle from the Message */
void can_proc_move_speed_msg( sCAN* mMsg )
{
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     466:	fc 01       	movw	r30, r24
     468:	45 81       	ldd	r20, Z+5	; 0x05
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	54 2f       	mov	r21, r20
     46e:	44 27       	eor	r20, r20
     470:	66 27       	eor	r22, r22
     472:	57 fd       	sbrc	r21, 7
     474:	60 95       	com	r22
     476:	76 2f       	mov	r23, r22
	retval |= mData[1];
     478:	86 81       	ldd	r24, Z+6	; 0x06
     47a:	48 2b       	or	r20, r24
{
	// speed is a float
	// Value is a number [-100.00 to 100.00]  * 100  == [-10000..10000]
	// So 10,000 represents 100.00%
	short speed = extract_word_be( mMsg->data );	
	Destination.coast = 0; 
     47c:	10 92 3f 01 	sts	0x013F, r1
	Destination.speed = ((float)speed / 10000.0);
     480:	ba 01       	movw	r22, r20
     482:	88 27       	eor	r24, r24
     484:	77 fd       	sbrc	r23, 7
     486:	80 95       	com	r24
     488:	98 2f       	mov	r25, r24
     48a:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e4       	ldi	r19, 0x40	; 64
     492:	4c e1       	ldi	r20, 0x1C	; 28
     494:	56 e4       	ldi	r21, 0x46	; 70
     496:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     49a:	6b 01       	movw	r12, r22
     49c:	7c 01       	movw	r14, r24
     49e:	60 93 37 01 	sts	0x0137, r22
     4a2:	70 93 38 01 	sts	0x0138, r23
     4a6:	80 93 39 01 	sts	0x0139, r24
     4aa:	90 93 3a 01 	sts	0x013A, r25
	if (Destination.speed > 0)
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	a9 01       	movw	r20, r18
     4b4:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
     4b8:	18 16       	cp	r1, r24
     4ba:	44 f4       	brge	.+16     	; 0x4cc <_Z23can_proc_move_speed_msgP4sCAN+0x6e>
		Destination.direction = 1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 36 01 	sts	0x0136, r24
	else {
		Destination.direction = 0;
		Destination.speed = -Destination.speed;	// make it positive
	}
}
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	08 95       	ret
	Destination.coast = 0; 
	Destination.speed = ((float)speed / 10000.0);
	if (Destination.speed > 0)
		Destination.direction = 1;
	else {
		Destination.direction = 0;
     4cc:	10 92 36 01 	sts	0x0136, r1
		Destination.speed = -Destination.speed;	// make it positive
     4d0:	f7 fa       	bst	r15, 7
     4d2:	f0 94       	com	r15
     4d4:	f7 f8       	bld	r15, 7
     4d6:	f0 94       	com	r15
     4d8:	c0 92 37 01 	sts	0x0137, r12
     4dc:	d0 92 38 01 	sts	0x0138, r13
     4e0:	e0 92 39 01 	sts	0x0139, r14
     4e4:	f0 92 3a 01 	sts	0x013A, r15
	}
}
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	08 95       	ret

000004f2 <_Z23can_proc_stop_motor_msgP4sCAN>:

void can_proc_stop_motor_msg( sCAN* mMsg )
{
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	ec 01       	movw	r28, r24
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     4f8:	4d 81       	ldd	r20, Y+5	; 0x05
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	54 2f       	mov	r21, r20
     4fe:	44 27       	eor	r20, r20
     500:	66 27       	eor	r22, r22
     502:	57 fd       	sbrc	r21, 7
     504:	60 95       	com	r22
     506:	76 2f       	mov	r23, r22
	retval |= mData[1];
     508:	8e 81       	ldd	r24, Y+6	; 0x06
     50a:	48 2b       	or	r20, r24
}

void can_proc_stop_motor_msg( sCAN* mMsg )
{
	short brake = extract_word_be( &(mMsg->data[0])  );
	Destination.speed = fabs(((float)brake / 10000.0));
     50c:	ba 01       	movw	r22, r20
     50e:	88 27       	eor	r24, r24
     510:	77 fd       	sbrc	r23, 7
     512:	80 95       	com	r24
     514:	98 2f       	mov	r25, r24
     516:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e4       	ldi	r19, 0x40	; 64
     51e:	4c e1       	ldi	r20, 0x1C	; 28
     520:	56 e4       	ldi	r21, 0x46	; 70
     522:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     526:	ab 01       	movw	r20, r22
     528:	bc 01       	movw	r22, r24
     52a:	7f 77       	andi	r23, 0x7F	; 127
     52c:	40 93 37 01 	sts	0x0137, r20
     530:	50 93 38 01 	sts	0x0138, r21
     534:	60 93 39 01 	sts	0x0139, r22
     538:	70 93 3a 01 	sts	0x013A, r23

	/* We can have coast (both directions low) with a duty cycle.
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	88 23       	and	r24, r24
     540:	29 f0       	breq	.+10     	; 0x54c <__stack+0x4d>
		Destination.coast = HARD_STOP_MOTOR;		// STOP
	else 
		Destination.coast = mMsg->data[2];
     542:	80 93 3f 01 	sts	0x013F, r24
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

	/* We can have coast (both directions low) with a duty cycle.
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
		Destination.coast = HARD_STOP_MOTOR;		// STOP
     54c:	83 e6       	ldi	r24, 0x63	; 99
     54e:	80 93 3f 01 	sts	0x013F, r24
	else 
		Destination.coast = mMsg->data[2];
}
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <_Z28can_proc_move_dual_speed_msgP4sCAN>:

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     55e:	4d 81       	ldd	r20, Y+5	; 0x05
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	54 2f       	mov	r21, r20
     564:	44 27       	eor	r20, r20
     566:	66 27       	eor	r22, r22
     568:	57 fd       	sbrc	r21, 7
     56a:	60 95       	com	r22
     56c:	76 2f       	mov	r23, r22
	retval |= mData[1];
     56e:	8e 81       	ldd	r24, Y+6	; 0x06
     570:	48 2b       	or	r20, r24

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float
     572:	ba 01       	movw	r22, r20
     574:	88 27       	eor	r24, r24
     576:	77 fd       	sbrc	r23, 7
     578:	80 95       	com	r24
     57a:	98 2f       	mov	r25, r24
     57c:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e4       	ldi	r19, 0x40	; 64
     584:	4c e1       	ldi	r20, 0x1C	; 28
     586:	56 e4       	ldi	r21, 0x46	; 70
     588:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     58c:	60 93 37 01 	sts	0x0137, r22
     590:	70 93 38 01 	sts	0x0138, r23
     594:	80 93 39 01 	sts	0x0139, r24
     598:	90 93 3a 01 	sts	0x013A, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     59c:	4f 81       	ldd	r20, Y+7	; 0x07
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	54 2f       	mov	r21, r20
     5a2:	44 27       	eor	r20, r20
     5a4:	66 27       	eor	r22, r22
     5a6:	57 fd       	sbrc	r21, 7
     5a8:	60 95       	com	r22
     5aa:	76 2f       	mov	r23, r22
	retval |= mData[1];
     5ac:	88 85       	ldd	r24, Y+8	; 0x08
     5ae:	48 2b       	or	r20, r24
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float

	speed = extract_word_be( &(mMsg->data[2]) );
	Destination.speed2 = ((float)speed / 10000.0);
     5b0:	ba 01       	movw	r22, r20
     5b2:	88 27       	eor	r24, r24
     5b4:	77 fd       	sbrc	r23, 7
     5b6:	80 95       	com	r24
     5b8:	98 2f       	mov	r25, r24
     5ba:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e4       	ldi	r19, 0x40	; 64
     5c2:	4c e1       	ldi	r20, 0x1C	; 28
     5c4:	56 e4       	ldi	r21, 0x46	; 70
     5c6:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     5ca:	60 93 3b 01 	sts	0x013B, r22
     5ce:	70 93 3c 01 	sts	0x013C, r23
     5d2:	80 93 3d 01 	sts	0x013D, r24
     5d6:	90 93 3e 01 	sts	0x013E, r25

	// There's no direction for unidirectional mode!
	//Destination.direction = 1;	
	//MotorState = MOTOR_REQUEST_PENDING;
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <_Z29can_proc_max_acceleration_msgP4sCAN>:

void can_proc_max_acceleration_msg ( sCAN* mMsg )
{
     5e0:	08 95       	ret

000005e2 <_Z13can_prep_stopP4sCANh>:
		Calibrated Stop 1	(POT value & angle)
		Calibrated Stop 2	(POT value & angle)
***********************************************************/
/* For informational purposes, send our travel end points. */
void can_prep_stop( sCAN* mMsg, byte mStopNumber )
{
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24
     5f4:	16 2f       	mov	r17, r22
	word PotValue = 0xFFFF;
	long int Angle= -1;
    mMsg->id 	  = create_CAN_eid( 0x00, ID_CALIBRATED_STOP, MyInstance );
     5f6:	40 91 c3 01 	lds	r20, 0x01C3
     5fa:	65 e4       	ldi	r22, 0x45	; 69
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z14create_CAN_eidhth>
     604:	68 83       	st	Y, r22
     606:	79 83       	std	Y+1, r23	; 0x01
     608:	8a 83       	std	Y+2, r24	; 0x02
     60a:	9b 83       	std	Y+3, r25	; 0x03

    if (mStopNumber==1) {
     60c:	11 30       	cpi	r17, 0x01	; 1
     60e:	91 f1       	breq	.+100    	; 0x674 <_Z13can_prep_stopP4sCANh+0x92>
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
    } else if (mStopNumber==2) { 
     610:	12 30       	cpi	r17, 0x02	; 2
     612:	e9 f0       	breq	.+58     	; 0x64e <_Z13can_prep_stopP4sCANh+0x6c>
     614:	2f ef       	ldi	r18, 0xFF	; 255
     616:	3f ef       	ldi	r19, 0xFF	; 255
     618:	4f ef       	ldi	r20, 0xFF	; 255
     61a:	ef ef       	ldi	r30, 0xFF	; 255
     61c:	0f ef       	ldi	r16, 0xFF	; 255
     61e:	ff ef       	ldi	r31, 0xFF	; 255
    	PotValue = EndPoint2.value;
    	Angle    = EndPoint2.angle;
    }
    mMsg->data[0] = mStopNumber&0x0F;
     620:	91 2f       	mov	r25, r17
     622:	9f 70       	andi	r25, 0x0F	; 15
     624:	9d 83       	std	Y+5, r25	; 0x05
	word tmp = hi_word(Angle);
	mMsg->data[1] = hi(tmp);
     626:	fe 83       	std	Y+6, r31	; 0x06
	mMsg->data[2] = lo(tmp);	
     628:	0f 83       	std	Y+7, r16	; 0x07
	tmp = lo_word(Angle);
	mMsg->data[3] = hi(tmp);
     62a:	e8 87       	std	Y+8, r30	; 0x08
	mMsg->data[4] = lo(tmp);
     62c:	49 87       	std	Y+9, r20	; 0x09
	mMsg->data[5] = hi(PotValue);
     62e:	3a 87       	std	Y+10, r19	; 0x0a
	mMsg->data[6] = lo(PotValue);
     630:	2b 87       	std	Y+11, r18	; 0x0b
    mMsg->header.DLC = 7;
     632:	8c 81       	ldd	r24, Y+4	; 0x04
     634:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
     636:	8e 60       	ori	r24, 0x0E	; 14
     638:	8e 7f       	andi	r24, 0xFE	; 254
     63a:	8c 83       	std	Y+4, r24	; 0x04
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	08 95       	ret
    if (mStopNumber==1) {
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
    } else if (mStopNumber==2) { 
    	PotValue = EndPoint2.value;
    	Angle    = EndPoint2.angle;
     64e:	40 91 20 01 	lds	r20, 0x0120
     652:	50 91 21 01 	lds	r21, 0x0121
     656:	60 91 22 01 	lds	r22, 0x0122
     65a:	70 91 23 01 	lds	r23, 0x0123
     65e:	cb 01       	movw	r24, r22
     660:	aa 27       	eor	r26, r26
     662:	bb 27       	eor	r27, r27
     664:	f9 2f       	mov	r31, r25
     666:	08 2f       	mov	r16, r24
     668:	e5 2f       	mov	r30, r21
     66a:	30 91 25 01 	lds	r19, 0x0125
     66e:	20 91 24 01 	lds	r18, 0x0124
     672:	d6 cf       	rjmp	.-84     	; 0x620 <_Z13can_prep_stopP4sCANh+0x3e>
	long int Angle= -1;
    mMsg->id 	  = create_CAN_eid( 0x00, ID_CALIBRATED_STOP, MyInstance );

    if (mStopNumber==1) {
    	PotValue = EndPoint1.value;
    	Angle    = EndPoint1.angle;
     674:	c0 90 26 01 	lds	r12, 0x0126
     678:	d0 90 27 01 	lds	r13, 0x0127
     67c:	e0 90 28 01 	lds	r14, 0x0128
     680:	f0 90 29 01 	lds	r15, 0x0129
     684:	c7 01       	movw	r24, r14
     686:	aa 27       	eor	r26, r26
     688:	bb 27       	eor	r27, r27
     68a:	f9 2f       	mov	r31, r25
     68c:	08 2f       	mov	r16, r24
     68e:	ed 2d       	mov	r30, r13
     690:	4c 2d       	mov	r20, r12
     692:	30 91 2b 01 	lds	r19, 0x012B
     696:	20 91 2a 01 	lds	r18, 0x012A
     69a:	c2 cf       	rjmp	.-124    	; 0x620 <_Z13can_prep_stopP4sCANh+0x3e>

0000069c <_Z16can_file_messageP4sCAN>:
#define ID_MOVE_TO_ANGLE				0x0042		 Instance goes with intended Receiver
#define ID_MOVE_SPEED					0x0043
#define ID_SET_MAX_MOTOR_ACCEL			0x0044		*/

void can_file_message( sCAN* mMsg )
{
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
     6aa:	60 91 c3 01 	lds	r22, 0x01C3
     6ae:	80 e4       	ldi	r24, 0x40	; 64
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	68 81       	ld	r22, Y
     6bc:	79 81       	ldd	r23, Y+1	; 0x01
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	9b 81       	ldd	r25, Y+3	; 0x03
     6c2:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
     6c6:	88 23       	and	r24, r24
     6c8:	21 f1       	breq	.+72     	; 0x712 <_Z16can_file_messageP4sCAN+0x76>
	{
		// data[0] == [0x1x] means report on the mark stop.
		if ( (mMsg->data[0] & 0x10) == 0x10) 	// READ?
     6ca:	8d 81       	ldd	r24, Y+5	; 0x05
     6cc:	84 fd       	sbrc	r24, 4
     6ce:	0d c0       	rjmp	.+26     	; 0x6ea <_Z16can_file_messageP4sCAN+0x4e>
			can_prep_stop( &msg1, 1 ); 
			can_prep_stop( &msg2, 2 );
			System_Send_Status=0x03;		// buff 1 & 2
		} else {
			// The request has been to set "mark" a stop.
			can_proc_set_stop_msg( mMsg );
     6d0:	ce 01       	movw	r24, r28
     6d2:	0e 94 a3 01 	call	0x346	; 0x346 <_Z21can_proc_set_stop_msgP4sCAN>
			System_Send_Status = 0x10;
     6d6:	80 e1       	ldi	r24, 0x10	; 16
     6d8:	80 93 c8 01 	sts	0x01C8, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret
	if ( match( mMsg->id, 	create_CAN_eid(ID_MARK_MOTOR_STOP, MyInstance)) )
	{
		// data[0] == [0x1x] means report on the mark stop.
		if ( (mMsg->data[0] & 0x10) == 0x10) 	// READ?
		{
			can_prep_stop( &msg1, 1 ); 
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	8b ea       	ldi	r24, 0xAB	; 171
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z13can_prep_stopP4sCANh>
			can_prep_stop( &msg2, 2 );
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	8c e9       	ldi	r24, 0x9C	; 156
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z13can_prep_stopP4sCANh>
			System_Send_Status=0x03;		// buff 1 & 2
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	80 93 c8 01 	sts	0x01C8, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	08 95       	ret
			can_proc_set_stop_msg( mMsg );
			System_Send_Status = 0x10;
			// Save EEPROM occurs in time slice function!
		}
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_TO_ANGLE, MyInstance)) )
     712:	60 91 c3 01 	lds	r22, 0x01C3
     716:	81 e4       	ldi	r24, 0x41	; 65
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     71e:	9b 01       	movw	r18, r22
     720:	ac 01       	movw	r20, r24
     722:	68 81       	ld	r22, Y
     724:	79 81       	ldd	r23, Y+1	; 0x01
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	9b 81       	ldd	r25, Y+3	; 0x03
     72a:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
     72e:	81 11       	cpse	r24, r1
     730:	4a c0       	rjmp	.+148    	; 0x7c6 <_Z16can_file_messageP4sCAN+0x12a>
	{
		// includes a speed:
		can_proc_move_to_angle_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_SPEED, MyInstance)) )	
     732:	60 91 c3 01 	lds	r22, 0x01C3
     736:	82 e4       	ldi	r24, 0x42	; 66
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	68 81       	ld	r22, Y
     744:	79 81       	ldd	r23, Y+1	; 0x01
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	9b 81       	ldd	r25, Y+3	; 0x03
     74a:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <_Z16can_file_messageP4sCAN+0xb8>
     752:	46 c0       	rjmp	.+140    	; 0x7e0 <_Z16can_file_messageP4sCAN+0x144>
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     754:	6d 81       	ldd	r22, Y+5	; 0x05
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	76 2f       	mov	r23, r22
     75a:	66 27       	eor	r22, r22
     75c:	cb 01       	movw	r24, r22
     75e:	aa 27       	eor	r26, r26
     760:	97 fd       	sbrc	r25, 7
     762:	a0 95       	com	r26
     764:	ba 2f       	mov	r27, r26
	retval |= mData[1];
     766:	2e 81       	ldd	r18, Y+6	; 0x06
     768:	82 2b       	or	r24, r18
{
	// speed is a float
	// Value is a number [-100.00 to 100.00]  * 100  == [-10000..10000]
	// So 10,000 represents 100.00%
	short speed = extract_word_be( mMsg->data );	
	Destination.coast = 0; 
     76a:	10 92 3f 01 	sts	0x013F, r1
	Destination.speed = ((float)speed / 10000.0);
     76e:	bc 01       	movw	r22, r24
     770:	88 27       	eor	r24, r24
     772:	77 fd       	sbrc	r23, 7
     774:	80 95       	com	r24
     776:	98 2f       	mov	r25, r24
     778:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e4       	ldi	r19, 0x40	; 64
     780:	4c e1       	ldi	r20, 0x1C	; 28
     782:	56 e4       	ldi	r21, 0x46	; 70
     784:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     788:	6b 01       	movw	r12, r22
     78a:	7c 01       	movw	r14, r24
     78c:	60 93 37 01 	sts	0x0137, r22
     790:	70 93 38 01 	sts	0x0138, r23
     794:	80 93 39 01 	sts	0x0139, r24
     798:	90 93 3a 01 	sts	0x013A, r25
	if (Destination.speed > 0)
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	a9 01       	movw	r20, r18
     7a2:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
     7a6:	18 16       	cp	r1, r24
     7a8:	0c f0       	brlt	.+2      	; 0x7ac <_Z16can_file_messageP4sCAN+0x110>
     7aa:	a6 c0       	rjmp	.+332    	; 0x8f8 <_Z16can_file_messageP4sCAN+0x25c>
		Destination.direction = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 36 01 	sts	0x0136, r24
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
	{
		can_proc_move_dual_speed_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
     7b2:	8a e0       	ldi	r24, 0x0A	; 10
     7b4:	80 93 2c 01 	sts	0x012C, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret
		}
	}
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_TO_ANGLE, MyInstance)) )
	{
		// includes a speed:
		can_proc_move_to_angle_msg( mMsg );
     7c6:	ce 01       	movw	r24, r28
     7c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z26can_proc_move_to_angle_msgP4sCAN>
		MotorState = MOTOR_REQUEST_PENDING;
     7cc:	8a e0       	ldi	r24, 0x0A	; 10
     7ce:	80 93 2c 01 	sts	0x012C, r24
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
	{
		can_proc_tilt_msg( mMsg );
	}
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	08 95       	ret
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_SPEED, MyInstance)) )	
	{
		can_proc_move_speed_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_STOP_MOTOR, MyInstance)) )
     7e0:	60 91 c3 01 	lds	r22, 0x01C3
     7e4:	8b e4       	ldi	r24, 0x4B	; 75
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     7ec:	9b 01       	movw	r18, r22
     7ee:	ac 01       	movw	r20, r24
     7f0:	68 81       	ld	r22, Y
     7f2:	79 81       	ldd	r23, Y+1	; 0x01
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	9b 81       	ldd	r25, Y+3	; 0x03
     7f8:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
     7fc:	88 23       	and	r24, r24
     7fe:	51 f1       	breq	.+84     	; 0x854 <_Z16can_file_messageP4sCAN+0x1b8>
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     800:	6d 81       	ldd	r22, Y+5	; 0x05
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	76 2f       	mov	r23, r22
     806:	66 27       	eor	r22, r22
     808:	cb 01       	movw	r24, r22
     80a:	aa 27       	eor	r26, r26
     80c:	97 fd       	sbrc	r25, 7
     80e:	a0 95       	com	r26
     810:	ba 2f       	mov	r27, r26
	retval |= mData[1];
     812:	2e 81       	ldd	r18, Y+6	; 0x06
     814:	82 2b       	or	r24, r18
}

void can_proc_stop_motor_msg( sCAN* mMsg )
{
	short brake = extract_word_be( &(mMsg->data[0])  );
	Destination.speed = fabs(((float)brake / 10000.0));
     816:	bc 01       	movw	r22, r24
     818:	88 27       	eor	r24, r24
     81a:	77 fd       	sbrc	r23, 7
     81c:	80 95       	com	r24
     81e:	98 2f       	mov	r25, r24
     820:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e4       	ldi	r19, 0x40	; 64
     828:	4c e1       	ldi	r20, 0x1C	; 28
     82a:	56 e4       	ldi	r21, 0x46	; 70
     82c:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	bf 77       	andi	r27, 0x7F	; 127
     836:	80 93 37 01 	sts	0x0137, r24
     83a:	90 93 38 01 	sts	0x0138, r25
     83e:	a0 93 39 01 	sts	0x0139, r26
     842:	b0 93 3a 01 	sts	0x013A, r27

	/* We can have coast (both directions low) with a duty cycle.
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
     846:	8f 81       	ldd	r24, Y+7	; 0x07
     848:	81 11       	cpse	r24, r1
     84a:	65 c0       	rjmp	.+202    	; 0x916 <_Z16can_file_messageP4sCAN+0x27a>
		Destination.coast = HARD_STOP_MOTOR;		// STOP
     84c:	83 e6       	ldi	r24, 0x63	; 99
     84e:	80 93 3f 01 	sts	0x013F, r24
     852:	af cf       	rjmp	.-162    	; 0x7b2 <_Z16can_file_messageP4sCAN+0x116>
	else if ( match(mMsg->id, create_CAN_eid(ID_STOP_MOTOR, MyInstance)) )
	{
		can_proc_stop_motor_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
     854:	60 91 c3 01 	lds	r22, 0x01C3
     858:	84 e4       	ldi	r24, 0x44	; 68
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	68 81       	ld	r22, Y
     866:	79 81       	ldd	r23, Y+1	; 0x01
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
     870:	88 23       	and	r24, r24
     872:	09 f4       	brne	.+2      	; 0x876 <_Z16can_file_messageP4sCAN+0x1da>
     874:	53 c0       	rjmp	.+166    	; 0x91c <_Z16can_file_messageP4sCAN+0x280>
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     876:	6d 81       	ldd	r22, Y+5	; 0x05
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	76 2f       	mov	r23, r22
     87c:	66 27       	eor	r22, r22
     87e:	cb 01       	movw	r24, r22
     880:	aa 27       	eor	r26, r26
     882:	97 fd       	sbrc	r25, 7
     884:	a0 95       	com	r26
     886:	ba 2f       	mov	r27, r26
	retval |= mData[1];
     888:	2e 81       	ldd	r18, Y+6	; 0x06
     88a:	82 2b       	or	r24, r18

void can_proc_move_dual_speed_msg( sCAN* mMsg )
{
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float
     88c:	bc 01       	movw	r22, r24
     88e:	88 27       	eor	r24, r24
     890:	77 fd       	sbrc	r23, 7
     892:	80 95       	com	r24
     894:	98 2f       	mov	r25, r24
     896:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e4       	ldi	r19, 0x40	; 64
     89e:	4c e1       	ldi	r20, 0x1C	; 28
     8a0:	56 e4       	ldi	r21, 0x46	; 70
     8a2:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     8a6:	60 93 37 01 	sts	0x0137, r22
     8aa:	70 93 38 01 	sts	0x0138, r23
     8ae:	80 93 39 01 	sts	0x0139, r24
     8b2:	90 93 3a 01 	sts	0x013A, r25
	return floater.value;
}
word extract_word_be( byte* mData )
{
	long int retval = 0;
	retval |= (mData[0]<<8);
     8b6:	6f 81       	ldd	r22, Y+7	; 0x07
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	76 2f       	mov	r23, r22
     8bc:	66 27       	eor	r22, r22
     8be:	cb 01       	movw	r24, r22
     8c0:	aa 27       	eor	r26, r26
     8c2:	97 fd       	sbrc	r25, 7
     8c4:	a0 95       	com	r26
     8c6:	ba 2f       	mov	r27, r26
	retval |= mData[1];
     8c8:	28 85       	ldd	r18, Y+8	; 0x08
     8ca:	82 2b       	or	r24, r18
	// Value is a number -0.0 to 100.0  * 100  == [0..10000]
	short speed = extract_word_be( &(mMsg->data[0]) );
	Destination.speed = ((float)speed / 10000.0);		// speed is a float

	speed = extract_word_be( &(mMsg->data[2]) );
	Destination.speed2 = ((float)speed / 10000.0);
     8cc:	bc 01       	movw	r22, r24
     8ce:	88 27       	eor	r24, r24
     8d0:	77 fd       	sbrc	r23, 7
     8d2:	80 95       	com	r24
     8d4:	98 2f       	mov	r25, r24
     8d6:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e4       	ldi	r19, 0x40	; 64
     8de:	4c e1       	ldi	r20, 0x1C	; 28
     8e0:	56 e4       	ldi	r21, 0x46	; 70
     8e2:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
     8e6:	60 93 3b 01 	sts	0x013B, r22
     8ea:	70 93 3c 01 	sts	0x013C, r23
     8ee:	80 93 3d 01 	sts	0x013D, r24
     8f2:	90 93 3e 01 	sts	0x013E, r25
     8f6:	5d cf       	rjmp	.-326    	; 0x7b2 <_Z16can_file_messageP4sCAN+0x116>
	Destination.coast = 0; 
	Destination.speed = ((float)speed / 10000.0);
	if (Destination.speed > 0)
		Destination.direction = 1;
	else {
		Destination.direction = 0;
     8f8:	10 92 36 01 	sts	0x0136, r1
		Destination.speed = -Destination.speed;	// make it positive
     8fc:	f7 fa       	bst	r15, 7
     8fe:	f0 94       	com	r15
     900:	f7 f8       	bld	r15, 7
     902:	f0 94       	com	r15
     904:	c0 92 37 01 	sts	0x0137, r12
     908:	d0 92 38 01 	sts	0x0138, r13
     90c:	e0 92 39 01 	sts	0x0139, r14
     910:	f0 92 3a 01 	sts	0x013A, r15
     914:	4e cf       	rjmp	.-356    	; 0x7b2 <_Z16can_file_messageP4sCAN+0x116>
	   Coast with 100% on, is most gradual coast.
	   Coast with  50% on, cuts down on the recirculation current.	*/
	if (mMsg->data[2] == 0)
		Destination.coast = HARD_STOP_MOTOR;		// STOP
	else 
		Destination.coast = mMsg->data[2];
     916:	80 93 3f 01 	sts	0x013F, r24
     91a:	4b cf       	rjmp	.-362    	; 0x7b2 <_Z16can_file_messageP4sCAN+0x116>
	else if ( match(mMsg->id, create_CAN_eid(ID_MOVE_DUAL_SPEED, MyInstance)) )	
	{
		can_proc_move_dual_speed_msg( mMsg );
		MotorState = MOTOR_REQUEST_PENDING;
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_SET_MAX_MOTOR_ACCEL, MyInstance)) )
     91c:	60 91 c3 01 	lds	r22, 0x01C3
     920:	83 e4       	ldi	r24, 0x43	; 67
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	68 81       	ld	r22, Y
     92e:	79 81       	ldd	r23, Y+1	; 0x01
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	9b 81       	ldd	r25, Y+3	; 0x03
     934:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
     938:	81 11       	cpse	r24, r1
     93a:	d0 ce       	rjmp	.-608    	; 0x6dc <_Z16can_file_messageP4sCAN+0x40>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     93c:	80 91 3b 02 	lds	r24, 0x023B
	{
		can_proc_max_acceleration_msg( mMsg );
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
     940:	84 ff       	sbrs	r24, 4
     942:	cc ce       	rjmp	.-616    	; 0x6dc <_Z16can_file_messageP4sCAN+0x40>
			  (id_match(mMsg->id, create_CAN_eid(ID_ACCEL_XYZ, 0)) ) )
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	81 e7       	ldi	r24, 0x71	; 113
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	68 81       	ld	r22, Y
     954:	79 81       	ldd	r23, Y+1	; 0x01
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	9b 81       	ldd	r25, Y+3	; 0x03
     95a:	0e 94 c9 13 	call	0x2792	; 0x2792 <_Z8id_match6idTypeS_>
	} 
	else if ( match(mMsg->id, create_CAN_eid(ID_SET_MAX_MOTOR_ACCEL, MyInstance)) )
	{
		can_proc_max_acceleration_msg( mMsg );
	}
	else if ( (isConfigured(MODE_TILT_RESPONDER)) && 
     95e:	88 23       	and	r24, r24
     960:	09 f4       	brne	.+2      	; 0x964 <_Z16can_file_messageP4sCAN+0x2c8>
     962:	bc ce       	rjmp	.-648    	; 0x6dc <_Z16can_file_messageP4sCAN+0x40>
#define KConst 0.25
void can_proc_tilt_msg( sCAN* mMsg )
{
	byte yh  = mMsg->data[3];
	byte yl  = mMsg->data[2];
	short y1  = ((yh<<8) | yl);
     964:	68 85       	ldd	r22, Y+8	; 0x08
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	76 2f       	mov	r23, r22
     96a:	66 27       	eor	r22, r22
     96c:	8f 81       	ldd	r24, Y+7	; 0x07
     96e:	68 2b       	or	r22, r24
	float y2 = ((float)y1 / (16535.0));
     970:	88 27       	eor	r24, r24
     972:	77 fd       	sbrc	r23, 7
     974:	80 95       	com	r24
     976:	98 2f       	mov	r25, r24
     978:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	3e e2       	ldi	r19, 0x2E	; 46
     980:	41 e8       	ldi	r20, 0x81	; 129
     982:	56 e4       	ldi	r21, 0x46	; 70
     984:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
	// multiply by proportionality constant

	// We don't actually set the motor duty here, because we don't know if it's in a stop region
	// or under influence of some other condition (ie pid mode, etc).  So we queue up a 
	// request and let the timeslice deal with it.
	MotorState 		 	  = MOTOR_REQUEST_PENDING;
     988:	2a e0       	ldi	r18, 0x0A	; 10
     98a:	20 93 2c 01 	sts	0x012C, r18
	Destination.speed     = fabs(y2);
     98e:	6b 01       	movw	r12, r22
     990:	7c 01       	movw	r14, r24
     992:	e8 94       	clt
     994:	f7 f8       	bld	r15, 7
     996:	c0 92 37 01 	sts	0x0137, r12
     99a:	d0 92 38 01 	sts	0x0138, r13
     99e:	e0 92 39 01 	sts	0x0139, r14
     9a2:	f0 92 3a 01 	sts	0x013A, r15
	Destination.direction = (y2 > 0);
     9a6:	c1 e0       	ldi	r28, 0x01	; 1
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	a9 01       	movw	r20, r18
     9ae:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
     9b2:	18 16       	cp	r1, r24
     9b4:	1c f4       	brge	.+6      	; 0x9bc <_Z16can_file_messageP4sCAN+0x320>
     9b6:	c0 93 36 01 	sts	0x0136, r28
     9ba:	90 ce       	rjmp	.-736    	; 0x6dc <_Z16can_file_messageP4sCAN+0x40>
     9bc:	c0 e0       	ldi	r28, 0x00	; 0
     9be:	fb cf       	rjmp	.-10     	; 0x9b6 <_Z16can_file_messageP4sCAN+0x31a>

000009c0 <_Z20can_prep_motor_angleP4sCAN>:
    mMsg->header.DLC = 7;
    mMsg->header.rtr = 0;
}

void can_prep_motor_angle( sCAN* mMsg )
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
	byte size = 4;
    mMsg->id = create_CAN_eid( ID_MOTOR_ANGLE, MyInstance );
     9c6:	60 91 c3 01 	lds	r22, 0x01C3
     9ca:	86 e4       	ldi	r24, 0x46	; 70
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
     9d2:	68 83       	st	Y, r22
     9d4:	79 83       	std	Y+1, r23	; 0x01
     9d6:	8a 83       	std	Y+2, r24	; 0x02
     9d8:	9b 83       	std	Y+3, r25	; 0x03

	// FILL CURRENT ANGLE :
	// Fixed point, 
	float_array Angle; 
	Angle.value = get_motor_angle();
     9da:	0e 94 05 08 	call	0x100a	; 0x100a <_Z15get_motor_anglev>
	for (int i=0; i<size; i++)
	    mMsg->data[i] = Angle.array[i];
     9de:	6d 83       	std	Y+5, r22	; 0x05
     9e0:	7e 83       	std	Y+6, r23	; 0x06
     9e2:	8f 83       	std	Y+7, r24	; 0x07
     9e4:	98 87       	std	Y+8, r25	; 0x08
	mMsg->data[size+0] = hi(CurrentAvg);
	mMsg->data[size+1] = lo(CurrentAvg); */

	// Make (TENTH DEG/SEC) ANGLE SPEED INSTEAD!!!!!:
	//short TenthDegSec = PotSpeed[1]
	mMsg->data[size+0] = hi(PotSpeed[1]);
     9e6:	e2 e5       	ldi	r30, 0x52	; 82
     9e8:	f1 e0       	ldi	r31, 0x01	; 1
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	99 87       	std	Y+9, r25	; 0x09
	mMsg->data[size+1] = lo(PotSpeed[1]);
     9f0:	8a 87       	std	Y+10, r24	; 0x0a

    mMsg->header.DLC = size+2;
     9f2:	8c 81       	ldd	r24, Y+4	; 0x04
     9f4:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
     9f6:	8c 60       	ori	r24, 0x0C	; 12
     9f8:	8e 7f       	andi	r24, 0xFE	; 254
     9fa:	8c 83       	std	Y+4, r24	; 0x04
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <_Z25can_prep_motor_values_rawP4sCAN>:

/* Reports: Position, Speed, and electrical Current draw */
void can_prep_motor_values_raw( sCAN* mMsg )
{
     a02:	8f 92       	push	r8
     a04:	9f 92       	push	r9
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_VALUE, MyInstance );
     a18:	40 91 c3 01 	lds	r20, 0x01C3
     a1c:	67 e4       	ldi	r22, 0x47	; 71
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z14create_CAN_eidhth>
     a26:	68 83       	st	Y, r22
     a28:	79 83       	std	Y+1, r23	; 0x01
     a2a:	8a 83       	std	Y+2, r24	; 0x02
     a2c:	9b 83       	std	Y+3, r25	; 0x03
     a2e:	80 91 3b 02 	lds	r24, 0x023B
    word position = 0;        
    short speed = 0;
	if (isConfigured(MODE_USE_ENCODER))  {
     a32:	80 ff       	sbrs	r24, 0
     a34:	52 c0       	rjmp	.+164    	; 0xada <_Z25can_prep_motor_values_rawP4sCAN+0xd8>
		position = EncoderCount;
     a36:	20 91 5f 01 	lds	r18, 0x015F
     a3a:	30 91 60 01 	lds	r19, 0x0160
		speed    = EncoderSpeed;
     a3e:	80 91 5d 01 	lds	r24, 0x015D
     a42:	90 91 5e 01 	lds	r25, 0x015E
		position = PotSample[1];
		speed    = PotSpeed[1];
	}

	// POSITION
	mMsg->data[0] = hi( position );
     a46:	3d 83       	std	Y+5, r19	; 0x05
	mMsg->data[1] = lo( position );
     a48:	2e 83       	std	Y+6, r18	; 0x06

	// SPEED
	mMsg->data[2] = hi(speed);
     a4a:	9f 83       	std	Y+7, r25	; 0x07
	mMsg->data[3] = lo(speed);
     a4c:	88 87       	std	Y+8, r24	; 0x08

	// MOTOR CURRENT:
	//  (Larger of left/right) (in Amps*10):
	word CurrentAvg = max(LeftCurrentSampleAvg*10, 
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e2       	ldi	r20, 0x20	; 32
     a54:	51 e4       	ldi	r21, 0x41	; 65
     a56:	60 91 7b 01 	lds	r22, 0x017B
     a5a:	70 91 7c 01 	lds	r23, 0x017C
     a5e:	80 91 7d 01 	lds	r24, 0x017D
     a62:	90 91 7e 01 	lds	r25, 0x017E
     a66:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
     a6a:	4b 01       	movw	r8, r22
     a6c:	5c 01       	movw	r10, r24
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e2       	ldi	r20, 0x20	; 32
     a74:	51 e4       	ldi	r21, 0x41	; 65
     a76:	60 91 77 01 	lds	r22, 0x0177
     a7a:	70 91 78 01 	lds	r23, 0x0178
     a7e:	80 91 79 01 	lds	r24, 0x0179
     a82:	90 91 7a 01 	lds	r25, 0x017A
     a86:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
     a8a:	6b 01       	movw	r12, r22
     a8c:	7c 01       	movw	r14, r24
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c5 01       	movw	r24, r10
     a94:	b4 01       	movw	r22, r8
     a96:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
     a9a:	18 16       	cp	r1, r24
     a9c:	3c f1       	brlt	.+78     	; 0xaec <_Z25can_prep_motor_values_rawP4sCAN+0xea>
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
     aa2:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
						  RightCurrentSampleAvg*10 );
	mMsg->data[4] = hi(CurrentAvg);
     aa6:	79 87       	std	Y+9, r23	; 0x09
	mMsg->data[5] = lo(CurrentAvg);
     aa8:	6a 87       	std	Y+10, r22	; 0x0a

	// for DEBUG ONLY
	short RCurrentAvg = round(RightCurrentSampleAvg*10.); 
     aaa:	c7 01       	movw	r24, r14
     aac:	b6 01       	movw	r22, r12
     aae:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <round>
     ab2:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__fixsfsi>
	mMsg->data[6] = hi(RCurrentAvg);
     ab6:	7b 87       	std	Y+11, r23	; 0x0b
	mMsg->data[7] = lo(RCurrentAvg);
     ab8:	6c 87       	std	Y+12, r22	; 0x0c
	
    mMsg->header.DLC = 8;
     aba:	8c 81       	ldd	r24, Y+4	; 0x04
     abc:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	8e 7f       	andi	r24, 0xFE	; 254
     ac2:	8c 83       	std	Y+4, r24	; 0x04
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	bf 90       	pop	r11
     ad2:	af 90       	pop	r10
     ad4:	9f 90       	pop	r9
     ad6:	8f 90       	pop	r8
     ad8:	08 95       	ret
    short speed = 0;
	if (isConfigured(MODE_USE_ENCODER))  {
		position = EncoderCount;
		speed    = EncoderSpeed;
	} else {
		position = PotSample[1];
     ada:	20 91 71 01 	lds	r18, 0x0171
     ade:	30 91 72 01 	lds	r19, 0x0172
		speed    = PotSpeed[1];
     ae2:	80 91 52 01 	lds	r24, 0x0152
     ae6:	90 91 53 01 	lds	r25, 0x0153
     aea:	ad cf       	rjmp	.-166    	; 0xa46 <_Z25can_prep_motor_values_rawP4sCAN+0x44>
	mMsg->data[2] = hi(speed);
	mMsg->data[3] = lo(speed);

	// MOTOR CURRENT:
	//  (Larger of left/right) (in Amps*10):
	word CurrentAvg = max(LeftCurrentSampleAvg*10, 
     aec:	c5 01       	movw	r24, r10
     aee:	b4 01       	movw	r22, r8
     af0:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
     af4:	d8 cf       	rjmp	.-80     	; 0xaa6 <_Z25can_prep_motor_values_rawP4sCAN+0xa4>

00000af6 <_Z20can_prep_motor_speedP4sCAN11float_array>:
    mMsg->header.DLC = 8;
    mMsg->header.rtr = 0;
}

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
{
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	00 d0       	rcall	.+0      	; 0xb00 <_Z20can_prep_motor_speedP4sCAN11float_array+0xa>
     b00:	00 d0       	rcall	.+0      	; 0xb02 <_Z20can_prep_motor_speedP4sCAN11float_array+0xc>
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	8c 01       	movw	r16, r24
     b08:	49 83       	std	Y+1, r20	; 0x01
     b0a:	5a 83       	std	Y+2, r21	; 0x02
     b0c:	6b 83       	std	Y+3, r22	; 0x03
     b0e:	7c 83       	std	Y+4, r23	; 0x04
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_SPEED, MyInstance );
     b10:	40 91 c3 01 	lds	r20, 0x01C3
     b14:	68 e4       	ldi	r22, 0x48	; 72
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z14create_CAN_eidhth>
     b1e:	f8 01       	movw	r30, r16
     b20:	60 83       	st	Z, r22
     b22:	71 83       	std	Z+1, r23	; 0x01
     b24:	82 83       	std	Z+2, r24	; 0x02
     b26:	93 83       	std	Z+3, r25	; 0x03
	if (config_byte_1 & MODE_USE_ENCODER)  {
     b28:	80 91 3b 02 	lds	r24, 0x023B
     b2c:	80 fd       	sbrc	r24, 0
     b2e:	2b c0       	rjmp	.+86     	; 0xb86 <_Z20can_prep_motor_speedP4sCAN11float_array+0x90>
		mMsg->data[0] = 2;	// 2 byte speed
		mMsg->data[1] = hi(EncoderSpeed);
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
     b30:	50 91 00 01 	lds	r21, 0x0100
     b34:	f8 01       	movw	r30, r16
     b36:	55 83       	std	Z+5, r21	; 0x05
		for (int i=0; i<size; i++)
     b38:	85 2f       	mov	r24, r21
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	79 f0       	breq	.+30     	; 0xb5e <_Z20can_prep_motor_speedP4sCAN11float_array+0x68>
     b40:	fe 01       	movw	r30, r28
     b42:	31 96       	adiw	r30, 0x01	; 1
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
		    mMsg->data[i+1] = mSpeed.array[i];
     b48:	2f 5f       	subi	r18, 0xFF	; 255
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	41 91       	ld	r20, Z+
     b4e:	d8 01       	movw	r26, r16
     b50:	a2 0f       	add	r26, r18
     b52:	b3 1f       	adc	r27, r19
     b54:	15 96       	adiw	r26, 0x05	; 5
     b56:	4c 93       	st	X, r20
		mMsg->data[1] = hi(EncoderSpeed);
		mMsg->data[2] = lo(EncoderSpeed);
		mMsg->header.DLC = 2;
	} else {
		mMsg->data[0] = size;
		for (int i=0; i<size; i++)
     b58:	28 17       	cp	r18, r24
     b5a:	39 07       	cpc	r19, r25
     b5c:	ac f3       	brlt	.-22     	; 0xb48 <_Z20can_prep_motor_speedP4sCAN11float_array+0x52>
		    mMsg->data[i+1] = mSpeed.array[i];
	    mMsg->header.DLC = size;
     b5e:	5f 70       	andi	r21, 0x0F	; 15
     b60:	55 0f       	add	r21, r21
     b62:	f8 01       	movw	r30, r16
     b64:	84 81       	ldd	r24, Z+4	; 0x04
     b66:	81 7e       	andi	r24, 0xE1	; 225
     b68:	85 2b       	or	r24, r21
     b6a:	84 83       	std	Z+4, r24	; 0x04
	}
    mMsg->header.rtr = 0;
     b6c:	f8 01       	movw	r30, r16
     b6e:	84 81       	ldd	r24, Z+4	; 0x04
     b70:	8e 7f       	andi	r24, 0xFE	; 254
     b72:	84 83       	std	Z+4, r24	; 0x04
}
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

void can_prep_motor_speed( sCAN* mMsg, float_array mSpeed )
{
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_SPEED, MyInstance );
	if (config_byte_1 & MODE_USE_ENCODER)  {
		mMsg->data[0] = 2;	// 2 byte speed
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	85 83       	std	Z+5, r24	; 0x05
		mMsg->data[1] = hi(EncoderSpeed);
     b8a:	80 91 5d 01 	lds	r24, 0x015D
     b8e:	90 91 5e 01 	lds	r25, 0x015E
     b92:	96 83       	std	Z+6, r25	; 0x06
		mMsg->data[2] = lo(EncoderSpeed);
     b94:	87 83       	std	Z+7, r24	; 0x07
		mMsg->header.DLC = 2;
     b96:	84 81       	ldd	r24, Z+4	; 0x04
     b98:	81 7e       	andi	r24, 0xE1	; 225
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	84 83       	std	Z+4, r24	; 0x04
     b9e:	e6 cf       	rjmp	.-52     	; 0xb6c <_Z20can_prep_motor_speedP4sCAN11float_array+0x76>

00000ba0 <_Z20can_prep_motor_accelP4sCAN11float_array>:
    mMsg->header.rtr = 0;
}

/* size of a float IEEE single precision is usually 4 bytes */
void can_prep_motor_accel( sCAN* mMsg, float_array mAccel )
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_ACCEL, MyInstance );
     ba6:	40 91 c3 01 	lds	r20, 0x01C3
     baa:	69 e4       	ldi	r22, 0x49	; 73
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z14create_CAN_eidhth>
     bb4:	68 83       	st	Y, r22
     bb6:	79 83       	std	Y+1, r23	; 0x01
     bb8:	8a 83       	std	Y+2, r24	; 0x02
     bba:	9b 83       	std	Y+3, r25	; 0x03
	if (config_byte_1 & MODE_USE_ENCODER)  {    
     bbc:	80 91 3b 02 	lds	r24, 0x023B
     bc0:	80 fd       	sbrc	r24, 0
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <_Z20can_prep_motor_accelP4sCAN11float_array+0x48>
		mMsg->data[0] = hi(EncoderAcceleration);
		mMsg->data[1] = lo(EncoderAcceleration);
	} else {
   		mMsg->data[0] = hi(PotAcceleration[1]);
     bc4:	80 91 4e 01 	lds	r24, 0x014E
     bc8:	90 91 4f 01 	lds	r25, 0x014F
     bcc:	9d 83       	std	Y+5, r25	; 0x05
   		mMsg->data[1] = lo(PotAcceleration[1]);
     bce:	8e 83       	std	Y+6, r24	; 0x06
	}
    mMsg->header.DLC = size;
     bd0:	90 91 00 01 	lds	r25, 0x0100
     bd4:	9f 70       	andi	r25, 0x0F	; 15
     bd6:	99 0f       	add	r25, r25
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
     bdc:	89 2b       	or	r24, r25
     bde:	8e 7f       	andi	r24, 0xFE	; 254
     be0:	8c 83       	std	Y+4, r24	; 0x04
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret
/* size of a float IEEE single precision is usually 4 bytes */
void can_prep_motor_accel( sCAN* mMsg, float_array mAccel )
{
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_ACCEL, MyInstance );
	if (config_byte_1 & MODE_USE_ENCODER)  {    
		mMsg->data[0] = hi(EncoderAcceleration);
     be8:	80 91 59 01 	lds	r24, 0x0159
     bec:	90 91 5a 01 	lds	r25, 0x015A
     bf0:	9d 83       	std	Y+5, r25	; 0x05
		mMsg->data[1] = lo(EncoderAcceleration);
     bf2:	8e 83       	std	Y+6, r24	; 0x06
     bf4:	ed cf       	rjmp	.-38     	; 0xbd0 <_Z20can_prep_motor_accelP4sCAN11float_array+0x30>

00000bf6 <_Z21can_prep_motor_statusP4sCAN>:
    mMsg->header.DLC = size;
    mMsg->header.rtr = 0;
}

void can_prep_motor_status( sCAN* mMsg )
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( 0x00, ID_MOTOR_STATUS, MyInstance );
     bfc:	40 91 c3 01 	lds	r20, 0x01C3
     c00:	6a e4       	ldi	r22, 0x4A	; 74
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z14create_CAN_eidhth>
     c0a:	68 83       	st	Y, r22
     c0c:	79 83       	std	Y+1, r23	; 0x01
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	9b 83       	std	Y+3, r25	; 0x03
	/* Send status byte:  0=stopped, 1=forward, 2=backward, 3=in stop 1 region
							4=in stop 2 region, 5=OverTemp, 6=OverVoltage,
							8= Trouble Codes set,					*/
	mMsg->data[0] = MotorState;							
     c12:	80 91 2c 01 	lds	r24, 0x012C
     c16:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC = 1;
     c18:	8c 81       	ldd	r24, Y+4	; 0x04
     c1a:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	8c 83       	std	Y+4, r24	; 0x04
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
 ***************************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0x08;		// Free Spin.
     c28:	88 e0       	ldi	r24, 0x08	; 8
     c2a:	80 93 3b 02 	sts	0x023B, r24
	config_byte_2 = 0;
     c2e:	10 92 3a 02 	sts	0x023A, r1
	compute_default_stops();
     c32:	0e 94 af 0a 	call	0x155e	; 0x155e <_Z21compute_default_stopsv>
	
	// Default Thresholds:
	current_1_threshold = 0x7FF;
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	97 e0       	ldi	r25, 0x07	; 7
     c3a:	90 93 04 01 	sts	0x0104, r25
     c3e:	80 93 03 01 	sts	0x0103, r24
	current_2_threshold = 0x7FF;
     c42:	90 93 02 01 	sts	0x0102, r25
     c46:	80 93 01 01 	sts	0x0101, r24
     c4a:	08 95       	ret

00000c4c <_Z13config_changeh>:
}

/* Callback for configuration change. */
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <_Z13config_changeh+0x6>
     c50:	08 95       	ret
     c52:	80 91 3b 02 	lds	r24, 0x023B
	{
		if (isConfigured(MODE_USE_ENCODER)) { 
     c56:	80 fd       	sbrc	r24, 0
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <_Z13config_changeh+0x16>
			encoder_init();
		} else {
			encoder_disable();
     c5a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_Z15encoder_disablev>
		}

		// Update BaseFrequency (even if not changed)
		SetBaseFrequency();
     c5e:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_Z16SetBaseFrequencyv>
void config_change( byte mByteChanged )
{
	if (mByteChanged==1)
	{
		if (isConfigured(MODE_USE_ENCODER)) { 
			encoder_init();
     c62:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_Z12encoder_initv>
		} else {
			encoder_disable();
		}

		// Update BaseFrequency (even if not changed)
		SetBaseFrequency();
     c66:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_Z16SetBaseFrequencyv>

00000c6a <_Z17save_stops_eepromPh>:
Save both structures EndPoint1 & EndPoint2.
RETURN:		Last address written + 1 (ie. next available
			EEPROM address)
*******************************************************/
byte* save_stops_eeprom(byte* addr)
{
     c6a:	9c 01       	movw	r18, r24
     c6c:	e6 e2       	ldi	r30, 0x26	; 38
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	ac 01       	movw	r20, r24
     c72:	4a 5f       	subi	r20, 0xFA	; 250
     c74:	5f 4f       	sbci	r21, 0xFF	; 255
	byte size = sizeof(sEndPoint);

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );
     c76:	61 91       	ld	r22, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     c78:	f9 99       	sbic	0x1f, 1	; 31
     c7a:	fe cf       	rjmp	.-4      	; 0xc78 <_Z17save_stops_eepromPh+0xe>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     c7c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c7e:	32 bd       	out	0x22, r19	; 34
     c80:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     c82:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	fa 9a       	sbi	0x1f, 2	; 31
     c8a:	f9 9a       	sbi	0x1f, 1	; 31
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
{
	byte size = sizeof(sEndPoint);

	// END POINT 1:
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     c92:	24 17       	cp	r18, r20
     c94:	35 07       	cpc	r19, r21
     c96:	79 f7       	brne	.-34     	; 0xc76 <_Z17save_stops_eepromPh+0xc>
     c98:	e0 e2       	ldi	r30, 0x20	; 32
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );	
     c9c:	41 91       	ld	r20, Z+
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     c9e:	f9 99       	sbic	0x1f, 1	; 31
     ca0:	fe cf       	rjmp	.-4      	; 0xc9e <_Z17save_stops_eepromPh+0x34>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     ca2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     ca4:	32 bd       	out	0x22, r19	; 34
     ca6:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     ca8:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	fa 9a       	sbi	0x1f, 2	; 31
     cb0:	f9 9a       	sbi	0x1f, 1	; 31
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
	for (int i=0; i<size; i++)
		eeprom_write_byte( addr++, *(ptr++) );

	// END POINT 2:
	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	e6 32       	cpi	r30, 0x26	; 38
     cbc:	f4 07       	cpc	r31, r20
     cbe:	71 f7       	brne	.-36     	; 0xc9c <_Z17save_stops_eepromPh+0x32>
		eeprom_write_byte( addr++, *(ptr++) );	
	return addr;
}
     cc0:	0c 96       	adiw	r24, 0x0c	; 12
     cc2:	08 95       	ret

00000cc4 <_Z17read_stops_eepromPh>:

Reads both structures EndPoint1 & EndPoint2 from EEPROM, 
and stores into the RAM.
***********************************************************/
byte* read_stops_eeprom(byte* addr)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ec 01       	movw	r28, r24
     cca:	9c 01       	movw	r18, r24
     ccc:	e6 e2       	ldi	r30, 0x26	; 38
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	ac 01       	movw	r20, r24
     cd2:	4a 5f       	subi	r20, 0xFA	; 250
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cd6:	f9 99       	sbic	0x1f, 1	; 31
     cd8:	fe cf       	rjmp	.-4      	; 0xcd6 <_Z17read_stops_eepromPh+0x12>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cda:	32 bd       	out	0x22, r19	; 34
     cdc:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cde:	f8 9a       	sbi	0x1f, 0	; 31
     ce0:	80 b5       	in	r24, 0x20	; 32
	byte size = sizeof(sEndPoint);
	
	// Read EndPoint1 & EndPoint2
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     ce2:	81 93       	st	Z+, r24
     ce4:	2f 5f       	subi	r18, 0xFF	; 255
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
{
	byte size = sizeof(sEndPoint);
	
	// Read EndPoint1 & EndPoint2
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
     ce8:	24 17       	cp	r18, r20
     cea:	35 07       	cpc	r19, r21
     cec:	a1 f7       	brne	.-24     	; 0xcd6 <_Z17read_stops_eepromPh+0x12>
     cee:	e0 e2       	ldi	r30, 0x20	; 32
     cf0:	f1 e0       	ldi	r31, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cf2:	f9 99       	sbic	0x1f, 1	; 31
     cf4:	fe cf       	rjmp	.-4      	; 0xcf2 <_Z17read_stops_eepromPh+0x2e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cf6:	32 bd       	out	0x22, r19	; 34
     cf8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cfa:	f8 9a       	sbi	0x1f, 0	; 31
     cfc:	80 b5       	in	r24, 0x20	; 32
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );
     cfe:	81 93       	st	Z+, r24
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
	byte* ptr = (byte*)&EndPoint1;
	for (int i=0; i<size; i++)
		*(ptr++) = eeprom_read_byte( addr++ );

	ptr = (byte*)&EndPoint2;
	for (int i=0; i<size; i++)
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	e6 32       	cpi	r30, 0x26	; 38
     d08:	f8 07       	cpc	r31, r24
     d0a:	99 f7       	brne	.-26     	; 0xcf2 <_Z17read_stops_eepromPh+0x2e>
		*(ptr++) = eeprom_read_byte( addr++ );
	
	compute_range();
     d0c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_Z13compute_rangev>
	return addr;
}
     d10:	ce 01       	movw	r24, r28
     d12:	0c 96       	adiw	r24, 0x0c	; 12
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <_Z29save_currentThresholds_eepromPh>:
****************************************************/
byte* save_currentThresholds_eeprom(byte* addr)
{
	// CURRENT THRESHOLD (for shutoff)
	// SAMPLING IS 10 BITS ONLY.
	eeprom_write_byte( addr++, lo(current_1_threshold>>2) );	
     d1a:	20 91 03 01 	lds	r18, 0x0103
     d1e:	30 91 04 01 	lds	r19, 0x0104
     d22:	36 95       	lsr	r19
     d24:	27 95       	ror	r18
     d26:	36 95       	lsr	r19
     d28:	27 95       	ror	r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     d2a:	f9 99       	sbic	0x1f, 1	; 31
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <_Z29save_currentThresholds_eepromPh+0x10>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     d2e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d30:	92 bd       	out	0x22, r25	; 34
     d32:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     d34:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	fa 9a       	sbi	0x1f, 2	; 31
     d3c:	f9 9a       	sbi	0x1f, 1	; 31
     d3e:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, lo(current_2_threshold>>2) );	
     d40:	20 91 01 01 	lds	r18, 0x0101
     d44:	30 91 02 01 	lds	r19, 0x0102
     d48:	36 95       	lsr	r19
     d4a:	27 95       	ror	r18
     d4c:	36 95       	lsr	r19
     d4e:	27 95       	ror	r18
     d50:	ac 01       	movw	r20, r24
     d52:	4f 5f       	subi	r20, 0xFF	; 255
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     d56:	f9 99       	sbic	0x1f, 1	; 31
     d58:	fe cf       	rjmp	.-4      	; 0xd56 <_Z29save_currentThresholds_eepromPh+0x3c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     d5a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d5c:	52 bd       	out	0x22, r21	; 34
     d5e:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     d60:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	fa 9a       	sbi	0x1f, 2	; 31
     d68:	f9 9a       	sbi	0x1f, 1	; 31
     d6a:	0f be       	out	0x3f, r0	; 63
	return addr;
}
     d6c:	02 96       	adiw	r24, 0x02	; 2
     d6e:	08 95       	ret

00000d70 <_Z29read_currentThresholds_eepromPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d70:	f9 99       	sbic	0x1f, 1	; 31
     d72:	fe cf       	rjmp	.-4      	; 0xd70 <_Z29read_currentThresholds_eepromPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d74:	92 bd       	out	0x22, r25	; 34
     d76:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d78:	f8 9a       	sbi	0x1f, 0	; 31
     d7a:	20 b5       	in	r18, 0x20	; 32

Reads from stall currents from EEPROM, and stores into RAM
***********************************************************/
byte* read_currentThresholds_eeprom(byte* addr)
{	// CURRENT THRESHOLD (for shutoff)	
	current_1_threshold = ((eeprom_read_byte( addr++ ))<<2);
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	30 93 04 01 	sts	0x0104, r19
     d8a:	20 93 03 01 	sts	0x0103, r18
	current_2_threshold = ((eeprom_read_byte( addr++ ))<<2);
     d8e:	9c 01       	movw	r18, r24
     d90:	2f 5f       	subi	r18, 0xFF	; 255
     d92:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d94:	f9 99       	sbic	0x1f, 1	; 31
     d96:	fe cf       	rjmp	.-4      	; 0xd94 <_Z29read_currentThresholds_eepromPh+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d98:	32 bd       	out	0x22, r19	; 34
     d9a:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d9c:	f8 9a       	sbi	0x1f, 0	; 31
     d9e:	20 b5       	in	r18, 0x20	; 32
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	30 93 02 01 	sts	0x0102, r19
     dae:	20 93 01 01 	sts	0x0101, r18
	return addr;
}
     db2:	02 96       	adiw	r24, 0x02	; 2
     db4:	08 95       	ret

00000db6 <_Z27save_latest_position_eepromPh>:
     db6:	20 91 3b 02 	lds	r18, 0x023B
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* save_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
     dba:	20 ff       	sbrs	r18, 0
     dbc:	1f c0       	rjmp	.+62     	; 0xdfc <_Z27save_latest_position_eepromPh+0x46>
		eeprom_write_byte( addr++, hi(EncoderCount) );
     dbe:	20 91 60 01 	lds	r18, 0x0160
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     dc2:	f9 99       	sbic	0x1f, 1	; 31
     dc4:	fe cf       	rjmp	.-4      	; 0xdc2 <_Z27save_latest_position_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     dc6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     dc8:	92 bd       	out	0x22, r25	; 34
     dca:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     dcc:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	fa 9a       	sbi	0x1f, 2	; 31
     dd4:	f9 9a       	sbi	0x1f, 1	; 31
     dd6:	0f be       	out	0x3f, r0	; 63
		eeprom_write_byte( addr++, lo(EncoderCount) );
     dd8:	40 91 5f 01 	lds	r20, 0x015F
     ddc:	9c 01       	movw	r18, r24
     dde:	2f 5f       	subi	r18, 0xFF	; 255
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	02 96       	adiw	r24, 0x02	; 2
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     de4:	f9 99       	sbic	0x1f, 1	; 31
     de6:	fe cf       	rjmp	.-4      	; 0xde4 <_Z27save_latest_position_eepromPh+0x2e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     de8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     dea:	32 bd       	out	0x22, r19	; 34
     dec:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     dee:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	fa 9a       	sbi	0x1f, 2	; 31
     df6:	f9 9a       	sbi	0x1f, 1	; 31
     df8:	0f be       	out	0x3f, r0	; 63
	}else {
		eeprom_write_byte( addr++, hi(PotSample[1]) );	
		eeprom_write_byte( addr++, lo(PotSample[1]) );
	}
	return addr;
}
     dfa:	08 95       	ret
{
	if (isConfigured(MODE_USE_ENCODER)) {
		eeprom_write_byte( addr++, hi(EncoderCount) );
		eeprom_write_byte( addr++, lo(EncoderCount) );
	}else {
		eeprom_write_byte( addr++, hi(PotSample[1]) );	
     dfc:	20 91 72 01 	lds	r18, 0x0172
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     e00:	f9 99       	sbic	0x1f, 1	; 31
     e02:	fe cf       	rjmp	.-4      	; 0xe00 <_Z27save_latest_position_eepromPh+0x4a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     e04:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     e06:	92 bd       	out	0x22, r25	; 34
     e08:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     e0a:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	fa 9a       	sbi	0x1f, 2	; 31
     e12:	f9 9a       	sbi	0x1f, 1	; 31
     e14:	0f be       	out	0x3f, r0	; 63
		eeprom_write_byte( addr++, lo(PotSample[1]) );
     e16:	40 91 71 01 	lds	r20, 0x0171
     e1a:	9c 01       	movw	r18, r24
     e1c:	2f 5f       	subi	r18, 0xFF	; 255
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	02 96       	adiw	r24, 0x02	; 2
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     e22:	f9 99       	sbic	0x1f, 1	; 31
     e24:	fe cf       	rjmp	.-4      	; 0xe22 <_Z27save_latest_position_eepromPh+0x6c>
     e26:	e0 cf       	rjmp	.-64     	; 0xde8 <_Z27save_latest_position_eepromPh+0x32>

00000e28 <_Z27read_latest_position_eepromPh>:
     e28:	20 91 3b 02 	lds	r18, 0x023B
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
****************************************************/
byte* read_latest_position_eeprom(byte* addr)
{
	if (isConfigured(MODE_USE_ENCODER)) {
     e2c:	20 ff       	sbrs	r18, 0
     e2e:	1a c0       	rjmp	.+52     	; 0xe64 <_Z27read_latest_position_eepromPh+0x3c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e30:	f9 99       	sbic	0x1f, 1	; 31
     e32:	fe cf       	rjmp	.-4      	; 0xe30 <_Z27read_latest_position_eepromPh+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e34:	92 bd       	out	0x22, r25	; 34
     e36:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e38:	f8 9a       	sbi	0x1f, 0	; 31
     e3a:	20 b5       	in	r18, 0x20	; 32
		EncoderCount = (eeprom_read_byte( addr++ )<<8);
     e3c:	10 92 5f 01 	sts	0x015F, r1
     e40:	20 93 60 01 	sts	0x0160, r18
		EncoderCount = (eeprom_read_byte( addr++ ));
     e44:	9c 01       	movw	r18, r24
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	02 96       	adiw	r24, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e4c:	f9 99       	sbic	0x1f, 1	; 31
     e4e:	fe cf       	rjmp	.-4      	; 0xe4c <_Z27read_latest_position_eepromPh+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e50:	32 bd       	out	0x22, r19	; 34
     e52:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e54:	f8 9a       	sbi	0x1f, 0	; 31
     e56:	20 b5       	in	r18, 0x20	; 32
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	30 93 60 01 	sts	0x0160, r19
     e5e:	20 93 5f 01 	sts	0x015F, r18
     e62:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e64:	f9 99       	sbic	0x1f, 1	; 31
     e66:	fe cf       	rjmp	.-4      	; 0xe64 <_Z27read_latest_position_eepromPh+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e68:	92 bd       	out	0x22, r25	; 34
     e6a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e6c:	f8 9a       	sbi	0x1f, 0	; 31
     e6e:	20 b5       	in	r18, 0x20	; 32
	}else {
		PotSample[1] = (eeprom_read_byte( addr++ )<<8);
     e70:	10 92 71 01 	sts	0x0171, r1
     e74:	20 93 72 01 	sts	0x0172, r18
		PotSample[1] = (eeprom_read_byte( addr++ ));
     e78:	9c 01       	movw	r18, r24
     e7a:	2f 5f       	subi	r18, 0xFF	; 255
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	02 96       	adiw	r24, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e80:	f9 99       	sbic	0x1f, 1	; 31
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <_Z27read_latest_position_eepromPh+0x58>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e84:	32 bd       	out	0x22, r19	; 34
     e86:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e88:	f8 9a       	sbi	0x1f, 0	; 31
     e8a:	20 b5       	in	r18, 0x20	; 32
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	30 93 72 01 	sts	0x0172, r19
     e92:	20 93 71 01 	sts	0x0171, r18
	}
	return addr;
}
     e96:	08 95       	ret

00000e98 <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
****************************************************************/
byte getReportRate()
{
	switch ( (config_byte_2 & 0xF0) )
     e98:	80 91 3a 02 	lds	r24, 0x023A
     e9c:	80 7f       	andi	r24, 0xF0	; 240
     e9e:	80 32       	cpi	r24, 0x20	; 32
     ea0:	79 f0       	breq	.+30     	; 0xec0 <_Z13getReportRatev+0x28>
     ea2:	30 f4       	brcc	.+12     	; 0xeb0 <_Z13getReportRatev+0x18>
     ea4:	88 23       	and	r24, r24
     ea6:	19 f0       	breq	.+6      	; 0xeae <_Z13getReportRatev+0x16>
     ea8:	80 31       	cpi	r24, 0x10	; 16
     eaa:	41 f4       	brne	.+16     	; 0xebc <_Z13getReportRatev+0x24>
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
     eac:	81 e0       	ldi	r24, 0x01	; 1
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
	default: return -1;  break;
	}
}
     eae:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
****************************************************************/
byte getReportRate()
{
	switch ( (config_byte_2 & 0xF0) )
     eb0:	80 34       	cpi	r24, 0x40	; 64
     eb2:	41 f0       	breq	.+16     	; 0xec4 <_Z13getReportRatev+0x2c>
     eb4:	80 38       	cpi	r24, 0x80	; 128
     eb6:	11 f4       	brne	.+4      	; 0xebc <_Z13getReportRatev+0x24>
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
	case MODE_SEND_UPDATES_100ms:	return 10; 	break;
     eb8:	8a e0       	ldi	r24, 0x0A	; 10
     eba:	08 95       	ret
	default: return -1;  break;
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	08 95       	ret
{
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return 0; 	break;
	case MODE_SEND_UPDATES_10ms :	return 1; 	break;
	case MODE_SEND_UPDATES_20ms :	return 2; 	break;
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	08 95       	ret
	case MODE_SEND_UPDATES_50ms :	return 5; 	break;
     ec4:	85 e0       	ldi	r24, 0x05	; 5
     ec6:	08 95       	ret

00000ec8 <_Z18isReportingEnabledv>:
	}
}

BOOL isReportingEnabled()
{
	if (getReportRate() != MODE_SEND_UPDATES_NONE)
     ec8:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z13getReportRatev>
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	81 11       	cpse	r24, r1
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <_Z18isReportingEnabledv+0xc>
     ed2:	90 e0       	ldi	r25, 0x00	; 0
		return TRUE;
	else
		return FALSE;
}
     ed4:	89 2f       	mov	r24, r25
     ed6:	08 95       	ret

00000ed8 <_Z8save_calv>:
Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr;
	addr = save_configuration			(    );		// MyInstance & Confirmed & config bytes
     ed8:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_Z18save_configurationv>
	addr = save_stops_eeprom			(addr);
     edc:	0e 94 35 06 	call	0xc6a	; 0xc6a <_Z17save_stops_eepromPh>
	addr = save_currentThresholds_eeprom(addr);
     ee0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_Z29save_currentThresholds_eepromPh>
	addr = save_latest_position_eeprom  (addr);
     ee4:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <_Z27save_latest_position_eepromPh>

00000ee8 <_Z8read_calv>:
Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr;
	addr = read_configuration();		// myinstance, confirmed status, config bytes
     ee8:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z18read_configurationv>
	addr = read_stops_eeprom			(addr);
     eec:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17read_stops_eepromPh>
	addr = read_currentThresholds_eeprom(addr);
     ef0:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z29read_currentThresholds_eepromPh>
	addr = read_latest_position_eeprom	(addr);
     ef4:	0c 94 14 07 	jmp	0xe28	; 0xe28 <_Z27read_latest_position_eepromPh>

00000ef8 <_Z19set_motor_directionh.part.0>:
*/
void set_motor_direction( BOOL mForward )
{
	if (mForward)
	{
		HILOW_PORT |=  (1<<HILOW_RIGHT );		
     ef8:	2e 9a       	sbi	0x05, 6	; 5
		HILOW_PORT &= ~(1<<HILOW_LEFT  );
     efa:	2d 98       	cbi	0x05, 5	; 5
     efc:	08 95       	ret

00000efe <_Z16SetBaseFrequencyv>:
#define MODE_FREE_SPIN	 	0x08		// ignore stops.  default (0) is to stop
#define MODE_TILT_RESPONDER 0x10		// 1=> respond to tilt Y axis readings
#define MODE_PID_CONTROL	0x20		// PID or constant speed.
#define MODE_BASE_FREQ_1	0x40		// 00->100Hz;  01--> 300Hz
#define MODE_BASE_FREQ_2	0x80		// 10->1000hz; 11--> 5000Hz
inline  byte getBaseFreq() 	{  return ((config_byte_1 & 0xC0)>>6);  }
     efe:	80 91 3b 02 	lds	r24, 0x023B
     f02:	82 95       	swap	r24
     f04:	86 95       	lsr	r24
     f06:	86 95       	lsr	r24
     f08:	83 70       	andi	r24, 0x03	; 3
/************************************************************
SetBaseFrequency()	based on config_byte_1
*************************************************************/
void SetBaseFrequency( )
{
	switch (getBaseFreq())
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	d9 f0       	breq	.+54     	; 0xf44 <_Z16SetBaseFrequencyv+0x46>
     f0e:	90 f0       	brcs	.+36     	; 0xf34 <_Z16SetBaseFrequencyv+0x36>
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	41 f0       	breq	.+16     	; 0xf24 <_Z16SetBaseFrequencyv+0x26>
	{
		case 0:	pwm_init( 100., TRUE, TRUE );	break;
		case 1:	pwm_init( 300., TRUE, TRUE );	break;
		case 2:	pwm_init( 1000., TRUE, TRUE );	break;
		case 3:	pwm_init( 5000., TRUE, TRUE );	break;
		default: pwm_init( 5000., TRUE, TRUE ); break;
     f14:	21 e0       	ldi	r18, 0x01	; 1
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e4       	ldi	r23, 0x40	; 64
     f1c:	8c e9       	ldi	r24, 0x9C	; 156
     f1e:	95 e4       	ldi	r25, 0x45	; 69
     f20:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <_Z8pwm_initfhh>
{
	switch (getBaseFreq())
	{
		case 0:	pwm_init( 100., TRUE, TRUE );	break;
		case 1:	pwm_init( 300., TRUE, TRUE );	break;
		case 2:	pwm_init( 1000., TRUE, TRUE );	break;
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	8a e7       	ldi	r24, 0x7A	; 122
     f2e:	94 e4       	ldi	r25, 0x44	; 68
     f30:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <_Z8pwm_initfhh>
*************************************************************/
void SetBaseFrequency( )
{
	switch (getBaseFreq())
	{
		case 0:	pwm_init( 100., TRUE, TRUE );	break;
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	88 ec       	ldi	r24, 0xC8	; 200
     f3e:	92 e4       	ldi	r25, 0x42	; 66
     f40:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <_Z8pwm_initfhh>
		case 1:	pwm_init( 300., TRUE, TRUE );	break;
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	86 e9       	ldi	r24, 0x96	; 150
     f4e:	93 e4       	ldi	r25, 0x43	; 67
     f50:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <_Z8pwm_initfhh>

00000f54 <_Z10motor_initv>:
		Both PWMs are HIGH;		(ie Polarities are the same)
		INHibit signal is LOW;
	Base Frequency of the BTS7960 chips can go upto 25khz	*/
void motor_init()
{
	HILOW_DDR  |=  HILOW_DDR_MASK;			// HBridge Enable lines (outputs)
     f54:	84 b1       	in	r24, 0x04	; 4
     f56:	80 66       	ori	r24, 0x60	; 96
     f58:	84 b9       	out	0x04, r24	; 4
	CURRENT_SENSE_DDR &=  ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
     f5a:	87 b1       	in	r24, 0x07	; 7
     f5c:	8f 7c       	andi	r24, 0xCF	; 207
     f5e:	87 b9       	out	0x07, r24	; 7

	SetBaseFrequency( );		// config_byte_1
     f60:	0e 94 7f 07 	call	0xefe	; 0xefe <_Z16SetBaseFrequencyv>
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
     f64:	88 e0       	ldi	r24, 0x08	; 8
     f66:	80 93 2c 01 	sts	0x012C, r24
     f6a:	80 91 3b 02 	lds	r24, 0x023B
	CURRENT_SENSE_DDR &=  ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));

	SetBaseFrequency( );		// config_byte_1
	motor_enable    (TRUE);		// 
	
	if (isConfigured(MODE_USE_ENCODER))
     f6e:	80 fd       	sbrc	r24, 0
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <_Z10motor_initv+0x2a>
		encoder_init();

	if (isConfigured(MODE_TILT_RESPONDER))
     f72:	84 ff       	sbrs	r24, 4
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <_Z10motor_initv+0x28>
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
     f76:	88 e0       	ldi	r24, 0x08	; 8
     f78:	80 93 2c 01 	sts	0x012C, r24
     f7c:	08 95       	ret

	SetBaseFrequency( );		// config_byte_1
	motor_enable    (TRUE);		// 
	
	if (isConfigured(MODE_USE_ENCODER))
		encoder_init();
     f7e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_Z12encoder_initv>
     f82:	80 91 3b 02 	lds	r24, 0x023B
     f86:	f5 cf       	rjmp	.-22     	; 0xf72 <_Z10motor_initv+0x1e>

00000f88 <_Z21report_timeslice_10msv>:

static short ReportCounter = 1;		// when zero sends update of the motor angle & currents
void report_timeslice_10ms()
{
	// Time To Report:
	if (isReportingEnabled())
     f88:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z18isReportingEnabledv>
     f8c:	88 23       	and	r24, r24
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <_Z21report_timeslice_10msv+0x20>
	{
		ReportCounter--;
     f90:	80 91 05 01 	lds	r24, 0x0105
     f94:	90 91 06 01 	lds	r25, 0x0106
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	90 93 06 01 	sts	0x0106, r25
     f9e:	80 93 05 01 	sts	0x0105, r24
		if (ReportCounter<=0)
     fa2:	18 16       	cp	r1, r24
     fa4:	19 06       	cpc	r1, r25
     fa6:	0c f4       	brge	.+2      	; 0xfaa <_Z21report_timeslice_10msv+0x22>
     fa8:	08 95       	ret
		{
			ReportCounter = getReportRate();		// Refill
     faa:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z13getReportRatev>
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	90 93 06 01 	sts	0x0106, r25
     fb4:	80 93 05 01 	sts	0x0105, r24
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
     fb8:	80 91 3a 02 	lds	r24, 0x023A
			if (isConfigured2(MODE_SEND_POSITION_SPEED_CURRENT))
     fbc:	80 fd       	sbrc	r24, 0
     fbe:	19 c0       	rjmp	.+50     	; 0xff2 <_Z21report_timeslice_10msv+0x6a>
			{	
				/* Sends:  Position count, Speed, and Current */
				can_prep_motor_values_raw( &msg1 );
				can_send_msg_no_wait( 0, &msg1 );
			}
			if (isConfigured2(MODE_SEND_ANGLE))
     fc0:	81 fd       	sbrc	r24, 1
     fc2:	0b c0       	rjmp	.+22     	; 0xfda <_Z21report_timeslice_10msv+0x52>
			{
				/* Sends: Motor Angle (based on calibrated stops) */
				can_prep_motor_angle(    &msg2 );
				can_send_msg_no_wait( 2, &msg2 );	// MOB2 is also unused
			}
			if (isConfigured2(MODE_SEND_STATUS))
     fc4:	82 ff       	sbrs	r24, 2
     fc6:	f0 cf       	rjmp	.-32     	; 0xfa8 <_Z21report_timeslice_10msv+0x20>
			{
				can_prep_motor_status(    &msg1 );
     fc8:	8b ea       	ldi	r24, 0xAB	; 171
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z21can_prep_motor_statusP4sCAN>
				can_send_msg_no_wait ( 4, &msg1 );	// MOB4 is also unused
     fd0:	6b ea       	ldi	r22, 0xAB	; 171
     fd2:	71 e0       	ldi	r23, 0x01	; 1
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	0c 94 22 11 	jmp	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
				can_send_msg_no_wait( 0, &msg1 );
			}
			if (isConfigured2(MODE_SEND_ANGLE))
			{
				/* Sends: Motor Angle (based on calibrated stops) */
				can_prep_motor_angle(    &msg2 );
     fda:	8c e9       	ldi	r24, 0x9C	; 156
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_Z20can_prep_motor_angleP4sCAN>
				can_send_msg_no_wait( 2, &msg2 );	// MOB2 is also unused
     fe2:	6c e9       	ldi	r22, 0x9C	; 156
     fe4:	71 e0       	ldi	r23, 0x01	; 1
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
     fec:	80 91 3a 02 	lds	r24, 0x023A
     ff0:	e9 cf       	rjmp	.-46     	; 0xfc4 <_Z21report_timeslice_10msv+0x3c>
		{
			ReportCounter = getReportRate();		// Refill
			if (isConfigured2(MODE_SEND_POSITION_SPEED_CURRENT))
			{	
				/* Sends:  Position count, Speed, and Current */
				can_prep_motor_values_raw( &msg1 );
     ff2:	8b ea       	ldi	r24, 0xAB	; 171
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	0e 94 01 05 	call	0xa02	; 0xa02 <_Z25can_prep_motor_values_rawP4sCAN>
				can_send_msg_no_wait( 0, &msg1 );
     ffa:	6b ea       	ldi	r22, 0xAB	; 171
     ffc:	71 e0       	ldi	r23, 0x01	; 1
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
    1004:	80 91 3a 02 	lds	r24, 0x023A
    1008:	db cf       	rjmp	.-74     	; 0xfc0 <_Z21report_timeslice_10msv+0x38>

0000100a <_Z15get_motor_anglev>:
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
    100a:	80 91 3b 02 	lds	r24, 0x023B
}

float get_motor_angle()
{
    float_array Angle;
    if (isConfigured(MODE_USE_ENCODER))
    100e:	80 fd       	sbrc	r24, 0
    1010:	05 c0       	rjmp	.+10     	; 0x101c <_Z15get_motor_anglev+0x12>
    {
    	Angle.value = get_encoder_angle();
    } else {
    	Angle.value = get_pot_angle();
    1012:	0e 94 32 0a 	call	0x1464	; 0x1464 <_Z13get_pot_anglev>
    1016:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    }
    return Angle.value;
}
    101a:	08 95       	ret
float get_motor_angle()
{
    float_array Angle;
    if (isConfigured(MODE_USE_ENCODER))
    {
    	Angle.value = get_encoder_angle();
    101c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_Z17get_encoder_anglev>
    1020:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    1024:	08 95       	ret

00001026 <_Z12motor_enableh>:
    return Angle.value;
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
    1026:	81 11       	cpse	r24, r1
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <_Z12motor_enableh+0xc>
		MotorState = MOTOR_ENABLED;
	else 
		MotorState = MOTOR_DISABLED;
    102a:	87 e0       	ldi	r24, 0x07	; 7
    102c:	80 93 2c 01 	sts	0x012C, r24
    1030:	08 95       	ret
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
    1032:	88 e0       	ldi	r24, 0x08	; 8
    1034:	80 93 2c 01 	sts	0x012C, r24
    1038:	08 95       	ret

0000103a <_Z11motor_brakev>:
}

void motor_brake()
{ 
	// The dutys are INHIBIT's!  So 1.0 means completely inhibit current.
	set_dutyA(1.0);
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 e8       	ldi	r24, 0x80	; 128
    1040:	9f e3       	ldi	r25, 0x3F	; 63
    1042:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <_Z9set_dutyAf>
	set_dutyB(1.0);
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	9f e3       	ldi	r25, 0x3F	; 63
    104e:	0e 94 11 1a 	call	0x3422	; 0x3422 <_Z9set_dutyBf>

	HILOW_PORT |= (1<<HILOW_LEFT);
    1052:	2d 9a       	sbi	0x05, 5	; 5
	HILOW_PORT |= (1<<HILOW_RIGHT);
    1054:	2e 9a       	sbi	0x05, 6	; 5

	MotorState = MOTOR_BRAKING;	
    1056:	89 e0       	ldi	r24, 0x09	; 9
    1058:	80 93 2c 01 	sts	0x012C, r24
    105c:	08 95       	ret

0000105e <_Z11stop_actionh>:
	}
}

void stop_action(byte mStop)
{
	if (mStop)
    105e:	81 11       	cpse	r24, r1
    1060:	04 c0       	rjmp	.+8      	; 0x106a <_Z11stop_actionh+0xc>
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
    1062:	88 e0       	ldi	r24, 0x08	; 8
    1064:	80 93 2c 01 	sts	0x012C, r24
    1068:	08 95       	ret

	MotorState = MOTOR_BRAKING;	
}
void motor_stop()
{
	motor_brake();
    106a:	0e 94 1d 08 	call	0x103a	; 0x103a <_Z11motor_brakev>
	MotorState = MOTOR_OFF;
    106e:	10 92 2c 01 	sts	0x012C, r1
    1072:	08 95       	ret

00001074 <_Z10motor_stopv>:

	MotorState = MOTOR_BRAKING;	
}
void motor_stop()
{
	motor_brake();
    1074:	0e 94 1d 08 	call	0x103a	; 0x103a <_Z11motor_brakev>
	MotorState = MOTOR_OFF;
    1078:	10 92 2c 01 	sts	0x012C, r1
    107c:	08 95       	ret

0000107e <_Z11motor_coastf>:
Input:	mFraction - specifies amount of braking. 
					 1.0 => most Braking.
					 0.0 => most coasting.
*/
void motor_coast( float mFraction )
{
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	6b 01       	movw	r12, r22
    1088:	7c 01       	movw	r14, r24
	set_dutyA(mFraction);
    108a:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <_Z9set_dutyAf>
	set_dutyB(mFraction);
    108e:	c7 01       	movw	r24, r14
    1090:	b6 01       	movw	r22, r12
    1092:	0e 94 11 1a 	call	0x3422	; 0x3422 <_Z9set_dutyBf>

	HILOW_PORT &= ~(1<<HILOW_LEFT);
    1096:	2d 98       	cbi	0x05, 5	; 5
	HILOW_PORT &= ~(1<<HILOW_RIGHT);
    1098:	2e 98       	cbi	0x05, 6	; 5
	MotorState = MOTOR_COASTING;	
    109a:	8b e0       	ldi	r24, 0x0B	; 11
    109c:	80 93 2c 01 	sts	0x012C, r24
}
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	08 95       	ret

000010aa <_Z19set_motor_directionh>:
Rev C (red boards) wiggle the INH line (ENable).  
So these below are the DIRECTION (HI OR LOW SIDE SELECTOR) pins:
*/
void set_motor_direction( BOOL mForward )
{
	if (mForward)
    10aa:	81 11       	cpse	r24, r1
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <_Z19set_motor_directionh+0xa>
	{
		HILOW_PORT |=  (1<<HILOW_RIGHT );		
		HILOW_PORT &= ~(1<<HILOW_LEFT  );
	}
	else {
		HILOW_PORT |=  (1<<HILOW_LEFT );
    10ae:	2d 9a       	sbi	0x05, 5	; 5
		HILOW_PORT &= ~(1<<HILOW_RIGHT);
    10b0:	2e 98       	cbi	0x05, 6	; 5
    10b2:	08 95       	ret
    10b4:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <_Z19set_motor_directionh.part.0>

000010b8 <_Z14motor_set_dutyfh>:
	
NOTE :	Enable lines are changed in call to set_motor_direction() in this function!
INPUT:	mPercent - [-1.00 .. +1.00]
*********************************************/
void motor_set_duty( float mFraction, BOOL mDirection )
{
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	6b 01       	movw	r12, r22
    10c2:	7c 01       	movw	r14, r24
	if (mDirection)
    10c4:	41 11       	cpse	r20, r1
    10c6:	11 c0       	rjmp	.+34     	; 0x10ea <_Z14motor_set_dutyfh+0x32>
	}
	else 
	{
		// Right is low; Left is high:
		// DutyB			DutyA
		set_motor_direction( FALSE );
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z19set_motor_directionh>
		set_dutyA( 1.00		 );		// Hold ON!
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	9f e3       	ldi	r25, 0x3F	; 63
    10d6:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <_Z9set_dutyAf>
		set_dutyB( mFraction );		// wiggle Right side power
    10da:	c7 01       	movw	r24, r14
    10dc:	b6 01       	movw	r22, r12
	}
}
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
	{
		// Right is low; Left is high:
		// DutyB			DutyA
		set_motor_direction( FALSE );
		set_dutyA( 1.00		 );		// Hold ON!
		set_dutyB( mFraction );		// wiggle Right side power
    10e6:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <_Z9set_dutyBf>
    10ea:	0e 94 7c 07 	call	0xef8	; 0xef8 <_Z19set_motor_directionh.part.0>
	if (mDirection)
	{
		// Right is high; Left is low:
		// DutyB			DutyA
		set_motor_direction( TRUE );
		set_dutyA( mFraction );			// wiggle Left side power
    10ee:	c7 01       	movw	r24, r14
    10f0:	b6 01       	movw	r22, r12
    10f2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <_Z9set_dutyAf>
		set_dutyB( 1.000 );				// Hold ON!
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	80 e8       	ldi	r24, 0x80	; 128
    10fc:	9f e3       	ldi	r25, 0x3F	; 63
		// DutyB			DutyA
		set_motor_direction( FALSE );
		set_dutyA( 1.00		 );		// Hold ON!
		set_dutyB( mFraction );		// wiggle Right side power
	}
}
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
	{
		// Right is low; Left is high:
		// DutyB			DutyA
		set_motor_direction( FALSE );
		set_dutyA( 1.00		 );		// Hold ON!
		set_dutyB( mFraction );		// wiggle Right side power
    1106:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <_Z9set_dutyBf>

0000110a <_Z20motor_timeslice_10msv>:
	word position;

	// Check for STOP conditions:
	// Note if the lights stop working, or this timeslice is not going at all,
	// 	it could be hung up on can_instance.  ie if there are not any other boards in the network.
	if (MotorState == MOTOR_REQUEST_PENDING)
    110a:	80 91 2c 01 	lds	r24, 0x012C
    110e:	8a 30       	cpi	r24, 0x0A	; 10
    1110:	c9 f0       	breq	.+50     	; 0x1144 <_Z20motor_timeslice_10msv+0x3a>
    1112:	20 91 3b 02 	lds	r18, 0x023B
			set_dutyB( Destination.speed2 );		// left side needs power too.  
		}
	}

	// READ LATEST POSITION:
	if (isConfigured(MODE_USE_ENCODER) ) {		
    1116:	20 ff       	sbrs	r18, 0
    1118:	10 c0       	rjmp	.+32     	; 0x113a <_Z20motor_timeslice_10msv+0x30>
		position = EncoderCount; 	
    111a:	80 91 5f 01 	lds	r24, 0x015F
    111e:	90 91 60 01 	lds	r25, 0x0160
	} else {
		position = get_pot(); 	
		// update speed & accel in new Pot_timeslice()
	}

	if (isConfigured(MODE_FREE_SPIN)==FALSE)
    1122:	23 fd       	sbrc	r18, 3
	{
		byte stop = check_stops( position );
		stop_action( stop );		// check stops and stop motor if necessary	
	}
	
	if (destination_reached()) {		// destination works in free spin mode.
    1124:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <_Z19destination_reachedv>
		// update speed & accel in new Pot_timeslice()
	}

	if (isConfigured(MODE_FREE_SPIN)==FALSE)
	{
		byte stop = check_stops( position );
    1128:	0e 94 c6 0b 	call	0x178c	; 0x178c <_Z11check_stopst>
	}
}

void stop_action(byte mStop)
{
	if (mStop)
    112c:	81 11       	cpse	r24, r1
    112e:	47 c0       	rjmp	.+142    	; 0x11be <_Z20motor_timeslice_10msv+0xb4>
}

void motor_enable( BOOL mEnable )
{
	if (mEnable)
		MotorState = MOTOR_ENABLED;
    1130:	88 e0       	ldi	r24, 0x08	; 8
    1132:	80 93 2c 01 	sts	0x012C, r24
	{
		byte stop = check_stops( position );
		stop_action( stop );		// check stops and stop motor if necessary	
	}
	
	if (destination_reached()) {		// destination works in free spin mode.
    1136:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <_Z19destination_reachedv>

	// READ LATEST POSITION:
	if (isConfigured(MODE_USE_ENCODER) ) {		
		position = EncoderCount; 	
	} else {
		position = get_pot(); 	
    113a:	0e 94 4a 09 	call	0x1294	; 0x1294 <_Z7get_potv>
    113e:	20 91 3b 02 	lds	r18, 0x023B
    1142:	ef cf       	rjmp	.-34     	; 0x1122 <_Z20motor_timeslice_10msv+0x18>
    1144:	80 91 3b 02 	lds	r24, 0x023B
	// Check for STOP conditions:
	// Note if the lights stop working, or this timeslice is not going at all,
	// 	it could be hung up on can_instance.  ie if there are not any other boards in the network.
	if (MotorState == MOTOR_REQUEST_PENDING)
	{	
		if (isConfigured(MODE_2_MOTORS)==FALSE)
    1148:	81 fd       	sbrc	r24, 1
    114a:	11 c0       	rjmp	.+34     	; 0x116e <_Z20motor_timeslice_10msv+0x64>
		{
			if (Destination.coast == HARD_STOP_MOTOR) {
    114c:	80 91 3f 01 	lds	r24, 0x013F
    1150:	83 36       	cpi	r24, 0x63	; 99
    1152:	d1 f1       	breq	.+116    	; 0x11c8 <_Z20motor_timeslice_10msv+0xbe>
				motor_stop(); 
			} else if (Destination.coast) {
    1154:	88 23       	and	r24, r24
    1156:	11 f1       	breq	.+68     	; 0x119c <_Z20motor_timeslice_10msv+0x92>
				motor_coast( Destination.speed );
    1158:	60 91 37 01 	lds	r22, 0x0137
    115c:	70 91 38 01 	lds	r23, 0x0138
    1160:	80 91 39 01 	lds	r24, 0x0139
    1164:	90 91 3a 01 	lds	r25, 0x013A
    1168:	0e 94 3f 08 	call	0x107e	; 0x107e <_Z11motor_coastf>
    116c:	d2 cf       	rjmp	.-92     	; 0x1112 <_Z20motor_timeslice_10msv+0x8>
				motor_set_duty( Destination.speed, Destination.direction );
			}
		}
		else 
		{	// 2 unidirectional motors (independant PWM dutys)
			HILOW_PORT &= ~(1<<HILOW_LEFT );		// want both low - pulldowns.
    116e:	2d 98       	cbi	0x05, 5	; 5
			HILOW_PORT &= ~(1<<HILOW_RIGHT);		// 0=> Low side active
    1170:	2e 98       	cbi	0x05, 6	; 5
			set_dutyA( Destination.speed  );		
    1172:	60 91 37 01 	lds	r22, 0x0137
    1176:	70 91 38 01 	lds	r23, 0x0138
    117a:	80 91 39 01 	lds	r24, 0x0139
    117e:	90 91 3a 01 	lds	r25, 0x013A
    1182:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <_Z9set_dutyAf>
			set_dutyB( Destination.speed2 );		// left side needs power too.  
    1186:	60 91 3b 01 	lds	r22, 0x013B
    118a:	70 91 3c 01 	lds	r23, 0x013C
    118e:	80 91 3d 01 	lds	r24, 0x013D
    1192:	90 91 3e 01 	lds	r25, 0x013E
    1196:	0e 94 11 1a 	call	0x3422	; 0x3422 <_Z9set_dutyBf>
    119a:	bb cf       	rjmp	.-138    	; 0x1112 <_Z20motor_timeslice_10msv+0x8>
			if (Destination.coast == HARD_STOP_MOTOR) {
				motor_stop(); 
			} else if (Destination.coast) {
				motor_coast( Destination.speed );
			} else {
				set_motor_direction( Destination.direction );
    119c:	80 91 36 01 	lds	r24, 0x0136
    11a0:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z19set_motor_directionh>
				motor_set_duty( Destination.speed, Destination.direction );
    11a4:	60 91 37 01 	lds	r22, 0x0137
    11a8:	70 91 38 01 	lds	r23, 0x0138
    11ac:	80 91 39 01 	lds	r24, 0x0139
    11b0:	90 91 3a 01 	lds	r25, 0x013A
    11b4:	40 91 36 01 	lds	r20, 0x0136
    11b8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_Z14motor_set_dutyfh>
    11bc:	aa cf       	rjmp	.-172    	; 0x1112 <_Z20motor_timeslice_10msv+0x8>

	MotorState = MOTOR_BRAKING;	
}
void motor_stop()
{
	motor_brake();
    11be:	0e 94 1d 08 	call	0x103a	; 0x103a <_Z11motor_brakev>
	MotorState = MOTOR_OFF;
    11c2:	10 92 2c 01 	sts	0x012C, r1
    11c6:	ae cf       	rjmp	.-164    	; 0x1124 <_Z20motor_timeslice_10msv+0x1a>

	MotorState = MOTOR_BRAKING;	
}
void motor_stop()
{
	motor_brake();
    11c8:	0e 94 1d 08 	call	0x103a	; 0x103a <_Z11motor_brakev>
	MotorState = MOTOR_OFF;
    11cc:	10 92 2c 01 	sts	0x012C, r1
    11d0:	a0 cf       	rjmp	.-192    	; 0x1112 <_Z20motor_timeslice_10msv+0x8>

000011d2 <_Z8pot_initv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void pot_init()
{
	Destination.continuous = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 31 01 	sts	0x0131, r24

	// SET AS INPUT:	
	CURRENT_SENSE_DDR  &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
    11d8:	87 b1       	in	r24, 0x07	; 7
    11da:	8f 7c       	andi	r24, 0xCF	; 207
    11dc:	87 b9       	out	0x07, r24	; 7
	CURRENT_SENSE_PORT &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
    11de:	88 b1       	in	r24, 0x08	; 8
    11e0:	8f 7c       	andi	r24, 0xCF	; 207
    11e2:	88 b9       	out	0x08, r24	; 8

	// SET AS INPUT:
	POT_DDR  &= ~(1<<POT);
    11e4:	55 98       	cbi	0x0a, 5	; 10
	POT_PORT &= ~(1<<POT);
    11e6:	5d 98       	cbi	0x0b, 5	; 11

	adc_init();	
    11e8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_Z8adc_initv>
	start_sampling();		// Need to call 1 Time to get it started (ISR will keep going)
    11ec:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z14start_samplingv>
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
    11f0:	80 91 20 01 	lds	r24, 0x0120
    11f4:	90 91 21 01 	lds	r25, 0x0121
    11f8:	a0 91 22 01 	lds	r26, 0x0122
    11fc:	b0 91 23 01 	lds	r27, 0x0123
    1200:	40 91 26 01 	lds	r20, 0x0126
    1204:	50 91 27 01 	lds	r21, 0x0127
    1208:	60 91 28 01 	lds	r22, 0x0128
    120c:	70 91 29 01 	lds	r23, 0x0129
    1210:	84 1b       	sub	r24, r20
    1212:	95 0b       	sbc	r25, r21
    1214:	a6 0b       	sbc	r26, r22
    1216:	b7 0b       	sbc	r27, r23
    1218:	80 93 1a 01 	sts	0x011A, r24
    121c:	90 93 1b 01 	sts	0x011B, r25
    1220:	a0 93 1c 01 	sts	0x011C, r26
    1224:	b0 93 1d 01 	sts	0x011D, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
    1228:	80 91 24 01 	lds	r24, 0x0124
    122c:	90 91 25 01 	lds	r25, 0x0125
    1230:	20 91 2a 01 	lds	r18, 0x012A
    1234:	30 91 2b 01 	lds	r19, 0x012B
    1238:	82 1b       	sub	r24, r18
    123a:	93 0b       	sbc	r25, r19
    123c:	90 93 1f 01 	sts	0x011F, r25
    1240:	80 93 1e 01 	sts	0x011E, r24
    1244:	08 95       	ret

00001246 <_Z13pot_timeslicev>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
    1246:	a2 e5       	ldi	r26, 0x52	; 82
    1248:	b1 e0       	ldi	r27, 0x01	; 1
    124a:	2d 91       	ld	r18, X+
    124c:	3c 91       	ld	r19, X
    124e:	11 97       	sbiw	r26, 0x01	; 1
    1250:	30 93 51 01 	sts	0x0151, r19
    1254:	20 93 50 01 	sts	0x0150, r18
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
    1258:	80 91 71 01 	lds	r24, 0x0171
    125c:	90 91 72 01 	lds	r25, 0x0172
    1260:	ef e6       	ldi	r30, 0x6F	; 111
    1262:	f1 e0       	ldi	r31, 0x01	; 1
    1264:	40 81       	ld	r20, Z
    1266:	51 81       	ldd	r21, Z+1	; 0x01
    1268:	bc 01       	movw	r22, r24
    126a:	64 1b       	sub	r22, r20
    126c:	75 0b       	sbc	r23, r21
    126e:	ab 01       	movw	r20, r22
    1270:	6d 93       	st	X+, r22
    1272:	7c 93       	st	X, r23
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b1 e0       	ldi	r27, 0x01	; 1
    1278:	6d 91       	ld	r22, X+
    127a:	7c 91       	ld	r23, X
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	70 93 4d 01 	sts	0x014D, r23
    1282:	60 93 4c 01 	sts	0x014C, r22
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
    1286:	42 1b       	sub	r20, r18
    1288:	53 0b       	sbc	r21, r19
    128a:	4d 93       	st	X+, r20
    128c:	5c 93       	st	X, r21
***********************************************/
void pot_timeslice()
{
	compute_pot_speed();
	compute_pot_acceleration();
	PotSample[0] = PotSample[1];
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
    1292:	08 95       	ret

00001294 <_Z7get_potv>:
Return	:	The motor position in degrees * 10
***********************************************/
word get_pot()
{
	return PotSample[1];
}
    1294:	80 91 71 01 	lds	r24, 0x0171
    1298:	90 91 72 01 	lds	r25, 0x0172
    129c:	08 95       	ret

0000129e <_Z27get_distance_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
word get_distance_to_destination()
{
	return (Destination.position - PotSample[1]);
    129e:	80 91 34 01 	lds	r24, 0x0134
    12a2:	90 91 35 01 	lds	r25, 0x0135
    12a6:	20 91 71 01 	lds	r18, 0x0171
    12aa:	30 91 72 01 	lds	r19, 0x0172
}
    12ae:	82 1b       	sub	r24, r18
    12b0:	93 0b       	sbc	r25, r19
    12b2:	08 95       	ret

000012b4 <_Z28get_direction_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
    12b4:	20 91 34 01 	lds	r18, 0x0134
    12b8:	30 91 35 01 	lds	r19, 0x0135
    12bc:	80 91 71 01 	lds	r24, 0x0171
    12c0:	90 91 72 01 	lds	r25, 0x0172
    12c4:	82 17       	cp	r24, r18
    12c6:	93 07       	cpc	r25, r19
    12c8:	58 f0       	brcs	.+22     	; 0x12e0 <_Z28get_direction_to_destinationv+0x2c>
		Destination.direction = 1;
		return 1;
	}
	else if (Destination.position < PotSample[1]) {
    12ca:	28 17       	cp	r18, r24
    12cc:	39 07       	cpc	r19, r25
    12ce:	20 f4       	brcc	.+8      	; 0x12d8 <_Z28get_direction_to_destinationv+0x24>
		Destination.direction = -1;	
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	80 93 36 01 	sts	0x0136, r24
		return -1;
    12d6:	08 95       	ret
	}
	else {
		Destination.direction = 0;
    12d8:	10 92 36 01 	sts	0x0136, r1
		return 0;	// exactly at destination
    12dc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    12de:	08 95       	ret
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
		Destination.direction = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 36 01 	sts	0x0136, r24
		return 1;
    12e6:	08 95       	ret

000012e8 <_Z17compute_pot_speedv>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
    12e8:	e2 e5       	ldi	r30, 0x52	; 82
    12ea:	f1 e0       	ldi	r31, 0x01	; 1
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	90 93 51 01 	sts	0x0151, r25
    12f4:	80 93 50 01 	sts	0x0150, r24
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
    12f8:	80 91 71 01 	lds	r24, 0x0171
    12fc:	90 91 72 01 	lds	r25, 0x0172
    1300:	20 91 6f 01 	lds	r18, 0x016F
    1304:	30 91 70 01 	lds	r19, 0x0170
    1308:	82 1b       	sub	r24, r18
    130a:	93 0b       	sbc	r25, r19
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
    1310:	08 95       	ret

00001312 <_Z24compute_pot_accelerationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
    1312:	ee e4       	ldi	r30, 0x4E	; 78
    1314:	f1 e0       	ldi	r31, 0x01	; 1
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	90 93 4d 01 	sts	0x014D, r25
    131e:	80 93 4c 01 	sts	0x014C, r24
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
    1322:	80 91 52 01 	lds	r24, 0x0152
    1326:	90 91 53 01 	lds	r25, 0x0153
    132a:	20 91 50 01 	lds	r18, 0x0150
    132e:	30 91 51 01 	lds	r19, 0x0151
    1332:	82 1b       	sub	r24, r18
    1334:	93 0b       	sbc	r25, r19
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
    133a:	08 95       	ret

0000133c <_Z11pot_percentv>:
Forward is duty > 0.50
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
	float position = PotSample[1];
	word half = (Range.value>>2) + EndPoint1.value;
    1344:	60 91 1e 01 	lds	r22, 0x011E
    1348:	70 91 1f 01 	lds	r23, 0x011F
    134c:	76 95       	lsr	r23
    134e:	67 95       	ror	r22
    1350:	76 95       	lsr	r23
    1352:	67 95       	ror	r22
    1354:	80 91 2a 01 	lds	r24, 0x012A
    1358:	90 91 2b 01 	lds	r25, 0x012B
    135c:	68 0f       	add	r22, r24
    135e:	79 1f       	adc	r23, r25
	
	float delta    = (position - half);
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    1368:	6b 01       	movw	r12, r22
    136a:	7c 01       	movw	r14, r24
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
	float position = PotSample[1];
    136c:	60 91 71 01 	lds	r22, 0x0171
    1370:	70 91 72 01 	lds	r23, 0x0172
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
	word half = (Range.value>>2) + EndPoint1.value;
	
	float delta    = (position - half);
    137c:	a7 01       	movw	r20, r14
    137e:	96 01       	movw	r18, r12
    1380:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__subsf3>
	float percent  = (delta / (float)half);
    1384:	a7 01       	movw	r20, r14
    1386:	96 01       	movw	r18, r12
    1388:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
	return percent;
}
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	08 95       	ret

00001396 <_Z16convert_to_anglet>:
convert_to_angle( word  mPotValue )
RETURN	:	Takes a Pot reading and converts to an angle
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( word  mPotValue )
{
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	ec 01       	movw	r28, r24
    13b0:	00 91 20 01 	lds	r16, 0x0120
    13b4:	10 91 21 01 	lds	r17, 0x0121
    13b8:	20 91 22 01 	lds	r18, 0x0122
    13bc:	30 91 23 01 	lds	r19, 0x0123
    13c0:	60 91 26 01 	lds	r22, 0x0126
    13c4:	70 91 27 01 	lds	r23, 0x0127
    13c8:	80 91 28 01 	lds	r24, 0x0128
    13cc:	90 91 29 01 	lds	r25, 0x0129
    13d0:	06 17       	cp	r16, r22
    13d2:	17 07       	cpc	r17, r23
    13d4:	28 07       	cpc	r18, r24
    13d6:	39 07       	cpc	r19, r25
    13d8:	14 f4       	brge	.+4      	; 0x13de <_Z16convert_to_anglet+0x48>
    13da:	c9 01       	movw	r24, r18
    13dc:	b8 01       	movw	r22, r16
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
    13de:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    13e2:	6b 01       	movw	r12, r22
    13e4:	7c 01       	movw	r14, r24
******************************************************/
float convert_to_angle( word  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
    13e6:	60 91 1a 01 	lds	r22, 0x011A
    13ea:	70 91 1b 01 	lds	r23, 0x011B
    13ee:	80 91 1c 01 	lds	r24, 0x011C
    13f2:	90 91 1d 01 	lds	r25, 0x011D
    13f6:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    13fa:	4b 01       	movw	r8, r22
    13fc:	5c 01       	movw	r10, r24
    13fe:	20 91 24 01 	lds	r18, 0x0124
    1402:	30 91 25 01 	lds	r19, 0x0125
    1406:	80 91 2a 01 	lds	r24, 0x012A
    140a:	90 91 2b 01 	lds	r25, 0x012B
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	08 f4       	brcc	.+2      	; 0x1416 <_Z16convert_to_anglet+0x80>
    1414:	c9 01       	movw	r24, r18
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( word  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
    1416:	9e 01       	movw	r18, r28
    1418:	28 1b       	sub	r18, r24
    141a:	39 0b       	sbc	r19, r25
    141c:	c9 01       	movw	r24, r18
    141e:	60 91 1e 01 	lds	r22, 0x011E
    1422:	70 91 1f 01 	lds	r23, 0x011F
    1426:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__udivmodhi4>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    1432:	9b 01       	movw	r18, r22
    1434:	ac 01       	movw	r20, r24
	float angle = ( ratio * Range.angle );			// range has the *100 in it
    1436:	c5 01       	movw	r24, r10
    1438:	b4 01       	movw	r22, r8
    143a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
	return angle + get_min_stop_angle();
    1442:	c7 01       	movw	r24, r14
    1444:	b6 01       	movw	r22, r12
    1446:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__addsf3>
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	bf 90       	pop	r11
    145c:	af 90       	pop	r10
    145e:	9f 90       	pop	r9
    1460:	8f 90       	pop	r8
    1462:	08 95       	ret

00001464 <_Z13get_pot_anglev>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
long int  get_pot_angle()
{
	return convert_to_angle(PotSample[1]);
    1464:	80 91 71 01 	lds	r24, 0x0171
    1468:	90 91 72 01 	lds	r25, 0x0172
    146c:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z16convert_to_anglet>
    1470:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__fixsfsi>
}
    1474:	08 95       	ret

00001476 <_Z21convert_to_fixedpointf>:
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
}
long int convert_to_fixedpoint( float  mRealNumber )
{
	long int fp = (mRealNumber * 100);
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	48 ec       	ldi	r20, 0xC8	; 200
    147c:	52 e4       	ldi	r21, 0x42	; 66
    147e:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    1482:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__fixsfsi>
	return fp;
}
    1486:	08 95       	ret

00001488 <_Z16convert_to_valuel>:
convert_to_value( float mAngle )
RETURN	:	Takes an Angle and converts to an expected
	POT reading.
******************************************************/
word  convert_to_value( long mAngleHundredthDeg )
{
    1488:	8f 92       	push	r8
    148a:	9f 92       	push	r9
    148c:	af 92       	push	r10
    148e:	bf 92       	push	r11
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	4b 01       	movw	r8, r22
    149a:	5c 01       	movw	r10, r24
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
	float pot_value = (ratio * Range.value) + get_min_stop_value();
    149c:	60 91 1e 01 	lds	r22, 0x011E
    14a0:	70 91 1f 01 	lds	r23, 0x011F
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    14ac:	6b 01       	movw	r12, r22
    14ae:	7c 01       	movw	r14, r24
    14b0:	40 91 20 01 	lds	r20, 0x0120
    14b4:	50 91 21 01 	lds	r21, 0x0121
    14b8:	60 91 22 01 	lds	r22, 0x0122
    14bc:	70 91 23 01 	lds	r23, 0x0123
    14c0:	80 91 26 01 	lds	r24, 0x0126
    14c4:	90 91 27 01 	lds	r25, 0x0127
    14c8:	a0 91 28 01 	lds	r26, 0x0128
    14cc:	b0 91 29 01 	lds	r27, 0x0129
    14d0:	48 17       	cp	r20, r24
    14d2:	59 07       	cpc	r21, r25
    14d4:	6a 07       	cpc	r22, r26
    14d6:	7b 07       	cpc	r23, r27
    14d8:	14 f4       	brge	.+4      	; 0x14de <_Z16convert_to_valuel+0x56>
    14da:	db 01       	movw	r26, r22
    14dc:	ca 01       	movw	r24, r20
	POT reading.
******************************************************/
word  convert_to_value( long mAngleHundredthDeg )
{
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
    14de:	a5 01       	movw	r20, r10
    14e0:	94 01       	movw	r18, r8
    14e2:	28 1b       	sub	r18, r24
    14e4:	39 0b       	sbc	r19, r25
    14e6:	4a 0b       	sbc	r20, r26
    14e8:	5b 0b       	sbc	r21, r27
    14ea:	ca 01       	movw	r24, r20
    14ec:	b9 01       	movw	r22, r18
    14ee:	20 91 1a 01 	lds	r18, 0x011A
    14f2:	30 91 1b 01 	lds	r19, 0x011B
    14f6:	40 91 1c 01 	lds	r20, 0x011C
    14fa:	50 91 1d 01 	lds	r21, 0x011D
    14fe:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__divmodsi4>
    1502:	ca 01       	movw	r24, r20
    1504:	b9 01       	movw	r22, r18
    1506:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
	float pot_value = (ratio * Range.value) + get_min_stop_value();
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    1516:	6b 01       	movw	r12, r22
    1518:	7c 01       	movw	r14, r24
    151a:	80 91 24 01 	lds	r24, 0x0124
    151e:	90 91 25 01 	lds	r25, 0x0125
    1522:	60 91 2a 01 	lds	r22, 0x012A
    1526:	70 91 2b 01 	lds	r23, 0x012B
    152a:	86 17       	cp	r24, r22
    152c:	97 07       	cpc	r25, r23
    152e:	08 f4       	brcc	.+2      	; 0x1532 <_Z16convert_to_valuel+0xaa>
    1530:	bc 01       	movw	r22, r24
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    153a:	9b 01       	movw	r18, r22
    153c:	ac 01       	movw	r20, r24
    153e:	c7 01       	movw	r24, r14
    1540:	b6 01       	movw	r22, r12
    1542:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__addsf3>
	return (word)pot_value;
    1546:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
}
    154a:	cb 01       	movw	r24, r22
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	08 95       	ret

0000155e <_Z21compute_default_stopsv>:
RETURN	:	float => Percentage between [0.0 .. 1.0]

******************************************************/
void  compute_default_stops()
{
	EndPoint1.value = 25; 			//(0.1 * MIN_POT_VALUE);		// 10 % limits
    155e:	89 e1       	ldi	r24, 0x19	; 25
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	90 93 2b 01 	sts	0x012B, r25
    1566:	80 93 2a 01 	sts	0x012A, r24
	EndPoint2.value = 0x3ff-25; 	//(0.9 * MAX_POT_VALUE);		// 10 % limits	
    156a:	86 ee       	ldi	r24, 0xE6	; 230
    156c:	93 e0       	ldi	r25, 0x03	; 3
    156e:	90 93 25 01 	sts	0x0125, r25
    1572:	80 93 24 01 	sts	0x0124, r24
	
	EndPoint1.angle =   0*100;		// 0 degrees
    1576:	10 92 26 01 	sts	0x0126, r1
    157a:	10 92 27 01 	sts	0x0127, r1
    157e:	10 92 28 01 	sts	0x0128, r1
    1582:	10 92 29 01 	sts	0x0129, r1
	EndPoint2.angle = 300*100;		// Most Pots turn 300 degrees
    1586:	80 e3       	ldi	r24, 0x30	; 48
    1588:	95 e7       	ldi	r25, 0x75	; 117
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	80 93 20 01 	sts	0x0120, r24
    1592:	90 93 21 01 	sts	0x0121, r25
    1596:	a0 93 22 01 	sts	0x0122, r26
    159a:	b0 93 23 01 	sts	0x0123, r27
    159e:	08 95       	ret

000015a0 <_Z13compute_rangev>:
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
    15a0:	80 91 20 01 	lds	r24, 0x0120
    15a4:	90 91 21 01 	lds	r25, 0x0121
    15a8:	a0 91 22 01 	lds	r26, 0x0122
    15ac:	b0 91 23 01 	lds	r27, 0x0123
    15b0:	40 91 26 01 	lds	r20, 0x0126
    15b4:	50 91 27 01 	lds	r21, 0x0127
    15b8:	60 91 28 01 	lds	r22, 0x0128
    15bc:	70 91 29 01 	lds	r23, 0x0129
    15c0:	84 1b       	sub	r24, r20
    15c2:	95 0b       	sbc	r25, r21
    15c4:	a6 0b       	sbc	r26, r22
    15c6:	b7 0b       	sbc	r27, r23
    15c8:	80 93 1a 01 	sts	0x011A, r24
    15cc:	90 93 1b 01 	sts	0x011B, r25
    15d0:	a0 93 1c 01 	sts	0x011C, r26
    15d4:	b0 93 1d 01 	sts	0x011D, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
    15d8:	80 91 24 01 	lds	r24, 0x0124
    15dc:	90 91 25 01 	lds	r25, 0x0125
    15e0:	20 91 2a 01 	lds	r18, 0x012A
    15e4:	30 91 2b 01 	lds	r19, 0x012B
    15e8:	82 1b       	sub	r24, r18
    15ea:	93 0b       	sbc	r25, r19
    15ec:	90 93 1f 01 	sts	0x011F, r25
    15f0:	80 93 1e 01 	sts	0x011E, r24
    15f4:	08 95       	ret

000015f6 <_Z18get_min_stop_valuev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_min_stop_value()
{
    15f6:	20 91 24 01 	lds	r18, 0x0124
    15fa:	30 91 25 01 	lds	r19, 0x0125
    15fe:	80 91 2a 01 	lds	r24, 0x012A
    1602:	90 91 2b 01 	lds	r25, 0x012B
    1606:	28 17       	cp	r18, r24
    1608:	39 07       	cpc	r19, r25
    160a:	08 f4       	brcc	.+2      	; 0x160e <_Z18get_min_stop_valuev+0x18>
    160c:	c9 01       	movw	r24, r18
	return min( EndPoint2.value, EndPoint1.value);	
}
    160e:	08 95       	ret

00001610 <_Z18get_min_stop_anglev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	00 91 20 01 	lds	r16, 0x0120
    1618:	10 91 21 01 	lds	r17, 0x0121
    161c:	20 91 22 01 	lds	r18, 0x0122
    1620:	30 91 23 01 	lds	r19, 0x0123
    1624:	60 91 26 01 	lds	r22, 0x0126
    1628:	70 91 27 01 	lds	r23, 0x0127
    162c:	80 91 28 01 	lds	r24, 0x0128
    1630:	90 91 29 01 	lds	r25, 0x0129
    1634:	06 17       	cp	r16, r22
    1636:	17 07       	cpc	r17, r23
    1638:	28 07       	cpc	r18, r24
    163a:	39 07       	cpc	r19, r25
    163c:	14 f4       	brge	.+4      	; 0x1642 <_Z18get_min_stop_anglev+0x32>
    163e:	c9 01       	movw	r24, r18
    1640:	b8 01       	movw	r22, r16
	return min( EndPoint2.angle , EndPoint1.angle);
}
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <_Z18get_max_stop_valuev>:
/*******************************************************
get_max_stop_value()
RETURN	:	Greater of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_max_stop_value()
{
    1648:	20 91 24 01 	lds	r18, 0x0124
    164c:	30 91 25 01 	lds	r19, 0x0125
    1650:	80 91 2a 01 	lds	r24, 0x012A
    1654:	90 91 2b 01 	lds	r25, 0x012B
    1658:	82 17       	cp	r24, r18
    165a:	93 07       	cpc	r25, r19
    165c:	08 f4       	brcc	.+2      	; 0x1660 <_Z18get_max_stop_valuev+0x18>
    165e:	c9 01       	movw	r24, r18
	return max( EndPoint2.value, EndPoint1.value );
}
    1660:	08 95       	ret

00001662 <_Z18get_max_stop_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
long int  get_max_stop_angle()
{
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	00 91 20 01 	lds	r16, 0x0120
    166a:	10 91 21 01 	lds	r17, 0x0121
    166e:	20 91 22 01 	lds	r18, 0x0122
    1672:	30 91 23 01 	lds	r19, 0x0123
    1676:	60 91 26 01 	lds	r22, 0x0126
    167a:	70 91 27 01 	lds	r23, 0x0127
    167e:	80 91 28 01 	lds	r24, 0x0128
    1682:	90 91 29 01 	lds	r25, 0x0129
    1686:	60 17       	cp	r22, r16
    1688:	71 07       	cpc	r23, r17
    168a:	82 07       	cpc	r24, r18
    168c:	93 07       	cpc	r25, r19
    168e:	14 f4       	brge	.+4      	; 0x1694 <_Z18get_max_stop_anglev+0x32>
    1690:	c9 01       	movw	r24, r18
    1692:	b8 01       	movw	r22, r16
	return max( EndPoint2.angle , EndPoint1.angle);
}
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <_Z20order_stops_by_valuev>:
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
word	  get_min_stop_value()
{
	return min( EndPoint2.value, EndPoint1.value);	
    169a:	e0 91 24 01 	lds	r30, 0x0124
    169e:	f0 91 25 01 	lds	r31, 0x0125
    16a2:	20 91 2a 01 	lds	r18, 0x012A
    16a6:	30 91 2b 01 	lds	r19, 0x012B
    16aa:	e2 17       	cp	r30, r18
    16ac:	f3 07       	cpc	r31, r19
    16ae:	40 f5       	brcc	.+80     	; 0x1700 <_Z20order_stops_by_valuev+0x66>
{
	word Min = get_min_stop_value();
	if (EndPoint1.value == Min) return;		// okay

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
    16b0:	80 91 26 01 	lds	r24, 0x0126
    16b4:	90 91 27 01 	lds	r25, 0x0127
    16b8:	a0 91 28 01 	lds	r26, 0x0128
    16bc:	b0 91 29 01 	lds	r27, 0x0129
	word     tvalue = EndPoint1.value;
	
	EndPoint1.angle = EndPoint2.angle;
    16c0:	40 91 20 01 	lds	r20, 0x0120
    16c4:	50 91 21 01 	lds	r21, 0x0121
    16c8:	60 91 22 01 	lds	r22, 0x0122
    16cc:	70 91 23 01 	lds	r23, 0x0123
    16d0:	40 93 26 01 	sts	0x0126, r20
    16d4:	50 93 27 01 	sts	0x0127, r21
    16d8:	60 93 28 01 	sts	0x0128, r22
    16dc:	70 93 29 01 	sts	0x0129, r23
	EndPoint1.value = EndPoint2.value;		
    16e0:	f0 93 2b 01 	sts	0x012B, r31
    16e4:	e0 93 2a 01 	sts	0x012A, r30
	EndPoint2.angle = tangle;
    16e8:	80 93 20 01 	sts	0x0120, r24
    16ec:	90 93 21 01 	sts	0x0121, r25
    16f0:	a0 93 22 01 	sts	0x0122, r26
    16f4:	b0 93 23 01 	sts	0x0123, r27
	EndPoint2.value = tvalue;	
    16f8:	30 93 25 01 	sts	0x0125, r19
    16fc:	20 93 24 01 	sts	0x0124, r18
    1700:	08 95       	ret

00001702 <_Z20order_stops_by_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
	return min( EndPoint2.angle , EndPoint1.angle);
    1706:	40 91 20 01 	lds	r20, 0x0120
    170a:	50 91 21 01 	lds	r21, 0x0121
    170e:	60 91 22 01 	lds	r22, 0x0122
    1712:	70 91 23 01 	lds	r23, 0x0123
    1716:	80 91 26 01 	lds	r24, 0x0126
    171a:	90 91 27 01 	lds	r25, 0x0127
    171e:	a0 91 28 01 	lds	r26, 0x0128
    1722:	b0 91 29 01 	lds	r27, 0x0129
    1726:	8c 01       	movw	r16, r24
    1728:	9d 01       	movw	r18, r26
    172a:	48 17       	cp	r20, r24
    172c:	59 07       	cpc	r21, r25
    172e:	6a 07       	cpc	r22, r26
    1730:	7b 07       	cpc	r23, r27
    1732:	14 f4       	brge	.+4      	; 0x1738 <_Z20order_stops_by_anglev+0x36>
    1734:	8a 01       	movw	r16, r20
    1736:	9b 01       	movw	r18, r22
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
	word Min = get_min_stop_angle();
	if (EndPoint1.angle == Min) return;		// okay
    1738:	22 27       	eor	r18, r18
    173a:	33 27       	eor	r19, r19
    173c:	08 17       	cp	r16, r24
    173e:	19 07       	cpc	r17, r25
    1740:	2a 07       	cpc	r18, r26
    1742:	3b 07       	cpc	r19, r27
    1744:	01 f1       	breq	.+64     	; 0x1786 <_Z20order_stops_by_anglev+0x84>

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
	word     tvalue = EndPoint1.value;
    1746:	20 91 2a 01 	lds	r18, 0x012A
    174a:	30 91 2b 01 	lds	r19, 0x012B
	
	EndPoint1.angle = EndPoint2.angle;
    174e:	40 93 26 01 	sts	0x0126, r20
    1752:	50 93 27 01 	sts	0x0127, r21
    1756:	60 93 28 01 	sts	0x0128, r22
    175a:	70 93 29 01 	sts	0x0129, r23
	EndPoint1.value = EndPoint2.value;		
    175e:	40 91 24 01 	lds	r20, 0x0124
    1762:	50 91 25 01 	lds	r21, 0x0125
    1766:	50 93 2b 01 	sts	0x012B, r21
    176a:	40 93 2a 01 	sts	0x012A, r20
	EndPoint2.angle = tangle;
    176e:	80 93 20 01 	sts	0x0120, r24
    1772:	90 93 21 01 	sts	0x0121, r25
    1776:	a0 93 22 01 	sts	0x0122, r26
    177a:	b0 93 23 01 	sts	0x0123, r27
	EndPoint2.value = tvalue;
    177e:	30 93 25 01 	sts	0x0125, r19
    1782:	20 93 24 01 	sts	0x0124, r18
}
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <_Z11check_stopst>:
			1 = Under the Lower stop
			2 = Over the top stop
***********************************************/
#define HYSTERESIS_THRESHOLD 7
byte  check_stops( word  mPotValue )
{
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	ec 01       	movw	r28, r24
	static byte previous_state = 0;
	led_off(LIMIT_MIN);
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <_Z7led_offh>
	led_off(LIMIT_MAX);
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <_Z7led_offh>

	if (previous_state==1)		// IN STOP 1
    179e:	80 91 55 01 	lds	r24, 0x0155
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	a1 f0       	breq	.+40     	; 0x17ce <_Z11check_stopst+0x42>
		else {
			led_on(LIMIT_MIN);
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	01 f1       	breq	.+64     	; 0x17ea <_Z11check_stopst+0x5e>
			led_on(LIMIT_MAX);		
			return previous_state;		
		}
	}
		
	if (mPotValue < EndPoint1.value)
    17aa:	80 91 2a 01 	lds	r24, 0x012A
    17ae:	90 91 2b 01 	lds	r25, 0x012B
    17b2:	c8 17       	cp	r28, r24
    17b4:	d9 07       	cpc	r29, r25
    17b6:	38 f1       	brcs	.+78     	; 0x1806 <_Z11check_stopst+0x7a>
	{
		led_on(LIMIT_MIN);
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
    17b8:	80 91 24 01 	lds	r24, 0x0124
    17bc:	90 91 25 01 	lds	r25, 0x0125
    17c0:	8c 17       	cp	r24, r28
    17c2:	9d 07       	cpc	r25, r29
    17c4:	78 f1       	brcs	.+94     	; 0x1824 <_Z11check_stopst+0x98>
	{
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret
	led_off(LIMIT_MIN);
	led_off(LIMIT_MAX);

	if (previous_state==1)		// IN STOP 1
	{
		word hysteresis = EndPoint1.value + HYSTERESIS_THRESHOLD;
    17ce:	80 91 2a 01 	lds	r24, 0x012A
    17d2:	90 91 2b 01 	lds	r25, 0x012B
    17d6:	07 96       	adiw	r24, 0x07	; 7
		if (mPotValue > hysteresis) {
    17d8:	8c 17       	cp	r24, r28
    17da:	9d 07       	cpc	r25, r29
    17dc:	e8 f4       	brcc	.+58     	; 0x1818 <_Z11check_stopst+0x8c>
			previous_state = 0;
    17de:	10 92 55 01 	sts	0x0155, r1
			return 0;
    17e2:	80 e0       	ldi	r24, 0x00	; 0
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
	{
		word hysteresis = EndPoint2.value - HYSTERESIS_THRESHOLD;
    17ea:	80 91 24 01 	lds	r24, 0x0124
    17ee:	90 91 25 01 	lds	r25, 0x0125
    17f2:	07 97       	sbiw	r24, 0x07	; 7
		if (mPotValue < hysteresis) {
    17f4:	c8 17       	cp	r28, r24
    17f6:	d9 07       	cpc	r29, r25
    17f8:	90 f3       	brcs	.-28     	; 0x17de <_Z11check_stopst+0x52>
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MAX);		
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_Z6led_onh>
			return previous_state;		
    1800:	80 91 55 01 	lds	r24, 0x0155
    1804:	e1 cf       	rjmp	.-62     	; 0x17c8 <_Z11check_stopst+0x3c>
		}
	}
		
	if (mPotValue < EndPoint1.value)
	{
		led_on(LIMIT_MIN);
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_Z6led_onh>
		previous_state = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 55 01 	sts	0x0155, r24
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret
		if (mPotValue > hysteresis) {
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MIN);
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_Z6led_onh>
			return previous_state;		
    181e:	80 91 55 01 	lds	r24, 0x0155
    1822:	d2 cf       	rjmp	.-92     	; 0x17c8 <_Z11check_stopst+0x3c>
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
	{
		led_on(LIMIT_MAX);
    1824:	84 e0       	ldi	r24, 0x04	; 4
    1826:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_Z6led_onh>
		previous_state = 2;
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	80 93 55 01 	sts	0x0155, r24
		return 2;
	}
	return 0;
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <_Z11check_stalltt>:
			1 = Over current Left side
			2 = Over current Right side
***********************************************/
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
    1836:	20 91 01 01 	lds	r18, 0x0101
    183a:	30 91 02 01 	lds	r19, 0x0102
    183e:	28 17       	cp	r18, r24
    1840:	39 07       	cpc	r19, r25
    1842:	38 f0       	brcs	.+14     	; 0x1852 <_Z11check_stalltt+0x1c>
		return 1;
	if (mRightCurrent > current_2_threshold)
    1844:	26 17       	cp	r18, r22
    1846:	37 07       	cpc	r19, r23
    1848:	10 f4       	brcc	.+4      	; 0x184e <_Z11check_stalltt+0x18>
		return 2;
    184a:	82 e0       	ldi	r24, 0x02	; 2
    184c:	08 95       	ret
	return 0;
    184e:	80 e0       	ldi	r24, 0x00	; 0
}
    1850:	08 95       	ret
			2 = Over current Right side
***********************************************/
byte	check_stall( word  mLeftCurrent, word mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
		return 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	08 95       	ret

00001856 <_Z19destination_reachedv>:
			1 = Exactly reached
			2 = Close over
			3 = Close under
***********************************************/
byte	  destination_reached(  )
{
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;
    1864:	10 91 31 01 	lds	r17, 0x0131
    1868:	11 11       	cpse	r17, r1
    186a:	20 c0       	rjmp	.+64     	; 0x18ac <_Z19destination_reachedv+0x56>

	if (Destination.position == PotSample[1])
    186c:	60 91 34 01 	lds	r22, 0x0134
    1870:	70 91 35 01 	lds	r23, 0x0135
    1874:	c0 91 71 01 	lds	r28, 0x0171
    1878:	d0 91 72 01 	lds	r29, 0x0172
    187c:	6c 17       	cp	r22, r28
    187e:	7d 07       	cpc	r23, r29
    1880:	39 f1       	breq	.+78     	; 0x18d0 <_Z19destination_reachedv+0x7a>
		return 1;

	if (previous_state==2)
    1882:	80 91 54 01 	lds	r24, 0x0154
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	29 f1       	breq	.+74     	; 0x18d4 <_Z19destination_reachedv+0x7e>
			return 0;
		}
		else return previous_state;		
	}

	if (previous_state==3)
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	e1 f1       	breq	.+120    	; 0x1906 <_Z19destination_reachedv+0xb0>
		}
		else return previous_state;
	}

	// Check for overage
	if (Destination.starting_position < Destination.position)
    188e:	80 91 32 01 	lds	r24, 0x0132
    1892:	90 91 33 01 	lds	r25, 0x0133
    1896:	86 17       	cp	r24, r22
    1898:	97 07       	cpc	r25, r23
    189a:	90 f4       	brcc	.+36     	; 0x18c0 <_Z19destination_reachedv+0x6a>
	{
		// Approaching upward:
		if (PotSample[1] > Destination.position) {
    189c:	6c 17       	cp	r22, r28
    189e:	7d 07       	cpc	r23, r29
    18a0:	30 f4       	brcc	.+12     	; 0x18ae <_Z19destination_reachedv+0x58>
			previous_state = 2;
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	80 93 54 01 	sts	0x0154, r24
			return 2;		// reached upwardly
    18a8:	12 e0       	ldi	r17, 0x02	; 2
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <_Z19destination_reachedv+0x58>
			3 = Close under
***********************************************/
byte	  destination_reached(  )
{
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;
    18ac:	10 e0       	ldi	r17, 0x00	; 0
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
}
    18ae:	81 2f       	mov	r24, r17
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	08 95       	ret
			return 2;		// reached upwardly
		} 
	}
	else 
	{	// Approaching downward:
		if ( PotSample[1] < Destination.position ) {
    18c0:	c6 17       	cp	r28, r22
    18c2:	d7 07       	cpc	r29, r23
    18c4:	a0 f7       	brcc	.-24     	; 0x18ae <_Z19destination_reachedv+0x58>
			previous_state = 3;
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	80 93 54 01 	sts	0x0154, r24
			return 3;		// reached downwardly
    18cc:	13 e0       	ldi	r17, 0x03	; 3
    18ce:	ef cf       	rjmp	.-34     	; 0x18ae <_Z19destination_reachedv+0x58>
{
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;

	if (Destination.position == PotSample[1])
		return 1;
    18d0:	11 e0       	ldi	r17, 0x01	; 1
    18d2:	ed cf       	rjmp	.-38     	; 0x18ae <_Z19destination_reachedv+0x58>

	if (previous_state==2)
	{
		word hysteresis = Destination.position - (0.1*Destination.position);
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    18dc:	6b 01       	movw	r12, r22
    18de:	7c 01       	movw	r14, r24
    18e0:	2d ec       	ldi	r18, 0xCD	; 205
    18e2:	3c ec       	ldi	r19, 0xCC	; 204
    18e4:	4c ec       	ldi	r20, 0xCC	; 204
    18e6:	5d e3       	ldi	r21, 0x3D	; 61
    18e8:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    18ec:	9b 01       	movw	r18, r22
    18ee:	ac 01       	movw	r20, r24
    18f0:	c7 01       	movw	r24, r14
    18f2:	b6 01       	movw	r22, r12
    18f4:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__subsf3>
    18f8:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
		if (PotSample[1] < hysteresis) {
    18fc:	c6 17       	cp	r28, r22
    18fe:	d7 07       	cpc	r29, r23
    1900:	c8 f0       	brcs	.+50     	; 0x1934 <_Z19destination_reachedv+0xde>
    1902:	12 e0       	ldi	r17, 0x02	; 2
    1904:	d4 cf       	rjmp	.-88     	; 0x18ae <_Z19destination_reachedv+0x58>
		else return previous_state;		
	}

	if (previous_state==3)
	{
		word hysteresis = Destination.position + (0.1*Destination.position);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    190e:	6b 01       	movw	r12, r22
    1910:	7c 01       	movw	r14, r24
    1912:	2d ec       	ldi	r18, 0xCD	; 205
    1914:	3c ec       	ldi	r19, 0xCC	; 204
    1916:	4c ec       	ldi	r20, 0xCC	; 204
    1918:	5d e3       	ldi	r21, 0x3D	; 61
    191a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	c7 01       	movw	r24, r14
    1924:	b6 01       	movw	r22, r12
    1926:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__addsf3>
    192a:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
		if (PotSample[1] > hysteresis) {
    192e:	6c 17       	cp	r22, r28
    1930:	7d 07       	cpc	r23, r29
    1932:	60 f6       	brcc	.-104    	; 0x18cc <_Z19destination_reachedv+0x76>

	if (previous_state==2)
	{
		word hysteresis = Destination.position - (0.1*Destination.position);
		if (PotSample[1] < hysteresis) {
			previous_state = 0;
    1934:	10 92 54 01 	sts	0x0154, r1
			return 0;
    1938:	ba cf       	rjmp	.-140    	; 0x18ae <_Z19destination_reachedv+0x58>

0000193a <__vector_22>:
byte prev_q2 = 0;			// Holds the previous sample of the Q1 quadrature input.
byte prev_direction = CW;

// This covers PCint pins[7:0]
ISR ( PCINT0_vect )
{
    193a:	1f 92       	push	r1
    193c:	0f 92       	push	r0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	0f 92       	push	r0
    1942:	11 24       	eor	r1, r1
    1944:	2f 93       	push	r18
    1946:	3f 93       	push	r19
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
	byte reg = PINB;		// PortB In
    194c:	83 b1       	in	r24, 0x03	; 3
	byte q1 = (reg & (1<<ENCODER_Q1));
    194e:	28 2f       	mov	r18, r24
    1950:	28 70       	andi	r18, 0x08	; 8
	byte q2 = (reg & (1<<ENCODER_Q2));
    1952:	38 2f       	mov	r19, r24
    1954:	30 71       	andi	r19, 0x10	; 16
	byte Direction = CW;

	// Decode Direction & Count!
	// Determine direction by the value of Q2 when Q1 transitions high.
	if ((prev_q1==0) && (q1))		// Low to High
    1956:	80 91 58 01 	lds	r24, 0x0158
    195a:	81 11       	cpse	r24, r1
    195c:	0d c0       	rjmp	.+26     	; 0x1978 <__vector_22+0x3e>
    195e:	22 23       	and	r18, r18
    1960:	59 f0       	breq	.+22     	; 0x1978 <__vector_22+0x3e>
	{
		if (q2) Direction = CW;
    1962:	33 23       	and	r19, r19
    1964:	b1 f0       	breq	.+44     	; 0x1992 <__vector_22+0x58>
		else 	Direction = CCW;
		
		if (Direction == CW)
			EncoderCount++;		// never reset.  Holds _THE_ count from min stop.
    1966:	80 91 5f 01 	lds	r24, 0x015F
    196a:	90 91 60 01 	lds	r25, 0x0160
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	90 93 60 01 	sts	0x0160, r25
    1974:	80 93 5f 01 	sts	0x015F, r24
		else 
			EncoderCount--;
	}

	prev_q1 = q1;
    1978:	20 93 58 01 	sts	0x0158, r18
	prev_q2 = q2;
    197c:	30 93 57 01 	sts	0x0157, r19
	// PCIF flag is automatically cleared by entering this routine!
}
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti
		else 	Direction = CCW;
		
		if (Direction == CW)
			EncoderCount++;		// never reset.  Holds _THE_ count from min stop.
		else 
			EncoderCount--;
    1992:	80 91 5f 01 	lds	r24, 0x015F
    1996:	90 91 60 01 	lds	r25, 0x0160
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	90 93 60 01 	sts	0x0160, r25
    19a0:	80 93 5f 01 	sts	0x015F, r24
    19a4:	e9 cf       	rjmp	.-46     	; 0x1978 <__vector_22+0x3e>

000019a6 <_Z12encoder_initv>:
}

void encoder_init()
{
	// SET INPUTS:
	ENCODER_DDR &= ~ENCODER_DDR_INPUT_MASK;		// see pin_definitions.h
    19a6:	84 b1       	in	r24, 0x04	; 4
    19a8:	83 7e       	andi	r24, 0xE3	; 227
    19aa:	84 b9       	out	0x04, r24	; 4

	// Enable Interrupts on Rising Edges:
	PCMSK0 |= ((1<<ENCODER_Q1) | (1<<ENCODER_Q2));	  // | (1<<ENCODER_INDEX);
    19ac:	ea e6       	ldi	r30, 0x6A	; 106
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	88 61       	ori	r24, 0x18	; 24
    19b4:	80 83       	st	Z, r24
	PCICR  |= 0x01;     //PCIE0;
    19b6:	e8 e6       	ldi	r30, 0x68	; 104
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	81 60       	ori	r24, 0x01	; 1
    19be:	80 83       	st	Z, r24
    19c0:	08 95       	ret

000019c2 <_Z15encoder_disablev>:
}

void encoder_disable()
{
	// Disable Interrupts on Rising Edges: 
	PCMSK0 &= ~((1<<ENCODER_Q1) | (1<<ENCODER_Q2));		// zero the bits.	
    19c2:	ea e6       	ldi	r30, 0x6A	; 106
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	87 7e       	andi	r24, 0xE7	; 231
    19ca:	80 83       	st	Z, r24
	PCICR  &= ~0x01;     //PCIE0;		
    19cc:	e8 e6       	ldi	r30, 0x68	; 104
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8e 7f       	andi	r24, 0xFE	; 254
    19d4:	80 83       	st	Z, r24
    19d6:	08 95       	ret

000019d8 <_Z17encoder_timeslicev>:
}

/* Call every ~20ms ==> 50hz */
// Counts per Second : 
void encoder_timeslice()
{
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
	EncoderSpeed 		= (EncoderCount - EncoderCountPrev) * 50;		// for 10ms task : *100
    19e4:	c0 91 5f 01 	lds	r28, 0x015F
    19e8:	d0 91 60 01 	lds	r29, 0x0160
    19ec:	80 91 65 01 	lds	r24, 0x0165
    19f0:	90 91 66 01 	lds	r25, 0x0166
    19f4:	9e 01       	movw	r18, r28
    19f6:	28 1b       	sub	r18, r24
    19f8:	39 0b       	sbc	r19, r25
    19fa:	c9 01       	movw	r24, r18
    19fc:	22 e3       	ldi	r18, 0x32	; 50
    19fe:	28 9f       	mul	r18, r24
    1a00:	b0 01       	movw	r22, r0
    1a02:	29 9f       	mul	r18, r25
    1a04:	70 0d       	add	r23, r0
    1a06:	11 24       	eor	r1, r1
    1a08:	70 93 5e 01 	sts	0x015E, r23
    1a0c:	60 93 5d 01 	sts	0x015D, r22
	EncoderAcceleration = (EncoderSpeed - EncoderSpeedPrev) * 50;		// counts per second per second
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    1a18:	6b 01       	movw	r12, r22
    1a1a:	7c 01       	movw	r14, r24
    1a1c:	20 91 61 01 	lds	r18, 0x0161
    1a20:	30 91 62 01 	lds	r19, 0x0162
    1a24:	40 91 63 01 	lds	r20, 0x0163
    1a28:	50 91 64 01 	lds	r21, 0x0164
    1a2c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__subsf3>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	48 e4       	ldi	r20, 0x48	; 72
    1a36:	52 e4       	ldi	r21, 0x42	; 66
    1a38:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    1a3c:	60 93 59 01 	sts	0x0159, r22
    1a40:	70 93 5a 01 	sts	0x015A, r23
    1a44:	80 93 5b 01 	sts	0x015B, r24
    1a48:	90 93 5c 01 	sts	0x015C, r25

	//EncoderSpeed++;	// for debug!	to tell if we're getting here.
	
	EncoderCountPrev 	= EncoderCount;
    1a4c:	d0 93 66 01 	sts	0x0166, r29
    1a50:	c0 93 65 01 	sts	0x0165, r28
	EncoderSpeedPrev 	= EncoderSpeed;
    1a54:	c0 92 61 01 	sts	0x0161, r12
    1a58:	d0 92 62 01 	sts	0x0162, r13
    1a5c:	e0 92 63 01 	sts	0x0163, r14
    1a60:	f0 92 64 01 	sts	0x0164, r15
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	ff 90       	pop	r15
    1a6a:	ef 90       	pop	r14
    1a6c:	df 90       	pop	r13
    1a6e:	cf 90       	pop	r12
    1a70:	08 95       	ret

00001a72 <_Z17get_encoder_anglev>:
long int  get_encoder_angle()
{
	// Need to fix!  Verify stops are at least word size.  
	//return convert_to_angle( EncoderCount );
	return 0;
}
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	cb 01       	movw	r24, r22
    1a78:	08 95       	ret

00001a7a <_Z11OS_Dispatchv>:
	{		
		//motor_timeslice_10ms();		put all 3 back in!
		//report_timeslice_10ms();
		//pot_timeslice();					// update speed,accel
	}
	if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    1a7a:	80 91 32 02 	lds	r24, 0x0232
    1a7e:	90 91 33 02 	lds	r25, 0x0233
    1a82:	64 e1       	ldi	r22, 0x14	; 20
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divmodhi4>
    1a8a:	89 2b       	or	r24, r25
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <_Z11OS_Dispatchv+0x1a>
    1a8e:	80 91 3b 02 	lds	r24, 0x023B
	{	
		if (isConfigured(MODE_USE_ENCODER))
    1a92:	80 ff       	sbrs	r24, 0
    1a94:	08 95       	ret
			encoder_timeslice();
    1a96:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_Z17encoder_timeslicev>

00001a9a <__vector_27>:
byte next_channel = 0;
byte sample_counter = 0;
#define NUM_AVGS 10

ISR ( ADC_vect )
{
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
	if (sample_counter++ > NUM_AVGS) {
    1ac8:	80 91 6d 01 	lds	r24, 0x016D
    1acc:	8b 30       	cpi	r24, 0x0B	; 11
    1ace:	b0 f5       	brcc	.+108    	; 0x1b3c <__vector_27+0xa2>
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	80 93 6d 01 	sts	0x016D, r24
		sample_counter=0;
	}
	word result = ADCL;
    1ad6:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
    1ada:	c0 91 79 00 	lds	r28, 0x0079
    1ade:	d0 e0       	ldi	r29, 0x00	; 0
    1ae0:	dc 2f       	mov	r29, r28
    1ae2:	cc 27       	eor	r28, r28
    1ae4:	c8 0f       	add	r28, r24
    1ae6:	d1 1d       	adc	r29, r1
	switch(next_channel)				// Round Robin style measurements
    1ae8:	80 91 6e 01 	lds	r24, 0x016E
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <__vector_27+0x58>
    1af0:	66 c0       	rjmp	.+204    	; 0x1bbe <__vector_27+0x124>
    1af2:	08 f4       	brcc	.+2      	; 0x1af6 <__vector_27+0x5c>
    1af4:	54 c0       	rjmp	.+168    	; 0x1b9e <__vector_27+0x104>
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	21 f1       	breq	.+72     	; 0x1b42 <__vector_27+0xa8>
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;

	default: 			
			next_channel = 0;
    1afa:	10 92 6e 01 	sts	0x016E, r1
			ADMUX = POT_MUX;		// Select POT	
    1afe:	82 e4       	ldi	r24, 0x42	; 66
    1b00:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
    1b04:	80 91 7a 00 	lds	r24, 0x007A
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
    1b0e:	ff 91       	pop	r31
    1b10:	ef 91       	pop	r30
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	bf 91       	pop	r27
    1b18:	af 91       	pop	r26
    1b1a:	9f 91       	pop	r25
    1b1c:	8f 91       	pop	r24
    1b1e:	7f 91       	pop	r23
    1b20:	6f 91       	pop	r22
    1b22:	5f 91       	pop	r21
    1b24:	4f 91       	pop	r20
    1b26:	3f 91       	pop	r19
    1b28:	2f 91       	pop	r18
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	1f 90       	pop	r1
    1b3a:	18 95       	reti
#define NUM_AVGS 10

ISR ( ADC_vect )
{
	if (sample_counter++ > NUM_AVGS) {
		sample_counter=0;
    1b3c:	10 92 6d 01 	sts	0x016D, r1
    1b40:	ca cf       	rjmp	.-108    	; 0x1ad6 <__vector_27+0x3c>
			next_channel = 2;
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
			ADCSRA |= (1<<ADSC);			// Start conversion
			break;
			
	case 2:	RightCurrentSample = result;	
    1b42:	d0 93 74 01 	sts	0x0174, r29
    1b46:	c0 93 73 01 	sts	0x0173, r28
			RightCurrentSampleAvg = (gamma*RightCurrentSampleAvg) + alpha*((float)RightCurrentSample);
    1b4a:	2d ec       	ldi	r18, 0xCD	; 205
    1b4c:	3c ec       	ldi	r19, 0xCC	; 204
    1b4e:	4c e4       	ldi	r20, 0x4C	; 76
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	60 91 77 01 	lds	r22, 0x0177
    1b56:	70 91 78 01 	lds	r23, 0x0178
    1b5a:	80 91 79 01 	lds	r24, 0x0179
    1b5e:	90 91 7a 01 	lds	r25, 0x017A
    1b62:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    1b66:	6b 01       	movw	r12, r22
    1b68:	7c 01       	movw	r14, r24
    1b6a:	be 01       	movw	r22, r28
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    1b74:	2d ec       	ldi	r18, 0xCD	; 205
    1b76:	3c ec       	ldi	r19, 0xCC	; 204
    1b78:	4c e4       	ldi	r20, 0x4C	; 76
    1b7a:	5e e3       	ldi	r21, 0x3E	; 62
    1b7c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    1b80:	9b 01       	movw	r18, r22
    1b82:	ac 01       	movw	r20, r24
    1b84:	c7 01       	movw	r24, r14
    1b86:	b6 01       	movw	r22, r12
    1b88:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__addsf3>
    1b8c:	60 93 77 01 	sts	0x0177, r22
    1b90:	70 93 78 01 	sts	0x0178, r23
    1b94:	80 93 79 01 	sts	0x0179, r24
    1b98:	90 93 7a 01 	sts	0x017A, r25
    1b9c:	ae cf       	rjmp	.-164    	; 0x1afa <__vector_27+0x60>
	}
	word result = ADCL;
	result      += (ADCH<<8);
	switch(next_channel)				// Round Robin style measurements
	{
	case 0:	PotSample[1] = result;
    1b9e:	d0 93 72 01 	sts	0x0172, r29
    1ba2:	c0 93 71 01 	sts	0x0171, r28
			next_channel = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	80 93 6e 01 	sts	0x016E, r24
			ADMUX = CURRSENSE_LEFT_MUX;		// Select Left Current Read
    1bac:	88 e4       	ldi	r24, 0x48	; 72
    1bae:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
    1bb2:	80 91 7a 00 	lds	r24, 0x007A
    1bb6:	80 64       	ori	r24, 0x40	; 64
    1bb8:	80 93 7a 00 	sts	0x007A, r24
			break;
    1bbc:	a8 cf       	rjmp	.-176    	; 0x1b0e <__vector_27+0x74>
			
	case 1:	LeftCurrentSample = result;
    1bbe:	d0 93 76 01 	sts	0x0176, r29
    1bc2:	c0 93 75 01 	sts	0x0175, r28
			LeftCurrentSampleAvg = (gamma*LeftCurrentSampleAvg) + alpha*((float)LeftCurrentSample);
    1bc6:	2d ec       	ldi	r18, 0xCD	; 205
    1bc8:	3c ec       	ldi	r19, 0xCC	; 204
    1bca:	4c e4       	ldi	r20, 0x4C	; 76
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	60 91 7b 01 	lds	r22, 0x017B
    1bd2:	70 91 7c 01 	lds	r23, 0x017C
    1bd6:	80 91 7d 01 	lds	r24, 0x017D
    1bda:	90 91 7e 01 	lds	r25, 0x017E
    1bde:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    1be2:	6b 01       	movw	r12, r22
    1be4:	7c 01       	movw	r14, r24
    1be6:	be 01       	movw	r22, r28
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    1bf0:	2d ec       	ldi	r18, 0xCD	; 205
    1bf2:	3c ec       	ldi	r19, 0xCC	; 204
    1bf4:	4c e4       	ldi	r20, 0x4C	; 76
    1bf6:	5e e3       	ldi	r21, 0x3E	; 62
    1bf8:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    1bfc:	9b 01       	movw	r18, r22
    1bfe:	ac 01       	movw	r20, r24
    1c00:	c7 01       	movw	r24, r14
    1c02:	b6 01       	movw	r22, r12
    1c04:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__addsf3>
    1c08:	60 93 7b 01 	sts	0x017B, r22
    1c0c:	70 93 7c 01 	sts	0x017C, r23
    1c10:	80 93 7d 01 	sts	0x017D, r24
    1c14:	90 93 7e 01 	sts	0x017E, r25
			next_channel = 2;
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	80 93 6e 01 	sts	0x016E, r24
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
    1c1e:	89 e4       	ldi	r24, 0x49	; 73
    1c20:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
    1c24:	80 91 7a 00 	lds	r24, 0x007A
    1c28:	80 64       	ori	r24, 0x40	; 64
    1c2a:	80 93 7a 00 	sts	0x007A, r24
			break;
    1c2e:	6f cf       	rjmp	.-290    	; 0x1b0e <__vector_27+0x74>

00001c30 <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    1c30:	ea e7       	ldi	r30, 0x7A	; 122
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	88 7f       	andi	r24, 0xF8	; 248
    1c38:	80 83       	st	Z, r24
    1c3a:	08 95       	ret

00001c3c <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83; 
    1c3c:	8b e9       	ldi	r24, 0x9B	; 155
    1c3e:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    1c42:	ee e7       	ldi	r30, 0x7E	; 126
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	84 60       	ori	r24, 0x04	; 4
    1c4a:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    1c4c:	ef e7       	ldi	r30, 0x7F	; 127
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	83 60       	ori	r24, 0x03	; 3
    1c54:	80 83       	st	Z, r24

	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM) | (1<<AREFEN);
    1c56:	80 ea       	ldi	r24, 0xA0	; 160
    1c58:	80 93 7b 00 	sts	0x007B, r24

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    1c5c:	82 e4       	ldi	r24, 0x42	; 66
    1c5e:	80 93 7c 00 	sts	0x007C, r24
    1c62:	08 95       	ret

00001c64 <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    1c64:	82 e4       	ldi	r24, 0x42	; 66
    1c66:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    1c6a:	ea e7       	ldi	r30, 0x7A	; 122
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 64       	ori	r24, 0x40	; 64
    1c72:	80 83       	st	Z, r24
    1c74:	08 95       	ret

00001c76 <_Z36calc_load_current_from_sense_currentt>:
float Ioffset = 0.0;

float calc_load_current_from_sense_current( word mIsense )
{
	// ILoad = dK_ilis(Isense - Ioffset)
	return dK * (mIsense - Ioffset);	
    1c76:	bc 01       	movw	r22, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    1c80:	20 91 69 01 	lds	r18, 0x0169
    1c84:	30 91 6a 01 	lds	r19, 0x016A
    1c88:	40 91 6b 01 	lds	r20, 0x016B
    1c8c:	50 91 6c 01 	lds	r21, 0x016C
    1c90:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__subsf3>
    1c94:	20 91 07 01 	lds	r18, 0x0107
    1c98:	30 91 08 01 	lds	r19, 0x0108
    1c9c:	40 91 09 01 	lds	r20, 0x0109
    1ca0:	50 91 0a 01 	lds	r21, 0x010A
    1ca4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
}
    1ca8:	08 95       	ret

00001caa <_Z15convert_to_ampst>:
void convert_to_amps( word mAmps )
{
    1caa:	08 95       	ret

00001cac <_Z17read_current_leftv>:
	on to calculate load current.
***********************************************/
word read_current_left()
{	
	// SELECT AND START CONVERSION:
	ADMUX  = CURRSENSE_LEFT_MUX;
    1cac:	88 e4       	ldi	r24, 0x48	; 72
    1cae:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    1cb2:	80 91 7a 00 	lds	r24, 0x007A
    1cb6:	80 64       	ori	r24, 0x40	; 64
    1cb8:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1cbc:	80 91 7a 00 	lds	r24, 0x007A
    1cc0:	86 fd       	sbrc	r24, 6
    1cc2:	fc cf       	rjmp	.-8      	; 0x1cbc <_Z17read_current_leftv+0x10>
	
	// PICK UP RESULT:
	word result = ADCL;
    1cc4:	20 91 78 00 	lds	r18, 0x0078
	result += (ADCH<<8);
    1cc8:	80 91 79 00 	lds	r24, 0x0079
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	98 2f       	mov	r25, r24
    1cd0:	88 27       	eor	r24, r24
    1cd2:	82 0f       	add	r24, r18
    1cd4:	91 1d       	adc	r25, r1
	LeftCurrentSample = result;
    1cd6:	90 93 76 01 	sts	0x0176, r25
    1cda:	80 93 75 01 	sts	0x0175, r24
	return result;
}
    1cde:	08 95       	ret

00001ce0 <_Z18read_current_rightv>:
Return	:	The motor position in degrees * 10
***********************************************/
word read_current_right()
{
	// SELECT AND START CONVERSION:
	ADMUX = CURRSENSE_RIGHT_MUX;
    1ce0:	89 e4       	ldi	r24, 0x49	; 73
    1ce2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    1ce6:	80 91 7a 00 	lds	r24, 0x007A
    1cea:	80 64       	ori	r24, 0x40	; 64
    1cec:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1cf0:	80 91 7a 00 	lds	r24, 0x007A
    1cf4:	86 fd       	sbrc	r24, 6
    1cf6:	fc cf       	rjmp	.-8      	; 0x1cf0 <_Z18read_current_rightv+0x10>
	
	// PICK UP RESULT:
	word result = ADCL;
    1cf8:	20 91 78 00 	lds	r18, 0x0078
	result      += (ADCH<<8);
    1cfc:	80 91 79 00 	lds	r24, 0x0079
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	98 2f       	mov	r25, r24
    1d04:	88 27       	eor	r24, r24
    1d06:	82 0f       	add	r24, r18
    1d08:	91 1d       	adc	r25, r1
	RightCurrentSample = result;		
    1d0a:	90 93 74 01 	sts	0x0174, r25
    1d0e:	80 93 73 01 	sts	0x0173, r24
	return result;
}
    1d12:	08 95       	ret

00001d14 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
    1d14:	90 93 82 01 	sts	0x0182, r25
    1d18:	80 93 81 01 	sts	0x0181, r24
    1d1c:	08 95       	ret

00001d1e <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
    1d1e:	90 93 80 01 	sts	0x0180, r25
    1d22:	80 93 7f 01 	sts	0x017F, r24
    1d26:	08 95       	ret

00001d28 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
    1d2c:	ed ee       	ldi	r30, 0xED	; 237
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	30 81       	ld	r19, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1d32:	82 95       	swap	r24
    1d34:	80 7f       	andi	r24, 0xF0	; 240
    1d36:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
    1d38:	c1 ef       	ldi	r28, 0xF1	; 241
    1d3a:	d0 e0       	ldi	r29, 0x00	; 0
    1d3c:	28 81       	ld	r18, Y
    1d3e:	cb 01       	movw	r24, r22
    1d40:	80 7e       	andi	r24, 0xE0	; 224
    1d42:	99 27       	eor	r25, r25
    1d44:	96 95       	lsr	r25
    1d46:	87 95       	ror	r24
    1d48:	92 95       	swap	r25
    1d4a:	82 95       	swap	r24
    1d4c:	8f 70       	andi	r24, 0x0F	; 15
    1d4e:	89 27       	eor	r24, r25
    1d50:	9f 70       	andi	r25, 0x0F	; 15
    1d52:	89 27       	eor	r24, r25
    1d54:	28 7f       	andi	r18, 0xF8	; 248
    1d56:	28 2b       	or	r18, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
    1d58:	a0 ef       	ldi	r26, 0xF0	; 240
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	8c 91       	ld	r24, X
    1d5e:	66 0f       	add	r22, r22
    1d60:	66 0f       	add	r22, r22
    1d62:	66 0f       	add	r22, r22
    1d64:	87 70       	andi	r24, 0x07	; 7
    1d66:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
    1d68:	28 83       	st	Y, r18
	CANIDT4 = idt4;	
    1d6a:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
    1d6c:	a5 ef       	ldi	r26, 0xF5	; 245
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	8c 91       	ld	r24, X
    1d72:	87 60       	ori	r24, 0x07	; 7
    1d74:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
    1d76:	a4 ef       	ldi	r26, 0xF4	; 244
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	8c 91       	ld	r24, X
    1d7c:	88 6f       	ori	r24, 0xF8	; 248
    1d7e:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1d80:	30 83       	st	Z, r19
}
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1d88:	ed ee       	ldi	r30, 0xED	; 237
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1d8e:	82 95       	swap	r24
    1d90:	80 7f       	andi	r24, 0xF0	; 240
    1d92:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
    1d94:	a5 ef       	ldi	r26, 0xF5	; 245
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	8c 91       	ld	r24, X
    1d9a:	88 7f       	andi	r24, 0xF8	; 248
    1d9c:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
    1d9e:	a4 ef       	ldi	r26, 0xF4	; 244
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	8c 91       	ld	r24, X
    1da4:	87 70       	andi	r24, 0x07	; 7
    1da6:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1da8:	90 83       	st	Z, r25
    1daa:	08 95       	ret

00001dac <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
    1dac:	25 2f       	mov	r18, r21
    1dae:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1db0:	ed ee       	ldi	r30, 0xED	; 237
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1db6:	82 95       	swap	r24
    1db8:	80 7f       	andi	r24, 0xF0	; 240
    1dba:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
    1dbc:	86 2f       	mov	r24, r22
    1dbe:	82 95       	swap	r24
    1dc0:	86 95       	lsr	r24
    1dc2:	87 70       	andi	r24, 0x07	; 7
    1dc4:	44 0f       	add	r20, r20
    1dc6:	44 0f       	add	r20, r20
    1dc8:	44 0f       	add	r20, r20
    1dca:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    1dcc:	c9 01       	movw	r24, r18
    1dce:	80 7e       	andi	r24, 0xE0	; 224
    1dd0:	9f 71       	andi	r25, 0x1F	; 31
    1dd2:	96 95       	lsr	r25
    1dd4:	87 95       	ror	r24
    1dd6:	92 95       	swap	r25
    1dd8:	82 95       	swap	r24
    1dda:	8f 70       	andi	r24, 0x0F	; 15
    1ddc:	89 27       	eor	r24, r25
    1dde:	9f 70       	andi	r25, 0x0F	; 15
    1de0:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
    1de2:	22 0f       	add	r18, r18
    1de4:	22 0f       	add	r18, r18
    1de6:	22 0f       	add	r18, r18
    1de8:	97 2f       	mov	r25, r23
    1dea:	92 95       	swap	r25
    1dec:	96 95       	lsr	r25
    1dee:	97 70       	andi	r25, 0x07	; 7
    1df0:	29 2b       	or	r18, r25
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
    1df2:	77 0f       	add	r23, r23
    1df4:	77 0f       	add	r23, r23
    1df6:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
    1df8:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
    1dfc:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    1e00:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
    1e04:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
    1e08:	50 83       	st	Z, r21
    1e0a:	08 95       	ret

00001e0c <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	f8 2e       	mov	r15, r24
    1e18:	8b 01       	movw	r16, r22
	tID id   = create_CAN_eid( mID_tag,  0 );
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	ca 01       	movw	r24, r20
    1e1e:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    1e22:	c7 2f       	mov	r28, r23
    1e24:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	c8 01       	movw	r24, r16
    1e2a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    1e2e:	27 2f       	mov	r18, r23
    1e30:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1e32:	ed ee       	ldi	r30, 0xED	; 237
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	70 81       	ld	r23, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1e38:	f2 94       	swap	r15
    1e3a:	a0 ef       	ldi	r26, 0xF0	; 240
    1e3c:	fa 22       	and	r15, r26
    1e3e:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
    1e40:	43 ef       	ldi	r20, 0xF3	; 243
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	da 01       	movw	r26, r20
    1e46:	6c 91       	ld	r22, X
    1e48:	8d 2f       	mov	r24, r29
    1e4a:	82 95       	swap	r24
    1e4c:	86 95       	lsr	r24
    1e4e:	87 70       	andi	r24, 0x07	; 7
    1e50:	68 7f       	andi	r22, 0xF8	; 248
    1e52:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
    1e54:	ce 01       	movw	r24, r28
    1e56:	80 7e       	andi	r24, 0xE0	; 224
    1e58:	9f 71       	andi	r25, 0x1F	; 31
    1e5a:	96 95       	lsr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	92 95       	swap	r25
    1e60:	82 95       	swap	r24
    1e62:	8f 70       	andi	r24, 0x0F	; 15
    1e64:	89 27       	eor	r24, r25
    1e66:	9f 70       	andi	r25, 0x0F	; 15
    1e68:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
    1e6a:	a1 ef       	ldi	r26, 0xF1	; 241
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	9c 91       	ld	r25, X
    1e70:	1c 2f       	mov	r17, r28
    1e72:	11 0f       	add	r17, r17
    1e74:	11 0f       	add	r17, r17
    1e76:	11 0f       	add	r17, r17
    1e78:	97 70       	andi	r25, 0x07	; 7
    1e7a:	19 2b       	or	r17, r25
	CANIDT1 = idt1;
    1e7c:	ea 01       	movw	r28, r20
    1e7e:	68 83       	st	Y, r22
	CANIDT2 = idt2;
    1e80:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
    1e84:	1c 93       	st	X, r17

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
    1e86:	c7 ef       	ldi	r28, 0xF7	; 247
    1e88:	d0 e0       	ldi	r29, 0x00	; 0
    1e8a:	48 81       	ld	r20, Y
    1e8c:	83 2f       	mov	r24, r19
    1e8e:	82 95       	swap	r24
    1e90:	86 95       	lsr	r24
    1e92:	87 70       	andi	r24, 0x07	; 7
    1e94:	48 7f       	andi	r20, 0xF8	; 248
    1e96:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
    1e98:	c9 01       	movw	r24, r18
    1e9a:	80 7e       	andi	r24, 0xE0	; 224
    1e9c:	9f 71       	andi	r25, 0x1F	; 31
    1e9e:	96 95       	lsr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	92 95       	swap	r25
    1ea4:	82 95       	swap	r24
    1ea6:	8f 70       	andi	r24, 0x0F	; 15
    1ea8:	89 27       	eor	r24, r25
    1eaa:	9f 70       	andi	r25, 0x0F	; 15
    1eac:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
    1eae:	a5 ef       	ldi	r26, 0xF5	; 245
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	9c 91       	ld	r25, X
    1eb4:	22 0f       	add	r18, r18
    1eb6:	22 0f       	add	r18, r18
    1eb8:	22 0f       	add	r18, r18
    1eba:	97 70       	andi	r25, 0x07	; 7
    1ebc:	29 2b       	or	r18, r25
	CANIDM1 = idm1;
    1ebe:	48 83       	st	Y, r20
	CANIDM2 = idm2;
    1ec0:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
    1ec4:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
    1ec6:	70 83       	st	Z, r23
}
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	08 95       	ret

00001ed4 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
    1ed4:	ed ee       	ldi	r30, 0xED	; 237
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1eda:	82 95       	swap	r24
    1edc:	80 7f       	andi	r24, 0xF0	; 240
    1ede:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
    1ee0:	a7 ef       	ldi	r26, 0xF7	; 247
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	8c 91       	ld	r24, X
    1ee6:	88 7f       	andi	r24, 0xF8	; 248
    1ee8:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
    1eea:	a6 ef       	ldi	r26, 0xF6	; 246
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	8c 91       	ld	r24, X
    1ef0:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
    1ef2:	a5 ef       	ldi	r26, 0xF5	; 245
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	8c 91       	ld	r24, X
    1ef8:	87 70       	andi	r24, 0x07	; 7
    1efa:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
    1efc:	90 83       	st	Z, r25
    1efe:	08 95       	ret

00001f00 <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1f00:	ed ee       	ldi	r30, 0xED	; 237
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1f06:	82 95       	swap	r24
    1f08:	80 7f       	andi	r24, 0xF0	; 240
    1f0a:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1f0c:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    1f10:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    1f14:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    1f18:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    1f1c:	90 83       	st	Z, r25
    1f1e:	08 95       	ret

00001f20 <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1f20:	ed ee       	ldi	r30, 0xED	; 237
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1f26:	82 95       	swap	r24
    1f28:	80 7f       	andi	r24, 0xF0	; 240
    1f2a:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
    1f2c:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
    1f30:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
    1f34:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
    1f38:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
    1f3c:	90 83       	st	Z, r25
    1f3e:	08 95       	ret

00001f40 <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
    1f46:	ed ee       	ldi	r30, 0xED	; 237
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
    1f4c:	38 2f       	mov	r19, r24
    1f4e:	32 95       	swap	r19
    1f50:	30 7f       	andi	r19, 0xF0	; 240
    1f52:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
    1f54:	ce ed       	ldi	r28, 0xDE	; 222
    1f56:	d0 e0       	ldi	r29, 0x00	; 0
    1f58:	98 81       	ld	r25, Y
    1f5a:	a1 e0       	ldi	r26, 0x01	; 1
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <_Z21can_setup_receive_mobhssh+0x22>
    1f60:	aa 0f       	add	r26, r26
    1f62:	8a 95       	dec	r24
    1f64:	ea f7       	brpl	.-6      	; 0x1f60 <_Z21can_setup_receive_mobhssh+0x20>
    1f66:	9a 2b       	or	r25, r26
    1f68:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
    1f6a:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
    1f6c:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
    1f6e:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
    1f72:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
    1f76:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
    1f7a:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
    1f7e:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
    1f80:	20 69       	ori	r18, 0x90	; 144
    1f82:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
    1f86:	a8 ed       	ldi	r26, 0xD8	; 216
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	8c 91       	ld	r24, X
    1f8c:	82 60       	ori	r24, 0x02	; 2
    1f8e:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
    1f90:	10 83       	st	Z, r17
}
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	08 95       	ret

00001f9a <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
    1fa6:	28 e0       	ldi	r18, 0x08	; 8
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
    1fb6:	60 91 c3 01 	lds	r22, 0x01C3
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
    1fc2:	28 e0       	ldi	r18, 0x08	; 8
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    1fd2:	cd ee       	ldi	r28, 0xED	; 237
    1fd4:	d0 e0       	ldi	r29, 0x00	; 0
    1fd6:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    1fd8:	80 e3       	ldi	r24, 0x30	; 48
    1fda:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    1fdc:	05 ef       	ldi	r16, 0xF5	; 245
    1fde:	e0 2e       	mov	r14, r16
    1fe0:	f1 2c       	mov	r15, r1
    1fe2:	f7 01       	movw	r30, r14
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 7f       	andi	r24, 0xF8	; 248
    1fe8:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    1fea:	04 ef       	ldi	r16, 0xF4	; 244
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	f8 01       	movw	r30, r16
    1ff0:	80 81       	ld	r24, Z
    1ff2:	87 70       	andi	r24, 0x07	; 7
    1ff4:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    1ff6:	98 83       	st	Y, r25
   

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1ff8:	43 e2       	ldi	r20, 0x23	; 35
    1ffa:	5c ef       	ldi	r21, 0xFC	; 252
    1ffc:	63 e2       	ldi	r22, 0x23	; 35
    1ffe:	7c ef       	ldi	r23, 0xFC	; 252
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
    2006:	28 e0       	ldi	r18, 0x08	; 8
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	85 e0       	ldi	r24, 0x05	; 5
    2012:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
    2016:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
    2018:	80 e5       	ldi	r24, 0x50	; 80
    201a:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
    201c:	f7 01       	movw	r30, r14
    201e:	80 81       	ld	r24, Z
    2020:	88 7f       	andi	r24, 0xF8	; 248
    2022:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
    2024:	f8 01       	movw	r30, r16
    2026:	80 81       	ld	r24, Z
    2028:	87 70       	andi	r24, 0x07	; 7
    202a:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
    202c:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	5c ef       	ldi	r21, 0xFC	; 252
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	7c ef       	ldi	r23, 0xFC	; 252
    2036:	85 e0       	ldi	r24, 0x05	; 5
}
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
    2044:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <_Z20can_add_id_to_filterhtt>

00002048 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
    2048:	ed ee       	ldi	r30, 0xED	; 237
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
    204e:	82 95       	swap	r24
    2050:	80 7f       	andi	r24, 0xF0	; 240
    2052:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
    2054:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    2058:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
    205c:	90 83       	st	Z, r25
    205e:	08 95       	ret

00002060 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
    2060:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
    2062:	80 91 f3 00 	lds	r24, 0x00F3
    2066:	90 e0       	ldi	r25, 0x00	; 0
	word idt2 = CANIDT2;
    2068:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
    206c:	70 91 f1 00 	lds	r23, 0x00F1
	word idt4 = CANIDT4;
    2070:	60 91 f0 00 	lds	r22, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
    2074:	ac 01       	movw	r20, r24
    2076:	56 95       	lsr	r21
    2078:	47 95       	ror	r20
    207a:	56 95       	lsr	r21
    207c:	47 95       	ror	r20
    207e:	56 95       	lsr	r21
    2080:	47 95       	ror	r20
    2082:	40 83       	st	Z, r20

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	24 9f       	mul	r18, r20
    2088:	90 01       	movw	r18, r0
    208a:	11 24       	eor	r1, r1
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
    208c:	98 2f       	mov	r25, r24
    208e:	88 27       	eor	r24, r24
    2090:	92 95       	swap	r25
    2092:	99 0f       	add	r25, r25
    2094:	90 7e       	andi	r25, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    2096:	28 2b       	or	r18, r24
    2098:	39 2b       	or	r19, r25
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
    209a:	87 2f       	mov	r24, r23
    209c:	88 7f       	andi	r24, 0xF8	; 248
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	96 95       	lsr	r25
    20a2:	87 95       	ror	r24
    20a4:	96 95       	lsr	r25
    20a6:	87 95       	ror	r24
    20a8:	96 95       	lsr	r25
    20aa:	87 95       	ror	r24
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
    20ac:	28 2b       	or	r18, r24
    20ae:	39 2b       	or	r19, r25
    20b0:	32 83       	std	Z+2, r19	; 0x02
    20b2:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
    20b4:	72 95       	swap	r23
    20b6:	77 0f       	add	r23, r23
    20b8:	70 7e       	andi	r23, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
    20ba:	66 95       	lsr	r22
    20bc:	66 95       	lsr	r22
    20be:	66 95       	lsr	r22
    20c0:	67 2b       	or	r22, r23
    20c2:	63 83       	std	Z+3, r22	; 0x03
    20c4:	08 95       	ret

000020c6 <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
    20cc:	0e 94 30 10 	call	0x2060	; 0x2060 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
    20d0:	80 91 ef 00 	lds	r24, 0x00EF
    20d4:	8f 70       	andi	r24, 0x0F	; 15
    20d6:	28 2f       	mov	r18, r24
    20d8:	22 0f       	add	r18, r18
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	91 7e       	andi	r25, 0xE1	; 225
    20de:	92 2b       	or	r25, r18
    20e0:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
    20e2:	48 2f       	mov	r20, r24
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	41 15       	cp	r20, r1
    20e8:	51 05       	cpc	r21, r1
    20ea:	61 f0       	breq	.+24     	; 0x2104 <_Z17can_retrieve_dataP4sCAN+0x3e>
    20ec:	fe 01       	movw	r30, r28
    20ee:	35 96       	adiw	r30, 0x05	; 5
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
    20f4:	90 91 fa 00 	lds	r25, 0x00FA
    20f8:	91 93       	st	Z+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    20fa:	2f 5f       	subi	r18, 0xFF	; 255
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	24 17       	cp	r18, r20
    2100:	35 07       	cpc	r19, r21
    2102:	c4 f3       	brlt	.-16     	; 0x20f4 <_Z17can_retrieve_dataP4sCAN+0x2e>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
    210a:	1f 92       	push	r1
    210c:	0f 92       	push	r0
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	0f 92       	push	r0
    2112:	11 24       	eor	r1, r1
    2114:	2f 93       	push	r18
    2116:	3f 93       	push	r19
    2118:	4f 93       	push	r20
    211a:	5f 93       	push	r21
    211c:	6f 93       	push	r22
    211e:	7f 93       	push	r23
    2120:	8f 93       	push	r24
    2122:	9f 93       	push	r25
    2124:	af 93       	push	r26
    2126:	bf 93       	push	r27
    2128:	cf 93       	push	r28
    212a:	ef 93       	push	r30
    212c:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
    212e:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
    2132:	80 91 ec 00 	lds	r24, 0x00EC
    2136:	82 95       	swap	r24
    2138:	8f 70       	andi	r24, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    213a:	8f 30       	cpi	r24, 0x0F	; 15
    213c:	09 f4       	brne	.+2      	; 0x2140 <__vector_18+0x36>
    213e:	7d c0       	rjmp	.+250    	; 0x223a <__vector_18+0x130>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
    2140:	90 91 ec 00 	lds	r25, 0x00EC
    2144:	90 7f       	andi	r25, 0xF0	; 240
    2146:	90 93 ed 00 	sts	0x00ED, r25

   if ( ANY_ERROR_FLAG ) {  
    214a:	90 91 ee 00 	lds	r25, 0x00EE
    214e:	9f 71       	andi	r25, 0x1F	; 31
    2150:	d1 f1       	breq	.+116    	; 0x21c6 <__vector_18+0xbc>
		 byte st = CANSTMOB;
    2152:	90 91 ee 00 	lds	r25, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
    2156:	92 ff       	sbrs	r25, 2
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <__vector_18+0x5a>
    215a:	20 91 ee 00 	lds	r18, 0x00EE
    215e:	2f 7e       	andi	r18, 0xEF	; 239
    2160:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
    2164:	29 2f       	mov	r18, r25
    2166:	23 70       	andi	r18, 0x03	; 3
    2168:	29 f0       	breq	.+10     	; 0x2174 <__vector_18+0x6a>
    216a:	20 91 ee 00 	lds	r18, 0x00EE
    216e:	27 7f       	andi	r18, 0xF7	; 247
    2170:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
    2174:	91 ff       	sbrs	r25, 1
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <__vector_18+0x78>
    2178:	20 91 ee 00 	lds	r18, 0x00EE
    217c:	2b 7f       	andi	r18, 0xFB	; 251
    217e:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
    2182:	90 ff       	sbrs	r25, 0
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <__vector_18+0x86>
    2186:	90 91 ee 00 	lds	r25, 0x00EE
    218a:	9d 7f       	andi	r25, 0xFD	; 253
    218c:	90 93 ee 00 	sts	0x00EE, r25
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
    2190:	85 30       	cpi	r24, 0x05	; 5
    2192:	09 f4       	brne	.+2      	; 0x2196 <__vector_18+0x8c>
    2194:	49 c0       	rjmp	.+146    	; 0x2228 <__vector_18+0x11e>
    2196:	8d 7f       	andi	r24, 0xFD	; 253
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	09 f4       	brne	.+2      	; 0x219e <__vector_18+0x94>
    219c:	45 c0       	rjmp	.+138    	; 0x2228 <__vector_18+0x11e>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
    219e:	c0 93 ed 00 	sts	0x00ED, r28
}
    21a2:	ff 91       	pop	r31
    21a4:	ef 91       	pop	r30
    21a6:	cf 91       	pop	r28
    21a8:	bf 91       	pop	r27
    21aa:	af 91       	pop	r26
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	7f 91       	pop	r23
    21b2:	6f 91       	pop	r22
    21b4:	5f 91       	pop	r21
    21b6:	4f 91       	pop	r20
    21b8:	3f 91       	pop	r19
    21ba:	2f 91       	pop	r18
    21bc:	0f 90       	pop	r0
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	0f 90       	pop	r0
    21c2:	1f 90       	pop	r1
    21c4:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
    21c6:	80 91 ee 00 	lds	r24, 0x00EE
    21ca:	85 fd       	sbrc	r24, 5
    21cc:	13 c0       	rjmp	.+38     	; 0x21f4 <__vector_18+0xea>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
    21ce:	80 91 ee 00 	lds	r24, 0x00EE
    21d2:	86 ff       	sbrs	r24, 6
    21d4:	e4 cf       	rjmp	.-56     	; 0x219e <__vector_18+0x94>
   {  
       	if (tx_call_back != NULL)
    21d6:	e0 91 7f 01 	lds	r30, 0x017F
    21da:	f0 91 80 01 	lds	r31, 0x0180
    21de:	30 97       	sbiw	r30, 0x00	; 0
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <__vector_18+0xda>
       		tx_call_back( );			// possibly send next message.
    21e2:	09 95       	icall

		TransmittedSuccesfully = TRUE;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	80 93 8b 01 	sts	0x018B, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
    21ea:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
    21ee:	10 92 ee 00 	sts	0x00EE, r1
    21f2:	d5 cf       	rjmp	.-86     	; 0x219e <__vector_18+0x94>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	80 93 8c 01 	sts	0x018C, r24
       	can_retrieve_data( &LastReceivedMsg );
    21fa:	8d e8       	ldi	r24, 0x8D	; 141
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
    2202:	8d e8       	ldi	r24, 0x8D	; 141
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
    220a:	81 11       	cpse	r24, r1
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <__vector_18+0x11e>
	       	QueueMessage( &LastReceivedMsg );
    220e:	8d e8       	ldi	r24, 0x8D	; 141
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
    2216:	e0 91 81 01 	lds	r30, 0x0181
    221a:	f0 91 82 01 	lds	r31, 0x0182
    221e:	30 97       	sbiw	r30, 0x00	; 0
    2220:	19 f0       	breq	.+6      	; 0x2228 <__vector_18+0x11e>
    	   		rx_call_back( &LastReceivedMsg );
    2222:	8d e8       	ldi	r24, 0x8D	; 141
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	09 95       	icall
		}

		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
    2228:	88 e9       	ldi	r24, 0x98	; 152
    222a:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
    222e:	80 91 ee 00 	lds	r24, 0x00EE
    2232:	8f 7d       	andi	r24, 0xDF	; 223
    2234:	80 93 ee 00 	sts	0x00EE, r24
    2238:	b2 cf       	rjmp	.-156    	; 0x219e <__vector_18+0x94>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
    223a:	80 91 da 00 	lds	r24, 0x00DA
    223e:	80 93 da 00 	sts	0x00DA, r24
    2242:	af cf       	rjmp	.-162    	; 0x21a2 <__vector_18+0x98>

00002244 <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
    224a:	90 e1       	ldi	r25, 0x10	; 16
    224c:	89 9f       	mul	r24, r25
    224e:	90 01       	movw	r18, r0
    2250:	11 24       	eor	r1, r1
   cli();
    2252:	f8 94       	cli
   CANPAGE = page;
    2254:	20 93 ed 00 	sts	0x00ED, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
    2258:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
    225c:	48 81       	ld	r20, Y
    225e:	59 81       	ldd	r21, Y+1	; 0x01
    2260:	6a 81       	ldd	r22, Y+2	; 0x02
    2262:	7b 81       	ldd	r23, Y+3	; 0x03
    2264:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	86 95       	lsr	r24
    226c:	8f 70       	andi	r24, 0x0F	; 15
    226e:	79 f0       	breq	.+30     	; 0x228e <_Z20can_send_msg_no_waithP4sCAN+0x4a>
    2270:	fe 01       	movw	r30, r28
    2272:	35 96       	adiw	r30, 0x05	; 5
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
    2278:	21 91       	ld	r18, Z+
    227a:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	2c 81       	ldd	r18, Y+4	; 0x04
    2282:	26 95       	lsr	r18
    2284:	2f 70       	andi	r18, 0x0F	; 15
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	82 17       	cp	r24, r18
    228a:	93 07       	cpc	r25, r19
    228c:	ac f3       	brlt	.-22     	; 0x2278 <_Z20can_send_msg_no_waithP4sCAN+0x34>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
    228e:	80 91 f0 00 	lds	r24, 0x00F0
    2292:	8b 7f       	andi	r24, 0xFB	; 251
    2294:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	86 95       	lsr	r24
    229c:	8f 70       	andi	r24, 0x0F	; 15
    229e:	80 65       	ori	r24, 0x50	; 80
    22a0:	80 93 ef 00 	sts	0x00EF, r24
   sei();
    22a4:	78 94       	sei
}
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
    22ac:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
    22b0:	80 91 ee 00 	lds	r24, 0x00EE
    22b4:	86 ff       	sbrs	r24, 6
    22b6:	fc cf       	rjmp	.-8      	; 0x22b0 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
    22b8:	08 95       	ret

000022ba <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    22ba:	80 91 f8 00 	lds	r24, 0x00F8
  retval |= (CANSTMH<<8);
    22be:	20 91 f9 00 	lds	r18, 0x00F9
    22c2:	90 e0       	ldi	r25, 0x00	; 0
  return retval;
}
    22c4:	92 2b       	or	r25, r18
    22c6:	08 95       	ret

000022c8 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	ec 01       	movw	r28, r24
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
	// Retrieve CAN id
	can_retrieve_id( mMsg );
    22ce:	0e 94 30 10 	call	0x2060	; 0x2060 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
    22d2:	90 91 ef 00 	lds	r25, 0x00EF
    22d6:	9f 70       	andi	r25, 0x0F	; 15
    22d8:	29 2f       	mov	r18, r25
    22da:	22 0f       	add	r18, r18
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	81 7e       	andi	r24, 0xE1	; 225
    22e0:	82 2b       	or	r24, r18
    22e2:	8c 83       	std	Y+4, r24	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
    22e4:	49 2f       	mov	r20, r25
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	41 15       	cp	r20, r1
    22ea:	51 05       	cpc	r21, r1
    22ec:	69 f0       	breq	.+26     	; 0x2308 <_Z11can_get_msgP4sCAN+0x40>
    22ee:	fe 01       	movw	r30, r28
    22f0:	35 96       	adiw	r30, 0x05	; 5
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
    22f6:	80 91 fa 00 	lds	r24, 0x00FA
    22fa:	81 93       	st	Z+, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
    22fc:	2f 5f       	subi	r18, 0xFF	; 255
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	24 17       	cp	r18, r20
    2302:	35 07       	cpc	r19, r21
    2304:	c4 f3       	brlt	.-16     	; 0x22f6 <_Z11can_get_msgP4sCAN+0x2e>
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
    2308:	99 0f       	add	r25, r25
    230a:	81 7e       	andi	r24, 0xE1	; 225
    230c:	89 2b       	or	r24, r25
    230e:	8c 83       	std	Y+4, r24	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
    2310:	80 91 f8 00 	lds	r24, 0x00F8
  retval |= (CANSTMH<<8);
    2314:	20 91 f9 00 	lds	r18, 0x00F9
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	92 2b       	or	r25, r18
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
    231c:	9e 87       	std	Y+14, r25	; 0x0e
    231e:	8d 87       	std	Y+13, r24	; 0x0d
}
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	08 95       	ret

00002326 <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	61 f0       	breq	.+24     	; 0x2342 <_Z8set_baudh+0x1c>
    232a:	38 f0       	brcs	.+14     	; 0x233a <_Z8set_baudh+0x14>
    232c:	85 30       	cpi	r24, 0x05	; 5
    232e:	a9 f0       	breq	.+42     	; 0x235a <_Z8set_baudh+0x34>
    2330:	c0 f0       	brcs	.+48     	; 0x2362 <_Z8set_baudh+0x3c>
    2332:	86 30       	cpi	r24, 0x06	; 6
    2334:	31 f4       	brne	.+12     	; 0x2342 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    2336:	86 e2       	ldi	r24, 0x26	; 38
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	81 f0       	breq	.+32     	; 0x235e <_Z8set_baudh+0x38>
    233e:	82 30       	cpi	r24, 0x02	; 2
    2340:	51 f0       	breq	.+20     	; 0x2356 <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    2342:	8e e0       	ldi	r24, 0x0E	; 14
    2344:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    2348:	84 e0       	ldi	r24, 0x04	; 4
    234a:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    234e:	83 e1       	ldi	r24, 0x13	; 19
    2350:	80 93 e4 00 	sts	0x00E4, r24
    2354:	08 95       	ret
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    2356:	86 e0       	ldi	r24, 0x06	; 6
    2358:	f5 cf       	rjmp	.-22     	; 0x2344 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    235a:	8e e1       	ldi	r24, 0x1E	; 30
    235c:	f3 cf       	rjmp	.-26     	; 0x2344 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	f1 cf       	rjmp	.-30     	; 0x2344 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    2362:	82 e1       	ldi	r24, 0x12	; 18
    2364:	ef cf       	rjmp	.-34     	; 0x2344 <_Z8set_baudh+0x1e>

00002366 <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
    236c:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    2370:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
    2372:	29 2f       	mov	r18, r25
    2374:	22 95       	swap	r18
    2376:	20 7f       	andi	r18, 0xF0	; 240
    2378:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
    237c:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
    2380:	10 92 ee 00 	sts	0x00EE, r1
    2384:	9f 5f       	subi	r25, 0xFF	; 255
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
    2386:	96 30       	cpi	r25, 0x06	; 6
    2388:	a1 f7       	brne	.-24     	; 0x2372 <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
    238a:	90 ea       	ldi	r25, 0xA0	; 160
    238c:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
    2390:	0e 94 93 11 	call	0x2326	; 0x2326 <_Z8set_baudh>
   can_init_mobs();
    2394:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
    2398:	80 91 d9 00 	lds	r24, 0x00D9
    239c:	82 ff       	sbrs	r24, 2
    239e:	fc cf       	rjmp	.-8      	; 0x2398 <_Z8can_inith+0x32>
   }
   //sei();
}
    23a0:	08 95       	ret

000023a2 <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
    23a2:	81 11       	cpse	r24, r1
    23a4:	0a c0       	rjmp	.+20     	; 0x23ba <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
    23ac:	84 e0       	ldi	r24, 0x04	; 4
    23ae:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
    23b2:	83 e1       	ldi	r24, 0x13	; 19
    23b4:	80 93 e4 00 	sts	0x00E4, r24
    23b8:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
    23ba:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
    23be:	8c e0       	ldi	r24, 0x0C	; 12
    23c0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
    23c4:	86 e3       	ldi	r24, 0x36	; 54
    23c6:	80 93 e4 00 	sts	0x00E4, r24
    23ca:	08 95       	ret

000023cc <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    23cc:	81 11       	cpse	r24, r1
    23ce:	0a c0       	rjmp	.+20     	; 0x23e4 <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    23d0:	86 e0       	ldi	r24, 0x06	; 6
    23d2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    23d6:	84 e0       	ldi	r24, 0x04	; 4
    23d8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    23dc:	83 e1       	ldi	r24, 0x13	; 19
    23de:	80 93 e4 00 	sts	0x00E4, r24
    23e2:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    23ea:	8c e0       	ldi	r24, 0x0C	; 12
    23ec:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    23f0:	87 e3       	ldi	r24, 0x37	; 55
    23f2:	80 93 e4 00 	sts	0x00E4, r24
    23f6:	08 95       	ret

000023f8 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    23f8:	81 11       	cpse	r24, r1
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    23fc:	8e e0       	ldi	r24, 0x0E	; 14
    23fe:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    2402:	84 e0       	ldi	r24, 0x04	; 4
    2404:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    2408:	83 e1       	ldi	r24, 0x13	; 19
    240a:	80 93 e4 00 	sts	0x00E4, r24
    240e:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    2410:	86 e0       	ldi	r24, 0x06	; 6
    2412:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    2416:	8c e0       	ldi	r24, 0x0C	; 12
    2418:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    241c:	87 e3       	ldi	r24, 0x37	; 55
    241e:	80 93 e4 00 	sts	0x00E4, r24
    2422:	08 95       	ret

00002424 <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2424:	81 11       	cpse	r24, r1
    2426:	0a c0       	rjmp	.+20     	; 0x243c <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    2428:	82 e1       	ldi	r24, 0x12	; 18
    242a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    242e:	84 e0       	ldi	r24, 0x04	; 4
    2430:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    2434:	83 e1       	ldi	r24, 0x13	; 19
    2436:	80 93 e4 00 	sts	0x00E4, r24
    243a:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    243c:	88 e0       	ldi	r24, 0x08	; 8
    243e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    2442:	8c e0       	ldi	r24, 0x0C	; 12
    2444:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    2448:	87 e3       	ldi	r24, 0x37	; 55
    244a:	80 93 e4 00 	sts	0x00E4, r24
    244e:	08 95       	ret

00002450 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    2450:	81 11       	cpse	r24, r1
    2452:	0a c0       	rjmp	.+20     	; 0x2468 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    2454:	8e e1       	ldi	r24, 0x1E	; 30
    2456:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    245a:	84 e0       	ldi	r24, 0x04	; 4
    245c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    2460:	83 e1       	ldi	r24, 0x13	; 19
    2462:	80 93 e4 00 	sts	0x00E4, r24
    2466:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    2468:	8e e0       	ldi	r24, 0x0E	; 14
    246a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    246e:	8c e0       	ldi	r24, 0x0C	; 12
    2470:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    2474:	87 e3       	ldi	r24, 0x37	; 55
    2476:	80 93 e4 00 	sts	0x00E4, r24
    247a:	08 95       	ret

0000247c <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    247c:	81 11       	cpse	r24, r1
    247e:	0a c0       	rjmp	.+20     	; 0x2494 <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    2480:	86 e2       	ldi	r24, 0x26	; 38
    2482:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    2486:	84 e0       	ldi	r24, 0x04	; 4
    2488:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    248c:	83 e1       	ldi	r24, 0x13	; 19
    248e:	80 93 e4 00 	sts	0x00E4, r24
    2492:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    2494:	82 e1       	ldi	r24, 0x12	; 18
    2496:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    249a:	8c e0       	ldi	r24, 0x0C	; 12
    249c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    24a0:	87 e3       	ldi	r24, 0x37	; 55
    24a2:	80 93 e4 00 	sts	0x00E4, r24
    24a6:	08 95       	ret

000024a8 <_Z22random_number_adc_initv>:
 ********************************************************/
void random_number_adc_init()
{
	// Analog to Digital Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    24a8:	83 e9       	ldi	r24, 0x93	; 147
    24aa:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 : 
	DIDR0  |=  (1<<ADC3D);
    24ae:	ee e7       	ldi	r30, 0x7E	; 126
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	88 60       	ori	r24, 0x08	; 8
    24b6:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    24b8:	80 e8       	ldi	r24, 0x80	; 128
    24ba:	80 93 7b 00 	sts	0x007B, r24
    24be:	08 95       	ret

000024c0 <_Z18pick_random_numberv>:
}

word pick_random_number()
{
	DDRD &= ~(0x40);
    24c0:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	50 e0       	ldi	r21, 0x00	; 0
	DDRD &= ~(0x40);
	// Make ADC3-PORTD_6-LED4 an input temporarily.
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED off will give high impedance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;		
    24ca:	73 e4       	ldi	r23, 0x43	; 67
    24cc:	70 93 7c 00 	sts	0x007C, r23
		ADCSRA |= (1<<ADSC);					
    24d0:	60 91 7a 00 	lds	r22, 0x007A
    24d4:	60 64       	ori	r22, 0x40	; 64
    24d6:	60 93 7a 00 	sts	0x007A, r22
		while ( (ADCSRA & (1<<ADSC)) > 0) {};	// Wait for conversion to finish.
    24da:	60 91 7a 00 	lds	r22, 0x007A
    24de:	66 fd       	sbrc	r22, 6
    24e0:	fc cf       	rjmp	.-8      	; 0x24da <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)	
		tmp  = (ADCL & 0x01) << (i % 16);		
    24e2:	60 91 78 00 	lds	r22, 0x0078
    24e6:	26 2f       	mov	r18, r22
    24e8:	21 70       	andi	r18, 0x01	; 1
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	04 2e       	mov	r0, r20
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <_Z18pick_random_numberv+0x34>
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <_Z18pick_random_numberv+0x30>
		random_result |= (tmp);					
    24f8:	82 2b       	or	r24, r18
    24fa:	93 2b       	or	r25, r19
		tmp = ADCH;								
    24fc:	60 91 79 00 	lds	r22, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word random_result = 0;		
	word tmp    = 0;			

	// SELECT AND START CONVERSION : 
	for (int i=0; i<16; i++)			// Get a 16 bit random number.
    2500:	4f 5f       	subi	r20, 0xFF	; 255
    2502:	5f 4f       	sbci	r21, 0xFF	; 255
    2504:	40 31       	cpi	r20, 0x10	; 16
    2506:	51 05       	cpc	r21, r1
    2508:	09 f7       	brne	.-62     	; 0x24cc <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)	
		tmp  = (ADCL & 0x01) << (i % 16);		
		random_result |= (tmp);					
		tmp = ADCH;								
	}
	DDRD |= 0x40;					// Set ADC3-PORTD_6-LED4 back to being an output
    250a:	56 9a       	sbi	0x0a, 6	; 10
	return random_result;
}
    250c:	08 95       	ret

0000250e <_Z24setup_instance_claim_mobv>:
*/
void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    250e:	28 e0       	ldi	r18, 0x08	; 8
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    2524:	43 e2       	ldi	r20, 0x23	; 35
    2526:	5c ef       	ldi	r21, 0xFC	; 252
    2528:	63 e2       	ldi	r22, 0x23	; 35
    252a:	7c ef       	ldi	r23, 0xFC	; 252
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <_Z20can_add_id_to_filterhtt>

00002532 <_Z17can_instance_initv>:
 ********************************************************/
void random_number_adc_init()
{
	// Analog to Digital Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    2532:	83 e9       	ldi	r24, 0x93	; 147
    2534:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 : 
	DIDR0  |=  (1<<ADC3D);
    2538:	80 91 7e 00 	lds	r24, 0x007E
    253c:	88 60       	ori	r24, 0x08	; 8
    253e:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    2542:	80 e8       	ldi	r24, 0x80	; 128
    2544:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;		// Indicates the state of the Confirmed status at boot-up.

void can_instance_init()
{
	random_number_adc_init		 ( );
	word tmp = pick_random_number( );		// random time delay
    2548:	0e 94 60 12 	call	0x24c0	; 0x24c0 <_Z18pick_random_numberv>
	rand_instance = rand_delay = ( tmp & 0xFF);	
    254c:	99 27       	eor	r25, r25
    254e:	90 93 c0 01 	sts	0x01C0, r25
    2552:	80 93 bf 01 	sts	0x01BF, r24
    2556:	80 93 be 01 	sts	0x01BE, r24

	// put adc back into mode for Potentiometer
	adc_init();
    255a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    255e:	80 91 c2 01 	lds	r24, 0x01C2
    2562:	88 23       	and	r24, r24
    2564:	51 f0       	breq	.+20     	; 0x257a <_Z17can_instance_initv+0x48>
		setup_instance_claim_mob();
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		init_path  = 2;
		Confirmed = REPORT;
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	80 93 c2 01 	sts	0x01C2, r24
    256c:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinite loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= DIRTY;
    256e:	80 93 bb 01 	sts	0x01BB, r24
	init_complete = TRUE;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 c1 01 	sts	0x01C1, r24
    2578:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{
		// START AT 0; PICK a DELAY TIME : 
		init_path = 1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	80 93 bb 01 	sts	0x01BB, r24
		setup_instance_claim_mob();
    2580:	0e 94 87 12 	call	0x250e	; 0x250e <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    2584:	10 92 c3 01 	sts	0x01C3, r1
    2588:	80 91 bb 01 	lds	r24, 0x01BB
    258c:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinite loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= DIRTY;
    258e:	80 93 bb 01 	sts	0x01BB, r24
	init_complete = TRUE;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	80 93 c1 01 	sts	0x01C1, r24
    2598:	08 95       	ret

0000259a <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    25a0:	83 e2       	ldi	r24, 0x23	; 35
    25a2:	9c ef       	ldi	r25, 0xFC	; 252
    25a4:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    25a8:	68 83       	st	Y, r22
    25aa:	79 83       	std	Y+1, r23	; 0x01
    25ac:	8a 83       	std	Y+2, r24	; 0x02
    25ae:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    25b0:	80 91 c3 01 	lds	r24, 0x01C3
    25b4:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    25b6:	80 91 c2 01 	lds	r24, 0x01C2
    25ba:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    25bc:	80 91 be 01 	lds	r24, 0x01BE
    25c0:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    25c2:	80 91 bb 01 	lds	r24, 0x01BB
    25c6:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    25c8:	80 91 ba 01 	lds	r24, 0x01BA
    25cc:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    25ce:	80 91 37 02 	lds	r24, 0x0237
    25d2:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
    25d8:	8e 60       	ori	r24, 0x0E	; 14
    25da:	8e 7f       	andi	r24, 0xFE	; 254
    25dc:	8c 83       	std	Y+4, r24	; 0x04
}
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <_Z22can_instance_timeslicev>:
/* Called from OS_timers.c		
		"SystemDispatch()" every 10ms.		
*/
void can_instance_timeslice()
{
	ts_state = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	80 93 ba 01 	sts	0x01BA, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    25ea:	40 91 c2 01 	lds	r20, 0x01C2
    25ee:	41 30       	cpi	r20, 0x01	; 1
    25f0:	59 f1       	breq	.+86     	; 0x2648 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    25f2:	80 91 c1 01 	lds	r24, 0x01C1
    25f6:	88 23       	and	r24, r24
    25f8:	39 f1       	breq	.+78     	; 0x2648 <_Z22can_instance_timeslicev+0x64>
	ts_state   = 2;
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	80 93 ba 01 	sts	0x01BA, r24
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    2600:	80 91 bf 01 	lds	r24, 0x01BF
    2604:	90 91 c0 01 	lds	r25, 0x01C0
    2608:	9c 01       	movw	r18, r24
    260a:	21 50       	subi	r18, 0x01	; 1
    260c:	31 09       	sbc	r19, r1
    260e:	30 93 c0 01 	sts	0x01C0, r19
    2612:	20 93 bf 01 	sts	0x01BF, r18
    2616:	89 2b       	or	r24, r25
    2618:	b9 f4       	brne	.+46     	; 0x2648 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	90 93 c0 01 	sts	0x01C0, r25
    2622:	80 93 bf 01 	sts	0x01BF, r24

	if (Confirmed==NOT_CLAIMED)
    2626:	44 23       	and	r20, r20
    2628:	91 f0       	breq	.+36     	; 0x264e <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    262a:	42 30       	cpi	r20, 0x02	; 2
    262c:	09 f4       	brne	.+2      	; 0x2630 <_Z22can_instance_timeslicev+0x4c>
    262e:	5a c0       	rjmp	.+180    	; 0x26e4 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    2630:	40 32       	cpi	r20, 0x20	; 32
    2632:	39 f1       	breq	.+78     	; 0x2682 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// (Claimed, but not saved to EEPROM) Dirty bit set? 
    2634:	40 38       	cpi	r20, 0x80	; 128
    2636:	09 f4       	brne	.+2      	; 0x263a <_Z22can_instance_timeslicev+0x56>
    2638:	47 c0       	rjmp	.+142    	; 0x26c8 <_Z22can_instance_timeslicev+0xe4>

		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    263a:	40 34       	cpi	r20, 0x40	; 64
    263c:	31 f0       	breq	.+12     	; 0x264a <_Z22can_instance_timeslicev+0x66>
    263e:	80 91 ba 01 	lds	r24, 0x01BA
    2642:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	ts_state |= 0x80;
    2644:	80 93 ba 01 	sts	0x01BA, r24
    2648:	08 95       	ret
    264a:	86 e8       	ldi	r24, 0x86	; 134
    264c:	fb cf       	rjmp	.-10     	; 0x2644 <_Z22can_instance_timeslicev+0x60>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
	rand_delay = 1;							// so that it comes back in here next timeslice

	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	80 93 ba 01 	sts	0x01BA, r24
		Confirmed = CLAIM_PENDING;
    2654:	80 e2       	ldi	r24, 0x20	; 32
    2656:	80 93 c2 01 	sts	0x01C2, r24
		can_prep_instance_request( &msg2, rand_instance );
    265a:	60 91 be 01 	lds	r22, 0x01BE
    265e:	8c e9       	ldi	r24, 0x9C	; 156
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	0e 94 cd 12 	call	0x259a	; 0x259a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    2666:	6c e9       	ldi	r22, 0x9C	; 156
    2668:	71 e0       	ldi	r23, 0x01	; 1
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    2670:	8c e2       	ldi	r24, 0x2C	; 44
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	90 93 bd 01 	sts	0x01BD, r25
    2678:	80 93 bc 01 	sts	0x01BC, r24
    267c:	40 91 c2 01 	lds	r20, 0x01C2
    2680:	d4 cf       	rjmp	.-88     	; 0x262a <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    2682:	84 e0       	ldi	r24, 0x04	; 4
    2684:	80 93 ba 01 	sts	0x01BA, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT 
		cli();
    2688:	f8 94       	cli
		byte restore = CANPAGE;
    268a:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    268e:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    2692:	80 91 ee 00 	lds	r24, 0x00EE
    2696:	86 ff       	sbrs	r24, 6
    2698:	03 c0       	rjmp	.+6      	; 0x26a0 <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    269a:	80 e8       	ldi	r24, 0x80	; 128
    269c:	80 93 c2 01 	sts	0x01C2, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in with same ID, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    26a0:	80 91 bc 01 	lds	r24, 0x01BC
    26a4:	90 91 bd 01 	lds	r25, 0x01BD
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	90 93 bd 01 	sts	0x01BD, r25
    26ae:	80 93 bc 01 	sts	0x01BC, r24
		if (timeout_10ms_mult == 0)
    26b2:	89 2b       	or	r24, r25
    26b4:	19 f4       	brne	.+6      	; 0x26bc <_Z22can_instance_timeslicev+0xd8>
		{
			Confirmed = NOT_USING_INSTANCES;
    26b6:	84 e0       	ldi	r24, 0x04	; 4
    26b8:	80 93 c2 01 	sts	0x01C2, r24
		}
		CANPAGE = restore;
    26bc:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    26c0:	78 94       	sei
    26c2:	40 91 c2 01 	lds	r20, 0x01C2
    26c6:	b6 cf       	rjmp	.-148    	; 0x2634 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// (Claimed, but not saved to EEPROM) Dirty bit set? 
	{
		ts_state  = 5;
    26c8:	85 e0       	ldi	r24, 0x05	; 5
    26ca:	80 93 ba 01 	sts	0x01BA, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 93 c2 01 	sts	0x01C2, r24
		
		cli();  save_configuration();  sei();
    26d4:	f8 94       	cli
    26d6:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_Z18save_configurationv>
    26da:	78 94       	sei
    26dc:	80 91 ba 01 	lds	r24, 0x01BA
    26e0:	80 68       	ori	r24, 0x80	; 128
    26e2:	b0 cf       	rjmp	.-160    	; 0x2644 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    26e4:	87 e0       	ldi	r24, 0x07	; 7
    26e6:	80 93 ba 01 	sts	0x01BA, r24
		Confirmed = CLAIMED;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 c2 01 	sts	0x01C2, r24
		can_prep_instance_request( &msg2, MyInstance );
    26f0:	60 91 c3 01 	lds	r22, 0x01C3
    26f4:	8c e9       	ldi	r24, 0x9C	; 156
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	0e 94 cd 12 	call	0x259a	; 0x259a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    26fc:	6c e9       	ldi	r22, 0x9C	; 156
    26fe:	71 e0       	ldi	r23, 0x01	; 1
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
    2706:	40 91 c2 01 	lds	r20, 0x01C2
    270a:	92 cf       	rjmp	.-220    	; 0x2630 <_Z22can_instance_timeslicev+0x4c>

0000270c <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    2712:	60 91 c3 01 	lds	r22, 0x01C3
    2716:	84 e2       	ldi	r24, 0x24	; 36
    2718:	9c ef       	ldi	r25, 0xFC	; 252
    271a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    271e:	68 83       	st	Y, r22
    2720:	79 83       	std	Y+1, r23	; 0x01
    2722:	8a 83       	std	Y+2, r24	; 0x02
    2724:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    2726:	80 91 c3 01 	lds	r24, 0x01C3
    272a:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr    = 0;
    2730:	82 60       	ori	r24, 0x02	; 2
    2732:	8e 7f       	andi	r24, 0xFE	; 254
    2734:	8c 83       	std	Y+4, r24	; 0x04
}
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <_Z28can_process_instance_requestP4sCAN>:
 	
 Extract instance from the Message.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    273c:	fc 01       	movw	r30, r24
    273e:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    2740:	90 91 c3 01 	lds	r25, 0x01C3
    2744:	89 17       	cp	r24, r25
    2746:	18 f0       	brcs	.+6      	; 0x274e <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	80 93 c3 01 	sts	0x01C3, r24
    274e:	08 95       	ret

00002750 <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    2750:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	78 2f       	mov	r23, r24
    2756:	89 2f       	mov	r24, r25
    2758:	92 2f       	mov	r25, r18
    275a:	08 95       	ret

0000275c <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    275c:	38 2f       	mov	r19, r24
    275e:	26 2f       	mov	r18, r22
    2760:	87 2f       	mov	r24, r23
    2762:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    2764:	63 2f       	mov	r22, r19
    2766:	72 2f       	mov	r23, r18
    2768:	08 95       	ret

0000276a <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    276a:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    276c:	08 95       	ret

0000276e <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    276e:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    2770:	08 95       	ret

00002772 <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    2772:	89 2f       	mov	r24, r25
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	08 95       	ret

00002778 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    2778:	e1 e0       	ldi	r30, 0x01	; 1
    277a:	62 17       	cp	r22, r18
    277c:	73 07       	cpc	r23, r19
    277e:	84 07       	cpc	r24, r20
    2780:	95 07       	cpc	r25, r21
    2782:	09 f0       	breq	.+2      	; 0x2786 <_Z5match6idTypeS_+0xe>
    2784:	e0 e0       	ldi	r30, 0x00	; 0
}
    2786:	8e 2f       	mov	r24, r30
    2788:	08 95       	ret

0000278a <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	62 13       	cpse	r22, r18
    278e:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    2790:	08 95       	ret

00002792 <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    2792:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    2794:	27 2f       	mov	r18, r23
    2796:	38 2f       	mov	r19, r24
    2798:	69 2f       	mov	r22, r25
    279a:	74 2f       	mov	r23, r20
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	26 17       	cp	r18, r22
    27a0:	37 07       	cpc	r19, r23
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <_Z8id_match6idTypeS_+0x14>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
}
    27a6:	08 95       	ret

000027a8 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	49 13       	cpse	r20, r25
    27ac:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    27ae:	08 95       	ret

000027b0 <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    27b0:	90 93 c6 01 	sts	0x01C6, r25
    27b4:	80 93 c5 01 	sts	0x01C5, r24
    27b8:	08 95       	ret

000027ba <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    27c0:	60 91 c3 01 	lds	r22, 0x01C3
    27c4:	81 e1       	ldi	r24, 0x11	; 17
    27c6:	9c ef       	ldi	r25, 0xFC	; 252
    27c8:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    27cc:	68 83       	st	Y, r22
    27ce:	79 83       	std	Y+1, r23	; 0x01
    27d0:	8a 83       	std	Y+2, r24	; 0x02
    27d2:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    27d4:	84 e0       	ldi	r24, 0x04	; 4
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    27d8:	80 91 c3 01 	lds	r24, 0x01C3
    27dc:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    27de:	80 91 cb 01 	lds	r24, 0x01CB
    27e2:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    27e4:	80 91 ca 01 	lds	r24, 0x01CA
    27e8:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr    = 0;
    27ee:	88 60       	ori	r24, 0x08	; 8
    27f0:	8e 7f       	andi	r24, 0xFE	; 254
    27f2:	8c 83       	std	Y+4, r24	; 0x04
}
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	08 95       	ret

000027fa <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    2800:	60 91 c3 01 	lds	r22, 0x01C3
    2804:	82 e1       	ldi	r24, 0x12	; 18
    2806:	9c ef       	ldi	r25, 0xFC	; 252
    2808:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    280c:	68 83       	st	Y, r22
    280e:	79 83       	std	Y+1, r23	; 0x01
    2810:	8a 83       	std	Y+2, r24	; 0x02
    2812:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    2814:	84 e0       	ldi	r24, 0x04	; 4
    2816:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    2818:	81 e4       	ldi	r24, 0x41	; 65
    281a:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    2820:	9f e0       	ldi	r25, 0x0F	; 15
    2822:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    2824:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    2826:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr    = 0;
    282c:	8c 60       	ori	r24, 0x0C	; 12
    282e:	8e 7f       	andi	r24, 0xFE	; 254
    2830:	8c 83       	std	Y+4, r24	; 0x04
}
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	08 95       	ret

00002838 <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    283e:	60 91 c3 01 	lds	r22, 0x01C3
    2842:	83 e1       	ldi	r24, 0x13	; 19
    2844:	9c ef       	ldi	r25, 0xFC	; 252
    2846:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    284a:	68 83       	st	Y, r22
    284c:	79 83       	std	Y+1, r23	; 0x01
    284e:	8a 83       	std	Y+2, r24	; 0x02
    2850:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    2852:	84 e0       	ldi	r24, 0x04	; 4
    2854:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    2856:	86 e5       	ldi	r24, 0x56	; 86
    2858:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    285a:	88 e7       	ldi	r24, 0x78	; 120
    285c:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    285e:	8c e9       	ldi	r24, 0x9C	; 156
    2860:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    2862:	8e ed       	ldi	r24, 0xDE	; 222
    2864:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
    286a:	8a 60       	ori	r24, 0x0A	; 10
    286c:	8e 7f       	andi	r24, 0xFE	; 254
    286e:	8c 83       	std	Y+4, r24	; 0x04
}
    2870:	df 91       	pop	r29
    2872:	cf 91       	pop	r28
    2874:	08 95       	ret

00002876 <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    287c:	60 91 c3 01 	lds	r22, 0x01C3
    2880:	84 e1       	ldi	r24, 0x14	; 20
    2882:	9c ef       	ldi	r25, 0xFC	; 252
    2884:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2888:	68 83       	st	Y, r22
    288a:	79 83       	std	Y+1, r23	; 0x01
    288c:	8a 83       	std	Y+2, r24	; 0x02
    288e:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    2890:	e0 91 c9 01 	lds	r30, 0x01C9
    2894:	ed 83       	std	Y+5, r30	; 0x05
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	e4 58       	subi	r30, 0x84	; 132
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	de 01       	movw	r26, r28
    289e:	16 96       	adiw	r26, 0x06	; 6
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
{
	byte chars_sent = 0;
    28a0:	80 e0       	ldi	r24, 0x00	; 0
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    28a2:	94 91       	lpm	r25, Z
    28a4:	9d 93       	st	X+, r25
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    28a6:	8f 5f       	subi	r24, 0xFF	; 255
    28a8:	31 96       	adiw	r30, 0x01	; 1
    28aa:	88 30       	cpi	r24, 0x08	; 8
    28ac:	d1 f7       	brne	.-12     	; 0x28a2 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    28ae:	8c 81       	ldd	r24, Y+4	; 0x04
    28b0:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr = 0;
    28b2:	82 61       	ori	r24, 0x12	; 18
    28b4:	8e 7f       	andi	r24, 0xFE	; 254
    28b6:	8c 83       	std	Y+4, r24	; 0x04
}
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	08 95       	ret

000028be <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    28be:	80 91 c4 01 	lds	r24, 0x01C4
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	09 f1       	breq	.+66     	; 0x2908 <_Z24can_board_presence_replyv+0x4a>
    28c6:	b8 f0       	brcs	.+46     	; 0x28f6 <_Z24can_board_presence_replyv+0x38>
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	19 f0       	breq	.+6      	; 0x28d2 <_Z24can_board_presence_replyv+0x14>
    28cc:	83 30       	cpi	r24, 0x03	; 3
    28ce:	51 f0       	breq	.+20     	; 0x28e4 <_Z24can_board_presence_replyv+0x26>
    28d0:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    28d2:	8c e9       	ldi	r24, 0x9C	; 156
    28d4:	91 e0       	ldi	r25, 0x01	; 1
    28d6:	0e 94 1c 14 	call	0x2838	; 0x2838 <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    28da:	6c e9       	ldi	r22, 0x9C	; 156
    28dc:	71 e0       	ldi	r23, 0x01	; 1
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	0c 94 22 11 	jmp	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    28e4:	8c e9       	ldi	r24, 0x9C	; 156
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	0e 94 3b 14 	call	0x2876	; 0x2876 <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    28ec:	6c e9       	ldi	r22, 0x9C	; 156
    28ee:	71 e0       	ldi	r23, 0x01	; 1
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	0c 94 22 11 	jmp	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    28f6:	8c e9       	ldi	r24, 0x9C	; 156
    28f8:	91 e0       	ldi	r25, 0x01	; 1
    28fa:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    28fe:	6c e9       	ldi	r22, 0x9C	; 156
    2900:	71 e0       	ldi	r23, 0x01	; 1
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	0c 94 22 11 	jmp	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    2908:	8c e9       	ldi	r24, 0x9C	; 156
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    2910:	6c e9       	ldi	r22, 0x9C	; 156
    2912:	71 e0       	ldi	r23, 0x01	; 1
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	0c 94 22 11 	jmp	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>

0000291a <_Z19can_board_timeslicev>:
/* Sends the queued message 
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    291a:	80 91 c8 01 	lds	r24, 0x01C8
    291e:	80 fd       	sbrc	r24, 0
    2920:	59 c0       	rjmp	.+178    	; 0x29d4 <_Z19can_board_timeslicev+0xba>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    2922:	81 fd       	sbrc	r24, 1
    2924:	4c c0       	rjmp	.+152    	; 0x29be <_Z19can_board_timeslicev+0xa4>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    2926:	82 fd       	sbrc	r24, 2
    2928:	35 c0       	rjmp	.+106    	; 0x2994 <_Z19can_board_timeslicev+0x7a>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
    292a:	83 fd       	sbrc	r24, 3
    292c:	26 c0       	rjmp	.+76     	; 0x297a <_Z19can_board_timeslicev+0x60>
		save_configuration();
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    292e:	84 fd       	sbrc	r24, 4
    2930:	1a c0       	rjmp	.+52     	; 0x2966 <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    2932:	85 ff       	sbrs	r24, 5
    2934:	0d c0       	rjmp	.+26     	; 0x2950 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)
    2936:	80 91 0c 01 	lds	r24, 0x010C
    293a:	90 91 0d 01 	lds	r25, 0x010D
    293e:	9c 01       	movw	r18, r24
    2940:	21 50       	subi	r18, 0x01	; 1
    2942:	31 09       	sbc	r19, r1
    2944:	30 93 0d 01 	sts	0x010D, r19
    2948:	20 93 0c 01 	sts	0x010C, r18
    294c:	89 2b       	or	r24, r25
    294e:	09 f0       	breq	.+2      	; 0x2952 <_Z19can_board_timeslicev+0x38>
    2950:	08 95       	ret
		{
			cli();
    2952:	f8 94       	cli
			can_board_presence_reply( );
    2954:	0e 94 5f 14 	call	0x28be	; 0x28be <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    2958:	80 91 c8 01 	lds	r24, 0x01C8
    295c:	8f 7d       	andi	r24, 0xDF	; 223
    295e:	80 93 c8 01 	sts	0x01C8, r24
			sei();
    2962:	78 94       	sei
    2964:	08 95       	ret
		led_on(4);
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    2966:	f8 94       	cli
		save_cal();
    2968:	0e 94 6c 07 	call	0xed8	; 0xed8 <_Z8save_calv>
		System_Send_Status &= (~0x10);
    296c:	80 91 c8 01 	lds	r24, 0x01C8
    2970:	8f 7e       	andi	r24, 0xEF	; 239
    2972:	80 93 c8 01 	sts	0x01C8, r24
		sei();
    2976:	78 94       	sei
    2978:	dc cf       	rjmp	.-72     	; 0x2932 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration 
		cli();
    297a:	f8 94       	cli
		save_configuration();
    297c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_Z18save_configurationv>
		led_on(4);
    2980:	84 e0       	ldi	r24, 0x04	; 4
    2982:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_Z6led_onh>
		System_Send_Status &= (~0x08);
    2986:	80 91 c8 01 	lds	r24, 0x01C8
    298a:	87 7f       	andi	r24, 0xF7	; 247
    298c:	80 93 c8 01 	sts	0x01C8, r24
		sei();
    2990:	78 94       	sei
    2992:	cd cf       	rjmp	.-102    	; 0x292e <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    2994:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    2996:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    299a:	60 91 c3 01 	lds	r22, 0x01C3
    299e:	8c e9       	ldi	r24, 0x9C	; 156
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	0e 94 cd 12 	call	0x259a	; 0x259a <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    29a6:	6c e9       	ldi	r22, 0x9C	; 156
    29a8:	71 e0       	ldi	r23, 0x01	; 1
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    29b0:	80 91 c8 01 	lds	r24, 0x01C8
    29b4:	8b 7f       	andi	r24, 0xFB	; 251
    29b6:	80 93 c8 01 	sts	0x01C8, r24
		sei();
    29ba:	78 94       	sei
    29bc:	b6 cf       	rjmp	.-148    	; 0x292a <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    29be:	6c e9       	ldi	r22, 0x9C	; 156
    29c0:	71 e0       	ldi	r23, 0x01	; 1
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    29c8:	80 91 c8 01 	lds	r24, 0x01C8
    29cc:	8d 7f       	andi	r24, 0xFD	; 253
    29ce:	80 93 c8 01 	sts	0x01C8, r24
    29d2:	a9 cf       	rjmp	.-174    	; 0x2926 <_Z19can_board_timeslicev+0xc>
	This actually is called every 20ms.
*/
void can_board_timeslice()
{	
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    29d4:	6b ea       	ldi	r22, 0xAB	; 171
    29d6:	71 e0       	ldi	r23, 0x01	; 1
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    29de:	80 91 c8 01 	lds	r24, 0x01C8
    29e2:	8e 7f       	andi	r24, 0xFE	; 254
    29e4:	80 93 c8 01 	sts	0x01C8, r24
    29e8:	9c cf       	rjmp	.-200    	; 0x2922 <_Z19can_board_timeslicev+0x8>

000029ea <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    29f0:	60 91 c3 01 	lds	r22, 0x01C3
    29f4:	87 e2       	ldi	r24, 0x27	; 39
    29f6:	9c ef       	ldi	r25, 0xFC	; 252
    29f8:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    29fc:	68 83       	st	Y, r22
    29fe:	79 83       	std	Y+1, r23	; 0x01
    2a00:	8a 83       	std	Y+2, r24	; 0x02
    2a02:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    2a04:	80 91 3b 02 	lds	r24, 0x023B
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    2a0a:	80 91 3a 02 	lds	r24, 0x023A
    2a0e:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    2a10:	80 91 39 02 	lds	r24, 0x0239
    2a14:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    2a16:	80 91 38 02 	lds	r24, 0x0238
    2a1a:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    2a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1e:	81 7e       	andi	r24, 0xE1	; 225
    mMsg->header.rtr    = 0;
    2a20:	88 60       	ori	r24, 0x08	; 8
    2a22:	8e 7f       	andi	r24, 0xFE	; 254
    2a24:	8c 83       	std	Y+4, r24	; 0x04
}
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	08 95       	ret

00002a2c <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    2a32:	60 91 c3 01 	lds	r22, 0x01C3
    2a36:	85 e1       	ldi	r24, 0x15	; 21
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2a3e:	9b 01       	movw	r18, r22
    2a40:	ac 01       	movw	r20, r24
    2a42:	68 81       	ld	r22, Y
    2a44:	79 81       	ldd	r23, Y+1	; 0x01
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
    2a4e:	88 23       	and	r24, r24
    2a50:	39 f0       	breq	.+14     	; 0x2a60 <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
    2a52:	ce 01       	movw	r24, r28
    2a54:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    2a58:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    2a60:	6f ef       	ldi	r22, 0xFF	; 255
    2a62:	85 e1       	ldi	r24, 0x15	; 21
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2a6a:	9b 01       	movw	r18, r22
    2a6c:	ac 01       	movw	r20, r24
    2a6e:	68 81       	ld	r22, Y
    2a70:	79 81       	ldd	r23, Y+1	; 0x01
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    2a7a:	81 11       	cpse	r24, r1
    2a7c:	ea cf       	rjmp	.-44     	; 0x2a52 <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c 
		return TRUE;
	}
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	80 e1       	ldi	r24, 0x10	; 16
    2a82:	9c ef       	ldi	r25, 0xFC	; 252
    2a84:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2a88:	9b 01       	movw	r18, r22
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	68 81       	ld	r22, Y
    2a8e:	79 81       	ldd	r23, Y+1	; 0x01
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	0e 94 c9 13 	call	0x2792	; 0x2792 <_Z8id_match6idTypeS_>
    2a98:	88 23       	and	r24, r24
    2a9a:	99 f0       	breq	.+38     	; 0x2ac2 <_Z23can_board_msg_responderP4sCAN+0x96>
			There's contention.
			Need to delay by the instance number of timeslices.
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    2a9c:	80 91 c8 01 	lds	r24, 0x01C8
    2aa0:	80 62       	ori	r24, 0x20	; 32
    2aa2:	80 93 c8 01 	sts	0x01C8, r24
		Board_presence_response_type = mMsg->data[0];
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	80 93 c4 01 	sts	0x01C4, r24
		Board_presence_delay 		 = MyInstance;
    2aac:	80 91 c3 01 	lds	r24, 0x01C3
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	90 93 0d 01 	sts	0x010D, r25
    2ab6:	80 93 0c 01 	sts	0x010C, r24
		return TRUE;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    2ac2:	60 91 c3 01 	lds	r22, 0x01C3
    2ac6:	82 e2       	ldi	r24, 0x22	; 34
    2ac8:	9c ef       	ldi	r25, 0xFC	; 252
    2aca:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2ace:	9b 01       	movw	r18, r22
    2ad0:	ac 01       	movw	r20, r24
    2ad2:	68 81       	ld	r22, Y
    2ad4:	79 81       	ldd	r23, Y+1	; 0x01
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
    2ade:	88 23       	and	r24, r24
    2ae0:	b9 f0       	breq	.+46     	; 0x2b10 <_Z23can_board_msg_responderP4sCAN+0xe4>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	84 ff       	sbrs	r24, 4
    2ae6:	2b c0       	rjmp	.+86     	; 0x2b3e <_Z23can_board_msg_responderP4sCAN+0x112>
		{
			can_prep_configure( &msg1 );
    2ae8:	8b ea       	ldi	r24, 0xAB	; 171
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_Z18can_prep_configureP4sCAN>
			System_Send_Status = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	80 93 c8 01 	sts	0x01C8, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    2af6:	e0 91 c5 01 	lds	r30, 0x01C5
    2afa:	f0 91 c6 01 	lds	r31, 0x01C6
    2afe:	30 97       	sbiw	r30, 0x00	; 0
    2b00:	d1 f0       	breq	.+52     	; 0x2b36 <_Z23can_board_msg_responderP4sCAN+0x10a>
			config_call_back( mMsg->data[0] & 0x0F );
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	8f 70       	andi	r24, 0x0F	; 15
    2b06:	09 95       	icall
		return TRUE;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	08 95       	ret
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    2b10:	60 91 c3 01 	lds	r22, 0x01C3
    2b14:	81 e2       	ldi	r24, 0x21	; 33
    2b16:	9c ef       	ldi	r25, 0xFC	; 252
    2b18:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2b1c:	9b 01       	movw	r18, r22
    2b1e:	ac 01       	movw	r20, r24
    2b20:	68 81       	ld	r22, Y
    2b22:	79 81       	ldd	r23, Y+1	; 0x01
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
    2b2c:	88 23       	and	r24, r24
    2b2e:	71 f0       	breq	.+28     	; 0x2b4c <_Z23can_board_msg_responderP4sCAN+0x120>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    2b30:	88 e0       	ldi	r24, 0x08	; 8
    2b32:	80 93 c8 01 	sts	0x01C8, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TRUE;
	}
	//MotorState = MOTOR_REQUEST_PENDING;
	return FALSE;
}
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 );
			System_Send_Status = 1;
		} else { 
			can_parse_configure_request( mMsg );	// in configuration.c
    2b3e:	ce 01       	movw	r24, r28
    2b40:	0e 94 46 1b 	call	0x368c	; 0x368c <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    2b44:	88 e0       	ldi	r24, 0x08	; 8
    2b46:	80 93 c8 01 	sts	0x01C8, r24
    2b4a:	d5 cf       	rjmp	.-86     	; 0x2af6 <_Z23can_board_msg_responderP4sCAN+0xca>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    2b4c:	6f ef       	ldi	r22, 0xFF	; 255
    2b4e:	81 e2       	ldi	r24, 0x21	; 33
    2b50:	9c ef       	ldi	r25, 0xFC	; 252
    2b52:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2b56:	9b 01       	movw	r18, r22
    2b58:	ac 01       	movw	r20, r24
    2b5a:	68 81       	ld	r22, Y
    2b5c:	79 81       	ldd	r23, Y+1	; 0x01
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	9b 81       	ldd	r25, Y+3	; 0x03
    2b62:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    2b66:	81 11       	cpse	r24, r1
    2b68:	e3 cf       	rjmp	.-58     	; 0x2b30 <_Z23can_board_msg_responderP4sCAN+0x104>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    2b6a:	60 91 c3 01 	lds	r22, 0x01C3
    2b6e:	85 e2       	ldi	r24, 0x25	; 37
    2b70:	9c ef       	ldi	r25, 0xFC	; 252
    2b72:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2b76:	9b 01       	movw	r18, r22
    2b78:	ac 01       	movw	r20, r24
    2b7a:	68 81       	ld	r22, Y
    2b7c:	79 81       	ldd	r23, Y+1	; 0x01
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
    2b86:	81 11       	cpse	r24, r1
    2b88:	29 c0       	rjmp	.+82     	; 0x2bdc <_Z23can_board_msg_responderP4sCAN+0x1b0>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    2b8a:	60 91 c3 01 	lds	r22, 0x01C3
    2b8e:	86 e2       	ldi	r24, 0x26	; 38
    2b90:	9c ef       	ldi	r25, 0xFC	; 252
    2b92:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2b96:	9b 01       	movw	r18, r22
    2b98:	ac 01       	movw	r20, r24
    2b9a:	68 81       	ld	r22, Y
    2b9c:	79 81       	ldd	r23, Y+1	; 0x01
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
    2ba6:	88 23       	and	r24, r24
    2ba8:	79 f1       	breq	.+94     	; 0x2c08 <_Z23can_board_msg_responderP4sCAN+0x1dc>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    2baa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bac:	8e 71       	andi	r24, 0x1E	; 30
    2bae:	84 30       	cpi	r24, 0x04	; 4
    2bb0:	11 f6       	brne	.-124    	; 0x2b36 <_Z23can_board_msg_responderP4sCAN+0x10a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    2bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	98 2f       	mov	r25, r24
    2bb8:	88 27       	eor	r24, r24
    2bba:	2e 81       	ldd	r18, Y+6	; 0x06
    2bbc:	82 2b       	or	r24, r18
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    2bbe:	84 33       	cpi	r24, 0x34	; 52
    2bc0:	92 41       	sbci	r25, 0x12	; 18
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <_Z23can_board_msg_responderP4sCAN+0x19a>
    2bc4:	b8 cf       	rjmp	.-144    	; 0x2b36 <_Z23can_board_msg_responderP4sCAN+0x10a>
			{			
				init_path 	  = 0x55;
    2bc6:	85 e5       	ldi	r24, 0x55	; 85
    2bc8:	80 93 bb 01 	sts	0x01BB, r24
				init_complete = FALSE;
    2bcc:	10 92 c1 01 	sts	0x01C1, r1
				Confirmed     = NOT_CLAIMED;
    2bd0:	10 92 c2 01 	sts	0x01C2, r1
				can_instance_init();		// This fires off the sequencing right away.
    2bd4:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	3f cf       	rjmp	.-386    	; 0x2a5a <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	80 93 c2 01 	sts	0x01C2, r24
		MyInstance = mMsg->data[0];
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	80 93 c3 01 	sts	0x01C3, r24
		System_Send_Status |= 0x08;
    2be8:	80 91 c8 01 	lds	r24, 0x01C8
    2bec:	88 60       	ori	r24, 0x08	; 8
    2bee:	80 93 c8 01 	sts	0x01C8, r24
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    2bf8:	60 91 c3 01 	lds	r22, 0x01C3
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_Z26can_add_instance_to_filterht>
		return TRUE;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	29 cf       	rjmp	.-430    	; 0x2a5a <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    2c08:	6f ef       	ldi	r22, 0xFF	; 255
    2c0a:	86 e2       	ldi	r24, 0x26	; 38
    2c0c:	9c ef       	ldi	r25, 0xFC	; 252
    2c0e:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2c12:	9b 01       	movw	r18, r22
    2c14:	ac 01       	movw	r20, r24
    2c16:	68 81       	ld	r22, Y
    2c18:	79 81       	ldd	r23, Y+1	; 0x01
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	0e 94 bc 13 	call	0x2778	; 0x2778 <_Z5match6idTypeS_>
		//save_configuration();					// maybe shouldn't do here in ISR.
   		can_remove_instance_from_filter( 1 );	// move before MyInstance
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    2c22:	81 11       	cpse	r24, r1
    2c24:	c2 cf       	rjmp	.-124    	; 0x2baa <_Z23can_board_msg_responderP4sCAN+0x17e>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	83 e2       	ldi	r24, 0x23	; 35
    2c2a:	9c ef       	ldi	r25, 0xFC	; 252
    2c2c:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z14create_CAN_eidth>
    2c30:	9b 01       	movw	r18, r22
    2c32:	ac 01       	movw	r20, r24
    2c34:	68 81       	ld	r22, Y
    2c36:	79 81       	ldd	r23, Y+1	; 0x01
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	0e 94 c9 13 	call	0x2792	; 0x2792 <_Z8id_match6idTypeS_>
    2c40:	88 23       	and	r24, r24
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <_Z23can_board_msg_responderP4sCAN+0x21a>
    2c44:	0a cf       	rjmp	.-492    	; 0x2a5a <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    2c46:	9d 81       	ldd	r25, Y+5	; 0x05
    2c48:	80 91 c3 01 	lds	r24, 0x01C3
    2c4c:	98 13       	cpse	r25, r24
    2c4e:	73 cf       	rjmp	.-282    	; 0x2b36 <_Z23can_board_msg_responderP4sCAN+0x10a>
		{
			if (Confirmed == CLAIM_PENDING)
    2c50:	80 91 c2 01 	lds	r24, 0x01C2
    2c54:	80 32       	cpi	r24, 0x20	; 32
    2c56:	39 f0       	breq	.+14     	; 0x2c66 <_Z23can_board_msg_responderP4sCAN+0x23a>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    2c58:	81 11       	cpse	r24, r1
    2c5a:	6d cf       	rjmp	.-294    	; 0x2b36 <_Z23can_board_msg_responderP4sCAN+0x10a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	fa ce       	rjmp	.-524    	; 0x2a5a <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    2c66:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    2c6a:	80 e3       	ldi	r24, 0x30	; 48
    2c6c:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    2c70:	80 91 ef 00 	lds	r24, 0x00EF
    2c74:	8f 73       	andi	r24, 0x3F	; 63
    2c76:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    2c7a:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    2c7e:	10 92 c2 01 	sts	0x01C2, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    2c82:	ce 01       	movw	r24, r28
    2c84:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	e7 ce       	rjmp	.-562    	; 0x2a5a <_Z23can_board_msg_responderP4sCAN+0x2e>

00002c8c <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    2c8c:	cf 92       	push	r12
    2c8e:	df 92       	push	r13
    2c90:	ef 92       	push	r14
    2c92:	ff 92       	push	r15
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	6b 01       	movw	r12, r22
    2c9c:	7c 01       	movw	r14, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    2c9e:	c0 e0       	ldi	r28, 0x00	; 0
    2ca0:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    2ca2:	1f e0       	ldi	r17, 0x0F	; 15
    2ca4:	1c 9f       	mul	r17, r28
    2ca6:	f0 01       	movw	r30, r0
    2ca8:	1d 9f       	mul	r17, r29
    2caa:	f0 0d       	add	r31, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	e2 53       	subi	r30, 0x32	; 50
    2cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb2:	20 81       	ld	r18, Z
    2cb4:	31 81       	ldd	r19, Z+1	; 0x01
    2cb6:	42 81       	ldd	r20, Z+2	; 0x02
    2cb8:	53 81       	ldd	r21, Z+3	; 0x03
    2cba:	c7 01       	movw	r24, r14
    2cbc:	b6 01       	movw	r22, r12
    2cbe:	0e 94 c9 13 	call	0x2792	; 0x2792 <_Z8id_match6idTypeS_>
    2cc2:	81 11       	cpse	r24, r1
    2cc4:	0d c0       	rjmp	.+26     	; 0x2ce0 <_Z11FindMailBox6idType+0x54>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    2cc6:	21 96       	adiw	r28, 0x01	; 1
    2cc8:	c6 30       	cpi	r28, 0x06	; 6
    2cca:	d1 05       	cpc	r29, r1
    2ccc:	59 f7       	brne	.-42     	; 0x2ca4 <_Z11FindMailBox6idType+0x18>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    2cce:	8f ef       	ldi	r24, 0xFF	; 255
}
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	ff 90       	pop	r15
    2cd8:	ef 90       	pop	r14
    2cda:	df 90       	pop	r13
    2cdc:	cf 90       	pop	r12
    2cde:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    2ce0:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	df 90       	pop	r13
    2cee:	cf 90       	pop	r12
    2cf0:	08 95       	ret

00002cf2 <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    2cf2:	2f e0       	ldi	r18, 0x0F	; 15
    2cf4:	fb 01       	movw	r30, r22
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	01 90       	ld	r0, Z+
    2cfa:	0d 92       	st	X+, r0
    2cfc:	2a 95       	dec	r18
    2cfe:	e1 f7       	brne	.-8      	; 0x2cf8 <_Z12copy_can_msgP4sCANS0_+0x6>
    2d00:	08 95       	ret

00002d02 <_Z16addNormalHistoryP4sCAN>:
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
	copy_can_msg( &(Received[RxHead]), mMsg );	
    2d02:	20 91 cd 01 	lds	r18, 0x01CD
	return 0xFF;
}

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    2d06:	3f e0       	ldi	r19, 0x0F	; 15
    2d08:	32 9f       	mul	r19, r18
    2d0a:	d0 01       	movw	r26, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	a2 53       	subi	r26, 0x32	; 50
    2d10:	be 4f       	sbci	r27, 0xFE	; 254
    2d12:	fc 01       	movw	r30, r24
    2d14:	01 90       	ld	r0, Z+
    2d16:	0d 92       	st	X+, r0
    2d18:	3a 95       	dec	r19
    2d1a:	e1 f7       	brne	.-8      	; 0x2d14 <_Z16addNormalHistoryP4sCAN+0x12>
}

void addNormalHistory( struct sCAN* mMsg )
{
	copy_can_msg( &(Received[RxHead]), mMsg );	
	RxHead++;
    2d1c:	2f 5f       	subi	r18, 0xFF	; 255
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    2d1e:	26 30       	cpi	r18, 0x06	; 6
    2d20:	18 f0       	brcs	.+6      	; 0x2d28 <_Z16addNormalHistoryP4sCAN+0x26>
		RxHead = 0;
    2d22:	10 92 cd 01 	sts	0x01CD, r1
    2d26:	08 95       	ret
}

void addNormalHistory( struct sCAN* mMsg )
{
	copy_can_msg( &(Received[RxHead]), mMsg );	
	RxHead++;
    2d28:	20 93 cd 01 	sts	0x01CD, r18
    2d2c:	08 95       	ret

00002d2e <_Z17addMailboxHistoryP4sCAN>:
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
		RxHead = 0;
}

void addMailboxHistory( struct sCAN* mMsg )
{
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    2d34:	68 81       	ld	r22, Y
    2d36:	79 81       	ldd	r23, Y+1	; 0x01
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <_Z11FindMailBox6idType>
	if (index == 0xFF)
    2d40:	8f 3f       	cpi	r24, 0xFF	; 255
    2d42:	71 f0       	breq	.+28     	; 0x2d60 <_Z17addMailboxHistoryP4sCAN+0x32>
	return 0xFF;
}

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    2d44:	9f e0       	ldi	r25, 0x0F	; 15
    2d46:	98 9f       	mul	r25, r24
    2d48:	d0 01       	movw	r26, r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	a2 53       	subi	r26, 0x32	; 50
    2d4e:	be 4f       	sbci	r27, 0xFE	; 254
    2d50:	fe 01       	movw	r30, r28
    2d52:	01 90       	ld	r0, Z+
    2d54:	0d 92       	st	X+, r0
    2d56:	9a 95       	dec	r25
    2d58:	e1 f7       	brne	.-8      	; 0x2d52 <_Z17addMailboxHistoryP4sCAN+0x24>
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    2d60:	80 91 cd 01 	lds	r24, 0x01CD
	return 0xFF;
}

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    2d64:	9f e0       	ldi	r25, 0x0F	; 15
    2d66:	98 9f       	mul	r25, r24
    2d68:	d0 01       	movw	r26, r0
    2d6a:	11 24       	eor	r1, r1
    2d6c:	a2 53       	subi	r26, 0x32	; 50
    2d6e:	be 4f       	sbci	r27, 0xFE	; 254
    2d70:	fe 01       	movw	r30, r28
    2d72:	01 90       	ld	r0, Z+
    2d74:	0d 92       	st	X+, r0
    2d76:	9a 95       	dec	r25
    2d78:	e1 f7       	brne	.-8      	; 0x2d72 <_Z17addMailboxHistoryP4sCAN+0x44>
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
		RxHead++;
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    2d7c:	86 30       	cpi	r24, 0x06	; 6
    2d7e:	28 f0       	brcs	.+10     	; 0x2d8a <_Z17addMailboxHistoryP4sCAN+0x5c>
			RxHead = 0;
    2d80:	10 92 cd 01 	sts	0x01CD, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	08 95       	ret
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
		RxHead++;
    2d8a:	80 93 cd 01 	sts	0x01CD, r24
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	08 95       	ret

00002d94 <_Z12QueueMessageP4sCAN>:
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    2d94:	20 91 38 02 	lds	r18, 0x0238
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2d98:	21 ff       	sbrs	r18, 1
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    2d9a:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <_Z17addMailboxHistoryP4sCAN>
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    2d9e:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <_Z16addNormalHistoryP4sCAN>

00002da2 <_Z15RetrieveMessagev>:
    2da2:	80 91 38 02 	lds	r24, 0x0238
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2da6:	81 ff       	sbrs	r24, 1
    2da8:	11 c0       	rjmp	.+34     	; 0x2dcc <_Z15RetrieveMessagev+0x2a>
	{
		if (RxTail == RxHead)
    2daa:	80 91 cc 01 	lds	r24, 0x01CC
    2dae:	90 91 cd 01 	lds	r25, 0x01CD
    2db2:	89 17       	cp	r24, r25
    2db4:	71 f0       	breq	.+28     	; 0x2dd2 <_Z15RetrieveMessagev+0x30>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	98 0f       	add	r25, r24
    2dba:	90 93 cc 01 	sts	0x01CC, r25
    2dbe:	2f e0       	ldi	r18, 0x0F	; 15
    2dc0:	82 9f       	mul	r24, r18
    2dc2:	c0 01       	movw	r24, r0
    2dc4:	11 24       	eor	r1, r1
    2dc6:	82 53       	subi	r24, 0x32	; 50
    2dc8:	9e 4f       	sbci	r25, 0xFE	; 254
    2dca:	08 95       	ret
		}
	}
	return NULL;
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
}
    2dd0:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    2dd2:	10 92 cc 01 	sts	0x01CC, r1
			RxHead = 0;
    2dd6:	10 92 cd 01 	sts	0x01CD, r1
			return NULL;
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	08 95       	ret

00002de0 <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    2de0:	2f e0       	ldi	r18, 0x0F	; 15
    2de2:	82 9f       	mul	r24, r18
    2de4:	c0 01       	movw	r24, r0
    2de6:	11 24       	eor	r1, r1
}
    2de8:	82 53       	subi	r24, 0x32	; 50
    2dea:	9e 4f       	sbci	r25, 0xFE	; 254
    2dec:	08 95       	ret

00002dee <_Z15CAN_Q_Timeslicev>:
    2dee:	80 91 38 02 	lds	r24, 0x0238
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    2df2:	81 ff       	sbrs	r24, 1
    2df4:	14 c0       	rjmp	.+40     	; 0x2e1e <_Z15CAN_Q_Timeslicev+0x30>
	{
		if (RxTail == RxHead)
    2df6:	80 91 cc 01 	lds	r24, 0x01CC
    2dfa:	90 91 cd 01 	lds	r25, 0x01CD
    2dfe:	89 17       	cp	r24, r25
    2e00:	79 f0       	breq	.+30     	; 0x2e20 <_Z15CAN_Q_Timeslicev+0x32>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    2e02:	91 e0       	ldi	r25, 0x01	; 1
    2e04:	98 0f       	add	r25, r24
    2e06:	90 93 cc 01 	sts	0x01CC, r25
    2e0a:	2f e0       	ldi	r18, 0x0F	; 15
    2e0c:	82 9f       	mul	r24, r18
    2e0e:	c0 01       	movw	r24, r0
    2e10:	11 24       	eor	r1, r1
    2e12:	82 53       	subi	r24, 0x32	; 50
    2e14:	9e 4f       	sbci	r25, 0xFE	; 254
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
	if (msg)
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	11 f0       	breq	.+4      	; 0x2e1e <_Z15CAN_Q_Timeslicev+0x30>
	{
		SET_LED_2();
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
			can_file_message( msg );
    2e1a:	0c 94 4e 03 	jmp	0x69c	; 0x69c <_Z16can_file_messageP4sCAN>
    2e1e:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    2e20:	10 92 cc 01 	sts	0x01CC, r1
			RxHead = 0;
    2e24:	10 92 cd 01 	sts	0x01CD, r1
    2e28:	08 95       	ret

00002e2a <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    2e2a:	10 92 2a 02 	sts	0x022A, r1
	System_LED_Control.pattern    = 0;
    2e2e:	10 92 29 02 	sts	0x0229, r1
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    2e32:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    2e34:	57 9a       	sbi	0x0a, 7	; 10
#endif
  	RESET_LED_1();
	RESET_LED_2();
	RESET_LED_3();
    2e36:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_4();
    2e38:	5f 98       	cbi	0x0b, 7	; 11
    2e3a:	08 95       	ret

00002e3c <_Z16protected_led_onh>:
}

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    2e3c:	83 30       	cpi	r24, 0x03	; 3
    2e3e:	29 f0       	breq	.+10     	; 0x2e4a <_Z16protected_led_onh+0xe>
    2e40:	84 30       	cpi	r24, 0x04	; 4
    2e42:	11 f4       	brne	.+4      	; 0x2e48 <_Z16protected_led_onh+0xc>
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    2e44:	5f 9a       	sbi	0x0b, 7	; 11
    2e46:	08 95       	ret
    2e48:	08 95       	ret
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
    2e4a:	5e 9a       	sbi	0x0b, 6	; 11
    2e4c:	08 95       	ret

00002e4e <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    2e4e:	83 30       	cpi	r24, 0x03	; 3
    2e50:	29 f0       	breq	.+10     	; 0x2e5c <_Z17protected_led_offh+0xe>
    2e52:	84 30       	cpi	r24, 0x04	; 4
    2e54:	11 f4       	brne	.+4      	; 0x2e5a <_Z17protected_led_offh+0xc>
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    2e56:	5f 98       	cbi	0x0b, 7	; 11
    2e58:	08 95       	ret
    2e5a:	08 95       	ret
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
    2e5c:	5e 98       	cbi	0x0b, 6	; 11
    2e5e:	08 95       	ret

00002e60 <_Z17protected_set_ledhh>:
	return FALSE;
}

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2e60:	90 91 2a 02 	lds	r25, 0x022A
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    2e64:	66 23       	and	r22, r22
    2e66:	19 f0       	breq	.+6      	; 0x2e6e <_Z17protected_set_ledhh+0xe>
	return FALSE;
}

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2e68:	99 23       	and	r25, r25
    2e6a:	29 f0       	breq	.+10     	; 0x2e76 <_Z17protected_set_ledhh+0x16>
    2e6c:	08 95       	ret
	protected_led_on(mindex);
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2e6e:	91 11       	cpse	r25, r1
    2e70:	fd cf       	rjmp	.-6      	; 0x2e6c <_Z17protected_set_ledhh+0xc>
	protected_led_off(mindex);
    2e72:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <_Z17protected_led_offh>
}

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
	protected_led_on(mindex);
    2e76:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <_Z16protected_led_onh>

00002e7a <_Z11strobe_ledsh>:
/* Useful for Verifying Pin connections (Initial board test) 
	Return :  TRUE -> Complete scan
			  FALSE -> Still more leds to light
*/
byte strobe_leds( byte mOn )
{
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2e7e:	c0 91 2a 02 	lds	r28, 0x022A
    2e82:	cd 7f       	andi	r28, 0xFD	; 253
    2e84:	f1 f4       	brne	.+60     	; 0x2ec2 <_Z11strobe_ledsh+0x48>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    2e86:	90 91 10 01 	lds	r25, 0x0110
    2e8a:	2f ef       	ldi	r18, 0xFF	; 255
    2e8c:	29 0f       	add	r18, r25
    2e8e:	20 93 10 01 	sts	0x0110, r18
    2e92:	91 11       	cpse	r25, r1
    2e94:	16 c0       	rjmp	.+44     	; 0x2ec2 <_Z11strobe_ledsh+0x48>
		counter = STROBE_SPEED;
    2e96:	9a e0       	ldi	r25, 0x0A	; 10
    2e98:	90 93 10 01 	sts	0x0110, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2e9c:	d0 91 0f 01 	lds	r29, 0x010F
    2ea0:	88 23       	and	r24, r24
    2ea2:	a1 f0       	breq	.+40     	; 0x2ecc <_Z11strobe_ledsh+0x52>
    2ea4:	8d 2f       	mov	r24, r29
    2ea6:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_Z16protected_led_onh>
    2eaa:	8d 2f       	mov	r24, r29
		i++;
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
		if (i>=5)  { i=1; return TRUE; }
    2eae:	85 30       	cpi	r24, 0x05	; 5
    2eb0:	a0 f0       	brcs	.+40     	; 0x2eda <_Z11strobe_ledsh+0x60>
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	80 93 0f 01 	sts	0x010F, r24
    2eb8:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return FALSE;
}
    2eba:	8c 2f       	mov	r24, r28
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	08 95       	ret
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
		i++;
		if (i>=5)  { i=1; return TRUE; }
	}
	return FALSE;
    2ec2:	c0 e0       	ldi	r28, 0x00	; 0
}
    2ec4:	8c 2f       	mov	r24, r28
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    2ecc:	8d 2f       	mov	r24, r29
    2ece:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_Z17protected_led_offh>
    2ed2:	8d 2f       	mov	r24, r29
		i++;
    2ed4:	8f 5f       	subi	r24, 0xFF	; 255
		if (i>=5)  { i=1; return TRUE; }
    2ed6:	85 30       	cpi	r24, 0x05	; 5
    2ed8:	60 f7       	brcc	.-40     	; 0x2eb2 <_Z11strobe_ledsh+0x38>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
		i++;
    2eda:	80 93 0f 01 	sts	0x010F, r24
		if (i>=5)  { i=1; return TRUE; }
	}
	return FALSE;
}
    2ede:	8c 2f       	mov	r24, r28
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	08 95       	ret

00002ee6 <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2ee6:	90 91 2a 02 	lds	r25, 0x022A
    2eea:	91 11       	cpse	r25, r1
    2eec:	08 95       	ret
	protected_led_on(mindex);
    2eee:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <_Z16protected_led_onh>

00002ef2 <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2ef2:	90 91 2a 02 	lds	r25, 0x022A
    2ef6:	91 11       	cpse	r25, r1
    2ef8:	08 95       	ret
	protected_led_off(mindex);
    2efa:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <_Z17protected_led_offh>

00002efe <_Z7set_ledhh>:
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    2efe:	90 91 2a 02 	lds	r25, 0x022A
    2f02:	91 11       	cpse	r25, r1
    2f04:	08 95       	ret
	protected_set_led( mindex, value );
    2f06:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <_Z17protected_set_ledhh>

00002f0a <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    2f0a:	66 23       	and	r22, r22
    2f0c:	39 f0       	breq	.+14     	; 0x2f1c <_Z19protected_show_bytehh+0x12>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    2f0e:	87 ff       	sbrs	r24, 7
    2f10:	0e c0       	rjmp	.+28     	; 0x2f2e <_Z19protected_show_bytehh+0x24>
    2f12:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    2f14:	86 fd       	sbrc	r24, 6
    2f16:	07 c0       	rjmp	.+14     	; 0x2f26 <_Z19protected_show_bytehh+0x1c>
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    2f18:	5e 98       	cbi	0x0b, 6	; 11
    2f1a:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    2f1c:	83 ff       	sbrs	r24, 3
    2f1e:	05 c0       	rjmp	.+10     	; 0x2f2a <_Z19protected_show_bytehh+0x20>
    2f20:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    2f22:	82 ff       	sbrs	r24, 2
    2f24:	f9 cf       	rjmp	.-14     	; 0x2f18 <_Z19protected_show_bytehh+0xe>
    2f26:	5e 9a       	sbi	0x0b, 6	; 11
    2f28:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    2f2a:	5f 98       	cbi	0x0b, 7	; 11
    2f2c:	fa cf       	rjmp	.-12     	; 0x2f22 <_Z19protected_show_bytehh+0x18>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    2f2e:	5f 98       	cbi	0x0b, 7	; 11
    2f30:	f1 cf       	rjmp	.-30     	; 0x2f14 <_Z19protected_show_bytehh+0xa>

00002f32 <_Z18show_result_toggleh.part.4>:
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    2f32:	90 91 11 01 	lds	r25, 0x0111
    2f36:	99 23       	and	r25, r25
    2f38:	59 f0       	breq	.+22     	; 0x2f50 <_Z18show_result_toggleh.part.4+0x1e>
		  protected_show_byte( mresult, 1 );
    2f3a:	61 e0       	ldi	r22, 0x01	; 1
    2f3c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_Z19protected_show_bytehh>
		else 
		  protected_show_byte( mresult, 0 );
		hi_low = ! hi_low;		// toggle
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 91 11 01 	lds	r25, 0x0111
    2f46:	91 11       	cpse	r25, r1
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	80 93 11 01 	sts	0x0111, r24
    2f4e:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_Z19protected_show_bytehh>
    2f56:	f4 cf       	rjmp	.-24     	; 0x2f40 <_Z18show_result_toggleh.part.4+0xe>

00002f58 <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    2f58:	90 91 2a 02 	lds	r25, 0x022A
    2f5c:	91 11       	cpse	r25, r1
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    2f5e:	80 91 29 02 	lds	r24, 0x0229
	}
    protected_show_byte( result, mHiNibble );
    2f62:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <_Z19protected_show_bytehh>

00002f66 <_Z18show_result_toggleh>:
}

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    2f66:	90 91 2a 02 	lds	r25, 0x022A
    2f6a:	99 23       	and	r25, r25
    2f6c:	19 f0       	breq	.+6      	; 0x2f74 <_Z18show_result_toggleh+0xe>
    2f6e:	93 30       	cpi	r25, 0x03	; 3
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <_Z18show_result_toggleh+0xe>
    2f72:	08 95       	ret
    2f74:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <_Z18show_result_toggleh.part.4>

00002f78 <_Z21can_parse_led_requestP4sCAN>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    2f78:	fc 01       	movw	r30, r24
    2f7a:	25 81       	ldd	r18, Z+5	; 0x05
    2f7c:	2f 70       	andi	r18, 0x0F	; 15
    2f7e:	20 93 2a 02 	sts	0x022A, r18
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    2f82:	86 81       	ldd	r24, Z+6	; 0x06
    2f84:	8f 70       	andi	r24, 0x0F	; 15
    2f86:	80 93 29 02 	sts	0x0229, r24

	switch (System_LED_Control.systemMode)
    2f8a:	22 30       	cpi	r18, 0x02	; 2
    2f8c:	71 f0       	breq	.+28     	; 0x2faa <_Z21can_parse_led_requestP4sCAN+0x32>
    2f8e:	23 30       	cpi	r18, 0x03	; 3
    2f90:	31 f0       	breq	.+12     	; 0x2f9e <_Z21can_parse_led_requestP4sCAN+0x26>
    2f92:	21 30       	cpi	r18, 0x01	; 1
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <_Z21can_parse_led_requestP4sCAN+0x20>
    2f96:	08 95       	ret
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
	}
    protected_show_byte( result, mHiNibble );
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <_Z19protected_show_bytehh>
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    2f9e:	80 91 c3 01 	lds	r24, 0x01C3
    2fa2:	80 93 29 02 	sts	0x0229, r24
    2fa6:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <_Z18show_result_toggleh.part.4>
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    2faa:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <_Z11strobe_ledsh>

00002fae <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    2fae:	80 91 2a 02 	lds	r24, 0x022A
    2fb2:	82 30       	cpi	r24, 0x02	; 2
    2fb4:	c9 f0       	breq	.+50     	; 0x2fe8 <_Z19led_timeslice_100msv+0x3a>
    2fb6:	83 30       	cpi	r24, 0x03	; 3
    2fb8:	41 f0       	breq	.+16     	; 0x2fca <_Z19led_timeslice_100msv+0x1c>
    2fba:	81 30       	cpi	r24, 0x01	; 1
    2fbc:	09 f0       	breq	.+2      	; 0x2fc0 <_Z19led_timeslice_100msv+0x12>
    2fbe:	08 95       	ret
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
	}
    protected_show_byte( result, mHiNibble );
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	80 91 29 02 	lds	r24, 0x0229
    2fc6:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <_Z19protected_show_bytehh>
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    2fca:	80 91 0e 01 	lds	r24, 0x010E
    2fce:	9f ef       	ldi	r25, 0xFF	; 255
    2fd0:	98 0f       	add	r25, r24
    2fd2:	90 93 0e 01 	sts	0x010E, r25
    2fd6:	81 11       	cpse	r24, r1
    2fd8:	f2 cf       	rjmp	.-28     	; 0x2fbe <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    2fda:	8a e0       	ldi	r24, 0x0A	; 10
    2fdc:	80 93 0e 01 	sts	0x010E, r24
    2fe0:	80 91 c3 01 	lds	r24, 0x01C3
    2fe4:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <_Z18show_result_toggleh.part.4>
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    2fe8:	80 91 29 02 	lds	r24, 0x0229
    2fec:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_Z11strobe_ledsh>
    2ff0:	81 30       	cpi	r24, 0x01	; 1
    2ff2:	29 f7       	brne	.-54     	; 0x2fbe <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    2ff4:	90 91 29 02 	lds	r25, 0x0229
    2ff8:	91 11       	cpse	r25, r1
    2ffa:	03 c0       	rjmp	.+6      	; 0x3002 <_Z19led_timeslice_100msv+0x54>
    2ffc:	80 93 29 02 	sts	0x0229, r24
    3000:	08 95       	ret
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	fb cf       	rjmp	.-10     	; 0x2ffc <_Z19led_timeslice_100msv+0x4e>

00003006 <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    3006:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    3008:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    300a:	90 93 89 00 	sts	0x0089, r25
    300e:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    3012:	2f bf       	out	0x3f, r18	; 63
    3014:	08 95       	ret

00003016 <_Z11OCR1B_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    3016:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    3018:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    301a:	90 93 8b 00 	sts	0x008B, r25
    301e:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    3022:	2f bf       	out	0x3f, r18	; 63
    3024:	08 95       	ret

00003026 <_Z13get_top_valuef>:
}

word get_top_value( float mHerz )
{
    3026:	cf 92       	push	r12
    3028:	df 92       	push	r13
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	6b 01       	movw	r12, r22
    3030:	7c 01       	movw	r14, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    3032:	20 91 14 01 	lds	r18, 0x0114
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	74 e2       	ldi	r23, 0x24	; 36
    3040:	84 ef       	ldi	r24, 0xF4	; 244
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__divmodsi4>
    3048:	ca 01       	movw	r24, r20
    304a:	b9 01       	movw	r22, r18
    304c:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    3050:	a7 01       	movw	r20, r14
    3052:	96 01       	movw	r18, r12
    3054:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
    3058:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
	return Top;
}
    305c:	cb 01       	movw	r24, r22
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	cf 90       	pop	r12
    3066:	08 95       	ret

00003068 <_Z7set_topt>:

void set_top( word mTop )
{
	TOP = mTop;
    3068:	90 93 13 01 	sts	0x0113, r25
    306c:	80 93 12 01 	sts	0x0112, r24
	ICR1 = TOP;
    3070:	90 93 87 00 	sts	0x0087, r25
    3074:	80 93 86 00 	sts	0x0086, r24
    3078:	08 95       	ret

0000307a <_Z16select_prescalerf>:
}

word select_prescaler( float mHerz )
{
    307a:	af 92       	push	r10
    307c:	bf 92       	push	r11
    307e:	cf 92       	push	r12
    3080:	df 92       	push	r13
    3082:	ef 92       	push	r14
    3084:	ff 92       	push	r15
    3086:	0f 93       	push	r16
    3088:	1f 93       	push	r17
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	9b 01       	movw	r18, r22
    3090:	ac 01       	movw	r20, r24
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	74 e2       	ldi	r23, 0x24	; 36
    3096:	84 e7       	ldi	r24, 0x74	; 116
    3098:	9b e4       	ldi	r25, 0x4B	; 75
    309a:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
    309e:	5b 01       	movw	r10, r22
    30a0:	6c 01       	movw	r12, r24
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	3f ef       	ldi	r19, 0xFF	; 255
    30a6:	4f e7       	ldi	r20, 0x7F	; 127
    30a8:	57 e4       	ldi	r21, 0x47	; 71
    30aa:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    30ae:	18 16       	cp	r1, r24
    30b0:	0c f0       	brlt	.+2      	; 0x30b4 <_Z16select_prescalerf+0x3a>
    30b2:	50 c0       	rjmp	.+160    	; 0x3154 <_Z16select_prescalerf+0xda>
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	5e e3       	ldi	r21, 0x3E	; 62
    30bc:	b5 01       	movw	r22, r10
    30be:	c6 01       	movw	r24, r12
    30c0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    30c4:	7b 01       	movw	r14, r22
    30c6:	8c 01       	movw	r16, r24
    30c8:	c8 e0       	ldi	r28, 0x08	; 8
    30ca:	d0 e0       	ldi	r29, 0x00	; 0
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	3f ef       	ldi	r19, 0xFF	; 255
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	57 e4       	ldi	r21, 0x47	; 71
    30d4:	b7 01       	movw	r22, r14
    30d6:	c8 01       	movw	r24, r16
    30d8:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    30dc:	18 16       	cp	r1, r24
    30de:	64 f4       	brge	.+24     	; 0x30f8 <_Z16select_prescalerf+0x7e>
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e8       	ldi	r20, 0x80	; 128
    30e6:	5c e3       	ldi	r21, 0x3C	; 60
    30e8:	b5 01       	movw	r22, r10
    30ea:	c6 01       	movw	r24, r12
    30ec:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    30f0:	7b 01       	movw	r14, r22
    30f2:	8c 01       	movw	r16, r24
    30f4:	c0 e4       	ldi	r28, 0x40	; 64
    30f6:	d0 e0       	ldi	r29, 0x00	; 0
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	3f ef       	ldi	r19, 0xFF	; 255
    30fc:	4f e7       	ldi	r20, 0x7F	; 127
    30fe:	57 e4       	ldi	r21, 0x47	; 71
    3100:	b7 01       	movw	r22, r14
    3102:	c8 01       	movw	r24, r16
    3104:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    3108:	18 16       	cp	r1, r24
    310a:	64 f4       	brge	.+24     	; 0x3124 <_Z16select_prescalerf+0xaa>
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e8       	ldi	r20, 0x80	; 128
    3112:	5b e3       	ldi	r21, 0x3B	; 59
    3114:	b5 01       	movw	r22, r10
    3116:	c6 01       	movw	r24, r12
    3118:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    311c:	7b 01       	movw	r14, r22
    311e:	8c 01       	movw	r16, r24
    3120:	c0 e0       	ldi	r28, 0x00	; 0
    3122:	d1 e0       	ldi	r29, 0x01	; 1
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	3f ef       	ldi	r19, 0xFF	; 255
    3128:	4f e7       	ldi	r20, 0x7F	; 127
    312a:	57 e4       	ldi	r21, 0x47	; 71
    312c:	b7 01       	movw	r22, r14
    312e:	c8 01       	movw	r24, r16
    3130:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    3134:	18 16       	cp	r1, r24
    3136:	14 f4       	brge	.+4      	; 0x313c <_Z16select_prescalerf+0xc2>
    3138:	c0 e0       	ldi	r28, 0x00	; 0
    313a:	d4 e0       	ldi	r29, 0x04	; 4
	return Pre;	
}
    313c:	ce 01       	movw	r24, r28
    313e:	df 91       	pop	r29
    3140:	cf 91       	pop	r28
    3142:	1f 91       	pop	r17
    3144:	0f 91       	pop	r16
    3146:	ff 90       	pop	r15
    3148:	ef 90       	pop	r14
    314a:	df 90       	pop	r13
    314c:	cf 90       	pop	r12
    314e:	bf 90       	pop	r11
    3150:	af 90       	pop	r10
    3152:	08 95       	ret
word select_prescaler( float mHerz )
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
    3154:	75 01       	movw	r14, r10
    3156:	86 01       	movw	r16, r12
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    3158:	c1 e0       	ldi	r28, 0x01	; 1
    315a:	d0 e0       	ldi	r29, 0x00	; 0
    315c:	b7 cf       	rjmp	.-146    	; 0x30cc <_Z16select_prescalerf+0x52>

0000315e <_Z20get_tccr1b_prescalert>:
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    315e:	80 34       	cpi	r24, 0x40	; 64
    3160:	91 05       	cpc	r25, r1
    3162:	b9 f0       	breq	.+46     	; 0x3192 <_Z20get_tccr1b_prescalert+0x34>
    3164:	38 f4       	brcc	.+14     	; 0x3174 <_Z20get_tccr1b_prescalert+0x16>
    3166:	81 30       	cpi	r24, 0x01	; 1
    3168:	91 05       	cpc	r25, r1
    316a:	89 f0       	breq	.+34     	; 0x318e <_Z20get_tccr1b_prescalert+0x30>
    316c:	08 97       	sbiw	r24, 0x08	; 8
    316e:	59 f4       	brne	.+22     	; 0x3186 <_Z20get_tccr1b_prescalert+0x28>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    3170:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    3172:	08 95       	ret
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    3174:	81 15       	cp	r24, r1
    3176:	21 e0       	ldi	r18, 0x01	; 1
    3178:	92 07       	cpc	r25, r18
    317a:	39 f0       	breq	.+14     	; 0x318a <_Z20get_tccr1b_prescalert+0x2c>
    317c:	81 15       	cp	r24, r1
    317e:	94 40       	sbci	r25, 0x04	; 4
    3180:	11 f4       	brne	.+4      	; 0x3186 <_Z20get_tccr1b_prescalert+0x28>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    3182:	85 e0       	ldi	r24, 0x05	; 5
    3184:	08 95       	ret
	default	  : break;
	}
	return 0xFF;
    3186:	8f ef       	ldi	r24, 0xFF	; 255
    3188:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    318a:	84 e0       	ldi	r24, 0x04	; 4
    318c:	08 95       	ret
byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    3192:	83 e0       	ldi	r24, 0x03	; 3
    3194:	08 95       	ret

00003196 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6b 01       	movw	r12, r22
    31a0:	7c 01       	movw	r14, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    31a2:	20 91 14 01 	lds	r18, 0x0114
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e0       	ldi	r20, 0x00	; 0
    31aa:	50 e0       	ldi	r21, 0x00	; 0
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	74 e2       	ldi	r23, 0x24	; 36
    31b0:	84 ef       	ldi	r24, 0xF4	; 244
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__divmodsi4>
    31b8:	ca 01       	movw	r24, r20
    31ba:	b9 01       	movw	r22, r18
    31bc:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    31c0:	a7 01       	movw	r20, r14
    31c2:	96 01       	movw	r18, r12
    31c4:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
    31c8:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    31cc:	70 93 13 01 	sts	0x0113, r23
    31d0:	60 93 12 01 	sts	0x0112, r22
}

void set_top( word mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    31d4:	70 93 87 00 	sts	0x0087, r23
    31d8:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	df 90       	pop	r13
    31e2:	cf 90       	pop	r12
    31e4:	08 95       	ret

000031e6 <_Z8pwm_initfhh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mA_Enable, BOOL mB_Enable )
{
    31e6:	bf 92       	push	r11
    31e8:	cf 92       	push	r12
    31ea:	df 92       	push	r13
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	6b 01       	movw	r12, r22
    31fa:	7c 01       	movw	r14, r24
    31fc:	d4 2f       	mov	r29, r20
    31fe:	c2 2f       	mov	r28, r18
	if (mA_Enable)		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    3200:	41 11       	cpse	r20, r1
    3202:	52 9a       	sbi	0x0a, 2	; 10
	if (mB_Enable)		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    3204:	c1 11       	cpse	r28, r1
    3206:	39 9a       	sbi	0x07, 1	; 7

	// No Power Reduction (needed to enable the Timer1)
	PRR &= ~((1<<PRTIM1) | (1<<PRTIM0));
    3208:	80 91 64 00 	lds	r24, 0x0064
    320c:	87 7e       	andi	r24, 0xE7	; 231
    320e:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    3212:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    3214:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    3216:	10 92 89 00 	sts	0x0089, r1
    321a:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    321e:	8f bf       	out	0x3f, r24	; 63

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    3220:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    3222:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3224:	10 92 8b 00 	sts	0x008B, r1
    3228:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    322c:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'word'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'word'
	word Top = (F_CPU/Prescaler) / mHerz;
    322e:	20 91 14 01 	lds	r18, 0x0114
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e0       	ldi	r20, 0x00	; 0
    3236:	50 e0       	ldi	r21, 0x00	; 0
    3238:	60 e0       	ldi	r22, 0x00	; 0
    323a:	74 e2       	ldi	r23, 0x24	; 36
    323c:	84 ef       	ldi	r24, 0xF4	; 244
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__divmodsi4>
    3244:	ca 01       	movw	r24, r20
    3246:	b9 01       	movw	r22, r18
    3248:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__floatsisf>
    324c:	a7 01       	movw	r20, r14
    324e:	96 01       	movw	r18, r12
    3250:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
    3254:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>
	return Top;
}

void set_top( word mTop )
{
	TOP = mTop;
    3258:	70 93 13 01 	sts	0x0113, r23
    325c:	60 93 12 01 	sts	0x0112, r22
	ICR1 = TOP;
    3260:	70 93 87 00 	sts	0x0087, r23
    3264:	60 93 86 00 	sts	0x0086, r22
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    3268:	d1 11       	cpse	r29, r1
    326a:	7b c0       	rjmp	.+246    	; 0x3362 <_Z8pwm_initfhh+0x17c>
	// TOP counter value is defined in the ICR1
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
    326c:	82 e0       	ldi	r24, 0x02	; 2
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
    326e:	c1 11       	cpse	r28, r1
    3270:	80 62       	ori	r24, 0x20	; 32
	TCCR1A 	= tccr1a;
    3272:	80 93 80 00 	sts	0x0080, r24

word select_prescaler( float mHerz )
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    3276:	a7 01       	movw	r20, r14
    3278:	96 01       	movw	r18, r12
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	74 e2       	ldi	r23, 0x24	; 36
    327e:	84 e7       	ldi	r24, 0x74	; 116
    3280:	9b e4       	ldi	r25, 0x4B	; 75
    3282:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divsf3>
    3286:	b6 2e       	mov	r11, r22
    3288:	c7 2e       	mov	r12, r23
    328a:	d8 2e       	mov	r13, r24
    328c:	f9 2e       	mov	r15, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	3f ef       	ldi	r19, 0xFF	; 255
    3292:	4f e7       	ldi	r20, 0x7F	; 127
    3294:	57 e4       	ldi	r21, 0x47	; 71
    3296:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    329a:	18 16       	cp	r1, r24
    329c:	0c f0       	brlt	.+2      	; 0x32a0 <_Z8pwm_initfhh+0xba>
    329e:	5a c0       	rjmp	.+180    	; 0x3354 <_Z8pwm_initfhh+0x16e>
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	5e e3       	ldi	r21, 0x3E	; 62
    32a8:	6b 2d       	mov	r22, r11
    32aa:	7c 2d       	mov	r23, r12
    32ac:	8d 2d       	mov	r24, r13
    32ae:	9f 2d       	mov	r25, r15
    32b0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    32b4:	8b 01       	movw	r16, r22
    32b6:	d8 2f       	mov	r29, r24
    32b8:	c9 2f       	mov	r28, r25
    32ba:	98 e0       	ldi	r25, 0x08	; 8
    32bc:	e9 2e       	mov	r14, r25
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	3f ef       	ldi	r19, 0xFF	; 255
    32c2:	4f e7       	ldi	r20, 0x7F	; 127
    32c4:	57 e4       	ldi	r21, 0x47	; 71
    32c6:	b8 01       	movw	r22, r16
    32c8:	8d 2f       	mov	r24, r29
    32ca:	9c 2f       	mov	r25, r28
    32cc:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	7c f4       	brge	.+30     	; 0x32f2 <_Z8pwm_initfhh+0x10c>
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5c e3       	ldi	r21, 0x3C	; 60
    32dc:	6b 2d       	mov	r22, r11
    32de:	7c 2d       	mov	r23, r12
    32e0:	8d 2d       	mov	r24, r13
    32e2:	9f 2d       	mov	r25, r15
    32e4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    32e8:	8b 01       	movw	r16, r22
    32ea:	d8 2f       	mov	r29, r24
    32ec:	c9 2f       	mov	r28, r25
    32ee:	80 e4       	ldi	r24, 0x40	; 64
    32f0:	e8 2e       	mov	r14, r24
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	3f ef       	ldi	r19, 0xFF	; 255
    32f6:	4f e7       	ldi	r20, 0x7F	; 127
    32f8:	57 e4       	ldi	r21, 0x47	; 71
    32fa:	b8 01       	movw	r22, r16
    32fc:	8d 2f       	mov	r24, r29
    32fe:	9c 2f       	mov	r25, r28
    3300:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    3304:	18 16       	cp	r1, r24
    3306:	74 f4       	brge	.+28     	; 0x3324 <_Z8pwm_initfhh+0x13e>
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e8       	ldi	r20, 0x80	; 128
    330e:	5b e3       	ldi	r21, 0x3B	; 59
    3310:	6b 2d       	mov	r22, r11
    3312:	7c 2d       	mov	r23, r12
    3314:	8d 2d       	mov	r24, r13
    3316:	9f 2d       	mov	r25, r15
    3318:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    331c:	8b 01       	movw	r16, r22
    331e:	d8 2f       	mov	r29, r24
    3320:	c9 2f       	mov	r28, r25
    3322:	e1 2c       	mov	r14, r1
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	3f ef       	ldi	r19, 0xFF	; 255
    3328:	4f e7       	ldi	r20, 0x7F	; 127
    332a:	57 e4       	ldi	r21, 0x47	; 71
    332c:	b8 01       	movw	r22, r16
    332e:	8d 2f       	mov	r24, r29
    3330:	9c 2f       	mov	r25, r28
    3332:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__gesf2>
    3336:	18 16       	cp	r1, r24
    3338:	b4 f0       	brlt	.+44     	; 0x3366 <_Z8pwm_initfhh+0x180>
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
	if (mB_Enable)	tccr1a |= 0x20;
	TCCR1A 	= tccr1a;

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    333a:	e0 92 14 01 	sts	0x0114, r14
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    333e:	88 e0       	ldi	r24, 0x08	; 8
    3340:	e8 16       	cp	r14, r24
    3342:	11 f1       	breq	.+68     	; 0x3388 <_Z8pwm_initfhh+0x1a2>
    3344:	80 e4       	ldi	r24, 0x40	; 64
    3346:	e8 16       	cp	r14, r24
    3348:	e9 f0       	breq	.+58     	; 0x3384 <_Z8pwm_initfhh+0x19e>
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	e8 12       	cpse	r14, r24
    334e:	0d c0       	rjmp	.+26     	; 0x336a <_Z8pwm_initfhh+0x184>
    3350:	89 e1       	ldi	r24, 0x19	; 25
    3352:	0c c0       	rjmp	.+24     	; 0x336c <_Z8pwm_initfhh+0x186>
word select_prescaler( float mHerz )
{
	word Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
    3354:	0b 2d       	mov	r16, r11
    3356:	1c 2d       	mov	r17, r12
    3358:	dd 2d       	mov	r29, r13
    335a:	cf 2d       	mov	r28, r15
	ICR1 = TOP;
}

word select_prescaler( float mHerz )
{
	word Pre = 1;
    335c:	ee 24       	eor	r14, r14
    335e:	e3 94       	inc	r14
    3360:	ae cf       	rjmp	.-164    	; 0x32be <_Z8pwm_initfhh+0xd8>
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );

	// 8 Bit control Registers:
	byte tccr1a = 0x02;
	if (mA_Enable)	tccr1a |= 0x80;
    3362:	82 e8       	ldi	r24, 0x82	; 130
    3364:	84 cf       	rjmp	.-248    	; 0x326e <_Z8pwm_initfhh+0x88>
	if (mB_Enable)	tccr1a |= 0x20;
	TCCR1A 	= tccr1a;

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    3366:	10 92 14 01 	sts	0x0114, r1
    336a:	8f ef       	ldi	r24, 0xFF	; 255
	byte tccr1b = 0x18;
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    336c:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	df 90       	pop	r13
    337e:	cf 90       	pop	r12
    3380:	bf 90       	pop	r11
    3382:	08 95       	ret
    3384:	8b e1       	ldi	r24, 0x1B	; 27
    3386:	f2 cf       	rjmp	.-28     	; 0x336c <_Z8pwm_initfhh+0x186>
}

byte get_tccr1b_prescaler( word Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    3388:	8a e1       	ldi	r24, 0x1A	; 26
    338a:	f0 cf       	rjmp	.-32     	; 0x336c <_Z8pwm_initfhh+0x186>

0000338c <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
    338c:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
	if (mHigh)
    3390:	81 11       	cpse	r24, r1
    3392:	05 c0       	rjmp	.+10     	; 0x339e <_Z13set_polarityAh+0x12>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    3394:	89 2f       	mov	r24, r25
    3396:	80 6c       	ori	r24, 0xC0	; 192
	TCCR1A = tmp;		
    3398:	80 93 80 00 	sts	0x0080, r24
    339c:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    339e:	89 2f       	mov	r24, r25
    33a0:	8f 7b       	andi	r24, 0xBF	; 191
    33a2:	80 68       	ori	r24, 0x80	; 128
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    33a4:	80 93 80 00 	sts	0x0080, r24
    33a8:	08 95       	ret

000033aa <_Z13set_polarityBh>:
}
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
    33aa:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
	if (mHigh)
    33ae:	81 11       	cpse	r24, r1
    33b0:	05 c0       	rjmp	.+10     	; 0x33bc <_Z13set_polarityBh+0x12>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    33b2:	89 2f       	mov	r24, r25
    33b4:	80 63       	ori	r24, 0x30	; 48
	TCCR1A = tmp;
    33b6:	80 93 80 00 	sts	0x0080, r24
    33ba:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	byte tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    33bc:	89 2f       	mov	r24, r25
    33be:	8f 7e       	andi	r24, 0xEF	; 239
    33c0:	80 62       	ori	r24, 0x20	; 32
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    33c2:	80 93 80 00 	sts	0x0080, r24
    33c6:	08 95       	ret

000033c8 <_Z9set_dutyAf>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_dutyA( float mDuty )
{
    33c8:	cf 92       	push	r12
    33ca:	df 92       	push	r13
    33cc:	ef 92       	push	r14
    33ce:	ff 92       	push	r15
    33d0:	6b 01       	movw	r12, r22
    33d2:	7c 01       	movw	r14, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	a9 01       	movw	r20, r18
    33da:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__cmpsf2>
    33de:	87 ff       	sbrs	r24, 7
    33e0:	04 c0       	rjmp	.+8      	; 0x33ea <_Z9set_dutyAf+0x22>
    33e2:	f7 fa       	bst	r15, 7
    33e4:	f0 94       	com	r15
    33e6:	f7 f8       	bld	r15, 7
    33e8:	f0 94       	com	r15
	word counts = ceil( (float)TOP * mDuty );
    33ea:	60 91 12 01 	lds	r22, 0x0112
    33ee:	70 91 13 01 	lds	r23, 0x0113
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    33fa:	a7 01       	movw	r20, r14
    33fc:	96 01       	movw	r18, r12
    33fe:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    3402:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <ceil>
    3406:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    340a:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    340c:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    340e:	70 93 89 00 	sts	0x0089, r23
    3412:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    3416:	2f bf       	out	0x3f, r18	; 63
void set_dutyA( float mDuty )
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive
	word counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	df 90       	pop	r13
    341e:	cf 90       	pop	r12
    3420:	08 95       	ret

00003422 <_Z9set_dutyBf>:

void set_dutyB( float mDuty )
{
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	6b 01       	movw	r12, r22
    342c:	7c 01       	movw	r14, r24
	if (mDuty<0) mDuty = -mDuty;
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	a9 01       	movw	r20, r18
    3434:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__cmpsf2>
    3438:	87 ff       	sbrs	r24, 7
    343a:	04 c0       	rjmp	.+8      	; 0x3444 <_Z9set_dutyBf+0x22>
    343c:	f7 fa       	bst	r15, 7
    343e:	f0 94       	com	r15
    3440:	f7 f8       	bld	r15, 7
    3442:	f0 94       	com	r15
	word counts = ceil( (float)TOP * mDuty );
    3444:	60 91 12 01 	lds	r22, 0x0112
    3448:	70 91 13 01 	lds	r23, 0x0113
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__floatunsisf>
    3454:	a7 01       	movw	r20, r14
    3456:	96 01       	movw	r18, r12
    3458:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    345c:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <ceil>
    3460:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    3464:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    3466:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    3468:	70 93 8b 00 	sts	0x008B, r23
    346c:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    3470:	2f bf       	out	0x3f, r18	; 63
void set_dutyB( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	word counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    3472:	ff 90       	pop	r15
    3474:	ef 90       	pop	r14
    3476:	df 90       	pop	r13
    3478:	cf 90       	pop	r12
    347a:	08 95       	ret

0000347c <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    3480:	10 92 2b 02 	sts	0x022B, r1
    3484:	10 92 2c 02 	sts	0x022C, r1
    3488:	10 92 2d 02 	sts	0x022D, r1
    348c:	10 92 2e 02 	sts	0x022E, r1
    3490:	00 91 2b 02 	lds	r16, 0x022B
    3494:	10 91 2c 02 	lds	r17, 0x022C
    3498:	20 91 2d 02 	lds	r18, 0x022D
    349c:	30 91 2e 02 	lds	r19, 0x022E
    34a0:	06 17       	cp	r16, r22
    34a2:	17 07       	cpc	r17, r23
    34a4:	28 07       	cpc	r18, r24
    34a6:	39 07       	cpc	r19, r25
    34a8:	0c f5       	brge	.+66     	; 0x34ec <_Z5delayl+0x70>
    34aa:	00 91 2b 02 	lds	r16, 0x022B
    34ae:	10 91 2c 02 	lds	r17, 0x022C
    34b2:	20 91 2d 02 	lds	r18, 0x022D
    34b6:	30 91 2e 02 	lds	r19, 0x022E
    34ba:	0f 5f       	subi	r16, 0xFF	; 255
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	2f 4f       	sbci	r18, 0xFF	; 255
    34c0:	3f 4f       	sbci	r19, 0xFF	; 255
    34c2:	00 93 2b 02 	sts	0x022B, r16
    34c6:	10 93 2c 02 	sts	0x022C, r17
    34ca:	20 93 2d 02 	sts	0x022D, r18
    34ce:	30 93 2e 02 	sts	0x022E, r19
    34d2:	00 91 2b 02 	lds	r16, 0x022B
    34d6:	10 91 2c 02 	lds	r17, 0x022C
    34da:	20 91 2d 02 	lds	r18, 0x022D
    34de:	30 91 2e 02 	lds	r19, 0x022E
    34e2:	06 17       	cp	r16, r22
    34e4:	17 07       	cpc	r17, r23
    34e6:	28 07       	cpc	r18, r24
    34e8:	39 07       	cpc	r19, r25
    34ea:	fc f2       	brlt	.-66     	; 0x34aa <_Z5delayl+0x2e>
}
    34ec:	1f 91       	pop	r17
    34ee:	0f 91       	pop	r16
    34f0:	08 95       	ret

000034f2 <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    34f2:	8f ef       	ldi	r24, 0xFF	; 255
    34f4:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    34f6:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    34f8:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    34fa:	8e ef       	ldi	r24, 0xFE	; 254
    34fc:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    34fe:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    3500:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    3502:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    3504:	10 92 64 00 	sts	0x0064, r1
    3508:	08 95       	ret

0000350a <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    350a:	82 e0       	ldi	r24, 0x02	; 2
    350c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    350e:	93 e0       	ldi	r25, 0x03	; 3
    3510:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    3512:	9a ef       	ldi	r25, 0xFA	; 250
    3514:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    3516:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    351a:	10 92 33 02 	sts	0x0233, r1
    351e:	10 92 32 02 	sts	0x0232, r1
    3522:	08 95       	ret

00003524 <_Z13Enter_HS_Modev>:
	//Enter_HS_Mode();
}

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	80 93 2f 02 	sts	0x022F, r24
    352a:	08 95       	ret

0000352c <_Z17Enter_Normal_Modev>:
}
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    352c:	10 92 2f 02 	sts	0x022F, r1
    3530:	08 95       	ret

00003532 <_Z15System_Dispatchv>:
}

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    3532:	20 91 32 02 	lds	r18, 0x0232
    3536:	30 91 33 02 	lds	r19, 0x0233
    353a:	c9 01       	movw	r24, r18
    353c:	65 e0       	ldi	r22, 0x05	; 5
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divmodhi4>
    3544:	89 2b       	or	r24, r25
    3546:	39 f4       	brne	.+14     	; 0x3556 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    3548:	c9 01       	movw	r24, r18
    354a:	6a e0       	ldi	r22, 0x0A	; 10
    354c:	70 e0       	ldi	r23, 0x00	; 0
    354e:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divmodhi4>
    3552:	89 2b       	or	r24, r25
    3554:	09 f0       	breq	.+2      	; 0x3558 <_Z15System_Dispatchv+0x26>
    3556:	08 95       	ret
		{
			can_instance_timeslice();
    3558:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    355c:	80 91 32 02 	lds	r24, 0x0232
    3560:	90 91 33 02 	lds	r25, 0x0233
    3564:	64 e1       	ldi	r22, 0x14	; 20
    3566:	70 e0       	ldi	r23, 0x00	; 0
    3568:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divmodhi4>
    356c:	89 2b       	or	r24, r25
    356e:	99 f7       	brne	.-26     	; 0x3556 <_Z15System_Dispatchv+0x24>
			{	
				can_board_timeslice();
    3570:	0e 94 8d 14 	call	0x291a	; 0x291a <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    3574:	80 91 32 02 	lds	r24, 0x0232
    3578:	90 91 33 02 	lds	r25, 0x0233
    357c:	62 e3       	ldi	r22, 0x32	; 50
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divmodhi4>
    3584:	89 2b       	or	r24, r25
    3586:	39 f7       	brne	.-50     	; 0x3556 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    3588:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <_Z19led_timeslice_100msv>

0000358c <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    358c:	1f 92       	push	r1
    358e:	0f 92       	push	r0
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	0f 92       	push	r0
    3594:	11 24       	eor	r1, r1
    3596:	2f 93       	push	r18
    3598:	3f 93       	push	r19
    359a:	4f 93       	push	r20
    359c:	5f 93       	push	r21
    359e:	6f 93       	push	r22
    35a0:	7f 93       	push	r23
    35a2:	8f 93       	push	r24
    35a4:	9f 93       	push	r25
    35a6:	af 93       	push	r26
    35a8:	bf 93       	push	r27
    35aa:	ef 93       	push	r30
    35ac:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    35ae:	80 91 36 02 	lds	r24, 0x0236
    35b2:	88 23       	and	r24, r24
    35b4:	c9 f1       	breq	.+114    	; 0x3628 <__vector_15+0x9c>
    35b6:	10 92 36 02 	sts	0x0236, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    35ba:	80 91 2f 02 	lds	r24, 0x022F
    35be:	88 23       	and	r24, r24
    35c0:	d1 f1       	breq	.+116    	; 0x3636 <__vector_15+0xaa>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    35c2:	e0 91 34 02 	lds	r30, 0x0234
    35c6:	f0 91 35 02 	lds	r31, 0x0235
    35ca:	9f 01       	movw	r18, r30
    35cc:	ad ec       	ldi	r26, 0xCD	; 205
    35ce:	bc ec       	ldi	r27, 0xCC	; 204
    35d0:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <__umulhisi3>
    35d4:	96 95       	lsr	r25
    35d6:	87 95       	ror	r24
    35d8:	96 95       	lsr	r25
    35da:	87 95       	ror	r24
    35dc:	96 95       	lsr	r25
    35de:	87 95       	ror	r24
    35e0:	ac 01       	movw	r20, r24
    35e2:	44 0f       	add	r20, r20
    35e4:	55 1f       	adc	r21, r21
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	48 0f       	add	r20, r24
    35f4:	59 1f       	adc	r21, r25
    35f6:	e4 17       	cp	r30, r20
    35f8:	f5 07       	cpc	r31, r21
    35fa:	59 f1       	breq	.+86     	; 0x3652 <__vector_15+0xc6>
    35fc:	31 96       	adiw	r30, 0x01	; 1
    35fe:	f0 93 35 02 	sts	0x0235, r31
    3602:	e0 93 34 02 	sts	0x0234, r30
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    3606:	ff 91       	pop	r31
    3608:	ef 91       	pop	r30
    360a:	bf 91       	pop	r27
    360c:	af 91       	pop	r26
    360e:	9f 91       	pop	r25
    3610:	8f 91       	pop	r24
    3612:	7f 91       	pop	r23
    3614:	6f 91       	pop	r22
    3616:	5f 91       	pop	r21
    3618:	4f 91       	pop	r20
    361a:	3f 91       	pop	r19
    361c:	2f 91       	pop	r18
    361e:	0f 90       	pop	r0
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	0f 90       	pop	r0
    3624:	1f 90       	pop	r1
    3626:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	80 93 36 02 	sts	0x0236, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    362e:	80 91 2f 02 	lds	r24, 0x022F
    3632:	81 11       	cpse	r24, r1
    3634:	c6 cf       	rjmp	.-116    	; 0x35c2 <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    3636:	80 91 32 02 	lds	r24, 0x0232
    363a:	90 91 33 02 	lds	r25, 0x0233
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	90 93 33 02 	sts	0x0233, r25
    3644:	80 93 32 02 	sts	0x0232, r24
		System_Dispatch();
    3648:	0e 94 99 1a 	call	0x3532	; 0x3532 <_Z15System_Dispatchv>
		OS_Dispatch();
    364c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_Z11OS_Dispatchv>
    3650:	da cf       	rjmp	.-76     	; 0x3606 <__vector_15+0x7a>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    3652:	10 92 35 02 	sts	0x0235, r1
    3656:	10 92 34 02 	sts	0x0234, r1
			OS_Event_TIC_Counter++;
    365a:	80 91 32 02 	lds	r24, 0x0232
    365e:	90 91 33 02 	lds	r25, 0x0233
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	90 93 33 02 	sts	0x0233, r25
    3668:	80 93 32 02 	sts	0x0232, r24
			OS_Dispatch();
    366c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_Z11OS_Dispatchv>
    3670:	ca cf       	rjmp	.-108    	; 0x3606 <__vector_15+0x7a>

00003672 <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    3672:	82 e0       	ldi	r24, 0x02	; 2
    3674:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    3676:	93 e0       	ldi	r25, 0x03	; 3
    3678:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    367a:	9a ef       	ldi	r25, 0xFA	; 250
    367c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    367e:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    3682:	10 92 33 02 	sts	0x0233, r1
    3686:	10 92 32 02 	sts	0x0232, r1
    368a:	08 95       	ret

0000368c <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    368c:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    368e:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    3690:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    3692:	85 81       	ldd	r24, Z+5	; 0x05
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	d9 f0       	breq	.+54     	; 0x36ce <_Z27can_parse_configure_requestP4sCAN+0x42>
    3698:	83 30       	cpi	r24, 0x03	; 3
    369a:	71 f0       	breq	.+28     	; 0x36b8 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    369c:	81 30       	cpi	r24, 0x01	; 1
    369e:	09 f0       	breq	.+2      	; 0x36a2 <_Z27can_parse_configure_requestP4sCAN+0x16>
    36a0:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    36a2:	89 2f       	mov	r24, r25
    36a4:	80 95       	com	r24
    36a6:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    36a8:	92 23       	and	r25, r18
    36aa:	20 91 3b 02 	lds	r18, 0x023B
    36ae:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    36b0:	89 23       	and	r24, r25
    36b2:	80 93 3b 02 	sts	0x023B, r24
				 break;
    36b6:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    36b8:	89 2f       	mov	r24, r25
    36ba:	80 95       	com	r24
    36bc:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    36be:	92 23       	and	r25, r18
    36c0:	20 91 39 02 	lds	r18, 0x0239
    36c4:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    36c6:	89 23       	and	r24, r25
    36c8:	80 93 39 02 	sts	0x0239, r24
    36cc:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    36ce:	89 2f       	mov	r24, r25
    36d0:	80 95       	com	r24
    36d2:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    36d4:	92 23       	and	r25, r18
    36d6:	20 91 3a 02 	lds	r18, 0x023A
    36da:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    36dc:	89 23       	and	r24, r25
    36de:	80 93 3a 02 	sts	0x023A, r24
				 break;
    36e2:	08 95       	ret

000036e4 <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    36e4:	10 92 3b 02 	sts	0x023B, r1
	config_byte_2 = 0;		// no reports
    36e8:	10 92 3a 02 	sts	0x023A, r1
	config_byte_3 = 0;		// 
    36ec:	10 92 39 02 	sts	0x0239, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    36f0:	82 e4       	ldi	r24, 0x42	; 66
    36f2:	80 93 38 02 	sts	0x0238, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    36f6:	10 92 c1 01 	sts	0x01C1, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    36fa:	80 91 37 02 	lds	r24, 0x0237
    36fe:	81 60       	ori	r24, 0x01	; 1
    3700:	80 93 37 02 	sts	0x0237, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    3704:	10 92 c2 01 	sts	0x01C2, r1
	MyInstance 		 = 0x98;
    3708:	88 e9       	ldi	r24, 0x98	; 152
    370a:	80 93 c3 01 	sts	0x01C3, r24
    370e:	08 95       	ret

00003710 <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    3710:	80 91 37 02 	lds	r24, 0x0237
							// and b/c it's better the user knows when it's read.
	//led_off(4);
	
	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    3714:	80 fd       	sbrc	r24, 0
    3716:	08 95       	ret
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    3718:	10 92 3b 02 	sts	0x023B, r1
	config_byte_2 = 0;		// no reports
    371c:	10 92 3a 02 	sts	0x023A, r1
	config_byte_3 = 0;		// 
    3720:	10 92 39 02 	sts	0x0239, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    3724:	92 e4       	ldi	r25, 0x42	; 66
    3726:	90 93 38 02 	sts	0x0238, r25

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    372a:	10 92 c1 01 	sts	0x01C1, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    372e:	81 60       	ori	r24, 0x01	; 1
    3730:	80 93 37 02 	sts	0x0237, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    3734:	10 92 c2 01 	sts	0x01C2, r1
	MyInstance 		 = 0x98;
    3738:	88 e9       	ldi	r24, 0x98	; 152
    373a:	80 93 c3 01 	sts	0x01C3, r24
	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    373e:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_Z25app_default_configurationv>

00003742 <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number( byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    3742:	20 91 c3 01 	lds	r18, 0x01C3
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3746:	f9 99       	sbic	0x1f, 1	; 31
    3748:	fe cf       	rjmp	.-4      	; 0x3746 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    374a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    374c:	92 bd       	out	0x22, r25	; 34
    374e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3750:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	fa 9a       	sbi	0x1f, 2	; 31
    3758:	f9 9a       	sbi	0x1f, 1	; 31
    375a:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
}
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	08 95       	ret

00003760 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3760:	f9 99       	sbic	0x1f, 1	; 31
    3762:	fe cf       	rjmp	.-4      	; 0x3760 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3764:	92 bd       	out	0x22, r25	; 34
    3766:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3768:	f8 9a       	sbi	0x1f, 0	; 31
    376a:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    376c:	20 93 c3 01 	sts	0x01C3, r18
    return mEEPROMAddress+1;    
}
    3770:	01 96       	adiw	r24, 0x01	; 1
    3772:	08 95       	ret

00003774 <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    3774:	20 91 c2 01 	lds	r18, 0x01C2
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3778:	f9 99       	sbic	0x1f, 1	; 31
    377a:	fe cf       	rjmp	.-4      	; 0x3778 <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    377c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    377e:	92 bd       	out	0x22, r25	; 34
    3780:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3782:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	fa 9a       	sbi	0x1f, 2	; 31
    378a:	f9 9a       	sbi	0x1f, 1	; 31
    378c:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
}
    378e:	01 96       	adiw	r24, 0x01	; 1
    3790:	08 95       	ret

00003792 <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3792:	f9 99       	sbic	0x1f, 1	; 31
    3794:	fe cf       	rjmp	.-4      	; 0x3792 <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3796:	92 bd       	out	0x22, r25	; 34
    3798:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    379a:	f8 9a       	sbi	0x1f, 0	; 31
    379c:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    379e:	20 93 c2 01 	sts	0x01C2, r18
    return mEEPROMAddress+1;
}
    37a2:	01 96       	adiw	r24, 0x01	; 1
    37a4:	08 95       	ret

000037a6 <_Z25save_configuration_eepromPh>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	byte* address = addr;
	eeprom_write_byte( addr++, ~config_byte_1 );
    37a6:	20 91 3b 02 	lds	r18, 0x023B
    37aa:	20 95       	com	r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    37ac:	f9 99       	sbic	0x1f, 1	; 31
    37ae:	fe cf       	rjmp	.-4      	; 0x37ac <_Z25save_configuration_eepromPh+0x6>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    37b0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    37b2:	92 bd       	out	0x22, r25	; 34
    37b4:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    37b6:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	fa 9a       	sbi	0x1f, 2	; 31
    37be:	f9 9a       	sbi	0x1f, 1	; 31
    37c0:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    37c2:	40 91 3a 02 	lds	r20, 0x023A
    37c6:	40 95       	com	r20
    37c8:	9c 01       	movw	r18, r24
    37ca:	2f 5f       	subi	r18, 0xFF	; 255
    37cc:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    37ce:	f9 99       	sbic	0x1f, 1	; 31
    37d0:	fe cf       	rjmp	.-4      	; 0x37ce <_Z25save_configuration_eepromPh+0x28>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    37d2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    37d4:	32 bd       	out	0x22, r19	; 34
    37d6:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    37d8:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	fa 9a       	sbi	0x1f, 2	; 31
    37e0:	f9 9a       	sbi	0x1f, 1	; 31
    37e2:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    37e4:	40 91 39 02 	lds	r20, 0x0239
    37e8:	40 95       	com	r20
    37ea:	9c 01       	movw	r18, r24
    37ec:	2e 5f       	subi	r18, 0xFE	; 254
    37ee:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    37f0:	f9 99       	sbic	0x1f, 1	; 31
    37f2:	fe cf       	rjmp	.-4      	; 0x37f0 <_Z25save_configuration_eepromPh+0x4a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    37f4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    37f6:	32 bd       	out	0x22, r19	; 34
    37f8:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    37fa:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	fa 9a       	sbi	0x1f, 2	; 31
    3802:	f9 9a       	sbi	0x1f, 1	; 31
    3804:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    3806:	40 91 38 02 	lds	r20, 0x0238
    380a:	40 95       	com	r20
    380c:	9c 01       	movw	r18, r24
    380e:	2d 5f       	subi	r18, 0xFD	; 253
    3810:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3812:	f9 99       	sbic	0x1f, 1	; 31
    3814:	fe cf       	rjmp	.-4      	; 0x3812 <_Z25save_configuration_eepromPh+0x6c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3816:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3818:	32 bd       	out	0x22, r19	; 34
    381a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    381c:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	fa 9a       	sbi	0x1f, 2	; 31
    3824:	f9 9a       	sbi	0x1f, 1	; 31
    3826:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    3828:	40 91 37 02 	lds	r20, 0x0237
    382c:	40 95       	com	r20
    382e:	9c 01       	movw	r18, r24
    3830:	2c 5f       	subi	r18, 0xFC	; 252
    3832:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3834:	f9 99       	sbic	0x1f, 1	; 31
    3836:	fe cf       	rjmp	.-4      	; 0x3834 <_Z25save_configuration_eepromPh+0x8e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3838:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    383a:	32 bd       	out	0x22, r19	; 34
    383c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    383e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	f8 94       	cli
    3844:	fa 9a       	sbi	0x1f, 2	; 31
    3846:	f9 9a       	sbi	0x1f, 1	; 31
    3848:	0f be       	out	0x3f, r0	; 63
	okay_to_read_cal = true;
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	20 93 19 01 	sts	0x0119, r18
	return addr;
}
    3850:	05 96       	adiw	r24, 0x05	; 5
    3852:	08 95       	ret

00003854 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    385c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    3860:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <_Z25save_configuration_eepromPh>

00003864 <_Z21make_system_new_boardt>:
	Caller:		None found in BigMotorEn.
 */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    3864:	84 33       	cpi	r24, 0x34	; 52
    3866:	92 41       	sbci	r25, 0x12	; 18
    3868:	11 f0       	breq	.+4      	; 0x386e <_Z21make_system_new_boardt+0xa>
		  0 = bad password 
	Caller:		None found in BigMotorEn.
 */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    386a:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    386c:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    386e:	80 91 37 02 	lds	r24, 0x0237
    3872:	8e 7f       	andi	r24, 0xFE	; 254
    3874:	80 93 37 02 	sts	0x0237, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    3878:	f8 94       	cli
    387a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_Z18save_configurationv>
    387e:	78 94       	sei
		retval = 1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	08 95       	ret

00003884 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    3884:	f8 94       	cli
	return save_configuration();
    3886:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <_Z18save_configurationv>

0000388a <_Z25read_configuration_eepromPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    388a:	f9 99       	sbic	0x1f, 1	; 31
    388c:	fe cf       	rjmp	.-4      	; 0x388a <_Z25read_configuration_eepromPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    388e:	92 bd       	out	0x22, r25	; 34
    3890:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3892:	f8 9a       	sbi	0x1f, 0	; 31
    3894:	20 b5       	in	r18, 0x20	; 32
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    3896:	20 95       	com	r18
    3898:	20 93 3b 02 	sts	0x023B, r18
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    389c:	9c 01       	movw	r18, r24
    389e:	2f 5f       	subi	r18, 0xFF	; 255
    38a0:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38a2:	f9 99       	sbic	0x1f, 1	; 31
    38a4:	fe cf       	rjmp	.-4      	; 0x38a2 <_Z25read_configuration_eepromPh+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38a6:	32 bd       	out	0x22, r19	; 34
    38a8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38aa:	f8 9a       	sbi	0x1f, 0	; 31
    38ac:	20 b5       	in	r18, 0x20	; 32
    38ae:	20 95       	com	r18
    38b0:	20 93 3a 02 	sts	0x023A, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    38b4:	9c 01       	movw	r18, r24
    38b6:	2e 5f       	subi	r18, 0xFE	; 254
    38b8:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38ba:	f9 99       	sbic	0x1f, 1	; 31
    38bc:	fe cf       	rjmp	.-4      	; 0x38ba <_Z25read_configuration_eepromPh+0x30>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38be:	32 bd       	out	0x22, r19	; 34
    38c0:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38c2:	f8 9a       	sbi	0x1f, 0	; 31
    38c4:	20 b5       	in	r18, 0x20	; 32
    38c6:	20 95       	com	r18
    38c8:	20 93 39 02 	sts	0x0239, r18
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    38cc:	9c 01       	movw	r18, r24
    38ce:	2d 5f       	subi	r18, 0xFD	; 253
    38d0:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38d2:	f9 99       	sbic	0x1f, 1	; 31
    38d4:	fe cf       	rjmp	.-4      	; 0x38d2 <_Z25read_configuration_eepromPh+0x48>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38d6:	32 bd       	out	0x22, r19	; 34
    38d8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38da:	f8 9a       	sbi	0x1f, 0	; 31
    38dc:	20 b5       	in	r18, 0x20	; 32
    38de:	20 95       	com	r18
    38e0:	20 93 38 02 	sts	0x0238, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    38e4:	9c 01       	movw	r18, r24
    38e6:	2c 5f       	subi	r18, 0xFC	; 252
    38e8:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38ea:	f9 99       	sbic	0x1f, 1	; 31
    38ec:	fe cf       	rjmp	.-4      	; 0x38ea <_Z25read_configuration_eepromPh+0x60>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38ee:	32 bd       	out	0x22, r19	; 34
    38f0:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38f2:	f8 9a       	sbi	0x1f, 0	; 31
    38f4:	20 b5       	in	r18, 0x20	; 32
    38f6:	20 95       	com	r18
    38f8:	20 93 37 02 	sts	0x0237, r18
	return addr;
}
    38fc:	05 96       	adiw	r24, 0x05	; 5
    38fe:	08 95       	ret

00003900 <_Z18read_configurationv>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3900:	f9 99       	sbic	0x1f, 1	; 31
    3902:	fe cf       	rjmp	.-4      	; 0x3900 <_Z18read_configurationv>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	92 bd       	out	0x22, r25	; 34
    390a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    390c:	f8 9a       	sbi	0x1f, 0	; 31
    390e:	80 b5       	in	r24, 0x20	; 32
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    return mEEPROMAddress+1;
}
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    3910:	80 93 c3 01 	sts	0x01C3, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3914:	f9 99       	sbic	0x1f, 1	; 31
    3916:	fe cf       	rjmp	.-4      	; 0x3914 <_Z18read_configurationv+0x14>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	92 bd       	out	0x22, r25	; 34
    391e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3920:	f8 9a       	sbi	0x1f, 0	; 31
    3922:	80 b5       	in	r24, 0x20	; 32
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    return mEEPROMAddress+1;
}
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    3924:	80 93 c2 01 	sts	0x01C2, r24
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
	Ptr = read_confirmed_status(Ptr);
	return read_configuration_eeprom(Ptr);
    3928:	83 e0       	ldi	r24, 0x03	; 3
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	0c 94 45 1c 	jmp	0x388a	; 0x388a <_Z25read_configuration_eepromPh>

00003930 <main>:

//********** main *****************************************************
word prevPosition = 0;
int main(void)
{
	init();
    3930:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z4initv>
	//motor_set_duty( 0.25, 1 );
	set_dutyA( 0.25 );
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	80 e8       	ldi	r24, 0x80	; 128
    393a:	9e e3       	ldi	r25, 0x3E	; 62
    393c:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <_Z9set_dutyAf>
	set_dutyB( 0.50 );
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	9f e3       	ldi	r25, 0x3F	; 63
    3948:	0e 94 11 1a 	call	0x3422	; 0x3422 <_Z9set_dutyBf>

    while (1)
    {
    	// CAN Messaging will directly Start/Stop the motor.
		set_motor_direction( 1 );
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z19set_motor_directionh>
		delay(one_second); 
    3952:	60 e8       	ldi	r22, 0x80	; 128
    3954:	78 e3       	ldi	r23, 0x38	; 56
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 3e 1a 	call	0x347c	; 0x347c <_Z5delayl>
		set_motor_direction( 0 );		
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z19set_motor_directionh>
		delay(one_second); 
    3964:	60 e8       	ldi	r22, 0x80	; 128
    3966:	78 e3       	ldi	r23, 0x38	; 56
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0e 94 3e 1a 	call	0x347c	; 0x347c <_Z5delayl>
    3970:	ed cf       	rjmp	.-38     	; 0x394c <main+0x1c>

00003972 <__udivmodhi4>:
    3972:	aa 1b       	sub	r26, r26
    3974:	bb 1b       	sub	r27, r27
    3976:	51 e1       	ldi	r21, 0x11	; 17
    3978:	07 c0       	rjmp	.+14     	; 0x3988 <__udivmodhi4_ep>

0000397a <__udivmodhi4_loop>:
    397a:	aa 1f       	adc	r26, r26
    397c:	bb 1f       	adc	r27, r27
    397e:	a6 17       	cp	r26, r22
    3980:	b7 07       	cpc	r27, r23
    3982:	10 f0       	brcs	.+4      	; 0x3988 <__udivmodhi4_ep>
    3984:	a6 1b       	sub	r26, r22
    3986:	b7 0b       	sbc	r27, r23

00003988 <__udivmodhi4_ep>:
    3988:	88 1f       	adc	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	5a 95       	dec	r21
    398e:	a9 f7       	brne	.-22     	; 0x397a <__udivmodhi4_loop>
    3990:	80 95       	com	r24
    3992:	90 95       	com	r25
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	08 95       	ret

0000399a <__divmodhi4>:
    399a:	97 fb       	bst	r25, 7
    399c:	07 2e       	mov	r0, r23
    399e:	16 f4       	brtc	.+4      	; 0x39a4 <__divmodhi4+0xa>
    39a0:	00 94       	com	r0
    39a2:	07 d0       	rcall	.+14     	; 0x39b2 <__divmodhi4_neg1>
    39a4:	77 fd       	sbrc	r23, 7
    39a6:	09 d0       	rcall	.+18     	; 0x39ba <__divmodhi4_neg2>
    39a8:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__udivmodhi4>
    39ac:	07 fc       	sbrc	r0, 7
    39ae:	05 d0       	rcall	.+10     	; 0x39ba <__divmodhi4_neg2>
    39b0:	3e f4       	brtc	.+14     	; 0x39c0 <__divmodhi4_exit>

000039b2 <__divmodhi4_neg1>:
    39b2:	90 95       	com	r25
    39b4:	81 95       	neg	r24
    39b6:	9f 4f       	sbci	r25, 0xFF	; 255
    39b8:	08 95       	ret

000039ba <__divmodhi4_neg2>:
    39ba:	70 95       	com	r23
    39bc:	61 95       	neg	r22
    39be:	7f 4f       	sbci	r23, 0xFF	; 255

000039c0 <__divmodhi4_exit>:
    39c0:	08 95       	ret

000039c2 <__divmodsi4>:
    39c2:	05 2e       	mov	r0, r21
    39c4:	97 fb       	bst	r25, 7
    39c6:	1e f4       	brtc	.+6      	; 0x39ce <__divmodsi4+0xc>
    39c8:	00 94       	com	r0
    39ca:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__negsi2>
    39ce:	57 fd       	sbrc	r21, 7
    39d0:	07 d0       	rcall	.+14     	; 0x39e0 <__divmodsi4_neg2>
    39d2:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__udivmodsi4>
    39d6:	07 fc       	sbrc	r0, 7
    39d8:	03 d0       	rcall	.+6      	; 0x39e0 <__divmodsi4_neg2>
    39da:	4e f4       	brtc	.+18     	; 0x39ee <__divmodsi4_exit>
    39dc:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__negsi2>

000039e0 <__divmodsi4_neg2>:
    39e0:	50 95       	com	r21
    39e2:	40 95       	com	r20
    39e4:	30 95       	com	r19
    39e6:	21 95       	neg	r18
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	4f 4f       	sbci	r20, 0xFF	; 255
    39ec:	5f 4f       	sbci	r21, 0xFF	; 255

000039ee <__divmodsi4_exit>:
    39ee:	08 95       	ret

000039f0 <__negsi2>:
    39f0:	90 95       	com	r25
    39f2:	80 95       	com	r24
    39f4:	70 95       	com	r23
    39f6:	61 95       	neg	r22
    39f8:	7f 4f       	sbci	r23, 0xFF	; 255
    39fa:	8f 4f       	sbci	r24, 0xFF	; 255
    39fc:	9f 4f       	sbci	r25, 0xFF	; 255
    39fe:	08 95       	ret

00003a00 <__umulhisi3>:
    3a00:	a2 9f       	mul	r26, r18
    3a02:	b0 01       	movw	r22, r0
    3a04:	b3 9f       	mul	r27, r19
    3a06:	c0 01       	movw	r24, r0
    3a08:	a3 9f       	mul	r26, r19
    3a0a:	70 0d       	add	r23, r0
    3a0c:	81 1d       	adc	r24, r1
    3a0e:	11 24       	eor	r1, r1
    3a10:	91 1d       	adc	r25, r1
    3a12:	b2 9f       	mul	r27, r18
    3a14:	70 0d       	add	r23, r0
    3a16:	81 1d       	adc	r24, r1
    3a18:	11 24       	eor	r1, r1
    3a1a:	91 1d       	adc	r25, r1
    3a1c:	08 95       	ret

00003a1e <__udivmodsi4>:
    3a1e:	a1 e2       	ldi	r26, 0x21	; 33
    3a20:	1a 2e       	mov	r1, r26
    3a22:	aa 1b       	sub	r26, r26
    3a24:	bb 1b       	sub	r27, r27
    3a26:	fd 01       	movw	r30, r26
    3a28:	0d c0       	rjmp	.+26     	; 0x3a44 <__udivmodsi4_ep>

00003a2a <__udivmodsi4_loop>:
    3a2a:	aa 1f       	adc	r26, r26
    3a2c:	bb 1f       	adc	r27, r27
    3a2e:	ee 1f       	adc	r30, r30
    3a30:	ff 1f       	adc	r31, r31
    3a32:	a2 17       	cp	r26, r18
    3a34:	b3 07       	cpc	r27, r19
    3a36:	e4 07       	cpc	r30, r20
    3a38:	f5 07       	cpc	r31, r21
    3a3a:	20 f0       	brcs	.+8      	; 0x3a44 <__udivmodsi4_ep>
    3a3c:	a2 1b       	sub	r26, r18
    3a3e:	b3 0b       	sbc	r27, r19
    3a40:	e4 0b       	sbc	r30, r20
    3a42:	f5 0b       	sbc	r31, r21

00003a44 <__udivmodsi4_ep>:
    3a44:	66 1f       	adc	r22, r22
    3a46:	77 1f       	adc	r23, r23
    3a48:	88 1f       	adc	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	1a 94       	dec	r1
    3a4e:	69 f7       	brne	.-38     	; 0x3a2a <__udivmodsi4_loop>
    3a50:	60 95       	com	r22
    3a52:	70 95       	com	r23
    3a54:	80 95       	com	r24
    3a56:	90 95       	com	r25
    3a58:	9b 01       	movw	r18, r22
    3a5a:	ac 01       	movw	r20, r24
    3a5c:	bd 01       	movw	r22, r26
    3a5e:	cf 01       	movw	r24, r30
    3a60:	08 95       	ret

00003a62 <__subsf3>:
    3a62:	50 58       	subi	r21, 0x80	; 128

00003a64 <__addsf3>:
    3a64:	bb 27       	eor	r27, r27
    3a66:	aa 27       	eor	r26, r26
    3a68:	0e d0       	rcall	.+28     	; 0x3a86 <__addsf3x>
    3a6a:	b1 c1       	rjmp	.+866    	; 0x3dce <__fp_round>
    3a6c:	a2 d1       	rcall	.+836    	; 0x3db2 <__fp_pscA>
    3a6e:	30 f0       	brcs	.+12     	; 0x3a7c <__addsf3+0x18>
    3a70:	a7 d1       	rcall	.+846    	; 0x3dc0 <__fp_pscB>
    3a72:	20 f0       	brcs	.+8      	; 0x3a7c <__addsf3+0x18>
    3a74:	31 f4       	brne	.+12     	; 0x3a82 <__addsf3+0x1e>
    3a76:	9f 3f       	cpi	r25, 0xFF	; 255
    3a78:	11 f4       	brne	.+4      	; 0x3a7e <__addsf3+0x1a>
    3a7a:	1e f4       	brtc	.+6      	; 0x3a82 <__addsf3+0x1e>
    3a7c:	97 c1       	rjmp	.+814    	; 0x3dac <__fp_nan>
    3a7e:	0e f4       	brtc	.+2      	; 0x3a82 <__addsf3+0x1e>
    3a80:	e0 95       	com	r30
    3a82:	e7 fb       	bst	r30, 7
    3a84:	64 c1       	rjmp	.+712    	; 0x3d4e <__fp_inf>

00003a86 <__addsf3x>:
    3a86:	e9 2f       	mov	r30, r25
    3a88:	b3 d1       	rcall	.+870    	; 0x3df0 <__fp_split3>
    3a8a:	80 f3       	brcs	.-32     	; 0x3a6c <__addsf3+0x8>
    3a8c:	ba 17       	cp	r27, r26
    3a8e:	62 07       	cpc	r22, r18
    3a90:	73 07       	cpc	r23, r19
    3a92:	84 07       	cpc	r24, r20
    3a94:	95 07       	cpc	r25, r21
    3a96:	18 f0       	brcs	.+6      	; 0x3a9e <__addsf3x+0x18>
    3a98:	71 f4       	brne	.+28     	; 0x3ab6 <__addsf3x+0x30>
    3a9a:	9e f5       	brtc	.+102    	; 0x3b02 <__addsf3x+0x7c>
    3a9c:	e2 c1       	rjmp	.+964    	; 0x3e62 <__fp_zero>
    3a9e:	0e f4       	brtc	.+2      	; 0x3aa2 <__addsf3x+0x1c>
    3aa0:	e0 95       	com	r30
    3aa2:	0b 2e       	mov	r0, r27
    3aa4:	ba 2f       	mov	r27, r26
    3aa6:	a0 2d       	mov	r26, r0
    3aa8:	0b 01       	movw	r0, r22
    3aaa:	b9 01       	movw	r22, r18
    3aac:	90 01       	movw	r18, r0
    3aae:	0c 01       	movw	r0, r24
    3ab0:	ca 01       	movw	r24, r20
    3ab2:	a0 01       	movw	r20, r0
    3ab4:	11 24       	eor	r1, r1
    3ab6:	ff 27       	eor	r31, r31
    3ab8:	59 1b       	sub	r21, r25
    3aba:	99 f0       	breq	.+38     	; 0x3ae2 <__addsf3x+0x5c>
    3abc:	59 3f       	cpi	r21, 0xF9	; 249
    3abe:	50 f4       	brcc	.+20     	; 0x3ad4 <__addsf3x+0x4e>
    3ac0:	50 3e       	cpi	r21, 0xE0	; 224
    3ac2:	68 f1       	brcs	.+90     	; 0x3b1e <__addsf3x+0x98>
    3ac4:	1a 16       	cp	r1, r26
    3ac6:	f0 40       	sbci	r31, 0x00	; 0
    3ac8:	a2 2f       	mov	r26, r18
    3aca:	23 2f       	mov	r18, r19
    3acc:	34 2f       	mov	r19, r20
    3ace:	44 27       	eor	r20, r20
    3ad0:	58 5f       	subi	r21, 0xF8	; 248
    3ad2:	f3 cf       	rjmp	.-26     	; 0x3aba <__addsf3x+0x34>
    3ad4:	46 95       	lsr	r20
    3ad6:	37 95       	ror	r19
    3ad8:	27 95       	ror	r18
    3ada:	a7 95       	ror	r26
    3adc:	f0 40       	sbci	r31, 0x00	; 0
    3ade:	53 95       	inc	r21
    3ae0:	c9 f7       	brne	.-14     	; 0x3ad4 <__addsf3x+0x4e>
    3ae2:	7e f4       	brtc	.+30     	; 0x3b02 <__addsf3x+0x7c>
    3ae4:	1f 16       	cp	r1, r31
    3ae6:	ba 0b       	sbc	r27, r26
    3ae8:	62 0b       	sbc	r22, r18
    3aea:	73 0b       	sbc	r23, r19
    3aec:	84 0b       	sbc	r24, r20
    3aee:	ba f0       	brmi	.+46     	; 0x3b1e <__addsf3x+0x98>
    3af0:	91 50       	subi	r25, 0x01	; 1
    3af2:	a1 f0       	breq	.+40     	; 0x3b1c <__addsf3x+0x96>
    3af4:	ff 0f       	add	r31, r31
    3af6:	bb 1f       	adc	r27, r27
    3af8:	66 1f       	adc	r22, r22
    3afa:	77 1f       	adc	r23, r23
    3afc:	88 1f       	adc	r24, r24
    3afe:	c2 f7       	brpl	.-16     	; 0x3af0 <__addsf3x+0x6a>
    3b00:	0e c0       	rjmp	.+28     	; 0x3b1e <__addsf3x+0x98>
    3b02:	ba 0f       	add	r27, r26
    3b04:	62 1f       	adc	r22, r18
    3b06:	73 1f       	adc	r23, r19
    3b08:	84 1f       	adc	r24, r20
    3b0a:	48 f4       	brcc	.+18     	; 0x3b1e <__addsf3x+0x98>
    3b0c:	87 95       	ror	r24
    3b0e:	77 95       	ror	r23
    3b10:	67 95       	ror	r22
    3b12:	b7 95       	ror	r27
    3b14:	f7 95       	ror	r31
    3b16:	9e 3f       	cpi	r25, 0xFE	; 254
    3b18:	08 f0       	brcs	.+2      	; 0x3b1c <__addsf3x+0x96>
    3b1a:	b3 cf       	rjmp	.-154    	; 0x3a82 <__addsf3+0x1e>
    3b1c:	93 95       	inc	r25
    3b1e:	88 0f       	add	r24, r24
    3b20:	08 f0       	brcs	.+2      	; 0x3b24 <__addsf3x+0x9e>
    3b22:	99 27       	eor	r25, r25
    3b24:	ee 0f       	add	r30, r30
    3b26:	97 95       	ror	r25
    3b28:	87 95       	ror	r24
    3b2a:	08 95       	ret

00003b2c <ceil>:
    3b2c:	83 d1       	rcall	.+774    	; 0x3e34 <__fp_trunc>
    3b2e:	80 f0       	brcs	.+32     	; 0x3b50 <ceil+0x24>
    3b30:	9f 37       	cpi	r25, 0x7F	; 127
    3b32:	40 f4       	brcc	.+16     	; 0x3b44 <ceil+0x18>
    3b34:	91 11       	cpse	r25, r1
    3b36:	0e f4       	brtc	.+2      	; 0x3b3a <ceil+0xe>
    3b38:	95 c1       	rjmp	.+810    	; 0x3e64 <__fp_szero>
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	80 e8       	ldi	r24, 0x80	; 128
    3b40:	9f e3       	ldi	r25, 0x3F	; 63
    3b42:	08 95       	ret
    3b44:	26 f0       	brts	.+8      	; 0x3b4e <ceil+0x22>
    3b46:	1b 16       	cp	r1, r27
    3b48:	61 1d       	adc	r22, r1
    3b4a:	71 1d       	adc	r23, r1
    3b4c:	81 1d       	adc	r24, r1
    3b4e:	05 c1       	rjmp	.+522    	; 0x3d5a <__fp_mintl>
    3b50:	1f c1       	rjmp	.+574    	; 0x3d90 <__fp_mpack>

00003b52 <__cmpsf2>:
    3b52:	d9 d0       	rcall	.+434    	; 0x3d06 <__fp_cmp>
    3b54:	08 f4       	brcc	.+2      	; 0x3b58 <__cmpsf2+0x6>
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	08 95       	ret

00003b5a <__divsf3>:
    3b5a:	0c d0       	rcall	.+24     	; 0x3b74 <__divsf3x>
    3b5c:	38 c1       	rjmp	.+624    	; 0x3dce <__fp_round>
    3b5e:	30 d1       	rcall	.+608    	; 0x3dc0 <__fp_pscB>
    3b60:	40 f0       	brcs	.+16     	; 0x3b72 <__divsf3+0x18>
    3b62:	27 d1       	rcall	.+590    	; 0x3db2 <__fp_pscA>
    3b64:	30 f0       	brcs	.+12     	; 0x3b72 <__divsf3+0x18>
    3b66:	21 f4       	brne	.+8      	; 0x3b70 <__divsf3+0x16>
    3b68:	5f 3f       	cpi	r21, 0xFF	; 255
    3b6a:	19 f0       	breq	.+6      	; 0x3b72 <__divsf3+0x18>
    3b6c:	f0 c0       	rjmp	.+480    	; 0x3d4e <__fp_inf>
    3b6e:	51 11       	cpse	r21, r1
    3b70:	79 c1       	rjmp	.+754    	; 0x3e64 <__fp_szero>
    3b72:	1c c1       	rjmp	.+568    	; 0x3dac <__fp_nan>

00003b74 <__divsf3x>:
    3b74:	3d d1       	rcall	.+634    	; 0x3df0 <__fp_split3>
    3b76:	98 f3       	brcs	.-26     	; 0x3b5e <__divsf3+0x4>

00003b78 <__divsf3_pse>:
    3b78:	99 23       	and	r25, r25
    3b7a:	c9 f3       	breq	.-14     	; 0x3b6e <__divsf3+0x14>
    3b7c:	55 23       	and	r21, r21
    3b7e:	b1 f3       	breq	.-20     	; 0x3b6c <__divsf3+0x12>
    3b80:	95 1b       	sub	r25, r21
    3b82:	55 0b       	sbc	r21, r21
    3b84:	bb 27       	eor	r27, r27
    3b86:	aa 27       	eor	r26, r26
    3b88:	62 17       	cp	r22, r18
    3b8a:	73 07       	cpc	r23, r19
    3b8c:	84 07       	cpc	r24, r20
    3b8e:	38 f0       	brcs	.+14     	; 0x3b9e <__divsf3_pse+0x26>
    3b90:	9f 5f       	subi	r25, 0xFF	; 255
    3b92:	5f 4f       	sbci	r21, 0xFF	; 255
    3b94:	22 0f       	add	r18, r18
    3b96:	33 1f       	adc	r19, r19
    3b98:	44 1f       	adc	r20, r20
    3b9a:	aa 1f       	adc	r26, r26
    3b9c:	a9 f3       	breq	.-22     	; 0x3b88 <__divsf3_pse+0x10>
    3b9e:	33 d0       	rcall	.+102    	; 0x3c06 <__divsf3_pse+0x8e>
    3ba0:	0e 2e       	mov	r0, r30
    3ba2:	3a f0       	brmi	.+14     	; 0x3bb2 <__divsf3_pse+0x3a>
    3ba4:	e0 e8       	ldi	r30, 0x80	; 128
    3ba6:	30 d0       	rcall	.+96     	; 0x3c08 <__divsf3_pse+0x90>
    3ba8:	91 50       	subi	r25, 0x01	; 1
    3baa:	50 40       	sbci	r21, 0x00	; 0
    3bac:	e6 95       	lsr	r30
    3bae:	00 1c       	adc	r0, r0
    3bb0:	ca f7       	brpl	.-14     	; 0x3ba4 <__divsf3_pse+0x2c>
    3bb2:	29 d0       	rcall	.+82     	; 0x3c06 <__divsf3_pse+0x8e>
    3bb4:	fe 2f       	mov	r31, r30
    3bb6:	27 d0       	rcall	.+78     	; 0x3c06 <__divsf3_pse+0x8e>
    3bb8:	66 0f       	add	r22, r22
    3bba:	77 1f       	adc	r23, r23
    3bbc:	88 1f       	adc	r24, r24
    3bbe:	bb 1f       	adc	r27, r27
    3bc0:	26 17       	cp	r18, r22
    3bc2:	37 07       	cpc	r19, r23
    3bc4:	48 07       	cpc	r20, r24
    3bc6:	ab 07       	cpc	r26, r27
    3bc8:	b0 e8       	ldi	r27, 0x80	; 128
    3bca:	09 f0       	breq	.+2      	; 0x3bce <__divsf3_pse+0x56>
    3bcc:	bb 0b       	sbc	r27, r27
    3bce:	80 2d       	mov	r24, r0
    3bd0:	bf 01       	movw	r22, r30
    3bd2:	ff 27       	eor	r31, r31
    3bd4:	93 58       	subi	r25, 0x83	; 131
    3bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd8:	2a f0       	brmi	.+10     	; 0x3be4 <__divsf3_pse+0x6c>
    3bda:	9e 3f       	cpi	r25, 0xFE	; 254
    3bdc:	51 05       	cpc	r21, r1
    3bde:	68 f0       	brcs	.+26     	; 0x3bfa <__divsf3_pse+0x82>
    3be0:	b6 c0       	rjmp	.+364    	; 0x3d4e <__fp_inf>
    3be2:	40 c1       	rjmp	.+640    	; 0x3e64 <__fp_szero>
    3be4:	5f 3f       	cpi	r21, 0xFF	; 255
    3be6:	ec f3       	brlt	.-6      	; 0x3be2 <__divsf3_pse+0x6a>
    3be8:	98 3e       	cpi	r25, 0xE8	; 232
    3bea:	dc f3       	brlt	.-10     	; 0x3be2 <__divsf3_pse+0x6a>
    3bec:	86 95       	lsr	r24
    3bee:	77 95       	ror	r23
    3bf0:	67 95       	ror	r22
    3bf2:	b7 95       	ror	r27
    3bf4:	f7 95       	ror	r31
    3bf6:	9f 5f       	subi	r25, 0xFF	; 255
    3bf8:	c9 f7       	brne	.-14     	; 0x3bec <__divsf3_pse+0x74>
    3bfa:	88 0f       	add	r24, r24
    3bfc:	91 1d       	adc	r25, r1
    3bfe:	96 95       	lsr	r25
    3c00:	87 95       	ror	r24
    3c02:	97 f9       	bld	r25, 7
    3c04:	08 95       	ret
    3c06:	e1 e0       	ldi	r30, 0x01	; 1
    3c08:	66 0f       	add	r22, r22
    3c0a:	77 1f       	adc	r23, r23
    3c0c:	88 1f       	adc	r24, r24
    3c0e:	bb 1f       	adc	r27, r27
    3c10:	62 17       	cp	r22, r18
    3c12:	73 07       	cpc	r23, r19
    3c14:	84 07       	cpc	r24, r20
    3c16:	ba 07       	cpc	r27, r26
    3c18:	20 f0       	brcs	.+8      	; 0x3c22 <__divsf3_pse+0xaa>
    3c1a:	62 1b       	sub	r22, r18
    3c1c:	73 0b       	sbc	r23, r19
    3c1e:	84 0b       	sbc	r24, r20
    3c20:	ba 0b       	sbc	r27, r26
    3c22:	ee 1f       	adc	r30, r30
    3c24:	88 f7       	brcc	.-30     	; 0x3c08 <__divsf3_pse+0x90>
    3c26:	e0 95       	com	r30
    3c28:	08 95       	ret

00003c2a <__fixsfsi>:
    3c2a:	04 d0       	rcall	.+8      	; 0x3c34 <__fixunssfsi>
    3c2c:	68 94       	set
    3c2e:	b1 11       	cpse	r27, r1
    3c30:	19 c1       	rjmp	.+562    	; 0x3e64 <__fp_szero>
    3c32:	08 95       	ret

00003c34 <__fixunssfsi>:
    3c34:	e5 d0       	rcall	.+458    	; 0x3e00 <__fp_splitA>
    3c36:	88 f0       	brcs	.+34     	; 0x3c5a <__fixunssfsi+0x26>
    3c38:	9f 57       	subi	r25, 0x7F	; 127
    3c3a:	90 f0       	brcs	.+36     	; 0x3c60 <__fixunssfsi+0x2c>
    3c3c:	b9 2f       	mov	r27, r25
    3c3e:	99 27       	eor	r25, r25
    3c40:	b7 51       	subi	r27, 0x17	; 23
    3c42:	a0 f0       	brcs	.+40     	; 0x3c6c <__fixunssfsi+0x38>
    3c44:	d1 f0       	breq	.+52     	; 0x3c7a <__fixunssfsi+0x46>
    3c46:	66 0f       	add	r22, r22
    3c48:	77 1f       	adc	r23, r23
    3c4a:	88 1f       	adc	r24, r24
    3c4c:	99 1f       	adc	r25, r25
    3c4e:	1a f0       	brmi	.+6      	; 0x3c56 <__fixunssfsi+0x22>
    3c50:	ba 95       	dec	r27
    3c52:	c9 f7       	brne	.-14     	; 0x3c46 <__fixunssfsi+0x12>
    3c54:	12 c0       	rjmp	.+36     	; 0x3c7a <__fixunssfsi+0x46>
    3c56:	b1 30       	cpi	r27, 0x01	; 1
    3c58:	81 f0       	breq	.+32     	; 0x3c7a <__fixunssfsi+0x46>
    3c5a:	03 d1       	rcall	.+518    	; 0x3e62 <__fp_zero>
    3c5c:	b1 e0       	ldi	r27, 0x01	; 1
    3c5e:	08 95       	ret
    3c60:	00 c1       	rjmp	.+512    	; 0x3e62 <__fp_zero>
    3c62:	67 2f       	mov	r22, r23
    3c64:	78 2f       	mov	r23, r24
    3c66:	88 27       	eor	r24, r24
    3c68:	b8 5f       	subi	r27, 0xF8	; 248
    3c6a:	39 f0       	breq	.+14     	; 0x3c7a <__fixunssfsi+0x46>
    3c6c:	b9 3f       	cpi	r27, 0xF9	; 249
    3c6e:	cc f3       	brlt	.-14     	; 0x3c62 <__fixunssfsi+0x2e>
    3c70:	86 95       	lsr	r24
    3c72:	77 95       	ror	r23
    3c74:	67 95       	ror	r22
    3c76:	b3 95       	inc	r27
    3c78:	d9 f7       	brne	.-10     	; 0x3c70 <__fixunssfsi+0x3c>
    3c7a:	3e f4       	brtc	.+14     	; 0x3c8a <__fixunssfsi+0x56>
    3c7c:	90 95       	com	r25
    3c7e:	80 95       	com	r24
    3c80:	70 95       	com	r23
    3c82:	61 95       	neg	r22
    3c84:	7f 4f       	sbci	r23, 0xFF	; 255
    3c86:	8f 4f       	sbci	r24, 0xFF	; 255
    3c88:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8a:	08 95       	ret

00003c8c <__floatunsisf>:
    3c8c:	e8 94       	clt
    3c8e:	09 c0       	rjmp	.+18     	; 0x3ca2 <__floatsisf+0x12>

00003c90 <__floatsisf>:
    3c90:	97 fb       	bst	r25, 7
    3c92:	3e f4       	brtc	.+14     	; 0x3ca2 <__floatsisf+0x12>
    3c94:	90 95       	com	r25
    3c96:	80 95       	com	r24
    3c98:	70 95       	com	r23
    3c9a:	61 95       	neg	r22
    3c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca2:	99 23       	and	r25, r25
    3ca4:	a9 f0       	breq	.+42     	; 0x3cd0 <__floatsisf+0x40>
    3ca6:	f9 2f       	mov	r31, r25
    3ca8:	96 e9       	ldi	r25, 0x96	; 150
    3caa:	bb 27       	eor	r27, r27
    3cac:	93 95       	inc	r25
    3cae:	f6 95       	lsr	r31
    3cb0:	87 95       	ror	r24
    3cb2:	77 95       	ror	r23
    3cb4:	67 95       	ror	r22
    3cb6:	b7 95       	ror	r27
    3cb8:	f1 11       	cpse	r31, r1
    3cba:	f8 cf       	rjmp	.-16     	; 0x3cac <__floatsisf+0x1c>
    3cbc:	fa f4       	brpl	.+62     	; 0x3cfc <__floatsisf+0x6c>
    3cbe:	bb 0f       	add	r27, r27
    3cc0:	11 f4       	brne	.+4      	; 0x3cc6 <__floatsisf+0x36>
    3cc2:	60 ff       	sbrs	r22, 0
    3cc4:	1b c0       	rjmp	.+54     	; 0x3cfc <__floatsisf+0x6c>
    3cc6:	6f 5f       	subi	r22, 0xFF	; 255
    3cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cca:	8f 4f       	sbci	r24, 0xFF	; 255
    3ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cce:	16 c0       	rjmp	.+44     	; 0x3cfc <__floatsisf+0x6c>
    3cd0:	88 23       	and	r24, r24
    3cd2:	11 f0       	breq	.+4      	; 0x3cd8 <__floatsisf+0x48>
    3cd4:	96 e9       	ldi	r25, 0x96	; 150
    3cd6:	11 c0       	rjmp	.+34     	; 0x3cfa <__floatsisf+0x6a>
    3cd8:	77 23       	and	r23, r23
    3cda:	21 f0       	breq	.+8      	; 0x3ce4 <__floatsisf+0x54>
    3cdc:	9e e8       	ldi	r25, 0x8E	; 142
    3cde:	87 2f       	mov	r24, r23
    3ce0:	76 2f       	mov	r23, r22
    3ce2:	05 c0       	rjmp	.+10     	; 0x3cee <__floatsisf+0x5e>
    3ce4:	66 23       	and	r22, r22
    3ce6:	71 f0       	breq	.+28     	; 0x3d04 <__floatsisf+0x74>
    3ce8:	96 e8       	ldi	r25, 0x86	; 134
    3cea:	86 2f       	mov	r24, r22
    3cec:	70 e0       	ldi	r23, 0x00	; 0
    3cee:	60 e0       	ldi	r22, 0x00	; 0
    3cf0:	2a f0       	brmi	.+10     	; 0x3cfc <__floatsisf+0x6c>
    3cf2:	9a 95       	dec	r25
    3cf4:	66 0f       	add	r22, r22
    3cf6:	77 1f       	adc	r23, r23
    3cf8:	88 1f       	adc	r24, r24
    3cfa:	da f7       	brpl	.-10     	; 0x3cf2 <__floatsisf+0x62>
    3cfc:	88 0f       	add	r24, r24
    3cfe:	96 95       	lsr	r25
    3d00:	87 95       	ror	r24
    3d02:	97 f9       	bld	r25, 7
    3d04:	08 95       	ret

00003d06 <__fp_cmp>:
    3d06:	99 0f       	add	r25, r25
    3d08:	00 08       	sbc	r0, r0
    3d0a:	55 0f       	add	r21, r21
    3d0c:	aa 0b       	sbc	r26, r26
    3d0e:	e0 e8       	ldi	r30, 0x80	; 128
    3d10:	fe ef       	ldi	r31, 0xFE	; 254
    3d12:	16 16       	cp	r1, r22
    3d14:	17 06       	cpc	r1, r23
    3d16:	e8 07       	cpc	r30, r24
    3d18:	f9 07       	cpc	r31, r25
    3d1a:	c0 f0       	brcs	.+48     	; 0x3d4c <__fp_cmp+0x46>
    3d1c:	12 16       	cp	r1, r18
    3d1e:	13 06       	cpc	r1, r19
    3d20:	e4 07       	cpc	r30, r20
    3d22:	f5 07       	cpc	r31, r21
    3d24:	98 f0       	brcs	.+38     	; 0x3d4c <__fp_cmp+0x46>
    3d26:	62 1b       	sub	r22, r18
    3d28:	73 0b       	sbc	r23, r19
    3d2a:	84 0b       	sbc	r24, r20
    3d2c:	95 0b       	sbc	r25, r21
    3d2e:	39 f4       	brne	.+14     	; 0x3d3e <__fp_cmp+0x38>
    3d30:	0a 26       	eor	r0, r26
    3d32:	61 f0       	breq	.+24     	; 0x3d4c <__fp_cmp+0x46>
    3d34:	23 2b       	or	r18, r19
    3d36:	24 2b       	or	r18, r20
    3d38:	25 2b       	or	r18, r21
    3d3a:	21 f4       	brne	.+8      	; 0x3d44 <__fp_cmp+0x3e>
    3d3c:	08 95       	ret
    3d3e:	0a 26       	eor	r0, r26
    3d40:	09 f4       	brne	.+2      	; 0x3d44 <__fp_cmp+0x3e>
    3d42:	a1 40       	sbci	r26, 0x01	; 1
    3d44:	a6 95       	lsr	r26
    3d46:	8f ef       	ldi	r24, 0xFF	; 255
    3d48:	81 1d       	adc	r24, r1
    3d4a:	81 1d       	adc	r24, r1
    3d4c:	08 95       	ret

00003d4e <__fp_inf>:
    3d4e:	97 f9       	bld	r25, 7
    3d50:	9f 67       	ori	r25, 0x7F	; 127
    3d52:	80 e8       	ldi	r24, 0x80	; 128
    3d54:	70 e0       	ldi	r23, 0x00	; 0
    3d56:	60 e0       	ldi	r22, 0x00	; 0
    3d58:	08 95       	ret

00003d5a <__fp_mintl>:
    3d5a:	88 23       	and	r24, r24
    3d5c:	71 f4       	brne	.+28     	; 0x3d7a <__fp_mintl+0x20>
    3d5e:	77 23       	and	r23, r23
    3d60:	21 f0       	breq	.+8      	; 0x3d6a <__fp_mintl+0x10>
    3d62:	98 50       	subi	r25, 0x08	; 8
    3d64:	87 2b       	or	r24, r23
    3d66:	76 2f       	mov	r23, r22
    3d68:	07 c0       	rjmp	.+14     	; 0x3d78 <__fp_mintl+0x1e>
    3d6a:	66 23       	and	r22, r22
    3d6c:	11 f4       	brne	.+4      	; 0x3d72 <__fp_mintl+0x18>
    3d6e:	99 27       	eor	r25, r25
    3d70:	0d c0       	rjmp	.+26     	; 0x3d8c <__fp_mintl+0x32>
    3d72:	90 51       	subi	r25, 0x10	; 16
    3d74:	86 2b       	or	r24, r22
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	60 e0       	ldi	r22, 0x00	; 0
    3d7a:	2a f0       	brmi	.+10     	; 0x3d86 <__fp_mintl+0x2c>
    3d7c:	9a 95       	dec	r25
    3d7e:	66 0f       	add	r22, r22
    3d80:	77 1f       	adc	r23, r23
    3d82:	88 1f       	adc	r24, r24
    3d84:	da f7       	brpl	.-10     	; 0x3d7c <__fp_mintl+0x22>
    3d86:	88 0f       	add	r24, r24
    3d88:	96 95       	lsr	r25
    3d8a:	87 95       	ror	r24
    3d8c:	97 f9       	bld	r25, 7
    3d8e:	08 95       	ret

00003d90 <__fp_mpack>:
    3d90:	9f 3f       	cpi	r25, 0xFF	; 255
    3d92:	31 f0       	breq	.+12     	; 0x3da0 <__fp_mpack_finite+0xc>

00003d94 <__fp_mpack_finite>:
    3d94:	91 50       	subi	r25, 0x01	; 1
    3d96:	20 f4       	brcc	.+8      	; 0x3da0 <__fp_mpack_finite+0xc>
    3d98:	87 95       	ror	r24
    3d9a:	77 95       	ror	r23
    3d9c:	67 95       	ror	r22
    3d9e:	b7 95       	ror	r27
    3da0:	88 0f       	add	r24, r24
    3da2:	91 1d       	adc	r25, r1
    3da4:	96 95       	lsr	r25
    3da6:	87 95       	ror	r24
    3da8:	97 f9       	bld	r25, 7
    3daa:	08 95       	ret

00003dac <__fp_nan>:
    3dac:	9f ef       	ldi	r25, 0xFF	; 255
    3dae:	80 ec       	ldi	r24, 0xC0	; 192
    3db0:	08 95       	ret

00003db2 <__fp_pscA>:
    3db2:	00 24       	eor	r0, r0
    3db4:	0a 94       	dec	r0
    3db6:	16 16       	cp	r1, r22
    3db8:	17 06       	cpc	r1, r23
    3dba:	18 06       	cpc	r1, r24
    3dbc:	09 06       	cpc	r0, r25
    3dbe:	08 95       	ret

00003dc0 <__fp_pscB>:
    3dc0:	00 24       	eor	r0, r0
    3dc2:	0a 94       	dec	r0
    3dc4:	12 16       	cp	r1, r18
    3dc6:	13 06       	cpc	r1, r19
    3dc8:	14 06       	cpc	r1, r20
    3dca:	05 06       	cpc	r0, r21
    3dcc:	08 95       	ret

00003dce <__fp_round>:
    3dce:	09 2e       	mov	r0, r25
    3dd0:	03 94       	inc	r0
    3dd2:	00 0c       	add	r0, r0
    3dd4:	11 f4       	brne	.+4      	; 0x3dda <__fp_round+0xc>
    3dd6:	88 23       	and	r24, r24
    3dd8:	52 f0       	brmi	.+20     	; 0x3dee <__fp_round+0x20>
    3dda:	bb 0f       	add	r27, r27
    3ddc:	40 f4       	brcc	.+16     	; 0x3dee <__fp_round+0x20>
    3dde:	bf 2b       	or	r27, r31
    3de0:	11 f4       	brne	.+4      	; 0x3de6 <__fp_round+0x18>
    3de2:	60 ff       	sbrs	r22, 0
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <__fp_round+0x20>
    3de6:	6f 5f       	subi	r22, 0xFF	; 255
    3de8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dea:	8f 4f       	sbci	r24, 0xFF	; 255
    3dec:	9f 4f       	sbci	r25, 0xFF	; 255
    3dee:	08 95       	ret

00003df0 <__fp_split3>:
    3df0:	57 fd       	sbrc	r21, 7
    3df2:	90 58       	subi	r25, 0x80	; 128
    3df4:	44 0f       	add	r20, r20
    3df6:	55 1f       	adc	r21, r21
    3df8:	59 f0       	breq	.+22     	; 0x3e10 <__fp_splitA+0x10>
    3dfa:	5f 3f       	cpi	r21, 0xFF	; 255
    3dfc:	71 f0       	breq	.+28     	; 0x3e1a <__fp_splitA+0x1a>
    3dfe:	47 95       	ror	r20

00003e00 <__fp_splitA>:
    3e00:	88 0f       	add	r24, r24
    3e02:	97 fb       	bst	r25, 7
    3e04:	99 1f       	adc	r25, r25
    3e06:	61 f0       	breq	.+24     	; 0x3e20 <__fp_splitA+0x20>
    3e08:	9f 3f       	cpi	r25, 0xFF	; 255
    3e0a:	79 f0       	breq	.+30     	; 0x3e2a <__fp_splitA+0x2a>
    3e0c:	87 95       	ror	r24
    3e0e:	08 95       	ret
    3e10:	12 16       	cp	r1, r18
    3e12:	13 06       	cpc	r1, r19
    3e14:	14 06       	cpc	r1, r20
    3e16:	55 1f       	adc	r21, r21
    3e18:	f2 cf       	rjmp	.-28     	; 0x3dfe <__fp_split3+0xe>
    3e1a:	46 95       	lsr	r20
    3e1c:	f1 df       	rcall	.-30     	; 0x3e00 <__fp_splitA>
    3e1e:	08 c0       	rjmp	.+16     	; 0x3e30 <__fp_splitA+0x30>
    3e20:	16 16       	cp	r1, r22
    3e22:	17 06       	cpc	r1, r23
    3e24:	18 06       	cpc	r1, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	f1 cf       	rjmp	.-30     	; 0x3e0c <__fp_splitA+0xc>
    3e2a:	86 95       	lsr	r24
    3e2c:	71 05       	cpc	r23, r1
    3e2e:	61 05       	cpc	r22, r1
    3e30:	08 94       	sec
    3e32:	08 95       	ret

00003e34 <__fp_trunc>:
    3e34:	e5 df       	rcall	.-54     	; 0x3e00 <__fp_splitA>
    3e36:	a0 f0       	brcs	.+40     	; 0x3e60 <__fp_trunc+0x2c>
    3e38:	be e7       	ldi	r27, 0x7E	; 126
    3e3a:	b9 17       	cp	r27, r25
    3e3c:	88 f4       	brcc	.+34     	; 0x3e60 <__fp_trunc+0x2c>
    3e3e:	bb 27       	eor	r27, r27
    3e40:	9f 38       	cpi	r25, 0x8F	; 143
    3e42:	60 f4       	brcc	.+24     	; 0x3e5c <__fp_trunc+0x28>
    3e44:	16 16       	cp	r1, r22
    3e46:	b1 1d       	adc	r27, r1
    3e48:	67 2f       	mov	r22, r23
    3e4a:	78 2f       	mov	r23, r24
    3e4c:	88 27       	eor	r24, r24
    3e4e:	98 5f       	subi	r25, 0xF8	; 248
    3e50:	f7 cf       	rjmp	.-18     	; 0x3e40 <__fp_trunc+0xc>
    3e52:	86 95       	lsr	r24
    3e54:	77 95       	ror	r23
    3e56:	67 95       	ror	r22
    3e58:	b1 1d       	adc	r27, r1
    3e5a:	93 95       	inc	r25
    3e5c:	96 39       	cpi	r25, 0x96	; 150
    3e5e:	c8 f3       	brcs	.-14     	; 0x3e52 <__fp_trunc+0x1e>
    3e60:	08 95       	ret

00003e62 <__fp_zero>:
    3e62:	e8 94       	clt

00003e64 <__fp_szero>:
    3e64:	bb 27       	eor	r27, r27
    3e66:	66 27       	eor	r22, r22
    3e68:	77 27       	eor	r23, r23
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	97 f9       	bld	r25, 7
    3e6e:	08 95       	ret

00003e70 <__gesf2>:
    3e70:	4a df       	rcall	.-364    	; 0x3d06 <__fp_cmp>
    3e72:	08 f4       	brcc	.+2      	; 0x3e76 <__gesf2+0x6>
    3e74:	8f ef       	ldi	r24, 0xFF	; 255
    3e76:	08 95       	ret

00003e78 <__mulsf3>:
    3e78:	0b d0       	rcall	.+22     	; 0x3e90 <__mulsf3x>
    3e7a:	a9 cf       	rjmp	.-174    	; 0x3dce <__fp_round>
    3e7c:	9a df       	rcall	.-204    	; 0x3db2 <__fp_pscA>
    3e7e:	28 f0       	brcs	.+10     	; 0x3e8a <__mulsf3+0x12>
    3e80:	9f df       	rcall	.-194    	; 0x3dc0 <__fp_pscB>
    3e82:	18 f0       	brcs	.+6      	; 0x3e8a <__mulsf3+0x12>
    3e84:	95 23       	and	r25, r21
    3e86:	09 f0       	breq	.+2      	; 0x3e8a <__mulsf3+0x12>
    3e88:	62 cf       	rjmp	.-316    	; 0x3d4e <__fp_inf>
    3e8a:	90 cf       	rjmp	.-224    	; 0x3dac <__fp_nan>
    3e8c:	11 24       	eor	r1, r1
    3e8e:	ea cf       	rjmp	.-44     	; 0x3e64 <__fp_szero>

00003e90 <__mulsf3x>:
    3e90:	af df       	rcall	.-162    	; 0x3df0 <__fp_split3>
    3e92:	a0 f3       	brcs	.-24     	; 0x3e7c <__mulsf3+0x4>

00003e94 <__mulsf3_pse>:
    3e94:	95 9f       	mul	r25, r21
    3e96:	d1 f3       	breq	.-12     	; 0x3e8c <__mulsf3+0x14>
    3e98:	95 0f       	add	r25, r21
    3e9a:	50 e0       	ldi	r21, 0x00	; 0
    3e9c:	55 1f       	adc	r21, r21
    3e9e:	62 9f       	mul	r22, r18
    3ea0:	f0 01       	movw	r30, r0
    3ea2:	72 9f       	mul	r23, r18
    3ea4:	bb 27       	eor	r27, r27
    3ea6:	f0 0d       	add	r31, r0
    3ea8:	b1 1d       	adc	r27, r1
    3eaa:	63 9f       	mul	r22, r19
    3eac:	aa 27       	eor	r26, r26
    3eae:	f0 0d       	add	r31, r0
    3eb0:	b1 1d       	adc	r27, r1
    3eb2:	aa 1f       	adc	r26, r26
    3eb4:	64 9f       	mul	r22, r20
    3eb6:	66 27       	eor	r22, r22
    3eb8:	b0 0d       	add	r27, r0
    3eba:	a1 1d       	adc	r26, r1
    3ebc:	66 1f       	adc	r22, r22
    3ebe:	82 9f       	mul	r24, r18
    3ec0:	22 27       	eor	r18, r18
    3ec2:	b0 0d       	add	r27, r0
    3ec4:	a1 1d       	adc	r26, r1
    3ec6:	62 1f       	adc	r22, r18
    3ec8:	73 9f       	mul	r23, r19
    3eca:	b0 0d       	add	r27, r0
    3ecc:	a1 1d       	adc	r26, r1
    3ece:	62 1f       	adc	r22, r18
    3ed0:	83 9f       	mul	r24, r19
    3ed2:	a0 0d       	add	r26, r0
    3ed4:	61 1d       	adc	r22, r1
    3ed6:	22 1f       	adc	r18, r18
    3ed8:	74 9f       	mul	r23, r20
    3eda:	33 27       	eor	r19, r19
    3edc:	a0 0d       	add	r26, r0
    3ede:	61 1d       	adc	r22, r1
    3ee0:	23 1f       	adc	r18, r19
    3ee2:	84 9f       	mul	r24, r20
    3ee4:	60 0d       	add	r22, r0
    3ee6:	21 1d       	adc	r18, r1
    3ee8:	82 2f       	mov	r24, r18
    3eea:	76 2f       	mov	r23, r22
    3eec:	6a 2f       	mov	r22, r26
    3eee:	11 24       	eor	r1, r1
    3ef0:	9f 57       	subi	r25, 0x7F	; 127
    3ef2:	50 40       	sbci	r21, 0x00	; 0
    3ef4:	8a f0       	brmi	.+34     	; 0x3f18 <__mulsf3_pse+0x84>
    3ef6:	e1 f0       	breq	.+56     	; 0x3f30 <__mulsf3_pse+0x9c>
    3ef8:	88 23       	and	r24, r24
    3efa:	4a f0       	brmi	.+18     	; 0x3f0e <__mulsf3_pse+0x7a>
    3efc:	ee 0f       	add	r30, r30
    3efe:	ff 1f       	adc	r31, r31
    3f00:	bb 1f       	adc	r27, r27
    3f02:	66 1f       	adc	r22, r22
    3f04:	77 1f       	adc	r23, r23
    3f06:	88 1f       	adc	r24, r24
    3f08:	91 50       	subi	r25, 0x01	; 1
    3f0a:	50 40       	sbci	r21, 0x00	; 0
    3f0c:	a9 f7       	brne	.-22     	; 0x3ef8 <__mulsf3_pse+0x64>
    3f0e:	9e 3f       	cpi	r25, 0xFE	; 254
    3f10:	51 05       	cpc	r21, r1
    3f12:	70 f0       	brcs	.+28     	; 0x3f30 <__mulsf3_pse+0x9c>
    3f14:	1c cf       	rjmp	.-456    	; 0x3d4e <__fp_inf>
    3f16:	a6 cf       	rjmp	.-180    	; 0x3e64 <__fp_szero>
    3f18:	5f 3f       	cpi	r21, 0xFF	; 255
    3f1a:	ec f3       	brlt	.-6      	; 0x3f16 <__mulsf3_pse+0x82>
    3f1c:	98 3e       	cpi	r25, 0xE8	; 232
    3f1e:	dc f3       	brlt	.-10     	; 0x3f16 <__mulsf3_pse+0x82>
    3f20:	86 95       	lsr	r24
    3f22:	77 95       	ror	r23
    3f24:	67 95       	ror	r22
    3f26:	b7 95       	ror	r27
    3f28:	f7 95       	ror	r31
    3f2a:	e7 95       	ror	r30
    3f2c:	9f 5f       	subi	r25, 0xFF	; 255
    3f2e:	c1 f7       	brne	.-16     	; 0x3f20 <__mulsf3_pse+0x8c>
    3f30:	fe 2b       	or	r31, r30
    3f32:	88 0f       	add	r24, r24
    3f34:	91 1d       	adc	r25, r1
    3f36:	96 95       	lsr	r25
    3f38:	87 95       	ror	r24
    3f3a:	97 f9       	bld	r25, 7
    3f3c:	08 95       	ret

00003f3e <round>:
    3f3e:	60 df       	rcall	.-320    	; 0x3e00 <__fp_splitA>
    3f40:	e0 f0       	brcs	.+56     	; 0x3f7a <round+0x3c>
    3f42:	9e 37       	cpi	r25, 0x7E	; 126
    3f44:	d8 f0       	brcs	.+54     	; 0x3f7c <round+0x3e>
    3f46:	96 39       	cpi	r25, 0x96	; 150
    3f48:	b8 f4       	brcc	.+46     	; 0x3f78 <round+0x3a>
    3f4a:	9e 38       	cpi	r25, 0x8E	; 142
    3f4c:	48 f4       	brcc	.+18     	; 0x3f60 <round+0x22>
    3f4e:	67 2f       	mov	r22, r23
    3f50:	78 2f       	mov	r23, r24
    3f52:	88 27       	eor	r24, r24
    3f54:	98 5f       	subi	r25, 0xF8	; 248
    3f56:	f9 cf       	rjmp	.-14     	; 0x3f4a <round+0xc>
    3f58:	86 95       	lsr	r24
    3f5a:	77 95       	ror	r23
    3f5c:	67 95       	ror	r22
    3f5e:	93 95       	inc	r25
    3f60:	95 39       	cpi	r25, 0x95	; 149
    3f62:	d0 f3       	brcs	.-12     	; 0x3f58 <round+0x1a>
    3f64:	b6 2f       	mov	r27, r22
    3f66:	b1 70       	andi	r27, 0x01	; 1
    3f68:	6b 0f       	add	r22, r27
    3f6a:	71 1d       	adc	r23, r1
    3f6c:	81 1d       	adc	r24, r1
    3f6e:	20 f4       	brcc	.+8      	; 0x3f78 <round+0x3a>
    3f70:	87 95       	ror	r24
    3f72:	77 95       	ror	r23
    3f74:	67 95       	ror	r22
    3f76:	93 95       	inc	r25
    3f78:	f0 ce       	rjmp	.-544    	; 0x3d5a <__fp_mintl>
    3f7a:	0a cf       	rjmp	.-492    	; 0x3d90 <__fp_mpack>
    3f7c:	73 cf       	rjmp	.-282    	; 0x3e64 <__fp_szero>

00003f7e <_exit>:
    3f7e:	f8 94       	cli

00003f80 <__stop_program>:
    3f80:	ff cf       	rjmp	.-2      	; 0x3f80 <__stop_program>
