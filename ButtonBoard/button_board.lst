
button_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00002d6a  00002dfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ed  00800226  00800226  00002f24  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000320  00000000  00000000  00003671  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000113c  00000000  00000000  00003991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005d64  00000000  00000000  00004acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000256a  00000000  00000000  0000a831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004022  00000000  00000000  0000cd9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ab0  00000000  00000000  00010dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001de9  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000250d  00000000  00000000  00013659  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000076b  00000000  00000000  00015b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001b8  00000000  00000000  000162d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000007c <BoardDescription>:
      7c:	44 72 69 76 65 73 20 44 43 20 6d 6f 74 6f 72 00     Drives DC motor.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e6       	ldi	r30, 0x6A	; 106
      a0:	fd e2       	ldi	r31, 0x2D	; 45
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 32       	cpi	r26, 0x26	; 38
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a6 e2       	ldi	r26, 0x26	; 38
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 31       	cpi	r26, 0x13	; 19
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 18 01 	call	0x230	; 0x230 <main>
      c2:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z8adc_initv>:
#define CAN_TRANSMIT_CHANNEL2 2
struct sCAN keydata;

void adc_init()
{
	DIDR0 = 0;
      ca:	10 92 7e 00 	sts	0x007E, r1
	DIDR1 = 0;
      ce:	10 92 7f 00 	sts	0x007F, r1
	ADCSRA = 0;	// disabled!
      d2:	10 92 7a 00 	sts	0x007A, r1
}
      d6:	08 95       	ret

000000d8 <_Z4initv>:

void init()
{
	cli();
      d8:	f8 94       	cli
	chip_init   ( );	
      da:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_Z9chip_initv>
	init_leds   ( );
      de:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z9init_ledsv>
	buttons_init( );	
      e2:	0e 94 08 02 	call	0x410	; 0x410 <_Z12buttons_initv>
	delay(40000);					// ~ 1 sec
      e6:	60 e4       	ldi	r22, 0x40	; 64
      e8:	7c e9       	ldi	r23, 0x9C	; 156
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_Z5delayl>
	read_cal();
      f2:	0e 94 85 04 	call	0x90a	; 0x90a <_Z8read_calv>
	can_init( CAN_250K_BAUD );			/* Enables Mob0 for Reception! */
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_Z8can_inith>

	config_init();
      fc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_Z11config_initv>
	can_instance_init();	
     100:	0e 94 b9 08 	call	0x1172	; 0x1172 <_Z17can_instance_initv>
	set_configure_callback	( config_change    );			
     104:	82 e8       	ldi	r24, 0x82	; 130
     106:	94 e0       	ldi	r25, 0x04	; 4
     108:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_Z22set_configure_callbackPFvhE>
	//set_rx_callback( can_file_message );	// empty
	sei();
     10c:	78 94       	sei
	
	OS_InitTask ( );
     10e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_Z11OS_InitTaskv>
}
     112:	08 95       	ret

00000114 <_Z12button_magich>:
    ie what can Msg to send
*/
byte Instance = 0x01;
void button_magic( byte mKey )
{
	switch(mKey)
     114:	86 30       	cpi	r24, 0x06	; 6
     116:	09 f4       	brne	.+2      	; 0x11a <_Z12button_magich+0x6>
     118:	82 c0       	rjmp	.+260    	; 0x21e <_Z12button_magich+0x10a>
     11a:	87 30       	cpi	r24, 0x07	; 7
     11c:	b0 f0       	brcs	.+44     	; 0x14a <_Z12button_magich+0x36>
     11e:	8c 30       	cpi	r24, 0x0C	; 12
     120:	09 f4       	brne	.+2      	; 0x124 <_Z12button_magich+0x10>
     122:	5d c0       	rjmp	.+186    	; 0x1de <_Z12button_magich+0xca>
     124:	8d 30       	cpi	r24, 0x0D	; 13
     126:	20 f1       	brcs	.+72     	; 0x170 <_Z12button_magich+0x5c>
     128:	8e 30       	cpi	r24, 0x0E	; 14
     12a:	09 f4       	brne	.+2      	; 0x12e <_Z12button_magich+0x1a>
     12c:	6e c0       	rjmp	.+220    	; 0x20a <_Z12button_magich+0xf6>
     12e:	8e 30       	cpi	r24, 0x0E	; 14
     130:	08 f4       	brcc	.+2      	; 0x134 <_Z12button_magich+0x20>
     132:	45 c0       	rjmp	.+138    	; 0x1be <_Z12button_magich+0xaa>
     134:	8f 30       	cpi	r24, 0x0F	; 15
     136:	19 f4       	brne	.+6      	; 0x13e <_Z12button_magich+0x2a>
			break;

	case 0x0C:  Instance = 0x01;				break;
	case 0x0D:  Instance = 0x02;				break;
	case 0x0E:  Instance = 0x03;				break;
	case 0x0F:  Instance = 0x04;				break;
     138:	84 e0       	ldi	r24, 0x04	; 4
     13a:	80 93 00 01 	sts	0x0100, r24
			led_off(1);
			RESET_LED_2();
			break;
	default: break;	
	}
	can_send_msg( CAN_TRANSMIT_CHANNEL2, &msg2 );
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	65 e6       	ldi	r22, 0x65	; 101
     142:	72 e0       	ldi	r23, 0x02	; 2
     144:	0e 94 82 07 	call	0xf04	; 0xf04 <_Z12can_send_msghP4sCAN>
}
     148:	08 95       	ret
    ie what can Msg to send
*/
byte Instance = 0x01;
void button_magic( byte mKey )
{
	switch(mKey)
     14a:	82 30       	cpi	r24, 0x02	; 2
     14c:	09 f4       	brne	.+2      	; 0x150 <_Z12button_magich+0x3c>
     14e:	61 c0       	rjmp	.+194    	; 0x212 <_Z12button_magich+0xfe>
     150:	83 30       	cpi	r24, 0x03	; 3
     152:	10 f1       	brcs	.+68     	; 0x198 <_Z12button_magich+0x84>
     154:	84 30       	cpi	r24, 0x04	; 4
     156:	09 f4       	brne	.+2      	; 0x15a <_Z12button_magich+0x46>
     158:	46 c0       	rjmp	.+140    	; 0x1e6 <_Z12button_magich+0xd2>
     15a:	85 30       	cpi	r24, 0x05	; 5
     15c:	a0 f1       	brcs	.+104    	; 0x1c6 <_Z12button_magich+0xb2>
			break;

	// Top Row, Left to Right: 
	case 4: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_DEVICE, 0 );
			break;
	case 5: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_PATTERN, 0x05 );
     15e:	85 e6       	ldi	r24, 0x65	; 101
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	60 91 00 01 	lds	r22, 0x0100
     166:	41 e0       	ldi	r20, 0x01	; 1
     168:	25 e0       	ldi	r18, 0x05	; 5
     16a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z23can_prep_system_led_msgP4sCANhhh>
			break;
     16e:	e7 cf       	rjmp	.-50     	; 0x13e <_Z12button_magich+0x2a>
    ie what can Msg to send
*/
byte Instance = 0x01;
void button_magic( byte mKey )
{
	switch(mKey)
     170:	88 30       	cpi	r24, 0x08	; 8
     172:	09 f4       	brne	.+2      	; 0x176 <_Z12button_magich+0x62>
     174:	41 c0       	rjmp	.+130    	; 0x1f8 <_Z12button_magich+0xe4>
     176:	88 30       	cpi	r24, 0x08	; 8
     178:	c8 f0       	brcs	.+50     	; 0x1ac <_Z12button_magich+0x98>
     17a:	89 30       	cpi	r24, 0x09	; 9
     17c:	01 f7       	brne	.-64     	; 0x13e <_Z12button_magich+0x2a>
	case 0x0C:  Instance = 0x01;				break;
	case 0x0D:  Instance = 0x02;				break;
	case 0x0E:  Instance = 0x03;				break;
	case 0x0F:  Instance = 0x04;				break;
	
	case 9: Instance = 0;
     17e:	10 92 00 01 	sts	0x0100, r1
			led_off(2);
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z7led_offh>
			led_off(4);
     188:	84 e0       	ldi	r24, 0x04	; 4
     18a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z7led_offh>
			led_off(1);
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z7led_offh>
			RESET_LED_2();
     194:	59 98       	cbi	0x0b, 1	; 11
			break;
     196:	d3 cf       	rjmp	.-90     	; 0x13e <_Z12button_magich+0x2a>
    ie what can Msg to send
*/
byte Instance = 0x01;
void button_magic( byte mKey )
{
	switch(mKey)
     198:	88 23       	and	r24, r24
     19a:	d9 f0       	breq	.+54     	; 0x1d2 <_Z12button_magich+0xbe>
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	79 f6       	brne	.-98     	; 0x13e <_Z12button_magich+0x2a>
	{
	// Front Edge, Left to Right : 
	case 0: can_prep_board_presence_request( &msg2, 0 );
			break;
	case 1: can_prep_board_presence_request( &msg2, 1 );
     1a0:	85 e6       	ldi	r24, 0x65	; 101
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	0e 94 c4 03 	call	0x788	; 0x788 <_Z31can_prep_board_presence_requestP4sCANh>
			break;
     1aa:	c9 cf       	rjmp	.-110    	; 0x13e <_Z12button_magich+0x2a>
			break;
	case 5: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_PATTERN, 0x05 );
			break;
	case 6: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_STROBE, 0x00 );
			break;
	case 7: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_STROBE, 0x01 );
     1ac:	85 e6       	ldi	r24, 0x65	; 101
     1ae:	92 e0       	ldi	r25, 0x02	; 2
     1b0:	60 91 00 01 	lds	r22, 0x0100
     1b4:	42 e0       	ldi	r20, 0x02	; 2
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z23can_prep_system_led_msgP4sCANhhh>
			break;
     1bc:	c0 cf       	rjmp	.-128    	; 0x13e <_Z12button_magich+0x2a>
	case 8: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_MYINSTANCE, 0 );
			break;

	case 0x0C:  Instance = 0x01;				break;
	case 0x0D:  Instance = 0x02;				break;
     1be:	82 e0       	ldi	r24, 0x02	; 2
     1c0:	80 93 00 01 	sts	0x0100, r24
     1c4:	bc cf       	rjmp	.-136    	; 0x13e <_Z12button_magich+0x2a>
			break;
	case 1: can_prep_board_presence_request( &msg2, 1 );
			break;
	case 2: can_prep_board_presence_request( &msg2, 2 );
			break;
	case 3: can_prep_board_presence_request( &msg2, 3 );
     1c6:	85 e6       	ldi	r24, 0x65	; 101
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	63 e0       	ldi	r22, 0x03	; 3
     1cc:	0e 94 c4 03 	call	0x788	; 0x788 <_Z31can_prep_board_presence_requestP4sCANh>
			break;
     1d0:	b6 cf       	rjmp	.-148    	; 0x13e <_Z12button_magich+0x2a>
void button_magic( byte mKey )
{
	switch(mKey)
	{
	// Front Edge, Left to Right : 
	case 0: can_prep_board_presence_request( &msg2, 0 );
     1d2:	85 e6       	ldi	r24, 0x65	; 101
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	0e 94 c4 03 	call	0x788	; 0x788 <_Z31can_prep_board_presence_requestP4sCANh>
			break;
     1dc:	b0 cf       	rjmp	.-160    	; 0x13e <_Z12button_magich+0x2a>
	case 7: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_STROBE, 0x01 );
			break;
	case 8: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_MYINSTANCE, 0 );
			break;

	case 0x0C:  Instance = 0x01;				break;
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	80 93 00 01 	sts	0x0100, r24
     1e4:	ac cf       	rjmp	.-168    	; 0x13e <_Z12button_magich+0x2a>
			break;
	case 3: can_prep_board_presence_request( &msg2, 3 );
			break;

	// Top Row, Left to Right: 
	case 4: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_DEVICE, 0 );
     1e6:	85 e6       	ldi	r24, 0x65	; 101
     1e8:	92 e0       	ldi	r25, 0x02	; 2
     1ea:	60 91 00 01 	lds	r22, 0x0100
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z23can_prep_system_led_msgP4sCANhhh>
			break;
     1f6:	a3 cf       	rjmp	.-186    	; 0x13e <_Z12button_magich+0x2a>
			break;
	case 6: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_STROBE, 0x00 );
			break;
	case 7: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_STROBE, 0x01 );
			break;
	case 8: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_MYINSTANCE, 0 );
     1f8:	85 e6       	ldi	r24, 0x65	; 101
     1fa:	92 e0       	ldi	r25, 0x02	; 2
     1fc:	60 91 00 01 	lds	r22, 0x0100
     200:	43 e0       	ldi	r20, 0x03	; 3
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z23can_prep_system_led_msgP4sCANhhh>
			break;
     208:	9a cf       	rjmp	.-204    	; 0x13e <_Z12button_magich+0x2a>

	case 0x0C:  Instance = 0x01;				break;
	case 0x0D:  Instance = 0x02;				break;
	case 0x0E:  Instance = 0x03;				break;
     20a:	83 e0       	ldi	r24, 0x03	; 3
     20c:	80 93 00 01 	sts	0x0100, r24
     210:	96 cf       	rjmp	.-212    	; 0x13e <_Z12button_magich+0x2a>
	// Front Edge, Left to Right : 
	case 0: can_prep_board_presence_request( &msg2, 0 );
			break;
	case 1: can_prep_board_presence_request( &msg2, 1 );
			break;
	case 2: can_prep_board_presence_request( &msg2, 2 );
     212:	85 e6       	ldi	r24, 0x65	; 101
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	62 e0       	ldi	r22, 0x02	; 2
     218:	0e 94 c4 03 	call	0x788	; 0x788 <_Z31can_prep_board_presence_requestP4sCANh>
			break;
     21c:	90 cf       	rjmp	.-224    	; 0x13e <_Z12button_magich+0x2a>
	// Top Row, Left to Right: 
	case 4: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_DEVICE, 0 );
			break;
	case 5: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_PATTERN, 0x05 );
			break;
	case 6: can_prep_system_led_msg( &msg2, Instance, SYSTEM_LED_MODE_STROBE, 0x00 );
     21e:	85 e6       	ldi	r24, 0x65	; 101
     220:	92 e0       	ldi	r25, 0x02	; 2
     222:	60 91 00 01 	lds	r22, 0x0100
     226:	42 e0       	ldi	r20, 0x02	; 2
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z23can_prep_system_led_msgP4sCANhhh>
			break;
     22e:	87 cf       	rjmp	.-242    	; 0x13e <_Z12button_magich+0x2a>

00000230 <main>:
*/

//***** main *****************************************************
byte count = 0;
int main(void)
{
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
	union uKeyRoster scan;
    init();    
     238:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z4initv>

    while (1)
    {
		wait_for_press();
     23c:	0e 94 32 02 	call	0x464	; 0x464 <_Z14wait_for_pressv>
		// Result is stored in prev_keys & keys and hopefully keys2

		SET_LED_1();
     240:	58 9a       	sbi	0x0b, 0	; 11
		scan = pack_array( keys );
     242:	8b e3       	ldi	r24, 0x3B	; 59
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	0e 94 92 01 	call	0x324	; 0x324 <_Z10pack_arrayPh>
     24a:	7b 01       	movw	r14, r22
     24c:	8c 01       	movw	r16, r24
		build_key_list   ( keys );
     24e:	8b e3       	ldi	r24, 0x3B	; 59
     250:	92 e0       	ldi	r25, 0x02	; 2
     252:	0e 94 b4 02 	call	0x568	; 0x568 <_Z14build_key_listPh>
extern byte config_byte_2 ;
extern byte config_byte_3 ;
extern byte config_byte_4 ;
extern byte sys_config_byte;

inline byte isConfigured (byte Test)	{  return ((config_byte_1 & Test)>0); };
     256:	80 91 0e 03 	lds	r24, 0x030E

		if (isConfigured(MODE_SEND_ROSTER)==0)		{
     25a:	80 ff       	sbrs	r24, 0
     25c:	0f c0       	rjmp	.+30     	; 0x27c <main+0x4c>
			can_prep_button_roster_msg( &msg1, scan );
			can_send_msg_no_wait( CAN_TRANSMIT_CHANNEL1, &msg1 );
		}
		if (isConfigured(MODE_SEND_PRESSED)==0)		{
     25e:	81 ff       	sbrs	r24, 1
     260:	02 c0       	rjmp	.+4      	; 0x266 <main+0x36>
			can_prep_button_pressed_msg( &msg2 );
			can_send_msg_no_wait( CAN_TRANSMIT_CHANNEL2, &msg2 );
	    }
		RESET_LED_1();
     262:	58 98       	cbi	0x0b, 0	; 11
int main(void)
{
	union uKeyRoster scan;
    init();    

    while (1)
     264:	eb cf       	rjmp	.-42     	; 0x23c <main+0xc>
		if (isConfigured(MODE_SEND_ROSTER)==0)		{
			can_prep_button_roster_msg( &msg1, scan );
			can_send_msg_no_wait( CAN_TRANSMIT_CHANNEL1, &msg1 );
		}
		if (isConfigured(MODE_SEND_PRESSED)==0)		{
			can_prep_button_pressed_msg( &msg2 );
     266:	85 e6       	ldi	r24, 0x65	; 101
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	0e 94 0a 03 	call	0x614	; 0x614 <_Z27can_prep_button_pressed_msgP4sCAN>
			can_send_msg_no_wait( CAN_TRANSMIT_CHANNEL2, &msg2 );
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	65 e6       	ldi	r22, 0x65	; 101
     272:	72 e0       	ldi	r23, 0x02	; 2
     274:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
	    }
		RESET_LED_1();
     278:	58 98       	cbi	0x0b, 0	; 11
     27a:	e0 cf       	rjmp	.-64     	; 0x23c <main+0xc>
		SET_LED_1();
		scan = pack_array( keys );
		build_key_list   ( keys );

		if (isConfigured(MODE_SEND_ROSTER)==0)		{
			can_prep_button_roster_msg( &msg1, scan );
     27c:	86 e5       	ldi	r24, 0x56	; 86
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	b8 01       	movw	r22, r16
     282:	a7 01       	movw	r20, r14
     284:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_Z26can_prep_button_roster_msgP4sCAN10uKeyRoster>
			can_send_msg_no_wait( CAN_TRANSMIT_CHANNEL1, &msg1 );
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	66 e5       	ldi	r22, 0x56	; 86
     28c:	72 e0       	ldi	r23, 0x02	; 2
     28e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
     292:	80 91 0e 03 	lds	r24, 0x030E
     296:	e3 cf       	rjmp	.-58     	; 0x25e <main+0x2e>

00000298 <_Z15set_rows_outputv>:


/******************** ROW DDR (INPUT/OUTPUT) ******************/
void set_rows_output()
{
  ROW_DDR |= ROW_DDR_MASK;
     298:	84 b1       	in	r24, 0x04	; 4
     29a:	8c 67       	ori	r24, 0x7C	; 124
     29c:	84 b9       	out	0x04, r24	; 4
}
     29e:	08 95       	ret

000002a0 <_Z14set_rows_inputv>:
void set_rows_input()
{
  ROW_DDR &= (~ROW_DDR_MASK);
     2a0:	84 b1       	in	r24, 0x04	; 4
     2a2:	83 78       	andi	r24, 0x83	; 131
     2a4:	84 b9       	out	0x04, r24	; 4
}
     2a6:	08 95       	ret

000002a8 <_Z12all_rows_lowv>:
void all_rows_low()
{  
  ROW_PORT &= (~ROW_DDR_MASK);
     2a8:	85 b1       	in	r24, 0x05	; 5
     2aa:	83 78       	andi	r24, 0x83	; 131
     2ac:	85 b9       	out	0x05, r24	; 5
}
     2ae:	08 95       	ret

000002b0 <_Z13all_rows_highv>:
void all_rows_high()
{
  ROW_PORT |= ROW_DDR_MASK;
     2b0:	85 b1       	in	r24, 0x05	; 5
     2b2:	8c 67       	ori	r24, 0x7C	; 124
     2b4:	85 b9       	out	0x05, r24	; 5
}
     2b6:	08 95       	ret

000002b8 <_Z7set_rowhh>:
/********************************************************
 Then to isolate the row, put all rows high except for 1 
 *******************************************************/
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	b9 f0       	breq	.+46     	; 0x2ea <_Z7set_rowhh+0x32>
     2bc:	83 30       	cpi	r24, 0x03	; 3
     2be:	28 f0       	brcs	.+10     	; 0x2ca <_Z7set_rowhh+0x12>
     2c0:	83 30       	cpi	r24, 0x03	; 3
     2c2:	b9 f0       	breq	.+46     	; 0x2f2 <_Z7set_rowhh+0x3a>
     2c4:	84 30       	cpi	r24, 0x04	; 4
     2c6:	69 f0       	breq	.+26     	; 0x2e2 <_Z7set_rowhh+0x2a>
     2c8:	08 95       	ret
     2ca:	88 23       	and	r24, r24
     2cc:	31 f0       	breq	.+12     	; 0x2da <_Z7set_rowhh+0x22>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	d9 f7       	brne	.-10     	; 0x2c8 <_Z7set_rowhh+0x10>
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
     2d2:	66 23       	and	r22, r22
     2d4:	91 f0       	breq	.+36     	; 0x2fa <_Z7set_rowhh+0x42>
     2d6:	2b 9a       	sbi	0x05, 3	; 5
     2d8:	08 95       	ret
 *******************************************************/
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
     2da:	66 23       	and	r22, r22
     2dc:	81 f0       	breq	.+32     	; 0x2fe <_Z7set_rowhh+0x46>
     2de:	2a 9a       	sbi	0x05, 2	; 5
     2e0:	08 95       	ret
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
    case 2 : if (mHigh) ROW_PORT|= ROW2; else ROW_PORT &= ~ROW2; break;		// Row	2
    case 3 : if (mHigh) ROW_PORT|= ROW3; else ROW_PORT &= ~ROW3; break; 	// Row	3
    case 4 : if (mHigh) ROW_PORT|= ROW4; else ROW_PORT &= ~ROW4; break;		// Row  4
     2e2:	66 23       	and	r22, r22
     2e4:	91 f4       	brne	.+36     	; 0x30a <_Z7set_rowhh+0x52>
     2e6:	2e 98       	cbi	0x05, 6	; 5
     2e8:	08 95       	ret
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
    case 2 : if (mHigh) ROW_PORT|= ROW2; else ROW_PORT &= ~ROW2; break;		// Row	2
     2ea:	66 23       	and	r22, r22
     2ec:	51 f0       	breq	.+20     	; 0x302 <_Z7set_rowhh+0x4a>
     2ee:	2c 9a       	sbi	0x05, 4	; 5
     2f0:	08 95       	ret
    case 3 : if (mHigh) ROW_PORT|= ROW3; else ROW_PORT &= ~ROW3; break; 	// Row	3
     2f2:	66 23       	and	r22, r22
     2f4:	41 f0       	breq	.+16     	; 0x306 <_Z7set_rowhh+0x4e>
     2f6:	2d 9a       	sbi	0x05, 5	; 5
     2f8:	08 95       	ret
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
     2fa:	2b 98       	cbi	0x05, 3	; 5
     2fc:	08 95       	ret
 *******************************************************/
void set_row(byte mRow, byte mHigh)
{
  switch (mRow)
  {
    case 0 : if (mHigh) ROW_PORT|= ROW0; else ROW_PORT &= ~ROW0; break;		// Front Row
     2fe:	2a 98       	cbi	0x05, 2	; 5
     300:	08 95       	ret
    case 1 : if (mHigh) ROW_PORT|= ROW1; else ROW_PORT &= ~ROW1; break;    	// Top   Row
    case 2 : if (mHigh) ROW_PORT|= ROW2; else ROW_PORT &= ~ROW2; break;		// Row	2
     302:	2c 98       	cbi	0x05, 4	; 5
     304:	08 95       	ret
    case 3 : if (mHigh) ROW_PORT|= ROW3; else ROW_PORT &= ~ROW3; break; 	// Row	3
     306:	2d 98       	cbi	0x05, 5	; 5
     308:	08 95       	ret
    case 4 : if (mHigh) ROW_PORT|= ROW4; else ROW_PORT &= ~ROW4; break;		// Row  4
     30a:	2e 9a       	sbi	0x05, 6	; 5
     30c:	08 95       	ret

0000030e <_Z18set_switches_inputv>:
}

/******************** SWITCHES ******************/
void set_switches_input()
{	// internal pullup needed?  no because external
	SWITCH_DDR &= (~SWITCH_DDR_MASK);
     30e:	87 b1       	in	r24, 0x07	; 7
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	87 b9       	out	0x07, r24	; 7
}
     314:	08 95       	ret

00000316 <_Z19set_switches_outputv>:
void set_switches_output()
{
	SWITCH_DDR |= SWITCH_DDR_MASK;
     316:	87 b1       	in	r24, 0x07	; 7
     318:	80 6f       	ori	r24, 0xF0	; 240
     31a:	87 b9       	out	0x07, r24	; 7
}
     31c:	08 95       	ret

0000031e <_Z13read_switchesv>:
	0xDF => 1101 a button in both col 5 is pushed
********************************************************/
byte read_switches()
{
  byte combined;
  combined = (SWITCH_IN_PORT & SWITCH_DDR_MASK);
     31e:	86 b1       	in	r24, 0x06	; 6
  return combined;
}
     320:	80 7f       	andi	r24, 0xF0	; 240
     322:	08 95       	ret

00000324 <_Z10pack_arrayPh>:

 //static union uKeyRoster retval;
union uKeyRoster pack_array( byte* mKeyArray )
{
	static union uKeyRoster retval;
	byte index = 0;
     324:	e8 2f       	mov	r30, r24
     326:	f9 2f       	mov	r31, r25

	// combine odd rows into lower nibble.
	// all keys should only take 2.5 bytes
	// extra .5 byte stores count of keys pressed.
	for (int i=0; i<NUM_ROWS; i++)
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0

 //static union uKeyRoster retval;
union uKeyRoster pack_array( byte* mKeyArray )
{
	static union uKeyRoster retval;
	byte index = 0;
     32c:	20 e0       	ldi	r18, 0x00	; 0
	// combine odd rows into lower nibble.
	// all keys should only take 2.5 bytes
	// extra .5 byte stores count of keys pressed.
	for (int i=0; i<NUM_ROWS; i++)
	{
		if ((i%2)==0)
     32e:	80 fd       	sbrc	r24, 0
     330:	15 c0       	rjmp	.+42     	; 0x35c <_Z10pack_arrayPh+0x38>
			retval.array[index] = (mKeyArray[i] & 0xF0);							// upper nibble
     332:	a2 2f       	mov	r26, r18
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	a4 5b       	subi	r26, 0xB4	; 180
     338:	bd 4f       	sbci	r27, 0xFD	; 253
     33a:	30 81       	ld	r19, Z
     33c:	30 7f       	andi	r19, 0xF0	; 240
     33e:	3c 93       	st	X, r19
	byte index = 0;

	// combine odd rows into lower nibble.
	// all keys should only take 2.5 bytes
	// extra .5 byte stores count of keys pressed.
	for (int i=0; i<NUM_ROWS; i++)
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	31 96       	adiw	r30, 0x01	; 1
     344:	85 30       	cpi	r24, 0x05	; 5
     346:	91 05       	cpc	r25, r1
     348:	91 f7       	brne	.-28     	; 0x32e <_Z10pack_arrayPh+0xa>
		else {
			retval.array[index] |= ((mKeyArray[i] & 0xF0) >> 4);		// lower nibble
			index++;
		}
	}
	return retval;
     34a:	60 91 4c 02 	lds	r22, 0x024C
     34e:	70 91 4d 02 	lds	r23, 0x024D
}
     352:	80 91 4e 02 	lds	r24, 0x024E
     356:	90 91 4f 02 	lds	r25, 0x024F
     35a:	08 95       	ret
	for (int i=0; i<NUM_ROWS; i++)
	{
		if ((i%2)==0)
			retval.array[index] = (mKeyArray[i] & 0xF0);							// upper nibble
		else {
			retval.array[index] |= ((mKeyArray[i] & 0xF0) >> 4);		// lower nibble
     35c:	a2 2f       	mov	r26, r18
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	a4 5b       	subi	r26, 0xB4	; 180
     362:	bd 4f       	sbci	r27, 0xFD	; 253
     364:	40 81       	ld	r20, Z
     366:	42 95       	swap	r20
     368:	4f 70       	andi	r20, 0x0F	; 15
     36a:	3c 91       	ld	r19, X
     36c:	34 2b       	or	r19, r20
     36e:	3c 93       	st	X, r19
			index++;
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	e6 cf       	rjmp	.-52     	; 0x340 <_Z10pack_arrayPh+0x1c>

00000374 <_Z9scan_keysPh>:
array[3] 	  	 Row (3)
array[4]   		 Row (2)
BITS are in UPPER NIBBLE!
************************************************/
void scan_keys( byte* mkeys )
{
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
{  
  ROW_PORT &= (~ROW_DDR_MASK);
}
void all_rows_high()
{
  ROW_PORT |= ROW_DDR_MASK;
     37c:	25 b1       	in	r18, 0x05	; 5
     37e:	2c 67       	ori	r18, 0x7C	; 124
     380:	25 b9       	out	0x05, r18	; 5
     382:	08 2f       	mov	r16, r24
     384:	19 2f       	mov	r17, r25
BITS are in UPPER NIBBLE!
************************************************/
void scan_keys( byte* mkeys )
{
  all_rows_high();
  for (int i=0; i<NUM_ROWS; i++)
     386:	c0 e0       	ldi	r28, 0x00	; 0
     388:	d0 e0       	ldi	r29, 0x00	; 0
  {
     set_row( i, 0 );
     38a:	8c 2f       	mov	r24, r28
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z7set_rowhh>
	 delay(CHARGE_TIME);
     392:	6c e2       	ldi	r22, 0x2C	; 44
     394:	71 e0       	ldi	r23, 0x01	; 1
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_Z5delayl>
	0xDF => 1101 a button in both col 5 is pushed
********************************************************/
byte read_switches()
{
  byte combined;
  combined = (SWITCH_IN_PORT & SWITCH_DDR_MASK);
     39e:	86 b1       	in	r24, 0x06	; 6
     3a0:	80 7f       	andi	r24, 0xF0	; 240
  all_rows_high();
  for (int i=0; i<NUM_ROWS; i++)
  {
     set_row( i, 0 );
	 delay(CHARGE_TIME);
	 mkeys[i] = read_switches();	// upper nibble
     3a2:	f8 01       	movw	r30, r16
     3a4:	81 93       	st	Z+, r24
     3a6:	8f 01       	movw	r16, r30
     set_row( i, 1 );				// restore so not to affect the next row
     3a8:	8c 2f       	mov	r24, r28
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z7set_rowhh>
BITS are in UPPER NIBBLE!
************************************************/
void scan_keys( byte* mkeys )
{
  all_rows_high();
  for (int i=0; i<NUM_ROWS; i++)
     3b0:	21 96       	adiw	r28, 0x01	; 1
     3b2:	c5 30       	cpi	r28, 0x05	; 5
     3b4:	d1 05       	cpc	r29, r1
     3b6:	49 f7       	brne	.-46     	; 0x38a <_Z9scan_keysPh+0x16>
     set_row( i, 0 );
	 delay(CHARGE_TIME);
	 mkeys[i] = read_switches();	// upper nibble
     set_row( i, 1 );				// restore so not to affect the next row
  }
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	08 95       	ret

000003c2 <_Z16check_for_changePhS_>:
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
	    return 1;
  }
  return 0;
     3c2:	a8 2f       	mov	r26, r24
     3c4:	b9 2f       	mov	r27, r25
     3c6:	e6 2f       	mov	r30, r22
     3c8:	f7 2f       	mov	r31, r23
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
  {
	 if (mSrc1[i] != mSrc2[i])
     3ce:	3d 91       	ld	r19, X+
     3d0:	21 91       	ld	r18, Z+
     3d2:	32 17       	cp	r19, r18
     3d4:	31 f4       	brne	.+12     	; 0x3e2 <_Z16check_for_changePhS_+0x20>
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	85 30       	cpi	r24, 0x05	; 5
     3da:	91 05       	cpc	r25, r1
     3dc:	c1 f7       	brne	.-16     	; 0x3ce <_Z16check_for_changePhS_+0xc>
  {
	 if (mSrc1[i] != mSrc2[i])
	    return 1;
  }
  return 0;
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	08 95       	ret
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
	    return 1;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
  }
  return 0;
}
     3e4:	08 95       	ret

000003e6 <_Z16update_prev_keysv>:

void update_prev_keys()
{  
  for (int i=0; i<NUM_ROWS; i++)
	 prev_keys[i] = keys[i];
     3e6:	80 91 3b 02 	lds	r24, 0x023B
     3ea:	80 93 36 02 	sts	0x0236, r24
     3ee:	80 91 3c 02 	lds	r24, 0x023C
     3f2:	80 93 37 02 	sts	0x0237, r24
     3f6:	80 91 3d 02 	lds	r24, 0x023D
     3fa:	80 93 38 02 	sts	0x0238, r24
     3fe:	80 91 3e 02 	lds	r24, 0x023E
     402:	80 93 39 02 	sts	0x0239, r24
     406:	80 91 3f 02 	lds	r24, 0x023F
     40a:	80 93 3a 02 	sts	0x023A, r24
}
     40e:	08 95       	ret

00000410 <_Z12buttons_initv>:

void buttons_init()
{
	for (int i=0; i<NUM_ROWS; i++)
		prev_keys[i] = 0xFF;		// assume all up.
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	80 93 36 02 	sts	0x0236, r24
     416:	80 93 37 02 	sts	0x0237, r24
     41a:	80 93 38 02 	sts	0x0238, r24
     41e:	80 93 39 02 	sts	0x0239, r24
     422:	80 93 3a 02 	sts	0x023A, r24


/******************** ROW DDR (INPUT/OUTPUT) ******************/
void set_rows_output()
{
  ROW_DDR |= ROW_DDR_MASK;
     426:	84 b1       	in	r24, 0x04	; 4
     428:	8c 67       	ori	r24, 0x7C	; 124
     42a:	84 b9       	out	0x04, r24	; 4
}

/******************** SWITCHES ******************/
void set_switches_input()
{	// internal pullup needed?  no because external
	SWITCH_DDR &= (~SWITCH_DDR_MASK);
     42c:	87 b1       	in	r24, 0x07	; 7
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	87 b9       	out	0x07, r24	; 7
	for (int i=0; i<NUM_ROWS; i++)
		prev_keys[i] = 0xFF;		// assume all up.
	set_rows_output();
	//all_rows_low();
	set_switches_input();
	scan_keys(keys);
     432:	8b e3       	ldi	r24, 0x3B	; 59
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 ba 01 	call	0x374	; 0x374 <_Z9scan_keysPh>
}

void update_prev_keys()
{  
  for (int i=0; i<NUM_ROWS; i++)
	 prev_keys[i] = keys[i];
     43a:	80 91 3b 02 	lds	r24, 0x023B
     43e:	80 93 36 02 	sts	0x0236, r24
     442:	80 91 3c 02 	lds	r24, 0x023C
     446:	80 93 37 02 	sts	0x0237, r24
     44a:	80 91 3d 02 	lds	r24, 0x023D
     44e:	80 93 38 02 	sts	0x0238, r24
     452:	80 91 3e 02 	lds	r24, 0x023E
     456:	80 93 39 02 	sts	0x0239, r24
     45a:	80 91 3f 02 	lds	r24, 0x023F
     45e:	80 93 3a 02 	sts	0x023A, r24
	set_rows_output();
	//all_rows_low();
	set_switches_input();
	scan_keys(keys);
	update_prev_keys();
}
     462:	08 95       	ret

00000464 <_Z14wait_for_pressv>:
The column(s) affected are the 0 bits.
ie.  0xEF  means a button on SW1 column is pushed.
ie.  0x7F  means a button on SW4 & SW3 columns are pushed.
***********************************************************/
void wait_for_press()
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29


/******************** ROW DDR (INPUT/OUTPUT) ******************/
void set_rows_output()
{
  ROW_DDR |= ROW_DDR_MASK;
     468:	84 b1       	in	r24, 0x04	; 4
     46a:	8c 67       	ori	r24, 0x7C	; 124
     46c:	84 b9       	out	0x04, r24	; 4
{
  ROW_DDR &= (~ROW_DDR_MASK);
}
void all_rows_low()
{  
  ROW_PORT &= (~ROW_DDR_MASK);
     46e:	85 b1       	in	r24, 0x05	; 5
     470:	83 78       	andi	r24, 0x83	; 131
     472:	85 b9       	out	0x05, r24	; 5
}

/******************** SWITCHES ******************/
void set_switches_input()
{	// internal pullup needed?  no because external
	SWITCH_DDR &= (~SWITCH_DDR_MASK);
     474:	87 b1       	in	r24, 0x07	; 7
     476:	8f 70       	andi	r24, 0x0F	; 15
     478:	87 b9       	out	0x07, r24	; 7

	// If there are no glitches _slower_ than 5ms.  This will work.
	// repeat until first sign of change:
	do {
		do { 
			scan_keys(keys);
     47a:	8b e3       	ldi	r24, 0x3B	; 59
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	0e 94 ba 01 	call	0x374	; 0x374 <_Z9scan_keysPh>
     482:	c6 e3       	ldi	r28, 0x36	; 54
     484:	d2 e0       	ldi	r29, 0x02	; 2
     486:	ab e3       	ldi	r26, 0x3B	; 59
     488:	b2 e0       	ldi	r27, 0x02	; 2
Return :   Pickup results in the "keys" array.
The column(s) affected are the 0 bits.
ie.  0xEF  means a button on SW1 column is pushed.
ie.  0x7F  means a button on SW4 & SW3 columns are pushed.
***********************************************************/
void wait_for_press()
     48a:	fe 01       	movw	r30, r28
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
     48c:	91 91       	ld	r25, Z+
     48e:	8d 91       	ld	r24, X+
     490:	98 17       	cp	r25, r24
     492:	41 f4       	brne	.+16     	; 0x4a4 <_Z14wait_for_pressv+0x40>
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	eb 33       	cpi	r30, 0x3B	; 59
     498:	f8 07       	cpc	r31, r24
     49a:	79 f3       	breq	.-34     	; 0x47a <_Z14wait_for_pressv+0x16>
  {
	 if (mSrc1[i] != mSrc2[i])
     49c:	91 91       	ld	r25, Z+
     49e:	8d 91       	ld	r24, X+
     4a0:	98 17       	cp	r25, r24
     4a2:	c1 f3       	breq	.-16     	; 0x494 <_Z14wait_for_pressv+0x30>
			scan_keys(keys);
			change = check_for_change(prev_keys, keys); 
		} while (change==0);

		// slight delay ~5ms
		delay(5);		// adjust time for 5ms!
     4a4:	65 e0       	ldi	r22, 0x05	; 5
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_Z5delayl>
		/* Reread : 
			if still different from previous, 
				then real debounce event
			if return to previous,
				then ignore the event		*/
			scan_keys( keys2 );
     4b0:	80 e4       	ldi	r24, 0x40	; 64
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 ba 01 	call	0x374	; 0x374 <_Z9scan_keysPh>
     4b8:	e0 e4       	ldi	r30, 0x40	; 64
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
  {
	 if (mSrc1[i] != mSrc2[i])
     4bc:	99 91       	ld	r25, Y+
     4be:	81 91       	ld	r24, Z+
     4c0:	98 17       	cp	r25, r24
     4c2:	41 f4       	brne	.+16     	; 0x4d4 <_Z14wait_for_pressv+0x70>
Return:	TRUE - Difference found
		FALSE - No Change
*/
BOOL check_for_change( byte* mSrc1, byte* mSrc2 )
{  
  for (int i=0; i<NUM_ROWS; i++)
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	cb 33       	cpi	r28, 0x3B	; 59
     4c8:	d8 07       	cpc	r29, r24
     4ca:	b9 f2       	breq	.-82     	; 0x47a <_Z14wait_for_pressv+0x16>
  {
	 if (mSrc1[i] != mSrc2[i])
     4cc:	99 91       	ld	r25, Y+
     4ce:	81 91       	ld	r24, Z+
     4d0:	98 17       	cp	r25, r24
     4d2:	c1 f3       	breq	.-16     	; 0x4c4 <_Z14wait_for_pressv+0x60>
}

void update_prev_keys()
{  
  for (int i=0; i<NUM_ROWS; i++)
	 prev_keys[i] = keys[i];
     4d4:	80 91 3b 02 	lds	r24, 0x023B
     4d8:	80 93 36 02 	sts	0x0236, r24
     4dc:	80 91 3c 02 	lds	r24, 0x023C
     4e0:	80 93 37 02 	sts	0x0237, r24
     4e4:	80 91 3d 02 	lds	r24, 0x023D
     4e8:	80 93 38 02 	sts	0x0238, r24
     4ec:	80 91 3e 02 	lds	r24, 0x023E
     4f0:	80 93 39 02 	sts	0x0239, r24
     4f4:	80 91 3f 02 	lds	r24, 0x023F
     4f8:	80 93 3a 02 	sts	0x023A, r24
			change = check_for_change( prev_keys, keys2 );
	} while	( change==0 );	// the change has to remain for the debounce time or else not valid.

	// Real event!
	update_prev_keys();
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <_Z10get_columnh>:
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
		if ((mColByte & (1<<i))==0)
			return	i-4;
    return -1;
     502:	90 e0       	ldi	r25, 0x00	; 0
Converts the upper nibble of the column into an actual index
*************************************************************/
byte get_column(byte mColByte)
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
     504:	24 e0       	ldi	r18, 0x04	; 4
     506:	30 e0       	ldi	r19, 0x00	; 0
		if ((mColByte & (1<<i))==0)
     508:	ac 01       	movw	r20, r24
     50a:	02 2e       	mov	r0, r18
     50c:	02 c0       	rjmp	.+4      	; 0x512 <_Z10get_columnh+0x10>
     50e:	55 95       	asr	r21
     510:	47 95       	ror	r20
     512:	0a 94       	dec	r0
     514:	e2 f7       	brpl	.-8      	; 0x50e <_Z10get_columnh+0xc>
     516:	40 ff       	sbrs	r20, 0
     518:	07 c0       	rjmp	.+14     	; 0x528 <_Z10get_columnh+0x26>
Converts the upper nibble of the column into an actual index
*************************************************************/
byte get_column(byte mColByte)
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	28 30       	cpi	r18, 0x08	; 8
     520:	31 05       	cpc	r19, r1
     522:	91 f7       	brne	.-28     	; 0x508 <_Z10get_columnh+0x6>
		if ((mColByte & (1<<i))==0)
			return	i-4;
    return -1;
     524:	8f ef       	ldi	r24, 0xFF	; 255
}
     526:	08 95       	ret
byte get_column(byte mColByte)
{
	//mColByte = ~mColByte;		// pushed will be a 1.  all others zero
	for (int i=4; i<8; i++)
		if ((mColByte & (1<<i))==0)
			return	i-4;
     528:	82 2f       	mov	r24, r18
     52a:	84 50       	subi	r24, 0x04	; 4
     52c:	08 95       	ret

0000052e <_Z8add_keyshh>:
		mNumberKeysPressed
************************************************************/
void add_keys( byte mrow, byte mStartKeyNumber )
{
	// Scan each bit:
	for (int i=4; i<8; i++)
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	70 91 45 02 	lds	r23, 0x0245
     534:	24 e0       	ldi	r18, 0x04	; 4
     536:	30 e0       	ldi	r19, 0x00	; 0
		if (  (mrow & (1<<i)) == 0  )	// pressed,
     538:	ac 01       	movw	r20, r24
     53a:	02 2e       	mov	r0, r18
     53c:	02 c0       	rjmp	.+4      	; 0x542 <_Z8add_keyshh+0x14>
     53e:	55 95       	asr	r21
     540:	47 95       	ror	r20
     542:	0a 94       	dec	r0
     544:	e2 f7       	brpl	.-8      	; 0x53e <_Z8add_keyshh+0x10>
     546:	40 fd       	sbrc	r20, 0
     548:	06 c0       	rjmp	.+12     	; 0x556 <_Z8add_keyshh+0x28>
		{								// add to list
			keys_down[NumberKeysPressed++] = mStartKeyNumber+i-4;	
     54a:	e7 2f       	mov	r30, r23
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	e9 5b       	subi	r30, 0xB9	; 185
     550:	fd 4f       	sbci	r31, 0xFD	; 253
     552:	60 83       	st	Z, r22
     554:	7f 5f       	subi	r23, 0xFF	; 255
		mNumberKeysPressed
************************************************************/
void add_keys( byte mrow, byte mStartKeyNumber )
{
	// Scan each bit:
	for (int i=4; i<8; i++)
     556:	2f 5f       	subi	r18, 0xFF	; 255
     558:	3f 4f       	sbci	r19, 0xFF	; 255
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	28 30       	cpi	r18, 0x08	; 8
     55e:	31 05       	cpc	r19, r1
     560:	59 f7       	brne	.-42     	; 0x538 <_Z8add_keyshh+0xa>
     562:	70 93 45 02 	sts	0x0245, r23
		if (  (mrow & (1<<i)) == 0  )	// pressed,
		{								// add to list
			keys_down[NumberKeysPressed++] = mStartKeyNumber+i-4;	
		}
}
     566:	08 95       	ret

00000568 <_Z14build_key_listPh>:
		2nd Row   :                [ 8, 9, A, B ]
		3rd Row   :                [ C, D, E, F ]
		4th Row   :                [ 10, 11, 12, 13 ]
************************************************************/
void build_key_list( byte* mkeys )
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	ec 01       	movw	r28, r24
	NumberKeysPressed = 0;
     56e:	10 92 45 02 	sts	0x0245, r1
	add_keys( mkeys[0], 0 );
     572:	88 81       	ld	r24, Y
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	0e 94 97 02 	call	0x52e	; 0x52e <_Z8add_keyshh>
	add_keys( mkeys[1], 4 );
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	64 e0       	ldi	r22, 0x04	; 4
     57e:	0e 94 97 02 	call	0x52e	; 0x52e <_Z8add_keyshh>
	add_keys( mkeys[2], 8 );
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	68 e0       	ldi	r22, 0x08	; 8
     586:	0e 94 97 02 	call	0x52e	; 0x52e <_Z8add_keyshh>
	add_keys( mkeys[3], 12);
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	6c e0       	ldi	r22, 0x0C	; 12
     58e:	0e 94 97 02 	call	0x52e	; 0x52e <_Z8add_keyshh>
	add_keys( mkeys[4], 16);
     592:	8c 81       	ldd	r24, Y+4	; 0x04
     594:	60 e1       	ldi	r22, 0x10	; 16
     596:	0e 94 97 02 	call	0x52e	; 0x52e <_Z8add_keyshh>
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <_Z11lookup_charhh>:
mRow - zero indexed ROW_DDR
mCol - zero indexed COL
************************************/
char lookup_char( byte mRow, byte mCol )
{
	byte index = (mRow * MAX_COL) + mCol;
     5a0:	88 0f       	add	r24, r24
     5a2:	88 0f       	add	r24, r24
     5a4:	68 0f       	add	r22, r24
	return assigned_characters[index];
     5a6:	e1 e0       	ldi	r30, 0x01	; 1
     5a8:	f1 e0       	ldi	r31, 0x01	; 1
     5aa:	e6 0f       	add	r30, r22
     5ac:	f1 1d       	adc	r31, r1
}
     5ae:	80 81       	ld	r24, Z
     5b0:	08 95       	ret

000005b2 <_Z16can_file_messageP4sCAN>:
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
************************************************************/
void can_file_message( sCAN* mMsg )
{
}
     5b2:	08 95       	ret

000005b4 <_Z26can_prep_button_roster_msgP4sCAN10uKeyRoster>:
		 [2] lower nibble is 4th row		 
		 [3] upper nibble is 4th row
		 [3] lower nibble is 4th row
************************************************************/
void can_prep_button_roster_msg( sCAN* mMsg, union uKeyRoster mkeypad )
{
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	1f 93       	push	r17
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <_Z26can_prep_button_roster_msgP4sCAN10uKeyRoster+0xc>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	7c 01       	movw	r14, r24
     5c6:	16 2f       	mov	r17, r22
	static byte count = 0;
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_ROSTER, MyInstance );
     5c8:	86 e3       	ldi	r24, 0x36	; 54
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	60 91 91 02 	lds	r22, 0x0291
     5d0:	49 83       	std	Y+1, r20	; 0x01
     5d2:	5a 83       	std	Y+2, r21	; 0x02
     5d4:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	f7 01       	movw	r30, r14
     5de:	80 83       	st	Z, r24
     5e0:	91 83       	std	Z+1, r25	; 0x01
     5e2:	a2 83       	std	Z+2, r26	; 0x02
     5e4:	b3 83       	std	Z+3, r27	; 0x03
    mMsg->data[0] = mkeypad.array[0];	 // Upper Nibble is count of pressed buttons.  Lower nibble is the front edge buttons.
     5e6:	49 81       	ldd	r20, Y+1	; 0x01
     5e8:	45 83       	std	Z+5, r20	; 0x05
    mMsg->data[1] = mkeypad.array[1]; 	 // 
     5ea:	5a 81       	ldd	r21, Y+2	; 0x02
     5ec:	56 83       	std	Z+6, r21	; 0x06
    mMsg->data[2] = mkeypad.array[2];    // 
     5ee:	17 83       	std	Z+7, r17	; 0x07
    mMsg->data[3] = count++;	 		 // 
     5f0:	80 91 53 02 	lds	r24, 0x0253
     5f4:	80 87       	std	Z+8, r24	; 0x08
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	80 93 53 02 	sts	0x0253, r24
    mMsg->header.DLC = 4;
     5fc:	84 81       	ldd	r24, Z+4	; 0x04
     5fe:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     600:	88 60       	ori	r24, 0x08	; 8
     602:	84 83       	std	Z+4, r24	; 0x04
}
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	cf 91       	pop	r28
     60a:	df 91       	pop	r29
     60c:	1f 91       	pop	r17
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <_Z27can_prep_button_pressed_msgP4sCAN>:
		 [...] Last key id
		 [button msg counter] to make each can msg unique.
************************************************************/
byte counter = 0;
void can_prep_button_pressed_msg( sCAN* mMsg )
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
     61a:	85 e3       	ldi	r24, 0x35	; 53
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	60 91 91 02 	lds	r22, 0x0291
     622:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
     626:	68 83       	st	Y, r22
     628:	79 83       	std	Y+1, r23	; 0x01
     62a:	8a 83       	std	Y+2, r24	; 0x02
     62c:	9b 83       	std	Y+3, r25	; 0x03
	if (NumberKeysPressed > 7)
     62e:	90 91 45 02 	lds	r25, 0x0245
     632:	98 30       	cpi	r25, 0x08	; 8
     634:	40 f1       	brcs	.+80     	; 0x686 <_Z27can_prep_button_pressed_msgP4sCAN+0x72>
		NumberKeysPressed = 7;
     636:	87 e0       	ldi	r24, 0x07	; 7
     638:	80 93 45 02 	sts	0x0245, r24

    mMsg->data[0] = NumberKeysPressed;
     63c:	8d 83       	std	Y+5, r24	; 0x05
     63e:	79 e0       	ldi	r23, 0x09	; 9
     640:	48 e0       	ldi	r20, 0x08	; 8
     642:	50 e0       	ldi	r21, 0x00	; 0
    for (int i=0; i<NumberKeysPressed; i++)
     644:	27 e0       	ldi	r18, 0x07	; 7
     646:	30 e0       	ldi	r19, 0x00	; 0
{
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
     648:	a7 e4       	ldi	r26, 0x47	; 71
     64a:	b2 e0       	ldi	r27, 0x02	; 2
		 [2] Second Key id (if 2 pressed)
		 [...] Last key id
		 [button msg counter] to make each can msg unique.
************************************************************/
byte counter = 0;
void can_prep_button_pressed_msg( sCAN* mMsg )
     64c:	fe 01       	movw	r30, r28
     64e:	36 96       	adiw	r30, 0x06	; 6
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
    for (int i=0; i<NumberKeysPressed; i++)
	    mMsg->data[i+1] = keys_down[i];
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	6d 91       	ld	r22, X+
     658:	61 93       	st	Z+, r22
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
    for (int i=0; i<NumberKeysPressed; i++)
     65a:	82 17       	cp	r24, r18
     65c:	93 07       	cpc	r25, r19
     65e:	d4 f3       	brlt	.-12     	; 0x654 <_Z27can_prep_button_pressed_msgP4sCAN+0x40>
	    mMsg->data[i+1] = keys_down[i];

	mMsg->data[NumberKeysPressed+1] = counter++;
     660:	80 91 50 02 	lds	r24, 0x0250
     664:	fe 01       	movw	r30, r28
     666:	e4 0f       	add	r30, r20
     668:	f5 1f       	adc	r31, r21
     66a:	85 83       	std	Z+5, r24	; 0x05
     66c:	8f 5f       	subi	r24, 0xFF	; 255
     66e:	80 93 50 02 	sts	0x0250, r24
    mMsg->header.DLC = 2+NumberKeysPressed;
     672:	97 2f       	mov	r25, r23
     674:	9f 70       	andi	r25, 0x0F	; 15
     676:	99 0f       	add	r25, r25
     678:	8c 81       	ldd	r24, Y+4	; 0x04
     67a:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     67c:	89 2b       	or	r24, r25
     67e:	8c 83       	std	Y+4, r24	; 0x04
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret
{
    mMsg->id 	  = create_CAN_eid( ID_BUTTON_PRESSED, MyInstance );
	if (NumberKeysPressed > 7)
		NumberKeysPressed = 7;

    mMsg->data[0] = NumberKeysPressed;
     686:	9d 83       	std	Y+5, r25	; 0x05
    for (int i=0; i<NumberKeysPressed; i++)
     688:	29 2f       	mov	r18, r25
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	21 15       	cp	r18, r1
     68e:	31 05       	cpc	r19, r1
     690:	39 f0       	breq	.+14     	; 0x6a0 <_Z27can_prep_button_pressed_msgP4sCAN+0x8c>
     692:	a9 01       	movw	r20, r18
     694:	4f 5f       	subi	r20, 0xFF	; 255
     696:	5f 4f       	sbci	r21, 0xFF	; 255
     698:	79 2f       	mov	r23, r25
     69a:	7e 5f       	subi	r23, 0xFE	; 254
     69c:	7f 70       	andi	r23, 0x0F	; 15
     69e:	d4 cf       	rjmp	.-88     	; 0x648 <_Z27can_prep_button_pressed_msgP4sCAN+0x34>
     6a0:	79 2f       	mov	r23, r25
     6a2:	7e 5f       	subi	r23, 0xFE	; 254
     6a4:	7f 70       	andi	r23, 0x0F	; 15
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	da cf       	rjmp	.-76     	; 0x660 <_Z27can_prep_button_pressed_msgP4sCAN+0x4c>

000006ac <_Z17can_init_test_msgPh>:
/************************************************************
  Operates on the currently selected CANPAGE MOB
  Adds a timestamp in addition to can_retrieve_data()
************************************************************/
void can_init_test_msg(byte* tmp)
{
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
	static word count = 0;
	count++;
     6b2:	80 91 51 02 	lds	r24, 0x0251
     6b6:	90 91 52 02 	lds	r25, 0x0252
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	90 93 52 02 	sts	0x0252, r25
     6c0:	80 93 51 02 	sts	0x0251, r24
    msg1.id 	 = create_CAN_eid( 0x02, 0x0004, 0x01);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	64 e0       	ldi	r22, 0x04	; 4
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z14create_CAN_eidhth>
     6d0:	60 93 56 02 	sts	0x0256, r22
     6d4:	70 93 57 02 	sts	0x0257, r23
     6d8:	80 93 58 02 	sts	0x0258, r24
     6dc:	90 93 59 02 	sts	0x0259, r25
    msg1.data[0] = tmp[0];
     6e0:	88 81       	ld	r24, Y
     6e2:	80 93 5b 02 	sts	0x025B, r24
    msg1.data[1] = tmp[1];
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	80 93 5c 02 	sts	0x025C, r24
    msg1.data[2] = tmp[2];
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	80 93 5d 02 	sts	0x025D, r24
    msg1.data[3] = tmp[3];
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	80 93 5e 02 	sts	0x025E, r24
    msg1.data[4] = tmp[4];
     6f8:	8c 81       	ldd	r24, Y+4	; 0x04
     6fa:	80 93 5f 02 	sts	0x025F, r24
    
    msg1.data[5] = PORTC;
     6fe:	88 b1       	in	r24, 0x08	; 8
     700:	80 93 60 02 	sts	0x0260, r24
    msg1.data[6] = SWITCH_DDR;
     704:	87 b1       	in	r24, 0x07	; 7
     706:	80 93 61 02 	sts	0x0261, r24
    msg1.data[7] = 0xFF;
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	80 93 62 02 	sts	0x0262, r24
    msg1.header.DLC = 8;
     710:	80 91 5a 02 	lds	r24, 0x025A
     714:	80 7e       	andi	r24, 0xE0	; 224
    msg1.header.rtr = 0;
     716:	80 61       	ori	r24, 0x10	; 16
     718:	80 93 5a 02 	sts	0x025A, r24
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_Z11OS_Dispatchv>:
		// If the ping happens to be picked up, so much the better.  If it is not detected,
		// it is beyond the max specified anyway.
		
		//sonar_Timeslice();			// Take sonar reading.
	}
}
     722:	08 95       	ret

00000724 <_Z14send_test_msgsv>:
// 		Maybe a sign error somewhere top nibble is taken as signed char.
//		Or the receiver buffer wasn't getting serviced properly.
byte a = 0x11;
void send_test_msgs()
{
	a = 0x00;
     724:	10 92 15 01 	sts	0x0115, r1
	while (1) 
	{
		a += 0x11;
     728:	80 91 15 01 	lds	r24, 0x0115
     72c:	8f 5e       	subi	r24, 0xEF	; 239
     72e:	80 93 15 01 	sts	0x0115, r24
		msg1.data[0] = a;
     732:	80 93 5b 02 	sts	0x025B, r24
		led_on (1);
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <_Z6led_onh>
		can_send_msg( 0, &msg1 	);
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	66 e5       	ldi	r22, 0x56	; 86
     740:	72 e0       	ldi	r23, 0x02	; 2
     742:	0e 94 82 07 	call	0xf04	; 0xf04 <_Z12can_send_msghP4sCAN>
		delay  (one_second/2);
     746:	60 e4       	ldi	r22, 0x40	; 64
     748:	7d e0       	ldi	r23, 0x0D	; 13
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_Z5delayl>
		led_off(1);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z7led_offh>
		delay  (one_second/2);
     758:	60 e4       	ldi	r22, 0x40	; 64
     75a:	7d e0       	ldi	r23, 0x0D	; 13
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_Z5delayl>
     764:	e1 cf       	rjmp	.-62     	; 0x728 <_Z14send_test_msgsv+0x4>

00000766 <_Z11eeprom_testv>:
#define MAX_EEPROM 				512
#define EEPROM_DTC_BASEADDRESS	0	// pass to SaveCodes()

/**************************************************************/
void eeprom_test()
{
     766:	cf 93       	push	r28
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     768:	f9 99       	sbic	0x1f, 1	; 31
     76a:	fe cf       	rjmp	.-4      	; 0x768 <_Z11eeprom_testv+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     76c:	12 bc       	out	0x22, r1	; 34
     76e:	11 bc       	out	0x21, r1	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     770:	f8 9a       	sbi	0x1f, 0	; 31
     772:	c0 b5       	in	r28, 0x20	; 32
	short addr = EEPROM_DTC_BASEADDRESS;
	uint8_t stored = eeprom_read_byte((unsigned char*)addr );
//	eeprom_write_byte((unsigned char*)addr, 0xC3 );

	while (1) { 
		show_result_toggle( stored );
     774:	8c 2f       	mov	r24, r28
     776:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_Z18show_result_toggleh>
		delay(one_second);
     77a:	60 e8       	ldi	r22, 0x80	; 128
     77c:	7a e1       	ldi	r23, 0x1A	; 26
     77e:	86 e0       	ldi	r24, 0x06	; 6
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_Z5delayl>
     786:	f6 cf       	rjmp	.-20     	; 0x774 <_Z11eeprom_testv+0xe>

00000788 <_Z31can_prep_board_presence_requestP4sCANh>:
				3=> Board Description (text)
				
Note: 0x00 Instance for this msg => Intended for all receivers
***************************************************************/
void can_prep_board_presence_request( sCAN* mMsg, byte mType )
{
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
     790:	16 2f       	mov	r17, r22
    mMsg->id 	  = create_CAN_eid( ID_BOARD_PRESENCE_REQUEST, 0x00 );
     792:	80 e1       	ldi	r24, 0x10	; 16
     794:	9c ef       	ldi	r25, 0xFC	; 252
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	88 83       	st	Y, r24
     7a2:	99 83       	std	Y+1, r25	; 0x01
     7a4:	aa 83       	std	Y+2, r26	; 0x02
     7a6:	bb 83       	std	Y+3, r27	; 0x03
    mMsg->data[0] = mType;
     7a8:	1d 83       	std	Y+5, r17	; 0x05
    mMsg->header.DLC = 1;
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     7ae:	82 60       	ori	r24, 0x02	; 2
     7b0:	8c 83       	std	Y+4, r24	; 0x04
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	08 95       	ret

000007ba <_Z23can_prep_system_led_msgP4sCANhhh>:
 SYSTEM_LED_MODE_CONT_PATTERN 	0x04	(blinks Pattern continuously)

OUTPUT: mMsg will be filled in for sending.
************************************************************/
void can_prep_system_led_msg( sCAN* mMsg, byte mDestinationInstance, byte mMode, byte mPattern )
{
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <_Z23can_prep_system_led_msgP4sCANhhh+0xa>
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	8c 01       	movw	r16, r24
    mMsg->id 	  = create_CAN_eid( ID_SYSTEM_LED_REQUEST, mDestinationInstance );
     7ca:	85 e1       	ldi	r24, 0x15	; 21
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	2a 83       	std	Y+2, r18	; 0x02
     7d0:	49 83       	std	Y+1, r20	; 0x01
     7d2:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
     7d6:	f8 01       	movw	r30, r16
     7d8:	60 83       	st	Z, r22
     7da:	71 83       	std	Z+1, r23	; 0x01
     7dc:	82 83       	std	Z+2, r24	; 0x02
     7de:	93 83       	std	Z+3, r25	; 0x03
    mMsg->data[0] = mMode;
     7e0:	49 81       	ldd	r20, Y+1	; 0x01
     7e2:	45 83       	std	Z+5, r20	; 0x05
    mMsg->data[1] = mPattern;		// Lower 4 bits are the pattern!
     7e4:	2a 81       	ldd	r18, Y+2	; 0x02
     7e6:	26 83       	std	Z+6, r18	; 0x06
    mMsg->header.DLC = 2;
     7e8:	84 81       	ldd	r24, Z+4	; 0x04
     7ea:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     7ec:	84 60       	ori	r24, 0x04	; 4
     7ee:	84 83       	std	Z+4, r24	; 0x04
}
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	cf 91       	pop	r28
     7f6:	df 91       	pop	r29
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <_Z23can_prep_test_backlightP4sCANt>:
#define LCD_CMD_SET_WINDOW			0x10
#define LCD_CMD_BEEP				0x20		// Specify On & Off time in milliseconds
#define LCD_CMD_BACKLIGHT			0x30		// Specify the percent * 10 in word.

void can_prep_test_backlight( sCAN* mMsg, word mValue )
{
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
     808:	8b 01       	movw	r16, r22
    mMsg->id 	  = create_CAN_eid( 0x00, ID_LCD_COMMAND, MyInstance );
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	60 e6       	ldi	r22, 0x60	; 96
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	40 91 91 02 	lds	r20, 0x0291
     814:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z14create_CAN_eidhth>
     818:	68 83       	st	Y, r22
     81a:	79 83       	std	Y+1, r23	; 0x01
     81c:	8a 83       	std	Y+2, r24	; 0x02
     81e:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = LCD_CMD_BACKLIGHT;
     820:	80 e3       	ldi	r24, 0x30	; 48
     822:	8d 83       	std	Y+5, r24	; 0x05
	float duty    = ((float)mValue / 1024.0)*1000.;
     824:	b8 01       	movw	r22, r16
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__floatunsisf>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e8       	ldi	r20, 0x80	; 128
     834:	5a e3       	ldi	r21, 0x3A	; 58
     836:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	4a e7       	ldi	r20, 0x7A	; 122
     840:	54 e4       	ldi	r21, 0x44	; 68
     842:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
	word dutyW = duty;
     846:	0e 94 a4 10 	call	0x2148	; 0x2148 <__fixunssfsi>
	mMsg->data[1] = hi(dutyW);
     84a:	7e 83       	std	Y+6, r23	; 0x06
	mMsg->data[2] = lo(dutyW);
     84c:	6f 83       	std	Y+7, r22	; 0x07
    mMsg->header.DLC = 3;
     84e:	8c 81       	ldd	r24, Y+4	; 0x04
     850:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     852:	86 60       	ori	r24, 0x06	; 6
     854:	8c 83       	std	Y+4, r24	; 0x04
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	08 95       	ret

00000860 <_Z17can_prep_lcd_beepP4sCANt>:
void can_prep_lcd_beep( sCAN* mMsg, word mValue )
{   
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
     86a:	16 2f       	mov	r17, r22
     86c:	07 2f       	mov	r16, r23
    mMsg->id 	  = create_CAN_eid( 0x00, ID_LCD_COMMAND, MyInstance );
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	60 e6       	ldi	r22, 0x60	; 96
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	40 91 91 02 	lds	r20, 0x0291
     878:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z14create_CAN_eidhth>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	88 83       	st	Y, r24
     882:	99 83       	std	Y+1, r25	; 0x01
     884:	aa 83       	std	Y+2, r26	; 0x02
     886:	bb 83       	std	Y+3, r27	; 0x03
	mMsg->data[0] = LCD_CMD_BEEP;
     888:	80 e2       	ldi	r24, 0x20	; 32
     88a:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] = hi(mValue);
     88c:	0e 83       	std	Y+6, r16	; 0x06
	mMsg->data[2] = lo(mValue);
     88e:	1f 83       	std	Y+7, r17	; 0x07
	mMsg->data[3] = 3;
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC = 4;
     894:	8c 81       	ldd	r24, Y+4	; 0x04
     896:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     898:	88 60       	ori	r24, 0x08	; 8
     89a:	8c 83       	std	Y+4, r24	; 0x04
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <_Z16can_prep_pwm_msgP4sCANt>:
// Extract the PWM word array; Updates PWM array
void can_prep_pwm_msg( sCAN* mMsg, word mPWM )
{
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	ec 01       	movw	r28, r24
     8b0:	8b 01       	movw	r16, r22
		4..7		8..11
		12..15		16..18		19..22		23..26
		27..30		31..34		35..38		39..42
		43..46
		47..48	nFFF 0FFF ] end.   */
    mMsg->id 	  = create_CAN_eid( 0x00, ID_PWM_CHANNEL_UPDATE, MyInstance );
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	60 e8       	ldi	r22, 0x80	; 128
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	40 91 91 02 	lds	r20, 0x0291
     8bc:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z14create_CAN_eidhth>
     8c0:	68 83       	st	Y, r22
     8c2:	79 83       	std	Y+1, r23	; 0x01
     8c4:	8a 83       	std	Y+2, r24	; 0x02
     8c6:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->header.DLC = 8;
     8c8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ca:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
     8cc:	80 61       	ori	r24, 0x10	; 16
     8ce:	8c 83       	std	Y+4, r24	; 0x04
	byte upper_nibble 		 = ((mPWM & 0x0F00)>>8);
     8d0:	c8 01       	movw	r24, r16
     8d2:	80 70       	andi	r24, 0x00	; 0
     8d4:	9f 70       	andi	r25, 0x0F	; 15
	byte lower_nibble 		 = ((mPWM & 0x00FF));
	byte first_index         =  0;
	mMsg->data[0] 			 = ((first_index<<4) | upper_nibble);
     8d6:	9d 83       	std	Y+5, r25	; 0x05
	mMsg->data[1] 			 = lower_nibble;
     8d8:	0e 83       	std	Y+6, r16	; 0x06
	mMsg->data[2]			 = upper_nibble;
     8da:	9f 83       	std	Y+7, r25	; 0x07
	mMsg->data[3] 			 = lower_nibble;
     8dc:	08 87       	std	Y+8, r16	; 0x08
	mMsg->data[4] 			 = upper_nibble;
     8de:	99 87       	std	Y+9, r25	; 0x09
	mMsg->data[5] 			 = lower_nibble;
     8e0:	0a 87       	std	Y+10, r16	; 0x0a
	mMsg->data[6] 			 = upper_nibble;
     8e2:	9b 87       	std	Y+11, r25	; 0x0b
	mMsg->data[7] 			 = lower_nibble;	
     8e4:	0c 87       	std	Y+12, r16	; 0x0c
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <_Z25app_default_configurationv>:
	Only 1 time for the life of the board (or until it is reflashed)  
	To set the application defaults.		
 *******************************************************/	
void app_default_configuration()
{
	config_byte_1 = 0;
     8f0:	10 92 0e 03 	sts	0x030E, r1
	config_byte_2 = 0;
     8f4:	10 92 0f 03 	sts	0x030F, r1
}
     8f8:	08 95       	ret

000008fa <_Z8save_calv>:

Saves to EEPROM 
***********************************************************/
byte* save_cal()
{
	byte* addr = save_configuration();
     8fa:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z18save_configurationv>
	addr = save_configuration_eeprom	(addr);
     8fe:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_Z25save_configuration_eepromPh>
	return addr;
};
     902:	08 95       	ret

00000904 <_Z13config_changeh>:
}

/* Callback for configuration change. */
void config_change( byte mByteChanged )
{
	save_cal();	
     904:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z8save_calv>
}
     908:	08 95       	ret

0000090a <_Z8read_calv>:

Read from EEPROM, and stores into the RAM
*************************************************************/
byte* read_cal()
{
	byte* addr = read_configuration();
     90a:	0e 94 9b 10 	call	0x2136	; 0x2136 <_Z18read_configurationv>
	addr = read_configuration_eeprom	(addr);
     90e:	0e 94 5f 10 	call	0x20be	; 0x20be <_Z25read_configuration_eepromPh>
	return addr;	
};
     912:	08 95       	ret

00000914 <_Z13getReportRatev>:
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     914:	80 91 0f 03 	lds	r24, 0x030F
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	90 70       	andi	r25, 0x00	; 0
     91e:	80 32       	cpi	r24, 0x20	; 32
     920:	91 05       	cpc	r25, r1
     922:	91 f0       	breq	.+36     	; 0x948 <_Z13getReportRatev+0x34>
     924:	81 32       	cpi	r24, 0x21	; 33
     926:	91 05       	cpc	r25, r1
     928:	44 f0       	brlt	.+16     	; 0x93a <_Z13getReportRatev+0x26>
     92a:	80 34       	cpi	r24, 0x40	; 64
     92c:	91 05       	cpc	r25, r1
     92e:	51 f0       	breq	.+20     	; 0x944 <_Z13getReportRatev+0x30>
     930:	80 38       	cpi	r24, 0x80	; 128
     932:	91 05       	cpc	r25, r1
     934:	29 f4       	brne	.+10     	; 0x940 <_Z13getReportRatev+0x2c>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
     936:	84 e1       	ldi	r24, 0x14	; 20
     938:	08 95       	ret
			counter in 5ms timeslice.
		   -1 means no Report desired!
*************************************************************/
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
     93a:	80 31       	cpi	r24, 0x10	; 16
     93c:	91 05       	cpc	r25, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <_Z13getReportRatev+0x38>
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	08 95       	ret
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
     944:	8a e0       	ldi	r24, 0x0A	; 10
     946:	08 95       	ret
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	08 95       	ret
byte getReportRate()  			
{  
	switch ( (config_byte_2 & 0xF0) )
	{
	case MODE_SEND_UPDATES_NONE :	return -1; 	break;	
	case MODE_SEND_UPDATES_10ms :	return 2; 	break;
     94c:	82 e0       	ldi	r24, 0x02	; 2
	case MODE_SEND_UPDATES_20ms :	return 4; 	break;
	case MODE_SEND_UPDATES_50ms :	return 10; 	break;
	case MODE_SEND_UPDATES_100ms:	return 20; 	break;
	default: return -1;  break;
	}
}	
     94e:	08 95       	ret

00000950 <_Z15set_rx_callbackPFvP4sCANE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Receive interrupt
			which is not handled by the can_board_msg.c system message handler
******************************************************************************/
void set_rx_callback( void (*mCallback)(struct sCAN*) )
{
	rx_call_back = mCallback;
     950:	90 93 8e 02 	sts	0x028E, r25
     954:	80 93 8d 02 	sts	0x028D, r24
}
     958:	08 95       	ret

0000095a <_Z15set_tx_callbackPFvvE>:
DESCRIPTION:  CAN ISR will call the function sent here on a Transmit interrupt
			which is not handled by the can_board_msg.c system message handler
*****************************************************************************/
void set_tx_callback( void (*mCallback)() )
{
	tx_call_back = mCallback;
     95a:	90 93 90 02 	sts	0x0290, r25
     95e:	80 93 8f 02 	sts	0x028F, r24
}
     962:	08 95       	ret

00000964 <_Z26can_add_instance_to_filterht>:
* This requires that the instance matches this module's MyInstance
   before the message is accepted.  After doing this, the software check 
   is not required for that MOb.
*****************************************************************************/
void can_add_instance_to_filter( byte mMOb_Number, word mInstance )
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         		// Save current MOB
     968:	ed ee       	ldi	r30, 0xED	; 237
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	20 81       	ld	r18, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     96e:	82 95       	swap	r24
     970:	80 7f       	andi	r24, 0xF0	; 240
     972:	80 83       	st	Z, r24

	byte idt3 = (CANIDT3 & 0xF8) | ((mInstance & 0xE0)>>5);
     974:	c1 ef       	ldi	r28, 0xF1	; 241
     976:	d0 e0       	ldi	r29, 0x00	; 0
     978:	38 81       	ld	r19, Y
     97a:	cb 01       	movw	r24, r22
     97c:	80 7e       	andi	r24, 0xE0	; 224
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	96 95       	lsr	r25
     982:	87 95       	ror	r24
     984:	92 95       	swap	r25
     986:	82 95       	swap	r24
     988:	8f 70       	andi	r24, 0x0F	; 15
     98a:	89 27       	eor	r24, r25
     98c:	9f 70       	andi	r25, 0x0F	; 15
     98e:	89 27       	eor	r24, r25
     990:	38 7f       	andi	r19, 0xF8	; 248
     992:	38 2b       	or	r19, r24
	byte idt4 = ((mInstance<<3)  | (CANIDT4 & 0x07));
     994:	a0 ef       	ldi	r26, 0xF0	; 240
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	8c 91       	ld	r24, X
     99a:	66 0f       	add	r22, r22
     99c:	66 0f       	add	r22, r22
     99e:	66 0f       	add	r22, r22
     9a0:	87 70       	andi	r24, 0x07	; 7
     9a2:	68 2b       	or	r22, r24

	CANIDT3 = idt3;
     9a4:	38 83       	st	Y, r19
	CANIDT4 = idt4;	
     9a6:	6c 93       	st	X, r22
	CANIDM3 |= 0x07;
     9a8:	a5 ef       	ldi	r26, 0xF5	; 245
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	8c 91       	ld	r24, X
     9ae:	87 60       	ori	r24, 0x07	; 7
     9b0:	8c 93       	st	X, r24
	CANIDM4 |= 0xF8;	
     9b2:	a4 ef       	ldi	r26, 0xF4	; 244
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	8c 91       	ld	r24, X
     9b8:	88 6f       	ori	r24, 0xF8	; 248
     9ba:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     9bc:	20 83       	st	Z, r18
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <_Z31can_remove_instance_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     9c4:	ed ee       	ldi	r30, 0xED	; 237
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	90 81       	ld	r25, Z
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     9ca:	82 95       	swap	r24
     9cc:	80 7f       	andi	r24, 0xF0	; 240
     9ce:	80 83       	st	Z, r24
	CANIDM3 &= 0xF8;
     9d0:	a5 ef       	ldi	r26, 0xF5	; 245
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	8c 91       	ld	r24, X
     9d6:	88 7f       	andi	r24, 0xF8	; 248
     9d8:	8c 93       	st	X, r24
	CANIDM4 &= 0x07;
     9da:	a4 ef       	ldi	r26, 0xF4	; 244
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	8c 91       	ld	r24, X
     9e0:	87 70       	andi	r24, 0x07	; 7
     9e2:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     9e4:	90 83       	st	Z, r25
}
     9e6:	08 95       	ret

000009e8 <_Z10can_set_idh6idType>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_id( byte mMOb_Number, tID id )
{
     9e8:	25 2f       	mov	r18, r21
     9ea:	36 2f       	mov	r19, r22
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     9ec:	ed ee       	ldi	r30, 0xED	; 237
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	50 81       	ld	r21, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     9f2:	82 95       	swap	r24
     9f4:	80 7f       	andi	r24, 0xF0	; 240
     9f6:	80 83       	st	Z, r24
	
	// Set CAN id
	// Block (5 bits) & Upper 3 of ID
	byte idt1 = ((id.group.block & 0x1F)<<3) | ((id.group.id & 0xE000)>>13);
     9f8:	86 2f       	mov	r24, r22
     9fa:	82 95       	swap	r24
     9fc:	86 95       	lsr	r24
     9fe:	87 70       	andi	r24, 0x07	; 7
     a00:	44 0f       	add	r20, r20
     a02:	44 0f       	add	r20, r20
     a04:	44 0f       	add	r20, r20
     a06:	48 2b       	or	r20, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     a08:	c9 01       	movw	r24, r18
     a0a:	80 7e       	andi	r24, 0xE0	; 224
     a0c:	9f 71       	andi	r25, 0x1F	; 31
     a0e:	96 95       	lsr	r25
     a10:	87 95       	ror	r24
     a12:	92 95       	swap	r25
     a14:	82 95       	swap	r24
     a16:	8f 70       	andi	r24, 0x0F	; 15
     a18:	89 27       	eor	r24, r25
     a1a:	9f 70       	andi	r25, 0x0F	; 15
     a1c:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3)  | ((id.group.instance & 0xE0)>>5);
     a1e:	22 0f       	add	r18, r18
     a20:	22 0f       	add	r18, r18
     a22:	22 0f       	add	r18, r18
     a24:	37 2f       	mov	r19, r23
     a26:	32 95       	swap	r19
     a28:	36 95       	lsr	r19
     a2a:	37 70       	andi	r19, 0x07	; 7
     a2c:	23 2b       	or	r18, r19
	byte idt4 =  (id.group.instance<<3) | 0x00;		// RTR bits
     a2e:	77 0f       	add	r23, r23
     a30:	77 0f       	add	r23, r23
     a32:	77 0f       	add	r23, r23
	CANIDT1 = idt1;
     a34:	40 93 f3 00 	sts	0x00F3, r20
	CANIDT2 = idt2;
     a38:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     a3c:	20 93 f1 00 	sts	0x00F1, r18
	CANIDT4 = idt4;
     a40:	70 93 f0 00 	sts	0x00F0, r23
	CANPAGE = savecanpage;
     a44:	50 83       	st	Z, r21
}
     a46:	08 95       	ret

00000a48 <_Z20can_add_id_to_filterhtt>:
		mID_mask	- Mask of which bits in the ID portion of the tID are important
		mID_tag		- Tag (value) of the ID bits which must be matched.
* This is done independent of the instance filtering.  
*****************************************************************************/
void can_add_id_to_filter( byte mMOb_Number, word mID_mask, word mID_tag )
{
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	f8 2e       	mov	r15, r24
     a54:	8b 01       	movw	r16, r22
     a56:	ca 01       	movw	r24, r20
	tID id   = create_CAN_eid( mID_tag,  0 );
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
     a5e:	c7 2f       	mov	r28, r23
     a60:	d8 2f       	mov	r29, r24
	tID mask = create_CAN_eid( mID_mask, 0 );
     a62:	c8 01       	movw	r24, r16
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
     a6a:	27 2f       	mov	r18, r23
     a6c:	38 2f       	mov	r19, r24

	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     a6e:	ed ee       	ldi	r30, 0xED	; 237
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	00 81       	ld	r16, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     a74:	f2 94       	swap	r15
     a76:	b0 ef       	ldi	r27, 0xF0	; 240
     a78:	fb 22       	and	r15, r27
     a7a:	f0 82       	st	Z, r15
	
	// Ignore Block & Instance
	byte idt1 = (CANIDT1 & 0xF8) | ((id.group.id & 0xE000)>>13);
     a7c:	43 ef       	ldi	r20, 0xF3	; 243
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	da 01       	movw	r26, r20
     a82:	6c 91       	ld	r22, X
     a84:	8d 2f       	mov	r24, r29
     a86:	82 95       	swap	r24
     a88:	86 95       	lsr	r24
     a8a:	87 70       	andi	r24, 0x07	; 7
     a8c:	68 7f       	andi	r22, 0xF8	; 248
     a8e:	68 2b       	or	r22, r24
	byte idt2 = ((id.group.id & 0x1FE0)>>5);
     a90:	ce 01       	movw	r24, r28
     a92:	80 7e       	andi	r24, 0xE0	; 224
     a94:	9f 71       	andi	r25, 0x1F	; 31
     a96:	96 95       	lsr	r25
     a98:	87 95       	ror	r24
     a9a:	92 95       	swap	r25
     a9c:	82 95       	swap	r24
     a9e:	8f 70       	andi	r24, 0x0F	; 15
     aa0:	89 27       	eor	r24, r25
     aa2:	9f 70       	andi	r25, 0x0F	; 15
     aa4:	89 27       	eor	r24, r25
	byte idt3 = ((id.group.id & 0x001F)<<3) | (CANIDT3 & 0x07);
     aa6:	a1 ef       	ldi	r26, 0xF1	; 241
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	7c 91       	ld	r23, X
     aac:	fc 2e       	mov	r15, r28
     aae:	ff 0c       	add	r15, r15
     ab0:	ff 0c       	add	r15, r15
     ab2:	ff 0c       	add	r15, r15
     ab4:	77 70       	andi	r23, 0x07	; 7
     ab6:	f7 2a       	or	r15, r23
	CANIDT1 = idt1;
     ab8:	ea 01       	movw	r28, r20
     aba:	68 83       	st	Y, r22
	CANIDT2 = idt2;
     abc:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT3 = idt3;
     ac0:	fc 92       	st	X, r15

	// Ignore Block & Instance
	byte idm1 = (CANIDM1 & 0xF8) | ((mask.group.id & 0xE000)>>13);
     ac2:	c7 ef       	ldi	r28, 0xF7	; 247
     ac4:	d0 e0       	ldi	r29, 0x00	; 0
     ac6:	48 81       	ld	r20, Y
     ac8:	83 2f       	mov	r24, r19
     aca:	82 95       	swap	r24
     acc:	86 95       	lsr	r24
     ace:	87 70       	andi	r24, 0x07	; 7
     ad0:	48 7f       	andi	r20, 0xF8	; 248
     ad2:	48 2b       	or	r20, r24
	byte idm2 = ((mask.group.id & 0x1FE0)>>5);
     ad4:	c9 01       	movw	r24, r18
     ad6:	80 7e       	andi	r24, 0xE0	; 224
     ad8:	9f 71       	andi	r25, 0x1F	; 31
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	92 95       	swap	r25
     ae0:	82 95       	swap	r24
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	89 27       	eor	r24, r25
     ae6:	9f 70       	andi	r25, 0x0F	; 15
     ae8:	89 27       	eor	r24, r25
	byte idm3 = ((mask.group.id & 0x001F)<<3) | (CANIDM3 & 0x07);
     aea:	a5 ef       	ldi	r26, 0xF5	; 245
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	5c 91       	ld	r21, X
     af0:	22 0f       	add	r18, r18
     af2:	22 0f       	add	r18, r18
     af4:	22 0f       	add	r18, r18
     af6:	57 70       	andi	r21, 0x07	; 7
     af8:	25 2b       	or	r18, r21
	CANIDM1 = idm1;
     afa:	48 83       	st	Y, r20
	CANIDM2 = idm2;
     afc:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM3 = idm3;
     b00:	2c 93       	st	X, r18
	CANPAGE = savecanpage;
     b02:	00 83       	st	Z, r16
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	08 95       	ret

00000b10 <_Z25can_remove_id_from_filterh>:
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_id_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB	
     b10:	ed ee       	ldi	r30, 0xED	; 237
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b16:	82 95       	swap	r24
     b18:	80 7f       	andi	r24, 0xF0	; 240
     b1a:	80 83       	st	Z, r24
	byte idm1 = 0xF8;
	byte idm2 = 0;
	byte idm3 = 0x07;
	CANIDM1 &= idm1;
     b1c:	a7 ef       	ldi	r26, 0xF7	; 247
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	8c 91       	ld	r24, X
     b22:	88 7f       	andi	r24, 0xF8	; 248
     b24:	8c 93       	st	X, r24
	CANIDM2 &= idm2;
     b26:	a6 ef       	ldi	r26, 0xF6	; 246
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	8c 91       	ld	r24, X
     b2c:	1c 92       	st	X, r1
	CANIDM3 &= idm3;
     b2e:	a5 ef       	ldi	r26, 0xF5	; 245
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	8c 91       	ld	r24, X
     b34:	87 70       	andi	r24, 0x07	; 7
     b36:	8c 93       	st	X, r24
	CANPAGE = savecanpage;
     b38:	90 83       	st	Z, r25
}
     b3a:	08 95       	ret

00000b3c <_Z12can_set_maskhss>:
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     b3c:	ed ee       	ldi	r30, 0xED	; 237
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b42:	82 95       	swap	r24
     b44:	80 7f       	andi	r24, 0xF0	; 240
     b46:	80 83       	st	Z, r24
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     b48:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     b4c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     b50:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     b54:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     b58:	90 83       	st	Z, r25
}
     b5a:	08 95       	ret

00000b5c <_Z11can_set_taghss>:
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_set_tag(byte mMOb_Number, short mTagLow, short mTagHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     b5c:	ed ee       	ldi	r30, 0xED	; 237
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	90 81       	ld	r25, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     b62:	82 95       	swap	r24
     b64:	80 7f       	andi	r24, 0xF0	; 240
     b66:	80 83       	st	Z, r24
	
	CANIDM1 = ((mTagLow & 0x00FF)>>0);    	// 
     b68:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mTagLow & 0xFF00)>>8);    	// 
     b6c:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mTagHigh & 0x00FF)>>0);    	// 
     b70:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mTagHigh & 0xFF00)>>8);    	// 	
     b74:	50 93 f4 00 	sts	0x00F4, r21
	CANPAGE = savecanpage;
     b78:	90 83       	st	Z, r25
}
     b7a:	08 95       	ret

00000b7c <_Z21can_setup_receive_mobhssh>:
	mDLC		: Data Length Check (0..8)
Returns:        none
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_setup_receive_mob( byte mMobNumber, short mMaskLow, short mMaskHigh, byte mDLC )
{
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
	int8_t savecanpage;
	savecanpage = CANPAGE;         			// Save current MOB
     b82:	ed ee       	ldi	r30, 0xED	; 237
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	10 81       	ld	r17, Z

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
     b88:	38 2f       	mov	r19, r24
     b8a:	32 95       	swap	r19
     b8c:	30 7f       	andi	r19, 0xF0	; 240
     b8e:	30 83       	st	Z, r19
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
     b90:	ce ed       	ldi	r28, 0xDE	; 222
     b92:	d0 e0       	ldi	r29, 0x00	; 0
     b94:	98 81       	ld	r25, Y
     b96:	a1 e0       	ldi	r26, 0x01	; 1
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <_Z21can_setup_receive_mobhssh+0x24>
     b9c:	aa 0f       	add	r26, r26
     b9e:	bb 1f       	adc	r27, r27
     ba0:	8a 95       	dec	r24
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <_Z21can_setup_receive_mobhssh+0x20>
     ba4:	9a 2b       	or	r25, r26
     ba6:	98 83       	st	Y, r25
Description:    This function sets up a MOB for reception
*****************************************************************************/
void can_set_mask(byte mMOb_Number, short mMaskLow, short mMaskHigh )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;         // Save current MOB
     ba8:	80 81       	ld	r24, Z
	CANPAGE   = ( mMOb_Number << MOBNB0 );
     baa:	30 83       	st	Z, r19
	
	CANIDM1 = ((mMaskLow & 0x00FF)>>0);    	
     bac:	60 93 f7 00 	sts	0x00F7, r22
	CANIDM2 = ((mMaskLow & 0xFF00)>>8);    	
     bb0:	70 93 f6 00 	sts	0x00F6, r23
	CANIDM3 = ((mMaskHigh & 0x00FF)>>0);    	
     bb4:	40 93 f5 00 	sts	0x00F5, r20
	CANIDM4 = ((mMaskHigh & 0xFF00)>>8);
     bb8:	50 93 f4 00 	sts	0x00F4, r21
	
	CANPAGE = savecanpage;
     bbc:	80 83       	st	Z, r24

	CANPAGE= ( mMobNumber << MOBNB0 );    	// Select MOB n
	// SETUP MOBn for RECEPTION : 
	CANIE2 |= ( 1 << mMobNumber );     		// Enable interrupts on mob1 for reception and transmission		
	can_set_mask( mMobNumber, mMaskLow, mMaskHigh );	
	CANCDMOB = ( 1 << CONMOB1) | ( 1 << IDE ) | ( mDLC << DLC0);  // Enable Reception 29 bit IDE DLC8
     bbe:	20 69       	ori	r18, 0x90	; 144
     bc0:	20 93 ef 00 	sts	0x00EF, r18
	CANGCON |= ( 1 << ENASTB );         // Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
     bc4:	a8 ed       	ldi	r26, 0xD8	; 216
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	8c 91       	ld	r24, X
     bca:	82 60       	ori	r24, 0x02	; 2
     bcc:	8c 93       	st	X, r24
	
	CANPAGE = savecanpage;   
     bce:	10 83       	st	Z, r17
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	08 95       	ret

00000bd8 <_Z13can_init_mobsv>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_init_mobs()
{
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
   // SETUP MOB0 for Module Specific Transmit (MyInstance tagged)
   
   // SETUP MOB1 for Module Specific Reception (MyInstance filtered)
   can_setup_receive_mob	 ( 1, 0x0000, 0x0000, 8 );
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	28 e0       	ldi	r18, 0x08	; 8
     bf0:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z21can_setup_receive_mobhssh>
   can_add_instance_to_filter( 1, MyInstance 		);
     bf4:	60 91 91 02 	lds	r22, 0x0291
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	0e 94 b2 04 	call	0x964	; 0x964 <_Z26can_add_instance_to_filterht>

   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	28 e0       	ldi	r18, 0x08	; 8
     c0c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     c10:	cd ee       	ldi	r28, 0xED	; 237
     c12:	d0 e0       	ldi	r29, 0x00	; 0
     c14:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     c16:	80 e3       	ldi	r24, 0x30	; 48
     c18:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     c1a:	05 ef       	ldi	r16, 0xF5	; 245
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	f8 01       	movw	r30, r16
     c20:	80 81       	ld	r24, Z
     c22:	88 7f       	andi	r24, 0xF8	; 248
     c24:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     c26:	84 ef       	ldi	r24, 0xF4	; 244
     c28:	e8 2e       	mov	r14, r24
     c2a:	f1 2c       	mov	r15, r1
     c2c:	f7 01       	movw	r30, r14
     c2e:	80 81       	ld	r24, Z
     c30:	87 70       	andi	r24, 0x07	; 7
     c32:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     c34:	98 83       	st	Y, r25
   // SETUP MOB2 Unused

   // SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance - checks done in software):
   can_setup_receive_mob		  ( 3, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 3 					 );
   can_add_id_to_filter			  ( 3, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	63 e2       	ldi	r22, 0x23	; 35
     c3a:	7c ef       	ldi	r23, 0xFC	; 252
     c3c:	43 e2       	ldi	r20, 0x23	; 35
     c3e:	5c ef       	ldi	r21, 0xFC	; 252
     c40:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z20can_add_id_to_filterhtt>
/* can_setup_receive_mob		  ( 4, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 4 					 );
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	28 e0       	ldi	r18, 0x08	; 8
     c50:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z21can_setup_receive_mobhssh>
  and all Instances. Use this for broadcast messages (intended for all receivers)
*****************************************************************************/
void can_remove_instance_from_filter( byte mMOb_Number )
{
	int8_t savecanpage;
	savecanpage = CANPAGE;					// Save current MOB
     c54:	98 81       	ld	r25, Y
	CANPAGE  = ( mMOb_Number << MOBNB0 );	
     c56:	80 e5       	ldi	r24, 0x50	; 80
     c58:	88 83       	st	Y, r24
	CANIDM3 &= 0xF8;
     c5a:	f8 01       	movw	r30, r16
     c5c:	80 81       	ld	r24, Z
     c5e:	88 7f       	andi	r24, 0xF8	; 248
     c60:	80 83       	st	Z, r24
	CANIDM4 &= 0x07;
     c62:	f7 01       	movw	r30, r14
     c64:	80 81       	ld	r24, Z
     c66:	87 70       	andi	r24, 0x07	; 7
     c68:	80 83       	st	Z, r24
	CANPAGE = savecanpage;
     c6a:	98 83       	st	Y, r25
   can_add_id_to_filter			  ( 4, ID_INSTANCE_QUERY, ID_INSTANCE_QUERY ); */

   // SETUP MOB5 for BROADCAST RECEIVE (no Instance):
   can_setup_receive_mob		  ( 5, 0x0000, 0x0000, 8 );
   can_remove_instance_from_filter( 5 					 );
   can_add_id_to_filter			  ( 5, ID_SYSTEM_REQUEST_MASK, ID_SYSTEM_REQUEST_MASK );
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	7c ef       	ldi	r23, 0xFC	; 252
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	5c ef       	ldi	r21, 0xFC	; 252
     c76:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z20can_add_id_to_filterhtt>
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	08 95       	ret

00000c88 <_Z15can_disable_mobh>:
			ID_INSTANCE_RESERVE_REQUEST 
******************************************************************************/

void can_disable_mob( byte mob )
{
	  byte restore = CANPAGE;
     c88:	ed ee       	ldi	r30, 0xED	; 237
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	90 81       	ld	r25, Z
      CANPAGE  = ( mob << 4 );    // Selects Message Object 0-5
     c8e:	82 95       	swap	r24
     c90:	80 7f       	andi	r24, 0xF0	; 240
     c92:	80 83       	st	Z, r24
      CANCDMOB = 0x00;           // Disable mob
     c94:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     c98:	10 92 ee 00 	sts	0x00EE, r1
      CANPAGE  = restore;
     c9c:	90 83       	st	Z, r25
}
     c9e:	08 95       	ret

00000ca0 <_Z15can_retrieve_idP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
     ca0:	fc 01       	movw	r30, r24
	// Retrieve CAN id
	word idt1 = CANIDT1;
     ca2:	40 91 f3 00 	lds	r20, 0x00F3
     ca6:	50 e0       	ldi	r21, 0x00	; 0
	word idt2 = CANIDT2;
     ca8:	20 91 f2 00 	lds	r18, 0x00F2
	word idt3 = CANIDT3;
     cac:	80 91 f1 00 	lds	r24, 0x00F1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
	word idt4 = CANIDT4;
     cb2:	a0 91 f0 00 	lds	r26, 0x00F0
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)
     cb6:	ba 01       	movw	r22, r20
     cb8:	76 95       	lsr	r23
     cba:	67 95       	ror	r22
     cbc:	76 95       	lsr	r23
     cbe:	67 95       	ror	r22
     cc0:	76 95       	lsr	r23
     cc2:	67 95       	ror	r22
     cc4:	60 83       	st	Z, r22
*****************************************************************************/
void can_retrieve_id( struct sCAN* mMsg )
{
	// Retrieve CAN id
	word idt1 = CANIDT1;
	word idt2 = CANIDT2;
     cc6:	30 e0       	ldi	r19, 0x00	; 0
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	22 95       	swap	r18
     cce:	32 95       	swap	r19
     cd0:	30 7f       	andi	r19, 0xF0	; 240
     cd2:	32 27       	eor	r19, r18
     cd4:	20 7f       	andi	r18, 0xF0	; 240
     cd6:	32 27       	eor	r19, r18
	word idt2 = CANIDT2;
	word idt3 = CANIDT3;
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
     cd8:	54 2f       	mov	r21, r20
     cda:	44 27       	eor	r20, r20
     cdc:	52 95       	swap	r21
     cde:	55 0f       	add	r21, r21
     ce0:	50 7e       	andi	r21, 0xE0	; 224
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     ce2:	24 2b       	or	r18, r20
     ce4:	35 2b       	or	r19, r21
	word idt4 = CANIDT4;
	mMsg->id.group.block = (idt1 >> 3);		// BLOCK = UPPER NIBBLE+1 (5 BITS)

	word tmpW1 = ((idt1 & 0x07)<<(5+8));	// Lowest 3 make the highest 3 of id
	word tmpW2 = (idt2<<5);					// all 8 bits shifted up snug.
	word tmpW3 = (idt3 & 0xF8)>>3;		// 5 more form the least significant bits.
     ce6:	ac 01       	movw	r20, r24
     ce8:	56 95       	lsr	r21
     cea:	47 95       	ror	r20
     cec:	56 95       	lsr	r21
     cee:	47 95       	ror	r20
     cf0:	56 95       	lsr	r21
     cf2:	47 95       	ror	r20
	mMsg->id.group.id = tmpW1 | tmpW2 | tmpW3;
     cf4:	24 2b       	or	r18, r20
     cf6:	35 2b       	or	r19, r21
     cf8:	32 83       	std	Z+2, r19	; 0x02
     cfa:	21 83       	std	Z+1, r18	; 0x01

	tmpW1 = ((idt3 & 0x07)<<5);
     cfc:	82 95       	swap	r24
     cfe:	88 0f       	add	r24, r24
     d00:	80 7e       	andi	r24, 0xE0	; 224
	mMsg->id.group.instance = ( tmpW1 | (idt4>>3));		// INSTANCE
     d02:	a6 95       	lsr	r26
     d04:	a6 95       	lsr	r26
     d06:	a6 95       	lsr	r26
     d08:	a8 2b       	or	r26, r24
     d0a:	a3 83       	std	Z+3, r26	; 0x03
}
     d0c:	08 95       	ret

00000d0e <_Z17can_retrieve_dataP4sCAN>:
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
	// Retrieve CAN id
	can_retrieve_id( mMsg );
     d14:	0e 94 50 06 	call	0xca0	; 0xca0 <_Z15can_retrieve_idP4sCAN>

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
     d18:	80 91 ef 00 	lds	r24, 0x00EF
     d1c:	8f 70       	andi	r24, 0x0F	; 15
     d1e:	28 2f       	mov	r18, r24
     d20:	22 0f       	add	r18, r18
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	91 7e       	andi	r25, 0xE1	; 225
     d26:	92 2b       	or	r25, r18
     d28:	9c 83       	std	Y+4, r25	; 0x04
	for (int i=0; i<mMsg->header.DLC; i++)
     d2a:	48 2f       	mov	r20, r24
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	41 15       	cp	r20, r1
     d30:	51 05       	cpc	r21, r1
     d32:	59 f0       	breq	.+22     	; 0xd4a <_Z17can_retrieve_dataP4sCAN+0x3c>
INPUT 		: mMsg - a sCAN structure must have memory already allocated.
OUTPUT		: mMsg - The data fields of this structure will get updated
RETURN		: DLC
DESCRIPTION:  Operates on the currently selected CANPAGE
*****************************************************************************/
byte can_retrieve_data( struct sCAN* mMsg )
     d34:	25 96       	adiw	r28, 0x05	; 5
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
	{
		mMsg->data[i] = CANMSG;
     d3a:	90 91 fa 00 	lds	r25, 0x00FA
     d3e:	99 93       	st	Y+, r25
	// Retrieve CAN id
	can_retrieve_id( mMsg );

	// Read DLC out of reg
	mMsg->header.DLC = ( CANCDMOB & 0x0F );   // DLC, number of bytes to be received
	for (int i=0; i<mMsg->header.DLC; i++)
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	24 17       	cp	r18, r20
     d46:	35 07       	cpc	r19, r21
     d48:	c4 f3       	brlt	.-16     	; 0xd3a <_Z17can_retrieve_dataP4sCAN+0x2c>
	{
		mMsg->data[i] = CANMSG;
	}
	return mMsg->header.DLC;
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <__vector_18>:
extern void protected_led_on(byte mindex);
extern void protected_led_off(byte mindex);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect )
{
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	2f 93       	push	r18
     d5c:	3f 93       	push	r19
     d5e:	4f 93       	push	r20
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	cf 93       	push	r28
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
     d74:	c0 91 ed 00 	lds	r28, 0x00ED
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
     d78:	40 91 ec 00 	lds	r20, 0x00EC
     d7c:	42 95       	swap	r20
     d7e:	4f 70       	andi	r20, 0x0F	; 15
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     d80:	4f 30       	cpi	r20, 0x0F	; 15
     d82:	09 f4       	brne	.+2      	; 0xd86 <__vector_18+0x36>
     d84:	87 c0       	rjmp	.+270    	; 0xe94 <__vector_18+0x144>
   CANPAGE = CANHPMOB & 0xF0;     // Selects MOB with highest priority interrupt
     d86:	80 91 ec 00 	lds	r24, 0x00EC
     d8a:	80 7f       	andi	r24, 0xF0	; 240
     d8c:	80 93 ed 00 	sts	0x00ED, r24

   if ( ANY_ERROR_FLAG ) {  
     d90:	80 91 ee 00 	lds	r24, 0x00EE
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	8f 71       	andi	r24, 0x1F	; 31
     d98:	90 70       	andi	r25, 0x00	; 0
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	09 f4       	brne	.+2      	; 0xda0 <__vector_18+0x50>
     d9e:	40 c0       	rjmp	.+128    	; 0xe20 <__vector_18+0xd0>
		 byte st = CANSTMOB;
     da0:	80 91 ee 00 	lds	r24, 0x00EE
		 if (st & BERR)	{ CANSTMOB &= ~(1<<BERR);  /* Bit Error (transmission only) */	};
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	82 ff       	sbrs	r24, 2
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <__vector_18+0x64>
     daa:	20 91 ee 00 	lds	r18, 0x00EE
     dae:	2f 7e       	andi	r18, 0xEF	; 239
     db0:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & SERR)	{ CANSTMOB &= ~(1<<SERR);  /* Stuff Error */		 			};
     db4:	9c 01       	movw	r18, r24
     db6:	23 70       	andi	r18, 0x03	; 3
     db8:	30 70       	andi	r19, 0x00	; 0
     dba:	21 15       	cp	r18, r1
     dbc:	31 05       	cpc	r19, r1
     dbe:	29 f0       	breq	.+10     	; 0xdca <__vector_18+0x7a>
     dc0:	20 91 ee 00 	lds	r18, 0x00EE
     dc4:	27 7f       	andi	r18, 0xF7	; 247
     dc6:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & CERR)	{ CANSTMOB &= ~(1<<CERR);  /* CRC Error - pos bad CAN connection(s), bad transmitter, faulty hardware receiver. */ };
     dca:	81 ff       	sbrs	r24, 1
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <__vector_18+0x88>
     dce:	20 91 ee 00 	lds	r18, 0x00EE
     dd2:	2b 7f       	andi	r18, 0xFB	; 251
     dd4:	20 93 ee 00 	sts	0x00EE, r18
		 if (st & FERR)	{ CANSTMOB &= ~(1<<FERR);  /* Form Error */		 				};
     dd8:	80 ff       	sbrs	r24, 0
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <__vector_18+0x96>
     ddc:	80 91 ee 00 	lds	r24, 0x00EE
     de0:	8d 7f       	andi	r24, 0xFD	; 253
     de2:	80 93 ee 00 	sts	0x00EE, r24
		 if (st & AERR)	{ CANSTMOB &= ~(1<<AERR);  /* Acknowledge Error */		 		};

		//protected_led_on( 3 );
		if ((mob==5) || (mob==1)|| (mob==3))		// receives
     de6:	45 30       	cpi	r20, 0x05	; 5
     de8:	09 f4       	brne	.+2      	; 0xdec <__vector_18+0x9c>
     dea:	4b c0       	rjmp	.+150    	; 0xe82 <__vector_18+0x132>
     dec:	41 30       	cpi	r20, 0x01	; 1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <__vector_18+0xa2>
     df0:	48 c0       	rjmp	.+144    	; 0xe82 <__vector_18+0x132>
     df2:	43 30       	cpi	r20, 0x03	; 3
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__vector_18+0xa8>
     df6:	45 c0       	rjmp	.+138    	; 0xe82 <__vector_18+0x132>
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
   }		
   CANPAGE = savecanpage;      // Restore original MOB
     df8:	c0 93 ed 00 	sts	0x00ED, r28
}
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	cf 91       	pop	r28
     e02:	bf 91       	pop	r27
     e04:	af 91       	pop	r26
     e06:	9f 91       	pop	r25
     e08:	8f 91       	pop	r24
     e0a:	7f 91       	pop	r23
     e0c:	6f 91       	pop	r22
     e0e:	5f 91       	pop	r21
     e10:	4f 91       	pop	r20
     e12:	3f 91       	pop	r19
     e14:	2f 91       	pop	r18
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti
		{
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
     e20:	80 91 ee 00 	lds	r24, 0x00EE
     e24:	85 fd       	sbrc	r24, 5
     e26:	13 c0       	rjmp	.+38     	; 0xe4e <__vector_18+0xfe>
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
   }
   else if (TXOK_FLAG)
     e28:	80 91 ee 00 	lds	r24, 0x00EE
     e2c:	86 ff       	sbrs	r24, 6
     e2e:	e4 cf       	rjmp	.-56     	; 0xdf8 <__vector_18+0xa8>
   {  
       	if (tx_call_back != NULL)
     e30:	e0 91 8f 02 	lds	r30, 0x028F
     e34:	f0 91 90 02 	lds	r31, 0x0290
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	09 f0       	breq	.+2      	; 0xe3e <__vector_18+0xee>
       		tx_call_back( );			// possibly send next message.
     e3c:	09 95       	icall

		TransmittedSuccesfully = TRUE;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	80 93 84 02 	sts	0x0284, r24
   		// We wont get these (as is observed)
   		// 		even though ENTX is enabled.  IE2 for MOB0 needs to be enabled
   		CANCDMOB = 0x00;	   	  // Disable Transmission
     e44:	10 92 ef 00 	sts	0x00EF, r1
   		CANSTMOB = 0x00; //~(1<<TXOK);   // Clear TXOK flag
     e48:	10 92 ee 00 	sts	0x00EE, r1
     e4c:	d5 cf       	rjmp	.-86     	; 0xdf8 <__vector_18+0xa8>
			CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
			CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
		}
   }
   else if ( RXOK_FLAG ) {   		
       	NewMessageReceivedFlag = TRUE;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 83 02 	sts	0x0283, r24
       	can_retrieve_data( &LastReceivedMsg );
     e54:	84 e7       	ldi	r24, 0x74	; 116
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	0e 94 87 06 	call	0xd0e	; 0xd0e <_Z17can_retrieve_dataP4sCAN>
		BOOL handled = can_board_msg_responder( &LastReceivedMsg );
     e5c:	84 e7       	ldi	r24, 0x74	; 116
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	0e 94 33 0b 	call	0x1666	; 0x1666 <_Z23can_board_msg_responderP4sCAN>
		if (!handled) {
     e64:	88 23       	and	r24, r24
     e66:	69 f4       	brne	.+26     	; 0xe82 <__vector_18+0x132>
	       	QueueMessage( &LastReceivedMsg );
     e68:	84 e7       	ldi	r24, 0x74	; 116
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_Z12QueueMessageP4sCAN>
	       	if (rx_call_back != NULL)
     e70:	e0 91 8d 02 	lds	r30, 0x028D
     e74:	f0 91 8e 02 	lds	r31, 0x028E
     e78:	30 97       	sbiw	r30, 0x00	; 0
     e7a:	19 f0       	breq	.+6      	; 0xe82 <__vector_18+0x132>
    	   		rx_call_back(&LastReceivedMsg);
     e7c:	84 e7       	ldi	r24, 0x74	; 116
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	09 95       	icall
		}
		
		// (Re)Enable Reception 29 bit IDE DLC8:
      	CANCDMOB = (( 1 << CONMOB1 ) | ( 1 << IDE ) | ( 8 << DLC0));
     e82:	88 e9       	ldi	r24, 0x98	; 152
     e84:	80 93 ef 00 	sts	0x00EF, r24
      	// Note - the DLC field of the CANCDMO register is updated by the received MOb. 
      	// If the value differs from expected DLC, an error is set
	  	CANSTMOB &= ~(1<<RXOK);      // Reset reason on selected channel
     e88:	80 91 ee 00 	lds	r24, 0x00EE
     e8c:	8f 7d       	andi	r24, 0xDF	; 223
     e8e:	80 93 ee 00 	sts	0x00EE, r24
     e92:	b2 cf       	rjmp	.-156    	; 0xdf8 <__vector_18+0xa8>
ISR ( CAN_INT_vect )
{
   int8_t savecanpage;
   savecanpage = CANPAGE;         // Save current MOB
   int8_t mob = (CANHPMOB & 0xF0) >> 4;
   if (mob == 0x0F)  { CANGIT |= 0; return; }	   
     e94:	80 91 da 00 	lds	r24, 0x00DA
     e98:	80 93 da 00 	sts	0x00DA, r24
     e9c:	af cf       	rjmp	.-162    	; 0xdfc <__vector_18+0xac>

00000e9e <_Z20can_send_msg_no_waithP4sCAN>:
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
{  
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	eb 01       	movw	r28, r22
   byte page = 0;
   page		|= (mMOb_Number << 4);
     ea4:	98 2f       	mov	r25, r24
     ea6:	92 95       	swap	r25
     ea8:	90 7f       	andi	r25, 0xF0	; 240
   cli();
     eaa:	f8 94       	cli
   CANPAGE = page;
     eac:	90 93 ed 00 	sts	0x00ED, r25

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
     eb0:	10 92 ee 00 	sts	0x00EE, r1
   can_set_id( mMOb_Number, mMsg->id );
     eb4:	48 81       	ld	r20, Y
     eb6:	59 81       	ldd	r21, Y+1	; 0x01
     eb8:	6a 81       	ldd	r22, Y+2	; 0x02
     eba:	7b 81       	ldd	r23, Y+3	; 0x03
     ebc:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_Z10can_set_idh6idType>

   for (int i=0; i<mMsg->header.DLC; i++)
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	86 95       	lsr	r24
     ec4:	8f 70       	andi	r24, 0x0F	; 15
     ec6:	79 f0       	breq	.+30     	; 0xee6 <_Z20can_send_msg_no_waithP4sCAN+0x48>
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
   {   	/* if ANY_ERROR break */   };
#endif
}

void can_send_msg_no_wait( byte mMOb_Number, struct sCAN* mMsg )
     ec8:	fe 01       	movw	r30, r28
     eca:	35 96       	adiw	r30, 0x05	; 5

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
   {
      CANMSG = mMsg->data[i];
     ed0:	21 91       	ld	r18, Z+
     ed2:	20 93 fa 00 	sts	0x00FA, r18

   // while ((CANEN2 & (_BV(mMOb_Number))) >0) {};  // Wait for MOb 0 to be free
   CANSTMOB = 0x00;     	// Clear mob status register
   can_set_id( mMOb_Number, mMsg->id );

   for (int i=0; i<mMsg->header.DLC; i++)
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	2c 81       	ldd	r18, Y+4	; 0x04
     eda:	26 95       	lsr	r18
     edc:	2f 70       	andi	r18, 0x0F	; 15
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	82 17       	cp	r24, r18
     ee2:	93 07       	cpc	r25, r19
     ee4:	ac f3       	brlt	.-22     	; 0xed0 <_Z20can_send_msg_no_waithP4sCAN+0x32>
   {
      CANMSG = mMsg->data[i];
   }
   Can_clear_rtr();
     ee6:	80 91 f0 00 	lds	r24, 0x00F0
     eea:	8b 7f       	andi	r24, 0xFB	; 251
     eec:	80 93 f0 00 	sts	0x00F0, r24
   CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	86 95       	lsr	r24
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	80 65       	ori	r24, 0x50	; 80
     ef8:	80 93 ef 00 	sts	0x00EF, r24
   sei();
     efc:	78 94       	sei
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <_Z12can_send_msghP4sCAN>:
	can_send_msg()
    Stuff the parameters into the CAN registers 
************************************************************/
void can_send_msg( byte mMOb_Number, struct sCAN* mMsg )
{  
	can_send_msg_no_wait( mMOb_Number, mMsg );
     f04:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
/* TX INTERRUPTS DO NOT WORK.  GETS STUCK IN ABOVE LOOP.  THOUGH THE TXOK GOES HIGH.
//	while ( (CANSTMOB & (1<<TXOK))==0 )		// wait for TXOK flag set
//	{   	 if ANY_ERROR break    }; */
#else
   //CANCDMOB = TRANSMIT | ( 1 << IDE ) | ( mMsg->header.DLC );    // Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
   while ( (CANSTMOB & (1<<TXOK))==0 )	// wait for TXOK flag set
     f08:	80 91 ee 00 	lds	r24, 0x00EE
     f0c:	86 ff       	sbrs	r24, 6
     f0e:	fc cf       	rjmp	.-8      	; 0xf08 <_Z12can_send_msghP4sCAN+0x4>
   {   	/* if ANY_ERROR break */   };
#endif
}
     f10:	08 95       	ret

00000f12 <_Z17can_get_timestampv>:
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     f12:	20 91 f8 00 	lds	r18, 0x00F8
     f16:	30 e0       	ldi	r19, 0x00	; 0
  retval |= (CANSTMH<<8);
     f18:	40 91 f9 00 	lds	r20, 0x00F9
     f1c:	94 2f       	mov	r25, r20
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	28 2b       	or	r18, r24
     f22:	39 2b       	or	r19, r25
  return retval;
}
     f24:	c9 01       	movw	r24, r18
     f26:	08 95       	ret

00000f28 <_Z11can_get_msgP4sCAN>:
can_get_msg()
  Operates on the currently selected CANPAGE MOB.
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
  mMsg->header.DLC = can_retrieve_data( mMsg );
     f2e:	0e 94 87 06 	call	0xd0e	; 0xd0e <_Z17can_retrieve_dataP4sCAN>
     f32:	8f 70       	andi	r24, 0x0F	; 15
     f34:	88 0f       	add	r24, r24
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	91 7e       	andi	r25, 0xE1	; 225
     f3a:	98 2b       	or	r25, r24
     f3c:	9c 83       	std	Y+4, r25	; 0x04
  Gets timestamp out of the CAN timer registers 
************************************************************/
word can_get_timestamp()
{
  word retval = 0;
  retval = CANSTML;
     f3e:	80 91 f8 00 	lds	r24, 0x00F8
     f42:	90 e0       	ldi	r25, 0x00	; 0
  retval |= (CANSTMH<<8);
     f44:	40 91 f9 00 	lds	r20, 0x00F9
     f48:	34 2f       	mov	r19, r20
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	82 2b       	or	r24, r18
     f4e:	93 2b       	or	r25, r19
  Adds a timestamp in addition to can_retrieve_data();	
************************************************************/
void can_get_msg( struct sCAN* mMsg )
{
  mMsg->header.DLC = can_retrieve_data( mMsg );
  mMsg->time_stamp = can_get_timestamp();
     f50:	9e 87       	std	Y+14, r25	; 0x0e
     f52:	8d 87       	std	Y+13, r24	; 0x0d
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <_Z8set_baudh>:
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	61 f0       	breq	.+24     	; 0xf76 <_Z8set_baudh+0x1c>
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	30 f0       	brcs	.+12     	; 0xf6e <_Z8set_baudh+0x14>
     f62:	85 30       	cpi	r24, 0x05	; 5
     f64:	d1 f0       	breq	.+52     	; 0xf9a <_Z8set_baudh+0x40>
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	80 f4       	brcc	.+32     	; 0xf8a <_Z8set_baudh+0x30>
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
     f6a:	82 e1       	ldi	r24, 0x12	; 18
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <_Z8set_baudh+0x1e>
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 f0       	breq	.+36     	; 0xf96 <_Z8set_baudh+0x3c>
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	71 f0       	breq	.+28     	; 0xf92 <_Z8set_baudh+0x38>
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
     f76:	8e e0       	ldi	r24, 0x0E	; 14
     f78:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
     f7c:	84 e0       	ldi	r24, 0x04	; 4
     f7e:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
     f82:	83 e1       	ldi	r24, 0x13	; 19
     f84:	80 93 e4 00 	sts	0x00E4, r24
     f88:	08 95       	ret
Returns:        none
Description:    This function: sets baudrate, enables Mob0 for Reception
*****************************************************************************/
void set_baud(byte mSpeed)
{
	switch (mSpeed)
     f8a:	86 30       	cpi	r24, 0x06	; 6
     f8c:	a1 f7       	brne	.-24     	; 0xf76 <_Z8set_baudh+0x1c>
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
     f8e:	86 e2       	ldi	r24, 0x26	; 38
     f90:	f3 cf       	rjmp	.-26     	; 0xf78 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
     f92:	86 e0       	ldi	r24, 0x06	; 6
     f94:	f1 cf       	rjmp	.-30     	; 0xf78 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	ef cf       	rjmp	.-34     	; 0xf78 <_Z8set_baudh+0x1e>
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
     f9a:	8e e1       	ldi	r24, 0x1E	; 30
     f9c:	ed cf       	rjmp	.-38     	; 0xf78 <_Z8set_baudh+0x1e>

00000f9e <_Z8can_inith>:
4	MyInstance Requests			(random instance)
5	Broadcast Receive			( 				)
*****************************************************************************/
void can_init( byte mSpeed )
{
   CANGCON = ( 1 << SWRES );	// Software reset
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	90 93 d8 00 	sts	0x00D8, r25
   CANTCON = 0x00;        		// CAN timing prescaler set to 0
     fa4:	10 92 e5 00 	sts	0x00E5, r1

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     fa8:	90 e0       	ldi	r25, 0x00	; 0
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
     faa:	29 2f       	mov	r18, r25
     fac:	22 95       	swap	r18
     fae:	20 7f       	andi	r18, 0xF0	; 240
     fb0:	20 93 ed 00 	sts	0x00ED, r18
      CANCDMOB = 0x00;           // Disable mob
     fb4:	10 92 ef 00 	sts	0x00EF, r1
      CANSTMOB = 0x00;           // Clear mob status register
     fb8:	10 92 ee 00 	sts	0x00EE, r1
{
   CANGCON = ( 1 << SWRES );	// Software reset
   CANTCON = 0x00;        		// CAN timing prescaler set to 0

   // DISABLE ALL MOBs
   for ( int8_t mob=0; mob<6; mob++ ) { 
     fbc:	9f 5f       	subi	r25, 0xFF	; 255
     fbe:	96 30       	cpi	r25, 0x06	; 6
     fc0:	a1 f7       	brne	.-24     	; 0xfaa <_Z8can_inith+0xc>
      CANPAGE = ( mob << 4 );    // Selects Message Object 0-5
      CANCDMOB = 0x00;           // Disable mob
      CANSTMOB = 0x00;           // Clear mob status register
   }
   CANGIE = ( 1 << ENIT ) | ( 1 << ENRX );   // Enable interrupts on receive
     fc2:	90 ea       	ldi	r25, 0xA0	; 160
     fc4:	90 93 db 00 	sts	0x00DB, r25

#ifdef USE_TX_INTERRUPTS
   CANGIE |= ( 1<<ENTX );
#endif

   set_baud(mSpeed);
     fc8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_Z8set_baudh>
   can_init_mobs();
     fcc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z13can_init_mobsv>
   while (1) {
     if ((CANGSTA & (1<<ENFG)))  break;  // 1 - CAN controller enable
     fd0:	80 91 d9 00 	lds	r24, 0x00D9
     fd4:	82 ff       	sbrs	r24, 2
     fd6:	fc cf       	rjmp	.-8      	; 0xfd0 <_Z8can_inith+0x32>
   }
   //sei();
}
     fd8:	08 95       	ret

00000fda <_Z15can_set_baud_1Mh>:
/*********************************************************************/
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
     fda:	88 23       	and	r24, r24
     fdc:	51 f4       	brne	.+20     	; 0xff2 <_Z15can_set_baud_1Mh+0x18>
	   CANBT1 = BT1_1Mbps;
	   CANBT2 = BT2_1Mbps;
	   CANBT3 = BT3_1Mbps;	
	} else {
	   CANBT1 = BT1_1Mbps_A;
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_1Mbps_A;
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps_A;
     fea:	83 e1       	ldi	r24, 0x13	; 19
     fec:	80 93 e4 00 	sts	0x00E4, r24
     ff0:	08 95       	ret
/** These adjust the BAUD RATE and SAMPLING settings		        **/
/*********************************************************************/
void can_set_baud_1M( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_1Mbps;
     ff2:	10 92 e2 00 	sts	0x00E2, r1
	   CANBT2 = BT2_1Mbps;
     ff6:	8c e0       	ldi	r24, 0x0C	; 12
     ff8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_1Mbps;	
     ffc:	86 e3       	ldi	r24, 0x36	; 54
     ffe:	80 93 e4 00 	sts	0x00E4, r24
    1002:	08 95       	ret

00001004 <_Z17can_set_baud_500Kh>:
	   CANBT3 = BT3_1Mbps_A;
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1004:	88 23       	and	r24, r24
    1006:	51 f4       	brne	.+20     	; 0x101c <_Z17can_set_baud_500Kh+0x18>
	   CANBT1 = BT1_500Kbps;
	   CANBT2 = BT2_500Kbps;
	   CANBT3 = BT3_500Kbps;
	} else {   
	   CANBT1 = BT1_500Kbps_A;
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps_A;
    100e:	84 e0       	ldi	r24, 0x04	; 4
    1010:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps_A;
    1014:	83 e1       	ldi	r24, 0x13	; 19
    1016:	80 93 e4 00 	sts	0x00E4, r24
    101a:	08 95       	ret
	}
}
void can_set_baud_500K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_500Kbps;
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_500Kbps;
    1022:	8c e0       	ldi	r24, 0x0C	; 12
    1024:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_500Kbps;
    1028:	87 e3       	ldi	r24, 0x37	; 55
    102a:	80 93 e4 00 	sts	0x00E4, r24
    102e:	08 95       	ret

00001030 <_Z17can_set_baud_250Kh>:
	   CANBT3 = BT3_500Kbps_A;
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1030:	88 23       	and	r24, r24
    1032:	51 f4       	brne	.+20     	; 0x1048 <_Z17can_set_baud_250Kh+0x18>
	   CANBT1 = BT1_250Kbps;
	   CANBT2 = BT2_250Kbps;
	   CANBT3 = BT3_250Kbps;
	} else {   
	   CANBT1 = BT1_250Kbps_A;
    1034:	8e e0       	ldi	r24, 0x0E	; 14
    1036:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps_A;
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps_A;
    1040:	83 e1       	ldi	r24, 0x13	; 19
    1042:	80 93 e4 00 	sts	0x00E4, r24
    1046:	08 95       	ret
	}
}
void can_set_baud_250K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_250Kbps;
    1048:	86 e0       	ldi	r24, 0x06	; 6
    104a:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_250Kbps;
    104e:	8c e0       	ldi	r24, 0x0C	; 12
    1050:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_250Kbps;
    1054:	87 e3       	ldi	r24, 0x37	; 55
    1056:	80 93 e4 00 	sts	0x00E4, r24
    105a:	08 95       	ret

0000105c <_Z17can_set_baud_200Kh>:
	   CANBT3 = BT3_250Kbps_A;
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
    105c:	88 23       	and	r24, r24
    105e:	51 f4       	brne	.+20     	; 0x1074 <_Z17can_set_baud_200Kh+0x18>
	   CANBT1 = BT1_200Kbps;
	   CANBT2 = BT2_200Kbps;
	   CANBT3 = BT3_200Kbps;
	} else {   
	   CANBT1 = BT1_200Kbps_A;
    1060:	82 e1       	ldi	r24, 0x12	; 18
    1062:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps_A;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps_A;
    106c:	83 e1       	ldi	r24, 0x13	; 19
    106e:	80 93 e4 00 	sts	0x00E4, r24
    1072:	08 95       	ret
	}
}
void can_set_baud_200K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_200Kbps;
    1074:	88 e0       	ldi	r24, 0x08	; 8
    1076:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_200Kbps;
    107a:	8c e0       	ldi	r24, 0x0C	; 12
    107c:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_200Kbps;
    1080:	87 e3       	ldi	r24, 0x37	; 55
    1082:	80 93 e4 00 	sts	0x00E4, r24
    1086:	08 95       	ret

00001088 <_Z17can_set_baud_125Kh>:
	   CANBT3 = BT3_200Kbps_A;
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
    1088:	88 23       	and	r24, r24
    108a:	51 f4       	brne	.+20     	; 0x10a0 <_Z17can_set_baud_125Kh+0x18>
	   CANBT1 = BT1_125Kbps;
	   CANBT2 = BT2_125Kbps;
	   CANBT3 = BT3_125Kbps;
	} else {
	   CANBT1 = BT1_125Kbps_A;
    108c:	8e e1       	ldi	r24, 0x1E	; 30
    108e:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps_A;
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps_A;
    1098:	83 e1       	ldi	r24, 0x13	; 19
    109a:	80 93 e4 00 	sts	0x00E4, r24
    109e:	08 95       	ret
	}
}
void can_set_baud_125K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_125Kbps;
    10a0:	8e e0       	ldi	r24, 0x0E	; 14
    10a2:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_125Kbps;
    10a6:	8c e0       	ldi	r24, 0x0C	; 12
    10a8:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_125Kbps;
    10ac:	87 e3       	ldi	r24, 0x37	; 55
    10ae:	80 93 e4 00 	sts	0x00E4, r24
    10b2:	08 95       	ret

000010b4 <_Z17can_set_baud_100Kh>:
	   CANBT3 = BT3_125Kbps_A;
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
    10b4:	88 23       	and	r24, r24
    10b6:	51 f4       	brne	.+20     	; 0x10cc <_Z17can_set_baud_100Kh+0x18>
	   CANBT1 = BT1_100Kbps;
	   CANBT2 = BT2_100Kbps;
	   CANBT3 = BT3_100Kbps;
	} else {
	   CANBT1 = BT1_100Kbps_A;
    10b8:	86 e2       	ldi	r24, 0x26	; 38
    10ba:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps_A;
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps_A;
    10c4:	83 e1       	ldi	r24, 0x13	; 19
    10c6:	80 93 e4 00 	sts	0x00E4, r24
    10ca:	08 95       	ret
	}
}
void can_set_baud_100K( BOOL mHighTQ )
{
	if (mHighTQ) {
	   CANBT1 = BT1_100Kbps;
    10cc:	82 e1       	ldi	r24, 0x12	; 18
    10ce:	80 93 e2 00 	sts	0x00E2, r24
	   CANBT2 = BT2_100Kbps;
    10d2:	8c e0       	ldi	r24, 0x0C	; 12
    10d4:	80 93 e3 00 	sts	0x00E3, r24
	   CANBT3 = BT3_100Kbps;
    10d8:	87 e3       	ldi	r24, 0x37	; 55
    10da:	80 93 e4 00 	sts	0x00E4, r24
    10de:	08 95       	ret

000010e0 <_Z22random_number_adc_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    10e0:	83 e9       	ldi	r24, 0x93	; 147
    10e2:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    10e6:	ee e7       	ldi	r30, 0x7E	; 126
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 60       	ori	r24, 0x08	; 8
    10ee:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    10f0:	80 e8       	ldi	r24, 0x80	; 128
    10f2:	80 93 7b 00 	sts	0x007B, r24
}
    10f6:	08 95       	ret

000010f8 <_Z18pick_random_numberv>:

word pick_random_number()
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
    10f8:	56 98       	cbi	0x0a, 6	; 10
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
{
	DDRD &= ~(0x40);		// Make ADC3-PORTD_6-LED4 an input temporarily
	// Sample PD6 (ADC3 - LED3).  Ie. Since this is used during power up, 
	// the LED pin can be turned into an input, the LED should be high impediance 
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
	{
		ADMUX  =  RANDOM_NUMBER_ADC_MUX;
    1102:	e3 e4       	ldi	r30, 0x43	; 67
    1104:	e0 93 7c 00 	sts	0x007C, r30
		ADCSRA |= (1<<ADSC);
    1108:	80 91 7a 00 	lds	r24, 0x007A
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	80 93 7a 00 	sts	0x007A, r24
		while ( (ADCSRA & (1<<ADSC)) > 0) {};
    1112:	80 91 7a 00 	lds	r24, 0x007A
    1116:	86 fd       	sbrc	r24, 6
    1118:	fc cf       	rjmp	.-8      	; 0x1112 <_Z18pick_random_numberv+0x1a>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
    111a:	80 91 78 00 	lds	r24, 0x0078
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	90 70       	andi	r25, 0x00	; 0
    1124:	ba 01       	movw	r22, r20
    1126:	6f 70       	andi	r22, 0x0F	; 15
    1128:	70 70       	andi	r23, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <_Z18pick_random_numberv+0x38>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	6a 95       	dec	r22
    1132:	e2 f7       	brpl	.-8      	; 0x112c <_Z18pick_random_numberv+0x34>
		result |= (tmp);
    1134:	28 2b       	or	r18, r24
    1136:	39 2b       	or	r19, r25
		tmp = ADCH;  
    1138:	80 91 79 00 	lds	r24, 0x0079
	// and therefore the lowest bits of ADC should certainly be random.	
	word result = 0;
	word tmp    = 0;

	// SELECT AND START CONVERSION:
	for (int i=0; i<16; i++)
    113c:	4f 5f       	subi	r20, 0xFF	; 255
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	40 31       	cpi	r20, 0x10	; 16
    1142:	51 05       	cpc	r21, r1
    1144:	f9 f6       	brne	.-66     	; 0x1104 <_Z18pick_random_numberv+0xc>
		// PICK UP RESULT: (use lowest 2 bits)
		tmp  = (ADCL & 0x01) << (i % 16);
		result |= (tmp);
		tmp = ADCH;  
	}
	DDRD |= 0x40;		// Set ADC3-PORTD_6-LED4 back to being an output
    1146:	56 9a       	sbi	0x0a, 6	; 10
	return result;
}
    1148:	c9 01       	movw	r24, r18
    114a:	08 95       	ret

0000114c <_Z24setup_instance_claim_mobv>:

void setup_instance_claim_mob()
{
	// To obtain an instance, we need a receive mob:
	// SETUP MOB3 for ID_INSTANCE_CLAIM (no Instance filter - checks done in software)
	can_setup_receive_mob		   ( INSTANCE_TX_MOB, 0x0000, 0x0000, 8 );
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	28 e0       	ldi	r18, 0x08	; 8
    1158:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z21can_setup_receive_mobhssh>
	can_remove_instance_from_filter( INSTANCE_TX_MOB 					);
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z31can_remove_instance_from_filterh>
	can_add_id_to_filter		   ( INSTANCE_TX_MOB, ID_INSTANCE_CLAIM, ID_INSTANCE_CLAIM );
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	63 e2       	ldi	r22, 0x23	; 35
    1166:	7c ef       	ldi	r23, 0xFC	; 252
    1168:	43 e2       	ldi	r20, 0x23	; 35
    116a:	5c ef       	ldi	r21, 0xFC	; 252
    116c:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z20can_add_id_to_filterhtt>
}
    1170:	08 95       	ret

00001172 <_Z17can_instance_initv>:

void random_number_adc_init()
{
	// AD Control & Status Register A:
	byte reg = (1<<ADEN) | (1<<ADIF) | 0x03;   // prescaler = 0b011
	ADCSRA = reg;
    1172:	83 e9       	ldi	r24, 0x93	; 147
    1174:	80 93 7a 00 	sts	0x007A, r24
	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9:
	DIDR0  |=  (1<<ADC3D);
    1178:	80 91 7e 00 	lds	r24, 0x007E
    117c:	88 60       	ori	r24, 0x08	; 8
    117e:	80 93 7e 00 	sts	0x007E, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
	ADCSRB = (1<<ADHSM);
    1182:	80 e8       	ldi	r24, 0x80	; 128
    1184:	80 93 7b 00 	sts	0x007B, r24
byte init_path = 0;

void can_instance_init()
{
	random_number_adc_init();
	word tmp = pick_random_number();		// random time delay
    1188:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_Z18pick_random_numberv>
	rand_instance = rand_delay = (tmp & 0xFF);	
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	90 93 95 02 	sts	0x0295, r25
    1192:	80 93 94 02 	sts	0x0294, r24
    1196:	80 93 96 02 	sts	0x0296, r24

	// put adc back into mode for POT
	adc_init();
    119a:	0e 94 65 00 	call	0xca	; 0xca <_Z8adc_initv>

	if (Confirmed==NOT_CLAIMED)
    119e:	80 91 92 02 	lds	r24, 0x0292
    11a2:	88 23       	and	r24, r24
    11a4:	51 f0       	breq	.+20     	; 0x11ba <_Z17can_instance_initv+0x48>
		MyInstance= 0;				// start at 0!
	} else {
		// PICK a DELAY TIME
		//MyInstance=0x99;
		init_path  = 2;
		Confirmed = REPORT;
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	80 93 92 02 	sts	0x0292, r24
    11ac:	82 e8       	ldi	r24, 0x82	; 130
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    11ae:	80 93 99 02 	sts	0x0299, r24
	init_complete = TRUE;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 93 02 	sts	0x0293, r24
}
    11b8:	08 95       	ret
	adc_init();

	if (Confirmed==NOT_CLAIMED)
	{	
		// START AT 0; PICK a DELAY TIME
		init_path = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 99 02 	sts	0x0299, r24
		setup_instance_claim_mob();
    11c0:	0e 94 a6 08 	call	0x114c	; 0x114c <_Z24setup_instance_claim_mobv>
		MyInstance= 0;				// start at 0!
    11c4:	10 92 91 02 	sts	0x0291, r1
    11c8:	80 91 99 02 	lds	r24, 0x0299
    11cc:	80 68       	ori	r24, 0x80	; 128
		/* We cannot send a CAN message in this function because it is called from 
		  inside the can_board_msg handler (part of isr() no transmits allowed! b/c they'll
		  generating an infinit loop of interrupts as soon as the transmit is done!)
		  */
	}
	init_path |= 0x80;	
    11ce:	80 93 99 02 	sts	0x0299, r24
	init_complete = TRUE;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 93 02 	sts	0x0293, r24
}
    11d8:	08 95       	ret

000011da <_Z25can_prep_instance_requestP4sCANh>:
The first data member of the msg contains the id we wish to reserve.

***************************************************************/
//extern byte ResetReason;
void can_prep_instance_request( sCAN* mMsg, byte mRandomInstance )
{
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST
    mMsg->id 	  	 = create_CAN_eid( ID_INSTANCE_CLAIM, mRandomInstance );
    11e0:	83 e2       	ldi	r24, 0x23	; 35
    11e2:	9c ef       	ldi	r25, 0xFC	; 252
    11e4:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    11e8:	68 83       	st	Y, r22
    11ea:	79 83       	std	Y+1, r23	; 0x01
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] 	 = MyInstance;		// Requested value
    11f0:	80 91 91 02 	lds	r24, 0x0291
    11f4:	8d 83       	std	Y+5, r24	; 0x05
	mMsg->data[1] 	 = Confirmed;
    11f6:	80 91 92 02 	lds	r24, 0x0292
    11fa:	8e 83       	std	Y+6, r24	; 0x06
	mMsg->data[2] 	 = rand_instance;
    11fc:	80 91 96 02 	lds	r24, 0x0296
    1200:	8f 83       	std	Y+7, r24	; 0x07
	mMsg->data[3] 	 = init_path;
    1202:	80 91 99 02 	lds	r24, 0x0299
    1206:	88 87       	std	Y+8, r24	; 0x08
	mMsg->data[4] 	 = ts_state;
    1208:	80 91 9a 02 	lds	r24, 0x029A
    120c:	89 87       	std	Y+9, r24	; 0x09
	mMsg->data[5] 	 = sys_config_byte; 
    120e:	80 91 12 03 	lds	r24, 0x0312
    1212:	8a 87       	std	Y+10, r24	; 0x0a
	//mMsg->data[6] 	 = ResetReason;	
    mMsg->header.DLC = 7;
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    1218:	8e 60       	ori	r24, 0x0E	; 14
    121a:	8c 83       	std	Y+4, r24	; 0x04
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <_Z22can_instance_timeslicev>:

byte ts_state = 0;

void can_instance_timeslice()
{
	ts_state = 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 9a 02 	sts	0x029A, r24
	if (Confirmed==CLAIMED)	  return;		// nothing to do
    1228:	40 91 92 02 	lds	r20, 0x0292
    122c:	41 30       	cpi	r20, 0x01	; 1
    122e:	59 f1       	breq	.+86     	; 0x1286 <_Z22can_instance_timeslicev+0x64>
	if (init_complete==FALSE) return;		//
    1230:	80 91 93 02 	lds	r24, 0x0293
    1234:	88 23       	and	r24, r24
    1236:	39 f1       	breq	.+78     	; 0x1286 <_Z22can_instance_timeslicev+0x64>
	if (rand_delay-- > 0)	  return;		// wait until our appointed time to claim
    1238:	80 91 94 02 	lds	r24, 0x0294
    123c:	90 91 95 02 	lds	r25, 0x0295
    1240:	9c 01       	movw	r18, r24
    1242:	21 50       	subi	r18, 0x01	; 1
    1244:	30 40       	sbci	r19, 0x00	; 0
    1246:	30 93 95 02 	sts	0x0295, r19
    124a:	20 93 94 02 	sts	0x0294, r18
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	d1 f4       	brne	.+52     	; 0x1286 <_Z22can_instance_timeslicev+0x64>
	rand_delay = 1;							// so that it comes back in here next timeslice
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	90 93 95 02 	sts	0x0295, r25
    125a:	80 93 94 02 	sts	0x0294, r24
	ts_state = 2;
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	80 93 9a 02 	sts	0x029A, r24
	
	if (Confirmed==NOT_CLAIMED)
    1264:	44 23       	and	r20, r20
    1266:	91 f0       	breq	.+36     	; 0x128c <_Z22can_instance_timeslicev+0x6a>
		Confirmed = CLAIM_PENDING;
		can_prep_instance_request( &msg2, rand_instance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
    1268:	42 30       	cpi	r20, 0x02	; 2
    126a:	09 f4       	brne	.+2      	; 0x126e <_Z22can_instance_timeslicev+0x4c>
    126c:	5a c0       	rjmp	.+180    	; 0x1322 <_Z22can_instance_timeslicev+0x100>
		ts_state = 7;
		Confirmed = CLAIMED;
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
    126e:	40 32       	cpi	r20, 0x20	; 32
    1270:	39 f1       	breq	.+78     	; 0x12c0 <_Z22can_instance_timeslicev+0x9e>
			Confirmed = NOT_USING_INSTANCES;
		}
		CANPAGE = restore;
		sei();		
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
    1272:	40 38       	cpi	r20, 0x80	; 128
    1274:	09 f4       	brne	.+2      	; 0x1278 <_Z22can_instance_timeslicev+0x56>
    1276:	47 c0       	rjmp	.+142    	; 0x1306 <_Z22can_instance_timeslicev+0xe4>
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1278:	40 34       	cpi	r20, 0x40	; 64
    127a:	31 f0       	breq	.+12     	; 0x1288 <_Z22can_instance_timeslicev+0x66>
    127c:	80 91 9a 02 	lds	r24, 0x029A
    1280:	80 68       	ori	r24, 0x80	; 128
		//cli(); save_configuration(); sei();
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait			 ( 0, &msg2    );
	}
	ts_state |= 0x80;
    1282:	80 93 9a 02 	sts	0x029A, r24
    1286:	08 95       	ret
		
		// SEND 1 MORE FOR DEBUG PURPOSES:
		//can_prep_instance_request( &msg2, MyInstance );
		//can_send_msg_no_wait( 0, &msg2    );
	}
	else if (Confirmed == CLEAR_REQUEST)	
    1288:	86 e8       	ldi	r24, 0x86	; 134
    128a:	fb cf       	rjmp	.-10     	; 0x1282 <_Z22can_instance_timeslicev+0x60>
	rand_delay = 1;							// so that it comes back in here next timeslice
	ts_state = 2;
	
	if (Confirmed==NOT_CLAIMED)
	{
		ts_state = 3;
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	80 93 9a 02 	sts	0x029A, r24
		Confirmed = CLAIM_PENDING;
    1292:	80 e2       	ldi	r24, 0x20	; 32
    1294:	80 93 92 02 	sts	0x0292, r24
		can_prep_instance_request( &msg2, rand_instance );
    1298:	85 e6       	ldi	r24, 0x65	; 101
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	60 91 96 02 	lds	r22, 0x0296
    12a0:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	65 e6       	ldi	r22, 0x65	; 101
    12a8:	72 e0       	ldi	r23, 0x02	; 2
    12aa:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
		timeout_10ms_mult = 300;				// 3 seconds
    12ae:	8c e2       	ldi	r24, 0x2C	; 44
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	90 93 98 02 	sts	0x0298, r25
    12b6:	80 93 97 02 	sts	0x0297, r24
    12ba:	40 91 92 02 	lds	r20, 0x0292
    12be:	d4 cf       	rjmp	.-88     	; 0x1268 <_Z22can_instance_timeslicev+0x46>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
	}
	if (Confirmed==CLAIM_PENDING)
	{
		ts_state = 4;	
    12c0:	84 e0       	ldi	r24, 0x04	; 4
    12c2:	80 93 9a 02 	sts	0x029A, r24
		// Wait for either TXOK or RX ID_INSTANCE_CLAIM (aborts the TX)
		// OR a TIMEOUT
		cli();
    12c6:	f8 94       	cli
		byte restore = CANPAGE;
    12c8:	20 91 ed 00 	lds	r18, 0x00ED
		CANPAGE 	 = 0x00;
    12cc:	10 92 ed 00 	sts	0x00ED, r1

		if (TXOK_FLAG)
    12d0:	80 91 ee 00 	lds	r24, 0x00EE
    12d4:	86 ff       	sbrs	r24, 6
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <_Z22can_instance_timeslicev+0xbc>
			// We finished sending, so we claimed it.
			Confirmed = DIRTY;		// save on next timeslice
    12d8:	80 e8       	ldi	r24, 0x80	; 128
    12da:	80 93 92 02 	sts	0x0292, r24
			//   if an incoming ID_INSTANCE_CLAIM comes in, it will
			//   abort transmission & update Confirmed.
			// It was aborted and MyInstance was bumped.
			// do nothing just wait for next timeslice.
			// Confirmed=NOT_CLAIMED;
		timeout_10ms_mult--;
    12de:	80 91 97 02 	lds	r24, 0x0297
    12e2:	90 91 98 02 	lds	r25, 0x0298
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	90 93 98 02 	sts	0x0298, r25
    12ec:	80 93 97 02 	sts	0x0297, r24
		if (timeout_10ms_mult == 0)
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	19 f4       	brne	.+6      	; 0x12fa <_Z22can_instance_timeslicev+0xd8>
		{
			//SET_LED_3();
			Confirmed = NOT_USING_INSTANCES;
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	80 93 92 02 	sts	0x0292, r24
		}
		CANPAGE = restore;
    12fa:	20 93 ed 00 	sts	0x00ED, r18
		sei();		
    12fe:	78 94       	sei
    1300:	40 91 92 02 	lds	r20, 0x0292
    1304:	b6 cf       	rjmp	.-148    	; 0x1272 <_Z22can_instance_timeslicev+0x50>
	}
	if (Confirmed == DIRTY)			// Dirty bit set?
	{
		ts_state = 5;
    1306:	85 e0       	ldi	r24, 0x05	; 5
    1308:	80 93 9a 02 	sts	0x029A, r24
		Confirmed = CLAIMED;		// don't save next time, just skip the claiming
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 92 02 	sts	0x0292, r24
		cli();  save_configuration();  sei();
    1312:	f8 94       	cli
    1314:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z18save_configurationv>
    1318:	78 94       	sei
    131a:	80 91 9a 02 	lds	r24, 0x029A
    131e:	80 68       	ori	r24, 0x80	; 128
    1320:	b0 cf       	rjmp	.-160    	; 0x1282 <_Z22can_instance_timeslicev+0x60>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
		timeout_10ms_mult = 300;				// 3 seconds
	}
	if (Confirmed==REPORT)
	{
		ts_state = 7;
    1322:	87 e0       	ldi	r24, 0x07	; 7
    1324:	80 93 9a 02 	sts	0x029A, r24
		Confirmed = CLAIMED;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 92 02 	sts	0x0292, r24
		can_prep_instance_request( &msg2, MyInstance );
    132e:	85 e6       	ldi	r24, 0x65	; 101
    1330:	92 e0       	ldi	r25, 0x02	; 2
    1332:	60 91 91 02 	lds	r22, 0x0291
    1336:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait	 ( 0, &msg2	);	// no wait here!
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	65 e6       	ldi	r22, 0x65	; 101
    133e:	72 e0       	ldi	r23, 0x02	; 2
    1340:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
    1344:	40 91 92 02 	lds	r20, 0x0292
    1348:	92 cf       	rjmp	.-220    	; 0x126e <_Z22can_instance_timeslicev+0x4c>

0000134a <_Z23can_prep_instance_queryP4sCAN>:

/* We believe we have an instance claimed.
	Make sure it's unique on the network 
	No-reply  */
void can_prep_instance_query( sCAN* mMsg )
{
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
	// instance used to avoid conflicts on the ID_INSTANCE_RESERVE_REQUEST 
    mMsg->id 	  = create_CAN_eid( ID_INSTANCE_QUERY, MyInstance );
    1350:	84 e2       	ldi	r24, 0x24	; 36
    1352:	9c ef       	ldi	r25, 0xFC	; 252
    1354:	60 91 91 02 	lds	r22, 0x0291
    1358:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    135c:	68 83       	st	Y, r22
    135e:	79 83       	std	Y+1, r23	; 0x01
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = MyInstance;		// Requested value
    1364:	80 91 91 02 	lds	r24, 0x0291
    1368:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->header.DLC    = 1;
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    136e:	82 60       	ori	r24, 0x02	; 2
    1370:	8c 83       	std	Y+4, r24	; 0x04
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <_Z28can_process_instance_requestP4sCAN>:
/************************************************************
 We received a request.
 ***********************************************************/
void can_process_instance_request( sCAN* mMsg )
{
	byte instance = mMsg->data[0];
    1378:	fc 01       	movw	r30, r24
    137a:	85 81       	ldd	r24, Z+5	; 0x05
	if (MyInstance > instance)	return;  // ignore since someone else is behind the game.
    137c:	90 91 91 02 	lds	r25, 0x0291
    1380:	89 17       	cp	r24, r25
    1382:	18 f0       	brcs	.+6      	; 0x138a <_Z28can_process_instance_requestP4sCAN+0x12>

	MyInstance = instance+1;
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	80 93 91 02 	sts	0x0291, r24
    138a:	08 95       	ret

0000138c <_Z14create_CAN_eidth>:
	Instance_ID
OUTPUT:
	return - a complete CAN 2.0B id (4 bytes)
**************************************************/
tID		create_CAN_eid( word mIdentifier, byte mInstance )
{
    138c:	26 2f       	mov	r18, r22
	tID id;
	id.group.block 	   = (0x00);
	id.group.id 	   = (mIdentifier);
	id.group.instance  = (mInstance);
	return id;
}
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	78 2f       	mov	r23, r24
    1392:	89 2f       	mov	r24, r25
    1394:	92 2f       	mov	r25, r18
    1396:	08 95       	ret

00001398 <_Z14create_CAN_eidhth>:

tID		create_CAN_eid( byte mBlock, word mIdentifier, byte mInstance	)
{
    1398:	38 2f       	mov	r19, r24
    139a:	26 2f       	mov	r18, r22
    139c:	87 2f       	mov	r24, r23
    139e:	94 2f       	mov	r25, r20
	tID id;
	id.group.block		= (mBlock);
	id.group.id			= (mIdentifier);
	id.group.instance	= (mInstance);
	return id;
}
    13a0:	63 2f       	mov	r22, r19
    13a2:	72 2f       	mov	r23, r18
    13a4:	08 95       	ret

000013a6 <_Z9get_block6idType>:
bool  id_match   	( tID m1, tID m2 );
bool  instance_match( tID m1, tID m2 ); */

//===================== ACCESSOR FUNCTIONS: ==============================
byte   get_block(  tID mID  )				
{
    13a6:	86 2f       	mov	r24, r22
	return (mID.group.block);
//	return (mID & 0xFF000000) >> 24;
}
    13a8:	08 95       	ret

000013aa <_Z12get_instance6idType>:
byte   get_instance(  tID mID  )				
{
    13aa:	87 2f       	mov	r24, r23
	return (mID.group.id);
//	return (mID & 0x000000FF);
}
    13ac:	08 95       	ret

000013ae <_Z6get_id6idType>:
word   get_id(  tID mID  )	
{
	return (mID.group.instance);
//	return (mID & 0x00FFFF00) >> 8;
}
    13ae:	89 2f       	mov	r24, r25
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	08 95       	ret

000013b4 <_Z5match6idTypeS_>:

//=================== MATCHING FUNCTIONS: =======================
bool   match( tID m1, tID m2 )
{
	return (m1.full_id == m2.full_id);
    13b4:	e1 e0       	ldi	r30, 0x01	; 1
    13b6:	62 17       	cp	r22, r18
    13b8:	73 07       	cpc	r23, r19
    13ba:	84 07       	cpc	r24, r20
    13bc:	95 07       	cpc	r25, r21
    13be:	09 f0       	breq	.+2      	; 0x13c2 <_Z5match6idTypeS_+0xe>
    13c0:	e0 e0       	ldi	r30, 0x00	; 0
}
    13c2:	8e 2f       	mov	r24, r30
    13c4:	08 95       	ret

000013c6 <_Z11block_match6idTypeS_>:

bool   block_match( tID m1, tID m2 )
{
	return (m1.group.block == m2.group.block);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	62 13       	cpse	r22, r18
    13ca:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_block(m1) == get_block(m2));
}
    13cc:	08 95       	ret

000013ce <_Z8id_match6idTypeS_>:
bool   id_match( tID m1, tID m2 )
{
    13ce:	93 2f       	mov	r25, r19
	return (m1.group.id == m2.group.id);
    13d0:	27 2f       	mov	r18, r23
    13d2:	38 2f       	mov	r19, r24
    13d4:	69 2f       	mov	r22, r25
    13d6:	74 2f       	mov	r23, r20
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	26 17       	cp	r18, r22
    13dc:	37 07       	cpc	r19, r23
    13de:	09 f0       	breq	.+2      	; 0x13e2 <_Z8id_match6idTypeS_+0x14>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
}
    13e2:	08 95       	ret

000013e4 <_Z14instance_match6idTypeh>:
bool   instance_match( tID m1, byte m2 )
{
	return (m1.group.instance == m2);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	49 13       	cpse	r20, r25
    13e8:	80 e0       	ldi	r24, 0x00	; 0
//	return (get_instance(m1) == get_instance(m2));
}
    13ea:	08 95       	ret

000013ec <_Z22set_configure_callbackPFvhE>:
//////////////////////////////////////////////////////////////////////////////
void (*config_call_back)(byte mByteChanged) = NULL;		// Call back function
void set_configure_callback( void (*mCallback)(byte mByteChanged) )
{
	// ByteChanged [1..4] is the config byte which changed.
	config_call_back = mCallback;
    13ec:	90 93 a1 02 	sts	0x02A1, r25
    13f0:	80 93 a0 02 	sts	0x02A0, r24
}
    13f4:	08 95       	ret

000013f6 <_Z27can_prep_board_presence_msgP4sCAN>:
 arrangement" scheme will be worked out later.

The Model should be #defined in the "pin_definitions.h"
****************************************************************************/
void can_prep_board_presence_msg( sCAN* mMsg )
{
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_PRESENCE_BROADCAST, MyInstance );
    13fc:	81 e1       	ldi	r24, 0x11	; 17
    13fe:	9c ef       	ldi	r25, 0xFC	; 252
    1400:	60 91 91 02 	lds	r22, 0x0291
    1404:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1408:	68 83       	st	Y, r22
    140a:	79 83       	std	Y+1, r23	; 0x01
    140c:	8a 83       	std	Y+2, r24	; 0x02
    140e:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = BOARD_MODEL;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = MyInstance;
    1414:	80 91 91 02 	lds	r24, 0x0291
    1418:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = BoardStatus;
    141a:	80 91 9b 02 	lds	r24, 0x029B
    141e:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = MappedBlock;
    1420:	80 91 9c 02 	lds	r24, 0x029C
    1424:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    142a:	88 60       	ori	r24, 0x08	; 8
    142c:	8c 83       	std	Y+4, r24	; 0x04
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <_Z27can_prep_board_revision_msgP4sCAN>:

void can_prep_board_revision_msg( sCAN* mMsg )
{
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_BOARD_REVISION, MyInstance );
    143a:	82 e1       	ldi	r24, 0x12	; 18
    143c:	9c ef       	ldi	r25, 0xFC	; 252
    143e:	60 91 91 02 	lds	r22, 0x0291
    1442:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1446:	68 83       	st	Y, r22
    1448:	79 83       	std	Y+1, r23	; 0x01
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = HARDWARE_REVISION;
    1452:	91 e4       	ldi	r25, 0x41	; 65
    1454:	9e 83       	std	Y+6, r25	; 0x06
    mMsg->data[2] = SOFTWARE_MAJOR;
    1456:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = SOFTWARE_MINOR;
    1458:	9f e0       	ldi	r25, 0x0F	; 15
    145a:	98 87       	std	Y+8, r25	; 0x08
    mMsg->data[4] = lo(MANUFACTURER);
    145c:	89 87       	std	Y+9, r24	; 0x09
    mMsg->data[5] = hi(MANUFACTURER);
    145e:	1a 86       	std	Y+10, r1	; 0x0a
    mMsg->header.DLC 	= 6;
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    1464:	8c 60       	ori	r24, 0x0C	; 12
    1466:	8c 83       	std	Y+4, r24	; 0x04
}
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <_Z26can_prep_serial_number_msgP4sCAN>:

void can_prep_serial_number_msg( sCAN* mMsg )
{
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	ec 01       	movw	r28, r24
	mMsg->id      = create_CAN_eid( ID_BOARD_SERIAL_NUMBER, MyInstance );
    1474:	83 e1       	ldi	r24, 0x13	; 19
    1476:	9c ef       	ldi	r25, 0xFC	; 252
    1478:	60 91 91 02 	lds	r22, 0x0291
    147c:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1480:	68 83       	st	Y, r22
    1482:	79 83       	std	Y+1, r23	; 0x01
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	9b 83       	std	Y+3, r25	; 0x03
	mMsg->data[0] = BOARD_MODEL;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = (SerialNumber & 0xFF000000) >> 24;	// MSB first
    148c:	86 e5       	ldi	r24, 0x56	; 86
    148e:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = (SerialNumber & 0x00FF0000) >> 16; 
    1490:	88 e7       	ldi	r24, 0x78	; 120
    1492:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = (SerialNumber & 0x0000FF00) >>  8; 
    1494:	8c e9       	ldi	r24, 0x9C	; 156
    1496:	88 87       	std	Y+8, r24	; 0x08
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    1498:	8e ed       	ldi	r24, 0xDE	; 222
    149a:	89 87       	std	Y+9, r24	; 0x09
    mMsg->header.DLC = 5;
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    14a0:	8a 60       	ori	r24, 0x0A	; 10
    14a2:	8c 83       	std	Y+4, r24	; 0x04
}
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <_Z30can_prep_board_description_msgP4sCAN>:

void can_prep_board_description_msg( sCAN* mMsg )
{
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    14b0:	84 e1       	ldi	r24, 0x14	; 20
    14b2:	9c ef       	ldi	r25, 0xFC	; 252
    14b4:	60 91 91 02 	lds	r22, 0x0291
    14b8:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    14bc:	68 83       	st	Y, r22
    14be:	79 83       	std	Y+1, r23	; 0x01
    14c0:	8a 83       	std	Y+2, r24	; 0x02
    14c2:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = Starting_Index;
    14c4:	80 91 9d 02 	lds	r24, 0x029D
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    mMsg->data[4] = (SerialNumber & 0x000000FF) >>  0;	// LSB 
    mMsg->header.DLC = 5;
    mMsg->header.rtr = 0;
}

void can_prep_board_description_msg( sCAN* mMsg )
    14cc:	de 01       	movw	r26, r28
    14ce:	16 96       	adiw	r26, 0x06	; 6
    14d0:	9c 01       	movw	r18, r24
    14d2:	28 5f       	subi	r18, 0xF8	; 248
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);
    14d6:	fc 01       	movw	r30, r24
    14d8:	e4 58       	subi	r30, 0x84	; 132
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	e4 91       	lpm	r30, Z+
    14de:	ed 93       	st	X+, r30
    14e0:	01 96       	adiw	r24, 0x01	; 1
	byte chars_sent = 0;
	mMsg->id  = create_CAN_eid( ID_BOARD_DESCRIPTION, MyInstance );
    mMsg->data[0] = Starting_Index;
    byte length = min(8, strlen(BoardDescription));
    
   	for (int i=0; i<length; i++, chars_sent++)
    14e2:	82 17       	cp	r24, r18
    14e4:	93 07       	cpc	r25, r19
    14e6:	b9 f7       	brne	.-18     	; 0x14d6 <_Z30can_prep_board_description_msgP4sCAN+0x2c>
	    mMsg->data[i+1] = pgm_read_byte(BoardDescription+Starting_Index+i);

    mMsg->header.DLC = chars_sent+1;
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr = 0;
    14ec:	82 61       	ori	r24, 0x12	; 18
    14ee:	8c 83       	std	Y+4, r24	; 0x04
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <_Z24can_board_presence_replyv>:
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_board_presence_reply(  )
{
 	switch(Board_presence_response_type)
    14f6:	80 91 a2 02 	lds	r24, 0x02A2
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	d9 f0       	breq	.+54     	; 0x1534 <_Z24can_board_presence_replyv+0x3e>
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	28 f0       	brcs	.+10     	; 0x150c <_Z24can_board_presence_replyv+0x16>
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	09 f1       	breq	.+66     	; 0x1548 <_Z24can_board_presence_replyv+0x52>
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	59 f0       	breq	.+22     	; 0x1520 <_Z24can_board_presence_replyv+0x2a>
    150a:	08 95       	ret
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
    150c:	85 e6       	ldi	r24, 0x65	; 101
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_Z27can_prep_board_presence_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	65 e6       	ldi	r22, 0x65	; 101
    1518:	72 e0       	ldi	r23, 0x02	; 2
    151a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    151e:	08 95       	ret
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 3 :can_prep_board_description_msg	( &msg2    );
    1520:	85 e6       	ldi	r24, 0x65	; 101
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_Z30can_prep_board_description_msgP4sCAN>
			can_send_msg_no_wait			( 2, &msg2 );
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	65 e6       	ldi	r22, 0x65	; 101
    152c:	72 e0       	ldi	r23, 0x02	; 2
    152e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
    1532:	08 95       	ret
 	switch(Board_presence_response_type)
	{
	case 0 :can_prep_board_presence_msg	( &msg2    );
			can_send_msg_no_wait		( 2, &msg2 );
			break;
	case 1 :can_prep_board_revision_msg	( &msg2    );
    1534:	85 e6       	ldi	r24, 0x65	; 101
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_Z27can_prep_board_revision_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	65 e6       	ldi	r22, 0x65	; 101
    1540:	72 e0       	ldi	r23, 0x02	; 2
    1542:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    1546:	08 95       	ret
	case 2 :can_prep_serial_number_msg 	( &msg2    );		
    1548:	85 e6       	ldi	r24, 0x65	; 101
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 37 0a 	call	0x146e	; 0x146e <_Z26can_prep_serial_number_msgP4sCAN>
			can_send_msg_no_wait		( 2, &msg2 );
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	65 e6       	ldi	r22, 0x65	; 101
    1554:	72 e0       	ldi	r23, 0x02	; 2
    1556:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
			break;
    155a:	08 95       	ret

0000155c <_Z19can_board_timeslicev>:
{	
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
    155c:	80 91 9e 02 	lds	r24, 0x029E
    1560:	80 fd       	sbrc	r24, 0
    1562:	56 c0       	rjmp	.+172    	; 0x1610 <_Z19can_board_timeslicev+0xb4>
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
    1564:	81 fd       	sbrc	r24, 1
    1566:	49 c0       	rjmp	.+146    	; 0x15fa <_Z19can_board_timeslicev+0x9e>
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
    1568:	82 fd       	sbrc	r24, 2
    156a:	32 c0       	rjmp	.+100    	; 0x15d0 <_Z19can_board_timeslicev+0x74>
		can_prep_instance_request( &msg2, MyInstance );
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
    156c:	83 fd       	sbrc	r24, 3
    156e:	26 c0       	rjmp	.+76     	; 0x15bc <_Z19can_board_timeslicev+0x60>
		cli();
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
    1570:	84 fd       	sbrc	r24, 4
    1572:	1a c0       	rjmp	.+52     	; 0x15a8 <_Z19can_board_timeslicev+0x4c>
		cli(); 
		save_cal();
		System_Send_Status &= (~0x10);
		sei();
	}
	if ((System_Send_Status & 0x20)==0x20) {	// Board presence:
    1574:	85 ff       	sbrs	r24, 5
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <_Z19can_board_timeslicev+0x36>
		// To prevent collisions between boards, delay by the instance id
		// assigned to this board.  (Should be unique on the network).		
		if ((Board_presence_delay--)==0)		
    1578:	80 91 17 01 	lds	r24, 0x0117
    157c:	90 91 18 01 	lds	r25, 0x0118
    1580:	9c 01       	movw	r18, r24
    1582:	21 50       	subi	r18, 0x01	; 1
    1584:	30 40       	sbci	r19, 0x00	; 0
    1586:	30 93 18 01 	sts	0x0118, r19
    158a:	20 93 17 01 	sts	0x0117, r18
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	09 f0       	breq	.+2      	; 0x1594 <_Z19can_board_timeslicev+0x38>
    1592:	08 95       	ret
		{
			cli();
    1594:	f8 94       	cli
			can_board_presence_reply( );
    1596:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z24can_board_presence_replyv>
			System_Send_Status &= (~0x20);
    159a:	80 91 9e 02 	lds	r24, 0x029E
    159e:	8f 7d       	andi	r24, 0xDF	; 223
    15a0:	80 93 9e 02 	sts	0x029E, r24
			sei();
    15a4:	78 94       	sei
    15a6:	08 95       	ret
		save_configuration();
		System_Send_Status &= (~0x08);
		sei();
	}
	if ((System_Send_Status&0x10)==0x10) {		// Save all calibration & send
		cli(); 
    15a8:	f8 94       	cli
		save_cal();
    15aa:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z8save_calv>
		System_Send_Status &= (~0x10);
    15ae:	80 91 9e 02 	lds	r24, 0x029E
    15b2:	8f 7e       	andi	r24, 0xEF	; 239
    15b4:	80 93 9e 02 	sts	0x029E, r24
		sei();
    15b8:	78 94       	sei
    15ba:	dc cf       	rjmp	.-72     	; 0x1574 <_Z19can_board_timeslicev+0x18>
		can_send_msg_no_wait( 0, &msg2 );
		System_Send_Status &= (~0x04);		
		sei();
	}
	if ((System_Send_Status&0x08)==0x08) {		// Save Configuration & send
		cli();
    15bc:	f8 94       	cli
		save_configuration();
    15be:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z18save_configurationv>
		System_Send_Status &= (~0x08);
    15c2:	80 91 9e 02 	lds	r24, 0x029E
    15c6:	87 7f       	andi	r24, 0xF7	; 247
    15c8:	80 93 9e 02 	sts	0x029E, r24
		sei();
    15cc:	78 94       	sei
    15ce:	d0 cf       	rjmp	.-96     	; 0x1570 <_Z19can_board_timeslicev+0x14>
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
		System_Send_Status &= (~0x02);
	}
	if ((System_Send_Status&0x04)==4) {			// Reread Configuration & send
		cli();
    15d0:	f8 94       	cli
		// RUIN VALUES TO PROVE THE READ WORKS! no, it works.
		//MyInstance=0xAA;  Confirmed=0xAA;  sys_config_byte=0xAA;		
		read_configuration();
    15d2:	0e 94 9b 10 	call	0x2136	; 0x2136 <_Z18read_configurationv>
		can_prep_instance_request( &msg2, MyInstance );
    15d6:	85 e6       	ldi	r24, 0x65	; 101
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	60 91 91 02 	lds	r22, 0x0291
    15de:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z25can_prep_instance_requestP4sCANh>
		can_send_msg_no_wait( 0, &msg2 );
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	65 e6       	ldi	r22, 0x65	; 101
    15e6:	72 e0       	ldi	r23, 0x02	; 2
    15e8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x04);		
    15ec:	80 91 9e 02 	lds	r24, 0x029E
    15f0:	8b 7f       	andi	r24, 0xFB	; 251
    15f2:	80 93 9e 02 	sts	0x029E, r24
		sei();
    15f6:	78 94       	sei
    15f8:	b9 cf       	rjmp	.-142    	; 0x156c <_Z19can_board_timeslicev+0x10>
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
		System_Send_Status &= (~0x01);
	}
	if ((System_Send_Status&0x02)==2) {			// Send channel 2 msg !
		can_send_msg_no_wait( 2, &msg2 );
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	65 e6       	ldi	r22, 0x65	; 101
    15fe:	72 e0       	ldi	r23, 0x02	; 2
    1600:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x02);
    1604:	80 91 9e 02 	lds	r24, 0x029E
    1608:	8d 7f       	andi	r24, 0xFD	; 253
    160a:	80 93 9e 02 	sts	0x029E, r24
    160e:	ac cf       	rjmp	.-168    	; 0x1568 <_Z19can_board_timeslicev+0xc>
/* PROB:  
		Could do 1 at a time, but if requested too quickly, then 
		the first request gets overwritten by the 2nd.
*/
	if ((System_Send_Status&0x01)==1) {			// Send channel 1 msg !
		can_send_msg_no_wait( 0, &msg1 );
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	66 e5       	ldi	r22, 0x56	; 86
    1614:	72 e0       	ldi	r23, 0x02	; 2
    1616:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z20can_send_msg_no_waithP4sCAN>
		System_Send_Status &= (~0x01);
    161a:	80 91 9e 02 	lds	r24, 0x029E
    161e:	8e 7f       	andi	r24, 0xFE	; 254
    1620:	80 93 9e 02 	sts	0x029E, r24
    1624:	9f cf       	rjmp	.-194    	; 0x1564 <_Z19can_board_timeslicev+0x8>

00001626 <_Z18can_prep_configureP4sCAN>:
    mMsg->header.DLC = chars_sent+1;
    mMsg->header.rtr = 0;
}

void can_prep_configure( sCAN* mMsg )
{
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	ec 01       	movw	r28, r24
	mMsg->id  = create_CAN_eid( ID_SYSTEM_CONFIGURE_REPORT, MyInstance );
    162c:	87 e2       	ldi	r24, 0x27	; 39
    162e:	9c ef       	ldi	r25, 0xFC	; 252
    1630:	60 91 91 02 	lds	r22, 0x0291
    1634:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1638:	68 83       	st	Y, r22
    163a:	79 83       	std	Y+1, r23	; 0x01
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	9b 83       	std	Y+3, r25	; 0x03
    mMsg->data[0] = config_byte_1;
    1640:	80 91 0e 03 	lds	r24, 0x030E
    1644:	8d 83       	std	Y+5, r24	; 0x05
    mMsg->data[1] = config_byte_2;
    1646:	80 91 0f 03 	lds	r24, 0x030F
    164a:	8e 83       	std	Y+6, r24	; 0x06
    mMsg->data[2] = config_byte_3;
    164c:	80 91 10 03 	lds	r24, 0x0310
    1650:	8f 83       	std	Y+7, r24	; 0x07
    mMsg->data[3] = config_byte_4;
    1652:	80 91 11 03 	lds	r24, 0x0311
    1656:	88 87       	std	Y+8, r24	; 0x08
    mMsg->header.DLC	= 4;
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	80 7e       	andi	r24, 0xE0	; 224
    mMsg->header.rtr    = 0;
    165c:	88 60       	ori	r24, 0x08	; 8
    165e:	8c 83       	std	Y+4, r24	; 0x04
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <_Z23can_board_msg_responderP4sCAN>:
   specify the board which board the LED is intended for.  Since this
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ec 01       	movw	r28, r24
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    166c:	85 e1       	ldi	r24, 0x15	; 21
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	60 91 91 02 	lds	r22, 0x0291
    1674:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1678:	9b 01       	movw	r18, r22
    167a:	ac 01       	movw	r20, r24
    167c:	68 81       	ld	r22, Y
    167e:	79 81       	ldd	r23, Y+1	; 0x01
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
    1688:	88 23       	and	r24, r24
    168a:	39 f0       	breq	.+14     	; 0x169a <_Z23can_board_msg_responderP4sCAN+0x34>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
    168c:	ce 01       	movw	r24, r28
    168e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_Z21can_parse_led_requestP4sCAN>
		return TRUE;
    1692:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
    169a:	85 e1       	ldi	r24, 0x15	; 21
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	6f ef       	ldi	r22, 0xFF	; 255
    16a0:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	68 81       	ld	r22, Y
    16aa:	79 81       	ldd	r23, Y+1	; 0x01
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	9b 81       	ldd	r25, Y+3	; 0x03
    16b0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
   filtering will likely be in hardware, we don't need to check this
   in the CAN software callback function.
**********************************************************************/
BOOL can_board_msg_responder( sCAN* mMsg )
{
	if ( match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, MyInstance)) ||
    16b4:	88 23       	and	r24, r24
    16b6:	51 f7       	brne	.-44     	; 0x168c <_Z23can_board_msg_responderP4sCAN+0x26>
	     match( mMsg->id, create_CAN_eid			(ID_SYSTEM_LED_REQUEST, 0xFF)) )
	{
		can_parse_led_request( mMsg );				// in leds.c
		return TRUE;
	} else if ( id_match( mMsg->id, create_CAN_eid	(ID_BOARD_PRESENCE_REQUEST, 0)) )
    16b8:	80 e1       	ldi	r24, 0x10	; 16
    16ba:	9c ef       	ldi	r25, 0xFC	; 252
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    16c2:	9b 01       	movw	r18, r22
    16c4:	ac 01       	movw	r20, r24
    16c6:	68 81       	ld	r22, Y
    16c8:	79 81       	ldd	r23, Y+1	; 0x01
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_Z8id_match6idTypeS_>
    16d2:	88 23       	and	r24, r24
    16d4:	91 f0       	breq	.+36     	; 0x16fa <_Z23can_board_msg_responderP4sCAN+0x94>
			There's contention.  
			Need to delay by the instance number of timeslices.  
			See can_board_timeslice_100ms() below.
		*/
		//protected_led_on( 3 );
		System_Send_Status			 |=0x20;
    16d6:	80 91 9e 02 	lds	r24, 0x029E
    16da:	80 62       	ori	r24, 0x20	; 32
    16dc:	80 93 9e 02 	sts	0x029E, r24
		Board_presence_response_type = mMsg->data[0];
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	80 93 a2 02 	sts	0x02A2, r24
		Board_presence_delay 		 = MyInstance;
    16e6:	80 91 91 02 	lds	r24, 0x0291
    16ea:	80 93 17 01 	sts	0x0117, r24
    16ee:	10 92 18 01 	sts	0x0118, r1
		return TRUE;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret
		System_Send_Status			 |=0x20;
		Board_presence_response_type = mMsg->data[0];
		Board_presence_delay 		 = MyInstance;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid		(ID_SYSTEM_CONFIGURE, MyInstance)) )
    16fa:	82 e2       	ldi	r24, 0x22	; 34
    16fc:	9c ef       	ldi	r25, 0xFC	; 252
    16fe:	60 91 91 02 	lds	r22, 0x0291
    1702:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	68 81       	ld	r22, Y
    170c:	79 81       	ldd	r23, Y+1	; 0x01
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
    1716:	88 23       	and	r24, r24
    1718:	f1 f0       	breq	.+60     	; 0x1756 <_Z23can_board_msg_responderP4sCAN+0xf0>
	{
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	84 ff       	sbrs	r24, 4
    171e:	14 c0       	rjmp	.+40     	; 0x1748 <_Z23can_board_msg_responderP4sCAN+0xe2>
		{
			can_prep_configure( &msg1 ); 
    1720:	86 e5       	ldi	r24, 0x56	; 86
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	0e 94 13 0b 	call	0x1626	; 0x1626 <_Z18can_prep_configureP4sCAN>
			System_Send_Status=1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	80 93 9e 02 	sts	0x029E, r24
			can_parse_configure_request( mMsg );	// in configuration.c
			System_Send_Status = 8;					// Save configuration!
		}
		// May want a callback here as well.  Some modules need to do things
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
    172e:	e0 91 a0 02 	lds	r30, 0x02A0
    1732:	f0 91 a1 02 	lds	r31, 0x02A1
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	19 f1       	breq	.+70     	; 0x1780 <_Z23can_board_msg_responderP4sCAN+0x11a>
			config_call_back( mMsg->data[0] & 0x0F );
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	8f 70       	andi	r24, 0x0F	; 15
    173e:	09 95       	icall
		return TRUE;
    1740:	81 e0       	ldi	r24, 0x01	; 1
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
	}
	return FALSE;
}
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret
		if ( (mMsg->data[0] & 0x10) == 0x10)		// Read Config command
		{
			can_prep_configure( &msg1 ); 
			System_Send_Status=1;
		} else {
			can_parse_configure_request( mMsg );	// in configuration.c
    1748:	ce 01       	movw	r24, r28
    174a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <_Z27can_parse_configure_requestP4sCAN>
			System_Send_Status = 8;					// Save configuration!
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	80 93 9e 02 	sts	0x029E, r24
    1754:	ec cf       	rjmp	.-40     	; 0x172e <_Z23can_board_msg_responderP4sCAN+0xc8>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    1756:	81 e2       	ldi	r24, 0x21	; 33
    1758:	9c ef       	ldi	r25, 0xFC	; 252
    175a:	60 91 91 02 	lds	r22, 0x0291
    175e:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1762:	9b 01       	movw	r18, r22
    1764:	ac 01       	movw	r20, r24
    1766:	68 81       	ld	r22, Y
    1768:	79 81       	ldd	r23, Y+1	; 0x01
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	9b 81       	ldd	r25, Y+3	; 0x03
    176e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
    1772:	88 23       	and	r24, r24
    1774:	39 f0       	breq	.+14     	; 0x1784 <_Z23can_board_msg_responderP4sCAN+0x11e>
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
	{
		System_Send_Status=8;
    1776:	88 e0       	ldi	r24, 0x08	; 8
    1778:	80 93 9e 02 	sts	0x029E, r24
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	8a cf       	rjmp	.-236    	; 0x1694 <_Z23can_board_msg_responderP4sCAN+0x2e>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	88 cf       	rjmp	.-240    	; 0x1694 <_Z23can_board_msg_responderP4sCAN+0x2e>
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
		      match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, 0xFF)) )
    1784:	81 e2       	ldi	r24, 0x21	; 33
    1786:	9c ef       	ldi	r25, 0xFC	; 252
    1788:	6f ef       	ldi	r22, 0xFF	; 255
    178a:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    178e:	9b 01       	movw	r18, r22
    1790:	ac 01       	movw	r20, r24
    1792:	68 81       	ld	r22, Y
    1794:	79 81       	ldd	r23, Y+1	; 0x01
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	9b 81       	ldd	r25, Y+3	; 0x03
    179a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
		// as a consequence - ie accelerometers needs to send a special code
		if (config_call_back != NULL)
			config_call_back( mMsg->data[0] & 0x0F );
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_SYSTEM_SHUT_DOWN, MyInstance)) ||
    179e:	88 23       	and	r24, r24
    17a0:	51 f7       	brne	.-44     	; 0x1776 <_Z23can_board_msg_responderP4sCAN+0x110>
	{
		System_Send_Status=8;
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
    17a2:	85 e2       	ldi	r24, 0x25	; 37
    17a4:	9c ef       	ldi	r25, 0xFC	; 252
    17a6:	60 91 91 02 	lds	r22, 0x0291
    17aa:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	68 81       	ld	r22, Y
    17b4:	79 81       	ldd	r23, Y+1	; 0x01
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ba:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
    17be:	88 23       	and	r24, r24
    17c0:	49 f5       	brne	.+82     	; 0x1814 <_Z23can_board_msg_responderP4sCAN+0x1ae>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    17c2:	86 e2       	ldi	r24, 0x26	; 38
    17c4:	9c ef       	ldi	r25, 0xFC	; 252
    17c6:	60 91 91 02 	lds	r22, 0x0291
    17ca:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    17ce:	9b 01       	movw	r18, r22
    17d0:	ac 01       	movw	r20, r24
    17d2:	68 81       	ld	r22, Y
    17d4:	79 81       	ldd	r23, Y+1	; 0x01
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	9b 81       	ldd	r25, Y+3	; 0x03
    17da:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
    17de:	88 23       	and	r24, r24
    17e0:	61 f1       	breq	.+88     	; 0x183a <_Z23can_board_msg_responderP4sCAN+0x1d4>
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
	{
		if (mMsg->header.DLC == 2)
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	8e 71       	andi	r24, 0x1E	; 30
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	59 f6       	brne	.-106    	; 0x1780 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			word passcode = (mMsg->data[0]<<8) | (mMsg->data[1]);		
    17ea:	3d 81       	ldd	r19, Y+5	; 0x05
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	8e 81       	ldd	r24, Y+6	; 0x06
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	82 2b       	or	r24, r18
    17f4:	93 2b       	or	r25, r19
			byte match  = (passcode == 0x1234);
			/* DONT CALL THIS: make_system_new_board( passcode );  We do the sequencing immediately
			   and therefore the NewBoard never has to (and should not) ever get changed. 
			   As it's name implies, it is only once per board - after the manufacturer. */
			if (match)
    17f6:	22 e1       	ldi	r18, 0x12	; 18
    17f8:	84 33       	cpi	r24, 0x34	; 52
    17fa:	92 07       	cpc	r25, r18
    17fc:	09 f6       	brne	.-126    	; 0x1780 <_Z23can_board_msg_responderP4sCAN+0x11a>
			{			
				init_path 	  = 0x55;
    17fe:	85 e5       	ldi	r24, 0x55	; 85
    1800:	80 93 99 02 	sts	0x0299, r24
				init_complete = FALSE;
    1804:	10 92 93 02 	sts	0x0293, r1
				Confirmed     = NOT_CLAIMED;
    1808:	10 92 92 02 	sts	0x0292, r1
				can_instance_init();		// This fires off the sequencing right away.
    180c:	0e 94 b9 08 	call	0x1172	; 0x1172 <_Z17can_instance_initv>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	40 cf       	rjmp	.-384    	; 0x1694 <_Z23can_board_msg_responderP4sCAN+0x2e>
		//ShutDownState = SHUTDOWN_PENDING;
		return TRUE;
	}
	else if ( match( mMsg->id, create_CAN_eid	(ID_INSTANCE_ASSIGN, MyInstance)) )
	{
		Confirmed  = CLAIMED;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	80 93 92 02 	sts	0x0292, r24
		MyInstance = mMsg->data[0];
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	80 93 91 02 	sts	0x0291, r24
		save_configuration();
    1820:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z18save_configurationv>
   		can_remove_instance_from_filter( 1 );
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z31can_remove_instance_from_filterh>
		can_add_instance_to_filter     ( 1, MyInstance );
    182a:	60 91 91 02 	lds	r22, 0x0291
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	0e 94 b2 04 	call	0x964	; 0x964 <_Z26can_add_instance_to_filterht>
		return TRUE;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	2d cf       	rjmp	.-422    	; 0x1694 <_Z23can_board_msg_responderP4sCAN+0x2e>
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
	         match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, 0xFF)) )
    183a:	86 e2       	ldi	r24, 0x26	; 38
    183c:	9c ef       	ldi	r25, 0xFC	; 252
    183e:	6f ef       	ldi	r22, 0xFF	; 255
    1840:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	68 81       	ld	r22, Y
    184a:	79 81       	ldd	r23, Y+1	; 0x01
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z5match6idTypeS_>
		save_configuration();
   		can_remove_instance_from_filter( 1 );
		can_add_instance_to_filter     ( 1, MyInstance );
		return TRUE;
	}
	else if (match( mMsg->id, create_CAN_eid	(ID_INSTANCE_RESTART, MyInstance)) || 
    1854:	88 23       	and	r24, r24
    1856:	29 f6       	brne	.-118    	; 0x17e2 <_Z23can_board_msg_responderP4sCAN+0x17c>
											// no wait till next boot.  This works well!
			}
		}
		return TRUE;
	}	
	else if ( id_match( mMsg->id, create_CAN_eid	(ID_INSTANCE_CLAIM, 0)) )
    1858:	83 e2       	ldi	r24, 0x23	; 35
    185a:	9c ef       	ldi	r25, 0xFC	; 252
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14create_CAN_eidth>
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	68 81       	ld	r22, Y
    1868:	79 81       	ldd	r23, Y+1	; 0x01
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_Z8id_match6idTypeS_>
    1872:	88 23       	and	r24, r24
    1874:	09 f4       	brne	.+2      	; 0x1878 <_Z23can_board_msg_responderP4sCAN+0x212>
    1876:	0e cf       	rjmp	.-484    	; 0x1694 <_Z23can_board_msg_responderP4sCAN+0x2e>
		// Abort any ID_INSTANCE_CLAIM, TX pending.
		// unless it already was sucessfully transmitted.
		//  Do not use : get_instance(mMsg->id) because during the sequence, the 
		//  id is the random delay number.  The actual id is in the message!
		byte instance = mMsg->data[0];
		if (instance == MyInstance) 
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	80 91 91 02 	lds	r24, 0x0291
    187e:	98 17       	cp	r25, r24
    1880:	09 f0       	breq	.+2      	; 0x1884 <_Z23can_board_msg_responderP4sCAN+0x21e>
    1882:	7e cf       	rjmp	.-260    	; 0x1780 <_Z23can_board_msg_responderP4sCAN+0x11a>
		{
			if (Confirmed == CLAIM_PENDING)
    1884:	80 91 92 02 	lds	r24, 0x0292
    1888:	80 32       	cpi	r24, 0x20	; 32
    188a:	41 f0       	breq	.+16     	; 0x189c <_Z23can_board_msg_responderP4sCAN+0x236>
	
					Confirmed = NOT_CLAIMED; 			// 
					can_process_instance_request( mMsg );	// bumps the MyInstance	
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
    188c:	88 23       	and	r24, r24
    188e:	09 f0       	breq	.+2      	; 0x1892 <_Z23can_board_msg_responderP4sCAN+0x22c>
    1890:	77 cf       	rjmp	.-274    	; 0x1780 <_Z23can_board_msg_responderP4sCAN+0x11a>
				can_process_instance_request( mMsg );	// bumps the MyInstance
    1892:	ce 01       	movw	r24, r28
    1894:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z28can_process_instance_requestP4sCAN>
		}
		return TRUE;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	fc ce       	rjmp	.-520    	; 0x1694 <_Z23can_board_msg_responderP4sCAN+0x2e>
					// This code is part of the CAN ISR().  So the CANPAGE is already
					// directed at the Receive buffer.  We want to terminate the Transmit
					// which is on a different MOB.
					// ABORT TRANSMIT MOB FOR ID_INSTANCE_CLAIM :
					int8_t savecanpage;
					savecanpage = CANPAGE;         		// Save current MOB
    189c:	90 91 ed 00 	lds	r25, 0x00ED
					CANPAGE = (INSTANCE_TX_MOB<<4);     // Selects MOB with highest priority interrupt
    18a0:	80 e3       	ldi	r24, 0x30	; 48
    18a2:	80 93 ed 00 	sts	0x00ED, r24
					Can_mob_abort();					// 
    18a6:	80 91 ef 00 	lds	r24, 0x00EF
    18aa:	8f 73       	andi	r24, 0x3F	; 63
    18ac:	80 93 ef 00 	sts	0x00EF, r24
					CANPAGE = savecanpage;      		// Restore original MOB   				
    18b0:	90 93 ed 00 	sts	0x00ED, r25
	
					Confirmed = NOT_CLAIMED; 			// 
    18b4:	10 92 92 02 	sts	0x0292, r1
					can_process_instance_request( mMsg );	// bumps the MyInstance	
    18b8:	ce 01       	movw	r24, r28
    18ba:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z28can_process_instance_requestP4sCAN>
					
					// MyInstance updated in process function below.
			} else if (Confirmed == NOT_CLAIMED)
				can_process_instance_request( mMsg );	// bumps the MyInstance
		}
		return TRUE;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	e9 ce       	rjmp	.-558    	; 0x1694 <_Z23can_board_msg_responderP4sCAN+0x2e>

000018c2 <_Z11FindMailBox6idType>:
struct sCAN Received[MAX_CAN_MSG_MEMORY_SIZE];
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	7b 01       	movw	r14, r22
    18d0:	8c 01       	movw	r16, r24
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    18d2:	c0 e0       	ldi	r28, 0x00	; 0
    18d4:	d0 e0       	ldi	r29, 0x00	; 0
		if ( id_match(mID, Received[i].id) )
    18d6:	ce 01       	movw	r24, r28
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	8c 0f       	add	r24, r28
    18de:	9d 1f       	adc	r25, r29
    18e0:	fc 01       	movw	r30, r24
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	e8 0f       	add	r30, r24
    18ec:	f9 1f       	adc	r31, r25
    18ee:	ed 55       	subi	r30, 0x5D	; 93
    18f0:	fd 4f       	sbci	r31, 0xFD	; 253
    18f2:	20 81       	ld	r18, Z
    18f4:	31 81       	ldd	r19, Z+1	; 0x01
    18f6:	42 81       	ldd	r20, Z+2	; 0x02
    18f8:	53 81       	ldd	r21, Z+3	; 0x03
    18fa:	c8 01       	movw	r24, r16
    18fc:	b7 01       	movw	r22, r14
    18fe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_Z8id_match6idTypeS_>
    1902:	88 23       	and	r24, r24
    1904:	61 f4       	brne	.+24     	; 0x191e <_Z11FindMailBox6idType+0x5c>
byte RxHead = 0;
byte RxTail = 0;

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
    1906:	21 96       	adiw	r28, 0x01	; 1
    1908:	c6 30       	cpi	r28, 0x06	; 6
    190a:	d1 05       	cpc	r29, r1
    190c:	21 f7       	brne	.-56     	; 0x18d6 <_Z11FindMailBox6idType+0x14>
		if ( id_match(mID, Received[i].id) )
			return i;
	return 0xFF;
    190e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	08 95       	ret

byte FindMailBox( tID mID )
{
	for (int i=0; i<MAX_CAN_MSG_MEMORY_SIZE; i++)
		if ( id_match(mID, Received[i].id) )
			return i;
    191e:	8c 2f       	mov	r24, r28
	return 0xFF;
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	08 95       	ret

0000192e <_Z12copy_can_msgP4sCANS0_>:

void copy_can_msg( struct sCAN* mDest, struct sCAN* mSrc )
{
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
    192e:	28 2f       	mov	r18, r24
    1930:	39 2f       	mov	r19, r25
    1932:	d9 01       	movw	r26, r18
    1934:	86 2f       	mov	r24, r22
    1936:	97 2f       	mov	r25, r23
    1938:	fc 01       	movw	r30, r24
    193a:	8f e0       	ldi	r24, 0x0F	; 15
    193c:	01 90       	ld	r0, Z+
    193e:	0d 92       	st	X+, r0
    1940:	81 50       	subi	r24, 0x01	; 1
    1942:	e1 f7       	brne	.-8      	; 0x193c <_Z12copy_can_msgP4sCANS0_+0xe>
}
    1944:	08 95       	ret

00001946 <_Z16addNormalHistoryP4sCAN>:
		addMailboxHistory( mMsg );
	//if (isConfigured4(MAILBOX_HISTORY_OP_MODE))		
}

void addNormalHistory( struct sCAN* mMsg )
{
    1946:	bc 01       	movw	r22, r24
	copy_can_msg( &(Received[RxHead]), mMsg );	
    1948:	80 91 fd 02 	lds	r24, 0x02FD
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9c 01       	movw	r18, r24
    1950:	22 0f       	add	r18, r18
    1952:	33 1f       	adc	r19, r19
    1954:	28 0f       	add	r18, r24
    1956:	39 1f       	adc	r19, r25
    1958:	c9 01       	movw	r24, r18
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	82 0f       	add	r24, r18
    1964:	93 1f       	adc	r25, r19
    1966:	8d 55       	subi	r24, 0x5D	; 93
    1968:	9d 4f       	sbci	r25, 0xFD	; 253
    196a:	0e 94 97 0c 	call	0x192e	; 0x192e <_Z12copy_can_msgP4sCANS0_>
	RxHead++;
    196e:	80 91 fd 02 	lds	r24, 0x02FD
    1972:	8f 5f       	subi	r24, 0xFF	; 255
    1974:	80 93 fd 02 	sts	0x02FD, r24
	if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    1978:	86 30       	cpi	r24, 0x06	; 6
    197a:	10 f0       	brcs	.+4      	; 0x1980 <_Z16addNormalHistoryP4sCAN+0x3a>
		RxHead = 0;
    197c:	10 92 fd 02 	sts	0x02FD, r1
    1980:	08 95       	ret

00001982 <_Z17addMailboxHistoryP4sCAN>:
}

void addMailboxHistory( struct sCAN* mMsg )
{
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
	byte index = FindMailBox( mMsg->id );
    1988:	68 81       	ld	r22, Y
    198a:	79 81       	ldd	r23, Y+1	; 0x01
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z11FindMailBox6idType>
	if (index == 0xFF)
    1994:	8f 3f       	cpi	r24, 0xFF	; 255
    1996:	a9 f0       	breq	.+42     	; 0x19c2 <_Z17addMailboxHistoryP4sCAN+0x40>
		RxHead++;
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
			RxHead = 0;
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9c 01       	movw	r18, r24
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	28 0f       	add	r18, r24
    19a2:	39 1f       	adc	r19, r25
    19a4:	c9 01       	movw	r24, r18
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	82 0f       	add	r24, r18
    19b0:	93 1f       	adc	r25, r19
    19b2:	8d 55       	subi	r24, 0x5D	; 93
    19b4:	9d 4f       	sbci	r25, 0xFD	; 253
    19b6:	be 01       	movw	r22, r28
    19b8:	0e 94 97 0c 	call	0x192e	; 0x192e <_Z12copy_can_msgP4sCANS0_>
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret
{
	byte index = FindMailBox( mMsg->id );
	if (index == 0xFF)
	{
		//Text_Out("NewMailBox");
		copy_can_msg( &(Received[RxHead]), mMsg );
    19c2:	80 91 fd 02 	lds	r24, 0x02FD
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9c 01       	movw	r18, r24
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	28 0f       	add	r18, r24
    19d0:	39 1f       	adc	r19, r25
    19d2:	c9 01       	movw	r24, r18
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	82 0f       	add	r24, r18
    19de:	93 1f       	adc	r25, r19
    19e0:	8d 55       	subi	r24, 0x5D	; 93
    19e2:	9d 4f       	sbci	r25, 0xFD	; 253
    19e4:	be 01       	movw	r22, r28
    19e6:	0e 94 97 0c 	call	0x192e	; 0x192e <_Z12copy_can_msgP4sCANS0_>
		RxHead++;
    19ea:	80 91 fd 02 	lds	r24, 0x02FD
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	80 93 fd 02 	sts	0x02FD, r24
		if (RxHead>=MAX_CAN_MSG_MEMORY_SIZE)
    19f4:	86 30       	cpi	r24, 0x06	; 6
    19f6:	10 f3       	brcs	.-60     	; 0x19bc <_Z17addMailboxHistoryP4sCAN+0x3a>
			RxHead = 0;
    19f8:	10 92 fd 02 	sts	0x02FD, r1
	}
	else {
		copy_can_msg( &(Received[index]), mMsg );	
		//	Text_Out("MailBox="); lcd_draw_byte( index );
	}
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <_Z12QueueMessageP4sCAN>:
inline byte isConfigured2(byte Test)	{  return ((config_byte_2 & Test)>0); };
inline byte isConfigured3(byte Test)	{  return ((config_byte_3 & Test)>0); };
inline byte isConfigured4(byte Test)	{  return ((config_byte_4 & Test)>0); };
    1a02:	20 91 11 03 	lds	r18, 0x0311
	memcpy( (void*)mDest, (void*)mSrc, sizeof(struct sCAN) );	
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1a06:	21 fd       	sbrc	r18, 1
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <_Z12QueueMessageP4sCAN+0xe>
		addNormalHistory ( mMsg );
	else 
		addMailboxHistory( mMsg );
    1a0a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z17addMailboxHistoryP4sCAN>
    1a0e:	08 95       	ret
}

void QueueMessage( struct sCAN* mMsg )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
		addNormalHistory ( mMsg );
    1a10:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_Z16addNormalHistoryP4sCAN>
    1a14:	08 95       	ret

00001a16 <_Z15RetrieveMessagev>:
    1a16:	80 91 11 03 	lds	r24, 0x0311
}

// Return :  TRUE means message was retrieved.  FALSE => none.
struct sCAN* RetrieveMessage( )
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1a1a:	81 ff       	sbrs	r24, 1
    1a1c:	1b c0       	rjmp	.+54     	; 0x1a54 <_Z15RetrieveMessagev+0x3e>
	{
		if (RxTail == RxHead)
    1a1e:	20 91 fe 02 	lds	r18, 0x02FE
    1a22:	80 91 fd 02 	lds	r24, 0x02FD
    1a26:	28 17       	cp	r18, r24
    1a28:	c9 f0       	breq	.+50     	; 0x1a5c <_Z15RetrieveMessagev+0x46>
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    1a2a:	82 2f       	mov	r24, r18
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	80 93 fe 02 	sts	0x02FE, r24
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1a32:	30 e0       	ldi	r19, 0x00	; 0
		{
			RxTail = 0;
			RxHead = 0;
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
    1a34:	c9 01       	movw	r24, r18
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	82 0f       	add	r24, r18
    1a3c:	93 1f       	adc	r25, r19
    1a3e:	9c 01       	movw	r18, r24
    1a40:	22 0f       	add	r18, r18
    1a42:	33 1f       	adc	r19, r19
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	28 0f       	add	r18, r24
    1a4a:	39 1f       	adc	r19, r25
    1a4c:	2d 55       	subi	r18, 0x5D	; 93
    1a4e:	3d 4f       	sbci	r19, 0xFD	; 253
		}
	}
	return NULL;
}
    1a50:	c9 01       	movw	r24, r18
    1a52:	08 95       	ret
			return NULL;
		} else {		
			return GetMessagePtr( RxTail++ );
		}
	}
	return NULL;
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
}
    1a58:	c9 01       	movw	r24, r18
    1a5a:	08 95       	ret
{
	if (isConfigured4(NORMAL_HISTORY_OP_MODE))
	{
		if (RxTail == RxHead)
		{
			RxTail = 0;
    1a5c:	10 92 fe 02 	sts	0x02FE, r1
			RxHead = 0;
    1a60:	10 92 fd 02 	sts	0x02FD, r1
			return NULL;
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	f3 cf       	rjmp	.-26     	; 0x1a50 <_Z15RetrieveMessagev+0x3a>

00001a6a <_Z13GetMessagePtrh>:
	return NULL;
}

struct sCAN* GetMessagePtr( byte mIndex )
{
	return &(Received[mIndex]);
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	44 0f       	add	r20, r20
    1a70:	55 1f       	adc	r21, r21
    1a72:	48 0f       	add	r20, r24
    1a74:	59 1f       	adc	r21, r25
    1a76:	9a 01       	movw	r18, r20
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	24 0f       	add	r18, r20
    1a82:	35 1f       	adc	r19, r21
    1a84:	2d 55       	subi	r18, 0x5D	; 93
    1a86:	3d 4f       	sbci	r19, 0xFD	; 253
}
    1a88:	c9 01       	movw	r24, r18
    1a8a:	08 95       	ret

00001a8c <_Z15CAN_Q_Timeslicev>:
void CAN_Q_Timeslice()
{
	//SET_LED_1();
	/* The CAN ISR() will be adding the messages to this Que. So
	   here we dispatch them.	*/
	struct sCAN* msg = RetrieveMessage();
    1a8c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_Z15RetrieveMessagev>
	if (msg)
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <_Z15CAN_Q_Timeslicev+0x10>
	{
		SET_LED_2();
    1a94:	59 9a       	sbi	0x0b, 1	; 11
    1a96:	20 91 11 03 	lds	r18, 0x0311
		if (isConfigured4(NORMAL_HISTORY_OP_MODE))
    1a9a:	21 ff       	sbrs	r18, 1
    1a9c:	08 95       	ret
			can_file_message( msg );
    1a9e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Z16can_file_messageP4sCAN>
    1aa2:	08 95       	ret

00001aa4 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.
		
*/
void init_leds()
{	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    1aa4:	10 92 00 03 	sts	0x0300, r1
	System_LED_Control.pattern    = 0;
    1aa8:	10 92 ff 02 	sts	0x02FF, r1

#ifdef LED_1
	LED_1_DDR |= (1<<LED_1);
    1aac:	50 9a       	sbi	0x0a, 0	; 10
#endif
#ifdef LED_2
	LED_2_DDR |= (1<<LED_2);
    1aae:	51 9a       	sbi	0x0a, 1	; 10
#endif
#ifdef LED_3
	LED_3_DDR |= (1<<LED_3);
    1ab0:	56 9a       	sbi	0x0a, 6	; 10
#endif
#ifdef LED_4
	LED_4_DDR |= (1<<LED_4);
    1ab2:	57 9a       	sbi	0x0a, 7	; 10
#endif
  	RESET_LED_1();
    1ab4:	58 98       	cbi	0x0b, 0	; 11
	RESET_LED_2();
    1ab6:	59 98       	cbi	0x0b, 1	; 11
	RESET_LED_3();
    1ab8:	5e 98       	cbi	0x0b, 6	; 11
	RESET_LED_4();
    1aba:	5f 98       	cbi	0x0b, 7	; 11
}
    1abc:	08 95       	ret

00001abe <_Z16protected_led_onh>:

/* Not to be called by any user outside of this file! */
void protected_led_on(byte mindex)
{
  switch(mindex)
    1abe:	82 30       	cpi	r24, 0x02	; 2
    1ac0:	69 f0       	breq	.+26     	; 0x1adc <_Z16protected_led_onh+0x1e>
    1ac2:	83 30       	cpi	r24, 0x03	; 3
    1ac4:	28 f0       	brcs	.+10     	; 0x1ad0 <_Z16protected_led_onh+0x12>
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	59 f0       	breq	.+22     	; 0x1ae0 <_Z16protected_led_onh+0x22>
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	29 f0       	breq	.+10     	; 0x1ad8 <_Z16protected_led_onh+0x1a>
    1ace:	08 95       	ret
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	e9 f7       	brne	.-6      	; 0x1ace <_Z16protected_led_onh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
    1ad4:	58 9a       	sbi	0x0b, 0	; 11
    1ad6:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
   case 3:  SET_LED_3();  break;
   case 4:  SET_LED_4();  break;
    1ad8:	5f 9a       	sbi	0x0b, 7	; 11
    1ada:	08 95       	ret
void protected_led_on(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE)  SET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE)  SET_LED_2();  break;
    1adc:	59 9a       	sbi	0x0b, 1	; 11
    1ade:	08 95       	ret
   case 3:  SET_LED_3();  break;
    1ae0:	5e 9a       	sbi	0x0b, 6	; 11
    1ae2:	08 95       	ret

00001ae4 <_Z17protected_led_offh>:
  }
}
/* Not to be called by any user outside of this file! */
void protected_led_off(byte mindex)
{
  switch(mindex)
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	69 f0       	breq	.+26     	; 0x1b02 <_Z17protected_led_offh+0x1e>
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	28 f0       	brcs	.+10     	; 0x1af6 <_Z17protected_led_offh+0x12>
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	59 f0       	breq	.+22     	; 0x1b06 <_Z17protected_led_offh+0x22>
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	29 f0       	breq	.+10     	; 0x1afe <_Z17protected_led_offh+0x1a>
    1af4:	08 95       	ret
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	e9 f7       	brne	.-6      	; 0x1af4 <_Z17protected_led_offh+0x10>
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
    1afa:	58 98       	cbi	0x0b, 0	; 11
    1afc:	08 95       	ret
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
   case 3:  RESET_LED_3();  break;
   case 4:  RESET_LED_4();  break;
    1afe:	5f 98       	cbi	0x0b, 7	; 11
    1b00:	08 95       	ret
void protected_led_off(byte mindex)
{
  switch(mindex)
  {
   case 1:  if(LED_1_2_USEABLE) RESET_LED_1();  break;
   case 2:  if(LED_1_2_USEABLE) RESET_LED_2();  break;
    1b02:	59 98       	cbi	0x0b, 1	; 11
    1b04:	08 95       	ret
   case 3:  RESET_LED_3();  break;
    1b06:	5e 98       	cbi	0x0b, 6	; 11
    1b08:	08 95       	ret

00001b0a <_Z11strobe_ledsh>:
byte strobe_leds( byte mOn )
{
	static byte counter= STROBE_SPEED;	
	static byte i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1b0a:	90 91 00 03 	lds	r25, 0x0300
    1b0e:	99 23       	and	r25, r25
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <_Z11strobe_ledsh+0x10>
    1b12:	92 30       	cpi	r25, 0x02	; 2
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	08 95       	ret
    1b1a:	90 91 1c 01 	lds	r25, 0x011C
    1b1e:	29 2f       	mov	r18, r25
    1b20:	21 50       	subi	r18, 0x01	; 1
    1b22:	20 93 1c 01 	sts	0x011C, r18
    1b26:	99 23       	and	r25, r25
    1b28:	b1 f7       	brne	.-20     	; 0x1b16 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    1b2a:	9a e0       	ldi	r25, 0x0A	; 10
    1b2c:	90 93 1c 01 	sts	0x011C, r25
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    1b30:	88 23       	and	r24, r24
    1b32:	79 f0       	breq	.+30     	; 0x1b52 <_Z11strobe_ledsh+0x48>
    1b34:	80 91 1b 01 	lds	r24, 0x011B
    1b38:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_Z16protected_led_onh>
		i++;
    1b3c:	80 91 1b 01 	lds	r24, 0x011B
    1b40:	8f 5f       	subi	r24, 0xFF	; 255
    1b42:	80 93 1b 01 	sts	0x011B, r24
		if (i>=5)  { i=1; return TRUE; }
    1b46:	85 30       	cpi	r24, 0x05	; 5
    1b48:	78 f0       	brcs	.+30     	; 0x1b68 <_Z11strobe_ledsh+0x5e>
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	80 93 1b 01 	sts	0x011B, r24
    1b50:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) protected_led_on( i ); else protected_led_off( i );
    1b52:	80 91 1b 01 	lds	r24, 0x011B
    1b56:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z17protected_led_offh>
		i++;
    1b5a:	80 91 1b 01 	lds	r24, 0x011B
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	80 93 1b 01 	sts	0x011B, r24
		if (i>=5)  { i=1; return TRUE; }
    1b64:	85 30       	cpi	r24, 0x05	; 5
    1b66:	88 f7       	brcc	.-30     	; 0x1b4a <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    1b68:	80 e0       	ldi	r24, 0x00	; 0
}
    1b6a:	08 95       	ret

00001b6c <_Z6led_onh>:

void led_on(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b6c:	90 91 00 03 	lds	r25, 0x0300
    1b70:	91 11       	cpse	r25, r1
    1b72:	08 95       	ret
	protected_led_on(mindex);
    1b74:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_Z16protected_led_onh>
    1b78:	08 95       	ret

00001b7a <_Z7led_offh>:
}

void led_off(byte mindex)
{
	if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b7a:	90 91 00 03 	lds	r25, 0x0300
    1b7e:	91 11       	cpse	r25, r1
    1b80:	08 95       	ret
	protected_led_off(mindex);
    1b82:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z17protected_led_offh>
    1b86:	08 95       	ret

00001b88 <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
    1b88:	66 23       	and	r22, r22
    1b8a:	19 f4       	brne	.+6      	; 0x1b92 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    1b8c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z7led_offh>
    1b90:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( byte mindex, byte value )
{
	if (value)
		led_on (mindex);
    1b92:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <_Z6led_onh>
    1b96:	08 95       	ret

00001b98 <_Z7set_ledhh>:
	protected_led_off(mindex);
}

void set_led( byte mindex, byte value )
{
    if (System_LED_Control.systemMode)	return;		// no operations in system mode!
    1b98:	90 91 00 03 	lds	r25, 0x0300
    1b9c:	91 11       	cpse	r25, r1
    1b9e:	08 95       	ret
	protected_set_led( mindex, value );
    1ba0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_Z17protected_set_ledhh>
    1ba4:	08 95       	ret

00001ba6 <_Z19protected_show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
    1ba6:	66 23       	and	r22, r22
    1ba8:	69 f0       	breq	.+26     	; 0x1bc4 <_Z19protected_show_bytehh+0x1e>
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1baa:	87 ff       	sbrs	r24, 7
    1bac:	20 c0       	rjmp	.+64     	; 0x1bee <_Z19protected_show_bytehh+0x48>
    1bae:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1bb0:	86 ff       	sbrs	r24, 6
    1bb2:	20 c0       	rjmp	.+64     	; 0x1bf4 <_Z19protected_show_bytehh+0x4e>
    1bb4:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bb6:	85 ff       	sbrs	r24, 5
    1bb8:	20 c0       	rjmp	.+64     	; 0x1bfa <_Z19protected_show_bytehh+0x54>
    1bba:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
    1bbc:	84 fd       	sbrc	r24, 4
    1bbe:	0d c0       	rjmp	.+26     	; 0x1bda <_Z19protected_show_bytehh+0x34>
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1bc0:	58 98       	cbi	0x0b, 0	; 11
    1bc2:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1bc4:	83 ff       	sbrs	r24, 3
    1bc6:	0b c0       	rjmp	.+22     	; 0x1bde <_Z19protected_show_bytehh+0x38>
    1bc8:	5f 9a       	sbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1bca:	82 ff       	sbrs	r24, 2
    1bcc:	0b c0       	rjmp	.+22     	; 0x1be4 <_Z19protected_show_bytehh+0x3e>
    1bce:	5e 9a       	sbi	0x0b, 6	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bd0:	81 ff       	sbrs	r24, 1
    1bd2:	0b c0       	rjmp	.+22     	; 0x1bea <_Z19protected_show_bytehh+0x44>
    1bd4:	59 9a       	sbi	0x0b, 1	; 11
	  if ((result & 0x01)>0)  SET_LED_1()  else RESET_LED_1() ;    
    1bd6:	80 ff       	sbrs	r24, 0
    1bd8:	f3 cf       	rjmp	.-26     	; 0x1bc0 <_Z19protected_show_bytehh+0x1a>
    1bda:	58 9a       	sbi	0x0b, 0	; 11
    1bdc:	08 95       	ret
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
	  if ((result & 0x10)>0)  SET_LED_1()  else RESET_LED_1() ;
  } else {
	  if ((result & 0x08)>0)  SET_LED_4()  else RESET_LED_4() ;
    1bde:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x04)>0)  SET_LED_3()  else RESET_LED_3() ;
    1be0:	82 fd       	sbrc	r24, 2
    1be2:	f5 cf       	rjmp	.-22     	; 0x1bce <_Z19protected_show_bytehh+0x28>
    1be4:	5e 98       	cbi	0x0b, 6	; 11
	  if ((result & 0x02)>0)  SET_LED_2()  else RESET_LED_2() ;
    1be6:	81 fd       	sbrc	r24, 1
    1be8:	f5 cf       	rjmp	.-22     	; 0x1bd4 <_Z19protected_show_bytehh+0x2e>
    1bea:	59 98       	cbi	0x0b, 1	; 11
    1bec:	f4 cf       	rjmp	.-24     	; 0x1bd6 <_Z19protected_show_bytehh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_byte( byte result, byte mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  SET_LED_4()  else RESET_LED_4() ;
    1bee:	5f 98       	cbi	0x0b, 7	; 11
	  if ((result & 0x40)>0)  SET_LED_3()  else RESET_LED_3() ;
    1bf0:	86 fd       	sbrc	r24, 6
    1bf2:	e0 cf       	rjmp	.-64     	; 0x1bb4 <_Z19protected_show_bytehh+0xe>
    1bf4:	5e 98       	cbi	0x0b, 6	; 11
	  if ((result & 0x20)>0)  SET_LED_2()  else RESET_LED_2() ;
    1bf6:	85 fd       	sbrc	r24, 5
    1bf8:	e0 cf       	rjmp	.-64     	; 0x1bba <_Z19protected_show_bytehh+0x14>
    1bfa:	59 98       	cbi	0x0b, 1	; 11
    1bfc:	df cf       	rjmp	.-66     	; 0x1bbc <_Z19protected_show_bytehh+0x16>

00001bfe <_Z9show_bytehh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_byte( byte result, byte mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    1bfe:	90 91 00 03 	lds	r25, 0x0300
    1c02:	99 23       	and	r25, r25
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <_Z9show_bytehh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    1c06:	80 91 ff 02 	lds	r24, 0x02FF
	}
    protected_show_byte( result, mHiNibble );
    1c0a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_Z19protected_show_bytehh>
}
    1c0e:	08 95       	ret

00001c10 <_Z18show_result_toggleh>:

byte hi_low = 1;
void show_result_toggle( byte mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    1c10:	90 91 00 03 	lds	r25, 0x0300
    1c14:	99 23       	and	r25, r25
    1c16:	19 f0       	breq	.+6      	; 0x1c1e <_Z18show_result_toggleh+0xe>
    1c18:	93 30       	cpi	r25, 0x03	; 3
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <_Z18show_result_toggleh+0xe>
    1c1c:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    1c1e:	90 91 19 01 	lds	r25, 0x0119
    1c22:	99 23       	and	r25, r25
    1c24:	59 f4       	brne	.+22     	; 0x1c3c <_Z18show_result_toggleh+0x2c>
		  protected_show_byte( mresult, 1 );
		else 
		  protected_show_byte( mresult, 0 );
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_Z19protected_show_bytehh>
		hi_low = ! hi_low;		// toggle
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 91 19 01 	lds	r25, 0x0119
    1c32:	91 11       	cpse	r25, r1
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	80 93 19 01 	sts	0x0119, r24
    1c3a:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_byte( mresult, 1 );
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_Z19protected_show_bytehh>
    1c42:	f4 cf       	rjmp	.-24     	; 0x1c2c <_Z18show_result_toggleh+0x1c>

00001c44 <_Z21can_parse_led_requestP4sCAN>:
	data[0] Lower nibble
			contains the 4 bit pattern.  If the board only has 3 leds, then they 
			will use the lowest 3 bits of this nibble.
**************************************************************/
void can_parse_led_request( sCAN* mMsg )
{
    1c44:	fc 01       	movw	r30, r24
	System_LED_Control.systemMode = (mMsg->data[0] & 0x0F);
    1c46:	95 81       	ldd	r25, Z+5	; 0x05
    1c48:	9f 70       	andi	r25, 0x0F	; 15
    1c4a:	90 93 00 03 	sts	0x0300, r25
	System_LED_Control.pattern    = (mMsg->data[1] & 0x0F);
    1c4e:	86 81       	ldd	r24, Z+6	; 0x06
    1c50:	8f 70       	andi	r24, 0x0F	; 15
    1c52:	80 93 ff 02 	sts	0x02FF, r24

	switch (System_LED_Control.systemMode)
    1c56:	92 30       	cpi	r25, 0x02	; 2
    1c58:	81 f0       	breq	.+32     	; 0x1c7a <_Z21can_parse_led_requestP4sCAN+0x36>
    1c5a:	93 30       	cpi	r25, 0x03	; 3
    1c5c:	39 f0       	breq	.+14     	; 0x1c6c <_Z21can_parse_led_requestP4sCAN+0x28>
    1c5e:	91 30       	cpi	r25, 0x01	; 1
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <_Z21can_parse_led_requestP4sCAN+0x20>
    1c62:	08 95       	ret
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_Z9show_bytehh>
									  break;
    1c6a:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : System_LED_Control.pattern = MyInstance;
    1c6c:	80 91 91 02 	lds	r24, 0x0291
    1c70:	80 93 ff 02 	sts	0x02FF, r24
									  show_result_toggle( MyInstance );
    1c74:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_Z18show_result_toggleh>
    1c78:	08 95       	ret
	switch (System_LED_Control.systemMode)
	{
	case SYSTEM_LED_MODE_DEVICE 	: break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);
									  break;
	case SYSTEM_LED_MODE_STROBE 	: strobe_leds( System_LED_Control.pattern );
    1c7a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_Z11strobe_ledsh>
									  break;
    1c7e:	08 95       	ret

00001c80 <_Z19led_timeslice_100msv>:
byte    LED_state = 0;

void led_timeslice_100ms()
{
	static byte counter = 1;
	switch (System_LED_Control.systemMode)
    1c80:	80 91 00 03 	lds	r24, 0x0300
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	d9 f0       	breq	.+54     	; 0x1cbe <_Z19led_timeslice_100msv+0x3e>
    1c88:	83 30       	cpi	r24, 0x03	; 3
    1c8a:	49 f0       	breq	.+18     	; 0x1c9e <_Z19led_timeslice_100msv+0x1e>
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <_Z19led_timeslice_100msv+0x12>
    1c90:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
    1c92:	80 91 ff 02 	lds	r24, 0x02FF
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_Z9show_bytehh>
									  break;
    1c9c:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    1c9e:	80 91 1a 01 	lds	r24, 0x011A
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	91 50       	subi	r25, 0x01	; 1
    1ca6:	90 93 1a 01 	sts	0x011A, r25
    1caa:	88 23       	and	r24, r24
    1cac:	89 f7       	brne	.-30     	; 0x1c90 <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    1cae:	8a e0       	ldi	r24, 0x0A	; 10
    1cb0:	80 93 1a 01 	sts	0x011A, r24
										//System_LED_Control.pattern= MyInstance; already done.
										show_result_toggle( MyInstance );
    1cb4:	80 91 91 02 	lds	r24, 0x0291
    1cb8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_Z18show_result_toggleh>
    1cbc:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_byte(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    1cbe:	80 91 ff 02 	lds	r24, 0x02FF
    1cc2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_Z11strobe_ledsh>
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	19 f7       	brne	.-58     	; 0x1c90 <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    1cca:	90 91 ff 02 	lds	r25, 0x02FF
    1cce:	99 23       	and	r25, r25
    1cd0:	19 f4       	brne	.+6      	; 0x1cd8 <_Z19led_timeslice_100msv+0x58>
    1cd2:	80 93 ff 02 	sts	0x02FF, r24
    1cd6:	08 95       	ret
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	fb cf       	rjmp	.-10     	; 0x1cd2 <_Z19led_timeslice_100msv+0x52>

00001cdc <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    1ce0:	10 92 02 03 	sts	0x0302, r1
    1ce4:	10 92 03 03 	sts	0x0303, r1
    1ce8:	10 92 04 03 	sts	0x0304, r1
    1cec:	10 92 05 03 	sts	0x0305, r1
    1cf0:	80 91 02 03 	lds	r24, 0x0302
    1cf4:	90 91 03 03 	lds	r25, 0x0303
    1cf8:	a0 91 04 03 	lds	r26, 0x0304
    1cfc:	b0 91 05 03 	lds	r27, 0x0305
    1d00:	82 17       	cp	r24, r18
    1d02:	93 07       	cpc	r25, r19
    1d04:	a4 07       	cpc	r26, r20
    1d06:	b5 07       	cpc	r27, r21
    1d08:	04 f5       	brge	.+64     	; 0x1d4a <_Z5delayl+0x6e>
    1d0a:	80 91 02 03 	lds	r24, 0x0302
    1d0e:	90 91 03 03 	lds	r25, 0x0303
    1d12:	a0 91 04 03 	lds	r26, 0x0304
    1d16:	b0 91 05 03 	lds	r27, 0x0305
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	b1 1d       	adc	r27, r1
    1d20:	80 93 02 03 	sts	0x0302, r24
    1d24:	90 93 03 03 	sts	0x0303, r25
    1d28:	a0 93 04 03 	sts	0x0304, r26
    1d2c:	b0 93 05 03 	sts	0x0305, r27
    1d30:	80 91 02 03 	lds	r24, 0x0302
    1d34:	90 91 03 03 	lds	r25, 0x0303
    1d38:	a0 91 04 03 	lds	r26, 0x0304
    1d3c:	b0 91 05 03 	lds	r27, 0x0305
    1d40:	82 17       	cp	r24, r18
    1d42:	93 07       	cpc	r25, r19
    1d44:	a4 07       	cpc	r26, r20
    1d46:	b5 07       	cpc	r27, r21
    1d48:	04 f3       	brlt	.-64     	; 0x1d0a <_Z5delayl+0x2e>
    1d4a:	08 95       	ret

00001d4c <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    1d50:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    1d52:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    1d54:	8e ef       	ldi	r24, 0xFE	; 254
    1d56:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    1d58:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    1d5a:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    1d5c:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    1d5e:	10 92 64 00 	sts	0x0064, r1
}
    1d62:	08 95       	ret

00001d64 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    1d6c:	9a ef       	ldi	r25, 0xFA	; 250
    1d6e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    1d70:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    1d74:	10 92 09 03 	sts	0x0309, r1
    1d78:	10 92 08 03 	sts	0x0308, r1
	/******************* PERIPHERAL INIT ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    1d7c:	08 95       	ret

00001d7e <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 0c 03 	sts	0x030C, r24
}
    1d84:	08 95       	ret

00001d86 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    1d86:	10 92 0c 03 	sts	0x030C, r1
}
    1d8a:	08 95       	ret

00001d8c <_Z15System_Dispatchv>:

/* Use this dispatch for all core timing functionality */
void System_Dispatch()
{	
	if ((OS_Event_TIC_Counter % 5) == 0) 	// 10ms tasks
    1d8c:	20 91 08 03 	lds	r18, 0x0308
    1d90:	30 91 09 03 	lds	r19, 0x0309
    1d94:	c9 01       	movw	r24, r18
    1d96:	65 e0       	ldi	r22, 0x05	; 5
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__divmodhi4>
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	39 f4       	brne	.+14     	; 0x1db0 <_Z15System_Dispatchv+0x24>
	{
		if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
    1da2:	c9 01       	movw	r24, r18
    1da4:	6a e0       	ldi	r22, 0x0A	; 10
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__divmodhi4>
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <_Z15System_Dispatchv+0x26>
    1db0:	08 95       	ret
		{
			can_instance_timeslice();
    1db2:	0e 94 11 09 	call	0x1222	; 0x1222 <_Z22can_instance_timeslicev>
			if ((OS_Event_TIC_Counter % 20) == 0)	// 20ms tasks
    1db6:	80 91 08 03 	lds	r24, 0x0308
    1dba:	90 91 09 03 	lds	r25, 0x0309
    1dbe:	64 e1       	ldi	r22, 0x14	; 20
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__divmodhi4>
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	99 f7       	brne	.-26     	; 0x1db0 <_Z15System_Dispatchv+0x24>
			{
				can_board_timeslice();
    1dca:	0e 94 ae 0a 	call	0x155c	; 0x155c <_Z19can_board_timeslicev>
				if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
    1dce:	80 91 08 03 	lds	r24, 0x0308
    1dd2:	90 91 09 03 	lds	r25, 0x0309
    1dd6:	62 e3       	ldi	r22, 0x32	; 50
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__divmodhi4>
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	39 f7       	brne	.-50     	; 0x1db0 <_Z15System_Dispatchv+0x24>
				{
					led_timeslice_100ms();
    1de2:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_Z19led_timeslice_100msv>
    1de6:	08 95       	ret

00001de8 <__vector_15>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    1de8:	1f 92       	push	r1
    1dea:	0f 92       	push	r0
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	0f 92       	push	r0
    1df0:	11 24       	eor	r1, r1
    1df2:	2f 93       	push	r18
    1df4:	3f 93       	push	r19
    1df6:	4f 93       	push	r20
    1df8:	5f 93       	push	r21
    1dfa:	6f 93       	push	r22
    1dfc:	7f 93       	push	r23
    1dfe:	8f 93       	push	r24
    1e00:	9f 93       	push	r25
    1e02:	af 93       	push	r26
    1e04:	bf 93       	push	r27
    1e06:	ef 93       	push	r30
    1e08:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    1e0a:	80 91 0d 03 	lds	r24, 0x030D
    1e0e:	88 23       	and	r24, r24
    1e10:	41 f1       	breq	.+80     	; 0x1e62 <__vector_15+0x7a>
    1e12:	10 92 0d 03 	sts	0x030D, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    1e16:	80 91 0c 03 	lds	r24, 0x030C
    1e1a:	88 23       	and	r24, r24
    1e1c:	49 f1       	breq	.+82     	; 0x1e70 <__vector_15+0x88>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    1e1e:	80 91 06 03 	lds	r24, 0x0306
    1e22:	90 91 07 03 	lds	r25, 0x0307
    1e26:	9c 01       	movw	r18, r24
    1e28:	2f 5f       	subi	r18, 0xFF	; 255
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	30 93 07 03 	sts	0x0307, r19
    1e30:	20 93 06 03 	sts	0x0306, r18
    1e34:	6a e0       	ldi	r22, 0x0A	; 10
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodhi4>
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	31 f1       	breq	.+76     	; 0x1e8c <__vector_15+0xa4>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    1e40:	ff 91       	pop	r31
    1e42:	ef 91       	pop	r30
    1e44:	bf 91       	pop	r27
    1e46:	af 91       	pop	r26
    1e48:	9f 91       	pop	r25
    1e4a:	8f 91       	pop	r24
    1e4c:	7f 91       	pop	r23
    1e4e:	6f 91       	pop	r22
    1e50:	5f 91       	pop	r21
    1e52:	4f 91       	pop	r20
    1e54:	3f 91       	pop	r19
    1e56:	2f 91       	pop	r18
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	80 93 0d 03 	sts	0x030D, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    1e68:	80 91 0c 03 	lds	r24, 0x030C
    1e6c:	88 23       	and	r24, r24
    1e6e:	b9 f6       	brne	.-82     	; 0x1e1e <__vector_15+0x36>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    1e70:	80 91 08 03 	lds	r24, 0x0308
    1e74:	90 91 09 03 	lds	r25, 0x0309
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	90 93 09 03 	sts	0x0309, r25
    1e7e:	80 93 08 03 	sts	0x0308, r24
		System_Dispatch();
    1e82:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_Z15System_Dispatchv>
		OS_Dispatch();
    1e86:	0e 94 91 03 	call	0x722	; 0x722 <_Z11OS_Dispatchv>
    1e8a:	da cf       	rjmp	.-76     	; 0x1e40 <__vector_15+0x58>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    1e8c:	10 92 07 03 	sts	0x0307, r1
    1e90:	10 92 06 03 	sts	0x0306, r1
			OS_Event_TIC_Counter++;
    1e94:	80 91 08 03 	lds	r24, 0x0308
    1e98:	90 91 09 03 	lds	r25, 0x0309
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	90 93 09 03 	sts	0x0309, r25
    1ea2:	80 93 08 03 	sts	0x0308, r24
			OS_Dispatch();
    1ea6:	0e 94 91 03 	call	0x722	; 0x722 <_Z11OS_Dispatchv>
    1eaa:	ca cf       	rjmp	.-108    	; 0x1e40 <__vector_15+0x58>

00001eac <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    1eb4:	9a ef       	ldi	r25, 0xFA	; 250
    1eb6:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    1eb8:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    1ebc:	10 92 09 03 	sts	0x0309, r1
    1ec0:	10 92 08 03 	sts	0x0308, r1
}
    1ec4:	08 95       	ret

00001ec6 <_Z27can_parse_configure_requestP4sCAN>:
Return	:	The module configuration bytes
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
void can_parse_configure_request( sCAN* mMsg )
{
    1ec6:	fc 01       	movw	r30, r24
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
    1ec8:	96 81       	ldd	r25, Z+6	; 0x06
	byte value  =  mMsg->data[2];	// new values 
    1eca:	27 81       	ldd	r18, Z+7	; 0x07
	switch (index)					// alternatively could make config_bytes[4] an array
    1ecc:	85 81       	ldd	r24, Z+5	; 0x05
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	d9 f0       	breq	.+54     	; 0x1f08 <_Z27can_parse_configure_requestP4sCAN+0x42>
    1ed2:	83 30       	cpi	r24, 0x03	; 3
    1ed4:	71 f0       	breq	.+28     	; 0x1ef2 <_Z27can_parse_configure_requestP4sCAN+0x2c>
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <_Z27can_parse_configure_requestP4sCAN+0x16>
    1eda:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
    1edc:	89 2f       	mov	r24, r25
    1ede:	80 95       	com	r24
    1ee0:	82 2b       	or	r24, r18
	byte index  =  mMsg->data[0];	// which config_x byte
	byte mask   =  mMsg->data[1];	// mask (which bits are changing)
	byte value  =  mMsg->data[2];	// new values 
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
    1ee2:	92 23       	and	r25, r18
    1ee4:	20 91 0e 03 	lds	r18, 0x030E
    1ee8:	92 2b       	or	r25, r18
				 config_byte_1 &= ~(mask & (~value));
    1eea:	89 23       	and	r24, r25
    1eec:	80 93 0e 03 	sts	0x030E, r24
				 break;
    1ef0:	08 95       	ret
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
				 config_byte_3 &= ~(mask & (~value));
    1ef2:	89 2f       	mov	r24, r25
    1ef4:	80 95       	com	r24
    1ef6:	82 2b       	or	r24, r18
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
				 break;
		case 3 : config_byte_3 |=  (mask & value);
    1ef8:	92 23       	and	r25, r18
    1efa:	20 91 10 03 	lds	r18, 0x0310
    1efe:	92 2b       	or	r25, r18
				 config_byte_3 &= ~(mask & (~value));
    1f00:	89 23       	and	r24, r25
    1f02:	80 93 10 03 	sts	0x0310, r24
    1f06:	08 95       	ret
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
				 config_byte_2 &= ~(mask & (~value));
    1f08:	89 2f       	mov	r24, r25
    1f0a:	80 95       	com	r24
    1f0c:	82 2b       	or	r24, r18
	switch (index)					// alternatively could make config_bytes[4] an array
	{
		case 1 : config_byte_1 |=  (mask & value);
				 config_byte_1 &= ~(mask & (~value));
				 break;
		case 2 : config_byte_2 |=  (mask & value);
    1f0e:	92 23       	and	r25, r18
    1f10:	20 91 0f 03 	lds	r18, 0x030F
    1f14:	92 2b       	or	r25, r18
				 config_byte_2 &= ~(mask & (~value));
    1f16:	89 23       	and	r24, r25
    1f18:	80 93 0f 03 	sts	0x030F, r24
				 break;
    1f1c:	08 95       	ret

00001f1e <_Z21default_configurationv>:
}

/* Set the config_byte_n bytes to default first time the board is run. CAN_NEW_BOARD */
void default_configuration()
{
	config_byte_1 = 0;
    1f1e:	10 92 0e 03 	sts	0x030E, r1
	config_byte_2 = 0;		// no reports
    1f22:	10 92 0f 03 	sts	0x030F, r1
	config_byte_3 = 0;		// 
    1f26:	10 92 10 03 	sts	0x0310, r1
	config_byte_4 = (CAN_BAUD_250K | NORMAL_HISTORY_OP_MODE);	
    1f2a:	82 e4       	ldi	r24, 0x42	; 66
    1f2c:	80 93 11 03 	sts	0x0311, r24

	// Make sure CAN_NEW_BOARD goes to one!
	// BECAUSE read_configuration_eeprom() reads with a ~
	// the CAN_NEW_BOARD will be a 0 after reflash
	// ALSO SAVED with a ~, so to make as a not new board, 
	init_complete    = FALSE;
    1f30:	10 92 93 02 	sts	0x0293, r1
	sys_config_byte |= CAN_NEW_BOARD;		// means no longer new board
    1f34:	80 91 12 03 	lds	r24, 0x0312
    1f38:	81 60       	ori	r24, 0x01	; 1
    1f3a:	80 93 12 03 	sts	0x0312, r24
	Confirmed        = NOT_CLAIMED; 		// will force MyInstance to init
    1f3e:	10 92 92 02 	sts	0x0292, r1
	MyInstance 		 = 0x98;
    1f42:	88 e9       	ldi	r24, 0x98	; 152
    1f44:	80 93 91 02 	sts	0x0291, r24
}
    1f48:	08 95       	ret

00001f4a <_Z11config_initv>:
inline byte isSysConfigured(byte Test)	{  return ((sys_config_byte & Test)>0); };
    1f4a:	80 91 12 03 	lds	r24, 0x0312
							// b/c BigMotorEn board already does and we should have a consistent interface.
							// and b/c it's better the user knows when it's read.

	// BECAUSE read_configuration_eeprom() reads with a ~, 
	// The CAN_NEW_BOARD bit will be a 0 after reflash (~1)
	if (isSysConfigured(CAN_NEW_BOARD)==FALSE)		// Active Low
    1f4e:	80 fd       	sbrc	r24, 0
    1f50:	08 95       	ret
	{												// First time this board has run!
		default_configuration();					// For the core modules (see above)
    1f52:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_Z21default_configurationv>
		app_default_configuration();				// For application (board specific config) ie motor boards need stops
    1f56:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_Z25app_default_configurationv>
    1f5a:	08 95       	ret

00001f5c <_Z20save_instance_numberPh>:
save_instance_number()
Return	:	The instance number within the network
**************************************************/
byte* save_instance_number(byte* mEEPROMAddress )
{
    eeprom_write_byte( (unsigned char*)mEEPROMAddress,   MyInstance );
    1f5c:	20 91 91 02 	lds	r18, 0x0291
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1f60:	f9 99       	sbic	0x1f, 1	; 31
    1f62:	fe cf       	rjmp	.-4      	; 0x1f60 <_Z20save_instance_numberPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1f64:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f66:	92 bd       	out	0x22, r25	; 34
    1f68:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1f6a:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	fa 9a       	sbi	0x1f, 2	; 31
    1f72:	f9 9a       	sbi	0x1f, 1	; 31
    1f74:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    1f76:	9c 01       	movw	r18, r24
    1f78:	2f 5f       	subi	r18, 0xFF	; 255
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1f7c:	c9 01       	movw	r24, r18
    1f7e:	08 95       	ret

00001f80 <_Z20read_instance_numberPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f80:	f9 99       	sbic	0x1f, 1	; 31
    1f82:	fe cf       	rjmp	.-4      	; 0x1f80 <_Z20read_instance_numberPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1f84:	92 bd       	out	0x22, r25	; 34
    1f86:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1f88:	f8 9a       	sbi	0x1f, 0	; 31
    1f8a:	20 b5       	in	r18, 0x20	; 32
byte* read_instance_number(byte* mEEPROMAddress)
{
    MyInstance = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    1f8c:	20 93 91 02 	sts	0x0291, r18
    return mEEPROMAddress+1;    
    1f90:	9c 01       	movw	r18, r24
    1f92:	2f 5f       	subi	r18, 0xFF	; 255
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1f96:	c9 01       	movw	r24, r18
    1f98:	08 95       	ret

00001f9a <_Z21save_confirmed_statusPh>:
byte* save_confirmed_status(byte* mEEPROMAddress)
{
	//Confirmed = ~Confirmed;  	// flip all bits b/c after erase, 0xFF.
	// NO, don't do the flip b/c we have the config_init() routine now
	// which is done 1 time after reflash (uses 1 bit in config_byte_4)
    eeprom_write_byte( (unsigned char*)mEEPROMAddress, Confirmed  );
    1f9a:	20 91 92 02 	lds	r18, 0x0292
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1f9e:	f9 99       	sbic	0x1f, 1	; 31
    1fa0:	fe cf       	rjmp	.-4      	; 0x1f9e <_Z21save_confirmed_statusPh+0x4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1fa2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1fa4:	92 bd       	out	0x22, r25	; 34
    1fa6:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1fa8:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	fa 9a       	sbi	0x1f, 2	; 31
    1fb0:	f9 9a       	sbi	0x1f, 1	; 31
    1fb2:	0f be       	out	0x3f, r0	; 63
    return mEEPROMAddress+1;
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	2f 5f       	subi	r18, 0xFF	; 255
    1fb8:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1fba:	c9 01       	movw	r24, r18
    1fbc:	08 95       	ret

00001fbe <_Z21read_confirmed_statusPh>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1fbe:	f9 99       	sbic	0x1f, 1	; 31
    1fc0:	fe cf       	rjmp	.-4      	; 0x1fbe <_Z21read_confirmed_statusPh>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1fc2:	92 bd       	out	0x22, r25	; 34
    1fc4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1fc6:	f8 9a       	sbi	0x1f, 0	; 31
    1fc8:	20 b5       	in	r18, 0x20	; 32
byte* read_confirmed_status(byte* mEEPROMAddress)
{
    Confirmed  = eeprom_read_byte( (unsigned char*)mEEPROMAddress );
    1fca:	20 93 92 02 	sts	0x0292, r18
    return mEEPROMAddress+1;
    1fce:	9c 01       	movw	r18, r24
    1fd0:	2f 5f       	subi	r18, 0xFF	; 255
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1fd4:	c9 01       	movw	r24, r18
    1fd6:	08 95       	ret

00001fd8 <_Z25save_configuration_eepromPh>:
Also want to save:  Current thresholds.
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration_eeprom(byte* addr)
{
	eeprom_write_byte( addr++, ~config_byte_1 );
    1fd8:	9c 01       	movw	r18, r24
    1fda:	2f 5f       	subi	r18, 0xFF	; 255
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	40 91 0e 03 	lds	r20, 0x030E
    1fe2:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1fe4:	f9 99       	sbic	0x1f, 1	; 31
    1fe6:	fe cf       	rjmp	.-4      	; 0x1fe4 <_Z25save_configuration_eepromPh+0xc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1fe8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1fea:	92 bd       	out	0x22, r25	; 34
    1fec:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1fee:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	fa 9a       	sbi	0x1f, 2	; 31
    1ff6:	f9 9a       	sbi	0x1f, 1	; 31
    1ff8:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_2 );	
    1ffa:	c9 01       	movw	r24, r18
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	40 91 0f 03 	lds	r20, 0x030F
    2002:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2004:	f9 99       	sbic	0x1f, 1	; 31
    2006:	fe cf       	rjmp	.-4      	; 0x2004 <_Z25save_configuration_eepromPh+0x2c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2008:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    200a:	32 bd       	out	0x22, r19	; 34
    200c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    200e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	fa 9a       	sbi	0x1f, 2	; 31
    2016:	f9 9a       	sbi	0x1f, 1	; 31
    2018:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_3 );	
    201a:	9c 01       	movw	r18, r24
    201c:	2f 5f       	subi	r18, 0xFF	; 255
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	40 91 10 03 	lds	r20, 0x0310
    2024:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2026:	f9 99       	sbic	0x1f, 1	; 31
    2028:	fe cf       	rjmp	.-4      	; 0x2026 <_Z25save_configuration_eepromPh+0x4e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    202a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    202c:	92 bd       	out	0x22, r25	; 34
    202e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2030:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	fa 9a       	sbi	0x1f, 2	; 31
    2038:	f9 9a       	sbi	0x1f, 1	; 31
    203a:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~config_byte_4 );
    203c:	c9 01       	movw	r24, r18
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	40 91 11 03 	lds	r20, 0x0311
    2044:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2046:	f9 99       	sbic	0x1f, 1	; 31
    2048:	fe cf       	rjmp	.-4      	; 0x2046 <_Z25save_configuration_eepromPh+0x6e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    204a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    204c:	32 bd       	out	0x22, r19	; 34
    204e:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2050:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	fa 9a       	sbi	0x1f, 2	; 31
    2058:	f9 9a       	sbi	0x1f, 1	; 31
    205a:	0f be       	out	0x3f, r0	; 63
	eeprom_write_byte( addr++, ~sys_config_byte);
    205c:	9c 01       	movw	r18, r24
    205e:	2f 5f       	subi	r18, 0xFF	; 255
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
    2062:	40 91 12 03 	lds	r20, 0x0312
    2066:	40 95       	com	r20
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2068:	f9 99       	sbic	0x1f, 1	; 31
    206a:	fe cf       	rjmp	.-4      	; 0x2068 <_Z25save_configuration_eepromPh+0x90>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    206c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    206e:	92 bd       	out	0x22, r25	; 34
    2070:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2072:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	fa 9a       	sbi	0x1f, 2	; 31
    207a:	f9 9a       	sbi	0x1f, 1	; 31
    207c:	0f be       	out	0x3f, r0	; 63
	return addr;
}
    207e:	c9 01       	movw	r24, r18
    2080:	08 95       	ret

00002082 <_Z18save_configurationv>:
Report DTCs (overtemperature, over voltage)
***********************************************/
byte* save_configuration()
{
	byte* Ptr;
	Ptr = save_instance_number (INSTANCE_EEPROM_ADDRESS);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_Z20save_instance_numberPh>
	Ptr = save_confirmed_status(Ptr);
    208a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_Z21save_confirmed_statusPh>
	return save_configuration_eeprom( Ptr );
    208e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_Z25save_configuration_eepromPh>
}
    2092:	08 95       	ret

00002094 <_Z21save_configuration_div>:
	}	
}

byte* save_configuration_di()
{
	cli();
    2094:	f8 94       	cli
	return save_configuration();
    2096:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z18save_configurationv>
	sei();
}
    209a:	08 95       	ret

0000209c <_Z21make_system_new_boardt>:
/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
    209c:	22 e1       	ldi	r18, 0x12	; 18
    209e:	84 33       	cpi	r24, 0x34	; 52
    20a0:	92 07       	cpc	r25, r18
    20a2:	11 f0       	breq	.+4      	; 0x20a8 <_Z21make_system_new_boardt+0xc>

/* return 1 = NEW BOARD OKAY
		  0 = bad password */
byte make_system_new_board( word passcode )
{
	byte retval = 0;
    20a4:	80 e0       	ldi	r24, 0x00	; 0
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
		retval = 1;
	}
	return retval;
}
    20a6:	08 95       	ret
byte make_system_new_board( word passcode )
{
	byte retval = 0;
	if (passcode == 0x1234)
	{
		sys_config_byte &= ~CAN_NEW_BOARD;		// 0 means new board!
    20a8:	80 91 12 03 	lds	r24, 0x0312
    20ac:	8e 7f       	andi	r24, 0xFE	; 254
    20ae:	80 93 12 03 	sts	0x0312, r24
		//save_configuration_eeprom( (byte*)INSTANCE_EEPROM_ADDRESS+2 );
		cli(); save_configuration(); sei();
    20b2:	f8 94       	cli
    20b4:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z18save_configurationv>
    20b8:	78 94       	sei
		retval = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	08 95       	ret

000020be <_Z25read_configuration_eepromPh>:
Reads from EEPROM, and stores into the RAM
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration_eeprom(byte* addr)
{
	config_byte_1 = ~(eeprom_read_byte( addr++ ));
    20be:	9c 01       	movw	r18, r24
    20c0:	2f 5f       	subi	r18, 0xFF	; 255
    20c2:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20c4:	f9 99       	sbic	0x1f, 1	; 31
    20c6:	fe cf       	rjmp	.-4      	; 0x20c4 <_Z25read_configuration_eepromPh+0x6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20c8:	92 bd       	out	0x22, r25	; 34
    20ca:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20cc:	f8 9a       	sbi	0x1f, 0	; 31
    20ce:	80 b5       	in	r24, 0x20	; 32
    20d0:	80 95       	com	r24
    20d2:	80 93 0e 03 	sts	0x030E, r24
	config_byte_2 = ~(eeprom_read_byte( addr++ ));
    20d6:	c9 01       	movw	r24, r18
    20d8:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20da:	f9 99       	sbic	0x1f, 1	; 31
    20dc:	fe cf       	rjmp	.-4      	; 0x20da <_Z25read_configuration_eepromPh+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20de:	32 bd       	out	0x22, r19	; 34
    20e0:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20e2:	f8 9a       	sbi	0x1f, 0	; 31
    20e4:	20 b5       	in	r18, 0x20	; 32
    20e6:	20 95       	com	r18
    20e8:	20 93 0f 03 	sts	0x030F, r18
	config_byte_3 = ~(eeprom_read_byte( addr++ ));
    20ec:	9c 01       	movw	r18, r24
    20ee:	2f 5f       	subi	r18, 0xFF	; 255
    20f0:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20f2:	f9 99       	sbic	0x1f, 1	; 31
    20f4:	fe cf       	rjmp	.-4      	; 0x20f2 <_Z25read_configuration_eepromPh+0x34>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20f6:	92 bd       	out	0x22, r25	; 34
    20f8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20fa:	f8 9a       	sbi	0x1f, 0	; 31
    20fc:	80 b5       	in	r24, 0x20	; 32
    20fe:	80 95       	com	r24
    2100:	80 93 10 03 	sts	0x0310, r24
	config_byte_4 = ~(eeprom_read_byte( addr++ ));	
    2104:	c9 01       	movw	r24, r18
    2106:	01 96       	adiw	r24, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2108:	f9 99       	sbic	0x1f, 1	; 31
    210a:	fe cf       	rjmp	.-4      	; 0x2108 <_Z25read_configuration_eepromPh+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    210c:	32 bd       	out	0x22, r19	; 34
    210e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2110:	f8 9a       	sbi	0x1f, 0	; 31
    2112:	20 b5       	in	r18, 0x20	; 32
    2114:	20 95       	com	r18
    2116:	20 93 11 03 	sts	0x0311, r18
	sys_config_byte = ~(eeprom_read_byte( addr++ ));
    211a:	9c 01       	movw	r18, r24
    211c:	2f 5f       	subi	r18, 0xFF	; 255
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2120:	f9 99       	sbic	0x1f, 1	; 31
    2122:	fe cf       	rjmp	.-4      	; 0x2120 <_Z25read_configuration_eepromPh+0x62>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2124:	92 bd       	out	0x22, r25	; 34
    2126:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2128:	f8 9a       	sbi	0x1f, 0	; 31
    212a:	80 b5       	in	r24, 0x20	; 32
    212c:	80 95       	com	r24
    212e:	80 93 12 03 	sts	0x0312, r24
	return addr;
}
    2132:	c9 01       	movw	r24, r18
    2134:	08 95       	ret

00002136 <_Z18read_configurationv>:
sEndPoint structures defined in pot.h
***********************************************************/
byte* read_configuration()
{
	byte* Ptr;
	Ptr = read_instance_number (INSTANCE_EEPROM_ADDRESS);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_Z20read_instance_numberPh>
	Ptr = read_confirmed_status(Ptr);
    213e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <_Z21read_confirmed_statusPh>
	return read_configuration_eeprom(Ptr);
    2142:	0e 94 5f 10 	call	0x20be	; 0x20be <_Z25read_configuration_eepromPh>
}
    2146:	08 95       	ret

00002148 <__fixunssfsi>:
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	7b 01       	movw	r14, r22
    2152:	8c 01       	movw	r16, r24
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	5f e4       	ldi	r21, 0x4F	; 79
    215c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__gesf2>
    2160:	87 fd       	sbrc	r24, 7
    2162:	11 c0       	rjmp	.+34     	; 0x2186 <__fixunssfsi+0x3e>
    2164:	c8 01       	movw	r24, r16
    2166:	b7 01       	movw	r22, r14
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	5f e4       	ldi	r21, 0x4F	; 79
    2170:	0e 94 47 12 	call	0x248e	; 0x248e <__subsf3>
    2174:	0e 94 a2 13 	call	0x2744	; 0x2744 <__fixsfsi>
    2178:	9b 01       	movw	r18, r22
    217a:	ac 01       	movw	r20, r24
    217c:	20 50       	subi	r18, 0x00	; 0
    217e:	30 40       	sbci	r19, 0x00	; 0
    2180:	40 40       	sbci	r20, 0x00	; 0
    2182:	50 48       	sbci	r21, 0x80	; 128
    2184:	06 c0       	rjmp	.+12     	; 0x2192 <__fixunssfsi+0x4a>
    2186:	c8 01       	movw	r24, r16
    2188:	b7 01       	movw	r22, r14
    218a:	0e 94 a2 13 	call	0x2744	; 0x2744 <__fixsfsi>
    218e:	9b 01       	movw	r18, r22
    2190:	ac 01       	movw	r20, r24
    2192:	b9 01       	movw	r22, r18
    2194:	ca 01       	movw	r24, r20
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	ff 90       	pop	r15
    219c:	ef 90       	pop	r14
    219e:	08 95       	ret

000021a0 <_fpadd_parts>:
    21a0:	a0 e0       	ldi	r26, 0x00	; 0
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 ed       	ldi	r30, 0xD6	; 214
    21a6:	f0 e1       	ldi	r31, 0x10	; 16
    21a8:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__+0x8>
    21ac:	fc 01       	movw	r30, r24
    21ae:	ea 01       	movw	r28, r20
    21b0:	80 81       	ld	r24, Z
    21b2:	82 30       	cpi	r24, 0x02	; 2
    21b4:	08 f4       	brcc	.+2      	; 0x21b8 <_fpadd_parts+0x18>
    21b6:	38 c1       	rjmp	.+624    	; 0x2428 <_fpadd_parts+0x288>
    21b8:	db 01       	movw	r26, r22
    21ba:	9c 91       	ld	r25, X
    21bc:	92 30       	cpi	r25, 0x02	; 2
    21be:	08 f4       	brcc	.+2      	; 0x21c2 <_fpadd_parts+0x22>
    21c0:	30 c1       	rjmp	.+608    	; 0x2422 <_fpadd_parts+0x282>
    21c2:	84 30       	cpi	r24, 0x04	; 4
    21c4:	59 f4       	brne	.+22     	; 0x21dc <_fpadd_parts+0x3c>
    21c6:	94 30       	cpi	r25, 0x04	; 4
    21c8:	09 f0       	breq	.+2      	; 0x21cc <_fpadd_parts+0x2c>
    21ca:	2e c1       	rjmp	.+604    	; 0x2428 <_fpadd_parts+0x288>
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	11 96       	adiw	r26, 0x01	; 1
    21d0:	8c 91       	ld	r24, X
    21d2:	11 97       	sbiw	r26, 0x01	; 1
    21d4:	98 17       	cp	r25, r24
    21d6:	09 f0       	breq	.+2      	; 0x21da <_fpadd_parts+0x3a>
    21d8:	21 c1       	rjmp	.+578    	; 0x241c <_fpadd_parts+0x27c>
    21da:	26 c1       	rjmp	.+588    	; 0x2428 <_fpadd_parts+0x288>
    21dc:	94 30       	cpi	r25, 0x04	; 4
    21de:	09 f4       	brne	.+2      	; 0x21e2 <_fpadd_parts+0x42>
    21e0:	20 c1       	rjmp	.+576    	; 0x2422 <_fpadd_parts+0x282>
    21e2:	92 30       	cpi	r25, 0x02	; 2
    21e4:	b1 f4       	brne	.+44     	; 0x2212 <_fpadd_parts+0x72>
    21e6:	82 30       	cpi	r24, 0x02	; 2
    21e8:	09 f0       	breq	.+2      	; 0x21ec <_fpadd_parts+0x4c>
    21ea:	1e c1       	rjmp	.+572    	; 0x2428 <_fpadd_parts+0x288>
    21ec:	ca 01       	movw	r24, r20
    21ee:	af 01       	movw	r20, r30
    21f0:	28 e0       	ldi	r18, 0x08	; 8
    21f2:	da 01       	movw	r26, r20
    21f4:	0d 90       	ld	r0, X+
    21f6:	ad 01       	movw	r20, r26
    21f8:	dc 01       	movw	r26, r24
    21fa:	0d 92       	st	X+, r0
    21fc:	cd 01       	movw	r24, r26
    21fe:	21 50       	subi	r18, 0x01	; 1
    2200:	c1 f7       	brne	.-16     	; 0x21f2 <_fpadd_parts+0x52>
    2202:	db 01       	movw	r26, r22
    2204:	11 96       	adiw	r26, 0x01	; 1
    2206:	8c 91       	ld	r24, X
    2208:	11 97       	sbiw	r26, 0x01	; 1
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	89 23       	and	r24, r25
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	0a c1       	rjmp	.+532    	; 0x2426 <_fpadd_parts+0x286>
    2212:	82 30       	cpi	r24, 0x02	; 2
    2214:	09 f4       	brne	.+2      	; 0x2218 <_fpadd_parts+0x78>
    2216:	05 c1       	rjmp	.+522    	; 0x2422 <_fpadd_parts+0x282>
    2218:	c2 80       	ldd	r12, Z+2	; 0x02
    221a:	d3 80       	ldd	r13, Z+3	; 0x03
    221c:	db 01       	movw	r26, r22
    221e:	12 96       	adiw	r26, 0x02	; 2
    2220:	6d 90       	ld	r6, X+
    2222:	7c 90       	ld	r7, X
    2224:	13 97       	sbiw	r26, 0x03	; 3
    2226:	24 81       	ldd	r18, Z+4	; 0x04
    2228:	35 81       	ldd	r19, Z+5	; 0x05
    222a:	46 81       	ldd	r20, Z+6	; 0x06
    222c:	57 81       	ldd	r21, Z+7	; 0x07
    222e:	14 96       	adiw	r26, 0x04	; 4
    2230:	ed 90       	ld	r14, X+
    2232:	fd 90       	ld	r15, X+
    2234:	0d 91       	ld	r16, X+
    2236:	1c 91       	ld	r17, X
    2238:	17 97       	sbiw	r26, 0x07	; 7
    223a:	c6 01       	movw	r24, r12
    223c:	86 19       	sub	r24, r6
    223e:	97 09       	sbc	r25, r7
    2240:	5c 01       	movw	r10, r24
    2242:	97 ff       	sbrs	r25, 7
    2244:	04 c0       	rjmp	.+8      	; 0x224e <_fpadd_parts+0xae>
    2246:	aa 24       	eor	r10, r10
    2248:	bb 24       	eor	r11, r11
    224a:	a8 1a       	sub	r10, r24
    224c:	b9 0a       	sbc	r11, r25
    224e:	b0 e2       	ldi	r27, 0x20	; 32
    2250:	ab 16       	cp	r10, r27
    2252:	b1 04       	cpc	r11, r1
    2254:	0c f0       	brlt	.+2      	; 0x2258 <_fpadd_parts+0xb8>
    2256:	61 c0       	rjmp	.+194    	; 0x231a <_fpadd_parts+0x17a>
    2258:	18 16       	cp	r1, r24
    225a:	19 06       	cpc	r1, r25
    225c:	6c f5       	brge	.+90     	; 0x22b8 <_fpadd_parts+0x118>
    225e:	37 01       	movw	r6, r14
    2260:	48 01       	movw	r8, r16
    2262:	0a 2c       	mov	r0, r10
    2264:	04 c0       	rjmp	.+8      	; 0x226e <_fpadd_parts+0xce>
    2266:	96 94       	lsr	r9
    2268:	87 94       	ror	r8
    226a:	77 94       	ror	r7
    226c:	67 94       	ror	r6
    226e:	0a 94       	dec	r0
    2270:	d2 f7       	brpl	.-12     	; 0x2266 <_fpadd_parts+0xc6>
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 e0       	ldi	r26, 0x00	; 0
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	0a 2c       	mov	r0, r10
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <_fpadd_parts+0xe6>
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	aa 1f       	adc	r26, r26
    2284:	bb 1f       	adc	r27, r27
    2286:	0a 94       	dec	r0
    2288:	d2 f7       	brpl	.-12     	; 0x227e <_fpadd_parts+0xde>
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	a1 09       	sbc	r26, r1
    228e:	b1 09       	sbc	r27, r1
    2290:	8e 21       	and	r24, r14
    2292:	9f 21       	and	r25, r15
    2294:	a0 23       	and	r26, r16
    2296:	b1 23       	and	r27, r17
    2298:	ee 24       	eor	r14, r14
    229a:	ff 24       	eor	r15, r15
    229c:	87 01       	movw	r16, r14
    229e:	e3 94       	inc	r14
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	a1 05       	cpc	r26, r1
    22a4:	b1 05       	cpc	r27, r1
    22a6:	19 f4       	brne	.+6      	; 0x22ae <_fpadd_parts+0x10e>
    22a8:	ee 24       	eor	r14, r14
    22aa:	ff 24       	eor	r15, r15
    22ac:	87 01       	movw	r16, r14
    22ae:	e6 28       	or	r14, r6
    22b0:	f7 28       	or	r15, r7
    22b2:	08 29       	or	r16, r8
    22b4:	19 29       	or	r17, r9
    22b6:	3c c0       	rjmp	.+120    	; 0x2330 <_fpadd_parts+0x190>
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	d1 f1       	breq	.+116    	; 0x2330 <_fpadd_parts+0x190>
    22bc:	ca 0c       	add	r12, r10
    22be:	db 1c       	adc	r13, r11
    22c0:	39 01       	movw	r6, r18
    22c2:	4a 01       	movw	r8, r20
    22c4:	0a 2c       	mov	r0, r10
    22c6:	04 c0       	rjmp	.+8      	; 0x22d0 <_fpadd_parts+0x130>
    22c8:	96 94       	lsr	r9
    22ca:	87 94       	ror	r8
    22cc:	77 94       	ror	r7
    22ce:	67 94       	ror	r6
    22d0:	0a 94       	dec	r0
    22d2:	d2 f7       	brpl	.-12     	; 0x22c8 <_fpadd_parts+0x128>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a0 e0       	ldi	r26, 0x00	; 0
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	0a 2c       	mov	r0, r10
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <_fpadd_parts+0x148>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	aa 1f       	adc	r26, r26
    22e6:	bb 1f       	adc	r27, r27
    22e8:	0a 94       	dec	r0
    22ea:	d2 f7       	brpl	.-12     	; 0x22e0 <_fpadd_parts+0x140>
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	a1 09       	sbc	r26, r1
    22f0:	b1 09       	sbc	r27, r1
    22f2:	82 23       	and	r24, r18
    22f4:	93 23       	and	r25, r19
    22f6:	a4 23       	and	r26, r20
    22f8:	b5 23       	and	r27, r21
    22fa:	21 e0       	ldi	r18, 0x01	; 1
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	a1 05       	cpc	r26, r1
    2306:	b1 05       	cpc	r27, r1
    2308:	19 f4       	brne	.+6      	; 0x2310 <_fpadd_parts+0x170>
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	a9 01       	movw	r20, r18
    2310:	26 29       	or	r18, r6
    2312:	37 29       	or	r19, r7
    2314:	48 29       	or	r20, r8
    2316:	59 29       	or	r21, r9
    2318:	0b c0       	rjmp	.+22     	; 0x2330 <_fpadd_parts+0x190>
    231a:	6c 14       	cp	r6, r12
    231c:	7d 04       	cpc	r7, r13
    231e:	24 f4       	brge	.+8      	; 0x2328 <_fpadd_parts+0x188>
    2320:	ee 24       	eor	r14, r14
    2322:	ff 24       	eor	r15, r15
    2324:	87 01       	movw	r16, r14
    2326:	04 c0       	rjmp	.+8      	; 0x2330 <_fpadd_parts+0x190>
    2328:	63 01       	movw	r12, r6
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	a9 01       	movw	r20, r18
    2330:	81 81       	ldd	r24, Z+1	; 0x01
    2332:	fb 01       	movw	r30, r22
    2334:	91 81       	ldd	r25, Z+1	; 0x01
    2336:	89 17       	cp	r24, r25
    2338:	09 f4       	brne	.+2      	; 0x233c <_fpadd_parts+0x19c>
    233a:	45 c0       	rjmp	.+138    	; 0x23c6 <_fpadd_parts+0x226>
    233c:	88 23       	and	r24, r24
    233e:	49 f0       	breq	.+18     	; 0x2352 <_fpadd_parts+0x1b2>
    2340:	d8 01       	movw	r26, r16
    2342:	c7 01       	movw	r24, r14
    2344:	82 1b       	sub	r24, r18
    2346:	93 0b       	sbc	r25, r19
    2348:	a4 0b       	sbc	r26, r20
    234a:	b5 0b       	sbc	r27, r21
    234c:	9c 01       	movw	r18, r24
    234e:	ad 01       	movw	r20, r26
    2350:	04 c0       	rjmp	.+8      	; 0x235a <_fpadd_parts+0x1ba>
    2352:	2e 19       	sub	r18, r14
    2354:	3f 09       	sbc	r19, r15
    2356:	40 0b       	sbc	r20, r16
    2358:	51 0b       	sbc	r21, r17
    235a:	57 fd       	sbrc	r21, 7
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <_fpadd_parts+0x1c6>
    235e:	19 82       	std	Y+1, r1	; 0x01
    2360:	db 82       	std	Y+3, r13	; 0x03
    2362:	ca 82       	std	Y+2, r12	; 0x02
    2364:	0b c0       	rjmp	.+22     	; 0x237c <_fpadd_parts+0x1dc>
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	db 82       	std	Y+3, r13	; 0x03
    236c:	ca 82       	std	Y+2, r12	; 0x02
    236e:	50 95       	com	r21
    2370:	40 95       	com	r20
    2372:	30 95       	com	r19
    2374:	21 95       	neg	r18
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	4f 4f       	sbci	r20, 0xFF	; 255
    237a:	5f 4f       	sbci	r21, 0xFF	; 255
    237c:	2c 83       	std	Y+4, r18	; 0x04
    237e:	3d 83       	std	Y+5, r19	; 0x05
    2380:	4e 83       	std	Y+6, r20	; 0x06
    2382:	5f 83       	std	Y+7, r21	; 0x07
    2384:	0d c0       	rjmp	.+26     	; 0x23a0 <_fpadd_parts+0x200>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	aa 1f       	adc	r26, r26
    238c:	bb 1f       	adc	r27, r27
    238e:	8c 83       	std	Y+4, r24	; 0x04
    2390:	9d 83       	std	Y+5, r25	; 0x05
    2392:	ae 83       	std	Y+6, r26	; 0x06
    2394:	bf 83       	std	Y+7, r27	; 0x07
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	9b 83       	std	Y+3, r25	; 0x03
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	8c 81       	ldd	r24, Y+4	; 0x04
    23a2:	9d 81       	ldd	r25, Y+5	; 0x05
    23a4:	ae 81       	ldd	r26, Y+6	; 0x06
    23a6:	bf 81       	ldd	r27, Y+7	; 0x07
    23a8:	9c 01       	movw	r18, r24
    23aa:	ad 01       	movw	r20, r26
    23ac:	21 50       	subi	r18, 0x01	; 1
    23ae:	30 40       	sbci	r19, 0x00	; 0
    23b0:	40 40       	sbci	r20, 0x00	; 0
    23b2:	50 40       	sbci	r21, 0x00	; 0
    23b4:	2f 3f       	cpi	r18, 0xFF	; 255
    23b6:	ef ef       	ldi	r30, 0xFF	; 255
    23b8:	3e 07       	cpc	r19, r30
    23ba:	ef ef       	ldi	r30, 0xFF	; 255
    23bc:	4e 07       	cpc	r20, r30
    23be:	ef e3       	ldi	r30, 0x3F	; 63
    23c0:	5e 07       	cpc	r21, r30
    23c2:	08 f3       	brcs	.-62     	; 0x2386 <_fpadd_parts+0x1e6>
    23c4:	0b c0       	rjmp	.+22     	; 0x23dc <_fpadd_parts+0x23c>
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	db 82       	std	Y+3, r13	; 0x03
    23ca:	ca 82       	std	Y+2, r12	; 0x02
    23cc:	2e 0d       	add	r18, r14
    23ce:	3f 1d       	adc	r19, r15
    23d0:	40 1f       	adc	r20, r16
    23d2:	51 1f       	adc	r21, r17
    23d4:	2c 83       	std	Y+4, r18	; 0x04
    23d6:	3d 83       	std	Y+5, r19	; 0x05
    23d8:	4e 83       	std	Y+6, r20	; 0x06
    23da:	5f 83       	std	Y+7, r21	; 0x07
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	88 83       	st	Y, r24
    23e0:	2c 81       	ldd	r18, Y+4	; 0x04
    23e2:	3d 81       	ldd	r19, Y+5	; 0x05
    23e4:	4e 81       	ldd	r20, Y+6	; 0x06
    23e6:	5f 81       	ldd	r21, Y+7	; 0x07
    23e8:	57 ff       	sbrs	r21, 7
    23ea:	1d c0       	rjmp	.+58     	; 0x2426 <_fpadd_parts+0x286>
    23ec:	da 01       	movw	r26, r20
    23ee:	c9 01       	movw	r24, r18
    23f0:	81 70       	andi	r24, 0x01	; 1
    23f2:	90 70       	andi	r25, 0x00	; 0
    23f4:	a0 70       	andi	r26, 0x00	; 0
    23f6:	b0 70       	andi	r27, 0x00	; 0
    23f8:	56 95       	lsr	r21
    23fa:	47 95       	ror	r20
    23fc:	37 95       	ror	r19
    23fe:	27 95       	ror	r18
    2400:	82 2b       	or	r24, r18
    2402:	93 2b       	or	r25, r19
    2404:	a4 2b       	or	r26, r20
    2406:	b5 2b       	or	r27, r21
    2408:	8c 83       	std	Y+4, r24	; 0x04
    240a:	9d 83       	std	Y+5, r25	; 0x05
    240c:	ae 83       	std	Y+6, r26	; 0x06
    240e:	bf 83       	std	Y+7, r27	; 0x07
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	9b 83       	std	Y+3, r25	; 0x03
    2418:	8a 83       	std	Y+2, r24	; 0x02
    241a:	05 c0       	rjmp	.+10     	; 0x2426 <_fpadd_parts+0x286>
    241c:	ed e1       	ldi	r30, 0x1D	; 29
    241e:	f1 e0       	ldi	r31, 0x01	; 1
    2420:	03 c0       	rjmp	.+6      	; 0x2428 <_fpadd_parts+0x288>
    2422:	fb 01       	movw	r30, r22
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <_fpadd_parts+0x288>
    2426:	fe 01       	movw	r30, r28
    2428:	cf 01       	movw	r24, r30
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	ee e0       	ldi	r30, 0x0E	; 14
    2430:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__+0x8>

00002434 <__addsf3>:
    2434:	a0 e2       	ldi	r26, 0x20	; 32
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e0 e2       	ldi	r30, 0x20	; 32
    243a:	f2 e1       	ldi	r31, 0x12	; 18
    243c:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__prologue_saves__+0x18>
    2440:	69 83       	std	Y+1, r22	; 0x01
    2442:	7a 83       	std	Y+2, r23	; 0x02
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	2d 83       	std	Y+5, r18	; 0x05
    244a:	3e 83       	std	Y+6, r19	; 0x06
    244c:	4f 83       	std	Y+7, r20	; 0x07
    244e:	58 87       	std	Y+8, r21	; 0x08
    2450:	89 e0       	ldi	r24, 0x09	; 9
    2452:	e8 2e       	mov	r14, r24
    2454:	f1 2c       	mov	r15, r1
    2456:	ec 0e       	add	r14, r28
    2458:	fd 1e       	adc	r15, r29
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	b7 01       	movw	r22, r14
    2460:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2464:	8e 01       	movw	r16, r28
    2466:	0f 5e       	subi	r16, 0xEF	; 239
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	ce 01       	movw	r24, r28
    246c:	05 96       	adiw	r24, 0x05	; 5
    246e:	b8 01       	movw	r22, r16
    2470:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2474:	c7 01       	movw	r24, r14
    2476:	b8 01       	movw	r22, r16
    2478:	ae 01       	movw	r20, r28
    247a:	47 5e       	subi	r20, 0xE7	; 231
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <_fpadd_parts>
    2482:	0e 94 c6 14 	call	0x298c	; 0x298c <__pack_f>
    2486:	a0 96       	adiw	r28, 0x20	; 32
    2488:	e6 e0       	ldi	r30, 0x06	; 6
    248a:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__epilogue_restores__+0x18>

0000248e <__subsf3>:
    248e:	a0 e2       	ldi	r26, 0x20	; 32
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	ed e4       	ldi	r30, 0x4D	; 77
    2494:	f2 e1       	ldi	r31, 0x12	; 18
    2496:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__prologue_saves__+0x18>
    249a:	69 83       	std	Y+1, r22	; 0x01
    249c:	7a 83       	std	Y+2, r23	; 0x02
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	2d 83       	std	Y+5, r18	; 0x05
    24a4:	3e 83       	std	Y+6, r19	; 0x06
    24a6:	4f 83       	std	Y+7, r20	; 0x07
    24a8:	58 87       	std	Y+8, r21	; 0x08
    24aa:	8e 01       	movw	r16, r28
    24ac:	07 5f       	subi	r16, 0xF7	; 247
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	ce 01       	movw	r24, r28
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	b8 01       	movw	r22, r16
    24b6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    24ba:	91 e1       	ldi	r25, 0x11	; 17
    24bc:	e9 2e       	mov	r14, r25
    24be:	f1 2c       	mov	r15, r1
    24c0:	ec 0e       	add	r14, r28
    24c2:	fd 1e       	adc	r15, r29
    24c4:	ce 01       	movw	r24, r28
    24c6:	05 96       	adiw	r24, 0x05	; 5
    24c8:	b7 01       	movw	r22, r14
    24ca:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    24ce:	8a 89       	ldd	r24, Y+18	; 0x12
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	89 27       	eor	r24, r25
    24d4:	8a 8b       	std	Y+18, r24	; 0x12
    24d6:	c8 01       	movw	r24, r16
    24d8:	b7 01       	movw	r22, r14
    24da:	ae 01       	movw	r20, r28
    24dc:	47 5e       	subi	r20, 0xE7	; 231
    24de:	5f 4f       	sbci	r21, 0xFF	; 255
    24e0:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <_fpadd_parts>
    24e4:	0e 94 c6 14 	call	0x298c	; 0x298c <__pack_f>
    24e8:	a0 96       	adiw	r28, 0x20	; 32
    24ea:	e6 e0       	ldi	r30, 0x06	; 6
    24ec:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__epilogue_restores__+0x18>

000024f0 <__mulsf3>:
    24f0:	a0 e2       	ldi	r26, 0x20	; 32
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ee e7       	ldi	r30, 0x7E	; 126
    24f6:	f2 e1       	ldi	r31, 0x12	; 18
    24f8:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__>
    24fc:	69 83       	std	Y+1, r22	; 0x01
    24fe:	7a 83       	std	Y+2, r23	; 0x02
    2500:	8b 83       	std	Y+3, r24	; 0x03
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	2d 83       	std	Y+5, r18	; 0x05
    2506:	3e 83       	std	Y+6, r19	; 0x06
    2508:	4f 83       	std	Y+7, r20	; 0x07
    250a:	58 87       	std	Y+8, r21	; 0x08
    250c:	ce 01       	movw	r24, r28
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	be 01       	movw	r22, r28
    2512:	67 5f       	subi	r22, 0xF7	; 247
    2514:	7f 4f       	sbci	r23, 0xFF	; 255
    2516:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    251a:	ce 01       	movw	r24, r28
    251c:	05 96       	adiw	r24, 0x05	; 5
    251e:	be 01       	movw	r22, r28
    2520:	6f 5e       	subi	r22, 0xEF	; 239
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2528:	99 85       	ldd	r25, Y+9	; 0x09
    252a:	92 30       	cpi	r25, 0x02	; 2
    252c:	78 f0       	brcs	.+30     	; 0x254c <__mulsf3+0x5c>
    252e:	89 89       	ldd	r24, Y+17	; 0x11
    2530:	82 30       	cpi	r24, 0x02	; 2
    2532:	c0 f0       	brcs	.+48     	; 0x2564 <__mulsf3+0x74>
    2534:	94 30       	cpi	r25, 0x04	; 4
    2536:	19 f4       	brne	.+6      	; 0x253e <__mulsf3+0x4e>
    2538:	82 30       	cpi	r24, 0x02	; 2
    253a:	41 f4       	brne	.+16     	; 0x254c <__mulsf3+0x5c>
    253c:	cb c0       	rjmp	.+406    	; 0x26d4 <__mulsf3+0x1e4>
    253e:	84 30       	cpi	r24, 0x04	; 4
    2540:	19 f4       	brne	.+6      	; 0x2548 <__mulsf3+0x58>
    2542:	92 30       	cpi	r25, 0x02	; 2
    2544:	79 f4       	brne	.+30     	; 0x2564 <__mulsf3+0x74>
    2546:	c6 c0       	rjmp	.+396    	; 0x26d4 <__mulsf3+0x1e4>
    2548:	92 30       	cpi	r25, 0x02	; 2
    254a:	51 f4       	brne	.+20     	; 0x2560 <__mulsf3+0x70>
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2550:	9a 89       	ldd	r25, Y+18	; 0x12
    2552:	29 17       	cp	r18, r25
    2554:	09 f4       	brne	.+2      	; 0x2558 <__mulsf3+0x68>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	8a 87       	std	Y+10, r24	; 0x0a
    255a:	ce 01       	movw	r24, r28
    255c:	09 96       	adiw	r24, 0x09	; 9
    255e:	bc c0       	rjmp	.+376    	; 0x26d8 <__mulsf3+0x1e8>
    2560:	82 30       	cpi	r24, 0x02	; 2
    2562:	51 f4       	brne	.+20     	; 0x2578 <__mulsf3+0x88>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	2a 85       	ldd	r18, Y+10	; 0x0a
    2568:	9a 89       	ldd	r25, Y+18	; 0x12
    256a:	29 17       	cp	r18, r25
    256c:	09 f4       	brne	.+2      	; 0x2570 <__mulsf3+0x80>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	8a 8b       	std	Y+18, r24	; 0x12
    2572:	ce 01       	movw	r24, r28
    2574:	41 96       	adiw	r24, 0x11	; 17
    2576:	b0 c0       	rjmp	.+352    	; 0x26d8 <__mulsf3+0x1e8>
    2578:	6d 84       	ldd	r6, Y+13	; 0x0d
    257a:	7e 84       	ldd	r7, Y+14	; 0x0e
    257c:	8f 84       	ldd	r8, Y+15	; 0x0f
    257e:	98 88       	ldd	r9, Y+16	; 0x10
    2580:	ed 88       	ldd	r14, Y+21	; 0x15
    2582:	fe 88       	ldd	r15, Y+22	; 0x16
    2584:	0f 89       	ldd	r16, Y+23	; 0x17
    2586:	18 8d       	ldd	r17, Y+24	; 0x18
    2588:	e0 e2       	ldi	r30, 0x20	; 32
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	dc 01       	movw	r26, r24
    2592:	aa 24       	eor	r10, r10
    2594:	bb 24       	eor	r11, r11
    2596:	65 01       	movw	r12, r10
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	a9 01       	movw	r20, r18
    259e:	b3 01       	movw	r22, r6
    25a0:	61 70       	andi	r22, 0x01	; 1
    25a2:	70 70       	andi	r23, 0x00	; 0
    25a4:	61 15       	cp	r22, r1
    25a6:	71 05       	cpc	r23, r1
    25a8:	d1 f0       	breq	.+52     	; 0x25de <__mulsf3+0xee>
    25aa:	2e 0d       	add	r18, r14
    25ac:	3f 1d       	adc	r19, r15
    25ae:	40 1f       	adc	r20, r16
    25b0:	51 1f       	adc	r21, r17
    25b2:	15 01       	movw	r2, r10
    25b4:	26 01       	movw	r4, r12
    25b6:	28 0e       	add	r2, r24
    25b8:	39 1e       	adc	r3, r25
    25ba:	4a 1e       	adc	r4, r26
    25bc:	5b 1e       	adc	r5, r27
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a0 e0       	ldi	r26, 0x00	; 0
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	2e 15       	cp	r18, r14
    25c8:	3f 05       	cpc	r19, r15
    25ca:	40 07       	cpc	r20, r16
    25cc:	51 07       	cpc	r21, r17
    25ce:	18 f0       	brcs	.+6      	; 0x25d6 <__mulsf3+0xe6>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	dc 01       	movw	r26, r24
    25d6:	82 0d       	add	r24, r2
    25d8:	93 1d       	adc	r25, r3
    25da:	a4 1d       	adc	r26, r4
    25dc:	b5 1d       	adc	r27, r5
    25de:	aa 0c       	add	r10, r10
    25e0:	bb 1c       	adc	r11, r11
    25e2:	cc 1c       	adc	r12, r12
    25e4:	dd 1c       	adc	r13, r13
    25e6:	17 ff       	sbrs	r17, 7
    25e8:	09 c0       	rjmp	.+18     	; 0x25fc <__mulsf3+0x10c>
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	26 2e       	mov	r2, r22
    25ee:	31 2c       	mov	r3, r1
    25f0:	41 2c       	mov	r4, r1
    25f2:	51 2c       	mov	r5, r1
    25f4:	a2 28       	or	r10, r2
    25f6:	b3 28       	or	r11, r3
    25f8:	c4 28       	or	r12, r4
    25fa:	d5 28       	or	r13, r5
    25fc:	31 97       	sbiw	r30, 0x01	; 1
    25fe:	49 f0       	breq	.+18     	; 0x2612 <__mulsf3+0x122>
    2600:	ee 0c       	add	r14, r14
    2602:	ff 1c       	adc	r15, r15
    2604:	00 1f       	adc	r16, r16
    2606:	11 1f       	adc	r17, r17
    2608:	96 94       	lsr	r9
    260a:	87 94       	ror	r8
    260c:	77 94       	ror	r7
    260e:	67 94       	ror	r6
    2610:	c6 cf       	rjmp	.-116    	; 0x259e <__mulsf3+0xae>
    2612:	6b 89       	ldd	r22, Y+19	; 0x13
    2614:	7c 89       	ldd	r23, Y+20	; 0x14
    2616:	eb 85       	ldd	r30, Y+11	; 0x0b
    2618:	fc 85       	ldd	r31, Y+12	; 0x0c
    261a:	6e 0f       	add	r22, r30
    261c:	7f 1f       	adc	r23, r31
    261e:	6e 5f       	subi	r22, 0xFE	; 254
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	7c 8f       	std	Y+28, r23	; 0x1c
    2624:	6b 8f       	std	Y+27, r22	; 0x1b
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	ea 85       	ldd	r30, Y+10	; 0x0a
    262a:	7a 89       	ldd	r23, Y+18	; 0x12
    262c:	e7 17       	cp	r30, r23
    262e:	09 f4       	brne	.+2      	; 0x2632 <__mulsf3+0x142>
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	6a 8f       	std	Y+26, r22	; 0x1a
    2634:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2636:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2638:	10 c0       	rjmp	.+32     	; 0x265a <__mulsf3+0x16a>
    263a:	fc 01       	movw	r30, r24
    263c:	e1 70       	andi	r30, 0x01	; 1
    263e:	f0 70       	andi	r31, 0x00	; 0
    2640:	30 97       	sbiw	r30, 0x00	; 0
    2642:	29 f0       	breq	.+10     	; 0x264e <__mulsf3+0x15e>
    2644:	56 95       	lsr	r21
    2646:	47 95       	ror	r20
    2648:	37 95       	ror	r19
    264a:	27 95       	ror	r18
    264c:	50 68       	ori	r21, 0x80	; 128
    264e:	b6 95       	lsr	r27
    2650:	a7 95       	ror	r26
    2652:	97 95       	ror	r25
    2654:	87 95       	ror	r24
    2656:	6f 5f       	subi	r22, 0xFF	; 255
    2658:	7f 4f       	sbci	r23, 0xFF	; 255
    265a:	b7 fd       	sbrc	r27, 7
    265c:	ee cf       	rjmp	.-36     	; 0x263a <__mulsf3+0x14a>
    265e:	0c c0       	rjmp	.+24     	; 0x2678 <__mulsf3+0x188>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	aa 1f       	adc	r26, r26
    2666:	bb 1f       	adc	r27, r27
    2668:	57 fd       	sbrc	r21, 7
    266a:	81 60       	ori	r24, 0x01	; 1
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	44 1f       	adc	r20, r20
    2672:	55 1f       	adc	r21, r21
    2674:	61 50       	subi	r22, 0x01	; 1
    2676:	70 40       	sbci	r23, 0x00	; 0
    2678:	80 30       	cpi	r24, 0x00	; 0
    267a:	e0 e0       	ldi	r30, 0x00	; 0
    267c:	9e 07       	cpc	r25, r30
    267e:	e0 e0       	ldi	r30, 0x00	; 0
    2680:	ae 07       	cpc	r26, r30
    2682:	e0 e4       	ldi	r30, 0x40	; 64
    2684:	be 07       	cpc	r27, r30
    2686:	60 f3       	brcs	.-40     	; 0x2660 <__mulsf3+0x170>
    2688:	6b 8f       	std	Y+27, r22	; 0x1b
    268a:	7c 8f       	std	Y+28, r23	; 0x1c
    268c:	6f e7       	ldi	r22, 0x7F	; 127
    268e:	e6 2e       	mov	r14, r22
    2690:	f1 2c       	mov	r15, r1
    2692:	01 2d       	mov	r16, r1
    2694:	11 2d       	mov	r17, r1
    2696:	e8 22       	and	r14, r24
    2698:	f9 22       	and	r15, r25
    269a:	0a 23       	and	r16, r26
    269c:	1b 23       	and	r17, r27
    269e:	60 e4       	ldi	r22, 0x40	; 64
    26a0:	e6 16       	cp	r14, r22
    26a2:	f1 04       	cpc	r15, r1
    26a4:	01 05       	cpc	r16, r1
    26a6:	11 05       	cpc	r17, r1
    26a8:	61 f4       	brne	.+24     	; 0x26c2 <__mulsf3+0x1d2>
    26aa:	87 fd       	sbrc	r24, 7
    26ac:	0a c0       	rjmp	.+20     	; 0x26c2 <__mulsf3+0x1d2>
    26ae:	21 15       	cp	r18, r1
    26b0:	31 05       	cpc	r19, r1
    26b2:	41 05       	cpc	r20, r1
    26b4:	51 05       	cpc	r21, r1
    26b6:	29 f0       	breq	.+10     	; 0x26c2 <__mulsf3+0x1d2>
    26b8:	80 5c       	subi	r24, 0xC0	; 192
    26ba:	9f 4f       	sbci	r25, 0xFF	; 255
    26bc:	af 4f       	sbci	r26, 0xFF	; 255
    26be:	bf 4f       	sbci	r27, 0xFF	; 255
    26c0:	80 78       	andi	r24, 0x80	; 128
    26c2:	8d 8f       	std	Y+29, r24	; 0x1d
    26c4:	9e 8f       	std	Y+30, r25	; 0x1e
    26c6:	af 8f       	std	Y+31, r26	; 0x1f
    26c8:	b8 a3       	std	Y+32, r27	; 0x20
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	89 8f       	std	Y+25, r24	; 0x19
    26ce:	ce 01       	movw	r24, r28
    26d0:	49 96       	adiw	r24, 0x19	; 25
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <__mulsf3+0x1e8>
    26d4:	8d e1       	ldi	r24, 0x1D	; 29
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	0e 94 c6 14 	call	0x298c	; 0x298c <__pack_f>
    26dc:	a0 96       	adiw	r28, 0x20	; 32
    26de:	e2 e1       	ldi	r30, 0x12	; 18
    26e0:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__>

000026e4 <__gesf2>:
    26e4:	a8 e1       	ldi	r26, 0x18	; 24
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e8 e7       	ldi	r30, 0x78	; 120
    26ea:	f3 e1       	ldi	r31, 0x13	; 19
    26ec:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__prologue_saves__+0x18>
    26f0:	69 83       	std	Y+1, r22	; 0x01
    26f2:	7a 83       	std	Y+2, r23	; 0x02
    26f4:	8b 83       	std	Y+3, r24	; 0x03
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	2d 83       	std	Y+5, r18	; 0x05
    26fa:	3e 83       	std	Y+6, r19	; 0x06
    26fc:	4f 83       	std	Y+7, r20	; 0x07
    26fe:	58 87       	std	Y+8, r21	; 0x08
    2700:	8e 01       	movw	r16, r28
    2702:	07 5f       	subi	r16, 0xF7	; 247
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	ce 01       	movw	r24, r28
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	b8 01       	movw	r22, r16
    270c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2710:	81 e1       	ldi	r24, 0x11	; 17
    2712:	e8 2e       	mov	r14, r24
    2714:	f1 2c       	mov	r15, r1
    2716:	ec 0e       	add	r14, r28
    2718:	fd 1e       	adc	r15, r29
    271a:	ce 01       	movw	r24, r28
    271c:	05 96       	adiw	r24, 0x05	; 5
    271e:	b7 01       	movw	r22, r14
    2720:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	82 30       	cpi	r24, 0x02	; 2
    2728:	40 f0       	brcs	.+16     	; 0x273a <__gesf2+0x56>
    272a:	89 89       	ldd	r24, Y+17	; 0x11
    272c:	82 30       	cpi	r24, 0x02	; 2
    272e:	28 f0       	brcs	.+10     	; 0x273a <__gesf2+0x56>
    2730:	c8 01       	movw	r24, r16
    2732:	b7 01       	movw	r22, r14
    2734:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__fpcmp_parts_f>
    2738:	01 c0       	rjmp	.+2      	; 0x273c <__gesf2+0x58>
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	68 96       	adiw	r28, 0x18	; 24
    273e:	e6 e0       	ldi	r30, 0x06	; 6
    2740:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__epilogue_restores__+0x18>

00002744 <__fixsfsi>:
    2744:	ac e0       	ldi	r26, 0x0C	; 12
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e8 ea       	ldi	r30, 0xA8	; 168
    274a:	f3 e1       	ldi	r31, 0x13	; 19
    274c:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x20>
    2750:	69 83       	std	Y+1, r22	; 0x01
    2752:	7a 83       	std	Y+2, r23	; 0x02
    2754:	8b 83       	std	Y+3, r24	; 0x03
    2756:	9c 83       	std	Y+4, r25	; 0x04
    2758:	ce 01       	movw	r24, r28
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	be 01       	movw	r22, r28
    275e:	6b 5f       	subi	r22, 0xFB	; 251
    2760:	7f 4f       	sbci	r23, 0xFF	; 255
    2762:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	82 30       	cpi	r24, 0x02	; 2
    276a:	81 f1       	breq	.+96     	; 0x27cc <__fixsfsi+0x88>
    276c:	82 30       	cpi	r24, 0x02	; 2
    276e:	70 f1       	brcs	.+92     	; 0x27cc <__fixsfsi+0x88>
    2770:	84 30       	cpi	r24, 0x04	; 4
    2772:	21 f4       	brne	.+8      	; 0x277c <__fixsfsi+0x38>
    2774:	8e 81       	ldd	r24, Y+6	; 0x06
    2776:	88 23       	and	r24, r24
    2778:	69 f1       	breq	.+90     	; 0x27d4 <__fixsfsi+0x90>
    277a:	0a c0       	rjmp	.+20     	; 0x2790 <__fixsfsi+0x4c>
    277c:	2f 81       	ldd	r18, Y+7	; 0x07
    277e:	38 85       	ldd	r19, Y+8	; 0x08
    2780:	37 fd       	sbrc	r19, 7
    2782:	24 c0       	rjmp	.+72     	; 0x27cc <__fixsfsi+0x88>
    2784:	6e 81       	ldd	r22, Y+6	; 0x06
    2786:	2f 31       	cpi	r18, 0x1F	; 31
    2788:	31 05       	cpc	r19, r1
    278a:	3c f0       	brlt	.+14     	; 0x279a <__fixsfsi+0x56>
    278c:	66 23       	and	r22, r22
    278e:	11 f1       	breq	.+68     	; 0x27d4 <__fixsfsi+0x90>
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	50 e8       	ldi	r21, 0x80	; 128
    2798:	21 c0       	rjmp	.+66     	; 0x27dc <__fixsfsi+0x98>
    279a:	8e e1       	ldi	r24, 0x1E	; 30
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	82 1b       	sub	r24, r18
    27a0:	93 0b       	sbc	r25, r19
    27a2:	29 85       	ldd	r18, Y+9	; 0x09
    27a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    27a6:	4b 85       	ldd	r20, Y+11	; 0x0b
    27a8:	5c 85       	ldd	r21, Y+12	; 0x0c
    27aa:	04 c0       	rjmp	.+8      	; 0x27b4 <__fixsfsi+0x70>
    27ac:	56 95       	lsr	r21
    27ae:	47 95       	ror	r20
    27b0:	37 95       	ror	r19
    27b2:	27 95       	ror	r18
    27b4:	8a 95       	dec	r24
    27b6:	d2 f7       	brpl	.-12     	; 0x27ac <__fixsfsi+0x68>
    27b8:	66 23       	and	r22, r22
    27ba:	81 f0       	breq	.+32     	; 0x27dc <__fixsfsi+0x98>
    27bc:	50 95       	com	r21
    27be:	40 95       	com	r20
    27c0:	30 95       	com	r19
    27c2:	21 95       	neg	r18
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	4f 4f       	sbci	r20, 0xFF	; 255
    27c8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ca:	08 c0       	rjmp	.+16     	; 0x27dc <__fixsfsi+0x98>
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	a9 01       	movw	r20, r18
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <__fixsfsi+0x98>
    27d4:	2f ef       	ldi	r18, 0xFF	; 255
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f ef       	ldi	r20, 0xFF	; 255
    27da:	5f e7       	ldi	r21, 0x7F	; 127
    27dc:	b9 01       	movw	r22, r18
    27de:	ca 01       	movw	r24, r20
    27e0:	2c 96       	adiw	r28, 0x0c	; 12
    27e2:	e2 e0       	ldi	r30, 0x02	; 2
    27e4:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x20>

000027e8 <__floatunsisf>:
    27e8:	a8 e0       	ldi	r26, 0x08	; 8
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ea ef       	ldi	r30, 0xFA	; 250
    27ee:	f3 e1       	ldi	r31, 0x13	; 19
    27f0:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__+0x14>
    27f4:	7b 01       	movw	r14, r22
    27f6:	8c 01       	movw	r16, r24
    27f8:	1a 82       	std	Y+2, r1	; 0x02
    27fa:	61 15       	cp	r22, r1
    27fc:	71 05       	cpc	r23, r1
    27fe:	81 05       	cpc	r24, r1
    2800:	91 05       	cpc	r25, r1
    2802:	19 f4       	brne	.+6      	; 0x280a <__floatunsisf+0x22>
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	5f c0       	rjmp	.+190    	; 0x28c8 <__floatunsisf+0xe0>
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	8e e1       	ldi	r24, 0x1E	; 30
    2810:	c8 2e       	mov	r12, r24
    2812:	d1 2c       	mov	r13, r1
    2814:	dc 82       	std	Y+4, r13	; 0x04
    2816:	cb 82       	std	Y+3, r12	; 0x03
    2818:	ed 82       	std	Y+5, r14	; 0x05
    281a:	fe 82       	std	Y+6, r15	; 0x06
    281c:	0f 83       	std	Y+7, r16	; 0x07
    281e:	18 87       	std	Y+8, r17	; 0x08
    2820:	c8 01       	movw	r24, r16
    2822:	b7 01       	movw	r22, r14
    2824:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__clzsi2>
    2828:	fc 01       	movw	r30, r24
    282a:	31 97       	sbiw	r30, 0x01	; 1
    282c:	f7 ff       	sbrs	r31, 7
    282e:	3a c0       	rjmp	.+116    	; 0x28a4 <__floatunsisf+0xbc>
    2830:	aa 27       	eor	r26, r26
    2832:	bb 27       	eor	r27, r27
    2834:	ae 1b       	sub	r26, r30
    2836:	bf 0b       	sbc	r27, r31
    2838:	21 e0       	ldi	r18, 0x01	; 1
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	50 e0       	ldi	r21, 0x00	; 0
    2840:	0a 2e       	mov	r0, r26
    2842:	04 c0       	rjmp	.+8      	; 0x284c <__floatunsisf+0x64>
    2844:	22 0f       	add	r18, r18
    2846:	33 1f       	adc	r19, r19
    2848:	44 1f       	adc	r20, r20
    284a:	55 1f       	adc	r21, r21
    284c:	0a 94       	dec	r0
    284e:	d2 f7       	brpl	.-12     	; 0x2844 <__floatunsisf+0x5c>
    2850:	21 50       	subi	r18, 0x01	; 1
    2852:	30 40       	sbci	r19, 0x00	; 0
    2854:	40 40       	sbci	r20, 0x00	; 0
    2856:	50 40       	sbci	r21, 0x00	; 0
    2858:	2e 21       	and	r18, r14
    285a:	3f 21       	and	r19, r15
    285c:	40 23       	and	r20, r16
    285e:	51 23       	and	r21, r17
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	21 15       	cp	r18, r1
    286a:	31 05       	cpc	r19, r1
    286c:	41 05       	cpc	r20, r1
    286e:	51 05       	cpc	r21, r1
    2870:	19 f4       	brne	.+6      	; 0x2878 <__floatunsisf+0x90>
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	cb 01       	movw	r24, r22
    2878:	04 c0       	rjmp	.+8      	; 0x2882 <__floatunsisf+0x9a>
    287a:	16 95       	lsr	r17
    287c:	07 95       	ror	r16
    287e:	f7 94       	ror	r15
    2880:	e7 94       	ror	r14
    2882:	aa 95       	dec	r26
    2884:	d2 f7       	brpl	.-12     	; 0x287a <__floatunsisf+0x92>
    2886:	e6 2a       	or	r14, r22
    2888:	f7 2a       	or	r15, r23
    288a:	08 2b       	or	r16, r24
    288c:	19 2b       	or	r17, r25
    288e:	ed 82       	std	Y+5, r14	; 0x05
    2890:	fe 82       	std	Y+6, r15	; 0x06
    2892:	0f 83       	std	Y+7, r16	; 0x07
    2894:	18 87       	std	Y+8, r17	; 0x08
    2896:	8e e1       	ldi	r24, 0x1E	; 30
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	8e 1b       	sub	r24, r30
    289c:	9f 0b       	sbc	r25, r31
    289e:	9c 83       	std	Y+4, r25	; 0x04
    28a0:	8b 83       	std	Y+3, r24	; 0x03
    28a2:	12 c0       	rjmp	.+36     	; 0x28c8 <__floatunsisf+0xe0>
    28a4:	30 97       	sbiw	r30, 0x00	; 0
    28a6:	81 f0       	breq	.+32     	; 0x28c8 <__floatunsisf+0xe0>
    28a8:	0e 2e       	mov	r0, r30
    28aa:	04 c0       	rjmp	.+8      	; 0x28b4 <__floatunsisf+0xcc>
    28ac:	ee 0c       	add	r14, r14
    28ae:	ff 1c       	adc	r15, r15
    28b0:	00 1f       	adc	r16, r16
    28b2:	11 1f       	adc	r17, r17
    28b4:	0a 94       	dec	r0
    28b6:	d2 f7       	brpl	.-12     	; 0x28ac <__floatunsisf+0xc4>
    28b8:	ed 82       	std	Y+5, r14	; 0x05
    28ba:	fe 82       	std	Y+6, r15	; 0x06
    28bc:	0f 83       	std	Y+7, r16	; 0x07
    28be:	18 87       	std	Y+8, r17	; 0x08
    28c0:	ce 1a       	sub	r12, r30
    28c2:	df 0a       	sbc	r13, r31
    28c4:	dc 82       	std	Y+4, r13	; 0x04
    28c6:	cb 82       	std	Y+3, r12	; 0x03
    28c8:	ce 01       	movw	r24, r28
    28ca:	01 96       	adiw	r24, 0x01	; 1
    28cc:	0e 94 c6 14 	call	0x298c	; 0x298c <__pack_f>
    28d0:	28 96       	adiw	r28, 0x08	; 8
    28d2:	e8 e0       	ldi	r30, 0x08	; 8
    28d4:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__+0x14>

000028d8 <__clzsi2>:
    28d8:	af 92       	push	r10
    28da:	bf 92       	push	r11
    28dc:	cf 92       	push	r12
    28de:	df 92       	push	r13
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	7b 01       	movw	r14, r22
    28ea:	8c 01       	movw	r16, r24
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	e8 16       	cp	r14, r24
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	f8 06       	cpc	r15, r24
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	08 07       	cpc	r16, r24
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	18 07       	cpc	r17, r24
    28fc:	58 f4       	brcc	.+22     	; 0x2914 <__clzsi2+0x3c>
    28fe:	ef ef       	ldi	r30, 0xFF	; 255
    2900:	ee 16       	cp	r14, r30
    2902:	f1 04       	cpc	r15, r1
    2904:	01 05       	cpc	r16, r1
    2906:	11 05       	cpc	r17, r1
    2908:	09 f0       	breq	.+2      	; 0x290c <__clzsi2+0x34>
    290a:	90 f4       	brcc	.+36     	; 0x2930 <__clzsi2+0x58>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	dc 01       	movw	r26, r24
    2912:	17 c0       	rjmp	.+46     	; 0x2942 <__clzsi2+0x6a>
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	ef 16       	cp	r14, r31
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	ff 06       	cpc	r15, r31
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	0f 07       	cpc	r16, r31
    2920:	f1 e0       	ldi	r31, 0x01	; 1
    2922:	1f 07       	cpc	r17, r31
    2924:	50 f4       	brcc	.+20     	; 0x293a <__clzsi2+0x62>
    2926:	80 e1       	ldi	r24, 0x10	; 16
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	09 c0       	rjmp	.+18     	; 0x2942 <__clzsi2+0x6a>
    2930:	88 e0       	ldi	r24, 0x08	; 8
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <__clzsi2+0x6a>
    293a:	88 e1       	ldi	r24, 0x18	; 24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a0 e0       	ldi	r26, 0x00	; 0
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	20 e2       	ldi	r18, 0x20	; 32
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	28 1b       	sub	r18, r24
    294c:	39 0b       	sbc	r19, r25
    294e:	4a 0b       	sbc	r20, r26
    2950:	5b 0b       	sbc	r21, r27
    2952:	57 01       	movw	r10, r14
    2954:	68 01       	movw	r12, r16
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <__clzsi2+0x88>
    2958:	d6 94       	lsr	r13
    295a:	c7 94       	ror	r12
    295c:	b7 94       	ror	r11
    295e:	a7 94       	ror	r10
    2960:	8a 95       	dec	r24
    2962:	d2 f7       	brpl	.-12     	; 0x2958 <__clzsi2+0x80>
    2964:	d6 01       	movw	r26, r12
    2966:	c5 01       	movw	r24, r10
    2968:	8b 5d       	subi	r24, 0xDB	; 219
    296a:	9e 4f       	sbci	r25, 0xFE	; 254
    296c:	fc 01       	movw	r30, r24
    296e:	80 81       	ld	r24, Z
    2970:	28 1b       	sub	r18, r24
    2972:	31 09       	sbc	r19, r1
    2974:	41 09       	sbc	r20, r1
    2976:	51 09       	sbc	r21, r1
    2978:	c9 01       	movw	r24, r18
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	08 95       	ret

0000298c <__pack_f>:
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	fc 01       	movw	r30, r24
    299a:	24 81       	ldd	r18, Z+4	; 0x04
    299c:	35 81       	ldd	r19, Z+5	; 0x05
    299e:	46 81       	ldd	r20, Z+6	; 0x06
    29a0:	57 81       	ldd	r21, Z+7	; 0x07
    29a2:	61 81       	ldd	r22, Z+1	; 0x01
    29a4:	80 81       	ld	r24, Z
    29a6:	82 30       	cpi	r24, 0x02	; 2
    29a8:	20 f4       	brcc	.+8      	; 0x29b2 <__pack_f+0x26>
    29aa:	40 61       	ori	r20, 0x10	; 16
    29ac:	ef ef       	ldi	r30, 0xFF	; 255
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	a3 c0       	rjmp	.+326    	; 0x2af8 <__pack_f+0x16c>
    29b2:	84 30       	cpi	r24, 0x04	; 4
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <__pack_f+0x2c>
    29b6:	9b c0       	rjmp	.+310    	; 0x2aee <__pack_f+0x162>
    29b8:	82 30       	cpi	r24, 0x02	; 2
    29ba:	09 f4       	brne	.+2      	; 0x29be <__pack_f+0x32>
    29bc:	92 c0       	rjmp	.+292    	; 0x2ae2 <__pack_f+0x156>
    29be:	21 15       	cp	r18, r1
    29c0:	31 05       	cpc	r19, r1
    29c2:	41 05       	cpc	r20, r1
    29c4:	51 05       	cpc	r21, r1
    29c6:	09 f4       	brne	.+2      	; 0x29ca <__pack_f+0x3e>
    29c8:	8f c0       	rjmp	.+286    	; 0x2ae8 <__pack_f+0x15c>
    29ca:	02 80       	ldd	r0, Z+2	; 0x02
    29cc:	f3 81       	ldd	r31, Z+3	; 0x03
    29ce:	e0 2d       	mov	r30, r0
    29d0:	7f ef       	ldi	r23, 0xFF	; 255
    29d2:	e2 38       	cpi	r30, 0x82	; 130
    29d4:	f7 07       	cpc	r31, r23
    29d6:	0c f0       	brlt	.+2      	; 0x29da <__pack_f+0x4e>
    29d8:	5a c0       	rjmp	.+180    	; 0x2a8e <__pack_f+0x102>
    29da:	c2 e8       	ldi	r28, 0x82	; 130
    29dc:	df ef       	ldi	r29, 0xFF	; 255
    29de:	ce 1b       	sub	r28, r30
    29e0:	df 0b       	sbc	r29, r31
    29e2:	ca 31       	cpi	r28, 0x1A	; 26
    29e4:	d1 05       	cpc	r29, r1
    29e6:	6c f5       	brge	.+90     	; 0x2a42 <__pack_f+0xb6>
    29e8:	79 01       	movw	r14, r18
    29ea:	8a 01       	movw	r16, r20
    29ec:	0c 2e       	mov	r0, r28
    29ee:	04 c0       	rjmp	.+8      	; 0x29f8 <__pack_f+0x6c>
    29f0:	16 95       	lsr	r17
    29f2:	07 95       	ror	r16
    29f4:	f7 94       	ror	r15
    29f6:	e7 94       	ror	r14
    29f8:	0a 94       	dec	r0
    29fa:	d2 f7       	brpl	.-12     	; 0x29f0 <__pack_f+0x64>
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a0 e0       	ldi	r26, 0x00	; 0
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	0c 2e       	mov	r0, r28
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__pack_f+0x84>
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	aa 1f       	adc	r26, r26
    2a0e:	bb 1f       	adc	r27, r27
    2a10:	0a 94       	dec	r0
    2a12:	d2 f7       	brpl	.-12     	; 0x2a08 <__pack_f+0x7c>
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	a1 09       	sbc	r26, r1
    2a18:	b1 09       	sbc	r27, r1
    2a1a:	82 23       	and	r24, r18
    2a1c:	93 23       	and	r25, r19
    2a1e:	a4 23       	and	r26, r20
    2a20:	b5 23       	and	r27, r21
    2a22:	21 e0       	ldi	r18, 0x01	; 1
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	a1 05       	cpc	r26, r1
    2a2e:	b1 05       	cpc	r27, r1
    2a30:	19 f4       	brne	.+6      	; 0x2a38 <__pack_f+0xac>
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	a9 01       	movw	r20, r18
    2a38:	2e 29       	or	r18, r14
    2a3a:	3f 29       	or	r19, r15
    2a3c:	40 2b       	or	r20, r16
    2a3e:	51 2b       	or	r21, r17
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <__pack_f+0xbc>
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	a9 01       	movw	r20, r18
    2a48:	da 01       	movw	r26, r20
    2a4a:	c9 01       	movw	r24, r18
    2a4c:	8f 77       	andi	r24, 0x7F	; 127
    2a4e:	90 70       	andi	r25, 0x00	; 0
    2a50:	a0 70       	andi	r26, 0x00	; 0
    2a52:	b0 70       	andi	r27, 0x00	; 0
    2a54:	80 34       	cpi	r24, 0x40	; 64
    2a56:	91 05       	cpc	r25, r1
    2a58:	a1 05       	cpc	r26, r1
    2a5a:	b1 05       	cpc	r27, r1
    2a5c:	39 f4       	brne	.+14     	; 0x2a6c <__pack_f+0xe0>
    2a5e:	27 ff       	sbrs	r18, 7
    2a60:	09 c0       	rjmp	.+18     	; 0x2a74 <__pack_f+0xe8>
    2a62:	20 5c       	subi	r18, 0xC0	; 192
    2a64:	3f 4f       	sbci	r19, 0xFF	; 255
    2a66:	4f 4f       	sbci	r20, 0xFF	; 255
    2a68:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6a:	04 c0       	rjmp	.+8      	; 0x2a74 <__pack_f+0xe8>
    2a6c:	21 5c       	subi	r18, 0xC1	; 193
    2a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a70:	4f 4f       	sbci	r20, 0xFF	; 255
    2a72:	5f 4f       	sbci	r21, 0xFF	; 255
    2a74:	e1 e0       	ldi	r30, 0x01	; 1
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	20 30       	cpi	r18, 0x00	; 0
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	38 07       	cpc	r19, r24
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	48 07       	cpc	r20, r24
    2a82:	80 e4       	ldi	r24, 0x40	; 64
    2a84:	58 07       	cpc	r21, r24
    2a86:	28 f5       	brcc	.+74     	; 0x2ad2 <__pack_f+0x146>
    2a88:	e0 e0       	ldi	r30, 0x00	; 0
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	22 c0       	rjmp	.+68     	; 0x2ad2 <__pack_f+0x146>
    2a8e:	e0 38       	cpi	r30, 0x80	; 128
    2a90:	f1 05       	cpc	r31, r1
    2a92:	6c f5       	brge	.+90     	; 0x2aee <__pack_f+0x162>
    2a94:	e1 58       	subi	r30, 0x81	; 129
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	da 01       	movw	r26, r20
    2a9a:	c9 01       	movw	r24, r18
    2a9c:	8f 77       	andi	r24, 0x7F	; 127
    2a9e:	90 70       	andi	r25, 0x00	; 0
    2aa0:	a0 70       	andi	r26, 0x00	; 0
    2aa2:	b0 70       	andi	r27, 0x00	; 0
    2aa4:	80 34       	cpi	r24, 0x40	; 64
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	a1 05       	cpc	r26, r1
    2aaa:	b1 05       	cpc	r27, r1
    2aac:	39 f4       	brne	.+14     	; 0x2abc <__pack_f+0x130>
    2aae:	27 ff       	sbrs	r18, 7
    2ab0:	09 c0       	rjmp	.+18     	; 0x2ac4 <__pack_f+0x138>
    2ab2:	20 5c       	subi	r18, 0xC0	; 192
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aba:	04 c0       	rjmp	.+8      	; 0x2ac4 <__pack_f+0x138>
    2abc:	21 5c       	subi	r18, 0xC1	; 193
    2abe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac0:	4f 4f       	sbci	r20, 0xFF	; 255
    2ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac4:	57 ff       	sbrs	r21, 7
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <__pack_f+0x146>
    2ac8:	56 95       	lsr	r21
    2aca:	47 95       	ror	r20
    2acc:	37 95       	ror	r19
    2ace:	27 95       	ror	r18
    2ad0:	31 96       	adiw	r30, 0x01	; 1
    2ad2:	87 e0       	ldi	r24, 0x07	; 7
    2ad4:	56 95       	lsr	r21
    2ad6:	47 95       	ror	r20
    2ad8:	37 95       	ror	r19
    2ada:	27 95       	ror	r18
    2adc:	8a 95       	dec	r24
    2ade:	d1 f7       	brne	.-12     	; 0x2ad4 <__pack_f+0x148>
    2ae0:	0b c0       	rjmp	.+22     	; 0x2af8 <__pack_f+0x16c>
    2ae2:	e0 e0       	ldi	r30, 0x00	; 0
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	05 c0       	rjmp	.+10     	; 0x2af2 <__pack_f+0x166>
    2ae8:	e0 e0       	ldi	r30, 0x00	; 0
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	05 c0       	rjmp	.+10     	; 0x2af8 <__pack_f+0x16c>
    2aee:	ef ef       	ldi	r30, 0xFF	; 255
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	a9 01       	movw	r20, r18
    2af8:	8e 2f       	mov	r24, r30
    2afa:	87 95       	ror	r24
    2afc:	88 27       	eor	r24, r24
    2afe:	87 95       	ror	r24
    2b00:	94 2f       	mov	r25, r20
    2b02:	9f 77       	andi	r25, 0x7F	; 127
    2b04:	67 95       	ror	r22
    2b06:	66 27       	eor	r22, r22
    2b08:	67 95       	ror	r22
    2b0a:	e6 95       	lsr	r30
    2b0c:	a9 2f       	mov	r26, r25
    2b0e:	a8 2b       	or	r26, r24
    2b10:	fe 2f       	mov	r31, r30
    2b12:	f6 2b       	or	r31, r22
    2b14:	62 2f       	mov	r22, r18
    2b16:	73 2f       	mov	r23, r19
    2b18:	8a 2f       	mov	r24, r26
    2b1a:	9f 2f       	mov	r25, r31
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	e6 e0       	ldi	r30, 0x06	; 6
    2b22:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__epilogue_restores__+0x18>

00002b26 <__unpack_f>:
    2b26:	dc 01       	movw	r26, r24
    2b28:	fb 01       	movw	r30, r22
    2b2a:	2c 91       	ld	r18, X
    2b2c:	11 96       	adiw	r26, 0x01	; 1
    2b2e:	3c 91       	ld	r19, X
    2b30:	11 97       	sbiw	r26, 0x01	; 1
    2b32:	12 96       	adiw	r26, 0x02	; 2
    2b34:	8c 91       	ld	r24, X
    2b36:	12 97       	sbiw	r26, 0x02	; 2
    2b38:	48 2f       	mov	r20, r24
    2b3a:	4f 77       	andi	r20, 0x7F	; 127
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	98 2f       	mov	r25, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	99 27       	eor	r25, r25
    2b44:	99 1f       	adc	r25, r25
    2b46:	13 96       	adiw	r26, 0x03	; 3
    2b48:	6c 91       	ld	r22, X
    2b4a:	13 97       	sbiw	r26, 0x03	; 3
    2b4c:	86 2f       	mov	r24, r22
    2b4e:	88 0f       	add	r24, r24
    2b50:	89 2b       	or	r24, r25
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	66 1f       	adc	r22, r22
    2b56:	66 27       	eor	r22, r22
    2b58:	66 1f       	adc	r22, r22
    2b5a:	61 83       	std	Z+1, r22	; 0x01
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	39 f5       	brne	.+78     	; 0x2bae <__unpack_f+0x88>
    2b60:	21 15       	cp	r18, r1
    2b62:	31 05       	cpc	r19, r1
    2b64:	41 05       	cpc	r20, r1
    2b66:	51 05       	cpc	r21, r1
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <__unpack_f+0x48>
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	29 c0       	rjmp	.+82     	; 0x2bc0 <__unpack_f+0x9a>
    2b6e:	82 e8       	ldi	r24, 0x82	; 130
    2b70:	9f ef       	ldi	r25, 0xFF	; 255
    2b72:	93 83       	std	Z+3, r25	; 0x03
    2b74:	82 83       	std	Z+2, r24	; 0x02
    2b76:	67 e0       	ldi	r22, 0x07	; 7
    2b78:	22 0f       	add	r18, r18
    2b7a:	33 1f       	adc	r19, r19
    2b7c:	44 1f       	adc	r20, r20
    2b7e:	55 1f       	adc	r21, r21
    2b80:	6a 95       	dec	r22
    2b82:	d1 f7       	brne	.-12     	; 0x2b78 <__unpack_f+0x52>
    2b84:	83 e0       	ldi	r24, 0x03	; 3
    2b86:	80 83       	st	Z, r24
    2b88:	09 c0       	rjmp	.+18     	; 0x2b9c <__unpack_f+0x76>
    2b8a:	22 0f       	add	r18, r18
    2b8c:	33 1f       	adc	r19, r19
    2b8e:	44 1f       	adc	r20, r20
    2b90:	55 1f       	adc	r21, r21
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	93 83       	std	Z+3, r25	; 0x03
    2b9a:	82 83       	std	Z+2, r24	; 0x02
    2b9c:	20 30       	cpi	r18, 0x00	; 0
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	38 07       	cpc	r19, r24
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	48 07       	cpc	r20, r24
    2ba6:	80 e4       	ldi	r24, 0x40	; 64
    2ba8:	58 07       	cpc	r21, r24
    2baa:	78 f3       	brcs	.-34     	; 0x2b8a <__unpack_f+0x64>
    2bac:	20 c0       	rjmp	.+64     	; 0x2bee <__unpack_f+0xc8>
    2bae:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	79 f4       	brne	.+30     	; 0x2bd2 <__unpack_f+0xac>
    2bb4:	21 15       	cp	r18, r1
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	41 05       	cpc	r20, r1
    2bba:	51 05       	cpc	r21, r1
    2bbc:	19 f4       	brne	.+6      	; 0x2bc4 <__unpack_f+0x9e>
    2bbe:	84 e0       	ldi	r24, 0x04	; 4
    2bc0:	80 83       	st	Z, r24
    2bc2:	08 95       	ret
    2bc4:	44 ff       	sbrs	r20, 4
    2bc6:	03 c0       	rjmp	.+6      	; 0x2bce <__unpack_f+0xa8>
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	80 83       	st	Z, r24
    2bcc:	10 c0       	rjmp	.+32     	; 0x2bee <__unpack_f+0xc8>
    2bce:	10 82       	st	Z, r1
    2bd0:	0e c0       	rjmp	.+28     	; 0x2bee <__unpack_f+0xc8>
    2bd2:	8f 57       	subi	r24, 0x7F	; 127
    2bd4:	90 40       	sbci	r25, 0x00	; 0
    2bd6:	93 83       	std	Z+3, r25	; 0x03
    2bd8:	82 83       	std	Z+2, r24	; 0x02
    2bda:	83 e0       	ldi	r24, 0x03	; 3
    2bdc:	80 83       	st	Z, r24
    2bde:	87 e0       	ldi	r24, 0x07	; 7
    2be0:	22 0f       	add	r18, r18
    2be2:	33 1f       	adc	r19, r19
    2be4:	44 1f       	adc	r20, r20
    2be6:	55 1f       	adc	r21, r21
    2be8:	8a 95       	dec	r24
    2bea:	d1 f7       	brne	.-12     	; 0x2be0 <__unpack_f+0xba>
    2bec:	50 64       	ori	r21, 0x40	; 64
    2bee:	24 83       	std	Z+4, r18	; 0x04
    2bf0:	35 83       	std	Z+5, r19	; 0x05
    2bf2:	46 83       	std	Z+6, r20	; 0x06
    2bf4:	57 83       	std	Z+7, r21	; 0x07
    2bf6:	08 95       	ret

00002bf8 <__fpcmp_parts_f>:
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	db 01       	movw	r26, r22
    2bfc:	90 81       	ld	r25, Z
    2bfe:	92 30       	cpi	r25, 0x02	; 2
    2c00:	08 f4       	brcc	.+2      	; 0x2c04 <__fpcmp_parts_f+0xc>
    2c02:	49 c0       	rjmp	.+146    	; 0x2c96 <__fpcmp_parts_f+0x9e>
    2c04:	8c 91       	ld	r24, X
    2c06:	82 30       	cpi	r24, 0x02	; 2
    2c08:	08 f4       	brcc	.+2      	; 0x2c0c <__fpcmp_parts_f+0x14>
    2c0a:	45 c0       	rjmp	.+138    	; 0x2c96 <__fpcmp_parts_f+0x9e>
    2c0c:	94 30       	cpi	r25, 0x04	; 4
    2c0e:	51 f4       	brne	.+20     	; 0x2c24 <__fpcmp_parts_f+0x2c>
    2c10:	61 81       	ldd	r22, Z+1	; 0x01
    2c12:	84 30       	cpi	r24, 0x04	; 4
    2c14:	b1 f5       	brne	.+108    	; 0x2c82 <__fpcmp_parts_f+0x8a>
    2c16:	11 96       	adiw	r26, 0x01	; 1
    2c18:	2c 91       	ld	r18, X
    2c1a:	11 97       	sbiw	r26, 0x01	; 1
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	26 1b       	sub	r18, r22
    2c20:	31 09       	sbc	r19, r1
    2c22:	41 c0       	rjmp	.+130    	; 0x2ca6 <__fpcmp_parts_f+0xae>
    2c24:	84 30       	cpi	r24, 0x04	; 4
    2c26:	21 f0       	breq	.+8      	; 0x2c30 <__fpcmp_parts_f+0x38>
    2c28:	92 30       	cpi	r25, 0x02	; 2
    2c2a:	41 f4       	brne	.+16     	; 0x2c3c <__fpcmp_parts_f+0x44>
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	b1 f1       	breq	.+108    	; 0x2c9c <__fpcmp_parts_f+0xa4>
    2c30:	11 96       	adiw	r26, 0x01	; 1
    2c32:	8c 91       	ld	r24, X
    2c34:	11 97       	sbiw	r26, 0x01	; 1
    2c36:	88 23       	and	r24, r24
    2c38:	a1 f1       	breq	.+104    	; 0x2ca2 <__fpcmp_parts_f+0xaa>
    2c3a:	2d c0       	rjmp	.+90     	; 0x2c96 <__fpcmp_parts_f+0x9e>
    2c3c:	61 81       	ldd	r22, Z+1	; 0x01
    2c3e:	82 30       	cpi	r24, 0x02	; 2
    2c40:	01 f1       	breq	.+64     	; 0x2c82 <__fpcmp_parts_f+0x8a>
    2c42:	11 96       	adiw	r26, 0x01	; 1
    2c44:	8c 91       	ld	r24, X
    2c46:	11 97       	sbiw	r26, 0x01	; 1
    2c48:	68 17       	cp	r22, r24
    2c4a:	d9 f4       	brne	.+54     	; 0x2c82 <__fpcmp_parts_f+0x8a>
    2c4c:	22 81       	ldd	r18, Z+2	; 0x02
    2c4e:	33 81       	ldd	r19, Z+3	; 0x03
    2c50:	12 96       	adiw	r26, 0x02	; 2
    2c52:	8d 91       	ld	r24, X+
    2c54:	9c 91       	ld	r25, X
    2c56:	13 97       	sbiw	r26, 0x03	; 3
    2c58:	82 17       	cp	r24, r18
    2c5a:	93 07       	cpc	r25, r19
    2c5c:	94 f0       	brlt	.+36     	; 0x2c82 <__fpcmp_parts_f+0x8a>
    2c5e:	28 17       	cp	r18, r24
    2c60:	39 07       	cpc	r19, r25
    2c62:	bc f0       	brlt	.+46     	; 0x2c92 <__fpcmp_parts_f+0x9a>
    2c64:	24 81       	ldd	r18, Z+4	; 0x04
    2c66:	35 81       	ldd	r19, Z+5	; 0x05
    2c68:	46 81       	ldd	r20, Z+6	; 0x06
    2c6a:	57 81       	ldd	r21, Z+7	; 0x07
    2c6c:	14 96       	adiw	r26, 0x04	; 4
    2c6e:	8d 91       	ld	r24, X+
    2c70:	9d 91       	ld	r25, X+
    2c72:	0d 90       	ld	r0, X+
    2c74:	bc 91       	ld	r27, X
    2c76:	a0 2d       	mov	r26, r0
    2c78:	82 17       	cp	r24, r18
    2c7a:	93 07       	cpc	r25, r19
    2c7c:	a4 07       	cpc	r26, r20
    2c7e:	b5 07       	cpc	r27, r21
    2c80:	18 f4       	brcc	.+6      	; 0x2c88 <__fpcmp_parts_f+0x90>
    2c82:	66 23       	and	r22, r22
    2c84:	41 f0       	breq	.+16     	; 0x2c96 <__fpcmp_parts_f+0x9e>
    2c86:	0d c0       	rjmp	.+26     	; 0x2ca2 <__fpcmp_parts_f+0xaa>
    2c88:	28 17       	cp	r18, r24
    2c8a:	39 07       	cpc	r19, r25
    2c8c:	4a 07       	cpc	r20, r26
    2c8e:	5b 07       	cpc	r21, r27
    2c90:	28 f4       	brcc	.+10     	; 0x2c9c <__fpcmp_parts_f+0xa4>
    2c92:	66 23       	and	r22, r22
    2c94:	31 f0       	breq	.+12     	; 0x2ca2 <__fpcmp_parts_f+0xaa>
    2c96:	21 e0       	ldi	r18, 0x01	; 1
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	05 c0       	rjmp	.+10     	; 0x2ca6 <__fpcmp_parts_f+0xae>
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <__fpcmp_parts_f+0xae>
    2ca2:	2f ef       	ldi	r18, 0xFF	; 255
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	c9 01       	movw	r24, r18
    2ca8:	08 95       	ret

00002caa <__udivmodhi4>:
    2caa:	aa 1b       	sub	r26, r26
    2cac:	bb 1b       	sub	r27, r27
    2cae:	51 e1       	ldi	r21, 0x11	; 17
    2cb0:	07 c0       	rjmp	.+14     	; 0x2cc0 <__udivmodhi4_ep>

00002cb2 <__udivmodhi4_loop>:
    2cb2:	aa 1f       	adc	r26, r26
    2cb4:	bb 1f       	adc	r27, r27
    2cb6:	a6 17       	cp	r26, r22
    2cb8:	b7 07       	cpc	r27, r23
    2cba:	10 f0       	brcs	.+4      	; 0x2cc0 <__udivmodhi4_ep>
    2cbc:	a6 1b       	sub	r26, r22
    2cbe:	b7 0b       	sbc	r27, r23

00002cc0 <__udivmodhi4_ep>:
    2cc0:	88 1f       	adc	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	5a 95       	dec	r21
    2cc6:	a9 f7       	brne	.-22     	; 0x2cb2 <__udivmodhi4_loop>
    2cc8:	80 95       	com	r24
    2cca:	90 95       	com	r25
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	08 95       	ret

00002cd2 <__divmodhi4>:
    2cd2:	97 fb       	bst	r25, 7
    2cd4:	09 2e       	mov	r0, r25
    2cd6:	07 26       	eor	r0, r23
    2cd8:	0a d0       	rcall	.+20     	; 0x2cee <__divmodhi4_neg1>
    2cda:	77 fd       	sbrc	r23, 7
    2cdc:	04 d0       	rcall	.+8      	; 0x2ce6 <__divmodhi4_neg2>
    2cde:	e5 df       	rcall	.-54     	; 0x2caa <__udivmodhi4>
    2ce0:	06 d0       	rcall	.+12     	; 0x2cee <__divmodhi4_neg1>
    2ce2:	00 20       	and	r0, r0
    2ce4:	1a f4       	brpl	.+6      	; 0x2cec <__divmodhi4_exit>

00002ce6 <__divmodhi4_neg2>:
    2ce6:	70 95       	com	r23
    2ce8:	61 95       	neg	r22
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255

00002cec <__divmodhi4_exit>:
    2cec:	08 95       	ret

00002cee <__divmodhi4_neg1>:
    2cee:	f6 f7       	brtc	.-4      	; 0x2cec <__divmodhi4_exit>
    2cf0:	90 95       	com	r25
    2cf2:	81 95       	neg	r24
    2cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf6:	08 95       	ret

00002cf8 <__prologue_saves__>:
    2cf8:	2f 92       	push	r2
    2cfa:	3f 92       	push	r3
    2cfc:	4f 92       	push	r4
    2cfe:	5f 92       	push	r5
    2d00:	6f 92       	push	r6
    2d02:	7f 92       	push	r7
    2d04:	8f 92       	push	r8
    2d06:	9f 92       	push	r9
    2d08:	af 92       	push	r10
    2d0a:	bf 92       	push	r11
    2d0c:	cf 92       	push	r12
    2d0e:	df 92       	push	r13
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	ca 1b       	sub	r28, r26
    2d22:	db 0b       	sbc	r29, r27
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	09 94       	ijmp

00002d30 <__epilogue_restores__>:
    2d30:	2a 88       	ldd	r2, Y+18	; 0x12
    2d32:	39 88       	ldd	r3, Y+17	; 0x11
    2d34:	48 88       	ldd	r4, Y+16	; 0x10
    2d36:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d38:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d40:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d42:	b9 84       	ldd	r11, Y+9	; 0x09
    2d44:	c8 84       	ldd	r12, Y+8	; 0x08
    2d46:	df 80       	ldd	r13, Y+7	; 0x07
    2d48:	ee 80       	ldd	r14, Y+6	; 0x06
    2d4a:	fd 80       	ldd	r15, Y+5	; 0x05
    2d4c:	0c 81       	ldd	r16, Y+4	; 0x04
    2d4e:	1b 81       	ldd	r17, Y+3	; 0x03
    2d50:	aa 81       	ldd	r26, Y+2	; 0x02
    2d52:	b9 81       	ldd	r27, Y+1	; 0x01
    2d54:	ce 0f       	add	r28, r30
    2d56:	d1 1d       	adc	r29, r1
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	ed 01       	movw	r28, r26
    2d64:	08 95       	ret

00002d66 <_exit>:
    2d66:	f8 94       	cli

00002d68 <__stop_program>:
    2d68:	ff cf       	rjmp	.-2      	; 0x2d68 <__stop_program>
