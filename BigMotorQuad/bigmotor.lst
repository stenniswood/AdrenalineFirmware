
bigmotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000240  00800200  00003618  000036ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ea  00800440  00800440  000038ec  2**0
                  ALLOC
  3 .stab         00001434  00000000  00000000  000038ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000041c  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000400  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000fb1  00000000  00000000  0000553c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000051be  00000000  00000000  000064ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024b0  00000000  00000000  0000b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003c52  00000000  00000000  0000db5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a50  00000000  00000000  000117b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001917  00000000  00000000  00012200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002313  00000000  00000000  00013b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000009ca  00000000  00000000  00015e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002a0  00000000  00000000  000167f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_1>
       8:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_2>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__vector_6>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__vector_8>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_21>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_25>
      68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      6c:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__vector_27>
      70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      74:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__vector_29>
      78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      8c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      90:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      94:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      98:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      bc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      c0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      c4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      c8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	14 e0       	ldi	r17, 0x04	; 4
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	e8 e1       	ldi	r30, 0x18	; 24
      e4:	f6 e3       	ldi	r31, 0x36	; 54
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a0 34       	cpi	r26, 0x40	; 64
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	17 e0       	ldi	r17, 0x07	; 7
      f8:	a0 e4       	ldi	r26, 0x40	; 64
      fa:	b4 e0       	ldi	r27, 0x04	; 4
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	aa 32       	cpi	r26, 0x2A	; 42
     102:	b1 07       	cpc	r27, r17
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 aa 00 	call	0x154	; 0x154 <main>
     10a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z4initv>:
bool okay_to_read_cal = false;
byte ResetReason = 0x00;

void init()
{
	ResetReason = MCUSR;		
     112:	84 b7       	in	r24, 0x34	; 52
     114:	80 93 41 04 	sts	0x0441, r24
 	cli();
     118:	f8 94       	cli
    //chip_init ();    				// Chip initialization
    
	init_leds ();
     11a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_Z9init_ledsv>
	init_buttons();	
     11e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z12init_buttonsv>
	init_limit_switches();
     122:	0e 94 c6 0c 	call	0x198c	; 0x198c <_Z19init_limit_switchesv>
	init_motor_control_lines();
     126:	0e 94 12 01 	call	0x224	; 0x224 <_Z24init_motor_control_linesv>
	
	float mBaseFrequencyHerz = 500.0;  // 4khz
	pwm_init( mBaseFrequencyHerz, TRUE  );
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	8a ef       	ldi	r24, 0xFA	; 250
     130:	93 e4       	ldi	r25, 0x43	; 67
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	0e 94 01 0b 	call	0x1602	; 0x1602 <_Z8pwm_initfh>
	init_serial();
     138:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_Z11init_serialv>
	
	init_configuration();
     13c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_Z18init_configurationv>
	read_configuration();
     140:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_Z18read_configurationv>
	
	//encoder_init();
	//pot_init   ();
			
	delay(100000);					// ~ 2 sec
     144:	60 ea       	ldi	r22, 0xA0	; 160
     146:	76 e8       	ldi	r23, 0x86	; 134
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_Z5delayl>
	//read_cal();					// Read everything including motor stops.
	sei();
     150:	78 94       	sei

	//OS_InitTask();
}
     152:	08 95       	ret

00000154 <main>:

//********** main *****************************************************
word prevPosition = 0;

int main(void)
{
     154:	cf 93       	push	r28
	init();
     156:	0e 94 89 00 	call	0x112	; 0x112 <_Z4initv>
set_duty_M1( 0.25 );
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	80 e8       	ldi	r24, 0x80	; 128
     160:	9e e3       	ldi	r25, 0x3E	; 62
     162:	0e 94 82 0b 	call	0x1704	; 0x1704 <_Z11set_duty_M1f>
set_duty_M2( 0.5 );
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	70 e0       	ldi	r23, 0x00	; 0
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	9f e3       	ldi	r25, 0x3F	; 63
     16e:	0e 94 b7 0b 	call	0x176e	; 0x176e <_Z11set_duty_M2f>
set_duty_M3( 0.75 );
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	80 e4       	ldi	r24, 0x40	; 64
     178:	9f e3       	ldi	r25, 0x3F	; 63
     17a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z11set_duty_M3f>
set_duty_M4( 0.95 );
     17e:	63 e3       	ldi	r22, 0x33	; 51
     180:	73 e3       	ldi	r23, 0x33	; 51
     182:	83 e7       	ldi	r24, 0x73	; 115
     184:	9f e3       	ldi	r25, 0x3F	; 63
     186:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z11set_duty_M4f>
bool motors_stopped = true;
     18a:	c1 e0       	ldi	r28, 0x01	; 1
     18c:	17 c0       	rjmp	.+46     	; 0x1bc <main+0x68>
		delay(one_second/20);
		led_off( 4 );
		led_off( 2 );
		led_off( 3 );
		if (motors_stopped)
			led_on ( STOP_LED );
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
		else
			led_off( STOP_LED );

		read_buttons();
     194:	0e 94 bd 0c 	call	0x197a	; 0x197a <_Z12read_buttonsv>
		if (stop_button_pressed)
     198:	80 91 0f 02 	lds	r24, 0x020F
     19c:	88 23       	and	r24, r24
     19e:	b9 f1       	breq	.+110    	; 0x20e <main+0xba>
		{
			motors_stopped = true;
			stop_motors();
		}
		if (resume_button_pressed)
     1a0:	80 91 10 02 	lds	r24, 0x0210
     1a4:	88 23       	and	r24, r24
     1a6:	d1 f1       	breq	.+116    	; 0x21c <main+0xc8>
		{
			motors_stopped = false; 
			resume_motors();
		}

		read_limit_switches();
     1a8:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_Z19read_limit_switchesv>
		if (is_any_limit_triggered())
     1ac:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_Z22is_any_limit_triggeredv>
     1b0:	81 11       	cpse	r24, r1
			motors_stopped = TRUE;	// indication only here.
     1b2:	c1 e0       	ldi	r28, 0x01	; 1

		motor_timeslice_10ms();		
     1b4:	0e 94 87 01 	call	0x30e	; 0x30e <_Z20motor_timeslice_10msv>
		// test message
		send_positions();		
     1b8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_Z14send_positionsv>
    while (1)
    {	
#define STOP_LED 1

    	// CAN Messaging will directly Start/Stop the motor.
		delay(one_second/20);
     1bc:	60 ea       	ldi	r22, 0xA0	; 160
     1be:	7f e0       	ldi	r23, 0x0F	; 15
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_Z5delayl>
		led_on( 4 );
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
		led_on( 2 );
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
		led_on( 3 );
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
		delay(one_second/20);
     1da:	60 ea       	ldi	r22, 0xA0	; 160
     1dc:	7f e0       	ldi	r23, 0x0F	; 15
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_Z5delayl>
		led_off( 4 );
     1e6:	84 e0       	ldi	r24, 0x04	; 4
     1e8:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>
		led_off( 2 );
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>
		led_off( 3 );
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>
		if (motors_stopped)
     1f8:	cc 23       	and	r28, r28
     1fa:	49 f6       	brne	.-110    	; 0x18e <main+0x3a>
			led_on ( STOP_LED );
		else
			led_off( STOP_LED );
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>

		read_buttons();
     202:	0e 94 bd 0c 	call	0x197a	; 0x197a <_Z12read_buttonsv>
		if (stop_button_pressed)
     206:	80 91 0f 02 	lds	r24, 0x020F
     20a:	88 23       	and	r24, r24
     20c:	49 f6       	brne	.-110    	; 0x1a0 <main+0x4c>
		{
			motors_stopped = true;
			stop_motors();
     20e:	0e 94 21 0c 	call	0x1842	; 0x1842 <_Z11stop_motorsv>
			led_off( STOP_LED );

		read_buttons();
		if (stop_button_pressed)
		{
			motors_stopped = true;
     212:	c1 e0       	ldi	r28, 0x01	; 1
			stop_motors();
		}
		if (resume_button_pressed)
     214:	80 91 10 02 	lds	r24, 0x0210
     218:	88 23       	and	r24, r24
     21a:	31 f6       	brne	.-116    	; 0x1a8 <main+0x54>
		{
			motors_stopped = false; 
			resume_motors();
     21c:	0e 94 6f 0c 	call	0x18de	; 0x18de <_Z13resume_motorsv>
			motors_stopped = true;
			stop_motors();
		}
		if (resume_button_pressed)
		{
			motors_stopped = false; 
     220:	c0 e0       	ldi	r28, 0x00	; 0
     222:	c2 cf       	rjmp	.-124    	; 0x1a8 <main+0x54>

00000224 <_Z24init_motor_control_linesv>:
#define NUM_MOTORS 4
bool motor_direction[NUM_MOTORS];

void init_motor_control_lines()
{
	DIRECTION_LINES_DDR  = 0xFF;	// all outputs!
     224:	8f ef       	ldi	r24, 0xFF	; 255
     226:	87 b9       	out	0x07, r24	; 7
	DIRECTION_LINES_PORT = 0x55;	// 1 side high, 1 side low for each full hbridge	
     228:	85 e5       	ldi	r24, 0x55	; 85
     22a:	88 b9       	out	0x08, r24	; 8
	
	motor_direction[0] = true;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 44 04 	sts	0x0444, r24
	motor_direction[1] = true;
     232:	80 93 45 04 	sts	0x0445, r24
	motor_direction[2] = true;
     236:	80 93 46 04 	sts	0x0446, r24
	motor_direction[3] = true;
     23a:	80 93 47 04 	sts	0x0447, r24
}
     23e:	08 95       	ret

00000240 <_Z15set_dir_motor_1b>:

void set_dir_motor_1( bool mForward )
{
	if (mForward)
     240:	88 23       	and	r24, r24
     242:	29 f4       	brne	.+10     	; 0x24e <_Z15set_dir_motor_1b+0xe>
		DIRECTION_LINES_PORT &= ~(1<<MOT_1_DIR_L);
		motor_direction[0] = true;		
	}
	else 
	{
		DIRECTION_LINES_PORT &= ~(1<<MOT_1_DIR_R);
     244:	40 98       	cbi	0x08, 0	; 8
		DIRECTION_LINES_PORT |=  (1<<MOT_1_DIR_L);
     246:	41 9a       	sbi	0x08, 1	; 8
		motor_direction[0] = false;
     248:	10 92 44 04 	sts	0x0444, r1
     24c:	08 95       	ret

void set_dir_motor_1( bool mForward )
{
	if (mForward)
	{
		DIRECTION_LINES_PORT |=  (1<<MOT_1_DIR_R);
     24e:	40 9a       	sbi	0x08, 0	; 8
		DIRECTION_LINES_PORT &= ~(1<<MOT_1_DIR_L);
     250:	41 98       	cbi	0x08, 1	; 8
		motor_direction[0] = true;		
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 44 04 	sts	0x0444, r24
     258:	08 95       	ret

0000025a <_Z15set_dir_motor_2b>:
	}
}

void set_dir_motor_2( bool mForward )
{
	if (mForward)
     25a:	88 23       	and	r24, r24
     25c:	29 f4       	brne	.+10     	; 0x268 <_Z15set_dir_motor_2b+0xe>
		DIRECTION_LINES_PORT &= ~(1<<MOT_2_DIR_L);
		motor_direction[1] = true;
	}
	else 
	{
		DIRECTION_LINES_PORT &= ~(1<<MOT_2_DIR_R);
     25e:	42 98       	cbi	0x08, 2	; 8
		DIRECTION_LINES_PORT |=  (1<<MOT_2_DIR_L);
     260:	43 9a       	sbi	0x08, 3	; 8
		motor_direction[1] = false;		
     262:	10 92 45 04 	sts	0x0445, r1
     266:	08 95       	ret

void set_dir_motor_2( bool mForward )
{
	if (mForward)
	{
		DIRECTION_LINES_PORT |=  (1<<MOT_2_DIR_R);
     268:	42 9a       	sbi	0x08, 2	; 8
		DIRECTION_LINES_PORT &= ~(1<<MOT_2_DIR_L);
     26a:	43 98       	cbi	0x08, 3	; 8
		motor_direction[1] = true;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	80 93 45 04 	sts	0x0445, r24
     272:	08 95       	ret

00000274 <_Z15set_dir_motor_3b>:
	}	
}

void set_dir_motor_3( bool mForward )
{
	if (mForward)
     274:	88 23       	and	r24, r24
     276:	29 f4       	brne	.+10     	; 0x282 <_Z15set_dir_motor_3b+0xe>
		DIRECTION_LINES_PORT &= ~(1<<MOT_3_DIR_L);
		motor_direction[2] = true;		
	}
	else 
	{
		DIRECTION_LINES_PORT &= ~(1<<MOT_3_DIR_R);
     278:	44 98       	cbi	0x08, 4	; 8
		DIRECTION_LINES_PORT |=  (1<<MOT_3_DIR_L);
     27a:	45 9a       	sbi	0x08, 5	; 8
		motor_direction[2] = false;
     27c:	10 92 46 04 	sts	0x0446, r1
     280:	08 95       	ret

void set_dir_motor_3( bool mForward )
{
	if (mForward)
	{
		DIRECTION_LINES_PORT |=  (1<<MOT_3_DIR_R);
     282:	44 9a       	sbi	0x08, 4	; 8
		DIRECTION_LINES_PORT &= ~(1<<MOT_3_DIR_L);
     284:	45 98       	cbi	0x08, 5	; 8
		motor_direction[2] = true;		
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 46 04 	sts	0x0446, r24
     28c:	08 95       	ret

0000028e <_Z15set_dir_motor_4b>:
	}	
}

void set_dir_motor_4( bool mForward )
{
	if (mForward)
     28e:	88 23       	and	r24, r24
     290:	31 f4       	brne	.+12     	; 0x29e <_Z15set_dir_motor_4b+0x10>
		DIRECTION_LINES_PORT &= ~(1<<MOT_4_DIR_L);
		motor_direction[3] = true;				
	}
	else 
	{
		DIRECTION_LINES_PORT &= ~(1<<MOT_4_DIR_R);
     292:	46 98       	cbi	0x08, 6	; 8
		DIRECTION_LINES_PORT |=  (1<<MOT_4_DIR_L);
     294:	47 9a       	sbi	0x08, 7	; 8
		motor_direction[3] = true;				
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 47 04 	sts	0x0447, r24
     29c:	08 95       	ret

void set_dir_motor_4( bool mForward )
{
	if (mForward)
	{
		DIRECTION_LINES_PORT |=  (1<<MOT_4_DIR_R);
     29e:	46 9a       	sbi	0x08, 6	; 8
		DIRECTION_LINES_PORT &= ~(1<<MOT_4_DIR_L);
     2a0:	47 98       	cbi	0x08, 7	; 8
		motor_direction[3] = true;				
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 47 04 	sts	0x0447, r24
     2a8:	08 95       	ret

000002aa <_Z17set_motor_4_brakeb>:
	}
}

void set_motor_4_brake( bool mBrake )
{
	if (mBrake)
     2aa:	88 23       	and	r24, r24
     2ac:	29 f4       	brne	.+10     	; 0x2b8 <_Z17set_motor_4_brakeb+0xe>
		DIRECTION_LINES_PORT &= ~(1<<MOT_4_DIR_R);
		DIRECTION_LINES_PORT &= ~(1<<MOT_4_DIR_L);
	}
	else // coast
	{
		DIRECTION_LINES_PORT |= ~(1<<MOT_4_DIR_R);
     2ae:	88 b1       	in	r24, 0x08	; 8
     2b0:	8f 6b       	ori	r24, 0xBF	; 191
     2b2:	88 b9       	out	0x08, r24	; 8
		DIRECTION_LINES_PORT |=  (1<<MOT_4_DIR_L);
     2b4:	47 9a       	sbi	0x08, 7	; 8
     2b6:	08 95       	ret

void set_motor_4_brake( bool mBrake )
{
	if (mBrake)
	{
		DIRECTION_LINES_PORT &= ~(1<<MOT_4_DIR_R);
     2b8:	46 98       	cbi	0x08, 6	; 8
		DIRECTION_LINES_PORT &= ~(1<<MOT_4_DIR_L);
     2ba:	47 98       	cbi	0x08, 7	; 8
     2bc:	08 95       	ret

000002be <_Z19check_limit_disablei>:
	}	
}


void check_limit_disable( int mIndex )
{
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	ec 01       	movw	r28, r24
	bool near = get_limit_switch_near( mIndex );
     2c6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_Z21get_limit_switch_neari>
     2ca:	18 2f       	mov	r17, r24
	bool far  = get_limit_switch_far ( mIndex );
     2cc:	ce 01       	movw	r24, r28
     2ce:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_Z20get_limit_switch_fari>
	
	if ((near) && (motor_direction[mIndex]))
     2d2:	11 23       	and	r17, r17
     2d4:	31 f0       	breq	.+12     	; 0x2e2 <_Z19check_limit_disablei+0x24>
     2d6:	fe 01       	movw	r30, r28
     2d8:	ec 5b       	subi	r30, 0xBC	; 188
     2da:	fb 4f       	sbci	r31, 0xFB	; 251
     2dc:	90 81       	ld	r25, Z
     2de:	99 23       	and	r25, r25
     2e0:	61 f4       	brne	.+24     	; 0x2fa <_Z19check_limit_disablei+0x3c>
	{
		set_motor_duty(mIndex, 0.0);
	} 
	else if ((far) && (motor_direction[mIndex]==0))
     2e2:	88 23       	and	r24, r24
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <_Z19check_limit_disablei+0x34>
     2e6:	fe 01       	movw	r30, r28
     2e8:	ec 5b       	subi	r30, 0xBC	; 188
     2ea:	fb 4f       	sbci	r31, 0xFB	; 251
     2ec:	80 81       	ld	r24, Z
     2ee:	88 23       	and	r24, r24
     2f0:	21 f0       	breq	.+8      	; 0x2fa <_Z19check_limit_disablei+0x3c>
	{
		set_motor_duty(mIndex, 0.0);
	}
}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
     2f8:	08 95       	ret
	{
		set_motor_duty(mIndex, 0.0);
	} 
	else if ((far) && (motor_direction[mIndex]==0))
	{
		set_motor_duty(mIndex, 0.0);
     2fa:	ce 01       	movw	r24, r28
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	ba 01       	movw	r22, r20
     302:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14set_motor_dutyif>
	}
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	08 95       	ret

0000030e <_Z20motor_timeslice_10msv>:
send postion report		
turn off if shutdown	
*************************************************************/
void motor_timeslice_10ms()
{
	check_limit_disable(1);
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z19check_limit_disablei>
	check_limit_disable(2);
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z19check_limit_disablei>
	check_limit_disable(3);
     31e:	83 e0       	ldi	r24, 0x03	; 3
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z19check_limit_disablei>
	check_limit_disable(4);
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z19check_limit_disablei>
	
}
     32e:	08 95       	ret

00000330 <_Z8pot_initv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void pot_init()
{
	Destination.continuous = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 6e 04 	sts	0x046E, r24

	// SET AS INPUT:	
	CURRENT_SENSE_DDR  &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
     336:	87 b1       	in	r24, 0x07	; 7
     338:	8f 7c       	andi	r24, 0xCF	; 207
     33a:	87 b9       	out	0x07, r24	; 7
	CURRENT_SENSE_PORT &= ~((1<<CURRENT_SENSE_LEFT) | (1<<CURRENT_SENSE_RIGHT));
     33c:	88 b1       	in	r24, 0x08	; 8
     33e:	8f 7c       	andi	r24, 0xCF	; 207
     340:	88 b9       	out	0x08, r24	; 8

	// SET AS INPUT:
	POT_DDR  &= ~(1<<POT);
     342:	55 98       	cbi	0x0a, 5	; 10
	POT_PORT &= ~(1<<POT);
     344:	5d 98       	cbi	0x0b, 5	; 11

	adc_init();	
     346:	0e 94 0a 08 	call	0x1014	; 0x1014 <_Z8adc_initv>
	start_sampling();		// Need to call 1 Time to get it started (ISR will keep going)
     34a:	0e 94 1b 08 	call	0x1036	; 0x1036 <_Z14start_samplingv>
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
     34e:	80 91 4e 04 	lds	r24, 0x044E
     352:	90 91 4f 04 	lds	r25, 0x044F
     356:	a0 91 50 04 	lds	r26, 0x0450
     35a:	b0 91 51 04 	lds	r27, 0x0451
     35e:	20 91 48 04 	lds	r18, 0x0448
     362:	30 91 49 04 	lds	r19, 0x0449
     366:	40 91 4a 04 	lds	r20, 0x044A
     36a:	50 91 4b 04 	lds	r21, 0x044B
     36e:	82 1b       	sub	r24, r18
     370:	93 0b       	sbc	r25, r19
     372:	a4 0b       	sbc	r26, r20
     374:	b5 0b       	sbc	r27, r21
     376:	80 93 54 04 	sts	0x0454, r24
     37a:	90 93 55 04 	sts	0x0455, r25
     37e:	a0 93 56 04 	sts	0x0456, r26
     382:	b0 93 57 04 	sts	0x0457, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
     386:	80 91 52 04 	lds	r24, 0x0452
     38a:	90 91 53 04 	lds	r25, 0x0453
     38e:	20 91 4c 04 	lds	r18, 0x044C
     392:	30 91 4d 04 	lds	r19, 0x044D
     396:	82 1b       	sub	r24, r18
     398:	93 0b       	sbc	r25, r19
     39a:	90 93 59 04 	sts	0x0459, r25
     39e:	80 93 58 04 	sts	0x0458, r24
	POT_PORT &= ~(1<<POT);

	adc_init();	
	start_sampling();		// Need to call 1 Time to get it started (ISR will keep going)
	compute_range();
}
     3a2:	08 95       	ret

000003a4 <_Z13pot_timeslicev>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
     3a4:	20 91 5c 04 	lds	r18, 0x045C
     3a8:	30 91 5d 04 	lds	r19, 0x045D
     3ac:	30 93 5b 04 	sts	0x045B, r19
     3b0:	20 93 5a 04 	sts	0x045A, r18
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
     3b4:	80 91 f1 04 	lds	r24, 0x04F1
     3b8:	90 91 f2 04 	lds	r25, 0x04F2
     3bc:	40 91 ef 04 	lds	r20, 0x04EF
     3c0:	50 91 f0 04 	lds	r21, 0x04F0
     3c4:	84 1b       	sub	r24, r20
     3c6:	95 0b       	sbc	r25, r21
     3c8:	90 93 5d 04 	sts	0x045D, r25
     3cc:	80 93 5c 04 	sts	0x045C, r24
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
     3d0:	40 91 60 04 	lds	r20, 0x0460
     3d4:	50 91 61 04 	lds	r21, 0x0461
     3d8:	50 93 5f 04 	sts	0x045F, r21
     3dc:	40 93 5e 04 	sts	0x045E, r20
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
     3e0:	82 1b       	sub	r24, r18
     3e2:	93 0b       	sbc	r25, r19
     3e4:	90 93 61 04 	sts	0x0461, r25
     3e8:	80 93 60 04 	sts	0x0460, r24
***********************************************/
void pot_timeslice()
{
	compute_pot_speed();
	compute_pot_acceleration();
}
     3ec:	08 95       	ret

000003ee <_Z7get_potv>:
Return	:	The motor position in degrees * 10
***********************************************/
uint16_t get_pot()
{
	return PotSample[1];
}
     3ee:	80 91 f1 04 	lds	r24, 0x04F1
     3f2:	90 91 f2 04 	lds	r25, 0x04F2
     3f6:	08 95       	ret

000003f8 <_Z27get_distance_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
uint16_t get_distance_to_destination()
{
	return (Destination.position - PotSample[1]);
     3f8:	20 91 71 04 	lds	r18, 0x0471
     3fc:	30 91 72 04 	lds	r19, 0x0472
     400:	80 91 f1 04 	lds	r24, 0x04F1
     404:	90 91 f2 04 	lds	r25, 0x04F2
     408:	28 1b       	sub	r18, r24
     40a:	39 0b       	sbc	r19, r25
}
     40c:	c9 01       	movw	r24, r18
     40e:	08 95       	ret

00000410 <_Z28get_direction_to_destinationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
     410:	20 91 71 04 	lds	r18, 0x0471
     414:	30 91 72 04 	lds	r19, 0x0472
     418:	80 91 f1 04 	lds	r24, 0x04F1
     41c:	90 91 f2 04 	lds	r25, 0x04F2
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	58 f0       	brcs	.+22     	; 0x43c <_Z28get_direction_to_destinationv+0x2c>
		Destination.direction = 1;
		return 1;
	}
	else if (Destination.position < PotSample[1]) {
     426:	28 17       	cp	r18, r24
     428:	39 07       	cpc	r19, r25
     42a:	20 f4       	brcc	.+8      	; 0x434 <_Z28get_direction_to_destinationv+0x24>
		Destination.direction = -1;	
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	80 93 73 04 	sts	0x0473, r24
		return -1;
     432:	08 95       	ret
	}
	else {
		Destination.direction = 0;
     434:	10 92 73 04 	sts	0x0473, r1
		return 0;	// exactly at destination
     438:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     43a:	08 95       	ret
Return	:	The motor position in degrees * 10
***********************************************/
byte get_direction_to_destination()
{
	if (Destination.position > PotSample[1]) {
		Destination.direction = 1;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 73 04 	sts	0x0473, r24
		return 1;
     442:	08 95       	ret

00000444 <_Z17compute_pot_speedv>:
***********************************************/
void compute_pot_speed()
{
// Problem is Sample Rate versus Report Rate.
// Sample rate must be so high we only see 1 or 2 at the most difference.
	PotSpeed[0] = PotSpeed[1];
     444:	80 91 5c 04 	lds	r24, 0x045C
     448:	90 91 5d 04 	lds	r25, 0x045D
     44c:	90 93 5b 04 	sts	0x045B, r25
     450:	80 93 5a 04 	sts	0x045A, r24
	PotSpeed[1] = (PotSample[1]-PotSample[0]);
     454:	80 91 f1 04 	lds	r24, 0x04F1
     458:	90 91 f2 04 	lds	r25, 0x04F2
     45c:	20 91 ef 04 	lds	r18, 0x04EF
     460:	30 91 f0 04 	lds	r19, 0x04F0
     464:	82 1b       	sub	r24, r18
     466:	93 0b       	sbc	r25, r19
     468:	90 93 5d 04 	sts	0x045D, r25
     46c:	80 93 5c 04 	sts	0x045C, r24
}
     470:	08 95       	ret

00000472 <_Z24compute_pot_accelerationv>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
void compute_pot_acceleration()
{
	PotAcceleration[0] = PotAcceleration[1];
     472:	80 91 60 04 	lds	r24, 0x0460
     476:	90 91 61 04 	lds	r25, 0x0461
     47a:	90 93 5f 04 	sts	0x045F, r25
     47e:	80 93 5e 04 	sts	0x045E, r24
	PotAcceleration[1] = (PotSpeed[1] - PotSpeed[0]);
     482:	80 91 5c 04 	lds	r24, 0x045C
     486:	90 91 5d 04 	lds	r25, 0x045D
     48a:	20 91 5a 04 	lds	r18, 0x045A
     48e:	30 91 5b 04 	lds	r19, 0x045B
     492:	82 1b       	sub	r24, r18
     494:	93 0b       	sbc	r25, r19
     496:	90 93 61 04 	sts	0x0461, r25
     49a:	80 93 60 04 	sts	0x0460, r24
}
     49e:	08 95       	ret

000004a0 <_Z11pot_percentv>:
Forward is duty > 0.50
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
	float position = PotSample[1];
	uint16_t half = (Range.value>>2) + EndPoint1.value;
     4a8:	60 91 58 04 	lds	r22, 0x0458
     4ac:	70 91 59 04 	lds	r23, 0x0459
     4b0:	76 95       	lsr	r23
     4b2:	67 95       	ror	r22
     4b4:	76 95       	lsr	r23
     4b6:	67 95       	ror	r22
     4b8:	80 91 4c 04 	lds	r24, 0x044C
     4bc:	90 91 4d 04 	lds	r25, 0x044D
     4c0:	68 0f       	add	r22, r24
     4c2:	79 1f       	adc	r23, r25
	
	float delta    = (position - half);
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     4cc:	7b 01       	movw	r14, r22
     4ce:	8c 01       	movw	r16, r24
Backward is duty [0.0.. 0.5]
******************************************************/
#define MID_WAY ((float)0x1FF)
float pot_percent()
{
	float position = PotSample[1];
     4d0:	60 91 f1 04 	lds	r22, 0x04F1
     4d4:	70 91 f2 04 	lds	r23, 0x04F2
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
	uint16_t half = (Range.value>>2) + EndPoint1.value;
	
	float delta    = (position - half);
     4e0:	a8 01       	movw	r20, r16
     4e2:	97 01       	movw	r18, r14
     4e4:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
	float percent  = (delta / (float)half);
     4e8:	a8 01       	movw	r20, r16
     4ea:	97 01       	movw	r18, r14
     4ec:	0e 94 9a 12 	call	0x2534	; 0x2534 <__divsf3>
	return percent;
}
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	08 95       	ret

000004fa <_Z16convert_to_anglej>:
convert_to_angle( uint16_t  mPotValue )
RETURN	:	Takes a Pot reading and converts to an angle
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( uint16_t  mPotValue )
{
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
     510:	20 91 4e 04 	lds	r18, 0x044E
     514:	30 91 4f 04 	lds	r19, 0x044F
     518:	40 91 50 04 	lds	r20, 0x0450
     51c:	50 91 51 04 	lds	r21, 0x0451
     520:	60 91 48 04 	lds	r22, 0x0448
     524:	70 91 49 04 	lds	r23, 0x0449
     528:	80 91 4a 04 	lds	r24, 0x044A
     52c:	90 91 4b 04 	lds	r25, 0x044B
     530:	26 17       	cp	r18, r22
     532:	37 07       	cpc	r19, r23
     534:	48 07       	cpc	r20, r24
     536:	59 07       	cpc	r21, r25
     538:	14 f4       	brge	.+4      	; 0x53e <_Z16convert_to_anglej+0x44>
     53a:	ca 01       	movw	r24, r20
     53c:	b9 01       	movw	r22, r18
     53e:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__floatsisf>
     542:	5b 01       	movw	r10, r22
     544:	6c 01       	movw	r12, r24
******************************************************/
float convert_to_angle( uint16_t  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
	float angle = ( ratio * Range.angle );			// range has the *100 in it
     546:	60 91 54 04 	lds	r22, 0x0454
     54a:	70 91 55 04 	lds	r23, 0x0455
     54e:	80 91 56 04 	lds	r24, 0x0456
     552:	90 91 57 04 	lds	r25, 0x0457
     556:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__floatsisf>
     55a:	7b 01       	movw	r14, r22
     55c:	8c 01       	movw	r16, r24
	based on the already calibrated stops.
******************************************************/
float convert_to_angle( uint16_t  mPotValue )
{
	// Linear Interpolate:  (Value-MinValue) / ValueRange = (angle-MinAngle) / angleRange
	float ratio = (mPotValue-get_min_stop_value()) / Range.value;
     55e:	20 91 52 04 	lds	r18, 0x0452
     562:	30 91 53 04 	lds	r19, 0x0453
     566:	80 91 4c 04 	lds	r24, 0x044C
     56a:	90 91 4d 04 	lds	r25, 0x044D
     56e:	28 17       	cp	r18, r24
     570:	39 07       	cpc	r19, r25
     572:	08 f4       	brcc	.+2      	; 0x576 <_Z16convert_to_anglej+0x7c>
     574:	c9 01       	movw	r24, r18
     576:	9e 01       	movw	r18, r28
     578:	28 1b       	sub	r18, r24
     57a:	39 0b       	sbc	r19, r25
     57c:	c9 01       	movw	r24, r18
     57e:	60 91 58 04 	lds	r22, 0x0458
     582:	70 91 59 04 	lds	r23, 0x0459
     586:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <__udivmodhi4>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     592:	9b 01       	movw	r18, r22
     594:	ac 01       	movw	r20, r24
	float angle = ( ratio * Range.angle );			// range has the *100 in it
     596:	c8 01       	movw	r24, r16
     598:	b7 01       	movw	r22, r14
     59a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     59e:	9b 01       	movw	r18, r22
     5a0:	ac 01       	movw	r20, r24
	return angle + get_min_stop_angle();
     5a2:	c6 01       	movw	r24, r12
     5a4:	b5 01       	movw	r22, r10
     5a6:	0e 94 42 11 	call	0x2284	; 0x2284 <__addsf3>
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	08 95       	ret

000005c0 <_Z13get_pot_anglev>:
/**********************************************
Return	:	The motor position in degrees * 10
***********************************************/
long int  get_pot_angle()
{
	return convert_to_angle(PotSample[1]);
     5c0:	80 91 f1 04 	lds	r24, 0x04F1
     5c4:	90 91 f2 04 	lds	r25, 0x04F2
     5c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z16convert_to_anglej>
     5cc:	0e 94 38 14 	call	0x2870	; 0x2870 <__fixsfsi>
}
     5d0:	08 95       	ret

000005d2 <_Z21convert_to_fixedpointf>:
	float angle = ( ratio * Range.angle );			// range has the *100 in it
	return angle + get_min_stop_angle();
}
long int convert_to_fixedpoint( float  mRealNumber )
{
	long int fp = (mRealNumber * 100);
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	48 ec       	ldi	r20, 0xC8	; 200
     5d8:	52 e4       	ldi	r21, 0x42	; 66
     5da:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     5de:	0e 94 38 14 	call	0x2870	; 0x2870 <__fixsfsi>
	return fp;
}
     5e2:	08 95       	ret

000005e4 <_Z16convert_to_valuel>:
convert_to_value( float mAngle )
RETURN	:	Takes an Angle and converts to an expected
	POT reading.
******************************************************/
uint16_t  convert_to_value( long mAngleHundredthDeg )
{
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	7b 01       	movw	r14, r22
     5f6:	8c 01       	movw	r16, r24
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
	float pot_value = (ratio * Range.value) + get_min_stop_value();
     5f8:	60 91 58 04 	lds	r22, 0x0458
     5fc:	70 91 59 04 	lds	r23, 0x0459
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     608:	5b 01       	movw	r10, r22
     60a:	6c 01       	movw	r12, r24
	POT reading.
******************************************************/
uint16_t  convert_to_value( long mAngleHundredthDeg )
{
	// Linear Interpolate:  (Value / ValueRange) = (angle / angleRange)
	float ratio 	= (mAngleHundredthDeg - get_min_stop_angle()) / Range.angle;
     60c:	20 91 4e 04 	lds	r18, 0x044E
     610:	30 91 4f 04 	lds	r19, 0x044F
     614:	40 91 50 04 	lds	r20, 0x0450
     618:	50 91 51 04 	lds	r21, 0x0451
     61c:	80 91 48 04 	lds	r24, 0x0448
     620:	90 91 49 04 	lds	r25, 0x0449
     624:	a0 91 4a 04 	lds	r26, 0x044A
     628:	b0 91 4b 04 	lds	r27, 0x044B
     62c:	28 17       	cp	r18, r24
     62e:	39 07       	cpc	r19, r25
     630:	4a 07       	cpc	r20, r26
     632:	5b 07       	cpc	r21, r27
     634:	14 f4       	brge	.+4      	; 0x63a <_Z16convert_to_valuel+0x56>
     636:	da 01       	movw	r26, r20
     638:	c9 01       	movw	r24, r18
     63a:	a8 01       	movw	r20, r16
     63c:	97 01       	movw	r18, r14
     63e:	28 1b       	sub	r18, r24
     640:	39 0b       	sbc	r19, r25
     642:	4a 0b       	sbc	r20, r26
     644:	5b 0b       	sbc	r21, r27
     646:	ca 01       	movw	r24, r20
     648:	b9 01       	movw	r22, r18
     64a:	20 91 54 04 	lds	r18, 0x0454
     64e:	30 91 55 04 	lds	r19, 0x0455
     652:	40 91 56 04 	lds	r20, 0x0456
     656:	50 91 57 04 	lds	r21, 0x0457
     65a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divmodsi4>
     65e:	ca 01       	movw	r24, r20
     660:	b9 01       	movw	r22, r18
     662:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__floatsisf>
     666:	9b 01       	movw	r18, r22
     668:	ac 01       	movw	r20, r24
	float pot_value = (ratio * Range.value) + get_min_stop_value();
     66a:	c6 01       	movw	r24, r12
     66c:	b5 01       	movw	r22, r10
     66e:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     672:	7b 01       	movw	r14, r22
     674:	8c 01       	movw	r16, r24
     676:	80 91 52 04 	lds	r24, 0x0452
     67a:	90 91 53 04 	lds	r25, 0x0453
     67e:	60 91 4c 04 	lds	r22, 0x044C
     682:	70 91 4d 04 	lds	r23, 0x044D
     686:	86 17       	cp	r24, r22
     688:	97 07       	cpc	r25, r23
     68a:	08 f4       	brcc	.+2      	; 0x68e <_Z16convert_to_valuel+0xaa>
     68c:	bc 01       	movw	r22, r24
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     696:	9b 01       	movw	r18, r22
     698:	ac 01       	movw	r20, r24
     69a:	c8 01       	movw	r24, r16
     69c:	b7 01       	movw	r22, r14
     69e:	0e 94 42 11 	call	0x2284	; 0x2284 <__addsf3>
	return (uint16_t)pot_value;
     6a2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
}
     6a6:	cb 01       	movw	r24, r22
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	08 95       	ret

000006ba <_Z21compute_default_stopsv>:
RETURN	:	float => Percentage between [0.0 .. 1.0]

******************************************************/
void  compute_default_stops()
{
	EndPoint1.value = 25; 			//(0.1 * MIN_POT_VALUE);		// 10 % limits
     6ba:	89 e1       	ldi	r24, 0x19	; 25
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	90 93 4d 04 	sts	0x044D, r25
     6c2:	80 93 4c 04 	sts	0x044C, r24
	EndPoint2.value = 0x3ff-25; 	//(0.9 * MAX_POT_VALUE);		// 10 % limits	
     6c6:	86 ee       	ldi	r24, 0xE6	; 230
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	90 93 53 04 	sts	0x0453, r25
     6ce:	80 93 52 04 	sts	0x0452, r24
	
	EndPoint1.angle =   0*100;		// 0 degrees
     6d2:	10 92 48 04 	sts	0x0448, r1
     6d6:	10 92 49 04 	sts	0x0449, r1
     6da:	10 92 4a 04 	sts	0x044A, r1
     6de:	10 92 4b 04 	sts	0x044B, r1
	EndPoint2.angle = 300*100;		// Most Pots turn 300 degrees
     6e2:	80 e3       	ldi	r24, 0x30	; 48
     6e4:	95 e7       	ldi	r25, 0x75	; 117
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	80 93 4e 04 	sts	0x044E, r24
     6ee:	90 93 4f 04 	sts	0x044F, r25
     6f2:	a0 93 50 04 	sts	0x0450, r26
     6f6:	b0 93 51 04 	sts	0x0451, r27
}
     6fa:	08 95       	ret

000006fc <_Z13compute_rangev>:
RETURN	:	Difference between endpoints. Stored in file
			variable.
******************************************************/
void  compute_range()
{
	Range.angle = (EndPoint2.angle - EndPoint1.angle);
     6fc:	80 91 4e 04 	lds	r24, 0x044E
     700:	90 91 4f 04 	lds	r25, 0x044F
     704:	a0 91 50 04 	lds	r26, 0x0450
     708:	b0 91 51 04 	lds	r27, 0x0451
     70c:	20 91 48 04 	lds	r18, 0x0448
     710:	30 91 49 04 	lds	r19, 0x0449
     714:	40 91 4a 04 	lds	r20, 0x044A
     718:	50 91 4b 04 	lds	r21, 0x044B
     71c:	82 1b       	sub	r24, r18
     71e:	93 0b       	sbc	r25, r19
     720:	a4 0b       	sbc	r26, r20
     722:	b5 0b       	sbc	r27, r21
     724:	80 93 54 04 	sts	0x0454, r24
     728:	90 93 55 04 	sts	0x0455, r25
     72c:	a0 93 56 04 	sts	0x0456, r26
     730:	b0 93 57 04 	sts	0x0457, r27
	Range.value = (EndPoint2.value - EndPoint1.value);
     734:	80 91 52 04 	lds	r24, 0x0452
     738:	90 91 53 04 	lds	r25, 0x0453
     73c:	20 91 4c 04 	lds	r18, 0x044C
     740:	30 91 4d 04 	lds	r19, 0x044D
     744:	82 1b       	sub	r24, r18
     746:	93 0b       	sbc	r25, r19
     748:	90 93 59 04 	sts	0x0459, r25
     74c:	80 93 58 04 	sts	0x0458, r24
}
     750:	08 95       	ret

00000752 <_Z18get_min_stop_valuev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
uint16_t	  get_min_stop_value()
{
     752:	80 91 52 04 	lds	r24, 0x0452
     756:	90 91 53 04 	lds	r25, 0x0453
     75a:	20 91 4c 04 	lds	r18, 0x044C
     75e:	30 91 4d 04 	lds	r19, 0x044D
     762:	82 17       	cp	r24, r18
     764:	93 07       	cpc	r25, r19
     766:	08 f4       	brcc	.+2      	; 0x76a <_Z18get_min_stop_valuev+0x18>
     768:	9c 01       	movw	r18, r24
	return min( EndPoint2.value, EndPoint1.value);	
}
     76a:	c9 01       	movw	r24, r18
     76c:	08 95       	ret

0000076e <_Z18get_min_stop_anglev>:
/*******************************************************
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
     76e:	80 91 4e 04 	lds	r24, 0x044E
     772:	90 91 4f 04 	lds	r25, 0x044F
     776:	a0 91 50 04 	lds	r26, 0x0450
     77a:	b0 91 51 04 	lds	r27, 0x0451
     77e:	20 91 48 04 	lds	r18, 0x0448
     782:	30 91 49 04 	lds	r19, 0x0449
     786:	40 91 4a 04 	lds	r20, 0x044A
     78a:	50 91 4b 04 	lds	r21, 0x044B
     78e:	82 17       	cp	r24, r18
     790:	93 07       	cpc	r25, r19
     792:	a4 07       	cpc	r26, r20
     794:	b5 07       	cpc	r27, r21
     796:	14 f4       	brge	.+4      	; 0x79c <_Z18get_min_stop_anglev+0x2e>
     798:	9c 01       	movw	r18, r24
     79a:	ad 01       	movw	r20, r26
	return min( EndPoint2.angle , EndPoint1.angle);
}
     79c:	b9 01       	movw	r22, r18
     79e:	ca 01       	movw	r24, r20
     7a0:	08 95       	ret

000007a2 <_Z18get_max_stop_valuev>:
/*******************************************************
get_max_stop_value()
RETURN	:	Greater of the 2 stop endpoints.  Value only.
******************************************************/
uint16_t	  get_max_stop_value()
{
     7a2:	80 91 52 04 	lds	r24, 0x0452
     7a6:	90 91 53 04 	lds	r25, 0x0453
     7aa:	20 91 4c 04 	lds	r18, 0x044C
     7ae:	30 91 4d 04 	lds	r19, 0x044D
     7b2:	28 17       	cp	r18, r24
     7b4:	39 07       	cpc	r19, r25
     7b6:	08 f4       	brcc	.+2      	; 0x7ba <_Z18get_max_stop_valuev+0x18>
     7b8:	9c 01       	movw	r18, r24
	return max( EndPoint2.value, EndPoint1.value );
}
     7ba:	c9 01       	movw	r24, r18
     7bc:	08 95       	ret

000007be <_Z18get_max_stop_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
long int  get_max_stop_angle()
{
     7be:	80 91 4e 04 	lds	r24, 0x044E
     7c2:	90 91 4f 04 	lds	r25, 0x044F
     7c6:	a0 91 50 04 	lds	r26, 0x0450
     7ca:	b0 91 51 04 	lds	r27, 0x0451
     7ce:	20 91 48 04 	lds	r18, 0x0448
     7d2:	30 91 49 04 	lds	r19, 0x0449
     7d6:	40 91 4a 04 	lds	r20, 0x044A
     7da:	50 91 4b 04 	lds	r21, 0x044B
     7de:	28 17       	cp	r18, r24
     7e0:	39 07       	cpc	r19, r25
     7e2:	4a 07       	cpc	r20, r26
     7e4:	5b 07       	cpc	r21, r27
     7e6:	14 f4       	brge	.+4      	; 0x7ec <_Z18get_max_stop_anglev+0x2e>
     7e8:	9c 01       	movw	r18, r24
     7ea:	ad 01       	movw	r20, r26
	return max( EndPoint2.angle , EndPoint1.angle);
}
     7ec:	b9 01       	movw	r22, r18
     7ee:	ca 01       	movw	r24, r20
     7f0:	08 95       	ret

000007f2 <_Z20order_stops_by_valuev>:
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
uint16_t	  get_min_stop_value()
{
	return min( EndPoint2.value, EndPoint1.value);	
     7f2:	e0 91 52 04 	lds	r30, 0x0452
     7f6:	f0 91 53 04 	lds	r31, 0x0453
     7fa:	60 91 4c 04 	lds	r22, 0x044C
     7fe:	70 91 4d 04 	lds	r23, 0x044D
     802:	e6 17       	cp	r30, r22
     804:	f7 07       	cpc	r31, r23
     806:	40 f5       	brcc	.+80     	; 0x858 <_Z20order_stops_by_valuev+0x66>
{
	uint16_t Min = get_min_stop_value();
	if (EndPoint1.value == Min) return;		// okay

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
     808:	80 91 48 04 	lds	r24, 0x0448
     80c:	90 91 49 04 	lds	r25, 0x0449
     810:	a0 91 4a 04 	lds	r26, 0x044A
     814:	b0 91 4b 04 	lds	r27, 0x044B
	uint16_t     tvalue = EndPoint1.value;
	
	EndPoint1.angle = EndPoint2.angle;
     818:	20 91 4e 04 	lds	r18, 0x044E
     81c:	30 91 4f 04 	lds	r19, 0x044F
     820:	40 91 50 04 	lds	r20, 0x0450
     824:	50 91 51 04 	lds	r21, 0x0451
     828:	20 93 48 04 	sts	0x0448, r18
     82c:	30 93 49 04 	sts	0x0449, r19
     830:	40 93 4a 04 	sts	0x044A, r20
     834:	50 93 4b 04 	sts	0x044B, r21
	EndPoint1.value = EndPoint2.value;		
     838:	f0 93 4d 04 	sts	0x044D, r31
     83c:	e0 93 4c 04 	sts	0x044C, r30
	EndPoint2.angle = tangle;
     840:	80 93 4e 04 	sts	0x044E, r24
     844:	90 93 4f 04 	sts	0x044F, r25
     848:	a0 93 50 04 	sts	0x0450, r26
     84c:	b0 93 51 04 	sts	0x0451, r27
	EndPoint2.value = tvalue;	
     850:	70 93 53 04 	sts	0x0453, r23
     854:	60 93 52 04 	sts	0x0452, r22
     858:	08 95       	ret

0000085a <_Z20order_stops_by_anglev>:
/*******************************************************
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
get_min_stop_value()
RETURN	:	Lesser of the 2 stop endpoints.  Value only.
******************************************************/
long int  get_min_stop_angle()
{
	return min( EndPoint2.angle , EndPoint1.angle);
     862:	20 91 4e 04 	lds	r18, 0x044E
     866:	30 91 4f 04 	lds	r19, 0x044F
     86a:	40 91 50 04 	lds	r20, 0x0450
     86e:	50 91 51 04 	lds	r21, 0x0451
     872:	80 91 48 04 	lds	r24, 0x0448
     876:	90 91 49 04 	lds	r25, 0x0449
     87a:	a0 91 4a 04 	lds	r26, 0x044A
     87e:	b0 91 4b 04 	lds	r27, 0x044B
get_max_stop_angle()
RETURN	:	Greater of the 2 stop endpoints.  Angle only.
******************************************************/
void  order_stops_by_angle( )
{
	uint16_t Min = get_min_stop_angle();
     882:	7c 01       	movw	r14, r24
     884:	8d 01       	movw	r16, r26
     886:	28 17       	cp	r18, r24
     888:	39 07       	cpc	r19, r25
     88a:	4a 07       	cpc	r20, r26
     88c:	5b 07       	cpc	r21, r27
     88e:	14 f4       	brge	.+4      	; 0x894 <_Z20order_stops_by_anglev+0x3a>
     890:	79 01       	movw	r14, r18
     892:	8a 01       	movw	r16, r20
	if (EndPoint1.angle == Min) return;		// okay
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	e8 16       	cp	r14, r24
     89a:	f9 06       	cpc	r15, r25
     89c:	0a 07       	cpc	r16, r26
     89e:	1b 07       	cpc	r17, r27
     8a0:	01 f1       	breq	.+64     	; 0x8e2 <_Z20order_stops_by_anglev+0x88>

	// SWAP EP1 & EP2:
	long int tangle = EndPoint1.angle;
	uint16_t     tvalue = EndPoint1.value;
     8a2:	60 91 4c 04 	lds	r22, 0x044C
     8a6:	70 91 4d 04 	lds	r23, 0x044D
	
	EndPoint1.angle = EndPoint2.angle;
     8aa:	20 93 48 04 	sts	0x0448, r18
     8ae:	30 93 49 04 	sts	0x0449, r19
     8b2:	40 93 4a 04 	sts	0x044A, r20
     8b6:	50 93 4b 04 	sts	0x044B, r21
	EndPoint1.value = EndPoint2.value;		
     8ba:	20 91 52 04 	lds	r18, 0x0452
     8be:	30 91 53 04 	lds	r19, 0x0453
     8c2:	30 93 4d 04 	sts	0x044D, r19
     8c6:	20 93 4c 04 	sts	0x044C, r18
	EndPoint2.angle = tangle;
     8ca:	80 93 4e 04 	sts	0x044E, r24
     8ce:	90 93 4f 04 	sts	0x044F, r25
     8d2:	a0 93 50 04 	sts	0x0450, r26
     8d6:	b0 93 51 04 	sts	0x0451, r27
	EndPoint2.value = tvalue;
     8da:	70 93 53 04 	sts	0x0453, r23
     8de:	60 93 52 04 	sts	0x0452, r22
}
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	08 95       	ret

000008ec <_Z11check_stopsj>:
			1 = Under the Lower stop
			2 = Over the top stop
***********************************************/
#define HYSTERESIS_THRESHOLD 7
byte  check_stops( uint16_t  mPotValue )
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24
	static byte previous_state = 0;
	led_off(LIMIT_MIN);
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>
	led_off(LIMIT_MAX);
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>

	if (previous_state==1)		// IN STOP 1
     8fe:	80 91 7d 04 	lds	r24, 0x047D
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	a1 f0       	breq	.+40     	; 0x92e <_Z11check_stopsj+0x42>
		else {
			led_on(LIMIT_MIN);
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	01 f1       	breq	.+64     	; 0x94a <_Z11check_stopsj+0x5e>
			led_on(LIMIT_MAX);		
			return previous_state;		
		}
	}
		
	if (mPotValue < EndPoint1.value)
     90a:	80 91 4c 04 	lds	r24, 0x044C
     90e:	90 91 4d 04 	lds	r25, 0x044D
     912:	c8 17       	cp	r28, r24
     914:	d9 07       	cpc	r29, r25
     916:	38 f1       	brcs	.+78     	; 0x966 <_Z11check_stopsj+0x7a>
	{
		led_on(LIMIT_MIN);
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
     918:	80 91 52 04 	lds	r24, 0x0452
     91c:	90 91 53 04 	lds	r25, 0x0453
     920:	8c 17       	cp	r24, r28
     922:	9d 07       	cpc	r25, r29
     924:	78 f1       	brcs	.+94     	; 0x984 <_Z11check_stopsj+0x98>
	{
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
     926:	80 e0       	ldi	r24, 0x00	; 0
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret
	led_off(LIMIT_MIN);
	led_off(LIMIT_MAX);

	if (previous_state==1)		// IN STOP 1
	{
		uint16_t hysteresis = EndPoint1.value + HYSTERESIS_THRESHOLD;
     92e:	80 91 4c 04 	lds	r24, 0x044C
     932:	90 91 4d 04 	lds	r25, 0x044D
     936:	07 96       	adiw	r24, 0x07	; 7
		if (mPotValue > hysteresis) {
     938:	8c 17       	cp	r24, r28
     93a:	9d 07       	cpc	r25, r29
     93c:	e8 f4       	brcc	.+58     	; 0x978 <_Z11check_stopsj+0x8c>
	}
	if (previous_state==2)		// IN STOP 2
	{
		uint16_t hysteresis = EndPoint2.value - HYSTERESIS_THRESHOLD;
		if (mPotValue < hysteresis) {
			previous_state = 0;
     93e:	10 92 7d 04 	sts	0x047D, r1
			return 0;
     942:	80 e0       	ldi	r24, 0x00	; 0
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret
			return previous_state;		
		}
	}
	if (previous_state==2)		// IN STOP 2
	{
		uint16_t hysteresis = EndPoint2.value - HYSTERESIS_THRESHOLD;
     94a:	80 91 52 04 	lds	r24, 0x0452
     94e:	90 91 53 04 	lds	r25, 0x0453
     952:	07 97       	sbiw	r24, 0x07	; 7
		if (mPotValue < hysteresis) {
     954:	c8 17       	cp	r28, r24
     956:	d9 07       	cpc	r29, r25
     958:	90 f3       	brcs	.-28     	; 0x93e <_Z11check_stopsj+0x52>
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MAX);		
     95a:	84 e0       	ldi	r24, 0x04	; 4
     95c:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
			return previous_state;		
     960:	80 91 7d 04 	lds	r24, 0x047D
     964:	e1 cf       	rjmp	.-62     	; 0x928 <_Z11check_stopsj+0x3c>
		}
	}
		
	if (mPotValue < EndPoint1.value)
	{
		led_on(LIMIT_MIN);
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
		previous_state = 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 7d 04 	sts	0x047D, r24
		led_on(LIMIT_MAX);
		previous_state = 2;
		return 2;
	}
	return 0;
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret
		if (mPotValue > hysteresis) {
			previous_state = 0;
			return 0;
		}
		else {
			led_on(LIMIT_MIN);
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
			return previous_state;		
     97e:	80 91 7d 04 	lds	r24, 0x047D
     982:	d2 cf       	rjmp	.-92     	; 0x928 <_Z11check_stopsj+0x3c>
		previous_state = 1;
		return 1;
	}
	if (mPotValue > EndPoint2.value)
	{
		led_on(LIMIT_MAX);
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
		previous_state = 2;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	80 93 7d 04 	sts	0x047D, r24
		return 2;
	}
	return 0;
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <_Z11check_stalljj>:
Return	:	0 = Normal Operating Range
			1 = Over current Left side
			2 = Over current Right side
***********************************************/
byte	check_stall( uint16_t  mLeftCurrent, uint16_t mRightCurrent )
{
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	eb 01       	movw	r28, r22
	if (mLeftCurrent > current_2_threshold)
     9a4:	e0 90 00 02 	lds	r14, 0x0200
     9a8:	f0 90 01 02 	lds	r15, 0x0201
     9ac:	00 91 02 02 	lds	r16, 0x0202
     9b0:	10 91 03 02 	lds	r17, 0x0203
     9b4:	bc 01       	movw	r22, r24
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     9be:	a8 01       	movw	r20, r16
     9c0:	97 01       	movw	r18, r14
     9c2:	0e 94 48 13 	call	0x2690	; 0x2690 <__gtsf2>
     9c6:	18 16       	cp	r1, r24
     9c8:	b4 f0       	brlt	.+44     	; 0x9f6 <_Z11check_stalljj+0x60>
		return 1;
	if (mRightCurrent > current_2_threshold)
     9ca:	be 01       	movw	r22, r28
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	c8 01       	movw	r24, r16
     9da:	b7 01       	movw	r22, r14
     9dc:	0e 94 a8 13 	call	0x2750	; 0x2750 <__ltsf2>
		return 2;
	return 0;
     9e0:	88 1f       	adc	r24, r24
     9e2:	88 27       	eor	r24, r24
     9e4:	88 1f       	adc	r24, r24
     9e6:	88 0f       	add	r24, r24
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	08 95       	ret
			2 = Over current Right side
***********************************************/
byte	check_stall( uint16_t  mLeftCurrent, uint16_t mRightCurrent )
{
	if (mLeftCurrent > current_2_threshold)
		return 1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
	if (mRightCurrent > current_2_threshold)
		return 2;
	return 0;
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <_Z19destination_reachedv>:
			1 = Exactly reached
			2 = Close over
			3 = Close under
***********************************************/
byte	  destination_reached(  )
{
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;
     a12:	80 91 6e 04 	lds	r24, 0x046E
     a16:	88 23       	and	r24, r24
     a18:	f9 f4       	brne	.+62     	; 0xa58 <_Z19destination_reachedv+0x52>

	if (Destination.position == PotSample[1])
     a1a:	60 91 71 04 	lds	r22, 0x0471
     a1e:	70 91 72 04 	lds	r23, 0x0472
     a22:	c0 91 f1 04 	lds	r28, 0x04F1
     a26:	d0 91 f2 04 	lds	r29, 0x04F2
     a2a:	6c 17       	cp	r22, r28
     a2c:	7d 07       	cpc	r23, r29
     a2e:	19 f1       	breq	.+70     	; 0xa76 <_Z19destination_reachedv+0x70>
		return 1;

	if (previous_state==2)
     a30:	80 91 7c 04 	lds	r24, 0x047C
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	39 f1       	breq	.+78     	; 0xa86 <_Z19destination_reachedv+0x80>
			return 0;
		}
		else return previous_state;		
	}

	if (previous_state==3)
     a38:	83 30       	cpi	r24, 0x03	; 3
     a3a:	f1 f1       	breq	.+124    	; 0xab8 <_Z19destination_reachedv+0xb2>
		}
		else return previous_state;
	}

	// Check for overage
	if (Destination.starting_position < Destination.position)
     a3c:	80 91 6f 04 	lds	r24, 0x046F
     a40:	90 91 70 04 	lds	r25, 0x0470
     a44:	86 17       	cp	r24, r22
     a46:	97 07       	cpc	r25, r23
     a48:	78 f4       	brcc	.+30     	; 0xa68 <_Z19destination_reachedv+0x62>
	{
		// Approaching upward:
		if (PotSample[1] > Destination.position) {
     a4a:	6c 17       	cp	r22, r28
     a4c:	7d 07       	cpc	r23, r29
     a4e:	20 f4       	brcc	.+8      	; 0xa58 <_Z19destination_reachedv+0x52>
			previous_state = 2;
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	80 93 7c 04 	sts	0x047C, r24
			return 2;		// reached upwardly
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <_Z19destination_reachedv+0x54>
		if ( PotSample[1] < Destination.position ) {
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
     a58:	80 e0       	ldi	r24, 0x00	; 0
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	08 95       	ret
			return 2;		// reached upwardly
		} 
	}
	else 
	{	// Approaching downward:
		if ( PotSample[1] < Destination.position ) {
     a68:	c6 17       	cp	r28, r22
     a6a:	d7 07       	cpc	r29, r23
     a6c:	a8 f7       	brcc	.-22     	; 0xa58 <_Z19destination_reachedv+0x52>
			previous_state = 3;
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	80 93 7c 04 	sts	0x047C, r24
			return 3;		// reached downwardly
     a74:	f2 cf       	rjmp	.-28     	; 0xa5a <_Z19destination_reachedv+0x54>
{
	static byte previous_state=0;	
	if (Destination.continuous)	return 0;

	if (Destination.position == PotSample[1])
		return 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret
	if (Destination.position == PotSample[1])
		return 1;

	if (previous_state==2)
	{
		uint16_t hysteresis = Destination.position - (0.1*Destination.position);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     a8e:	7b 01       	movw	r14, r22
     a90:	8c 01       	movw	r16, r24
     a92:	2d ec       	ldi	r18, 0xCD	; 205
     a94:	3c ec       	ldi	r19, 0xCC	; 204
     a96:	4c ec       	ldi	r20, 0xCC	; 204
     a98:	5d e3       	ldi	r21, 0x3D	; 61
     a9a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	c8 01       	movw	r24, r16
     aa4:	b7 01       	movw	r22, r14
     aa6:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
     aaa:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
		if (PotSample[1] < hysteresis) {
     aae:	c6 17       	cp	r28, r22
     ab0:	d7 07       	cpc	r29, r23
     ab2:	c8 f0       	brcs	.+50     	; 0xae6 <_Z19destination_reachedv+0xe0>
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	d1 cf       	rjmp	.-94     	; 0xa5a <_Z19destination_reachedv+0x54>
		else return previous_state;		
	}

	if (previous_state==3)
	{
		uint16_t hysteresis = Destination.position + (0.1*Destination.position);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     ac0:	7b 01       	movw	r14, r22
     ac2:	8c 01       	movw	r16, r24
     ac4:	2d ec       	ldi	r18, 0xCD	; 205
     ac6:	3c ec       	ldi	r19, 0xCC	; 204
     ac8:	4c ec       	ldi	r20, 0xCC	; 204
     aca:	5d e3       	ldi	r21, 0x3D	; 61
     acc:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c8 01       	movw	r24, r16
     ad6:	b7 01       	movw	r22, r14
     ad8:	0e 94 42 11 	call	0x2284	; 0x2284 <__addsf3>
     adc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
		if (PotSample[1] > hysteresis) {
     ae0:	6c 17       	cp	r22, r28
     ae2:	7d 07       	cpc	r23, r29
     ae4:	50 f4       	brcc	.+20     	; 0xafa <_Z19destination_reachedv+0xf4>
			previous_state = 0;
     ae6:	10 92 7c 04 	sts	0x047C, r1
			return 0;
     aea:	80 e0       	ldi	r24, 0x00	; 0
			previous_state = 3;
			return 3;		// reached downwardly
		}
	}
	return 0;	// Keep going!
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	08 95       	ret
	}

	if (previous_state==3)
	{
		uint16_t hysteresis = Destination.position + (0.1*Destination.position);
		if (PotSample[1] > hysteresis) {
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	ae cf       	rjmp	.-164    	; 0xa5a <_Z19destination_reachedv+0x54>

00000afe <__vector_1>:
/*  We'll be using INT0,INT1,INT7, and INT5 for the 4 encoder interrupts.
	These correspond to the Q1 inputs.
	
*/
ISR ( INT0_vect )
{
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
	const int e=3;
	byte Q2 = (ENCODER_4Q2_PIN & ENCODER_4Q2_MASK);
     b10:	89 b1       	in	r24, 0x09	; 9

	if (Q2==1) EncoderDirection[e] = CW;
	else       EncoderDirection[e] = CCW;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a0 e0       	ldi	r26, 0x00	; 0
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	80 93 8a 04 	sts	0x048A, r24
     b1e:	90 93 8b 04 	sts	0x048B, r25
     b22:	a0 93 8c 04 	sts	0x048C, r26
     b26:	b0 93 8d 04 	sts	0x048D, r27
	
	if (EncoderDirection[e] == CW)
		EncoderCount[e]++;		// never reset.  Holds _THE_ count from min stop.
	else 
		EncoderCount[e]--;
     b2a:	80 91 aa 04 	lds	r24, 0x04AA
     b2e:	90 91 ab 04 	lds	r25, 0x04AB
     b32:	a0 91 ac 04 	lds	r26, 0x04AC
     b36:	b0 91 ad 04 	lds	r27, 0x04AD
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	a1 09       	sbc	r26, r1
     b3e:	b1 09       	sbc	r27, r1
     b40:	80 93 aa 04 	sts	0x04AA, r24
     b44:	90 93 ab 04 	sts	0x04AB, r25
     b48:	a0 93 ac 04 	sts	0x04AC, r26
     b4c:	b0 93 ad 04 	sts	0x04AD, r27
}
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <__vector_2>:

ISR ( INT1_vect )
{
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
     b70:	af 93       	push	r26
     b72:	bf 93       	push	r27
	const int e=2;
	byte Q2 = (ENCODER_3Q2_PIN & ENCODER_3Q2_MASK);
     b74:	89 b1       	in	r24, 0x09	; 9

	if (Q2==1) EncoderDirection[e] = CW;
	else       EncoderDirection[e] = CCW;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	80 93 86 04 	sts	0x0486, r24
     b82:	90 93 87 04 	sts	0x0487, r25
     b86:	a0 93 88 04 	sts	0x0488, r26
     b8a:	b0 93 89 04 	sts	0x0489, r27
	
	if (EncoderDirection[e] == CW)
		EncoderCount[e]++;		// never reset.  Holds _THE_ count from min stop.
	else 
		EncoderCount[e]--;
     b8e:	80 91 a6 04 	lds	r24, 0x04A6
     b92:	90 91 a7 04 	lds	r25, 0x04A7
     b96:	a0 91 a8 04 	lds	r26, 0x04A8
     b9a:	b0 91 a9 04 	lds	r27, 0x04A9
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	a1 09       	sbc	r26, r1
     ba2:	b1 09       	sbc	r27, r1
     ba4:	80 93 a6 04 	sts	0x04A6, r24
     ba8:	90 93 a7 04 	sts	0x04A7, r25
     bac:	a0 93 a8 04 	sts	0x04A8, r26
     bb0:	b0 93 a9 04 	sts	0x04A9, r27
}
     bb4:	bf 91       	pop	r27
     bb6:	af 91       	pop	r26
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <__vector_8>:

ISR ( INT7_vect )
{
     bc6:	1f 92       	push	r1
     bc8:	0f 92       	push	r0
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
	const int e=3;
	byte Q2 = (ENCODER_1Q2_PIN & ENCODER_1Q2_MASK);
     bd8:	8c b1       	in	r24, 0x0c	; 12

	if (Q2==1) EncoderDirection[e] = CW;
	else       EncoderDirection[e] = CCW;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	80 93 8a 04 	sts	0x048A, r24
     be6:	90 93 8b 04 	sts	0x048B, r25
     bea:	a0 93 8c 04 	sts	0x048C, r26
     bee:	b0 93 8d 04 	sts	0x048D, r27
	
	if (EncoderDirection[e] == CW)
		EncoderCount[e]++;		// never reset.  Holds _THE_ count from min stop.
	else 
		EncoderCount[e]--;
     bf2:	80 91 aa 04 	lds	r24, 0x04AA
     bf6:	90 91 ab 04 	lds	r25, 0x04AB
     bfa:	a0 91 ac 04 	lds	r26, 0x04AC
     bfe:	b0 91 ad 04 	lds	r27, 0x04AD
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	a1 09       	sbc	r26, r1
     c06:	b1 09       	sbc	r27, r1
     c08:	80 93 aa 04 	sts	0x04AA, r24
     c0c:	90 93 ab 04 	sts	0x04AB, r25
     c10:	a0 93 ac 04 	sts	0x04AC, r26
     c14:	b0 93 ad 04 	sts	0x04AD, r27
}
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <__vector_6>:

ISR ( INT5_vect )
{
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	11 24       	eor	r1, r1
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
	const int e=3;
	byte Q2 = (ENCODER_2Q2_PIN & ENCODER_2Q2_MASK);
     c3c:	8c b1       	in	r24, 0x0c	; 12

	if (Q2==1) EncoderDirection[e] = CW;
	else       EncoderDirection[e] = CCW;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	80 93 8a 04 	sts	0x048A, r24
     c4a:	90 93 8b 04 	sts	0x048B, r25
     c4e:	a0 93 8c 04 	sts	0x048C, r26
     c52:	b0 93 8d 04 	sts	0x048D, r27
	
	if (EncoderDirection[e] == CW)
		EncoderCount[e]++;		// never reset.  Holds _THE_ count from min stop.
	else 
		EncoderCount[e]--;
     c56:	80 91 aa 04 	lds	r24, 0x04AA
     c5a:	90 91 ab 04 	lds	r25, 0x04AB
     c5e:	a0 91 ac 04 	lds	r26, 0x04AC
     c62:	b0 91 ad 04 	lds	r27, 0x04AD
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	a1 09       	sbc	r26, r1
     c6a:	b1 09       	sbc	r27, r1
     c6c:	80 93 aa 04 	sts	0x04AA, r24
     c70:	90 93 ab 04 	sts	0x04AB, r25
     c74:	a0 93 ac 04 	sts	0x04AC, r26
     c78:	b0 93 ad 04 	sts	0x04AD, r27
}
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <_Z12encoder_initv>:


void encoder_init()
{
	ENCODER_G1_DDR	&= ~(ENCODER_G1_MASK);
     c8e:	8d b1       	in	r24, 0x0d	; 13
     c90:	8f 70       	andi	r24, 0x0F	; 15
     c92:	8d b9       	out	0x0d, r24	; 13
	ENCODER_G1_PORT	|= 0xF0;		// pull-ups
     c94:	8e b1       	in	r24, 0x0e	; 14
     c96:	80 6f       	ori	r24, 0xF0	; 240
     c98:	8e b9       	out	0x0e, r24	; 14

	ENCODER_G2_DDR	&= ~(ENCODER_G2_MASK);
     c9a:	8a b1       	in	r24, 0x0a	; 10
     c9c:	8c 7c       	andi	r24, 0xCC	; 204
     c9e:	8a b9       	out	0x0a, r24	; 10
	ENCODER_G2_PORT	|= 0xF0;		// pull-ups
     ca0:	8b b1       	in	r24, 0x0b	; 11
     ca2:	80 6f       	ori	r24, 0xF0	; 240
     ca4:	8b b9       	out	0x0b, r24	; 11

	// Enable Interrupts on Rising Edges:
//	PCMSK0 |= ((1<<ENCODER_Q1) | (1<<ENCODER_Q2));	
	PCICR  |= 0x01;     //PCIE0;
     ca6:	e8 e6       	ldi	r30, 0x68	; 104
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	80 83       	st	Z, r24
	//EIFR   |= 0x01;   //INTF0;
	EIMSK |= 0x01;		//INT0
     cb0:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0x03;		// Rising edges.
     cb2:	e9 e6       	ldi	r30, 0x69	; 105
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	83 60       	ori	r24, 0x03	; 3
     cba:	80 83       	st	Z, r24
}
     cbc:	08 95       	ret

00000cbe <_Z17encoder_timeslicev>:

/* Call every ~20ms ==> 50hz */
// Counts per Second : 
void encoder_timeslice()
{	
     cbe:	2f 92       	push	r2
     cc0:	3f 92       	push	r3
     cc2:	4f 92       	push	r4
     cc4:	5f 92       	push	r5
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <_Z17encoder_timeslicev+0x26>
     ce4:	0f 92       	push	r0
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	for (int i=0; i<4; i++) {
     cea:	2e e9       	ldi	r18, 0x9E	; 158
     cec:	34 e0       	ldi	r19, 0x04	; 4
     cee:	5e e8       	ldi	r21, 0x8E	; 142
     cf0:	a5 2e       	mov	r10, r21
     cf2:	54 e0       	ldi	r21, 0x04	; 4
     cf4:	b5 2e       	mov	r11, r21
     cf6:	4e ea       	ldi	r20, 0xAE	; 174
     cf8:	c4 2e       	mov	r12, r20
     cfa:	44 e0       	ldi	r20, 0x04	; 4
     cfc:	d4 2e       	mov	r13, r20
     cfe:	9e eb       	ldi	r25, 0xBE	; 190
     d00:	e9 2e       	mov	r14, r25
     d02:	94 e0       	ldi	r25, 0x04	; 4
     d04:	f9 2e       	mov	r15, r25
     d06:	8e ec       	ldi	r24, 0xCE	; 206
     d08:	88 2e       	mov	r8, r24
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	98 2e       	mov	r9, r24
}

/* Call every ~20ms ==> 50hz */
// Counts per Second : 
void encoder_timeslice()
{	
     d0e:	37 01       	movw	r6, r14
     d10:	26 01       	movw	r4, r12
     d12:	15 01       	movw	r2, r10
	for (int i=0; i<4; i++) {
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	3a 83       	std	Y+2, r19	; 0x02
     d1a:	29 83       	std	Y+1, r18	; 0x01
     d1c:	9c 82       	std	Y+4, r9	; 0x04
     d1e:	8b 82       	std	Y+3, r8	; 0x03
     d20:	45 01       	movw	r8, r10
     d22:	56 01       	movw	r10, r12
     d24:	67 01       	movw	r12, r14
     d26:	79 01       	movw	r14, r18
		EncoderSpeed[i] 		= (EncoderCount[i] - EncoderCountPrev[i]) * 50;		// for 10ms task : *100
     d28:	f7 01       	movw	r30, r14
     d2a:	61 91       	ld	r22, Z+
     d2c:	71 91       	ld	r23, Z+
     d2e:	81 91       	ld	r24, Z+
     d30:	91 91       	ld	r25, Z+
     d32:	7f 01       	movw	r14, r30
     d34:	f1 01       	movw	r30, r2
     d36:	21 91       	ld	r18, Z+
     d38:	31 91       	ld	r19, Z+
     d3a:	41 91       	ld	r20, Z+
     d3c:	51 91       	ld	r21, Z+
     d3e:	1f 01       	movw	r2, r30
     d40:	62 1b       	sub	r22, r18
     d42:	73 0b       	sbc	r23, r19
     d44:	84 0b       	sbc	r24, r20
     d46:	95 0b       	sbc	r25, r21
     d48:	22 e3       	ldi	r18, 0x32	; 50
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__mulsi3>
     d54:	f2 01       	movw	r30, r4
     d56:	61 93       	st	Z+, r22
     d58:	71 93       	st	Z+, r23
     d5a:	81 93       	st	Z+, r24
     d5c:	91 93       	st	Z+, r25
     d5e:	2f 01       	movw	r4, r30
		EncoderAcceleration[i]  = (EncoderSpeed[i] - EncoderSpeedPrev[i]) * 50;		// counts per second per second
     d60:	f3 01       	movw	r30, r6
     d62:	21 91       	ld	r18, Z+
     d64:	31 91       	ld	r19, Z+
     d66:	41 91       	ld	r20, Z+
     d68:	51 91       	ld	r21, Z+
     d6a:	3f 01       	movw	r6, r30
     d6c:	62 1b       	sub	r22, r18
     d6e:	73 0b       	sbc	r23, r19
     d70:	84 0b       	sbc	r24, r20
     d72:	95 0b       	sbc	r25, r21
     d74:	22 e3       	ldi	r18, 0x32	; 50
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__mulsi3>
     d80:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     d84:	eb 81       	ldd	r30, Y+3	; 0x03
     d86:	fc 81       	ldd	r31, Y+4	; 0x04
     d88:	61 93       	st	Z+, r22
     d8a:	71 93       	st	Z+, r23
     d8c:	81 93       	st	Z+, r24
     d8e:	91 93       	st	Z+, r25
     d90:	fc 83       	std	Y+4, r31	; 0x04
     d92:	eb 83       	std	Y+3, r30	; 0x03

/* Call every ~20ms ==> 50hz */
// Counts per Second : 
void encoder_timeslice()
{	
	for (int i=0; i<4; i++) {
     d94:	0f 5f       	subi	r16, 0xFF	; 255
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	04 30       	cpi	r16, 0x04	; 4
     d9a:	11 05       	cpc	r17, r1
     d9c:	29 f6       	brne	.-118    	; 0xd28 <_Z17encoder_timeslicev+0x6a>
     d9e:	29 81       	ldd	r18, Y+1	; 0x01
     da0:	3a 81       	ldd	r19, Y+2	; 0x02
     da2:	76 01       	movw	r14, r12
     da4:	65 01       	movw	r12, r10
		EncoderSpeed[i] 		= (EncoderCount[i] - EncoderCountPrev[i]) * 50;		// for 10ms task : *100
		EncoderAcceleration[i]  = (EncoderSpeed[i] - EncoderSpeedPrev[i]) * 50;		// counts per second per second
	}
		
	for (int i=0; i<4; i++) {
		EncoderCountPrev[i] = EncoderCount[i];
     da6:	f9 01       	movw	r30, r18
     da8:	81 91       	ld	r24, Z+
     daa:	91 91       	ld	r25, Z+
     dac:	a1 91       	ld	r26, Z+
     dae:	b1 91       	ld	r27, Z+
     db0:	9f 01       	movw	r18, r30
     db2:	f4 01       	movw	r30, r8
     db4:	81 93       	st	Z+, r24
     db6:	91 93       	st	Z+, r25
     db8:	a1 93       	st	Z+, r26
     dba:	b1 93       	st	Z+, r27
     dbc:	4f 01       	movw	r8, r30
		EncoderSpeedPrev[i] = EncoderSpeed[i];
     dbe:	f6 01       	movw	r30, r12
     dc0:	81 91       	ld	r24, Z+
     dc2:	91 91       	ld	r25, Z+
     dc4:	a1 91       	ld	r26, Z+
     dc6:	b1 91       	ld	r27, Z+
     dc8:	6f 01       	movw	r12, r30
     dca:	f7 01       	movw	r30, r14
     dcc:	81 93       	st	Z+, r24
     dce:	91 93       	st	Z+, r25
     dd0:	a1 93       	st	Z+, r26
     dd2:	b1 93       	st	Z+, r27
     dd4:	7f 01       	movw	r14, r30
	for (int i=0; i<4; i++) {
		EncoderSpeed[i] 		= (EncoderCount[i] - EncoderCountPrev[i]) * 50;		// for 10ms task : *100
		EncoderAcceleration[i]  = (EncoderSpeed[i] - EncoderSpeedPrev[i]) * 50;		// counts per second per second
	}
		
	for (int i=0; i<4; i++) {
     dd6:	f4 e0       	ldi	r31, 0x04	; 4
     dd8:	2e 3a       	cpi	r18, 0xAE	; 174
     dda:	3f 07       	cpc	r19, r31
     ddc:	21 f7       	brne	.-56     	; 0xda6 <_Z17encoder_timeslicev+0xe8>
		EncoderCountPrev[i] = EncoderCount[i];
		EncoderSpeedPrev[i] = EncoderSpeed[i];
	}
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	7f 90       	pop	r7
     e00:	6f 90       	pop	r6
     e02:	5f 90       	pop	r5
     e04:	4f 90       	pop	r4
     e06:	3f 90       	pop	r3
     e08:	2f 90       	pop	r2
     e0a:	08 95       	ret

00000e0c <_Z17get_encoder_anglev>:
long int  get_encoder_angle()
{
	// Need to fix!  Verify stops are at least word size.  
	//return convert_to_angle( EncoderCount );
	return 0;
}
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	cb 01       	movw	r24, r22
     e12:	08 95       	ret

00000e14 <_Z11OS_Dispatchv>:
{	
	if ((OS_Event_TIC_Counter % 5) == 0)	// 5ms tasks
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
     e14:	20 91 02 05 	lds	r18, 0x0502
     e18:	30 91 03 05 	lds	r19, 0x0503
     e1c:	c9 01       	movw	r24, r18
     e1e:	6a e0       	ldi	r22, 0x0A	; 10
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__divmodhi4>
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	c9 f0       	breq	.+50     	; 0xe5c <_Z11OS_Dispatchv+0x48>
	{	
	}
	if ((OS_Event_TIC_Counter % 50) == 0)	// 50ms tasks
	{
	}
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
     e2a:	c9 01       	movw	r24, r18
     e2c:	64 e6       	ldi	r22, 0x64	; 100
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__divmodhi4>
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	61 f4       	brne	.+24     	; 0xe50 <_Z11OS_Dispatchv+0x3c>
	{
		if (t) {
     e38:	80 91 e1 04 	lds	r24, 0x04E1
     e3c:	90 91 e2 04 	lds	r25, 0x04E2
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	39 f4       	brne	.+14     	; 0xe52 <_Z11OS_Dispatchv+0x3e>
			//led_on(3);
			//RESET_LED_4();
			t = 0;
		} else {
			//led_off(3);
			t = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	90 93 e2 04 	sts	0x04E2, r25
     e4c:	80 93 e1 04 	sts	0x04E1, r24
     e50:	08 95       	ret
	if ((OS_Event_TIC_Counter % 100) == 0)	// 100ms tasks
	{
		if (t) {
			//led_on(3);
			//RESET_LED_4();
			t = 0;
     e52:	10 92 e2 04 	sts	0x04E2, r1
     e56:	10 92 e1 04 	sts	0x04E1, r1
     e5a:	08 95       	ret
	{
		//FS_Timeslice();
	}
	if ((OS_Event_TIC_Counter % 10) == 0) 	// 10ms tasks
	{		
		motor_timeslice_10ms();		
     e5c:	0e 94 87 01 	call	0x30e	; 0x30e <_Z20motor_timeslice_10msv>
     e60:	20 91 02 05 	lds	r18, 0x0502
     e64:	30 91 03 05 	lds	r19, 0x0503
     e68:	e0 cf       	rjmp	.-64     	; 0xe2a <_Z11OS_Dispatchv+0x16>

00000e6a <__vector_29>:
byte next_channel = 0;
byte sample_counter = 0;
#define NUM_AVGS 10

ISR ( ADC_vect )
{
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	0b b6       	in	r0, 0x3b	; 59
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
	if (sample_counter++ > NUM_AVGS) {
     e9c:	80 91 f8 04 	lds	r24, 0x04F8
     ea0:	98 2f       	mov	r25, r24
     ea2:	9f 5f       	subi	r25, 0xFF	; 255
     ea4:	90 93 f8 04 	sts	0x04F8, r25
     ea8:	8b 30       	cpi	r24, 0x0B	; 11
     eaa:	10 f0       	brcs	.+4      	; 0xeb0 <__vector_29+0x46>
		sample_counter=0;
     eac:	10 92 f8 04 	sts	0x04F8, r1
	}
	uint16_t result = ADCL;
     eb0:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
     eb4:	90 91 79 00 	lds	r25, 0x0079
     eb8:	d9 2f       	mov	r29, r25
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	c9 2f       	mov	r28, r25
     ebe:	c8 0f       	add	r28, r24
     ec0:	d1 1d       	adc	r29, r1
	switch(next_channel)				// Round Robin style measurements
     ec2:	80 91 f7 04 	lds	r24, 0x04F7
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	09 f4       	brne	.+2      	; 0xecc <__vector_29+0x62>
     eca:	65 c0       	rjmp	.+202    	; 0xf96 <__vector_29+0x12c>
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	08 f4       	brcc	.+2      	; 0xed2 <__vector_29+0x68>
     ed0:	52 c0       	rjmp	.+164    	; 0xf76 <__vector_29+0x10c>
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	69 f5       	brne	.+90     	; 0xf30 <__vector_29+0xc6>
			next_channel = 2;
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
			ADCSRA |= (1<<ADSC);			// Start conversion
			break;
			
	case 2:	RightCurrentSample = result;	
     ed6:	d0 93 ee 04 	sts	0x04EE, r29
     eda:	c0 93 ed 04 	sts	0x04ED, r28
			RightCurrentSampleAvg = (gamma*RightCurrentSampleAvg) + alpha*((float)RightCurrentSample);
     ede:	60 91 e7 04 	lds	r22, 0x04E7
     ee2:	70 91 e8 04 	lds	r23, 0x04E8
     ee6:	80 91 e9 04 	lds	r24, 0x04E9
     eea:	90 91 ea 04 	lds	r25, 0x04EA
     eee:	2d ec       	ldi	r18, 0xCD	; 205
     ef0:	3c ec       	ldi	r19, 0xCC	; 204
     ef2:	4c e4       	ldi	r20, 0x4C	; 76
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     efa:	7b 01       	movw	r14, r22
     efc:	8c 01       	movw	r16, r24
     efe:	be 01       	movw	r22, r28
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     f08:	2d ec       	ldi	r18, 0xCD	; 205
     f0a:	3c ec       	ldi	r19, 0xCC	; 204
     f0c:	4c e4       	ldi	r20, 0x4C	; 76
     f0e:	5e e3       	ldi	r21, 0x3E	; 62
     f10:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     f14:	9b 01       	movw	r18, r22
     f16:	ac 01       	movw	r20, r24
     f18:	c8 01       	movw	r24, r16
     f1a:	b7 01       	movw	r22, r14
     f1c:	0e 94 42 11 	call	0x2284	; 0x2284 <__addsf3>
     f20:	60 93 e7 04 	sts	0x04E7, r22
     f24:	70 93 e8 04 	sts	0x04E8, r23
     f28:	80 93 e9 04 	sts	0x04E9, r24
     f2c:	90 93 ea 04 	sts	0x04EA, r25
			ADMUX = POT_MUX;		// Select POT	
			ADCSRA |= (1<<ADSC);	// Start conversion
			break;

	default: 			
			next_channel = 0;
     f30:	10 92 f7 04 	sts	0x04F7, r1
			ADMUX = POT_MUX;		// Select POT	
     f34:	82 e4       	ldi	r24, 0x42	; 66
     f36:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);	// Start conversion
     f3a:	80 91 7a 00 	lds	r24, 0x007A
     f3e:	80 64       	ori	r24, 0x40	; 64
     f40:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
	// Clear IF automatically?	
}
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	0f 90       	pop	r0
     f6a:	0b be       	out	0x3b, r0	; 59
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti
	}
	uint16_t result = ADCL;
	result      += (ADCH<<8);
	switch(next_channel)				// Round Robin style measurements
	{
	case 0:	PotSample[1] = result;
     f76:	d0 93 f2 04 	sts	0x04F2, r29
     f7a:	c0 93 f1 04 	sts	0x04F1, r28
			next_channel = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 f7 04 	sts	0x04F7, r24
			ADMUX = CURRSENSE_LEFT_MUX;		// Select Left Current Read
     f84:	88 e4       	ldi	r24, 0x48	; 72
     f86:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
     f8a:	80 91 7a 00 	lds	r24, 0x007A
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	80 93 7a 00 	sts	0x007A, r24
			break;
     f94:	d7 cf       	rjmp	.-82     	; 0xf44 <__vector_29+0xda>
			
	case 1:	LeftCurrentSample = result;
     f96:	d0 93 ec 04 	sts	0x04EC, r29
     f9a:	c0 93 eb 04 	sts	0x04EB, r28
			LeftCurrentSampleAvg = (gamma*LeftCurrentSampleAvg) + alpha*((float)LeftCurrentSample);
     f9e:	60 91 e3 04 	lds	r22, 0x04E3
     fa2:	70 91 e4 04 	lds	r23, 0x04E4
     fa6:	80 91 e5 04 	lds	r24, 0x04E5
     faa:	90 91 e6 04 	lds	r25, 0x04E6
     fae:	2d ec       	ldi	r18, 0xCD	; 205
     fb0:	3c ec       	ldi	r19, 0xCC	; 204
     fb2:	4c e4       	ldi	r20, 0x4C	; 76
     fb4:	5f e3       	ldi	r21, 0x3F	; 63
     fb6:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     fba:	7b 01       	movw	r14, r22
     fbc:	8c 01       	movw	r16, r24
     fbe:	be 01       	movw	r22, r28
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     fc8:	2d ec       	ldi	r18, 0xCD	; 205
     fca:	3c ec       	ldi	r19, 0xCC	; 204
     fcc:	4c e4       	ldi	r20, 0x4C	; 76
     fce:	5e e3       	ldi	r21, 0x3E	; 62
     fd0:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
     fd4:	9b 01       	movw	r18, r22
     fd6:	ac 01       	movw	r20, r24
     fd8:	c8 01       	movw	r24, r16
     fda:	b7 01       	movw	r22, r14
     fdc:	0e 94 42 11 	call	0x2284	; 0x2284 <__addsf3>
     fe0:	60 93 e3 04 	sts	0x04E3, r22
     fe4:	70 93 e4 04 	sts	0x04E4, r23
     fe8:	80 93 e5 04 	sts	0x04E5, r24
     fec:	90 93 e6 04 	sts	0x04E6, r25
			next_channel = 2;
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	80 93 f7 04 	sts	0x04F7, r24
			ADMUX = CURRSENSE_RIGHT_MUX;	// Select Right Current Read
     ff6:	89 e4       	ldi	r24, 0x49	; 73
     ff8:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADSC);			// Start conversion
     ffc:	80 91 7a 00 	lds	r24, 0x007A
    1000:	80 64       	ori	r24, 0x40	; 64
    1002:	80 93 7a 00 	sts	0x007A, r24
			break;
    1006:	9e cf       	rjmp	.-196    	; 0xf44 <__vector_29+0xda>

00001008 <_Z9adc_sleepv>:
***********************************************/
/* To SAVE Power - Shut down the ADC block */
void adc_sleep()
{
	// Clear ADEN bit
	ADCSRA &= ~ADEN;
    1008:	ea e7       	ldi	r30, 0x7A	; 122
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	88 7f       	andi	r24, 0xF8	; 248
    1010:	80 83       	st	Z, r24
}
    1012:	08 95       	ret

00001014 <_Z8adc_initv>:
/* Set up the ADC.  Needed for the current sense and pot	*/
void adc_init()
{	
	// Enable the ADC  (ADEN in ADCSRA)
	byte reg = (1<<ADEN) | (1<<ADIE) | (1<<ADIF) | 0x03;
	ADCSRA = reg;  //0x83; 
    1014:	8b e9       	ldi	r24, 0x9B	; 155
    1016:	80 93 7a 00 	sts	0x007A, r24

	//	Digital Input Disable (reduce power consumption)
	//  We are using ADC2, ADC8, ADC9 :
	DIDR0  |= (1<<ADC2D);
    101a:	ee e7       	ldi	r30, 0x7E	; 126
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	84 60       	ori	r24, 0x04	; 4
    1022:	80 83       	st	Z, r24
	DIDR1  |= ((1<<ADC8D) | (1<<ADC9D));
    1024:	ef e7       	ldi	r30, 0x7F	; 127
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	83 60       	ori	r24, 0x03	; 3
    102c:	80 83       	st	Z, r24
	// HighSpeed Mode & AREF Enable internal circuitry.
//	ADCSRB = (1<<ADHSM) | (1<<AREFEN);

	// REFSn bits in ADMUX  (external AREF voltage not connected!)	
	// SELECT THE Channel
	ADMUX = POT_MUX;
    102e:	82 e4       	ldi	r24, 0x42	; 66
    1030:	80 93 7c 00 	sts	0x007C, r24
}
    1034:	08 95       	ret

00001036 <_Z14start_samplingv>:
Return	:	The motor position in degrees * 10
***********************************************/
void start_sampling()
{
	// START ADC CONVERSION:
	ADMUX = POT_MUX;		// Select POT	
    1036:	82 e4       	ldi	r24, 0x42	; 66
    1038:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	// Start conversion
    103c:	ea e7       	ldi	r30, 0x7A	; 122
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 64       	ori	r24, 0x40	; 64
    1044:	80 83       	st	Z, r24

	// AUTO TRIGGERING MODE (not using)
	// ADCSRA |= ADATE;
}
    1046:	08 95       	ret

00001048 <_Z36calc_load_current_from_sense_currentj>:
float Ioffset = 0.0;

float calc_load_current_from_sense_current( uint16_t mIsense )
{
	// ILoad = dK_ilis(Isense - Ioffset)
	return dK * (mIsense - Ioffset);	
    1048:	bc 01       	movw	r22, r24
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    1052:	20 91 f9 04 	lds	r18, 0x04F9
    1056:	30 91 fa 04 	lds	r19, 0x04FA
    105a:	40 91 fb 04 	lds	r20, 0x04FB
    105e:	50 91 fc 04 	lds	r21, 0x04FC
    1062:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1066:	20 91 04 02 	lds	r18, 0x0204
    106a:	30 91 05 02 	lds	r19, 0x0205
    106e:	40 91 06 02 	lds	r20, 0x0206
    1072:	50 91 07 02 	lds	r21, 0x0207
    1076:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
}
    107a:	08 95       	ret

0000107c <_Z15convert_to_ampsj>:
void convert_to_amps( uint16_t mAmps )
{
	
}
    107c:	08 95       	ret

0000107e <_Z17read_current_leftv>:
	on to calculate load current.
***********************************************/
uint16_t read_current_left()
{	
	// SELECT AND START CONVERSION:
	ADMUX  = CURRSENSE_LEFT_MUX;
    107e:	88 e4       	ldi	r24, 0x48	; 72
    1080:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    1084:	80 91 7a 00 	lds	r24, 0x007A
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    108e:	80 91 7a 00 	lds	r24, 0x007A
    1092:	86 fd       	sbrc	r24, 6
    1094:	fc cf       	rjmp	.-8      	; 0x108e <_Z17read_current_leftv+0x10>
	
	// PICK UP RESULT:
	uint16_t result = ADCL;
    1096:	80 91 78 00 	lds	r24, 0x0078
	result += (ADCH<<8);
    109a:	90 91 79 00 	lds	r25, 0x0079
    109e:	39 2f       	mov	r19, r25
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	28 0f       	add	r18, r24
    10a4:	31 1d       	adc	r19, r1
	LeftCurrentSample = result;
    10a6:	30 93 ec 04 	sts	0x04EC, r19
    10aa:	20 93 eb 04 	sts	0x04EB, r18
	return result;
}
    10ae:	c9 01       	movw	r24, r18
    10b0:	08 95       	ret

000010b2 <_Z18read_current_rightv>:
Return	:	The motor position in degrees * 10
***********************************************/
uint16_t read_current_right()
{
	// SELECT AND START CONVERSION:
	ADMUX = CURRSENSE_RIGHT_MUX;
    10b2:	89 e4       	ldi	r24, 0x49	; 73
    10b4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);				// Start Conversion
    10b8:	80 91 7a 00 	lds	r24, 0x007A
    10bc:	80 64       	ori	r24, 0x40	; 64
    10be:	80 93 7a 00 	sts	0x007A, r24

	// WAIT FOR RESULT:
	while ( (ADCSRA & (1<<ADSC)) > 0) {};
    10c2:	80 91 7a 00 	lds	r24, 0x007A
    10c6:	86 fd       	sbrc	r24, 6
    10c8:	fc cf       	rjmp	.-8      	; 0x10c2 <_Z18read_current_rightv+0x10>
	
	// PICK UP RESULT:
	uint16_t result = ADCL;
    10ca:	80 91 78 00 	lds	r24, 0x0078
	result      += (ADCH<<8);
    10ce:	90 91 79 00 	lds	r25, 0x0079
    10d2:	39 2f       	mov	r19, r25
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	28 0f       	add	r18, r24
    10d8:	31 1d       	adc	r19, r1
	RightCurrentSample = result;		
    10da:	30 93 ee 04 	sts	0x04EE, r19
    10de:	20 93 ed 04 	sts	0x04ED, r18
	return result;
}
    10e2:	c9 01       	movw	r24, r18
    10e4:	08 95       	ret

000010e6 <_Z9init_ledsv>:
	DDR will always be output for both and is set in the pwm_init() code.		
*/
void init_leds()
{
	// OUTPUTS:
	System_LED_Control.systemMode = SYSTEM_LED_MODE_DEVICE;
    10e6:	10 92 fe 04 	sts	0x04FE, r1
	System_LED_Control.pattern    = 0;
    10ea:	10 92 fd 04 	sts	0x04FD, r1

	// DDR =1 ==> output for Atmel AVRs

	LED_1_DDR |= (1<<LED_1);
    10ee:	80 9a       	sbi	0x10, 0	; 16
	LED_2_DDR |= (1<<LED_2);
    10f0:	81 9a       	sbi	0x10, 1	; 16
	LED_3_DDR |= (1<<LED_3);
    10f2:	82 9a       	sbi	0x10, 2	; 16
	LED_4_DDR |= (1<<LED_4);
    10f4:	83 9a       	sbi	0x10, 3	; 16

  	LED_1_OFF();
    10f6:	88 98       	cbi	0x11, 0	; 17
	LED_2_OFF();
    10f8:	89 98       	cbi	0x11, 1	; 17
	LED_3_OFF();
    10fa:	8a 98       	cbi	0x11, 2	; 17
	LED_4_OFF();
    10fc:	8b 98       	cbi	0x11, 3	; 17
}
    10fe:	08 95       	ret

00001100 <_Z6led_onh>:


void led_on(uint8_t mindex)
{
	//if (System_LED_Control.systemMode)	return;		// no operations in system mode!
	switch(mindex)
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	69 f0       	breq	.+26     	; 0x111e <_Z6led_onh+0x1e>
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	28 f0       	brcs	.+10     	; 0x1112 <_Z6led_onh+0x12>
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	59 f0       	breq	.+22     	; 0x1122 <_Z6led_onh+0x22>
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	29 f0       	breq	.+10     	; 0x111a <_Z6led_onh+0x1a>
    1110:	08 95       	ret
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	e9 f7       	brne	.-6      	; 0x1110 <_Z6led_onh+0x10>
	{
		case 1:  LED_1_ON();  break;
    1116:	88 9a       	sbi	0x11, 0	; 17
    1118:	08 95       	ret
		case 2:  LED_2_ON();  break;
		case 3:  LED_3_ON();  break;
		case 4:  LED_4_ON();  break;
    111a:	8b 9a       	sbi	0x11, 3	; 17
    111c:	08 95       	ret
{
	//if (System_LED_Control.systemMode)	return;		// no operations in system mode!
	switch(mindex)
	{
		case 1:  LED_1_ON();  break;
		case 2:  LED_2_ON();  break;
    111e:	89 9a       	sbi	0x11, 1	; 17
    1120:	08 95       	ret
		case 3:  LED_3_ON();  break;
    1122:	8a 9a       	sbi	0x11, 2	; 17
    1124:	08 95       	ret

00001126 <_Z7led_offh>:
	}
}

void led_off(uint8_t mindex)
{
  switch(mindex)
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	69 f0       	breq	.+26     	; 0x1144 <_Z7led_offh+0x1e>
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	28 f0       	brcs	.+10     	; 0x1138 <_Z7led_offh+0x12>
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	59 f0       	breq	.+22     	; 0x1148 <_Z7led_offh+0x22>
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	29 f0       	breq	.+10     	; 0x1140 <_Z7led_offh+0x1a>
    1136:	08 95       	ret
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	e9 f7       	brne	.-6      	; 0x1136 <_Z7led_offh+0x10>
  {
   case 1:  LED_1_OFF();  break;
    113c:	88 98       	cbi	0x11, 0	; 17
    113e:	08 95       	ret
   case 2:  LED_2_OFF();  break;
   case 3:  LED_3_OFF();  break;
   case 4:  LED_4_OFF();  break;
    1140:	8b 98       	cbi	0x11, 3	; 17
    1142:	08 95       	ret
void led_off(uint8_t mindex)
{
  switch(mindex)
  {
   case 1:  LED_1_OFF();  break;
   case 2:  LED_2_OFF();  break;
    1144:	89 98       	cbi	0x11, 1	; 17
    1146:	08 95       	ret
   case 3:  LED_3_OFF();  break;
    1148:	8a 98       	cbi	0x11, 2	; 17
    114a:	08 95       	ret

0000114c <_Z7set_ledhh>:

void set_led( uint8_t mindex, uint8_t value )
{
    //if (System_LED_Control.systemMode)	return;		// no operations in system mode!
	//protected_set_led( mindex, value );
}
    114c:	08 95       	ret

0000114e <_Z22protected_show_uint8_thh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void protected_show_uint8_t( uint8_t result, uint8_t mHiNibble )
{
  if (mHiNibble) {
    114e:	66 23       	and	r22, r22
    1150:	69 f0       	breq	.+26     	; 0x116c <_Z22protected_show_uint8_thh+0x1e>
	  if ((result & 0x80)>0)  LED_4_ON()  else LED_4_OFF();
    1152:	87 ff       	sbrs	r24, 7
    1154:	20 c0       	rjmp	.+64     	; 0x1196 <_Z22protected_show_uint8_thh+0x48>
    1156:	8b 9a       	sbi	0x11, 3	; 17
	  if ((result & 0x40)>0)  LED_3_ON()  else LED_3_OFF();
    1158:	86 ff       	sbrs	r24, 6
    115a:	20 c0       	rjmp	.+64     	; 0x119c <_Z22protected_show_uint8_thh+0x4e>
    115c:	8a 9a       	sbi	0x11, 2	; 17
	  if ((result & 0x20)>0)  LED_2_ON()  else LED_2_OFF();
    115e:	85 ff       	sbrs	r24, 5
    1160:	20 c0       	rjmp	.+64     	; 0x11a2 <_Z22protected_show_uint8_thh+0x54>
    1162:	89 9a       	sbi	0x11, 1	; 17
	  if ((result & 0x10)>0)  LED_1_ON()  else LED_1_OFF();
    1164:	84 fd       	sbrc	r24, 4
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <_Z22protected_show_uint8_thh+0x34>
  } else {
	  if ((result & 0x08)>0)  LED_4_ON()  else LED_4_OFF();
	  if ((result & 0x04)>0)  LED_3_ON()  else LED_3_OFF();
	  if ((result & 0x02)>0)  LED_2_ON()  else LED_2_OFF();
	  if ((result & 0x01)>0)  LED_1_ON()  else LED_1_OFF();
    1168:	88 98       	cbi	0x11, 0	; 17
    116a:	08 95       	ret
	  if ((result & 0x80)>0)  LED_4_ON()  else LED_4_OFF();
	  if ((result & 0x40)>0)  LED_3_ON()  else LED_3_OFF();
	  if ((result & 0x20)>0)  LED_2_ON()  else LED_2_OFF();
	  if ((result & 0x10)>0)  LED_1_ON()  else LED_1_OFF();
  } else {
	  if ((result & 0x08)>0)  LED_4_ON()  else LED_4_OFF();
    116c:	83 ff       	sbrs	r24, 3
    116e:	0b c0       	rjmp	.+22     	; 0x1186 <_Z22protected_show_uint8_thh+0x38>
    1170:	8b 9a       	sbi	0x11, 3	; 17
	  if ((result & 0x04)>0)  LED_3_ON()  else LED_3_OFF();
    1172:	82 ff       	sbrs	r24, 2
    1174:	0b c0       	rjmp	.+22     	; 0x118c <_Z22protected_show_uint8_thh+0x3e>
    1176:	8a 9a       	sbi	0x11, 2	; 17
	  if ((result & 0x02)>0)  LED_2_ON()  else LED_2_OFF();
    1178:	81 ff       	sbrs	r24, 1
    117a:	0b c0       	rjmp	.+22     	; 0x1192 <_Z22protected_show_uint8_thh+0x44>
    117c:	89 9a       	sbi	0x11, 1	; 17
	  if ((result & 0x01)>0)  LED_1_ON()  else LED_1_OFF();
    117e:	80 ff       	sbrs	r24, 0
    1180:	f3 cf       	rjmp	.-26     	; 0x1168 <_Z22protected_show_uint8_thh+0x1a>
    1182:	88 9a       	sbi	0x11, 0	; 17
    1184:	08 95       	ret
	  if ((result & 0x80)>0)  LED_4_ON()  else LED_4_OFF();
	  if ((result & 0x40)>0)  LED_3_ON()  else LED_3_OFF();
	  if ((result & 0x20)>0)  LED_2_ON()  else LED_2_OFF();
	  if ((result & 0x10)>0)  LED_1_ON()  else LED_1_OFF();
  } else {
	  if ((result & 0x08)>0)  LED_4_ON()  else LED_4_OFF();
    1186:	8b 98       	cbi	0x11, 3	; 17
	  if ((result & 0x04)>0)  LED_3_ON()  else LED_3_OFF();
    1188:	82 fd       	sbrc	r24, 2
    118a:	f5 cf       	rjmp	.-22     	; 0x1176 <_Z22protected_show_uint8_thh+0x28>
    118c:	8a 98       	cbi	0x11, 2	; 17
	  if ((result & 0x02)>0)  LED_2_ON()  else LED_2_OFF();
    118e:	81 fd       	sbrc	r24, 1
    1190:	f5 cf       	rjmp	.-22     	; 0x117c <_Z22protected_show_uint8_thh+0x2e>
    1192:	89 98       	cbi	0x11, 1	; 17
    1194:	f4 cf       	rjmp	.-24     	; 0x117e <_Z22protected_show_uint8_thh+0x30>
				FALSE => show the lower nibble
********************************************************************/
void protected_show_uint8_t( uint8_t result, uint8_t mHiNibble )
{
  if (mHiNibble) {
	  if ((result & 0x80)>0)  LED_4_ON()  else LED_4_OFF();
    1196:	8b 98       	cbi	0x11, 3	; 17
	  if ((result & 0x40)>0)  LED_3_ON()  else LED_3_OFF();
    1198:	86 fd       	sbrc	r24, 6
    119a:	e0 cf       	rjmp	.-64     	; 0x115c <_Z22protected_show_uint8_thh+0xe>
    119c:	8a 98       	cbi	0x11, 2	; 17
	  if ((result & 0x20)>0)  LED_2_ON()  else LED_2_OFF();
    119e:	85 fd       	sbrc	r24, 5
    11a0:	e0 cf       	rjmp	.-64     	; 0x1162 <_Z22protected_show_uint8_thh+0x14>
    11a2:	89 98       	cbi	0x11, 1	; 17
    11a4:	df cf       	rjmp	.-66     	; 0x1164 <_Z22protected_show_uint8_thh+0x16>

000011a6 <_Z17protected_set_ledhh>:
}

/* Not to be called by any user outside of this file! */
void protected_set_led( uint8_t mindex, uint8_t value )
{
	if (value)
    11a6:	66 23       	and	r22, r22
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <_Z17protected_set_ledhh+0xa>
		led_on (mindex);
	else
		led_off(mindex);
    11aa:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>
    11ae:	08 95       	ret

/* Not to be called by any user outside of this file! */
void protected_set_led( uint8_t mindex, uint8_t value )
{
	if (value)
		led_on (mindex);
    11b0:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
    11b4:	08 95       	ret

000011b6 <_Z11strobe_ledsh>:
uint8_t strobe_leds( uint8_t mOn )
{
	static uint8_t counter= STROBE_SPEED;	
	static uint8_t i=1;

	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    11b6:	90 91 fe 04 	lds	r25, 0x04FE
    11ba:	99 23       	and	r25, r25
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <_Z11strobe_ledsh+0x10>
    11be:	92 30       	cpi	r25, 0x02	; 2
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <_Z11strobe_ledsh+0x10>
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	08 95       	ret
    11c6:	90 91 0b 02 	lds	r25, 0x020B
    11ca:	29 2f       	mov	r18, r25
    11cc:	21 50       	subi	r18, 0x01	; 1
    11ce:	20 93 0b 02 	sts	0x020B, r18
    11d2:	99 23       	and	r25, r25
    11d4:	b1 f7       	brne	.-20     	; 0x11c2 <_Z11strobe_ledsh+0xc>
		counter = STROBE_SPEED;
    11d6:	9a e0       	ldi	r25, 0x0A	; 10
    11d8:	90 93 0b 02 	sts	0x020B, r25
		if (mOn) led_on( i ); else led_off( i );
    11dc:	88 23       	and	r24, r24
    11de:	79 f0       	breq	.+30     	; 0x11fe <_Z11strobe_ledsh+0x48>
    11e0:	80 91 0a 02 	lds	r24, 0x020A
    11e4:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z6led_onh>
		i++;
    11e8:	80 91 0a 02 	lds	r24, 0x020A
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	80 93 0a 02 	sts	0x020A, r24
		if (i>=5)  { i=1; return TRUE; }
    11f2:	85 30       	cpi	r24, 0x05	; 5
    11f4:	78 f0       	brcs	.+30     	; 0x1214 <_Z11strobe_ledsh+0x5e>
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	80 93 0a 02 	sts	0x020A, r24
    11fc:	08 95       	ret
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_STROBE))
	{
		if (counter-->0)	return FALSE;
		counter = STROBE_SPEED;
		if (mOn) led_on( i ); else led_off( i );
    11fe:	80 91 0a 02 	lds	r24, 0x020A
    1202:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z7led_offh>
		i++;
    1206:	80 91 0a 02 	lds	r24, 0x020A
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	80 93 0a 02 	sts	0x020A, r24
		if (i>=5)  { i=1; return TRUE; }
    1210:	85 30       	cpi	r24, 0x05	; 5
    1212:	88 f7       	brcc	.-30     	; 0x11f6 <_Z11strobe_ledsh+0x40>
	}
	return FALSE;
    1214:	80 e0       	ldi	r24, 0x00	; 0
}
    1216:	08 95       	ret

00001218 <_Z12show_uint8_thh>:
	mHiNibble : TRUE => show the upper nibble
				FALSE => show the lower nibble
********************************************************************/
void show_uint8_t( uint8_t result, uint8_t mHiNibble )
{
	if (System_LED_Control.systemMode)	{
    1218:	90 91 fe 04 	lds	r25, 0x04FE
    121c:	99 23       	and	r25, r25
    121e:	11 f0       	breq	.+4      	; 0x1224 <_Z12show_uint8_thh+0xc>
	  result = System_LED_Control.pattern;		// we override the value with the system requested pattern.
    1220:	80 91 fd 04 	lds	r24, 0x04FD
	}
    protected_show_uint8_t( result, mHiNibble );
    1224:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z22protected_show_uint8_thh>
}
    1228:	08 95       	ret

0000122a <_Z18show_result_toggleh>:

uint8_t hi_low = 1;
void show_result_toggle( uint8_t mresult )
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
    122a:	90 91 fe 04 	lds	r25, 0x04FE
    122e:	99 23       	and	r25, r25
    1230:	19 f0       	breq	.+6      	; 0x1238 <_Z18show_result_toggleh+0xe>
    1232:	93 30       	cpi	r25, 0x03	; 3
    1234:	09 f0       	breq	.+2      	; 0x1238 <_Z18show_result_toggleh+0xe>
    1236:	08 95       	ret
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
    1238:	90 91 08 02 	lds	r25, 0x0208
    123c:	99 23       	and	r25, r25
    123e:	59 f4       	brne	.+22     	; 0x1256 <_Z18show_result_toggleh+0x2c>
		  protected_show_uint8_t( mresult, 1 );
		else 
		  protected_show_uint8_t( mresult, 0 );
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z22protected_show_uint8_thh>
		hi_low = ! hi_low;		// toggle
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 91 08 02 	lds	r25, 0x0208
    124c:	91 11       	cpse	r25, r1
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	80 93 08 02 	sts	0x0208, r24
    1254:	08 95       	ret
{
	if ((System_LED_Control.systemMode == SYSTEM_LED_MODE_DEVICE) ||
		(System_LED_Control.systemMode == SYSTEM_LED_MODE_MYINSTANCE))
	{	// no operations in system mode!
		if (hi_low)
		  protected_show_uint8_t( mresult, 1 );
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z22protected_show_uint8_thh>
    125c:	f4 cf       	rjmp	.-24     	; 0x1246 <_Z18show_result_toggleh+0x1c>

0000125e <_Z19led_timeslice_100msv>:
uint8_t    LED_state = 0;

void led_timeslice_100ms()
{
	static uint8_t counter = 1;
	switch (System_LED_Control.systemMode)
    125e:	80 91 fe 04 	lds	r24, 0x04FE
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	b9 f0       	breq	.+46     	; 0x1294 <_Z19led_timeslice_100msv+0x36>
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	49 f0       	breq	.+18     	; 0x127c <_Z19led_timeslice_100msv+0x1e>
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	09 f0       	breq	.+2      	; 0x1270 <_Z19led_timeslice_100msv+0x12>
    126e:	08 95       	ret
	case SYSTEM_LED_MODE_DEVICE 	: 
		/*switch(led_Mode)
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_uint8_t(System_LED_Control.pattern, LOW_NIBBLE);	
    1270:	80 91 fd 04 	lds	r24, 0x04FD
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	0e 94 0c 09 	call	0x1218	; 0x1218 <_Z12show_uint8_thh>
									  break;
    127a:	08 95       	ret
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
											System_LED_Control.pattern = !System_LED_Control.pattern;
									  break;
	case SYSTEM_LED_MODE_MYINSTANCE : if (counter--==0) {
    127c:	80 91 09 02 	lds	r24, 0x0209
    1280:	98 2f       	mov	r25, r24
    1282:	91 50       	subi	r25, 0x01	; 1
    1284:	90 93 09 02 	sts	0x0209, r25
    1288:	88 23       	and	r24, r24
    128a:	89 f7       	brne	.-30     	; 0x126e <_Z19led_timeslice_100msv+0x10>
										counter = BLINK_RATE;
    128c:	8a e0       	ldi	r24, 0x0A	; 10
    128e:	80 93 09 02 	sts	0x0209, r24
    1292:	08 95       	ret
		{case STROBE :  break;
		default: break;		}*/
									  break;
	case SYSTEM_LED_MODE_PATTERN 	: show_uint8_t(System_LED_Control.pattern, LOW_NIBBLE);	
									  break;
	case SYSTEM_LED_MODE_STROBE 	: if (strobe_leds( System_LED_Control.pattern ) == TRUE)
    1294:	80 91 fd 04 	lds	r24, 0x04FD
    1298:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z11strobe_ledsh>
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	39 f7       	brne	.-50     	; 0x126e <_Z19led_timeslice_100msv+0x10>
											System_LED_Control.pattern = !System_LED_Control.pattern;
    12a0:	90 91 fd 04 	lds	r25, 0x04FD
    12a4:	99 23       	and	r25, r25
    12a6:	19 f4       	brne	.+6      	; 0x12ae <_Z19led_timeslice_100msv+0x50>
    12a8:	80 93 fd 04 	sts	0x04FD, r24
    12ac:	08 95       	ret
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	fb cf       	rjmp	.-10     	; 0x12a8 <_Z19led_timeslice_100msv+0x4a>

000012b2 <_Z11OS_InitTaskv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    12b6:	93 e0       	ldi	r25, 0x03	; 3
    12b8:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    12ba:	9a ef       	ldi	r25, 0xFA	; 250
    12bc:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    12be:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    12c2:	10 92 03 05 	sts	0x0503, r1
    12c6:	10 92 02 05 	sts	0x0502, r1
	/******************* PERIPHERAL INIT  ********************/
	/******************* APPLICATION INIT ********************/

	// Look for serial idle:	
	//Enter_HS_Mode();
}
    12ca:	08 95       	ret

000012cc <_Z13Enter_HS_Modev>:

void Enter_HS_Mode()
{
	OS_HighSpeedSampling = TRUE;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 06 05 	sts	0x0506, r24
}
    12d2:	08 95       	ret

000012d4 <_Z17Enter_Normal_Modev>:
void Enter_Normal_Mode()
{
	OS_HighSpeedSampling = FALSE;
    12d4:	10 92 06 05 	sts	0x0506, r1
}
    12d8:	08 95       	ret

000012da <_Z15System_Dispatchv>:
					}
				}
			}
		}
	}
}
    12da:	08 95       	ret

000012dc <__vector_21>:
TIMER0_COMPA_vect
TIMER0_COMPB_vect
TIMER0_OVF_vect
******************************************************************************/
ISR( TIMER0_COMPA_vect )
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	0b b6       	in	r0, 0x3b	; 59
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	2f 93       	push	r18
    12ec:	3f 93       	push	r19
    12ee:	4f 93       	push	r20
    12f0:	5f 93       	push	r21
    12f2:	6f 93       	push	r22
    12f4:	7f 93       	push	r23
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    1302:	80 91 07 05 	lds	r24, 0x0507
    1306:	88 23       	and	r24, r24
    1308:	51 f1       	breq	.+84     	; 0x135e <__vector_21+0x82>
    130a:	10 92 07 05 	sts	0x0507, r1

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    130e:	80 91 06 05 	lds	r24, 0x0506
    1312:	88 23       	and	r24, r24
    1314:	59 f1       	breq	.+86     	; 0x136c <__vector_21+0x90>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
    1316:	80 91 00 05 	lds	r24, 0x0500
    131a:	90 91 01 05 	lds	r25, 0x0501
    131e:	9c 01       	movw	r18, r24
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	30 93 01 05 	sts	0x0501, r19
    1328:	20 93 00 05 	sts	0x0500, r18
    132c:	6a e0       	ldi	r22, 0x0A	; 10
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <__udivmodhi4>
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	31 f1       	breq	.+76     	; 0x1384 <__vector_21+0xa8>
		System_Dispatch();
		OS_Dispatch();
	}
	//if (OS_Event_TIC_Counter == 999)	// after 1 second
    //		OS_Event_TIC_Counter = 0;		// start over
}
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	7f 91       	pop	r23
    1346:	6f 91       	pop	r22
    1348:	5f 91       	pop	r21
    134a:	4f 91       	pop	r20
    134c:	3f 91       	pop	r19
    134e:	2f 91       	pop	r18
    1350:	0f 90       	pop	r0
    1352:	0b be       	out	0x3b, r0	; 59
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti
{
	// the OCF0A flag is automatically cleared by executing this ISR.
	
	// toggle bit used for debug (set an output led to show we're running).
	static byte t =0;
	if (t) t=0; else t=1;		
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 07 05 	sts	0x0507, r24

	//cli():
	// OTHER INTERRUPTS SHOULD BE DISABLED DURING THIS MODE !!
	if (OS_HighSpeedSampling)				// 0.1ms tick
    1364:	80 91 06 05 	lds	r24, 0x0506
    1368:	88 23       	and	r24, r24
    136a:	a9 f6       	brne	.-86     	; 0x1316 <__vector_21+0x3a>
			OS_Dispatch();
		}
	}
	else								// 1ms tick
	{
		OS_Event_TIC_Counter++;
    136c:	80 91 02 05 	lds	r24, 0x0502
    1370:	90 91 03 05 	lds	r25, 0x0503
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	90 93 03 05 	sts	0x0503, r25
    137a:	80 93 02 05 	sts	0x0502, r24
		System_Dispatch();
		OS_Dispatch();
    137e:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z11OS_Dispatchv>
    1382:	da cf       	rjmp	.-76     	; 0x1338 <__vector_21+0x5c>
	{
		// call RF check for silence inline routine
		//RF_SilenceCheck();
		if ((OS_Event_HSTIC_Counter++ % 10) == 0)
		{
			OS_Event_HSTIC_Counter = 0;
    1384:	10 92 01 05 	sts	0x0501, r1
    1388:	10 92 00 05 	sts	0x0500, r1
			OS_Event_TIC_Counter++;
    138c:	80 91 02 05 	lds	r24, 0x0502
    1390:	90 91 03 05 	lds	r25, 0x0503
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	90 93 03 05 	sts	0x0503, r25
    139a:	80 93 02 05 	sts	0x0502, r24
			OS_Dispatch();
    139e:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z11OS_Dispatchv>
    13a2:	ca cf       	rjmp	.-108    	; 0x1338 <__vector_21+0x5c>

000013a4 <_Z11OS_tmr_initv>:
	*/
	
	/* We want to use Clear Timer on Compare (CTC mode)		*/
	/* COM0A0 and COM0A1 are put into "disconnected" mode.	*/
	/* COM0B0 and COM0B1 are put into "disconnected" mode.	*/
	TCCR0A = 0x02;		// CTC;  OCRA will hold TOP;
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// use f/64
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		// 1 ms 
    13ac:	9a ef       	ldi	r25, 0xFA	; 250
    13ae:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// Enable OCR0A
    13b0:	80 93 6e 00 	sts	0x006E, r24
	
	OS_Event_TIC_Counter = 0;	// counts # of ms
    13b4:	10 92 03 05 	sts	0x0503, r1
    13b8:	10 92 02 05 	sts	0x0502, r1
}
    13bc:	08 95       	ret

000013be <_Z11OCR1A_Writej>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    13be:	2f b7       	in	r18, 0x3f	; 63
	cli();					/* Disable interrupts   */
    13c0:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    13c2:	90 93 89 00 	sts	0x0089, r25
    13c6:	80 93 88 00 	sts	0x0088, r24
	SREG  = sreg;			/* Restore global interrupt flag */
    13ca:	2f bf       	out	0x3f, r18	; 63
}
    13cc:	08 95       	ret

000013ce <_Z11OCR1B_Writej>:
/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    13ce:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    13d0:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    13d2:	90 93 8b 00 	sts	0x008B, r25
    13d6:	80 93 8a 00 	sts	0x008A, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    13da:	2f bf       	out	0x3f, r18	; 63
}
    13dc:	08 95       	ret

000013de <_Z11OCR1C_Writej>:
/* This is proper way to write to the 16 bit register! */
void OCR1C_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    13de:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* Disable interrupts */
    13e0:	f8 94       	cli
	OCR1C = i;		/* Set TCNTn to i     */
    13e2:	90 93 8d 00 	sts	0x008D, r25
    13e6:	80 93 8c 00 	sts	0x008C, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    13ea:	2f bf       	out	0x3f, r18	; 63
}
    13ec:	08 95       	ret

000013ee <_Z11OCR2A_Writej>:
/* This is proper way to write to the 16 bit register! */
void OCR2A_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    13ee:	9f b7       	in	r25, 0x3f	; 63
	cli();			/* Disable interrupts */
    13f0:	f8 94       	cli
	OCR2A = i;		/* Set TCNTn to i     */
    13f2:	80 93 b3 00 	sts	0x00B3, r24
	SREG = sreg;	/* Restore global interrupt flag */ 
    13f6:	9f bf       	out	0x3f, r25	; 63
}
    13f8:	08 95       	ret

000013fa <_Z13get_top_valuef>:

uint16_t get_top_value( float mHerz )
{
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	7b 01       	movw	r14, r22
    1404:	8c 01       	movw	r16, r24
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'uint16_t'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'uint16_t'
	uint16_t Top = (F_CPU/Prescaler) / mHerz;
    1406:	20 91 0c 02 	lds	r18, 0x020C
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	74 e2       	ldi	r23, 0x24	; 36
    1414:	84 ef       	ldi	r24, 0xF4	; 244
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divmodsi4>
    141c:	ca 01       	movw	r24, r20
    141e:	b9 01       	movw	r22, r18
    1420:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__floatsisf>
    1424:	a8 01       	movw	r20, r16
    1426:	97 01       	movw	r18, r14
    1428:	0e 94 9a 12 	call	0x2534	; 0x2534 <__divsf3>
    142c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
	return Top;
}
    1430:	cb 01       	movw	r24, r22
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	08 95       	ret

0000143c <_Z23get_base_frequency_herzv>:

float get_base_frequency_herz( )
{
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'uint16_t'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'uint16_t'
	float Herz = (F_CPU / Prescaler) / TOP;
    1444:	20 91 0c 02 	lds	r18, 0x020C
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	74 e2       	ldi	r23, 0x24	; 36
    1452:	84 ef       	ldi	r24, 0xF4	; 244
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divmodsi4>
    145a:	79 01       	movw	r14, r18
    145c:	8a 01       	movw	r16, r20
    145e:	20 91 0d 02 	lds	r18, 0x020D
    1462:	30 91 0e 02 	lds	r19, 0x020E
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	c8 01       	movw	r24, r16
    146c:	b7 01       	movw	r22, r14
    146e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divmodsi4>
    1472:	ca 01       	movw	r24, r20
    1474:	b9 01       	movw	r22, r18
    1476:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__floatsisf>
	return Herz;
}
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret

00001484 <_Z7set_topj>:


void set_top( uint16_t mTop )
{
	TOP = mTop;
    1484:	90 93 0e 02 	sts	0x020E, r25
    1488:	80 93 0d 02 	sts	0x020D, r24
	ICR1 = TOP;
    148c:	90 93 87 00 	sts	0x0087, r25
    1490:	80 93 86 00 	sts	0x0086, r24
	//ICR2 = TOP;
}
    1494:	08 95       	ret

00001496 <_Z16select_prescalerf>:

uint16_t select_prescaler( float mHerz )
{
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
	uint16_t Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	74 e2       	ldi	r23, 0x24	; 36
    14a6:	84 e7       	ldi	r24, 0x74	; 116
    14a8:	9b e4       	ldi	r25, 0x4B	; 75
    14aa:	0e 94 9a 12 	call	0x2534	; 0x2534 <__divsf3>
    14ae:	8b 01       	movw	r16, r22
    14b0:	d8 2f       	mov	r29, r24
    14b2:	c9 2f       	mov	r28, r25
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    14b4:	9e 01       	movw	r18, r28
    14b6:	71 2f       	mov	r23, r17
    14b8:	83 2f       	mov	r24, r19
    14ba:	92 2f       	mov	r25, r18
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 48 13 	call	0x2690	; 0x2690 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	0c f0       	brlt	.+2      	; 0x14ce <_Z16select_prescalerf+0x38>
    14cc:	41 c0       	rjmp	.+130    	; 0x1550 <_Z16select_prescalerf+0xba>
    14ce:	9e 01       	movw	r18, r28
    14d0:	60 2f       	mov	r22, r16
    14d2:	71 2f       	mov	r23, r17
    14d4:	83 2f       	mov	r24, r19
    14d6:	92 2f       	mov	r25, r18
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	5e e3       	ldi	r21, 0x3E	; 62
    14e0:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    14e8:	4f e7       	ldi	r20, 0x7F	; 127
    14ea:	57 e4       	ldi	r21, 0x47	; 71
    14ec:	0e 94 48 13 	call	0x2690	; 0x2690 <__gtsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	b4 f5       	brge	.+108    	; 0x1560 <_Z16select_prescalerf+0xca>
    14f4:	9e 01       	movw	r18, r28
    14f6:	60 2f       	mov	r22, r16
    14f8:	71 2f       	mov	r23, r17
    14fa:	83 2f       	mov	r24, r19
    14fc:	92 2f       	mov	r25, r18
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e8       	ldi	r20, 0x80	; 128
    1504:	5c e3       	ldi	r21, 0x3C	; 60
    1506:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 48 13 	call	0x2690	; 0x2690 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <_Z16select_prescalerf+0xd6>
    151a:	9e 01       	movw	r18, r28
    151c:	60 2f       	mov	r22, r16
    151e:	71 2f       	mov	r23, r17
    1520:	83 2f       	mov	r24, r19
    1522:	92 2f       	mov	r25, r18
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e8       	ldi	r20, 0x80	; 128
    152a:	5b e3       	ldi	r21, 0x3B	; 59
    152c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	4f e7       	ldi	r20, 0x7F	; 127
    1536:	57 e4       	ldi	r21, 0x47	; 71
    1538:	0e 94 48 13 	call	0x2690	; 0x2690 <__gtsf2>
    153c:	18 16       	cp	r1, r24
    153e:	9c f4       	brge	.+38     	; 0x1566 <_Z16select_prescalerf+0xd0>
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	34 e0       	ldi	r19, 0x04	; 4
	return Pre;	
}
    1544:	c9 01       	movw	r24, r18
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret
	//ICR2 = TOP;
}

uint16_t select_prescaler( float mHerz )
{
	uint16_t Pre = 1;
    1550:	21 e0       	ldi	r18, 0x01	; 1
    1552:	30 e0       	ldi	r19, 0x00	; 0
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 1024; val = tick/(float)Pre; 	}
	return Pre;	
}
    1554:	c9 01       	movw	r24, r18
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	08 95       	ret
{
	uint16_t Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
    1560:	28 e0       	ldi	r18, 0x08	; 8
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	ef cf       	rjmp	.-34     	; 0x1544 <_Z16select_prescalerf+0xae>
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 256;  val = tick/(float)Pre; 	}
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	31 e0       	ldi	r19, 0x01	; 1
    156a:	ec cf       	rjmp	.-40     	; 0x1544 <_Z16select_prescalerf+0xae>
	uint16_t Pre = 1;
	// Calculate the prescaler needed to achieve the mHerz.
	float tick = (16000000.0 / mHerz);
	float val  = tick/(float)Pre;
	if (val>65535) { Pre = 8;    val = tick/(float)Pre; 	}
	if (val>65535) { Pre = 64;   val = tick/(float)Pre; 	}
    156c:	20 e4       	ldi	r18, 0x40	; 64
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	e9 cf       	rjmp	.-46     	; 0x1544 <_Z16select_prescalerf+0xae>

00001572 <_Z20get_tccr1b_prescalerj>:
}

uint8_t get_tccr1b_prescaler( uint16_t Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1572:	80 34       	cpi	r24, 0x40	; 64
    1574:	91 05       	cpc	r25, r1
    1576:	d9 f0       	breq	.+54     	; 0x15ae <_Z20get_tccr1b_prescalerj+0x3c>
    1578:	81 34       	cpi	r24, 0x41	; 65
    157a:	91 05       	cpc	r25, r1
    157c:	50 f0       	brcs	.+20     	; 0x1592 <_Z20get_tccr1b_prescalerj+0x20>
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	80 30       	cpi	r24, 0x00	; 0
    1582:	92 07       	cpc	r25, r18
    1584:	81 f0       	breq	.+32     	; 0x15a6 <_Z20get_tccr1b_prescalerj+0x34>
    1586:	24 e0       	ldi	r18, 0x04	; 4
    1588:	80 30       	cpi	r24, 0x00	; 0
    158a:	92 07       	cpc	r25, r18
    158c:	51 f0       	breq	.+20     	; 0x15a2 <_Z20get_tccr1b_prescalerj+0x30>
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	08 95       	ret
}

uint8_t get_tccr1b_prescaler( uint16_t Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	49 f0       	breq	.+18     	; 0x15aa <_Z20get_tccr1b_prescalerj+0x38>
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	91 05       	cpc	r25, r1
    159c:	c1 f7       	brne	.-16     	; 0x158e <_Z20get_tccr1b_prescalerj+0x1c>
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
    159e:	82 e0       	ldi	r24, 0x02	; 2
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
	default	  : break;
	}
	return 0xFF;
}
    15a0:	08 95       	ret
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
	case 1024 :	return 0x05;	break;
    15a2:	85 e0       	ldi	r24, 0x05	; 5
    15a4:	08 95       	ret
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
	case 256  :	return 0x04;	break;
    15a6:	84 e0       	ldi	r24, 0x04	; 4
    15a8:	08 95       	ret
uint8_t get_tccr1b_prescaler( uint16_t Prescaler )
{
	// Change here will impact BigMotor base frequencies!	
	switch (Prescaler)		// was Prescaler & 0x07
	{
	case 1	  :	return 0x01;	break;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	08 95       	ret
	case 8	  :	return 0x02;	break;
	case 64	  :	return 0x03;	break;
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	08 95       	ret

000015b2 <_Z17set_base_PWM_freqf>:
	}
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	7b 01       	movw	r14, r22
    15bc:	8c 01       	movw	r16, r24
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'uint16_t'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'uint16_t'
	uint16_t Top = (F_CPU/Prescaler) / mHerz;
    15be:	20 91 0c 02 	lds	r18, 0x020C
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	74 e2       	ldi	r23, 0x24	; 36
    15cc:	84 ef       	ldi	r24, 0xF4	; 244
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divmodsi4>
    15d4:	ca 01       	movw	r24, r20
    15d6:	b9 01       	movw	r22, r18
    15d8:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__floatsisf>
    15dc:	a8 01       	movw	r20, r16
    15de:	97 01       	movw	r18, r14
    15e0:	0e 94 9a 12 	call	0x2534	; 0x2534 <__divsf3>
    15e4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
	return 0xFF;
}

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
    15e8:	70 93 0e 02 	sts	0x020E, r23
    15ec:	60 93 0d 02 	sts	0x020D, r22


void set_top( uint16_t mTop )
{
	TOP = mTop;
	ICR1 = TOP;
    15f0:	70 93 87 00 	sts	0x0087, r23
    15f4:	60 93 86 00 	sts	0x0086, r22

void set_base_PWM_freq( float mHerz )
{
	TOP = get_top_value( mHerz );	
	set_top(TOP);
}
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <_Z8pwm_initfh>:

void pwm_init( float mBaseFrequencyHerz, BOOL mEnable )
{
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	7b 01       	movw	r14, r22
    160e:	8c 01       	movw	r16, r24
    1610:	c4 2f       	mov	r28, r20
	if (mEnable)	
    1612:	44 23       	and	r20, r20
    1614:	21 f0       	breq	.+8      	; 0x161e <_Z8pwm_initfh+0x1c>
	{
		PWM_1A_DDR |= (1<<PWM_1A_PIN);
    1616:	25 9a       	sbi	0x04, 5	; 4
		PWM_1B_DDR |= (1<<PWM_1B_PIN);
    1618:	26 9a       	sbi	0x04, 6	; 4
		PWM_1C_DDR |= (1<<PWM_1C_PIN);
    161a:	27 9a       	sbi	0x04, 7	; 4
		PWM_2A_DDR |= (1<<PWM_2A_PIN);
    161c:	24 9a       	sbi	0x04, 4	; 4
	}

	// No Power Reduction (needed to enable the Timer1)
	PRR0 &= ~((1<<PRTIM1) | (1<<PRTIM2));
    161e:	80 91 64 00 	lds	r24, 0x0064
    1622:	87 7b       	andi	r24, 0xB7	; 183
    1624:	80 93 64 00 	sts	0x0064, r24

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1628:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    162a:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    162c:	10 92 89 00 	sts	0x0089, r1
    1630:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    1634:	8f bf       	out	0x3f, r24	; 63
}
/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1636:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1638:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    163a:	10 92 8b 00 	sts	0x008B, r1
    163e:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    1642:	8f bf       	out	0x3f, r24	; 63
}
/* This is proper way to write to the 16 bit register! */
void OCR1C_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1644:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1646:	f8 94       	cli
	OCR1C = i;		/* Set TCNTn to i     */
    1648:	10 92 8d 00 	sts	0x008D, r1
    164c:	10 92 8c 00 	sts	0x008C, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    1650:	8f bf       	out	0x3f, r24	; 63
}
/* This is proper way to write to the 16 bit register! */
void OCR2A_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1652:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1654:	f8 94       	cli
	OCR2A = i;		/* Set TCNTn to i     */
    1656:	10 92 b3 00 	sts	0x00B3, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    165a:	8f bf       	out	0x3f, r24	; 63
{
	// For Prescaler=1;  
	// Not right here:  16,000,000 / 100. = 160,000 which doesn't fit inside a 'uint16_t'
	// need prescaler=8;
	//     Right here:   2,000,000 / 100. = 20,000 which does fit inside a 'uint16_t'
	uint16_t Top = (F_CPU/Prescaler) / mHerz;
    165c:	20 91 0c 02 	lds	r18, 0x020C
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	74 e2       	ldi	r23, 0x24	; 36
    166a:	84 ef       	ldi	r24, 0xF4	; 244
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__divmodsi4>
    1672:	ca 01       	movw	r24, r20
    1674:	b9 01       	movw	r22, r18
    1676:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__floatsisf>
    167a:	a8 01       	movw	r20, r16
    167c:	97 01       	movw	r18, r14
    167e:	0e 94 9a 12 	call	0x2534	; 0x2534 <__divsf3>
    1682:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
}


void set_top( uint16_t mTop )
{
	TOP = mTop;
    1686:	70 93 0e 02 	sts	0x020E, r23
    168a:	60 93 0d 02 	sts	0x020D, r22
	ICR1 = TOP;
    168e:	70 93 87 00 	sts	0x0087, r23
    1692:	60 93 86 00 	sts	0x0086, r22
	set_top( get_top_value( mBaseFrequencyHerz ) );
	//set_top( 0x07ff );

	// 8 Bit control Registers:
	uint8_t tccr1a = 0x02;		// WGM11,WGM10 = 0b10; for fast-pwm mode
	if (mEnable) {
    1696:	cc 23       	and	r28, r28
    1698:	a9 f0       	breq	.+42     	; 0x16c4 <_Z8pwm_initfh+0xc2>
		tccr1a |= 0xA8;
    169a:	8a ea       	ldi	r24, 0xAA	; 170
	}
	TCCR1A 	= tccr1a;
    169c:	80 93 80 00 	sts	0x0080, r24

	Prescaler   = select_prescaler( mBaseFrequencyHerz );
    16a0:	c8 01       	movw	r24, r16
    16a2:	b7 01       	movw	r22, r14
    16a4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_Z16select_prescalerf>
    16a8:	80 93 0c 02 	sts	0x020C, r24
	uint8_t tccr1b = 0x18;		// WGM13,WGM12 =0b11 for fast pwm mode.
	TCCR1B = tccr1b | get_tccr1b_prescaler(Prescaler);
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_Z20get_tccr1b_prescalerj>
    16b2:	88 61       	ori	r24, 0x18	; 24
    16b4:	80 93 81 00 	sts	0x0081, r24

	// Mode 14 Fast PWM ICR1 holds TOP
	// We will be using the Waveform Generation Mode (WGM =0000; Normal Mode)
	// Correction!  We will be using FastPWM ICRn is TOP 
	//	(Mode 14)	
}
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	08 95       	ret
	// 16Mhz / 65535 = 	244 Hz  (slowest possible at this prescaler=1)
	set_top( get_top_value( mBaseFrequencyHerz ) );
	//set_top( 0x07ff );

	// 8 Bit control Registers:
	uint8_t tccr1a = 0x02;		// WGM11,WGM10 = 0b10; for fast-pwm mode
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	ea cf       	rjmp	.-44     	; 0x169c <_Z8pwm_initfh+0x9a>

000016c8 <_Z13set_polarityAh>:
_		    _____________________
 |_________|
******************************************/
void set_polarityA( BOOL mHigh )
{
	uint8_t tmp = TCCR1A;
    16c8:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x80;
    16cc:	29 2f       	mov	r18, r25
    16ce:	20 68       	ori	r18, 0x80	; 128
	if (mHigh)
    16d0:	88 23       	and	r24, r24
    16d2:	21 f4       	brne	.+8      	; 0x16dc <_Z13set_polarityAh+0x14>
		tmp &= ~(0x40);		// Clear PWM pin on compare match
	else
		tmp |= 0x40;		// Set PWM pin on compare match
    16d4:	90 6c       	ori	r25, 0xC0	; 192
	TCCR1A = tmp;		
    16d6:	90 93 80 00 	sts	0x0080, r25
}
    16da:	08 95       	ret
void set_polarityA( BOOL mHigh )
{
	uint8_t tmp = TCCR1A;
	tmp |= 0x80;
	if (mHigh)
		tmp &= ~(0x40);		// Clear PWM pin on compare match
    16dc:	92 2f       	mov	r25, r18
    16de:	9f 7b       	andi	r25, 0xBF	; 191
	else
		tmp |= 0x40;		// Set PWM pin on compare match
	TCCR1A = tmp;		
    16e0:	90 93 80 00 	sts	0x0080, r25
}
    16e4:	08 95       	ret

000016e6 <_Z13set_polarityBh>:
void set_polarityB( BOOL mHigh )
{
	uint8_t tmp = TCCR1A;
    16e6:	90 91 80 00 	lds	r25, 0x0080
	tmp |= 0x20;
    16ea:	29 2f       	mov	r18, r25
    16ec:	20 62       	ori	r18, 0x20	; 32
	if (mHigh)
    16ee:	88 23       	and	r24, r24
    16f0:	21 f4       	brne	.+8      	; 0x16fa <_Z13set_polarityBh+0x14>
		tmp &= ~0x10;
	else
		tmp |= 0x10;
    16f2:	90 63       	ori	r25, 0x30	; 48
	TCCR1A = tmp;
    16f4:	90 93 80 00 	sts	0x0080, r25
}
    16f8:	08 95       	ret
void set_polarityB( BOOL mHigh )
{
	uint8_t tmp = TCCR1A;
	tmp |= 0x20;
	if (mHigh)
		tmp &= ~0x10;
    16fa:	92 2f       	mov	r25, r18
    16fc:	9f 7e       	andi	r25, 0xEF	; 239
	else
		tmp |= 0x10;
	TCCR1A = tmp;
    16fe:	90 93 80 00 	sts	0x0080, r25
}
    1702:	08 95       	ret

00001704 <_Z11set_duty_M1f>:

/* value must be Positive! 
mDuty	- 	[0 to 1.00]  Fraction
*/
void set_duty_M1( float mDuty )
{
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	7b 01       	movw	r14, r22
    170e:	8c 01       	movw	r16, r24
	if (mDuty<0)  mDuty = -mDuty;	// make it positive
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	a9 01       	movw	r20, r18
    1716:	0e 94 a8 13 	call	0x2750	; 0x2750 <__ltsf2>
    171a:	87 ff       	sbrs	r24, 7
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <_Z11set_duty_M1f+0x22>
    171e:	17 fb       	bst	r17, 7
    1720:	10 95       	com	r17
    1722:	17 f9       	bld	r17, 7
    1724:	10 95       	com	r17
	MotDuties[0] = mDuty;
    1726:	e0 92 08 05 	sts	0x0508, r14
    172a:	f0 92 09 05 	sts	0x0509, r15
    172e:	00 93 0a 05 	sts	0x050A, r16
    1732:	10 93 0b 05 	sts	0x050B, r17
	uint16_t counts = ceil( (float)TOP * mDuty );
    1736:	60 91 0d 02 	lds	r22, 0x020D
    173a:	70 91 0e 02 	lds	r23, 0x020E
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    1746:	a8 01       	movw	r20, r16
    1748:	97 01       	movw	r18, r14
    174a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
    174e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <ceil>
    1752:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
}
/* This is proper way to write to the 16 bit register! */
void OCR1C_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1756:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1758:	f8 94       	cli
	OCR1C = i;		/* Set TCNTn to i     */
    175a:	70 93 8d 00 	sts	0x008D, r23
    175e:	60 93 8c 00 	sts	0x008C, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    1762:	8f bf       	out	0x3f, r24	; 63
{
	if (mDuty<0)  mDuty = -mDuty;	// make it positive
	MotDuties[0] = mDuty;
	uint16_t counts = ceil( (float)TOP * mDuty );
	OCR1C_Write( counts );
}
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	08 95       	ret

0000176e <_Z11set_duty_M2f>:

void set_duty_M2( float mDuty )
{
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	7b 01       	movw	r14, r22
    1778:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	0e 94 a8 13 	call	0x2750	; 0x2750 <__ltsf2>
    1784:	87 ff       	sbrs	r24, 7
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <_Z11set_duty_M2f+0x22>
    1788:	17 fb       	bst	r17, 7
    178a:	10 95       	com	r17
    178c:	17 f9       	bld	r17, 7
    178e:	10 95       	com	r17
	MotDuties[1] = mDuty;
    1790:	e0 92 0c 05 	sts	0x050C, r14
    1794:	f0 92 0d 05 	sts	0x050D, r15
    1798:	00 93 0e 05 	sts	0x050E, r16
    179c:	10 93 0f 05 	sts	0x050F, r17
	uint16_t counts = ceil( (float)TOP * mDuty );
    17a0:	60 91 0d 02 	lds	r22, 0x020D
    17a4:	70 91 0e 02 	lds	r23, 0x020E
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    17b0:	a8 01       	movw	r20, r16
    17b2:	97 01       	movw	r18, r14
    17b4:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
    17b8:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <ceil>
    17bc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
}
/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    17c0:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    17c2:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    17c4:	70 93 8b 00 	sts	0x008B, r23
    17c8:	60 93 8a 00 	sts	0x008A, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    17cc:	8f bf       	out	0x3f, r24	; 63
{
	if (mDuty<0) mDuty = -mDuty;
	MotDuties[1] = mDuty;
	uint16_t counts = ceil( (float)TOP * mDuty );
	OCR1B_Write( counts );
}
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	08 95       	ret

000017d8 <_Z11set_duty_M3f>:

void set_duty_M3( float mDuty )
{
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	7b 01       	movw	r14, r22
    17e2:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	a9 01       	movw	r20, r18
    17ea:	0e 94 a8 13 	call	0x2750	; 0x2750 <__ltsf2>
    17ee:	87 ff       	sbrs	r24, 7
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <_Z11set_duty_M3f+0x22>
    17f2:	17 fb       	bst	r17, 7
    17f4:	10 95       	com	r17
    17f6:	17 f9       	bld	r17, 7
    17f8:	10 95       	com	r17
	MotDuties[2] = mDuty;	
    17fa:	e0 92 10 05 	sts	0x0510, r14
    17fe:	f0 92 11 05 	sts	0x0511, r15
    1802:	00 93 12 05 	sts	0x0512, r16
    1806:	10 93 13 05 	sts	0x0513, r17
	uint16_t counts = ceil( (float)TOP * mDuty );
    180a:	60 91 0d 02 	lds	r22, 0x020D
    180e:	70 91 0e 02 	lds	r23, 0x020E
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    181a:	a8 01       	movw	r20, r16
    181c:	97 01       	movw	r18, r14
    181e:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
    1822:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <ceil>
    1826:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    182a:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    182c:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    182e:	70 93 89 00 	sts	0x0089, r23
    1832:	60 93 88 00 	sts	0x0088, r22
	SREG  = sreg;			/* Restore global interrupt flag */
    1836:	8f bf       	out	0x3f, r24	; 63
{
	if (mDuty<0) mDuty = -mDuty;
	MotDuties[2] = mDuty;	
	uint16_t counts = ceil( (float)TOP * mDuty );
	OCR1A_Write( counts );
}
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	08 95       	ret

00001842 <_Z11stop_motorsv>:

/* This is proper way to write to the 16 bit register! */
void OCR1A_Write( unsigned int i ) 
{
	unsigned char sreg;	
	sreg = SREG;			/* Save global interrupt flag */ 
    1842:	8f b7       	in	r24, 0x3f	; 63
	cli();					/* Disable interrupts   */
    1844:	f8 94       	cli
	OCR1A = i;				/* Set TCNTn to i       */
    1846:	10 92 89 00 	sts	0x0089, r1
    184a:	10 92 88 00 	sts	0x0088, r1
	SREG  = sreg;			/* Restore global interrupt flag */
    184e:	8f bf       	out	0x3f, r24	; 63
}
/* This is proper way to write to the 16 bit register! */
void OCR1B_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    1850:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1852:	f8 94       	cli
	OCR1B = i;		/* Set TCNTn to i     */
    1854:	10 92 8b 00 	sts	0x008B, r1
    1858:	10 92 8a 00 	sts	0x008A, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    185c:	8f bf       	out	0x3f, r24	; 63
}
/* This is proper way to write to the 16 bit register! */
void OCR1C_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    185e:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    1860:	f8 94       	cli
	OCR1C = i;		/* Set TCNTn to i     */
    1862:	10 92 8d 00 	sts	0x008D, r1
    1866:	10 92 8c 00 	sts	0x008C, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    186a:	8f bf       	out	0x3f, r24	; 63
}
/* This is proper way to write to the 16 bit register! */
void OCR2A_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    186c:	8f b7       	in	r24, 0x3f	; 63
	cli();			/* Disable interrupts */
    186e:	f8 94       	cli
	OCR2A = i;		/* Set TCNTn to i     */
    1870:	10 92 b3 00 	sts	0x00B3, r1
	SREG = sreg;	/* Restore global interrupt flag */ 
    1874:	8f bf       	out	0x3f, r24	; 63
	// Don't Store in MotDuties[] for resume purposes.
	OCR1A_Write( 0 );
	OCR1B_Write( 0 );
	OCR1C_Write( 0 );
	OCR2A_Write( 0 );			
}
    1876:	08 95       	ret

00001878 <_Z11set_duty_M4f>:
	set_duty_M3( MotDuties[2] );
	set_duty_M4( MotDuties[3] );
}

void set_duty_M4( float mDuty )
{
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	7b 01       	movw	r14, r22
    1882:	8c 01       	movw	r16, r24
	if (mDuty<0) mDuty = -mDuty;
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	a9 01       	movw	r20, r18
    188a:	0e 94 a8 13 	call	0x2750	; 0x2750 <__ltsf2>
    188e:	87 ff       	sbrs	r24, 7
    1890:	04 c0       	rjmp	.+8      	; 0x189a <_Z11set_duty_M4f+0x22>
    1892:	17 fb       	bst	r17, 7
    1894:	10 95       	com	r17
    1896:	17 f9       	bld	r17, 7
    1898:	10 95       	com	r17
	MotDuties[3] = mDuty;	
    189a:	e0 92 14 05 	sts	0x0514, r14
    189e:	f0 92 15 05 	sts	0x0515, r15
    18a2:	00 93 16 05 	sts	0x0516, r16
    18a6:	10 93 17 05 	sts	0x0517, r17
	uint16_t counts = ceil( (float)TOP * mDuty );
    18aa:	60 91 0d 02 	lds	r22, 0x020D
    18ae:	70 91 0e 02 	lds	r23, 0x020E
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    18ba:	a8 01       	movw	r20, r16
    18bc:	97 01       	movw	r18, r14
    18be:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulsf3>
    18c2:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <ceil>
}
/* This is proper way to write to the 16 bit register! */
void OCR2A_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
    18c6:	ef b6       	in	r14, 0x3f	; 63
	cli();			/* Disable interrupts */
    18c8:	f8 94       	cli

void set_duty_M4( float mDuty )
{
	if (mDuty<0) mDuty = -mDuty;
	MotDuties[3] = mDuty;	
	uint16_t counts = ceil( (float)TOP * mDuty );
    18ca:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
void OCR2A_Write( unsigned int i ) 
{
	unsigned char sreg;
	sreg = SREG;	/* Save global interrupt flag */ 
	cli();			/* Disable interrupts */
	OCR2A = i;		/* Set TCNTn to i     */
    18ce:	60 93 b3 00 	sts	0x00B3, r22
	SREG = sreg;	/* Restore global interrupt flag */ 
    18d2:	ef be       	out	0x3f, r14	; 63
{
	if (mDuty<0) mDuty = -mDuty;
	MotDuties[3] = mDuty;	
	uint16_t counts = ceil( (float)TOP * mDuty );
	OCR2A_Write( counts ); 
}
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	08 95       	ret

000018de <_Z13resume_motorsv>:
	OCR2A_Write( 0 );			
}

void resume_motors()
{
	set_duty_M1( MotDuties[0] );
    18de:	60 91 08 05 	lds	r22, 0x0508
    18e2:	70 91 09 05 	lds	r23, 0x0509
    18e6:	80 91 0a 05 	lds	r24, 0x050A
    18ea:	90 91 0b 05 	lds	r25, 0x050B
    18ee:	0e 94 82 0b 	call	0x1704	; 0x1704 <_Z11set_duty_M1f>
	set_duty_M2( MotDuties[1] );
    18f2:	60 91 0c 05 	lds	r22, 0x050C
    18f6:	70 91 0d 05 	lds	r23, 0x050D
    18fa:	80 91 0e 05 	lds	r24, 0x050E
    18fe:	90 91 0f 05 	lds	r25, 0x050F
    1902:	0e 94 b7 0b 	call	0x176e	; 0x176e <_Z11set_duty_M2f>
	set_duty_M3( MotDuties[2] );
    1906:	60 91 10 05 	lds	r22, 0x0510
    190a:	70 91 11 05 	lds	r23, 0x0511
    190e:	80 91 12 05 	lds	r24, 0x0512
    1912:	90 91 13 05 	lds	r25, 0x0513
    1916:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z11set_duty_M3f>
	set_duty_M4( MotDuties[3] );
    191a:	60 91 14 05 	lds	r22, 0x0514
    191e:	70 91 15 05 	lds	r23, 0x0515
    1922:	80 91 16 05 	lds	r24, 0x0516
    1926:	90 91 17 05 	lds	r25, 0x0517
    192a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z11set_duty_M4f>
}
    192e:	08 95       	ret

00001930 <_Z14set_motor_dutyif>:
	uint16_t counts = ceil( (float)TOP * mDuty );
	OCR2A_Write( counts ); 
}

void set_motor_duty( int mIndex, float mFraction )
{
    1930:	9c 01       	movw	r18, r24
    1932:	cb 01       	movw	r24, r22
    1934:	ba 01       	movw	r22, r20
	switch( mIndex)
    1936:	21 30       	cpi	r18, 0x01	; 1
    1938:	31 05       	cpc	r19, r1
    193a:	81 f0       	breq	.+32     	; 0x195c <_Z14set_motor_dutyif+0x2c>
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	84 f0       	brlt	.+32     	; 0x1962 <_Z14set_motor_dutyif+0x32>
    1942:	22 30       	cpi	r18, 0x02	; 2
    1944:	31 05       	cpc	r19, r1
    1946:	21 f0       	breq	.+8      	; 0x1950 <_Z14set_motor_dutyif+0x20>
    1948:	23 30       	cpi	r18, 0x03	; 3
    194a:	31 05       	cpc	r19, r1
    194c:	21 f0       	breq	.+8      	; 0x1956 <_Z14set_motor_dutyif+0x26>
    194e:	08 95       	ret
	{
	case 0: set_duty_M1(  mFraction );	break;
	case 1: set_duty_M2(  mFraction );	break;
	case 2: set_duty_M3(  mFraction );	break;
    1950:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z11set_duty_M3f>
    1954:	08 95       	ret
	case 3: set_duty_M4(  mFraction );	break;
    1956:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z11set_duty_M4f>
    195a:	08 95       	ret
void set_motor_duty( int mIndex, float mFraction )
{
	switch( mIndex)
	{
	case 0: set_duty_M1(  mFraction );	break;
	case 1: set_duty_M2(  mFraction );	break;
    195c:	0e 94 b7 0b 	call	0x176e	; 0x176e <_Z11set_duty_M2f>
    1960:	08 95       	ret
	OCR2A_Write( counts ); 
}

void set_motor_duty( int mIndex, float mFraction )
{
	switch( mIndex)
    1962:	21 15       	cp	r18, r1
    1964:	31 05       	cpc	r19, r1
    1966:	09 f0       	breq	.+2      	; 0x196a <_Z14set_motor_dutyif+0x3a>
    1968:	08 95       	ret
	{
	case 0: set_duty_M1(  mFraction );	break;
    196a:	0e 94 82 0b 	call	0x1704	; 0x1704 <_Z11set_duty_M1f>
    196e:	08 95       	ret

00001970 <_Z12init_buttonsv>:
char button_2_state=1;


void init_buttons()
{
	PUSH_BUTTONS_DDR  &= ~PUSH_BUTTON_1;
    1970:	6a 98       	cbi	0x0d, 2	; 13
	PUSH_BUTTONS_DDR  &= ~PUSH_BUTTON_2;
    1972:	6b 98       	cbi	0x0d, 3	; 13
	
	// Use pull-ups:
	PUSH_BUTTONS_PORT |= PUSH_BUTTON_1;
    1974:	72 9a       	sbi	0x0e, 2	; 14
	PUSH_BUTTONS_PORT |= PUSH_BUTTON_2;
    1976:	73 9a       	sbi	0x0e, 3	; 14
}
    1978:	08 95       	ret

0000197a <_Z12read_buttonsv>:

void read_buttons()
{
	button_1_state = (PUSH_BUTTONS_PIN & PUSH_BUTTON_1);
    197a:	8c b1       	in	r24, 0x0c	; 12
    197c:	84 70       	andi	r24, 0x04	; 4
    197e:	80 93 0f 02 	sts	0x020F, r24
	button_2_state = (PUSH_BUTTONS_PIN & PUSH_BUTTON_2);
    1982:	8c b1       	in	r24, 0x0c	; 12
    1984:	88 70       	andi	r24, 0x08	; 8
    1986:	80 93 10 02 	sts	0x0210, r24
}
    198a:	08 95       	ret

0000198c <_Z19init_limit_switchesv>:


void init_limit_switches()
{
	// 0 is input:	
	LIMIT_SWITCHES_A_DDR  &= 0xF0;
    198c:	83 b3       	in	r24, 0x13	; 19
    198e:	80 7f       	andi	r24, 0xF0	; 240
    1990:	83 bb       	out	0x13, r24	; 19
	LIMIT_SWITCHES_B_DDR  &= 0x0F;
    1992:	80 b3       	in	r24, 0x10	; 16
    1994:	8f 70       	andi	r24, 0x0F	; 15
    1996:	80 bb       	out	0x10, r24	; 16
	
	// Port has to be a 1 for pull-ups:
	LIMIT_SWITCHES_A_PORT  &= 0xF0;
    1998:	84 b3       	in	r24, 0x14	; 20
    199a:	80 7f       	andi	r24, 0xF0	; 240
    199c:	84 bb       	out	0x14, r24	; 20
	LIMIT_SWITCHES_B_PORT  &= 0x0F;
    199e:	81 b3       	in	r24, 0x11	; 17
    19a0:	8f 70       	andi	r24, 0x0F	; 15
    19a2:	81 bb       	out	0x11, r24	; 17
	
	MCUCR &= PUD;  // default from reset anyway.
    19a4:	85 b7       	in	r24, 0x35	; 53
    19a6:	84 70       	andi	r24, 0x04	; 4
    19a8:	85 bf       	out	0x35, r24	; 53
}
    19aa:	08 95       	ret

000019ac <_Z19read_limit_switchesv>:

void read_limit_switches()
{
	limit_switch_state_A = (LIMIT_SWITCHES_A_PIN & LIMIT_SWITCHES_A_MASK);
    19ac:	82 b3       	in	r24, 0x12	; 18
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	8f 70       	andi	r24, 0x0F	; 15
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	90 93 19 05 	sts	0x0519, r25
    19b8:	80 93 18 05 	sts	0x0518, r24
	limit_switch_state_B = (LIMIT_SWITCHES_B_PIN & LIMIT_SWITCHES_B_MASK)>>4;
    19bc:	8f b1       	in	r24, 0x0f	; 15
    19be:	82 95       	swap	r24
    19c0:	8f 70       	andi	r24, 0x0F	; 15
    19c2:	80 93 1a 05 	sts	0x051A, r24
    19c6:	10 92 1b 05 	sts	0x051B, r1
}
    19ca:	08 95       	ret

000019cc <_Z22is_any_limit_triggeredv>:

bool is_any_limit_triggered()
{
	return ((limit_switch_state_A != 0x0F) || (limit_switch_state_B != 0x0F));
    19cc:	80 91 18 05 	lds	r24, 0x0518
    19d0:	90 91 19 05 	lds	r25, 0x0519
    19d4:	8f 30       	cpi	r24, 0x0F	; 15
    19d6:	91 05       	cpc	r25, r1
    19d8:	11 f0       	breq	.+4      	; 0x19de <_Z22is_any_limit_triggeredv+0x12>
    19da:	81 e0       	ldi	r24, 0x01	; 1
}
    19dc:	08 95       	ret
{
	limit_switch_state_A = (LIMIT_SWITCHES_A_PIN & LIMIT_SWITCHES_A_MASK);
	limit_switch_state_B = (LIMIT_SWITCHES_B_PIN & LIMIT_SWITCHES_B_MASK)>>4;
}

bool is_any_limit_triggered()
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	20 91 1a 05 	lds	r18, 0x051A
    19e4:	30 91 1b 05 	lds	r19, 0x051B
    19e8:	2f 30       	cpi	r18, 0x0F	; 15
    19ea:	31 05       	cpc	r19, r1
    19ec:	b9 f7       	brne	.-18     	; 0x19dc <_Z22is_any_limit_triggeredv+0x10>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	08 95       	ret

000019f2 <_Z21get_limit_switch_neari>:
}


bool get_limit_switch_near( int mIndex )
{
	switch (mIndex)
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	91 05       	cpc	r25, r1
    19f6:	e9 f0       	breq	.+58     	; 0x1a32 <_Z21get_limit_switch_neari+0x40>
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	91 05       	cpc	r25, r1
    19fc:	04 f1       	brlt	.+64     	; 0x1a3e <_Z21get_limit_switch_neari+0x4c>
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	91 05       	cpc	r25, r1
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <_Z21get_limit_switch_neari+0x1c>
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	71 f0       	breq	.+28     	; 0x1a26 <_Z21get_limit_switch_neari+0x34>
	case 3 : 	return (limit_switch_state_A & 0x04); 
				break;
	default : 
				break;	
	}	
	return false;
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
}
    1a0c:	08 95       	ret
	{
	case 0 :	return (limit_switch_state_A & 0x01); 
				break;
	case 1 : 	return (limit_switch_state_A & 0x02);
				break;
	case 2 : 	return (limit_switch_state_A & 0x03); 
    1a0e:	20 91 18 05 	lds	r18, 0x0518
    1a12:	30 91 19 05 	lds	r19, 0x0519
    1a16:	23 70       	andi	r18, 0x03	; 3
    1a18:	30 70       	andi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	21 15       	cp	r18, r1
    1a1e:	31 05       	cpc	r19, r1
    1a20:	a9 f7       	brne	.-22     	; 0x1a0c <_Z21get_limit_switch_neari+0x1a>
				break;
	case 3 : 	return (limit_switch_state_A & 0x04); 
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	08 95       	ret
    1a26:	90 91 18 05 	lds	r25, 0x0518
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	92 ff       	sbrs	r25, 2
    1a2e:	f9 cf       	rjmp	.-14     	; 0x1a22 <_Z21get_limit_switch_neari+0x30>
				break;
	default : 
				break;	
	}	
	return false;
}
    1a30:	08 95       	ret
{
	switch (mIndex)
	{
	case 0 :	return (limit_switch_state_A & 0x01); 
				break;
	case 1 : 	return (limit_switch_state_A & 0x02);
    1a32:	90 91 18 05 	lds	r25, 0x0518
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	91 ff       	sbrs	r25, 1
    1a3a:	f3 cf       	rjmp	.-26     	; 0x1a22 <_Z21get_limit_switch_neari+0x30>
				break;
	default : 
				break;	
	}	
	return false;
}
    1a3c:	08 95       	ret
}


bool get_limit_switch_near( int mIndex )
{
	switch (mIndex)
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	21 f7       	brne	.-56     	; 0x1a0a <_Z21get_limit_switch_neari+0x18>
	{
	case 0 :	return (limit_switch_state_A & 0x01); 
    1a42:	80 91 18 05 	lds	r24, 0x0518
    1a46:	81 70       	andi	r24, 0x01	; 1
    1a48:	08 95       	ret

00001a4a <_Z20get_limit_switch_fari>:
	return false;
}

bool get_limit_switch_far( int mIndex )
{
	switch (mIndex)
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	e9 f0       	breq	.+58     	; 0x1a8a <_Z20get_limit_switch_fari+0x40>
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	91 05       	cpc	r25, r1
    1a54:	04 f1       	brlt	.+64     	; 0x1a96 <_Z20get_limit_switch_fari+0x4c>
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	91 05       	cpc	r25, r1
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <_Z20get_limit_switch_fari+0x1c>
    1a5c:	83 30       	cpi	r24, 0x03	; 3
    1a5e:	91 05       	cpc	r25, r1
    1a60:	71 f0       	breq	.+28     	; 0x1a7e <_Z20get_limit_switch_fari+0x34>
	case 3 : 	return (limit_switch_state_B & 0x04);
				break;
	default : 
				break;	
	}	
	return false;	
    1a62:	80 e0       	ldi	r24, 0x00	; 0
}
    1a64:	08 95       	ret
	{
	case 0 :	return (limit_switch_state_B & 0x01); 
				break;
	case 1 : 	return (limit_switch_state_B & 0x02); 
				break;
	case 2 : 	return (limit_switch_state_B & 0x03); 
    1a66:	20 91 1a 05 	lds	r18, 0x051A
    1a6a:	30 91 1b 05 	lds	r19, 0x051B
    1a6e:	23 70       	andi	r18, 0x03	; 3
    1a70:	30 70       	andi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	21 15       	cp	r18, r1
    1a76:	31 05       	cpc	r19, r1
    1a78:	a9 f7       	brne	.-22     	; 0x1a64 <_Z20get_limit_switch_fari+0x1a>
				break;
	case 3 : 	return (limit_switch_state_B & 0x04);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	08 95       	ret
    1a7e:	90 91 1a 05 	lds	r25, 0x051A
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	92 ff       	sbrs	r25, 2
    1a86:	f9 cf       	rjmp	.-14     	; 0x1a7a <_Z20get_limit_switch_fari+0x30>
				break;
	default : 
				break;	
	}	
	return false;	
}
    1a88:	08 95       	ret
{
	switch (mIndex)
	{
	case 0 :	return (limit_switch_state_B & 0x01); 
				break;
	case 1 : 	return (limit_switch_state_B & 0x02); 
    1a8a:	90 91 1a 05 	lds	r25, 0x051A
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	91 ff       	sbrs	r25, 1
    1a92:	f3 cf       	rjmp	.-26     	; 0x1a7a <_Z20get_limit_switch_fari+0x30>
				break;
	default : 
				break;	
	}	
	return false;	
}
    1a94:	08 95       	ret
	return false;
}

bool get_limit_switch_far( int mIndex )
{
	switch (mIndex)
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	21 f7       	brne	.-56     	; 0x1a62 <_Z20get_limit_switch_fari+0x18>
	{
	case 0 :	return (limit_switch_state_B & 0x01); 
    1a9a:	80 91 1a 05 	lds	r24, 0x051A
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	08 95       	ret

00001aa2 <_Z10USART_Initj>:


void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);		// 51  = 0x33
    1aa2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;			// 103 = 0x67  for 9600 at 8Mhz
    1aa6:	80 93 c4 00 	sts	0x00C4, r24

	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1aaa:	88 e1       	ldi	r24, 0x18	; 24
    1aac:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    1ab0:	8e e0       	ldi	r24, 0x0E	; 14
    1ab2:	80 93 c2 00 	sts	0x00C2, r24
}
    1ab6:	08 95       	ret

00001ab8 <_Z14USART_Transmith>:

void USART_Transmit( unsigned char data ) 
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1ab8:	90 91 c0 00 	lds	r25, 0x00C0
    1abc:	95 ff       	sbrs	r25, 5
    1abe:	fc cf       	rjmp	.-8      	; 0x1ab8 <_Z14USART_Transmith>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1ac0:	80 93 c6 00 	sts	0x00C6, r24
}
    1ac4:	08 95       	ret

00001ac6 <__vector_27>:

ISR( USART0_TX_vect )
{
    1ac6:	1f 92       	push	r1
    1ac8:	0f 92       	push	r0
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	0f 92       	push	r0
    1ace:	11 24       	eor	r1, r1

}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <__vector_25>:
ISR( USART0_RX_vect )
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1

}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <_Z13set_baud_ratev>:


void set_baud_rate()
{

}
    1aee:	08 95       	ret

00001af0 <_Z15enable_transmitv>:

void enable_transmit()
{

}
    1af0:	08 95       	ret

00001af2 <_Z15enable_receiverv>:
void enable_receiver()
{

}
    1af2:	08 95       	ret

00001af4 <_Z11init_serialv>:

void init_serial()
{
	RX_PIN_DDR 	&= ~(0x01);
    1af4:	68 98       	cbi	0x0d, 0	; 13
	TX_PIN_DDR  |=   0x02;
    1af6:	69 9a       	sbi	0x0d, 1	; 13


void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);		// 51  = 0x33
    1af8:	83 e3       	ldi	r24, 0x33	; 51
    1afa:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)ubrr;			// 103 = 0x67  for 9600 at 8Mhz
    1afe:	87 e6       	ldi	r24, 0x67	; 103
    1b00:	80 93 c4 00 	sts	0x00C4, r24

	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1b04:	88 e1       	ldi	r24, 0x18	; 24
    1b06:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    1b0a:	8e e0       	ldi	r24, 0x0E	; 14
    1b0c:	80 93 c2 00 	sts	0x00C2, r24
	TX_PIN_DDR  |=   0x02;
	
	USART_Init( 0x3367 );

	//PRUSART0 &= ~USART0;
	PRR0 &= ~PRUSART0;	
    1b10:	e4 e6       	ldi	r30, 0x64	; 100
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8e 7f       	andi	r24, 0xFE	; 254
    1b18:	80 83       	st	Z, r24
}
    1b1a:	08 95       	ret

00001b1c <_Z12send_messagePc>:
	TxBuffer.length = strlen(mMessage);
	strcpy (TxBuffer.buffer, mMessage);
	TxBuffer.busy = TRUE;		// ISR has to clear this flag
*/

	int length = strlen(mMessage);
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	dc 01       	movw	r26, r24
    1b20:	0d 90       	ld	r0, X+
    1b22:	00 20       	and	r0, r0
    1b24:	e9 f7       	brne	.-6      	; 0x1b20 <_Z12send_messagePc+0x4>
    1b26:	11 97       	sbiw	r26, 0x01	; 1
    1b28:	a8 1b       	sub	r26, r24
    1b2a:	b9 0b       	sbc	r27, r25
	for (int i=0; i<length; i++)
    1b2c:	1a 16       	cp	r1, r26
    1b2e:	1b 06       	cpc	r1, r27
    1b30:	6c f4       	brge	.+26     	; 0x1b4c <_Z12send_messagePc+0x30>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
	{
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) );
    1b36:	20 91 c0 00 	lds	r18, 0x00C0
    1b3a:	25 ff       	sbrs	r18, 5
    1b3c:	fc cf       	rjmp	.-8      	; 0x1b36 <_Z12send_messagePc+0x1a>
		/* Put data into buffer, sends the data */
		UDR0 = mMessage[i];
    1b3e:	21 91       	ld	r18, Z+
    1b40:	20 93 c6 00 	sts	0x00C6, r18
	strcpy (TxBuffer.buffer, mMessage);
	TxBuffer.busy = TRUE;		// ISR has to clear this flag
*/

	int length = strlen(mMessage);
	for (int i=0; i<length; i++)
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	a8 17       	cp	r26, r24
    1b48:	b9 07       	cpc	r27, r25
    1b4a:	a9 f7       	brne	.-22     	; 0x1b36 <_Z12send_messagePc+0x1a>
		while ( !( UCSR0A & (1<<UDRE0)) );
		/* Put data into buffer, sends the data */
		UDR0 = mMessage[i];
	}
	return TRUE;
}
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	08 95       	ret

00001b50 <_Z18init_configurationv>:
struct stConfigData QuadMotorConfigData;


void init_configuration()
{
	QuadMotorConfigData.use_encoder = TRUE;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 93 24 07 	sts	0x0724, r24
	
}
    1b56:	08 95       	ret

00001b58 <_Z18read_configurationv>:


void read_configuration()
{

}
    1b58:	08 95       	ret

00001b5a <_Z18save_configurationv>:

void save_configuration()
{

}
    1b5a:	08 95       	ret

00001b5c <_Z20parse_encoder_stringPc>:
#include "serial.h"
#include "pwm.h"


BOOL parse_encoder_string( char* mIncoming )
{
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
	int use_encoder = strcmp(mIncoming, "use encoder");
    1b66:	61 e1       	ldi	r22, 0x11	; 17
    1b68:	72 e0       	ldi	r23, 0x02	; 2
    1b6a:	0e 94 21 18 	call	0x3042	; 0x3042 <strcmp>
    1b6e:	8c 01       	movw	r16, r24
	int use_potentiometer  = strcmp(mIncoming, "use potientiometer");	
    1b70:	ce 01       	movw	r24, r28
    1b72:	6d e1       	ldi	r22, 0x1D	; 29
    1b74:	72 e0       	ldi	r23, 0x02	; 2
    1b76:	0e 94 21 18 	call	0x3042	; 0x3042 <strcmp>
		
	if ((use_potentiometer==0) || (use_encoder==0))
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <_Z20parse_encoder_stringPc+0x28>
    1b7e:	01 15       	cp	r16, r1
    1b80:	11 05       	cpc	r17, r1
    1b82:	31 f4       	brne	.+12     	; 0x1b90 <_Z20parse_encoder_stringPc+0x34>
		QuadMotorConfigData.use_encoder = (use_encoder==0);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	01 15       	cp	r16, r1
    1b88:	11 05       	cpc	r17, r1
    1b8a:	41 f4       	brne	.+16     	; 0x1b9c <_Z20parse_encoder_stringPc+0x40>
    1b8c:	80 93 24 07 	sts	0x0724, r24
	return FALSE;
}
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	08 95       	ret
{
	int use_encoder = strcmp(mIncoming, "use encoder");
	int use_potentiometer  = strcmp(mIncoming, "use potientiometer");	
		
	if ((use_potentiometer==0) || (use_encoder==0))
		QuadMotorConfigData.use_encoder = (use_encoder==0);
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	f6 cf       	rjmp	.-20     	; 0x1b8c <_Z20parse_encoder_stringPc+0x30>

00001ba0 <_Z19parse_speed_commandPc>:
	return FALSE;
}

BOOL parse_speed_command( char* mIncoming )
{
	BOOL is_speed_command = strcmp(mIncoming, "MOTOR_SPEED:");
    1ba0:	60 e3       	ldi	r22, 0x30	; 48
    1ba2:	72 e0       	ldi	r23, 0x02	; 2
    1ba4:	0e 94 21 18 	call	0x3042	; 0x3042 <strcmp>
	return is_speed_command;
}
    1ba8:	08 95       	ret

00001baa <_Z22parse_position_commandPc>:

BOOL parse_position_command( char* mIncoming )
{
	BOOL is_position_command = strcmp(mIncoming, "MOTOR_POSITION:");
    1baa:	6d e3       	ldi	r22, 0x3D	; 61
    1bac:	72 e0       	ldi	r23, 0x02	; 2
    1bae:	0e 94 21 18 	call	0x3042	; 0x3042 <strcmp>
	return is_position_command;
}
    1bb2:	08 95       	ret

00001bb4 <_Z32parse_set_base_frequency_commandPc>:

BOOL parse_set_base_frequency_command( char* mIncoming )
{
	BOOL is_position_command = strcmp(mIncoming, "set base frequency:");
    1bb4:	6d e4       	ldi	r22, 0x4D	; 77
    1bb6:	72 e0       	ldi	r23, 0x02	; 2
    1bb8:	0e 94 21 18 	call	0x3042	; 0x3042 <strcmp>

	return is_position_command;
}
    1bbc:	08 95       	ret

00001bbe <_Z9top_levelPc>:


void top_level( char* mIncoming )
{
	bool retval = parse_encoder_string	( mIncoming );
    1bbe:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z20parse_encoder_stringPc>
	retval = parse_position_command 	( mIncoming );
	retval = parse_set_base_frequency_command( mIncoming );

	int read_encoder  = strcmp(mIncoming, "read position");	
	
}
    1bc2:	08 95       	ret

00001bc4 <_Z14send_positionsv>:
/************************************************************************
	TRANSMISIONS:
 ************************************************************************/
 
void send_positions()
{
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	cf 5f       	subi	r28, 0xFF	; 255
    1bd2:	d0 40       	sbci	r29, 0x00	; 0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];
	if (QuadMotorConfigData.use_encoder) {
    1bde:	80 91 24 07 	lds	r24, 0x0724
    1be2:	88 23       	and	r24, r24
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <_Z14send_positionsv+0x24>
    1be6:	47 c0       	rjmp	.+142    	; 0x1c76 <_Z14send_positionsv+0xb2>
		sprintf(buffer,"Positions: M1=%8ld, M2=%8ld, M3=%8ld, M4=%8ld\n", 
			EncoderCount[0], EncoderCount[1], EncoderCount[2], EncoderCount[3] );
	} else {
		sprintf(buffer,"Positions: M1=%8d, M2=%8d, M3=%8d, M4=%8d\n", 
			PotSample[0], PotSample[1], PotSample[2], PotSample[3] );	
    1be8:	ad b7       	in	r26, 0x3d	; 61
    1bea:	be b7       	in	r27, 0x3e	; 62
    1bec:	1c 97       	sbiw	r26, 0x0c	; 12
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	be bf       	out	0x3e, r27	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	ad bf       	out	0x3d, r26	; 61
    1bf8:	ed b7       	in	r30, 0x3d	; 61
    1bfa:	fe b7       	in	r31, 0x3e	; 62
    1bfc:	31 96       	adiw	r30, 0x01	; 1
    1bfe:	8e 01       	movw	r16, r28
    1c00:	0f 5f       	subi	r16, 0xFF	; 255
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	12 96       	adiw	r26, 0x02	; 2
    1c06:	1c 93       	st	X, r17
    1c08:	0e 93       	st	-X, r16
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	80 e9       	ldi	r24, 0x90	; 144
    1c0e:	92 e0       	ldi	r25, 0x02	; 2
    1c10:	93 83       	std	Z+3, r25	; 0x03
    1c12:	82 83       	std	Z+2, r24	; 0x02
    1c14:	80 91 ef 04 	lds	r24, 0x04EF
    1c18:	90 91 f0 04 	lds	r25, 0x04F0
    1c1c:	95 83       	std	Z+5, r25	; 0x05
    1c1e:	84 83       	std	Z+4, r24	; 0x04
    1c20:	80 91 f1 04 	lds	r24, 0x04F1
    1c24:	90 91 f2 04 	lds	r25, 0x04F2
    1c28:	97 83       	std	Z+7, r25	; 0x07
    1c2a:	86 83       	std	Z+6, r24	; 0x06
    1c2c:	80 91 f3 04 	lds	r24, 0x04F3
    1c30:	90 91 f4 04 	lds	r25, 0x04F4
    1c34:	91 87       	std	Z+9, r25	; 0x09
    1c36:	80 87       	std	Z+8, r24	; 0x08
    1c38:	80 91 f5 04 	lds	r24, 0x04F5
    1c3c:	90 91 f6 04 	lds	r25, 0x04F6
    1c40:	93 87       	std	Z+11, r25	; 0x0b
    1c42:	82 87       	std	Z+10, r24	; 0x0a
    1c44:	0e 94 2a 18 	call	0x3054	; 0x3054 <sprintf>
    1c48:	8d b7       	in	r24, 0x3d	; 61
    1c4a:	9e b7       	in	r25, 0x3e	; 62
    1c4c:	0c 96       	adiw	r24, 0x0c	; 12
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	9e bf       	out	0x3e, r25	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	8d bf       	out	0x3d, r24	; 61
	}
	send_message(buffer);
    1c58:	c8 01       	movw	r24, r16
    1c5a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_Z12send_messagePc>
}
    1c5e:	c1 50       	subi	r28, 0x01	; 1
    1c60:	df 4f       	sbci	r29, 0xFF	; 255
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	08 95       	ret
void send_positions()
{
	char buffer[255];
	if (QuadMotorConfigData.use_encoder) {
		sprintf(buffer,"Positions: M1=%8ld, M2=%8ld, M3=%8ld, M4=%8ld\n", 
			EncoderCount[0], EncoderCount[1], EncoderCount[2], EncoderCount[3] );
    1c76:	8d b7       	in	r24, 0x3d	; 61
    1c78:	9e b7       	in	r25, 0x3e	; 62
    1c7a:	44 97       	sbiw	r24, 0x14	; 20
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	9e bf       	out	0x3e, r25	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	8d bf       	out	0x3d, r24	; 61
    1c86:	ed b7       	in	r30, 0x3d	; 61
    1c88:	fe b7       	in	r31, 0x3e	; 62
    1c8a:	31 96       	adiw	r30, 0x01	; 1
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	0f 5f       	subi	r16, 0xFF	; 255
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	ad b7       	in	r26, 0x3d	; 61
    1c94:	be b7       	in	r27, 0x3e	; 62
    1c96:	12 96       	adiw	r26, 0x02	; 2
    1c98:	1c 93       	st	X, r17
    1c9a:	0e 93       	st	-X, r16
    1c9c:	11 97       	sbiw	r26, 0x01	; 1
    1c9e:	81 e6       	ldi	r24, 0x61	; 97
    1ca0:	92 e0       	ldi	r25, 0x02	; 2
    1ca2:	93 83       	std	Z+3, r25	; 0x03
    1ca4:	82 83       	std	Z+2, r24	; 0x02
    1ca6:	80 91 9e 04 	lds	r24, 0x049E
    1caa:	90 91 9f 04 	lds	r25, 0x049F
    1cae:	a0 91 a0 04 	lds	r26, 0x04A0
    1cb2:	b0 91 a1 04 	lds	r27, 0x04A1
    1cb6:	84 83       	std	Z+4, r24	; 0x04
    1cb8:	95 83       	std	Z+5, r25	; 0x05
    1cba:	a6 83       	std	Z+6, r26	; 0x06
    1cbc:	b7 83       	std	Z+7, r27	; 0x07
    1cbe:	80 91 a2 04 	lds	r24, 0x04A2
    1cc2:	90 91 a3 04 	lds	r25, 0x04A3
    1cc6:	a0 91 a4 04 	lds	r26, 0x04A4
    1cca:	b0 91 a5 04 	lds	r27, 0x04A5
    1cce:	80 87       	std	Z+8, r24	; 0x08
    1cd0:	91 87       	std	Z+9, r25	; 0x09
    1cd2:	a2 87       	std	Z+10, r26	; 0x0a
    1cd4:	b3 87       	std	Z+11, r27	; 0x0b
    1cd6:	80 91 a6 04 	lds	r24, 0x04A6
    1cda:	90 91 a7 04 	lds	r25, 0x04A7
    1cde:	a0 91 a8 04 	lds	r26, 0x04A8
    1ce2:	b0 91 a9 04 	lds	r27, 0x04A9
    1ce6:	84 87       	std	Z+12, r24	; 0x0c
    1ce8:	95 87       	std	Z+13, r25	; 0x0d
    1cea:	a6 87       	std	Z+14, r26	; 0x0e
    1cec:	b7 87       	std	Z+15, r27	; 0x0f
    1cee:	80 91 aa 04 	lds	r24, 0x04AA
    1cf2:	90 91 ab 04 	lds	r25, 0x04AB
    1cf6:	a0 91 ac 04 	lds	r26, 0x04AC
    1cfa:	b0 91 ad 04 	lds	r27, 0x04AD
    1cfe:	80 8b       	std	Z+16, r24	; 0x10
    1d00:	91 8b       	std	Z+17, r25	; 0x11
    1d02:	a2 8b       	std	Z+18, r26	; 0x12
    1d04:	b3 8b       	std	Z+19, r27	; 0x13
    1d06:	0e 94 2a 18 	call	0x3054	; 0x3054 <sprintf>
    1d0a:	8d b7       	in	r24, 0x3d	; 61
    1d0c:	9e b7       	in	r25, 0x3e	; 62
    1d0e:	44 96       	adiw	r24, 0x14	; 20
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	9e bf       	out	0x3e, r25	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	8d bf       	out	0x3d, r24	; 61
    1d1a:	9e cf       	rjmp	.-196    	; 0x1c58 <_Z14send_positionsv+0x94>

00001d1c <_Z11send_speedsv>:
	}
	send_message(buffer);
}

void send_speeds()
{
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	cf 5f       	subi	r28, 0xFF	; 255
    1d2a:	d0 40       	sbci	r29, 0x00	; 0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];
	if (QuadMotorConfigData.use_encoder) {
    1d36:	80 91 24 07 	lds	r24, 0x0724
    1d3a:	88 23       	and	r24, r24
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <_Z11send_speedsv+0x24>
    1d3e:	47 c0       	rjmp	.+142    	; 0x1dce <_Z11send_speedsv+0xb2>
		sprintf(buffer,"Speeds (cps): M1=%8ld, M2=%8ld, M3=%8ld, M4=%8ld\n", 
			EncoderSpeed[0], EncoderSpeed[1], EncoderSpeed[2], EncoderSpeed[3] );
	} else {
		sprintf(buffer,"Speeds (cps): M1=%8d, M2=%8d, M3=%8d, M4=%8d\n", 
			PotSample[0], PotSample[1], PotSample[2], PotSample[3] );	
    1d40:	ad b7       	in	r26, 0x3d	; 61
    1d42:	be b7       	in	r27, 0x3e	; 62
    1d44:	1c 97       	sbiw	r26, 0x0c	; 12
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	be bf       	out	0x3e, r27	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	ad bf       	out	0x3d, r26	; 61
    1d50:	ed b7       	in	r30, 0x3d	; 61
    1d52:	fe b7       	in	r31, 0x3e	; 62
    1d54:	31 96       	adiw	r30, 0x01	; 1
    1d56:	8e 01       	movw	r16, r28
    1d58:	0f 5f       	subi	r16, 0xFF	; 255
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	12 96       	adiw	r26, 0x02	; 2
    1d5e:	1c 93       	st	X, r17
    1d60:	0e 93       	st	-X, r16
    1d62:	11 97       	sbiw	r26, 0x01	; 1
    1d64:	8d ee       	ldi	r24, 0xED	; 237
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	93 83       	std	Z+3, r25	; 0x03
    1d6a:	82 83       	std	Z+2, r24	; 0x02
    1d6c:	80 91 ef 04 	lds	r24, 0x04EF
    1d70:	90 91 f0 04 	lds	r25, 0x04F0
    1d74:	95 83       	std	Z+5, r25	; 0x05
    1d76:	84 83       	std	Z+4, r24	; 0x04
    1d78:	80 91 f1 04 	lds	r24, 0x04F1
    1d7c:	90 91 f2 04 	lds	r25, 0x04F2
    1d80:	97 83       	std	Z+7, r25	; 0x07
    1d82:	86 83       	std	Z+6, r24	; 0x06
    1d84:	80 91 f3 04 	lds	r24, 0x04F3
    1d88:	90 91 f4 04 	lds	r25, 0x04F4
    1d8c:	91 87       	std	Z+9, r25	; 0x09
    1d8e:	80 87       	std	Z+8, r24	; 0x08
    1d90:	80 91 f5 04 	lds	r24, 0x04F5
    1d94:	90 91 f6 04 	lds	r25, 0x04F6
    1d98:	93 87       	std	Z+11, r25	; 0x0b
    1d9a:	82 87       	std	Z+10, r24	; 0x0a
    1d9c:	0e 94 2a 18 	call	0x3054	; 0x3054 <sprintf>
    1da0:	8d b7       	in	r24, 0x3d	; 61
    1da2:	9e b7       	in	r25, 0x3e	; 62
    1da4:	0c 96       	adiw	r24, 0x0c	; 12
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	9e bf       	out	0x3e, r25	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	8d bf       	out	0x3d, r24	; 61
	}
	send_message(buffer);	
    1db0:	c8 01       	movw	r24, r16
    1db2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_Z12send_messagePc>
}
    1db6:	c1 50       	subi	r28, 0x01	; 1
    1db8:	df 4f       	sbci	r29, 0xFF	; 255
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	08 95       	ret
void send_speeds()
{
	char buffer[255];
	if (QuadMotorConfigData.use_encoder) {
		sprintf(buffer,"Speeds (cps): M1=%8ld, M2=%8ld, M3=%8ld, M4=%8ld\n", 
			EncoderSpeed[0], EncoderSpeed[1], EncoderSpeed[2], EncoderSpeed[3] );
    1dce:	8d b7       	in	r24, 0x3d	; 61
    1dd0:	9e b7       	in	r25, 0x3e	; 62
    1dd2:	44 97       	sbiw	r24, 0x14	; 20
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	9e bf       	out	0x3e, r25	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	8d bf       	out	0x3d, r24	; 61
    1dde:	ed b7       	in	r30, 0x3d	; 61
    1de0:	fe b7       	in	r31, 0x3e	; 62
    1de2:	31 96       	adiw	r30, 0x01	; 1
    1de4:	8e 01       	movw	r16, r28
    1de6:	0f 5f       	subi	r16, 0xFF	; 255
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	ad b7       	in	r26, 0x3d	; 61
    1dec:	be b7       	in	r27, 0x3e	; 62
    1dee:	12 96       	adiw	r26, 0x02	; 2
    1df0:	1c 93       	st	X, r17
    1df2:	0e 93       	st	-X, r16
    1df4:	11 97       	sbiw	r26, 0x01	; 1
    1df6:	8b eb       	ldi	r24, 0xBB	; 187
    1df8:	92 e0       	ldi	r25, 0x02	; 2
    1dfa:	93 83       	std	Z+3, r25	; 0x03
    1dfc:	82 83       	std	Z+2, r24	; 0x02
    1dfe:	80 91 ae 04 	lds	r24, 0x04AE
    1e02:	90 91 af 04 	lds	r25, 0x04AF
    1e06:	a0 91 b0 04 	lds	r26, 0x04B0
    1e0a:	b0 91 b1 04 	lds	r27, 0x04B1
    1e0e:	84 83       	std	Z+4, r24	; 0x04
    1e10:	95 83       	std	Z+5, r25	; 0x05
    1e12:	a6 83       	std	Z+6, r26	; 0x06
    1e14:	b7 83       	std	Z+7, r27	; 0x07
    1e16:	80 91 b2 04 	lds	r24, 0x04B2
    1e1a:	90 91 b3 04 	lds	r25, 0x04B3
    1e1e:	a0 91 b4 04 	lds	r26, 0x04B4
    1e22:	b0 91 b5 04 	lds	r27, 0x04B5
    1e26:	80 87       	std	Z+8, r24	; 0x08
    1e28:	91 87       	std	Z+9, r25	; 0x09
    1e2a:	a2 87       	std	Z+10, r26	; 0x0a
    1e2c:	b3 87       	std	Z+11, r27	; 0x0b
    1e2e:	80 91 b6 04 	lds	r24, 0x04B6
    1e32:	90 91 b7 04 	lds	r25, 0x04B7
    1e36:	a0 91 b8 04 	lds	r26, 0x04B8
    1e3a:	b0 91 b9 04 	lds	r27, 0x04B9
    1e3e:	84 87       	std	Z+12, r24	; 0x0c
    1e40:	95 87       	std	Z+13, r25	; 0x0d
    1e42:	a6 87       	std	Z+14, r26	; 0x0e
    1e44:	b7 87       	std	Z+15, r27	; 0x0f
    1e46:	80 91 ba 04 	lds	r24, 0x04BA
    1e4a:	90 91 bb 04 	lds	r25, 0x04BB
    1e4e:	a0 91 bc 04 	lds	r26, 0x04BC
    1e52:	b0 91 bd 04 	lds	r27, 0x04BD
    1e56:	80 8b       	std	Z+16, r24	; 0x10
    1e58:	91 8b       	std	Z+17, r25	; 0x11
    1e5a:	a2 8b       	std	Z+18, r26	; 0x12
    1e5c:	b3 8b       	std	Z+19, r27	; 0x13
    1e5e:	0e 94 2a 18 	call	0x3054	; 0x3054 <sprintf>
    1e62:	8d b7       	in	r24, 0x3d	; 61
    1e64:	9e b7       	in	r25, 0x3e	; 62
    1e66:	44 96       	adiw	r24, 0x14	; 20
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	9e bf       	out	0x3e, r25	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	8d bf       	out	0x3d, r24	; 61
    1e72:	9e cf       	rjmp	.-196    	; 0x1db0 <_Z11send_speedsv+0x94>

00001e74 <_Z19send_base_frequencyv>:
	send_message(buffer);	
}


void send_base_frequency()
{
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	cf 5f       	subi	r28, 0xFF	; 255
    1e82:	d0 40       	sbci	r29, 0x00	; 0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];
	if (QuadMotorConfigData.use_encoder) {
    1e8e:	80 91 24 07 	lds	r24, 0x0724
    1e92:	88 23       	and	r24, r24
    1e94:	91 f4       	brne	.+36     	; 0x1eba <_Z19send_base_frequencyv+0x46>
    1e96:	8e 01       	movw	r16, r28
    1e98:	0f 5f       	subi	r16, 0xFF	; 255
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
		float num = get_base_frequency_herz();
		sprintf(buffer,"Base Frequency (hz): %6.2f\n", num );
	} else {
		
	}
	send_message(buffer);	
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_Z12send_messagePc>
}
    1ea2:	c1 50       	subi	r28, 0x01	; 1
    1ea4:	df 4f       	sbci	r29, 0xFF	; 255
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	08 95       	ret

void send_base_frequency()
{
	char buffer[255];
	if (QuadMotorConfigData.use_encoder) {
		float num = get_base_frequency_herz();
    1eba:	0e 94 1e 0a 	call	0x143c	; 0x143c <_Z23get_base_frequency_herzv>
		sprintf(buffer,"Base Frequency (hz): %6.2f\n", num );
    1ebe:	2d b7       	in	r18, 0x3d	; 61
    1ec0:	3e b7       	in	r19, 0x3e	; 62
    1ec2:	28 50       	subi	r18, 0x08	; 8
    1ec4:	30 40       	sbci	r19, 0x00	; 0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	3e bf       	out	0x3e, r19	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	2d bf       	out	0x3d, r18	; 61
    1ed0:	ed b7       	in	r30, 0x3d	; 61
    1ed2:	fe b7       	in	r31, 0x3e	; 62
    1ed4:	31 96       	adiw	r30, 0x01	; 1
    1ed6:	8e 01       	movw	r16, r28
    1ed8:	0f 5f       	subi	r16, 0xFF	; 255
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	ad b7       	in	r26, 0x3d	; 61
    1ede:	be b7       	in	r27, 0x3e	; 62
    1ee0:	12 96       	adiw	r26, 0x02	; 2
    1ee2:	1c 93       	st	X, r17
    1ee4:	0e 93       	st	-X, r16
    1ee6:	11 97       	sbiw	r26, 0x01	; 1
    1ee8:	2b e1       	ldi	r18, 0x1B	; 27
    1eea:	33 e0       	ldi	r19, 0x03	; 3
    1eec:	33 83       	std	Z+3, r19	; 0x03
    1eee:	22 83       	std	Z+2, r18	; 0x02
    1ef0:	64 83       	std	Z+4, r22	; 0x04
    1ef2:	75 83       	std	Z+5, r23	; 0x05
    1ef4:	86 83       	std	Z+6, r24	; 0x06
    1ef6:	97 83       	std	Z+7, r25	; 0x07
    1ef8:	0e 94 2a 18 	call	0x3054	; 0x3054 <sprintf>
    1efc:	2d b7       	in	r18, 0x3d	; 61
    1efe:	3e b7       	in	r19, 0x3e	; 62
    1f00:	28 5f       	subi	r18, 0xF8	; 248
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	3e bf       	out	0x3e, r19	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	2d bf       	out	0x3d, r18	; 61
    1f0e:	c6 cf       	rjmp	.-116    	; 0x1e9c <_Z19send_base_frequencyv+0x28>

00001f10 <_Z5delayl>:


// Use volatile so that the compiler wont optimize the delay loop out
volatile long int time_delay = 0;
void delay( long int mdelay )
{
    1f10:	9b 01       	movw	r18, r22
    1f12:	ac 01       	movw	r20, r24
 	 for (time_delay=0; time_delay<mdelay; time_delay++) {  };
    1f14:	10 92 26 07 	sts	0x0726, r1
    1f18:	10 92 27 07 	sts	0x0727, r1
    1f1c:	10 92 28 07 	sts	0x0728, r1
    1f20:	10 92 29 07 	sts	0x0729, r1
    1f24:	80 91 26 07 	lds	r24, 0x0726
    1f28:	90 91 27 07 	lds	r25, 0x0727
    1f2c:	a0 91 28 07 	lds	r26, 0x0728
    1f30:	b0 91 29 07 	lds	r27, 0x0729
    1f34:	82 17       	cp	r24, r18
    1f36:	93 07       	cpc	r25, r19
    1f38:	a4 07       	cpc	r26, r20
    1f3a:	b5 07       	cpc	r27, r21
    1f3c:	04 f5       	brge	.+64     	; 0x1f7e <_Z5delayl+0x6e>
    1f3e:	80 91 26 07 	lds	r24, 0x0726
    1f42:	90 91 27 07 	lds	r25, 0x0727
    1f46:	a0 91 28 07 	lds	r26, 0x0728
    1f4a:	b0 91 29 07 	lds	r27, 0x0729
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	a1 1d       	adc	r26, r1
    1f52:	b1 1d       	adc	r27, r1
    1f54:	80 93 26 07 	sts	0x0726, r24
    1f58:	90 93 27 07 	sts	0x0727, r25
    1f5c:	a0 93 28 07 	sts	0x0728, r26
    1f60:	b0 93 29 07 	sts	0x0729, r27
    1f64:	80 91 26 07 	lds	r24, 0x0726
    1f68:	90 91 27 07 	lds	r25, 0x0727
    1f6c:	a0 91 28 07 	lds	r26, 0x0728
    1f70:	b0 91 29 07 	lds	r27, 0x0729
    1f74:	82 17       	cp	r24, r18
    1f76:	93 07       	cpc	r25, r19
    1f78:	a4 07       	cpc	r26, r20
    1f7a:	b5 07       	cpc	r27, r21
    1f7c:	04 f3       	brlt	.-64     	; 0x1f3e <_Z5delayl+0x2e>
    1f7e:	08 95       	ret

00001f80 <_Z9chip_initv>:
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
// at 8MHz so as not to exceed its operating conditions at startup.
//   CLKPR = ( 1 << CLKPCE );       // Set Clock Prescaler change enable
//   CLKPR = 0x01;            		// Clock Division Factor of 2
// Note - CLKPR must be written within 4 clock cycles of setting CLKPCE
   DDRB = 0xFF;    // PORT B to be outputs for LED monotoring
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x00;    // Inputs, not used
    1f84:	17 b8       	out	0x07, r1	; 7
   DDRE = 0x00;    // Inputs, not used
    1f86:	1d b8       	out	0x0d, r1	; 13
   PORTB = 0xFE;   // ALL LEDs OFF
    1f88:	8e ef       	ldi	r24, 0xFE	; 254
    1f8a:	85 b9       	out	0x05, r24	; 5
   PORTC = 0x00;   // Inputs, not used
    1f8c:	18 b8       	out	0x08, r1	; 8
   PORTD = 0x00;   // Inputs, not used
    1f8e:	1b b8       	out	0x0b, r1	; 11
   PORTE = 0x00;   // Inputs, not used
    1f90:	1e b8       	out	0x0e, r1	; 14
   PRR   = 0x00;   // Individual peripheral clocks enabled
    1f92:	10 92 64 00 	sts	0x0064, r1
}
    1f96:	08 95       	ret

00001f98 <__fixunssfsi>:
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	7b 01       	movw	r14, r22
    1fa2:	8c 01       	movw	r16, r24
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	5f e4       	ldi	r21, 0x4F	; 79
    1fac:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__gesf2>
    1fb0:	87 fd       	sbrc	r24, 7
    1fb2:	11 c0       	rjmp	.+34     	; 0x1fd6 <__fixunssfsi+0x3e>
    1fb4:	c8 01       	movw	r24, r16
    1fb6:	b7 01       	movw	r22, r14
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	5f e4       	ldi	r21, 0x4F	; 79
    1fc0:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1fc4:	0e 94 38 14 	call	0x2870	; 0x2870 <__fixsfsi>
    1fc8:	9b 01       	movw	r18, r22
    1fca:	ac 01       	movw	r20, r24
    1fcc:	20 50       	subi	r18, 0x00	; 0
    1fce:	30 40       	sbci	r19, 0x00	; 0
    1fd0:	40 40       	sbci	r20, 0x00	; 0
    1fd2:	50 48       	sbci	r21, 0x80	; 128
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <__fixunssfsi+0x4a>
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	b7 01       	movw	r22, r14
    1fda:	0e 94 38 14 	call	0x2870	; 0x2870 <__fixsfsi>
    1fde:	9b 01       	movw	r18, r22
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	ca 01       	movw	r24, r20
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	08 95       	ret

00001ff0 <_fpadd_parts>:
    1ff0:	a0 e0       	ldi	r26, 0x00	; 0
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	ee ef       	ldi	r30, 0xFE	; 254
    1ff6:	ff e0       	ldi	r31, 0x0F	; 15
    1ff8:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__prologue_saves__+0x8>
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	ea 01       	movw	r28, r20
    2000:	80 81       	ld	r24, Z
    2002:	82 30       	cpi	r24, 0x02	; 2
    2004:	08 f4       	brcc	.+2      	; 0x2008 <_fpadd_parts+0x18>
    2006:	38 c1       	rjmp	.+624    	; 0x2278 <__stack+0x79>
    2008:	db 01       	movw	r26, r22
    200a:	9c 91       	ld	r25, X
    200c:	92 30       	cpi	r25, 0x02	; 2
    200e:	08 f4       	brcc	.+2      	; 0x2012 <_fpadd_parts+0x22>
    2010:	30 c1       	rjmp	.+608    	; 0x2272 <__stack+0x73>
    2012:	84 30       	cpi	r24, 0x04	; 4
    2014:	59 f4       	brne	.+22     	; 0x202c <_fpadd_parts+0x3c>
    2016:	94 30       	cpi	r25, 0x04	; 4
    2018:	09 f0       	breq	.+2      	; 0x201c <_fpadd_parts+0x2c>
    201a:	2e c1       	rjmp	.+604    	; 0x2278 <__stack+0x79>
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	8c 91       	ld	r24, X
    2022:	11 97       	sbiw	r26, 0x01	; 1
    2024:	98 17       	cp	r25, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <_fpadd_parts+0x3a>
    2028:	21 c1       	rjmp	.+578    	; 0x226c <__stack+0x6d>
    202a:	26 c1       	rjmp	.+588    	; 0x2278 <__stack+0x79>
    202c:	94 30       	cpi	r25, 0x04	; 4
    202e:	09 f4       	brne	.+2      	; 0x2032 <_fpadd_parts+0x42>
    2030:	20 c1       	rjmp	.+576    	; 0x2272 <__stack+0x73>
    2032:	92 30       	cpi	r25, 0x02	; 2
    2034:	b1 f4       	brne	.+44     	; 0x2062 <_fpadd_parts+0x72>
    2036:	82 30       	cpi	r24, 0x02	; 2
    2038:	09 f0       	breq	.+2      	; 0x203c <_fpadd_parts+0x4c>
    203a:	1e c1       	rjmp	.+572    	; 0x2278 <__stack+0x79>
    203c:	ca 01       	movw	r24, r20
    203e:	af 01       	movw	r20, r30
    2040:	28 e0       	ldi	r18, 0x08	; 8
    2042:	da 01       	movw	r26, r20
    2044:	0d 90       	ld	r0, X+
    2046:	ad 01       	movw	r20, r26
    2048:	dc 01       	movw	r26, r24
    204a:	0d 92       	st	X+, r0
    204c:	cd 01       	movw	r24, r26
    204e:	21 50       	subi	r18, 0x01	; 1
    2050:	c1 f7       	brne	.-16     	; 0x2042 <_fpadd_parts+0x52>
    2052:	db 01       	movw	r26, r22
    2054:	11 96       	adiw	r26, 0x01	; 1
    2056:	8c 91       	ld	r24, X
    2058:	11 97       	sbiw	r26, 0x01	; 1
    205a:	91 81       	ldd	r25, Z+1	; 0x01
    205c:	89 23       	and	r24, r25
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	0a c1       	rjmp	.+532    	; 0x2276 <__stack+0x77>
    2062:	82 30       	cpi	r24, 0x02	; 2
    2064:	09 f4       	brne	.+2      	; 0x2068 <_fpadd_parts+0x78>
    2066:	05 c1       	rjmp	.+522    	; 0x2272 <__stack+0x73>
    2068:	c2 80       	ldd	r12, Z+2	; 0x02
    206a:	d3 80       	ldd	r13, Z+3	; 0x03
    206c:	db 01       	movw	r26, r22
    206e:	12 96       	adiw	r26, 0x02	; 2
    2070:	6d 90       	ld	r6, X+
    2072:	7c 90       	ld	r7, X
    2074:	13 97       	sbiw	r26, 0x03	; 3
    2076:	24 81       	ldd	r18, Z+4	; 0x04
    2078:	35 81       	ldd	r19, Z+5	; 0x05
    207a:	46 81       	ldd	r20, Z+6	; 0x06
    207c:	57 81       	ldd	r21, Z+7	; 0x07
    207e:	14 96       	adiw	r26, 0x04	; 4
    2080:	ed 90       	ld	r14, X+
    2082:	fd 90       	ld	r15, X+
    2084:	0d 91       	ld	r16, X+
    2086:	1c 91       	ld	r17, X
    2088:	17 97       	sbiw	r26, 0x07	; 7
    208a:	c6 01       	movw	r24, r12
    208c:	86 19       	sub	r24, r6
    208e:	97 09       	sbc	r25, r7
    2090:	5c 01       	movw	r10, r24
    2092:	97 ff       	sbrs	r25, 7
    2094:	04 c0       	rjmp	.+8      	; 0x209e <_fpadd_parts+0xae>
    2096:	aa 24       	eor	r10, r10
    2098:	bb 24       	eor	r11, r11
    209a:	a8 1a       	sub	r10, r24
    209c:	b9 0a       	sbc	r11, r25
    209e:	b0 e2       	ldi	r27, 0x20	; 32
    20a0:	ab 16       	cp	r10, r27
    20a2:	b1 04       	cpc	r11, r1
    20a4:	0c f0       	brlt	.+2      	; 0x20a8 <_fpadd_parts+0xb8>
    20a6:	61 c0       	rjmp	.+194    	; 0x216a <_fpadd_parts+0x17a>
    20a8:	18 16       	cp	r1, r24
    20aa:	19 06       	cpc	r1, r25
    20ac:	6c f5       	brge	.+90     	; 0x2108 <_fpadd_parts+0x118>
    20ae:	37 01       	movw	r6, r14
    20b0:	48 01       	movw	r8, r16
    20b2:	0a 2c       	mov	r0, r10
    20b4:	04 c0       	rjmp	.+8      	; 0x20be <_fpadd_parts+0xce>
    20b6:	96 94       	lsr	r9
    20b8:	87 94       	ror	r8
    20ba:	77 94       	ror	r7
    20bc:	67 94       	ror	r6
    20be:	0a 94       	dec	r0
    20c0:	d2 f7       	brpl	.-12     	; 0x20b6 <_fpadd_parts+0xc6>
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a0 e0       	ldi	r26, 0x00	; 0
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	0a 2c       	mov	r0, r10
    20cc:	04 c0       	rjmp	.+8      	; 0x20d6 <_fpadd_parts+0xe6>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	aa 1f       	adc	r26, r26
    20d4:	bb 1f       	adc	r27, r27
    20d6:	0a 94       	dec	r0
    20d8:	d2 f7       	brpl	.-12     	; 0x20ce <_fpadd_parts+0xde>
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	a1 09       	sbc	r26, r1
    20de:	b1 09       	sbc	r27, r1
    20e0:	8e 21       	and	r24, r14
    20e2:	9f 21       	and	r25, r15
    20e4:	a0 23       	and	r26, r16
    20e6:	b1 23       	and	r27, r17
    20e8:	ee 24       	eor	r14, r14
    20ea:	ff 24       	eor	r15, r15
    20ec:	87 01       	movw	r16, r14
    20ee:	e3 94       	inc	r14
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	a1 05       	cpc	r26, r1
    20f4:	b1 05       	cpc	r27, r1
    20f6:	19 f4       	brne	.+6      	; 0x20fe <_fpadd_parts+0x10e>
    20f8:	ee 24       	eor	r14, r14
    20fa:	ff 24       	eor	r15, r15
    20fc:	87 01       	movw	r16, r14
    20fe:	e6 28       	or	r14, r6
    2100:	f7 28       	or	r15, r7
    2102:	08 29       	or	r16, r8
    2104:	19 29       	or	r17, r9
    2106:	3c c0       	rjmp	.+120    	; 0x2180 <_fpadd_parts+0x190>
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	d1 f1       	breq	.+116    	; 0x2180 <_fpadd_parts+0x190>
    210c:	ca 0c       	add	r12, r10
    210e:	db 1c       	adc	r13, r11
    2110:	39 01       	movw	r6, r18
    2112:	4a 01       	movw	r8, r20
    2114:	0a 2c       	mov	r0, r10
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <_fpadd_parts+0x130>
    2118:	96 94       	lsr	r9
    211a:	87 94       	ror	r8
    211c:	77 94       	ror	r7
    211e:	67 94       	ror	r6
    2120:	0a 94       	dec	r0
    2122:	d2 f7       	brpl	.-12     	; 0x2118 <_fpadd_parts+0x128>
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a0 e0       	ldi	r26, 0x00	; 0
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	0a 2c       	mov	r0, r10
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <_fpadd_parts+0x148>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	aa 1f       	adc	r26, r26
    2136:	bb 1f       	adc	r27, r27
    2138:	0a 94       	dec	r0
    213a:	d2 f7       	brpl	.-12     	; 0x2130 <_fpadd_parts+0x140>
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	a1 09       	sbc	r26, r1
    2140:	b1 09       	sbc	r27, r1
    2142:	82 23       	and	r24, r18
    2144:	93 23       	and	r25, r19
    2146:	a4 23       	and	r26, r20
    2148:	b5 23       	and	r27, r21
    214a:	21 e0       	ldi	r18, 0x01	; 1
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	a1 05       	cpc	r26, r1
    2156:	b1 05       	cpc	r27, r1
    2158:	19 f4       	brne	.+6      	; 0x2160 <_fpadd_parts+0x170>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	a9 01       	movw	r20, r18
    2160:	26 29       	or	r18, r6
    2162:	37 29       	or	r19, r7
    2164:	48 29       	or	r20, r8
    2166:	59 29       	or	r21, r9
    2168:	0b c0       	rjmp	.+22     	; 0x2180 <_fpadd_parts+0x190>
    216a:	6c 14       	cp	r6, r12
    216c:	7d 04       	cpc	r7, r13
    216e:	24 f4       	brge	.+8      	; 0x2178 <_fpadd_parts+0x188>
    2170:	ee 24       	eor	r14, r14
    2172:	ff 24       	eor	r15, r15
    2174:	87 01       	movw	r16, r14
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <_fpadd_parts+0x190>
    2178:	63 01       	movw	r12, r6
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	a9 01       	movw	r20, r18
    2180:	81 81       	ldd	r24, Z+1	; 0x01
    2182:	fb 01       	movw	r30, r22
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	89 17       	cp	r24, r25
    2188:	09 f4       	brne	.+2      	; 0x218c <_fpadd_parts+0x19c>
    218a:	45 c0       	rjmp	.+138    	; 0x2216 <__stack+0x17>
    218c:	88 23       	and	r24, r24
    218e:	49 f0       	breq	.+18     	; 0x21a2 <_fpadd_parts+0x1b2>
    2190:	d8 01       	movw	r26, r16
    2192:	c7 01       	movw	r24, r14
    2194:	82 1b       	sub	r24, r18
    2196:	93 0b       	sbc	r25, r19
    2198:	a4 0b       	sbc	r26, r20
    219a:	b5 0b       	sbc	r27, r21
    219c:	9c 01       	movw	r18, r24
    219e:	ad 01       	movw	r20, r26
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <_fpadd_parts+0x1ba>
    21a2:	2e 19       	sub	r18, r14
    21a4:	3f 09       	sbc	r19, r15
    21a6:	40 0b       	sbc	r20, r16
    21a8:	51 0b       	sbc	r21, r17
    21aa:	57 fd       	sbrc	r21, 7
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <_fpadd_parts+0x1c6>
    21ae:	19 82       	std	Y+1, r1	; 0x01
    21b0:	db 82       	std	Y+3, r13	; 0x03
    21b2:	ca 82       	std	Y+2, r12	; 0x02
    21b4:	0b c0       	rjmp	.+22     	; 0x21cc <_fpadd_parts+0x1dc>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	db 82       	std	Y+3, r13	; 0x03
    21bc:	ca 82       	std	Y+2, r12	; 0x02
    21be:	50 95       	com	r21
    21c0:	40 95       	com	r20
    21c2:	30 95       	com	r19
    21c4:	21 95       	neg	r18
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	4f 4f       	sbci	r20, 0xFF	; 255
    21ca:	5f 4f       	sbci	r21, 0xFF	; 255
    21cc:	2c 83       	std	Y+4, r18	; 0x04
    21ce:	3d 83       	std	Y+5, r19	; 0x05
    21d0:	4e 83       	std	Y+6, r20	; 0x06
    21d2:	5f 83       	std	Y+7, r21	; 0x07
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <_fpadd_parts+0x200>
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	aa 1f       	adc	r26, r26
    21dc:	bb 1f       	adc	r27, r27
    21de:	8c 83       	std	Y+4, r24	; 0x04
    21e0:	9d 83       	std	Y+5, r25	; 0x05
    21e2:	ae 83       	std	Y+6, r26	; 0x06
    21e4:	bf 83       	std	Y+7, r27	; 0x07
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9b 83       	std	Y+3, r25	; 0x03
    21ee:	8a 83       	std	Y+2, r24	; 0x02
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	9d 81       	ldd	r25, Y+5	; 0x05
    21f4:	ae 81       	ldd	r26, Y+6	; 0x06
    21f6:	bf 81       	ldd	r27, Y+7	; 0x07
    21f8:	9c 01       	movw	r18, r24
    21fa:	ad 01       	movw	r20, r26
    21fc:	21 50       	subi	r18, 0x01	; 1
    21fe:	30 40       	sbci	r19, 0x00	; 0
    2200:	40 40       	sbci	r20, 0x00	; 0
    2202:	50 40       	sbci	r21, 0x00	; 0
    2204:	2f 3f       	cpi	r18, 0xFF	; 255
    2206:	ef ef       	ldi	r30, 0xFF	; 255
    2208:	3e 07       	cpc	r19, r30
    220a:	ef ef       	ldi	r30, 0xFF	; 255
    220c:	4e 07       	cpc	r20, r30
    220e:	ef e3       	ldi	r30, 0x3F	; 63
    2210:	5e 07       	cpc	r21, r30
    2212:	08 f3       	brcs	.-62     	; 0x21d6 <_fpadd_parts+0x1e6>
    2214:	0b c0       	rjmp	.+22     	; 0x222c <__stack+0x2d>
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	db 82       	std	Y+3, r13	; 0x03
    221a:	ca 82       	std	Y+2, r12	; 0x02
    221c:	2e 0d       	add	r18, r14
    221e:	3f 1d       	adc	r19, r15
    2220:	40 1f       	adc	r20, r16
    2222:	51 1f       	adc	r21, r17
    2224:	2c 83       	std	Y+4, r18	; 0x04
    2226:	3d 83       	std	Y+5, r19	; 0x05
    2228:	4e 83       	std	Y+6, r20	; 0x06
    222a:	5f 83       	std	Y+7, r21	; 0x07
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	88 83       	st	Y, r24
    2230:	2c 81       	ldd	r18, Y+4	; 0x04
    2232:	3d 81       	ldd	r19, Y+5	; 0x05
    2234:	4e 81       	ldd	r20, Y+6	; 0x06
    2236:	5f 81       	ldd	r21, Y+7	; 0x07
    2238:	57 ff       	sbrs	r21, 7
    223a:	1d c0       	rjmp	.+58     	; 0x2276 <__stack+0x77>
    223c:	da 01       	movw	r26, r20
    223e:	c9 01       	movw	r24, r18
    2240:	81 70       	andi	r24, 0x01	; 1
    2242:	90 70       	andi	r25, 0x00	; 0
    2244:	a0 70       	andi	r26, 0x00	; 0
    2246:	b0 70       	andi	r27, 0x00	; 0
    2248:	56 95       	lsr	r21
    224a:	47 95       	ror	r20
    224c:	37 95       	ror	r19
    224e:	27 95       	ror	r18
    2250:	82 2b       	or	r24, r18
    2252:	93 2b       	or	r25, r19
    2254:	a4 2b       	or	r26, r20
    2256:	b5 2b       	or	r27, r21
    2258:	8c 83       	std	Y+4, r24	; 0x04
    225a:	9d 83       	std	Y+5, r25	; 0x05
    225c:	ae 83       	std	Y+6, r26	; 0x06
    225e:	bf 83       	std	Y+7, r27	; 0x07
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <__stack+0x77>
    226c:	e7 e3       	ldi	r30, 0x37	; 55
    226e:	f3 e0       	ldi	r31, 0x03	; 3
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <__stack+0x79>
    2272:	fb 01       	movw	r30, r22
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <__stack+0x79>
    2276:	fe 01       	movw	r30, r28
    2278:	cf 01       	movw	r24, r30
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	ee e0       	ldi	r30, 0x0E	; 14
    2280:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__epilogue_restores__+0x8>

00002284 <__addsf3>:
    2284:	a0 e2       	ldi	r26, 0x20	; 32
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e4       	ldi	r30, 0x48	; 72
    228a:	f1 e1       	ldi	r31, 0x11	; 17
    228c:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
    2290:	69 83       	std	Y+1, r22	; 0x01
    2292:	7a 83       	std	Y+2, r23	; 0x02
    2294:	8b 83       	std	Y+3, r24	; 0x03
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	2d 83       	std	Y+5, r18	; 0x05
    229a:	3e 83       	std	Y+6, r19	; 0x06
    229c:	4f 83       	std	Y+7, r20	; 0x07
    229e:	58 87       	std	Y+8, r21	; 0x08
    22a0:	89 e0       	ldi	r24, 0x09	; 9
    22a2:	e8 2e       	mov	r14, r24
    22a4:	f1 2c       	mov	r15, r1
    22a6:	ec 0e       	add	r14, r28
    22a8:	fd 1e       	adc	r15, r29
    22aa:	ce 01       	movw	r24, r28
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	b7 01       	movw	r22, r14
    22b0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    22b4:	8e 01       	movw	r16, r28
    22b6:	0f 5e       	subi	r16, 0xEF	; 239
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	ce 01       	movw	r24, r28
    22bc:	05 96       	adiw	r24, 0x05	; 5
    22be:	b8 01       	movw	r22, r16
    22c0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    22c4:	c7 01       	movw	r24, r14
    22c6:	b8 01       	movw	r22, r16
    22c8:	ae 01       	movw	r20, r28
    22ca:	47 5e       	subi	r20, 0xE7	; 231
    22cc:	5f 4f       	sbci	r21, 0xFF	; 255
    22ce:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_fpadd_parts>
    22d2:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__pack_f>
    22d6:	a0 96       	adiw	r28, 0x20	; 32
    22d8:	e6 e0       	ldi	r30, 0x06	; 6
    22da:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

000022de <__subsf3>:
    22de:	a0 e2       	ldi	r26, 0x20	; 32
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e5 e7       	ldi	r30, 0x75	; 117
    22e4:	f1 e1       	ldi	r31, 0x11	; 17
    22e6:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
    22ea:	69 83       	std	Y+1, r22	; 0x01
    22ec:	7a 83       	std	Y+2, r23	; 0x02
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	2d 83       	std	Y+5, r18	; 0x05
    22f4:	3e 83       	std	Y+6, r19	; 0x06
    22f6:	4f 83       	std	Y+7, r20	; 0x07
    22f8:	58 87       	std	Y+8, r21	; 0x08
    22fa:	8e 01       	movw	r16, r28
    22fc:	07 5f       	subi	r16, 0xF7	; 247
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	ce 01       	movw	r24, r28
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	b8 01       	movw	r22, r16
    2306:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    230a:	91 e1       	ldi	r25, 0x11	; 17
    230c:	e9 2e       	mov	r14, r25
    230e:	f1 2c       	mov	r15, r1
    2310:	ec 0e       	add	r14, r28
    2312:	fd 1e       	adc	r15, r29
    2314:	ce 01       	movw	r24, r28
    2316:	05 96       	adiw	r24, 0x05	; 5
    2318:	b7 01       	movw	r22, r14
    231a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    231e:	8a 89       	ldd	r24, Y+18	; 0x12
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	89 27       	eor	r24, r25
    2324:	8a 8b       	std	Y+18, r24	; 0x12
    2326:	c8 01       	movw	r24, r16
    2328:	b7 01       	movw	r22, r14
    232a:	ae 01       	movw	r20, r28
    232c:	47 5e       	subi	r20, 0xE7	; 231
    232e:	5f 4f       	sbci	r21, 0xFF	; 255
    2330:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_fpadd_parts>
    2334:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__pack_f>
    2338:	a0 96       	adiw	r28, 0x20	; 32
    233a:	e6 e0       	ldi	r30, 0x06	; 6
    233c:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

00002340 <__mulsf3>:
    2340:	a0 e2       	ldi	r26, 0x20	; 32
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e6 ea       	ldi	r30, 0xA6	; 166
    2346:	f1 e1       	ldi	r31, 0x11	; 17
    2348:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__prologue_saves__>
    234c:	69 83       	std	Y+1, r22	; 0x01
    234e:	7a 83       	std	Y+2, r23	; 0x02
    2350:	8b 83       	std	Y+3, r24	; 0x03
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	2d 83       	std	Y+5, r18	; 0x05
    2356:	3e 83       	std	Y+6, r19	; 0x06
    2358:	4f 83       	std	Y+7, r20	; 0x07
    235a:	58 87       	std	Y+8, r21	; 0x08
    235c:	ce 01       	movw	r24, r28
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	be 01       	movw	r22, r28
    2362:	67 5f       	subi	r22, 0xF7	; 247
    2364:	7f 4f       	sbci	r23, 0xFF	; 255
    2366:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    236a:	ce 01       	movw	r24, r28
    236c:	05 96       	adiw	r24, 0x05	; 5
    236e:	be 01       	movw	r22, r28
    2370:	6f 5e       	subi	r22, 0xEF	; 239
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    2378:	99 85       	ldd	r25, Y+9	; 0x09
    237a:	92 30       	cpi	r25, 0x02	; 2
    237c:	78 f0       	brcs	.+30     	; 0x239c <__mulsf3+0x5c>
    237e:	89 89       	ldd	r24, Y+17	; 0x11
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	c0 f0       	brcs	.+48     	; 0x23b4 <__mulsf3+0x74>
    2384:	94 30       	cpi	r25, 0x04	; 4
    2386:	19 f4       	brne	.+6      	; 0x238e <__mulsf3+0x4e>
    2388:	82 30       	cpi	r24, 0x02	; 2
    238a:	41 f4       	brne	.+16     	; 0x239c <__mulsf3+0x5c>
    238c:	cb c0       	rjmp	.+406    	; 0x2524 <__mulsf3+0x1e4>
    238e:	84 30       	cpi	r24, 0x04	; 4
    2390:	19 f4       	brne	.+6      	; 0x2398 <__mulsf3+0x58>
    2392:	92 30       	cpi	r25, 0x02	; 2
    2394:	79 f4       	brne	.+30     	; 0x23b4 <__mulsf3+0x74>
    2396:	c6 c0       	rjmp	.+396    	; 0x2524 <__mulsf3+0x1e4>
    2398:	92 30       	cpi	r25, 0x02	; 2
    239a:	51 f4       	brne	.+20     	; 0x23b0 <__mulsf3+0x70>
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	2a 85       	ldd	r18, Y+10	; 0x0a
    23a0:	9a 89       	ldd	r25, Y+18	; 0x12
    23a2:	29 17       	cp	r18, r25
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <__mulsf3+0x68>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	8a 87       	std	Y+10, r24	; 0x0a
    23aa:	ce 01       	movw	r24, r28
    23ac:	09 96       	adiw	r24, 0x09	; 9
    23ae:	bc c0       	rjmp	.+376    	; 0x2528 <__mulsf3+0x1e8>
    23b0:	82 30       	cpi	r24, 0x02	; 2
    23b2:	51 f4       	brne	.+20     	; 0x23c8 <__mulsf3+0x88>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    23b8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ba:	29 17       	cp	r18, r25
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <__mulsf3+0x80>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	8a 8b       	std	Y+18, r24	; 0x12
    23c2:	ce 01       	movw	r24, r28
    23c4:	41 96       	adiw	r24, 0x11	; 17
    23c6:	b0 c0       	rjmp	.+352    	; 0x2528 <__mulsf3+0x1e8>
    23c8:	6d 84       	ldd	r6, Y+13	; 0x0d
    23ca:	7e 84       	ldd	r7, Y+14	; 0x0e
    23cc:	8f 84       	ldd	r8, Y+15	; 0x0f
    23ce:	98 88       	ldd	r9, Y+16	; 0x10
    23d0:	ed 88       	ldd	r14, Y+21	; 0x15
    23d2:	fe 88       	ldd	r15, Y+22	; 0x16
    23d4:	0f 89       	ldd	r16, Y+23	; 0x17
    23d6:	18 8d       	ldd	r17, Y+24	; 0x18
    23d8:	e0 e2       	ldi	r30, 0x20	; 32
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	dc 01       	movw	r26, r24
    23e2:	aa 24       	eor	r10, r10
    23e4:	bb 24       	eor	r11, r11
    23e6:	65 01       	movw	r12, r10
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	a9 01       	movw	r20, r18
    23ee:	b3 01       	movw	r22, r6
    23f0:	61 70       	andi	r22, 0x01	; 1
    23f2:	70 70       	andi	r23, 0x00	; 0
    23f4:	61 15       	cp	r22, r1
    23f6:	71 05       	cpc	r23, r1
    23f8:	d1 f0       	breq	.+52     	; 0x242e <__mulsf3+0xee>
    23fa:	2e 0d       	add	r18, r14
    23fc:	3f 1d       	adc	r19, r15
    23fe:	40 1f       	adc	r20, r16
    2400:	51 1f       	adc	r21, r17
    2402:	15 01       	movw	r2, r10
    2404:	26 01       	movw	r4, r12
    2406:	28 0e       	add	r2, r24
    2408:	39 1e       	adc	r3, r25
    240a:	4a 1e       	adc	r4, r26
    240c:	5b 1e       	adc	r5, r27
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	2e 15       	cp	r18, r14
    2418:	3f 05       	cpc	r19, r15
    241a:	40 07       	cpc	r20, r16
    241c:	51 07       	cpc	r21, r17
    241e:	18 f0       	brcs	.+6      	; 0x2426 <__mulsf3+0xe6>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	dc 01       	movw	r26, r24
    2426:	82 0d       	add	r24, r2
    2428:	93 1d       	adc	r25, r3
    242a:	a4 1d       	adc	r26, r4
    242c:	b5 1d       	adc	r27, r5
    242e:	aa 0c       	add	r10, r10
    2430:	bb 1c       	adc	r11, r11
    2432:	cc 1c       	adc	r12, r12
    2434:	dd 1c       	adc	r13, r13
    2436:	17 ff       	sbrs	r17, 7
    2438:	09 c0       	rjmp	.+18     	; 0x244c <__mulsf3+0x10c>
    243a:	61 e0       	ldi	r22, 0x01	; 1
    243c:	26 2e       	mov	r2, r22
    243e:	31 2c       	mov	r3, r1
    2440:	41 2c       	mov	r4, r1
    2442:	51 2c       	mov	r5, r1
    2444:	a2 28       	or	r10, r2
    2446:	b3 28       	or	r11, r3
    2448:	c4 28       	or	r12, r4
    244a:	d5 28       	or	r13, r5
    244c:	31 97       	sbiw	r30, 0x01	; 1
    244e:	49 f0       	breq	.+18     	; 0x2462 <__mulsf3+0x122>
    2450:	ee 0c       	add	r14, r14
    2452:	ff 1c       	adc	r15, r15
    2454:	00 1f       	adc	r16, r16
    2456:	11 1f       	adc	r17, r17
    2458:	96 94       	lsr	r9
    245a:	87 94       	ror	r8
    245c:	77 94       	ror	r7
    245e:	67 94       	ror	r6
    2460:	c6 cf       	rjmp	.-116    	; 0x23ee <__mulsf3+0xae>
    2462:	6b 89       	ldd	r22, Y+19	; 0x13
    2464:	7c 89       	ldd	r23, Y+20	; 0x14
    2466:	eb 85       	ldd	r30, Y+11	; 0x0b
    2468:	fc 85       	ldd	r31, Y+12	; 0x0c
    246a:	6e 0f       	add	r22, r30
    246c:	7f 1f       	adc	r23, r31
    246e:	6e 5f       	subi	r22, 0xFE	; 254
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	7c 8f       	std	Y+28, r23	; 0x1c
    2474:	6b 8f       	std	Y+27, r22	; 0x1b
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	ea 85       	ldd	r30, Y+10	; 0x0a
    247a:	7a 89       	ldd	r23, Y+18	; 0x12
    247c:	e7 17       	cp	r30, r23
    247e:	09 f4       	brne	.+2      	; 0x2482 <__mulsf3+0x142>
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	6a 8f       	std	Y+26, r22	; 0x1a
    2484:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2486:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2488:	10 c0       	rjmp	.+32     	; 0x24aa <__mulsf3+0x16a>
    248a:	fc 01       	movw	r30, r24
    248c:	e1 70       	andi	r30, 0x01	; 1
    248e:	f0 70       	andi	r31, 0x00	; 0
    2490:	30 97       	sbiw	r30, 0x00	; 0
    2492:	29 f0       	breq	.+10     	; 0x249e <__mulsf3+0x15e>
    2494:	56 95       	lsr	r21
    2496:	47 95       	ror	r20
    2498:	37 95       	ror	r19
    249a:	27 95       	ror	r18
    249c:	50 68       	ori	r21, 0x80	; 128
    249e:	b6 95       	lsr	r27
    24a0:	a7 95       	ror	r26
    24a2:	97 95       	ror	r25
    24a4:	87 95       	ror	r24
    24a6:	6f 5f       	subi	r22, 0xFF	; 255
    24a8:	7f 4f       	sbci	r23, 0xFF	; 255
    24aa:	b7 fd       	sbrc	r27, 7
    24ac:	ee cf       	rjmp	.-36     	; 0x248a <__mulsf3+0x14a>
    24ae:	0c c0       	rjmp	.+24     	; 0x24c8 <__mulsf3+0x188>
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	aa 1f       	adc	r26, r26
    24b6:	bb 1f       	adc	r27, r27
    24b8:	57 fd       	sbrc	r21, 7
    24ba:	81 60       	ori	r24, 0x01	; 1
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	44 1f       	adc	r20, r20
    24c2:	55 1f       	adc	r21, r21
    24c4:	61 50       	subi	r22, 0x01	; 1
    24c6:	70 40       	sbci	r23, 0x00	; 0
    24c8:	80 30       	cpi	r24, 0x00	; 0
    24ca:	e0 e0       	ldi	r30, 0x00	; 0
    24cc:	9e 07       	cpc	r25, r30
    24ce:	e0 e0       	ldi	r30, 0x00	; 0
    24d0:	ae 07       	cpc	r26, r30
    24d2:	e0 e4       	ldi	r30, 0x40	; 64
    24d4:	be 07       	cpc	r27, r30
    24d6:	60 f3       	brcs	.-40     	; 0x24b0 <__mulsf3+0x170>
    24d8:	6b 8f       	std	Y+27, r22	; 0x1b
    24da:	7c 8f       	std	Y+28, r23	; 0x1c
    24dc:	6f e7       	ldi	r22, 0x7F	; 127
    24de:	e6 2e       	mov	r14, r22
    24e0:	f1 2c       	mov	r15, r1
    24e2:	01 2d       	mov	r16, r1
    24e4:	11 2d       	mov	r17, r1
    24e6:	e8 22       	and	r14, r24
    24e8:	f9 22       	and	r15, r25
    24ea:	0a 23       	and	r16, r26
    24ec:	1b 23       	and	r17, r27
    24ee:	60 e4       	ldi	r22, 0x40	; 64
    24f0:	e6 16       	cp	r14, r22
    24f2:	f1 04       	cpc	r15, r1
    24f4:	01 05       	cpc	r16, r1
    24f6:	11 05       	cpc	r17, r1
    24f8:	61 f4       	brne	.+24     	; 0x2512 <__mulsf3+0x1d2>
    24fa:	87 fd       	sbrc	r24, 7
    24fc:	0a c0       	rjmp	.+20     	; 0x2512 <__mulsf3+0x1d2>
    24fe:	21 15       	cp	r18, r1
    2500:	31 05       	cpc	r19, r1
    2502:	41 05       	cpc	r20, r1
    2504:	51 05       	cpc	r21, r1
    2506:	29 f0       	breq	.+10     	; 0x2512 <__mulsf3+0x1d2>
    2508:	80 5c       	subi	r24, 0xC0	; 192
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	af 4f       	sbci	r26, 0xFF	; 255
    250e:	bf 4f       	sbci	r27, 0xFF	; 255
    2510:	80 78       	andi	r24, 0x80	; 128
    2512:	8d 8f       	std	Y+29, r24	; 0x1d
    2514:	9e 8f       	std	Y+30, r25	; 0x1e
    2516:	af 8f       	std	Y+31, r26	; 0x1f
    2518:	b8 a3       	std	Y+32, r27	; 0x20
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	89 8f       	std	Y+25, r24	; 0x19
    251e:	ce 01       	movw	r24, r28
    2520:	49 96       	adiw	r24, 0x19	; 25
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <__mulsf3+0x1e8>
    2524:	87 e3       	ldi	r24, 0x37	; 55
    2526:	93 e0       	ldi	r25, 0x03	; 3
    2528:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__pack_f>
    252c:	a0 96       	adiw	r28, 0x20	; 32
    252e:	e2 e1       	ldi	r30, 0x12	; 18
    2530:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__epilogue_restores__>

00002534 <__divsf3>:
    2534:	a8 e1       	ldi	r26, 0x18	; 24
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e0 ea       	ldi	r30, 0xA0	; 160
    253a:	f2 e1       	ldi	r31, 0x12	; 18
    253c:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__prologue_saves__+0x10>
    2540:	69 83       	std	Y+1, r22	; 0x01
    2542:	7a 83       	std	Y+2, r23	; 0x02
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	2d 83       	std	Y+5, r18	; 0x05
    254a:	3e 83       	std	Y+6, r19	; 0x06
    254c:	4f 83       	std	Y+7, r20	; 0x07
    254e:	58 87       	std	Y+8, r21	; 0x08
    2550:	8e 01       	movw	r16, r28
    2552:	07 5f       	subi	r16, 0xF7	; 247
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	ce 01       	movw	r24, r28
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	b8 01       	movw	r22, r16
    255c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    2560:	81 e1       	ldi	r24, 0x11	; 17
    2562:	e8 2e       	mov	r14, r24
    2564:	f1 2c       	mov	r15, r1
    2566:	ec 0e       	add	r14, r28
    2568:	fd 1e       	adc	r15, r29
    256a:	ce 01       	movw	r24, r28
    256c:	05 96       	adiw	r24, 0x05	; 5
    256e:	b7 01       	movw	r22, r14
    2570:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    2574:	99 85       	ldd	r25, Y+9	; 0x09
    2576:	92 30       	cpi	r25, 0x02	; 2
    2578:	08 f4       	brcc	.+2      	; 0x257c <__divsf3+0x48>
    257a:	83 c0       	rjmp	.+262    	; 0x2682 <__divsf3+0x14e>
    257c:	89 89       	ldd	r24, Y+17	; 0x11
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	08 f4       	brcc	.+2      	; 0x2584 <__divsf3+0x50>
    2582:	7b c0       	rjmp	.+246    	; 0x267a <__divsf3+0x146>
    2584:	2a 85       	ldd	r18, Y+10	; 0x0a
    2586:	3a 89       	ldd	r19, Y+18	; 0x12
    2588:	23 27       	eor	r18, r19
    258a:	2a 87       	std	Y+10, r18	; 0x0a
    258c:	94 30       	cpi	r25, 0x04	; 4
    258e:	11 f0       	breq	.+4      	; 0x2594 <__divsf3+0x60>
    2590:	92 30       	cpi	r25, 0x02	; 2
    2592:	21 f4       	brne	.+8      	; 0x259c <__divsf3+0x68>
    2594:	98 17       	cp	r25, r24
    2596:	09 f0       	breq	.+2      	; 0x259a <__divsf3+0x66>
    2598:	6c c0       	rjmp	.+216    	; 0x2672 <__divsf3+0x13e>
    259a:	71 c0       	rjmp	.+226    	; 0x267e <__divsf3+0x14a>
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	39 f4       	brne	.+14     	; 0x25ae <__divsf3+0x7a>
    25a0:	1d 86       	std	Y+13, r1	; 0x0d
    25a2:	1e 86       	std	Y+14, r1	; 0x0e
    25a4:	1f 86       	std	Y+15, r1	; 0x0f
    25a6:	18 8a       	std	Y+16, r1	; 0x10
    25a8:	1c 86       	std	Y+12, r1	; 0x0c
    25aa:	1b 86       	std	Y+11, r1	; 0x0b
    25ac:	6a c0       	rjmp	.+212    	; 0x2682 <__divsf3+0x14e>
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	19 f4       	brne	.+6      	; 0x25b8 <__divsf3+0x84>
    25b2:	84 e0       	ldi	r24, 0x04	; 4
    25b4:	89 87       	std	Y+9, r24	; 0x09
    25b6:	65 c0       	rjmp	.+202    	; 0x2682 <__divsf3+0x14e>
    25b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    25bc:	2b 89       	ldd	r18, Y+19	; 0x13
    25be:	3c 89       	ldd	r19, Y+20	; 0x14
    25c0:	82 1b       	sub	r24, r18
    25c2:	93 0b       	sbc	r25, r19
    25c4:	9c 87       	std	Y+12, r25	; 0x0c
    25c6:	8b 87       	std	Y+11, r24	; 0x0b
    25c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    25ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    25cc:	4f 85       	ldd	r20, Y+15	; 0x0f
    25ce:	58 89       	ldd	r21, Y+16	; 0x10
    25d0:	ed 88       	ldd	r14, Y+21	; 0x15
    25d2:	fe 88       	ldd	r15, Y+22	; 0x16
    25d4:	0f 89       	ldd	r16, Y+23	; 0x17
    25d6:	18 8d       	ldd	r17, Y+24	; 0x18
    25d8:	2e 15       	cp	r18, r14
    25da:	3f 05       	cpc	r19, r15
    25dc:	40 07       	cpc	r20, r16
    25de:	51 07       	cpc	r21, r17
    25e0:	38 f4       	brcc	.+14     	; 0x25f0 <__divsf3+0xbc>
    25e2:	22 0f       	add	r18, r18
    25e4:	33 1f       	adc	r19, r19
    25e6:	44 1f       	adc	r20, r20
    25e8:	55 1f       	adc	r21, r21
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	9c 87       	std	Y+12, r25	; 0x0c
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	6f e1       	ldi	r22, 0x1F	; 31
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	a1 2c       	mov	r10, r1
    25f6:	b1 2c       	mov	r11, r1
    25f8:	c1 2c       	mov	r12, r1
    25fa:	a0 e4       	ldi	r26, 0x40	; 64
    25fc:	da 2e       	mov	r13, r26
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	dc 01       	movw	r26, r24
    2604:	2e 15       	cp	r18, r14
    2606:	3f 05       	cpc	r19, r15
    2608:	40 07       	cpc	r20, r16
    260a:	51 07       	cpc	r21, r17
    260c:	40 f0       	brcs	.+16     	; 0x261e <__divsf3+0xea>
    260e:	8a 29       	or	r24, r10
    2610:	9b 29       	or	r25, r11
    2612:	ac 29       	or	r26, r12
    2614:	bd 29       	or	r27, r13
    2616:	2e 19       	sub	r18, r14
    2618:	3f 09       	sbc	r19, r15
    261a:	40 0b       	sbc	r20, r16
    261c:	51 0b       	sbc	r21, r17
    261e:	d6 94       	lsr	r13
    2620:	c7 94       	ror	r12
    2622:	b7 94       	ror	r11
    2624:	a7 94       	ror	r10
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	44 1f       	adc	r20, r20
    262c:	55 1f       	adc	r21, r21
    262e:	61 50       	subi	r22, 0x01	; 1
    2630:	70 40       	sbci	r23, 0x00	; 0
    2632:	41 f7       	brne	.-48     	; 0x2604 <__divsf3+0xd0>
    2634:	6f e7       	ldi	r22, 0x7F	; 127
    2636:	e6 2e       	mov	r14, r22
    2638:	f1 2c       	mov	r15, r1
    263a:	01 2d       	mov	r16, r1
    263c:	11 2d       	mov	r17, r1
    263e:	e8 22       	and	r14, r24
    2640:	f9 22       	and	r15, r25
    2642:	0a 23       	and	r16, r26
    2644:	1b 23       	and	r17, r27
    2646:	60 e4       	ldi	r22, 0x40	; 64
    2648:	e6 16       	cp	r14, r22
    264a:	f1 04       	cpc	r15, r1
    264c:	01 05       	cpc	r16, r1
    264e:	11 05       	cpc	r17, r1
    2650:	61 f4       	brne	.+24     	; 0x266a <__divsf3+0x136>
    2652:	87 fd       	sbrc	r24, 7
    2654:	0a c0       	rjmp	.+20     	; 0x266a <__divsf3+0x136>
    2656:	21 15       	cp	r18, r1
    2658:	31 05       	cpc	r19, r1
    265a:	41 05       	cpc	r20, r1
    265c:	51 05       	cpc	r21, r1
    265e:	29 f0       	breq	.+10     	; 0x266a <__divsf3+0x136>
    2660:	80 5c       	subi	r24, 0xC0	; 192
    2662:	9f 4f       	sbci	r25, 0xFF	; 255
    2664:	af 4f       	sbci	r26, 0xFF	; 255
    2666:	bf 4f       	sbci	r27, 0xFF	; 255
    2668:	80 78       	andi	r24, 0x80	; 128
    266a:	8d 87       	std	Y+13, r24	; 0x0d
    266c:	9e 87       	std	Y+14, r25	; 0x0e
    266e:	af 87       	std	Y+15, r26	; 0x0f
    2670:	b8 8b       	std	Y+16, r27	; 0x10
    2672:	8e 01       	movw	r16, r28
    2674:	07 5f       	subi	r16, 0xF7	; 247
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <__divsf3+0x14e>
    267a:	87 01       	movw	r16, r14
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <__divsf3+0x14e>
    267e:	07 e3       	ldi	r16, 0x37	; 55
    2680:	13 e0       	ldi	r17, 0x03	; 3
    2682:	c8 01       	movw	r24, r16
    2684:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__pack_f>
    2688:	68 96       	adiw	r28, 0x18	; 24
    268a:	ea e0       	ldi	r30, 0x0A	; 10
    268c:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__epilogue_restores__+0x10>

00002690 <__gtsf2>:
    2690:	a8 e1       	ldi	r26, 0x18	; 24
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f3 e1       	ldi	r31, 0x13	; 19
    2698:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
    269c:	69 83       	std	Y+1, r22	; 0x01
    269e:	7a 83       	std	Y+2, r23	; 0x02
    26a0:	8b 83       	std	Y+3, r24	; 0x03
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	2d 83       	std	Y+5, r18	; 0x05
    26a6:	3e 83       	std	Y+6, r19	; 0x06
    26a8:	4f 83       	std	Y+7, r20	; 0x07
    26aa:	58 87       	std	Y+8, r21	; 0x08
    26ac:	8e 01       	movw	r16, r28
    26ae:	07 5f       	subi	r16, 0xF7	; 247
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	ce 01       	movw	r24, r28
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	b8 01       	movw	r22, r16
    26b8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    26bc:	81 e1       	ldi	r24, 0x11	; 17
    26be:	e8 2e       	mov	r14, r24
    26c0:	f1 2c       	mov	r15, r1
    26c2:	ec 0e       	add	r14, r28
    26c4:	fd 1e       	adc	r15, r29
    26c6:	ce 01       	movw	r24, r28
    26c8:	05 96       	adiw	r24, 0x05	; 5
    26ca:	b7 01       	movw	r22, r14
    26cc:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	40 f0       	brcs	.+16     	; 0x26e6 <__gtsf2+0x56>
    26d6:	89 89       	ldd	r24, Y+17	; 0x11
    26d8:	82 30       	cpi	r24, 0x02	; 2
    26da:	28 f0       	brcs	.+10     	; 0x26e6 <__gtsf2+0x56>
    26dc:	c8 01       	movw	r24, r16
    26de:	b7 01       	movw	r22, r14
    26e0:	0e 94 92 16 	call	0x2d24	; 0x2d24 <__fpcmp_parts_f>
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <__gtsf2+0x58>
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	68 96       	adiw	r28, 0x18	; 24
    26ea:	e6 e0       	ldi	r30, 0x06	; 6
    26ec:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

000026f0 <__gesf2>:
    26f0:	a8 e1       	ldi	r26, 0x18	; 24
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	ee e7       	ldi	r30, 0x7E	; 126
    26f6:	f3 e1       	ldi	r31, 0x13	; 19
    26f8:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
    26fc:	69 83       	std	Y+1, r22	; 0x01
    26fe:	7a 83       	std	Y+2, r23	; 0x02
    2700:	8b 83       	std	Y+3, r24	; 0x03
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	2d 83       	std	Y+5, r18	; 0x05
    2706:	3e 83       	std	Y+6, r19	; 0x06
    2708:	4f 83       	std	Y+7, r20	; 0x07
    270a:	58 87       	std	Y+8, r21	; 0x08
    270c:	8e 01       	movw	r16, r28
    270e:	07 5f       	subi	r16, 0xF7	; 247
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	ce 01       	movw	r24, r28
    2714:	01 96       	adiw	r24, 0x01	; 1
    2716:	b8 01       	movw	r22, r16
    2718:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    271c:	81 e1       	ldi	r24, 0x11	; 17
    271e:	e8 2e       	mov	r14, r24
    2720:	f1 2c       	mov	r15, r1
    2722:	ec 0e       	add	r14, r28
    2724:	fd 1e       	adc	r15, r29
    2726:	ce 01       	movw	r24, r28
    2728:	05 96       	adiw	r24, 0x05	; 5
    272a:	b7 01       	movw	r22, r14
    272c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	40 f0       	brcs	.+16     	; 0x2746 <__gesf2+0x56>
    2736:	89 89       	ldd	r24, Y+17	; 0x11
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	28 f0       	brcs	.+10     	; 0x2746 <__gesf2+0x56>
    273c:	c8 01       	movw	r24, r16
    273e:	b7 01       	movw	r22, r14
    2740:	0e 94 92 16 	call	0x2d24	; 0x2d24 <__fpcmp_parts_f>
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <__gesf2+0x58>
    2746:	8f ef       	ldi	r24, 0xFF	; 255
    2748:	68 96       	adiw	r28, 0x18	; 24
    274a:	e6 e0       	ldi	r30, 0x06	; 6
    274c:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

00002750 <__ltsf2>:
    2750:	a8 e1       	ldi	r26, 0x18	; 24
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	ee ea       	ldi	r30, 0xAE	; 174
    2756:	f3 e1       	ldi	r31, 0x13	; 19
    2758:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
    275c:	69 83       	std	Y+1, r22	; 0x01
    275e:	7a 83       	std	Y+2, r23	; 0x02
    2760:	8b 83       	std	Y+3, r24	; 0x03
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	2d 83       	std	Y+5, r18	; 0x05
    2766:	3e 83       	std	Y+6, r19	; 0x06
    2768:	4f 83       	std	Y+7, r20	; 0x07
    276a:	58 87       	std	Y+8, r21	; 0x08
    276c:	8e 01       	movw	r16, r28
    276e:	07 5f       	subi	r16, 0xF7	; 247
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	ce 01       	movw	r24, r28
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	b8 01       	movw	r22, r16
    2778:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    277c:	81 e1       	ldi	r24, 0x11	; 17
    277e:	e8 2e       	mov	r14, r24
    2780:	f1 2c       	mov	r15, r1
    2782:	ec 0e       	add	r14, r28
    2784:	fd 1e       	adc	r15, r29
    2786:	ce 01       	movw	r24, r28
    2788:	05 96       	adiw	r24, 0x05	; 5
    278a:	b7 01       	movw	r22, r14
    278c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	82 30       	cpi	r24, 0x02	; 2
    2794:	40 f0       	brcs	.+16     	; 0x27a6 <__ltsf2+0x56>
    2796:	89 89       	ldd	r24, Y+17	; 0x11
    2798:	82 30       	cpi	r24, 0x02	; 2
    279a:	28 f0       	brcs	.+10     	; 0x27a6 <__ltsf2+0x56>
    279c:	c8 01       	movw	r24, r16
    279e:	b7 01       	movw	r22, r14
    27a0:	0e 94 92 16 	call	0x2d24	; 0x2d24 <__fpcmp_parts_f>
    27a4:	01 c0       	rjmp	.+2      	; 0x27a8 <__ltsf2+0x58>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	68 96       	adiw	r28, 0x18	; 24
    27aa:	e6 e0       	ldi	r30, 0x06	; 6
    27ac:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

000027b0 <__floatsisf>:
    27b0:	a8 e0       	ldi	r26, 0x08	; 8
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ee ed       	ldi	r30, 0xDE	; 222
    27b6:	f3 e1       	ldi	r31, 0x13	; 19
    27b8:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
    27bc:	7b 01       	movw	r14, r22
    27be:	8c 01       	movw	r16, r24
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	d8 01       	movw	r26, r16
    27c6:	c7 01       	movw	r24, r14
    27c8:	88 27       	eor	r24, r24
    27ca:	b7 fd       	sbrc	r27, 7
    27cc:	83 95       	inc	r24
    27ce:	99 27       	eor	r25, r25
    27d0:	aa 27       	eor	r26, r26
    27d2:	bb 27       	eor	r27, r27
    27d4:	28 2f       	mov	r18, r24
    27d6:	8a 83       	std	Y+2, r24	; 0x02
    27d8:	e1 14       	cp	r14, r1
    27da:	f1 04       	cpc	r15, r1
    27dc:	01 05       	cpc	r16, r1
    27de:	11 05       	cpc	r17, r1
    27e0:	19 f4       	brne	.+6      	; 0x27e8 <__floatsisf+0x38>
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	37 c0       	rjmp	.+110    	; 0x2856 <__floatsisf+0xa6>
    27e8:	8e e1       	ldi	r24, 0x1E	; 30
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    27f0:	22 23       	and	r18, r18
    27f2:	89 f0       	breq	.+34     	; 0x2816 <__floatsisf+0x66>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	e8 16       	cp	r14, r24
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	f8 06       	cpc	r15, r24
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	08 07       	cpc	r16, r24
    2800:	80 e8       	ldi	r24, 0x80	; 128
    2802:	18 07       	cpc	r17, r24
    2804:	69 f1       	breq	.+90     	; 0x2860 <__floatsisf+0xb0>
    2806:	10 95       	com	r17
    2808:	00 95       	com	r16
    280a:	f0 94       	com	r15
    280c:	e0 94       	com	r14
    280e:	e1 1c       	adc	r14, r1
    2810:	f1 1c       	adc	r15, r1
    2812:	01 1d       	adc	r16, r1
    2814:	11 1d       	adc	r17, r1
    2816:	ed 82       	std	Y+5, r14	; 0x05
    2818:	fe 82       	std	Y+6, r15	; 0x06
    281a:	0f 83       	std	Y+7, r16	; 0x07
    281c:	18 87       	std	Y+8, r17	; 0x08
    281e:	c8 01       	movw	r24, r16
    2820:	b7 01       	movw	r22, r14
    2822:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__clzsi2>
    2826:	9c 01       	movw	r18, r24
    2828:	21 50       	subi	r18, 0x01	; 1
    282a:	30 40       	sbci	r19, 0x00	; 0
    282c:	12 16       	cp	r1, r18
    282e:	13 06       	cpc	r1, r19
    2830:	94 f4       	brge	.+36     	; 0x2856 <__floatsisf+0xa6>
    2832:	02 2e       	mov	r0, r18
    2834:	04 c0       	rjmp	.+8      	; 0x283e <__floatsisf+0x8e>
    2836:	ee 0c       	add	r14, r14
    2838:	ff 1c       	adc	r15, r15
    283a:	00 1f       	adc	r16, r16
    283c:	11 1f       	adc	r17, r17
    283e:	0a 94       	dec	r0
    2840:	d2 f7       	brpl	.-12     	; 0x2836 <__floatsisf+0x86>
    2842:	ed 82       	std	Y+5, r14	; 0x05
    2844:	fe 82       	std	Y+6, r15	; 0x06
    2846:	0f 83       	std	Y+7, r16	; 0x07
    2848:	18 87       	std	Y+8, r17	; 0x08
    284a:	8e e1       	ldi	r24, 0x1E	; 30
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	82 1b       	sub	r24, r18
    2850:	93 0b       	sbc	r25, r19
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	8b 83       	std	Y+3, r24	; 0x03
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__pack_f>
    285e:	04 c0       	rjmp	.+8      	; 0x2868 <__floatsisf+0xb8>
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	9f ec       	ldi	r25, 0xCF	; 207
    2868:	28 96       	adiw	r28, 0x08	; 8
    286a:	e6 e0       	ldi	r30, 0x06	; 6
    286c:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

00002870 <__fixsfsi>:
    2870:	ac e0       	ldi	r26, 0x0C	; 12
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	ee e3       	ldi	r30, 0x3E	; 62
    2876:	f4 e1       	ldi	r31, 0x14	; 20
    2878:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__prologue_saves__+0x20>
    287c:	69 83       	std	Y+1, r22	; 0x01
    287e:	7a 83       	std	Y+2, r23	; 0x02
    2880:	8b 83       	std	Y+3, r24	; 0x03
    2882:	9c 83       	std	Y+4, r25	; 0x04
    2884:	ce 01       	movw	r24, r28
    2886:	01 96       	adiw	r24, 0x01	; 1
    2888:	be 01       	movw	r22, r28
    288a:	6b 5f       	subi	r22, 0xFB	; 251
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__unpack_f>
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	82 30       	cpi	r24, 0x02	; 2
    2896:	81 f1       	breq	.+96     	; 0x28f8 <__fixsfsi+0x88>
    2898:	82 30       	cpi	r24, 0x02	; 2
    289a:	70 f1       	brcs	.+92     	; 0x28f8 <__fixsfsi+0x88>
    289c:	84 30       	cpi	r24, 0x04	; 4
    289e:	21 f4       	brne	.+8      	; 0x28a8 <__fixsfsi+0x38>
    28a0:	8e 81       	ldd	r24, Y+6	; 0x06
    28a2:	88 23       	and	r24, r24
    28a4:	69 f1       	breq	.+90     	; 0x2900 <__fixsfsi+0x90>
    28a6:	0a c0       	rjmp	.+20     	; 0x28bc <__fixsfsi+0x4c>
    28a8:	2f 81       	ldd	r18, Y+7	; 0x07
    28aa:	38 85       	ldd	r19, Y+8	; 0x08
    28ac:	37 fd       	sbrc	r19, 7
    28ae:	24 c0       	rjmp	.+72     	; 0x28f8 <__fixsfsi+0x88>
    28b0:	6e 81       	ldd	r22, Y+6	; 0x06
    28b2:	2f 31       	cpi	r18, 0x1F	; 31
    28b4:	31 05       	cpc	r19, r1
    28b6:	3c f0       	brlt	.+14     	; 0x28c6 <__fixsfsi+0x56>
    28b8:	66 23       	and	r22, r22
    28ba:	11 f1       	breq	.+68     	; 0x2900 <__fixsfsi+0x90>
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e8       	ldi	r21, 0x80	; 128
    28c4:	21 c0       	rjmp	.+66     	; 0x2908 <__fixsfsi+0x98>
    28c6:	8e e1       	ldi	r24, 0x1E	; 30
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	82 1b       	sub	r24, r18
    28cc:	93 0b       	sbc	r25, r19
    28ce:	29 85       	ldd	r18, Y+9	; 0x09
    28d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    28d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    28d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    28d6:	04 c0       	rjmp	.+8      	; 0x28e0 <__fixsfsi+0x70>
    28d8:	56 95       	lsr	r21
    28da:	47 95       	ror	r20
    28dc:	37 95       	ror	r19
    28de:	27 95       	ror	r18
    28e0:	8a 95       	dec	r24
    28e2:	d2 f7       	brpl	.-12     	; 0x28d8 <__fixsfsi+0x68>
    28e4:	66 23       	and	r22, r22
    28e6:	81 f0       	breq	.+32     	; 0x2908 <__fixsfsi+0x98>
    28e8:	50 95       	com	r21
    28ea:	40 95       	com	r20
    28ec:	30 95       	com	r19
    28ee:	21 95       	neg	r18
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	4f 4f       	sbci	r20, 0xFF	; 255
    28f4:	5f 4f       	sbci	r21, 0xFF	; 255
    28f6:	08 c0       	rjmp	.+16     	; 0x2908 <__fixsfsi+0x98>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	a9 01       	movw	r20, r18
    28fe:	04 c0       	rjmp	.+8      	; 0x2908 <__fixsfsi+0x98>
    2900:	2f ef       	ldi	r18, 0xFF	; 255
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f ef       	ldi	r20, 0xFF	; 255
    2906:	5f e7       	ldi	r21, 0x7F	; 127
    2908:	b9 01       	movw	r22, r18
    290a:	ca 01       	movw	r24, r20
    290c:	2c 96       	adiw	r28, 0x0c	; 12
    290e:	e2 e0       	ldi	r30, 0x02	; 2
    2910:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__epilogue_restores__+0x20>

00002914 <__floatunsisf>:
    2914:	a8 e0       	ldi	r26, 0x08	; 8
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e0 e9       	ldi	r30, 0x90	; 144
    291a:	f4 e1       	ldi	r31, 0x14	; 20
    291c:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__prologue_saves__+0x14>
    2920:	7b 01       	movw	r14, r22
    2922:	8c 01       	movw	r16, r24
    2924:	1a 82       	std	Y+2, r1	; 0x02
    2926:	61 15       	cp	r22, r1
    2928:	71 05       	cpc	r23, r1
    292a:	81 05       	cpc	r24, r1
    292c:	91 05       	cpc	r25, r1
    292e:	19 f4       	brne	.+6      	; 0x2936 <__floatunsisf+0x22>
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	5f c0       	rjmp	.+190    	; 0x29f4 <__floatunsisf+0xe0>
    2936:	83 e0       	ldi	r24, 0x03	; 3
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	8e e1       	ldi	r24, 0x1E	; 30
    293c:	c8 2e       	mov	r12, r24
    293e:	d1 2c       	mov	r13, r1
    2940:	dc 82       	std	Y+4, r13	; 0x04
    2942:	cb 82       	std	Y+3, r12	; 0x03
    2944:	ed 82       	std	Y+5, r14	; 0x05
    2946:	fe 82       	std	Y+6, r15	; 0x06
    2948:	0f 83       	std	Y+7, r16	; 0x07
    294a:	18 87       	std	Y+8, r17	; 0x08
    294c:	c8 01       	movw	r24, r16
    294e:	b7 01       	movw	r22, r14
    2950:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__clzsi2>
    2954:	fc 01       	movw	r30, r24
    2956:	31 97       	sbiw	r30, 0x01	; 1
    2958:	f7 ff       	sbrs	r31, 7
    295a:	3a c0       	rjmp	.+116    	; 0x29d0 <__floatunsisf+0xbc>
    295c:	aa 27       	eor	r26, r26
    295e:	bb 27       	eor	r27, r27
    2960:	ae 1b       	sub	r26, r30
    2962:	bf 0b       	sbc	r27, r31
    2964:	21 e0       	ldi	r18, 0x01	; 1
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	0a 2e       	mov	r0, r26
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <__floatunsisf+0x64>
    2970:	22 0f       	add	r18, r18
    2972:	33 1f       	adc	r19, r19
    2974:	44 1f       	adc	r20, r20
    2976:	55 1f       	adc	r21, r21
    2978:	0a 94       	dec	r0
    297a:	d2 f7       	brpl	.-12     	; 0x2970 <__floatunsisf+0x5c>
    297c:	21 50       	subi	r18, 0x01	; 1
    297e:	30 40       	sbci	r19, 0x00	; 0
    2980:	40 40       	sbci	r20, 0x00	; 0
    2982:	50 40       	sbci	r21, 0x00	; 0
    2984:	2e 21       	and	r18, r14
    2986:	3f 21       	and	r19, r15
    2988:	40 23       	and	r20, r16
    298a:	51 23       	and	r21, r17
    298c:	61 e0       	ldi	r22, 0x01	; 1
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	21 15       	cp	r18, r1
    2996:	31 05       	cpc	r19, r1
    2998:	41 05       	cpc	r20, r1
    299a:	51 05       	cpc	r21, r1
    299c:	19 f4       	brne	.+6      	; 0x29a4 <__floatunsisf+0x90>
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	cb 01       	movw	r24, r22
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <__floatunsisf+0x9a>
    29a6:	16 95       	lsr	r17
    29a8:	07 95       	ror	r16
    29aa:	f7 94       	ror	r15
    29ac:	e7 94       	ror	r14
    29ae:	aa 95       	dec	r26
    29b0:	d2 f7       	brpl	.-12     	; 0x29a6 <__floatunsisf+0x92>
    29b2:	e6 2a       	or	r14, r22
    29b4:	f7 2a       	or	r15, r23
    29b6:	08 2b       	or	r16, r24
    29b8:	19 2b       	or	r17, r25
    29ba:	ed 82       	std	Y+5, r14	; 0x05
    29bc:	fe 82       	std	Y+6, r15	; 0x06
    29be:	0f 83       	std	Y+7, r16	; 0x07
    29c0:	18 87       	std	Y+8, r17	; 0x08
    29c2:	8e e1       	ldi	r24, 0x1E	; 30
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	8e 1b       	sub	r24, r30
    29c8:	9f 0b       	sbc	r25, r31
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
    29ce:	12 c0       	rjmp	.+36     	; 0x29f4 <__floatunsisf+0xe0>
    29d0:	30 97       	sbiw	r30, 0x00	; 0
    29d2:	81 f0       	breq	.+32     	; 0x29f4 <__floatunsisf+0xe0>
    29d4:	0e 2e       	mov	r0, r30
    29d6:	04 c0       	rjmp	.+8      	; 0x29e0 <__floatunsisf+0xcc>
    29d8:	ee 0c       	add	r14, r14
    29da:	ff 1c       	adc	r15, r15
    29dc:	00 1f       	adc	r16, r16
    29de:	11 1f       	adc	r17, r17
    29e0:	0a 94       	dec	r0
    29e2:	d2 f7       	brpl	.-12     	; 0x29d8 <__floatunsisf+0xc4>
    29e4:	ed 82       	std	Y+5, r14	; 0x05
    29e6:	fe 82       	std	Y+6, r15	; 0x06
    29e8:	0f 83       	std	Y+7, r16	; 0x07
    29ea:	18 87       	std	Y+8, r17	; 0x08
    29ec:	ce 1a       	sub	r12, r30
    29ee:	df 0a       	sbc	r13, r31
    29f0:	dc 82       	std	Y+4, r13	; 0x04
    29f2:	cb 82       	std	Y+3, r12	; 0x03
    29f4:	ce 01       	movw	r24, r28
    29f6:	01 96       	adiw	r24, 0x01	; 1
    29f8:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__pack_f>
    29fc:	28 96       	adiw	r28, 0x08	; 8
    29fe:	e8 e0       	ldi	r30, 0x08	; 8
    2a00:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__epilogue_restores__+0x14>

00002a04 <__clzsi2>:
    2a04:	af 92       	push	r10
    2a06:	bf 92       	push	r11
    2a08:	cf 92       	push	r12
    2a0a:	df 92       	push	r13
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	7b 01       	movw	r14, r22
    2a16:	8c 01       	movw	r16, r24
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	e8 16       	cp	r14, r24
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	f8 06       	cpc	r15, r24
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	08 07       	cpc	r16, r24
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	18 07       	cpc	r17, r24
    2a28:	58 f4       	brcc	.+22     	; 0x2a40 <__clzsi2+0x3c>
    2a2a:	ef ef       	ldi	r30, 0xFF	; 255
    2a2c:	ee 16       	cp	r14, r30
    2a2e:	f1 04       	cpc	r15, r1
    2a30:	01 05       	cpc	r16, r1
    2a32:	11 05       	cpc	r17, r1
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <__clzsi2+0x34>
    2a36:	90 f4       	brcc	.+36     	; 0x2a5c <__clzsi2+0x58>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	17 c0       	rjmp	.+46     	; 0x2a6e <__clzsi2+0x6a>
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	ef 16       	cp	r14, r31
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	ff 06       	cpc	r15, r31
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	0f 07       	cpc	r16, r31
    2a4c:	f1 e0       	ldi	r31, 0x01	; 1
    2a4e:	1f 07       	cpc	r17, r31
    2a50:	50 f4       	brcc	.+20     	; 0x2a66 <__clzsi2+0x62>
    2a52:	80 e1       	ldi	r24, 0x10	; 16
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	a0 e0       	ldi	r26, 0x00	; 0
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	09 c0       	rjmp	.+18     	; 0x2a6e <__clzsi2+0x6a>
    2a5c:	88 e0       	ldi	r24, 0x08	; 8
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a0 e0       	ldi	r26, 0x00	; 0
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	04 c0       	rjmp	.+8      	; 0x2a6e <__clzsi2+0x6a>
    2a66:	88 e1       	ldi	r24, 0x18	; 24
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a0 e0       	ldi	r26, 0x00	; 0
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	20 e2       	ldi	r18, 0x20	; 32
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	28 1b       	sub	r18, r24
    2a78:	39 0b       	sbc	r19, r25
    2a7a:	4a 0b       	sbc	r20, r26
    2a7c:	5b 0b       	sbc	r21, r27
    2a7e:	57 01       	movw	r10, r14
    2a80:	68 01       	movw	r12, r16
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <__clzsi2+0x88>
    2a84:	d6 94       	lsr	r13
    2a86:	c7 94       	ror	r12
    2a88:	b7 94       	ror	r11
    2a8a:	a7 94       	ror	r10
    2a8c:	8a 95       	dec	r24
    2a8e:	d2 f7       	brpl	.-12     	; 0x2a84 <__clzsi2+0x80>
    2a90:	d6 01       	movw	r26, r12
    2a92:	c5 01       	movw	r24, r10
    2a94:	81 5c       	subi	r24, 0xC1	; 193
    2a96:	9c 4f       	sbci	r25, 0xFC	; 252
    2a98:	fc 01       	movw	r30, r24
    2a9a:	80 81       	ld	r24, Z
    2a9c:	28 1b       	sub	r18, r24
    2a9e:	31 09       	sbc	r19, r1
    2aa0:	41 09       	sbc	r20, r1
    2aa2:	51 09       	sbc	r21, r1
    2aa4:	c9 01       	movw	r24, r18
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	df 90       	pop	r13
    2ab0:	cf 90       	pop	r12
    2ab2:	bf 90       	pop	r11
    2ab4:	af 90       	pop	r10
    2ab6:	08 95       	ret

00002ab8 <__pack_f>:
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	24 81       	ldd	r18, Z+4	; 0x04
    2ac8:	35 81       	ldd	r19, Z+5	; 0x05
    2aca:	46 81       	ldd	r20, Z+6	; 0x06
    2acc:	57 81       	ldd	r21, Z+7	; 0x07
    2ace:	61 81       	ldd	r22, Z+1	; 0x01
    2ad0:	80 81       	ld	r24, Z
    2ad2:	82 30       	cpi	r24, 0x02	; 2
    2ad4:	20 f4       	brcc	.+8      	; 0x2ade <__pack_f+0x26>
    2ad6:	40 61       	ori	r20, 0x10	; 16
    2ad8:	ef ef       	ldi	r30, 0xFF	; 255
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	a3 c0       	rjmp	.+326    	; 0x2c24 <__pack_f+0x16c>
    2ade:	84 30       	cpi	r24, 0x04	; 4
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <__pack_f+0x2c>
    2ae2:	9b c0       	rjmp	.+310    	; 0x2c1a <__pack_f+0x162>
    2ae4:	82 30       	cpi	r24, 0x02	; 2
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <__pack_f+0x32>
    2ae8:	92 c0       	rjmp	.+292    	; 0x2c0e <__pack_f+0x156>
    2aea:	21 15       	cp	r18, r1
    2aec:	31 05       	cpc	r19, r1
    2aee:	41 05       	cpc	r20, r1
    2af0:	51 05       	cpc	r21, r1
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <__pack_f+0x3e>
    2af4:	8f c0       	rjmp	.+286    	; 0x2c14 <__pack_f+0x15c>
    2af6:	02 80       	ldd	r0, Z+2	; 0x02
    2af8:	f3 81       	ldd	r31, Z+3	; 0x03
    2afa:	e0 2d       	mov	r30, r0
    2afc:	7f ef       	ldi	r23, 0xFF	; 255
    2afe:	e2 38       	cpi	r30, 0x82	; 130
    2b00:	f7 07       	cpc	r31, r23
    2b02:	0c f0       	brlt	.+2      	; 0x2b06 <__pack_f+0x4e>
    2b04:	5a c0       	rjmp	.+180    	; 0x2bba <__pack_f+0x102>
    2b06:	c2 e8       	ldi	r28, 0x82	; 130
    2b08:	df ef       	ldi	r29, 0xFF	; 255
    2b0a:	ce 1b       	sub	r28, r30
    2b0c:	df 0b       	sbc	r29, r31
    2b0e:	ca 31       	cpi	r28, 0x1A	; 26
    2b10:	d1 05       	cpc	r29, r1
    2b12:	6c f5       	brge	.+90     	; 0x2b6e <__pack_f+0xb6>
    2b14:	79 01       	movw	r14, r18
    2b16:	8a 01       	movw	r16, r20
    2b18:	0c 2e       	mov	r0, r28
    2b1a:	04 c0       	rjmp	.+8      	; 0x2b24 <__pack_f+0x6c>
    2b1c:	16 95       	lsr	r17
    2b1e:	07 95       	ror	r16
    2b20:	f7 94       	ror	r15
    2b22:	e7 94       	ror	r14
    2b24:	0a 94       	dec	r0
    2b26:	d2 f7       	brpl	.-12     	; 0x2b1c <__pack_f+0x64>
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a0 e0       	ldi	r26, 0x00	; 0
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	0c 2e       	mov	r0, r28
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <__pack_f+0x84>
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	aa 1f       	adc	r26, r26
    2b3a:	bb 1f       	adc	r27, r27
    2b3c:	0a 94       	dec	r0
    2b3e:	d2 f7       	brpl	.-12     	; 0x2b34 <__pack_f+0x7c>
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	a1 09       	sbc	r26, r1
    2b44:	b1 09       	sbc	r27, r1
    2b46:	82 23       	and	r24, r18
    2b48:	93 23       	and	r25, r19
    2b4a:	a4 23       	and	r26, r20
    2b4c:	b5 23       	and	r27, r21
    2b4e:	21 e0       	ldi	r18, 0x01	; 1
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	a1 05       	cpc	r26, r1
    2b5a:	b1 05       	cpc	r27, r1
    2b5c:	19 f4       	brne	.+6      	; 0x2b64 <__pack_f+0xac>
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	a9 01       	movw	r20, r18
    2b64:	2e 29       	or	r18, r14
    2b66:	3f 29       	or	r19, r15
    2b68:	40 2b       	or	r20, r16
    2b6a:	51 2b       	or	r21, r17
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <__pack_f+0xbc>
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	a9 01       	movw	r20, r18
    2b74:	da 01       	movw	r26, r20
    2b76:	c9 01       	movw	r24, r18
    2b78:	8f 77       	andi	r24, 0x7F	; 127
    2b7a:	90 70       	andi	r25, 0x00	; 0
    2b7c:	a0 70       	andi	r26, 0x00	; 0
    2b7e:	b0 70       	andi	r27, 0x00	; 0
    2b80:	80 34       	cpi	r24, 0x40	; 64
    2b82:	91 05       	cpc	r25, r1
    2b84:	a1 05       	cpc	r26, r1
    2b86:	b1 05       	cpc	r27, r1
    2b88:	39 f4       	brne	.+14     	; 0x2b98 <__pack_f+0xe0>
    2b8a:	27 ff       	sbrs	r18, 7
    2b8c:	09 c0       	rjmp	.+18     	; 0x2ba0 <__pack_f+0xe8>
    2b8e:	20 5c       	subi	r18, 0xC0	; 192
    2b90:	3f 4f       	sbci	r19, 0xFF	; 255
    2b92:	4f 4f       	sbci	r20, 0xFF	; 255
    2b94:	5f 4f       	sbci	r21, 0xFF	; 255
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <__pack_f+0xe8>
    2b98:	21 5c       	subi	r18, 0xC1	; 193
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba0:	e1 e0       	ldi	r30, 0x01	; 1
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	20 30       	cpi	r18, 0x00	; 0
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	38 07       	cpc	r19, r24
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	48 07       	cpc	r20, r24
    2bae:	80 e4       	ldi	r24, 0x40	; 64
    2bb0:	58 07       	cpc	r21, r24
    2bb2:	28 f5       	brcc	.+74     	; 0x2bfe <__pack_f+0x146>
    2bb4:	e0 e0       	ldi	r30, 0x00	; 0
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	22 c0       	rjmp	.+68     	; 0x2bfe <__pack_f+0x146>
    2bba:	e0 38       	cpi	r30, 0x80	; 128
    2bbc:	f1 05       	cpc	r31, r1
    2bbe:	6c f5       	brge	.+90     	; 0x2c1a <__pack_f+0x162>
    2bc0:	e1 58       	subi	r30, 0x81	; 129
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	da 01       	movw	r26, r20
    2bc6:	c9 01       	movw	r24, r18
    2bc8:	8f 77       	andi	r24, 0x7F	; 127
    2bca:	90 70       	andi	r25, 0x00	; 0
    2bcc:	a0 70       	andi	r26, 0x00	; 0
    2bce:	b0 70       	andi	r27, 0x00	; 0
    2bd0:	80 34       	cpi	r24, 0x40	; 64
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	a1 05       	cpc	r26, r1
    2bd6:	b1 05       	cpc	r27, r1
    2bd8:	39 f4       	brne	.+14     	; 0x2be8 <__pack_f+0x130>
    2bda:	27 ff       	sbrs	r18, 7
    2bdc:	09 c0       	rjmp	.+18     	; 0x2bf0 <__pack_f+0x138>
    2bde:	20 5c       	subi	r18, 0xC0	; 192
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	4f 4f       	sbci	r20, 0xFF	; 255
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <__pack_f+0x138>
    2be8:	21 5c       	subi	r18, 0xC1	; 193
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	4f 4f       	sbci	r20, 0xFF	; 255
    2bee:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf0:	57 ff       	sbrs	r21, 7
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <__pack_f+0x146>
    2bf4:	56 95       	lsr	r21
    2bf6:	47 95       	ror	r20
    2bf8:	37 95       	ror	r19
    2bfa:	27 95       	ror	r18
    2bfc:	31 96       	adiw	r30, 0x01	; 1
    2bfe:	87 e0       	ldi	r24, 0x07	; 7
    2c00:	56 95       	lsr	r21
    2c02:	47 95       	ror	r20
    2c04:	37 95       	ror	r19
    2c06:	27 95       	ror	r18
    2c08:	8a 95       	dec	r24
    2c0a:	d1 f7       	brne	.-12     	; 0x2c00 <__pack_f+0x148>
    2c0c:	0b c0       	rjmp	.+22     	; 0x2c24 <__pack_f+0x16c>
    2c0e:	e0 e0       	ldi	r30, 0x00	; 0
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <__pack_f+0x166>
    2c14:	e0 e0       	ldi	r30, 0x00	; 0
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	05 c0       	rjmp	.+10     	; 0x2c24 <__pack_f+0x16c>
    2c1a:	ef ef       	ldi	r30, 0xFF	; 255
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	a9 01       	movw	r20, r18
    2c24:	8e 2f       	mov	r24, r30
    2c26:	87 95       	ror	r24
    2c28:	88 27       	eor	r24, r24
    2c2a:	87 95       	ror	r24
    2c2c:	94 2f       	mov	r25, r20
    2c2e:	9f 77       	andi	r25, 0x7F	; 127
    2c30:	67 95       	ror	r22
    2c32:	66 27       	eor	r22, r22
    2c34:	67 95       	ror	r22
    2c36:	e6 95       	lsr	r30
    2c38:	a9 2f       	mov	r26, r25
    2c3a:	a8 2b       	or	r26, r24
    2c3c:	fe 2f       	mov	r31, r30
    2c3e:	f6 2b       	or	r31, r22
    2c40:	62 2f       	mov	r22, r18
    2c42:	73 2f       	mov	r23, r19
    2c44:	8a 2f       	mov	r24, r26
    2c46:	9f 2f       	mov	r25, r31
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	e6 e0       	ldi	r30, 0x06	; 6
    2c4e:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

00002c52 <__unpack_f>:
    2c52:	dc 01       	movw	r26, r24
    2c54:	fb 01       	movw	r30, r22
    2c56:	2c 91       	ld	r18, X
    2c58:	11 96       	adiw	r26, 0x01	; 1
    2c5a:	3c 91       	ld	r19, X
    2c5c:	11 97       	sbiw	r26, 0x01	; 1
    2c5e:	12 96       	adiw	r26, 0x02	; 2
    2c60:	8c 91       	ld	r24, X
    2c62:	12 97       	sbiw	r26, 0x02	; 2
    2c64:	48 2f       	mov	r20, r24
    2c66:	4f 77       	andi	r20, 0x7F	; 127
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	98 2f       	mov	r25, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	99 27       	eor	r25, r25
    2c70:	99 1f       	adc	r25, r25
    2c72:	13 96       	adiw	r26, 0x03	; 3
    2c74:	6c 91       	ld	r22, X
    2c76:	13 97       	sbiw	r26, 0x03	; 3
    2c78:	86 2f       	mov	r24, r22
    2c7a:	88 0f       	add	r24, r24
    2c7c:	89 2b       	or	r24, r25
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	66 1f       	adc	r22, r22
    2c82:	66 27       	eor	r22, r22
    2c84:	66 1f       	adc	r22, r22
    2c86:	61 83       	std	Z+1, r22	; 0x01
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	39 f5       	brne	.+78     	; 0x2cda <__unpack_f+0x88>
    2c8c:	21 15       	cp	r18, r1
    2c8e:	31 05       	cpc	r19, r1
    2c90:	41 05       	cpc	r20, r1
    2c92:	51 05       	cpc	r21, r1
    2c94:	11 f4       	brne	.+4      	; 0x2c9a <__unpack_f+0x48>
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	29 c0       	rjmp	.+82     	; 0x2cec <__unpack_f+0x9a>
    2c9a:	82 e8       	ldi	r24, 0x82	; 130
    2c9c:	9f ef       	ldi	r25, 0xFF	; 255
    2c9e:	93 83       	std	Z+3, r25	; 0x03
    2ca0:	82 83       	std	Z+2, r24	; 0x02
    2ca2:	67 e0       	ldi	r22, 0x07	; 7
    2ca4:	22 0f       	add	r18, r18
    2ca6:	33 1f       	adc	r19, r19
    2ca8:	44 1f       	adc	r20, r20
    2caa:	55 1f       	adc	r21, r21
    2cac:	6a 95       	dec	r22
    2cae:	d1 f7       	brne	.-12     	; 0x2ca4 <__unpack_f+0x52>
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	80 83       	st	Z, r24
    2cb4:	09 c0       	rjmp	.+18     	; 0x2cc8 <__unpack_f+0x76>
    2cb6:	22 0f       	add	r18, r18
    2cb8:	33 1f       	adc	r19, r19
    2cba:	44 1f       	adc	r20, r20
    2cbc:	55 1f       	adc	r21, r21
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	93 83       	std	Z+3, r25	; 0x03
    2cc6:	82 83       	std	Z+2, r24	; 0x02
    2cc8:	20 30       	cpi	r18, 0x00	; 0
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	38 07       	cpc	r19, r24
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	48 07       	cpc	r20, r24
    2cd2:	80 e4       	ldi	r24, 0x40	; 64
    2cd4:	58 07       	cpc	r21, r24
    2cd6:	78 f3       	brcs	.-34     	; 0x2cb6 <__unpack_f+0x64>
    2cd8:	20 c0       	rjmp	.+64     	; 0x2d1a <__unpack_f+0xc8>
    2cda:	8f 3f       	cpi	r24, 0xFF	; 255
    2cdc:	91 05       	cpc	r25, r1
    2cde:	79 f4       	brne	.+30     	; 0x2cfe <__unpack_f+0xac>
    2ce0:	21 15       	cp	r18, r1
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	41 05       	cpc	r20, r1
    2ce6:	51 05       	cpc	r21, r1
    2ce8:	19 f4       	brne	.+6      	; 0x2cf0 <__unpack_f+0x9e>
    2cea:	84 e0       	ldi	r24, 0x04	; 4
    2cec:	80 83       	st	Z, r24
    2cee:	08 95       	ret
    2cf0:	44 ff       	sbrs	r20, 4
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <__unpack_f+0xa8>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 83       	st	Z, r24
    2cf8:	10 c0       	rjmp	.+32     	; 0x2d1a <__unpack_f+0xc8>
    2cfa:	10 82       	st	Z, r1
    2cfc:	0e c0       	rjmp	.+28     	; 0x2d1a <__unpack_f+0xc8>
    2cfe:	8f 57       	subi	r24, 0x7F	; 127
    2d00:	90 40       	sbci	r25, 0x00	; 0
    2d02:	93 83       	std	Z+3, r25	; 0x03
    2d04:	82 83       	std	Z+2, r24	; 0x02
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	80 83       	st	Z, r24
    2d0a:	87 e0       	ldi	r24, 0x07	; 7
    2d0c:	22 0f       	add	r18, r18
    2d0e:	33 1f       	adc	r19, r19
    2d10:	44 1f       	adc	r20, r20
    2d12:	55 1f       	adc	r21, r21
    2d14:	8a 95       	dec	r24
    2d16:	d1 f7       	brne	.-12     	; 0x2d0c <__unpack_f+0xba>
    2d18:	50 64       	ori	r21, 0x40	; 64
    2d1a:	24 83       	std	Z+4, r18	; 0x04
    2d1c:	35 83       	std	Z+5, r19	; 0x05
    2d1e:	46 83       	std	Z+6, r20	; 0x06
    2d20:	57 83       	std	Z+7, r21	; 0x07
    2d22:	08 95       	ret

00002d24 <__fpcmp_parts_f>:
    2d24:	fc 01       	movw	r30, r24
    2d26:	db 01       	movw	r26, r22
    2d28:	90 81       	ld	r25, Z
    2d2a:	92 30       	cpi	r25, 0x02	; 2
    2d2c:	08 f4       	brcc	.+2      	; 0x2d30 <__fpcmp_parts_f+0xc>
    2d2e:	49 c0       	rjmp	.+146    	; 0x2dc2 <__fpcmp_parts_f+0x9e>
    2d30:	8c 91       	ld	r24, X
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	08 f4       	brcc	.+2      	; 0x2d38 <__fpcmp_parts_f+0x14>
    2d36:	45 c0       	rjmp	.+138    	; 0x2dc2 <__fpcmp_parts_f+0x9e>
    2d38:	94 30       	cpi	r25, 0x04	; 4
    2d3a:	51 f4       	brne	.+20     	; 0x2d50 <__fpcmp_parts_f+0x2c>
    2d3c:	61 81       	ldd	r22, Z+1	; 0x01
    2d3e:	84 30       	cpi	r24, 0x04	; 4
    2d40:	b1 f5       	brne	.+108    	; 0x2dae <__fpcmp_parts_f+0x8a>
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	2c 91       	ld	r18, X
    2d46:	11 97       	sbiw	r26, 0x01	; 1
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	26 1b       	sub	r18, r22
    2d4c:	31 09       	sbc	r19, r1
    2d4e:	41 c0       	rjmp	.+130    	; 0x2dd2 <__fpcmp_parts_f+0xae>
    2d50:	84 30       	cpi	r24, 0x04	; 4
    2d52:	21 f0       	breq	.+8      	; 0x2d5c <__fpcmp_parts_f+0x38>
    2d54:	92 30       	cpi	r25, 0x02	; 2
    2d56:	41 f4       	brne	.+16     	; 0x2d68 <__fpcmp_parts_f+0x44>
    2d58:	82 30       	cpi	r24, 0x02	; 2
    2d5a:	b1 f1       	breq	.+108    	; 0x2dc8 <__fpcmp_parts_f+0xa4>
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	8c 91       	ld	r24, X
    2d60:	11 97       	sbiw	r26, 0x01	; 1
    2d62:	88 23       	and	r24, r24
    2d64:	a1 f1       	breq	.+104    	; 0x2dce <__fpcmp_parts_f+0xaa>
    2d66:	2d c0       	rjmp	.+90     	; 0x2dc2 <__fpcmp_parts_f+0x9e>
    2d68:	61 81       	ldd	r22, Z+1	; 0x01
    2d6a:	82 30       	cpi	r24, 0x02	; 2
    2d6c:	01 f1       	breq	.+64     	; 0x2dae <__fpcmp_parts_f+0x8a>
    2d6e:	11 96       	adiw	r26, 0x01	; 1
    2d70:	8c 91       	ld	r24, X
    2d72:	11 97       	sbiw	r26, 0x01	; 1
    2d74:	68 17       	cp	r22, r24
    2d76:	d9 f4       	brne	.+54     	; 0x2dae <__fpcmp_parts_f+0x8a>
    2d78:	22 81       	ldd	r18, Z+2	; 0x02
    2d7a:	33 81       	ldd	r19, Z+3	; 0x03
    2d7c:	12 96       	adiw	r26, 0x02	; 2
    2d7e:	8d 91       	ld	r24, X+
    2d80:	9c 91       	ld	r25, X
    2d82:	13 97       	sbiw	r26, 0x03	; 3
    2d84:	82 17       	cp	r24, r18
    2d86:	93 07       	cpc	r25, r19
    2d88:	94 f0       	brlt	.+36     	; 0x2dae <__fpcmp_parts_f+0x8a>
    2d8a:	28 17       	cp	r18, r24
    2d8c:	39 07       	cpc	r19, r25
    2d8e:	bc f0       	brlt	.+46     	; 0x2dbe <__fpcmp_parts_f+0x9a>
    2d90:	24 81       	ldd	r18, Z+4	; 0x04
    2d92:	35 81       	ldd	r19, Z+5	; 0x05
    2d94:	46 81       	ldd	r20, Z+6	; 0x06
    2d96:	57 81       	ldd	r21, Z+7	; 0x07
    2d98:	14 96       	adiw	r26, 0x04	; 4
    2d9a:	8d 91       	ld	r24, X+
    2d9c:	9d 91       	ld	r25, X+
    2d9e:	0d 90       	ld	r0, X+
    2da0:	bc 91       	ld	r27, X
    2da2:	a0 2d       	mov	r26, r0
    2da4:	82 17       	cp	r24, r18
    2da6:	93 07       	cpc	r25, r19
    2da8:	a4 07       	cpc	r26, r20
    2daa:	b5 07       	cpc	r27, r21
    2dac:	18 f4       	brcc	.+6      	; 0x2db4 <__fpcmp_parts_f+0x90>
    2dae:	66 23       	and	r22, r22
    2db0:	41 f0       	breq	.+16     	; 0x2dc2 <__fpcmp_parts_f+0x9e>
    2db2:	0d c0       	rjmp	.+26     	; 0x2dce <__fpcmp_parts_f+0xaa>
    2db4:	28 17       	cp	r18, r24
    2db6:	39 07       	cpc	r19, r25
    2db8:	4a 07       	cpc	r20, r26
    2dba:	5b 07       	cpc	r21, r27
    2dbc:	28 f4       	brcc	.+10     	; 0x2dc8 <__fpcmp_parts_f+0xa4>
    2dbe:	66 23       	and	r22, r22
    2dc0:	31 f0       	breq	.+12     	; 0x2dce <__fpcmp_parts_f+0xaa>
    2dc2:	21 e0       	ldi	r18, 0x01	; 1
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	05 c0       	rjmp	.+10     	; 0x2dd2 <__fpcmp_parts_f+0xae>
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <__fpcmp_parts_f+0xae>
    2dce:	2f ef       	ldi	r18, 0xFF	; 255
    2dd0:	3f ef       	ldi	r19, 0xFF	; 255
    2dd2:	c9 01       	movw	r24, r18
    2dd4:	08 95       	ret

00002dd6 <__mulsi3>:
    2dd6:	62 9f       	mul	r22, r18
    2dd8:	d0 01       	movw	r26, r0
    2dda:	73 9f       	mul	r23, r19
    2ddc:	f0 01       	movw	r30, r0
    2dde:	82 9f       	mul	r24, r18
    2de0:	e0 0d       	add	r30, r0
    2de2:	f1 1d       	adc	r31, r1
    2de4:	64 9f       	mul	r22, r20
    2de6:	e0 0d       	add	r30, r0
    2de8:	f1 1d       	adc	r31, r1
    2dea:	92 9f       	mul	r25, r18
    2dec:	f0 0d       	add	r31, r0
    2dee:	83 9f       	mul	r24, r19
    2df0:	f0 0d       	add	r31, r0
    2df2:	74 9f       	mul	r23, r20
    2df4:	f0 0d       	add	r31, r0
    2df6:	65 9f       	mul	r22, r21
    2df8:	f0 0d       	add	r31, r0
    2dfa:	99 27       	eor	r25, r25
    2dfc:	72 9f       	mul	r23, r18
    2dfe:	b0 0d       	add	r27, r0
    2e00:	e1 1d       	adc	r30, r1
    2e02:	f9 1f       	adc	r31, r25
    2e04:	63 9f       	mul	r22, r19
    2e06:	b0 0d       	add	r27, r0
    2e08:	e1 1d       	adc	r30, r1
    2e0a:	f9 1f       	adc	r31, r25
    2e0c:	bd 01       	movw	r22, r26
    2e0e:	cf 01       	movw	r24, r30
    2e10:	11 24       	eor	r1, r1
    2e12:	08 95       	ret

00002e14 <__udivmodhi4>:
    2e14:	aa 1b       	sub	r26, r26
    2e16:	bb 1b       	sub	r27, r27
    2e18:	51 e1       	ldi	r21, 0x11	; 17
    2e1a:	07 c0       	rjmp	.+14     	; 0x2e2a <__udivmodhi4_ep>

00002e1c <__udivmodhi4_loop>:
    2e1c:	aa 1f       	adc	r26, r26
    2e1e:	bb 1f       	adc	r27, r27
    2e20:	a6 17       	cp	r26, r22
    2e22:	b7 07       	cpc	r27, r23
    2e24:	10 f0       	brcs	.+4      	; 0x2e2a <__udivmodhi4_ep>
    2e26:	a6 1b       	sub	r26, r22
    2e28:	b7 0b       	sbc	r27, r23

00002e2a <__udivmodhi4_ep>:
    2e2a:	88 1f       	adc	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	5a 95       	dec	r21
    2e30:	a9 f7       	brne	.-22     	; 0x2e1c <__udivmodhi4_loop>
    2e32:	80 95       	com	r24
    2e34:	90 95       	com	r25
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	08 95       	ret

00002e3c <__divmodhi4>:
    2e3c:	97 fb       	bst	r25, 7
    2e3e:	09 2e       	mov	r0, r25
    2e40:	07 26       	eor	r0, r23
    2e42:	0a d0       	rcall	.+20     	; 0x2e58 <__divmodhi4_neg1>
    2e44:	77 fd       	sbrc	r23, 7
    2e46:	04 d0       	rcall	.+8      	; 0x2e50 <__divmodhi4_neg2>
    2e48:	e5 df       	rcall	.-54     	; 0x2e14 <__udivmodhi4>
    2e4a:	06 d0       	rcall	.+12     	; 0x2e58 <__divmodhi4_neg1>
    2e4c:	00 20       	and	r0, r0
    2e4e:	1a f4       	brpl	.+6      	; 0x2e56 <__divmodhi4_exit>

00002e50 <__divmodhi4_neg2>:
    2e50:	70 95       	com	r23
    2e52:	61 95       	neg	r22
    2e54:	7f 4f       	sbci	r23, 0xFF	; 255

00002e56 <__divmodhi4_exit>:
    2e56:	08 95       	ret

00002e58 <__divmodhi4_neg1>:
    2e58:	f6 f7       	brtc	.-4      	; 0x2e56 <__divmodhi4_exit>
    2e5a:	90 95       	com	r25
    2e5c:	81 95       	neg	r24
    2e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e60:	08 95       	ret

00002e62 <__divmodsi4>:
    2e62:	97 fb       	bst	r25, 7
    2e64:	09 2e       	mov	r0, r25
    2e66:	05 26       	eor	r0, r21
    2e68:	0e d0       	rcall	.+28     	; 0x2e86 <__divmodsi4_neg1>
    2e6a:	57 fd       	sbrc	r21, 7
    2e6c:	04 d0       	rcall	.+8      	; 0x2e76 <__divmodsi4_neg2>
    2e6e:	14 d0       	rcall	.+40     	; 0x2e98 <__udivmodsi4>
    2e70:	0a d0       	rcall	.+20     	; 0x2e86 <__divmodsi4_neg1>
    2e72:	00 1c       	adc	r0, r0
    2e74:	38 f4       	brcc	.+14     	; 0x2e84 <__divmodsi4_exit>

00002e76 <__divmodsi4_neg2>:
    2e76:	50 95       	com	r21
    2e78:	40 95       	com	r20
    2e7a:	30 95       	com	r19
    2e7c:	21 95       	neg	r18
    2e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e80:	4f 4f       	sbci	r20, 0xFF	; 255
    2e82:	5f 4f       	sbci	r21, 0xFF	; 255

00002e84 <__divmodsi4_exit>:
    2e84:	08 95       	ret

00002e86 <__divmodsi4_neg1>:
    2e86:	f6 f7       	brtc	.-4      	; 0x2e84 <__divmodsi4_exit>
    2e88:	90 95       	com	r25
    2e8a:	80 95       	com	r24
    2e8c:	70 95       	com	r23
    2e8e:	61 95       	neg	r22
    2e90:	7f 4f       	sbci	r23, 0xFF	; 255
    2e92:	8f 4f       	sbci	r24, 0xFF	; 255
    2e94:	9f 4f       	sbci	r25, 0xFF	; 255
    2e96:	08 95       	ret

00002e98 <__udivmodsi4>:
    2e98:	a1 e2       	ldi	r26, 0x21	; 33
    2e9a:	1a 2e       	mov	r1, r26
    2e9c:	aa 1b       	sub	r26, r26
    2e9e:	bb 1b       	sub	r27, r27
    2ea0:	fd 01       	movw	r30, r26
    2ea2:	0d c0       	rjmp	.+26     	; 0x2ebe <__udivmodsi4_ep>

00002ea4 <__udivmodsi4_loop>:
    2ea4:	aa 1f       	adc	r26, r26
    2ea6:	bb 1f       	adc	r27, r27
    2ea8:	ee 1f       	adc	r30, r30
    2eaa:	ff 1f       	adc	r31, r31
    2eac:	a2 17       	cp	r26, r18
    2eae:	b3 07       	cpc	r27, r19
    2eb0:	e4 07       	cpc	r30, r20
    2eb2:	f5 07       	cpc	r31, r21
    2eb4:	20 f0       	brcs	.+8      	; 0x2ebe <__udivmodsi4_ep>
    2eb6:	a2 1b       	sub	r26, r18
    2eb8:	b3 0b       	sbc	r27, r19
    2eba:	e4 0b       	sbc	r30, r20
    2ebc:	f5 0b       	sbc	r31, r21

00002ebe <__udivmodsi4_ep>:
    2ebe:	66 1f       	adc	r22, r22
    2ec0:	77 1f       	adc	r23, r23
    2ec2:	88 1f       	adc	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	1a 94       	dec	r1
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <__udivmodsi4_loop>
    2eca:	60 95       	com	r22
    2ecc:	70 95       	com	r23
    2ece:	80 95       	com	r24
    2ed0:	90 95       	com	r25
    2ed2:	9b 01       	movw	r18, r22
    2ed4:	ac 01       	movw	r20, r24
    2ed6:	bd 01       	movw	r22, r26
    2ed8:	cf 01       	movw	r24, r30
    2eda:	08 95       	ret

00002edc <__prologue_saves__>:
    2edc:	2f 92       	push	r2
    2ede:	3f 92       	push	r3
    2ee0:	4f 92       	push	r4
    2ee2:	5f 92       	push	r5
    2ee4:	6f 92       	push	r6
    2ee6:	7f 92       	push	r7
    2ee8:	8f 92       	push	r8
    2eea:	9f 92       	push	r9
    2eec:	af 92       	push	r10
    2eee:	bf 92       	push	r11
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	ca 1b       	sub	r28, r26
    2f06:	db 0b       	sbc	r29, r27
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	19 94       	eijmp

00002f14 <__epilogue_restores__>:
    2f14:	2a 88       	ldd	r2, Y+18	; 0x12
    2f16:	39 88       	ldd	r3, Y+17	; 0x11
    2f18:	48 88       	ldd	r4, Y+16	; 0x10
    2f1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f20:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f22:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f24:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f26:	b9 84       	ldd	r11, Y+9	; 0x09
    2f28:	c8 84       	ldd	r12, Y+8	; 0x08
    2f2a:	df 80       	ldd	r13, Y+7	; 0x07
    2f2c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f2e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f30:	0c 81       	ldd	r16, Y+4	; 0x04
    2f32:	1b 81       	ldd	r17, Y+3	; 0x03
    2f34:	aa 81       	ldd	r26, Y+2	; 0x02
    2f36:	b9 81       	ldd	r27, Y+1	; 0x01
    2f38:	ce 0f       	add	r28, r30
    2f3a:	d1 1d       	adc	r29, r1
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	ed 01       	movw	r28, r26
    2f48:	08 95       	ret

00002f4a <ceil>:
    2f4a:	3b d0       	rcall	.+118    	; 0x2fc2 <__fp_trunc>
    2f4c:	80 f0       	brcs	.+32     	; 0x2f6e <ceil+0x24>
    2f4e:	9f 37       	cpi	r25, 0x7F	; 127
    2f50:	40 f4       	brcc	.+16     	; 0x2f62 <ceil+0x18>
    2f52:	91 11       	cpse	r25, r1
    2f54:	0e f4       	brtc	.+2      	; 0x2f58 <ceil+0xe>
    2f56:	4d c0       	rjmp	.+154    	; 0x2ff2 <__fp_szero>
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	80 e8       	ldi	r24, 0x80	; 128
    2f5e:	9f e3       	ldi	r25, 0x3F	; 63
    2f60:	08 95       	ret
    2f62:	26 f0       	brts	.+8      	; 0x2f6c <ceil+0x22>
    2f64:	1b 16       	cp	r1, r27
    2f66:	61 1d       	adc	r22, r1
    2f68:	71 1d       	adc	r23, r1
    2f6a:	81 1d       	adc	r24, r1
    2f6c:	01 c0       	rjmp	.+2      	; 0x2f70 <__fp_mintl>
    2f6e:	1b c0       	rjmp	.+54     	; 0x2fa6 <__fp_mpack>

00002f70 <__fp_mintl>:
    2f70:	88 23       	and	r24, r24
    2f72:	71 f4       	brne	.+28     	; 0x2f90 <__fp_mintl+0x20>
    2f74:	77 23       	and	r23, r23
    2f76:	21 f0       	breq	.+8      	; 0x2f80 <__fp_mintl+0x10>
    2f78:	98 50       	subi	r25, 0x08	; 8
    2f7a:	87 2b       	or	r24, r23
    2f7c:	76 2f       	mov	r23, r22
    2f7e:	07 c0       	rjmp	.+14     	; 0x2f8e <__fp_mintl+0x1e>
    2f80:	66 23       	and	r22, r22
    2f82:	11 f4       	brne	.+4      	; 0x2f88 <__fp_mintl+0x18>
    2f84:	99 27       	eor	r25, r25
    2f86:	0d c0       	rjmp	.+26     	; 0x2fa2 <__fp_mintl+0x32>
    2f88:	90 51       	subi	r25, 0x10	; 16
    2f8a:	86 2b       	or	r24, r22
    2f8c:	70 e0       	ldi	r23, 0x00	; 0
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	2a f0       	brmi	.+10     	; 0x2f9c <__fp_mintl+0x2c>
    2f92:	9a 95       	dec	r25
    2f94:	66 0f       	add	r22, r22
    2f96:	77 1f       	adc	r23, r23
    2f98:	88 1f       	adc	r24, r24
    2f9a:	da f7       	brpl	.-10     	; 0x2f92 <__fp_mintl+0x22>
    2f9c:	88 0f       	add	r24, r24
    2f9e:	96 95       	lsr	r25
    2fa0:	87 95       	ror	r24
    2fa2:	97 f9       	bld	r25, 7
    2fa4:	08 95       	ret

00002fa6 <__fp_mpack>:
    2fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    2fa8:	31 f0       	breq	.+12     	; 0x2fb6 <__fp_mpack_finite+0xc>

00002faa <__fp_mpack_finite>:
    2faa:	91 50       	subi	r25, 0x01	; 1
    2fac:	20 f4       	brcc	.+8      	; 0x2fb6 <__fp_mpack_finite+0xc>
    2fae:	87 95       	ror	r24
    2fb0:	77 95       	ror	r23
    2fb2:	67 95       	ror	r22
    2fb4:	b7 95       	ror	r27
    2fb6:	88 0f       	add	r24, r24
    2fb8:	91 1d       	adc	r25, r1
    2fba:	96 95       	lsr	r25
    2fbc:	87 95       	ror	r24
    2fbe:	97 f9       	bld	r25, 7
    2fc0:	08 95       	ret

00002fc2 <__fp_trunc>:
    2fc2:	25 d0       	rcall	.+74     	; 0x300e <__fp_splitA>
    2fc4:	a0 f0       	brcs	.+40     	; 0x2fee <__fp_trunc+0x2c>
    2fc6:	be e7       	ldi	r27, 0x7E	; 126
    2fc8:	b9 17       	cp	r27, r25
    2fca:	88 f4       	brcc	.+34     	; 0x2fee <__fp_trunc+0x2c>
    2fcc:	bb 27       	eor	r27, r27
    2fce:	9f 38       	cpi	r25, 0x8F	; 143
    2fd0:	60 f4       	brcc	.+24     	; 0x2fea <__fp_trunc+0x28>
    2fd2:	16 16       	cp	r1, r22
    2fd4:	b1 1d       	adc	r27, r1
    2fd6:	67 2f       	mov	r22, r23
    2fd8:	78 2f       	mov	r23, r24
    2fda:	88 27       	eor	r24, r24
    2fdc:	98 5f       	subi	r25, 0xF8	; 248
    2fde:	f7 cf       	rjmp	.-18     	; 0x2fce <__fp_trunc+0xc>
    2fe0:	86 95       	lsr	r24
    2fe2:	77 95       	ror	r23
    2fe4:	67 95       	ror	r22
    2fe6:	b1 1d       	adc	r27, r1
    2fe8:	93 95       	inc	r25
    2fea:	96 39       	cpi	r25, 0x96	; 150
    2fec:	c8 f3       	brcs	.-14     	; 0x2fe0 <__fp_trunc+0x1e>
    2fee:	08 95       	ret

00002ff0 <__fp_zero>:
    2ff0:	e8 94       	clt

00002ff2 <__fp_szero>:
    2ff2:	bb 27       	eor	r27, r27
    2ff4:	66 27       	eor	r22, r22
    2ff6:	77 27       	eor	r23, r23
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	97 f9       	bld	r25, 7
    2ffc:	08 95       	ret

00002ffe <__fp_split3>:
    2ffe:	57 fd       	sbrc	r21, 7
    3000:	90 58       	subi	r25, 0x80	; 128
    3002:	44 0f       	add	r20, r20
    3004:	55 1f       	adc	r21, r21
    3006:	59 f0       	breq	.+22     	; 0x301e <__fp_splitA+0x10>
    3008:	5f 3f       	cpi	r21, 0xFF	; 255
    300a:	71 f0       	breq	.+28     	; 0x3028 <__fp_splitA+0x1a>
    300c:	47 95       	ror	r20

0000300e <__fp_splitA>:
    300e:	88 0f       	add	r24, r24
    3010:	97 fb       	bst	r25, 7
    3012:	99 1f       	adc	r25, r25
    3014:	61 f0       	breq	.+24     	; 0x302e <__fp_splitA+0x20>
    3016:	9f 3f       	cpi	r25, 0xFF	; 255
    3018:	79 f0       	breq	.+30     	; 0x3038 <__fp_splitA+0x2a>
    301a:	87 95       	ror	r24
    301c:	08 95       	ret
    301e:	12 16       	cp	r1, r18
    3020:	13 06       	cpc	r1, r19
    3022:	14 06       	cpc	r1, r20
    3024:	55 1f       	adc	r21, r21
    3026:	f2 cf       	rjmp	.-28     	; 0x300c <__fp_split3+0xe>
    3028:	46 95       	lsr	r20
    302a:	f1 df       	rcall	.-30     	; 0x300e <__fp_splitA>
    302c:	08 c0       	rjmp	.+16     	; 0x303e <__fp_splitA+0x30>
    302e:	16 16       	cp	r1, r22
    3030:	17 06       	cpc	r1, r23
    3032:	18 06       	cpc	r1, r24
    3034:	99 1f       	adc	r25, r25
    3036:	f1 cf       	rjmp	.-30     	; 0x301a <__fp_splitA+0xc>
    3038:	86 95       	lsr	r24
    303a:	71 05       	cpc	r23, r1
    303c:	61 05       	cpc	r22, r1
    303e:	08 94       	sec
    3040:	08 95       	ret

00003042 <strcmp>:
    3042:	fb 01       	movw	r30, r22
    3044:	dc 01       	movw	r26, r24
    3046:	8d 91       	ld	r24, X+
    3048:	01 90       	ld	r0, Z+
    304a:	80 19       	sub	r24, r0
    304c:	01 10       	cpse	r0, r1
    304e:	d9 f3       	breq	.-10     	; 0x3046 <strcmp+0x4>
    3050:	99 0b       	sbc	r25, r25
    3052:	08 95       	ret

00003054 <sprintf>:
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	2e 97       	sbiw	r28, 0x0e	; 14
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	0e 89       	ldd	r16, Y+22	; 0x16
    306e:	1f 89       	ldd	r17, Y+23	; 0x17
    3070:	86 e0       	ldi	r24, 0x06	; 6
    3072:	8c 83       	std	Y+4, r24	; 0x04
    3074:	1a 83       	std	Y+2, r17	; 0x02
    3076:	09 83       	std	Y+1, r16	; 0x01
    3078:	8f ef       	ldi	r24, 0xFF	; 255
    307a:	9f e7       	ldi	r25, 0x7F	; 127
    307c:	9e 83       	std	Y+6, r25	; 0x06
    307e:	8d 83       	std	Y+5, r24	; 0x05
    3080:	9e 01       	movw	r18, r28
    3082:	26 5e       	subi	r18, 0xE6	; 230
    3084:	3f 4f       	sbci	r19, 0xFF	; 255
    3086:	ce 01       	movw	r24, r28
    3088:	01 96       	adiw	r24, 0x01	; 1
    308a:	68 8d       	ldd	r22, Y+24	; 0x18
    308c:	79 8d       	ldd	r23, Y+25	; 0x19
    308e:	a9 01       	movw	r20, r18
    3090:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vfprintf>
    3094:	ef 81       	ldd	r30, Y+7	; 0x07
    3096:	f8 85       	ldd	r31, Y+8	; 0x08
    3098:	e0 0f       	add	r30, r16
    309a:	f1 1f       	adc	r31, r17
    309c:	10 82       	st	Z, r1
    309e:	2e 96       	adiw	r28, 0x0e	; 14
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	08 95       	ret

000030b4 <vfprintf>:
    30b4:	2f 92       	push	r2
    30b6:	3f 92       	push	r3
    30b8:	4f 92       	push	r4
    30ba:	5f 92       	push	r5
    30bc:	6f 92       	push	r6
    30be:	7f 92       	push	r7
    30c0:	8f 92       	push	r8
    30c2:	9f 92       	push	r9
    30c4:	af 92       	push	r10
    30c6:	bf 92       	push	r11
    30c8:	cf 92       	push	r12
    30ca:	df 92       	push	r13
    30cc:	ef 92       	push	r14
    30ce:	ff 92       	push	r15
    30d0:	0f 93       	push	r16
    30d2:	1f 93       	push	r17
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	2c 97       	sbiw	r28, 0x0c	; 12
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	6c 01       	movw	r12, r24
    30ea:	1b 01       	movw	r2, r22
    30ec:	8a 01       	movw	r16, r20
    30ee:	fc 01       	movw	r30, r24
    30f0:	17 82       	std	Z+7, r1	; 0x07
    30f2:	16 82       	std	Z+6, r1	; 0x06
    30f4:	83 81       	ldd	r24, Z+3	; 0x03
    30f6:	81 ff       	sbrs	r24, 1
    30f8:	d1 c1       	rjmp	.+930    	; 0x349c <vfprintf+0x3e8>
    30fa:	2e 01       	movw	r4, r28
    30fc:	08 94       	sec
    30fe:	41 1c       	adc	r4, r1
    3100:	51 1c       	adc	r5, r1
    3102:	f6 01       	movw	r30, r12
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	f1 01       	movw	r30, r2
    3108:	93 fd       	sbrc	r25, 3
    310a:	85 91       	lpm	r24, Z+
    310c:	93 ff       	sbrs	r25, 3
    310e:	81 91       	ld	r24, Z+
    3110:	1f 01       	movw	r2, r30
    3112:	88 23       	and	r24, r24
    3114:	09 f4       	brne	.+2      	; 0x3118 <vfprintf+0x64>
    3116:	be c1       	rjmp	.+892    	; 0x3494 <vfprintf+0x3e0>
    3118:	85 32       	cpi	r24, 0x25	; 37
    311a:	39 f4       	brne	.+14     	; 0x312a <vfprintf+0x76>
    311c:	93 fd       	sbrc	r25, 3
    311e:	85 91       	lpm	r24, Z+
    3120:	93 ff       	sbrs	r25, 3
    3122:	81 91       	ld	r24, Z+
    3124:	1f 01       	movw	r2, r30
    3126:	85 32       	cpi	r24, 0x25	; 37
    3128:	29 f4       	brne	.+10     	; 0x3134 <vfprintf+0x80>
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	b6 01       	movw	r22, r12
    312e:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    3132:	e7 cf       	rjmp	.-50     	; 0x3102 <vfprintf+0x4e>
    3134:	ee 24       	eor	r14, r14
    3136:	ff 24       	eor	r15, r15
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	20 32       	cpi	r18, 0x20	; 32
    313c:	b0 f4       	brcc	.+44     	; 0x316a <vfprintf+0xb6>
    313e:	8b 32       	cpi	r24, 0x2B	; 43
    3140:	69 f0       	breq	.+26     	; 0x315c <vfprintf+0xa8>
    3142:	8c 32       	cpi	r24, 0x2C	; 44
    3144:	28 f4       	brcc	.+10     	; 0x3150 <vfprintf+0x9c>
    3146:	80 32       	cpi	r24, 0x20	; 32
    3148:	51 f0       	breq	.+20     	; 0x315e <vfprintf+0xaa>
    314a:	83 32       	cpi	r24, 0x23	; 35
    314c:	71 f4       	brne	.+28     	; 0x316a <vfprintf+0xb6>
    314e:	0b c0       	rjmp	.+22     	; 0x3166 <vfprintf+0xb2>
    3150:	8d 32       	cpi	r24, 0x2D	; 45
    3152:	39 f0       	breq	.+14     	; 0x3162 <vfprintf+0xae>
    3154:	80 33       	cpi	r24, 0x30	; 48
    3156:	49 f4       	brne	.+18     	; 0x316a <vfprintf+0xb6>
    3158:	21 60       	ori	r18, 0x01	; 1
    315a:	2c c0       	rjmp	.+88     	; 0x31b4 <vfprintf+0x100>
    315c:	22 60       	ori	r18, 0x02	; 2
    315e:	24 60       	ori	r18, 0x04	; 4
    3160:	29 c0       	rjmp	.+82     	; 0x31b4 <vfprintf+0x100>
    3162:	28 60       	ori	r18, 0x08	; 8
    3164:	27 c0       	rjmp	.+78     	; 0x31b4 <vfprintf+0x100>
    3166:	20 61       	ori	r18, 0x10	; 16
    3168:	25 c0       	rjmp	.+74     	; 0x31b4 <vfprintf+0x100>
    316a:	27 fd       	sbrc	r18, 7
    316c:	2c c0       	rjmp	.+88     	; 0x31c6 <vfprintf+0x112>
    316e:	38 2f       	mov	r19, r24
    3170:	30 53       	subi	r19, 0x30	; 48
    3172:	3a 30       	cpi	r19, 0x0A	; 10
    3174:	98 f4       	brcc	.+38     	; 0x319c <vfprintf+0xe8>
    3176:	26 ff       	sbrs	r18, 6
    3178:	08 c0       	rjmp	.+16     	; 0x318a <vfprintf+0xd6>
    317a:	8e 2d       	mov	r24, r14
    317c:	88 0f       	add	r24, r24
    317e:	e8 2e       	mov	r14, r24
    3180:	ee 0c       	add	r14, r14
    3182:	ee 0c       	add	r14, r14
    3184:	e8 0e       	add	r14, r24
    3186:	e3 0e       	add	r14, r19
    3188:	15 c0       	rjmp	.+42     	; 0x31b4 <vfprintf+0x100>
    318a:	8f 2d       	mov	r24, r15
    318c:	88 0f       	add	r24, r24
    318e:	f8 2e       	mov	r15, r24
    3190:	ff 0c       	add	r15, r15
    3192:	ff 0c       	add	r15, r15
    3194:	f8 0e       	add	r15, r24
    3196:	f3 0e       	add	r15, r19
    3198:	20 62       	ori	r18, 0x20	; 32
    319a:	0c c0       	rjmp	.+24     	; 0x31b4 <vfprintf+0x100>
    319c:	8e 32       	cpi	r24, 0x2E	; 46
    319e:	21 f4       	brne	.+8      	; 0x31a8 <vfprintf+0xf4>
    31a0:	26 fd       	sbrc	r18, 6
    31a2:	78 c1       	rjmp	.+752    	; 0x3494 <vfprintf+0x3e0>
    31a4:	20 64       	ori	r18, 0x40	; 64
    31a6:	06 c0       	rjmp	.+12     	; 0x31b4 <vfprintf+0x100>
    31a8:	8c 36       	cpi	r24, 0x6C	; 108
    31aa:	11 f4       	brne	.+4      	; 0x31b0 <vfprintf+0xfc>
    31ac:	20 68       	ori	r18, 0x80	; 128
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <vfprintf+0x100>
    31b0:	88 36       	cpi	r24, 0x68	; 104
    31b2:	49 f4       	brne	.+18     	; 0x31c6 <vfprintf+0x112>
    31b4:	f1 01       	movw	r30, r2
    31b6:	93 fd       	sbrc	r25, 3
    31b8:	85 91       	lpm	r24, Z+
    31ba:	93 ff       	sbrs	r25, 3
    31bc:	81 91       	ld	r24, Z+
    31be:	1f 01       	movw	r2, r30
    31c0:	88 23       	and	r24, r24
    31c2:	09 f0       	breq	.+2      	; 0x31c6 <vfprintf+0x112>
    31c4:	ba cf       	rjmp	.-140    	; 0x313a <vfprintf+0x86>
    31c6:	98 2f       	mov	r25, r24
    31c8:	95 54       	subi	r25, 0x45	; 69
    31ca:	93 30       	cpi	r25, 0x03	; 3
    31cc:	18 f0       	brcs	.+6      	; 0x31d4 <vfprintf+0x120>
    31ce:	90 52       	subi	r25, 0x20	; 32
    31d0:	93 30       	cpi	r25, 0x03	; 3
    31d2:	28 f4       	brcc	.+10     	; 0x31de <vfprintf+0x12a>
    31d4:	0c 5f       	subi	r16, 0xFC	; 252
    31d6:	1f 4f       	sbci	r17, 0xFF	; 255
    31d8:	ff e3       	ldi	r31, 0x3F	; 63
    31da:	f9 83       	std	Y+1, r31	; 0x01
    31dc:	0d c0       	rjmp	.+26     	; 0x31f8 <vfprintf+0x144>
    31de:	83 36       	cpi	r24, 0x63	; 99
    31e0:	31 f0       	breq	.+12     	; 0x31ee <vfprintf+0x13a>
    31e2:	83 37       	cpi	r24, 0x73	; 115
    31e4:	71 f0       	breq	.+28     	; 0x3202 <vfprintf+0x14e>
    31e6:	83 35       	cpi	r24, 0x53	; 83
    31e8:	09 f0       	breq	.+2      	; 0x31ec <vfprintf+0x138>
    31ea:	60 c0       	rjmp	.+192    	; 0x32ac <vfprintf+0x1f8>
    31ec:	22 c0       	rjmp	.+68     	; 0x3232 <vfprintf+0x17e>
    31ee:	f8 01       	movw	r30, r16
    31f0:	80 81       	ld	r24, Z
    31f2:	89 83       	std	Y+1, r24	; 0x01
    31f4:	0e 5f       	subi	r16, 0xFE	; 254
    31f6:	1f 4f       	sbci	r17, 0xFF	; 255
    31f8:	42 01       	movw	r8, r4
    31fa:	71 e0       	ldi	r23, 0x01	; 1
    31fc:	a7 2e       	mov	r10, r23
    31fe:	b1 2c       	mov	r11, r1
    3200:	16 c0       	rjmp	.+44     	; 0x322e <vfprintf+0x17a>
    3202:	62 e0       	ldi	r22, 0x02	; 2
    3204:	66 2e       	mov	r6, r22
    3206:	71 2c       	mov	r7, r1
    3208:	60 0e       	add	r6, r16
    320a:	71 1e       	adc	r7, r17
    320c:	f8 01       	movw	r30, r16
    320e:	80 80       	ld	r8, Z
    3210:	91 80       	ldd	r9, Z+1	; 0x01
    3212:	26 ff       	sbrs	r18, 6
    3214:	03 c0       	rjmp	.+6      	; 0x321c <vfprintf+0x168>
    3216:	6e 2d       	mov	r22, r14
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <vfprintf+0x16c>
    321c:	6f ef       	ldi	r22, 0xFF	; 255
    321e:	7f ef       	ldi	r23, 0xFF	; 255
    3220:	c4 01       	movw	r24, r8
    3222:	2c 87       	std	Y+12, r18	; 0x0c
    3224:	0e 94 75 1a 	call	0x34ea	; 0x34ea <strnlen>
    3228:	5c 01       	movw	r10, r24
    322a:	83 01       	movw	r16, r6
    322c:	2c 85       	ldd	r18, Y+12	; 0x0c
    322e:	2f 77       	andi	r18, 0x7F	; 127
    3230:	17 c0       	rjmp	.+46     	; 0x3260 <vfprintf+0x1ac>
    3232:	52 e0       	ldi	r21, 0x02	; 2
    3234:	65 2e       	mov	r6, r21
    3236:	71 2c       	mov	r7, r1
    3238:	60 0e       	add	r6, r16
    323a:	71 1e       	adc	r7, r17
    323c:	f8 01       	movw	r30, r16
    323e:	80 80       	ld	r8, Z
    3240:	91 80       	ldd	r9, Z+1	; 0x01
    3242:	26 ff       	sbrs	r18, 6
    3244:	03 c0       	rjmp	.+6      	; 0x324c <vfprintf+0x198>
    3246:	6e 2d       	mov	r22, r14
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <vfprintf+0x19c>
    324c:	6f ef       	ldi	r22, 0xFF	; 255
    324e:	7f ef       	ldi	r23, 0xFF	; 255
    3250:	c4 01       	movw	r24, r8
    3252:	2c 87       	std	Y+12, r18	; 0x0c
    3254:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <strnlen_P>
    3258:	5c 01       	movw	r10, r24
    325a:	2c 85       	ldd	r18, Y+12	; 0x0c
    325c:	20 68       	ori	r18, 0x80	; 128
    325e:	83 01       	movw	r16, r6
    3260:	23 fd       	sbrc	r18, 3
    3262:	20 c0       	rjmp	.+64     	; 0x32a4 <vfprintf+0x1f0>
    3264:	08 c0       	rjmp	.+16     	; 0x3276 <vfprintf+0x1c2>
    3266:	80 e2       	ldi	r24, 0x20	; 32
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	b6 01       	movw	r22, r12
    326c:	2c 87       	std	Y+12, r18	; 0x0c
    326e:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    3272:	fa 94       	dec	r15
    3274:	2c 85       	ldd	r18, Y+12	; 0x0c
    3276:	8f 2d       	mov	r24, r15
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	a8 16       	cp	r10, r24
    327c:	b9 06       	cpc	r11, r25
    327e:	98 f3       	brcs	.-26     	; 0x3266 <vfprintf+0x1b2>
    3280:	11 c0       	rjmp	.+34     	; 0x32a4 <vfprintf+0x1f0>
    3282:	f4 01       	movw	r30, r8
    3284:	27 fd       	sbrc	r18, 7
    3286:	85 91       	lpm	r24, Z+
    3288:	27 ff       	sbrs	r18, 7
    328a:	81 91       	ld	r24, Z+
    328c:	4f 01       	movw	r8, r30
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	b6 01       	movw	r22, r12
    3292:	2c 87       	std	Y+12, r18	; 0x0c
    3294:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    3298:	2c 85       	ldd	r18, Y+12	; 0x0c
    329a:	f1 10       	cpse	r15, r1
    329c:	fa 94       	dec	r15
    329e:	08 94       	sec
    32a0:	a1 08       	sbc	r10, r1
    32a2:	b1 08       	sbc	r11, r1
    32a4:	a1 14       	cp	r10, r1
    32a6:	b1 04       	cpc	r11, r1
    32a8:	61 f7       	brne	.-40     	; 0x3282 <vfprintf+0x1ce>
    32aa:	f1 c0       	rjmp	.+482    	; 0x348e <vfprintf+0x3da>
    32ac:	84 36       	cpi	r24, 0x64	; 100
    32ae:	11 f0       	breq	.+4      	; 0x32b4 <vfprintf+0x200>
    32b0:	89 36       	cpi	r24, 0x69	; 105
    32b2:	49 f5       	brne	.+82     	; 0x3306 <vfprintf+0x252>
    32b4:	27 ff       	sbrs	r18, 7
    32b6:	08 c0       	rjmp	.+16     	; 0x32c8 <vfprintf+0x214>
    32b8:	f8 01       	movw	r30, r16
    32ba:	60 81       	ld	r22, Z
    32bc:	71 81       	ldd	r23, Z+1	; 0x01
    32be:	82 81       	ldd	r24, Z+2	; 0x02
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	0c 5f       	subi	r16, 0xFC	; 252
    32c4:	1f 4f       	sbci	r17, 0xFF	; 255
    32c6:	09 c0       	rjmp	.+18     	; 0x32da <vfprintf+0x226>
    32c8:	f8 01       	movw	r30, r16
    32ca:	60 81       	ld	r22, Z
    32cc:	71 81       	ldd	r23, Z+1	; 0x01
    32ce:	88 27       	eor	r24, r24
    32d0:	77 fd       	sbrc	r23, 7
    32d2:	80 95       	com	r24
    32d4:	98 2f       	mov	r25, r24
    32d6:	0e 5f       	subi	r16, 0xFE	; 254
    32d8:	1f 4f       	sbci	r17, 0xFF	; 255
    32da:	4f e6       	ldi	r20, 0x6F	; 111
    32dc:	b4 2e       	mov	r11, r20
    32de:	b2 22       	and	r11, r18
    32e0:	97 ff       	sbrs	r25, 7
    32e2:	09 c0       	rjmp	.+18     	; 0x32f6 <vfprintf+0x242>
    32e4:	90 95       	com	r25
    32e6:	80 95       	com	r24
    32e8:	70 95       	com	r23
    32ea:	61 95       	neg	r22
    32ec:	7f 4f       	sbci	r23, 0xFF	; 255
    32ee:	8f 4f       	sbci	r24, 0xFF	; 255
    32f0:	9f 4f       	sbci	r25, 0xFF	; 255
    32f2:	f0 e8       	ldi	r31, 0x80	; 128
    32f4:	bf 2a       	or	r11, r31
    32f6:	a2 01       	movw	r20, r4
    32f8:	2a e0       	ldi	r18, 0x0A	; 10
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__ultoa_invert>
    3300:	78 2e       	mov	r7, r24
    3302:	74 18       	sub	r7, r4
    3304:	45 c0       	rjmp	.+138    	; 0x3390 <vfprintf+0x2dc>
    3306:	85 37       	cpi	r24, 0x75	; 117
    3308:	31 f4       	brne	.+12     	; 0x3316 <vfprintf+0x262>
    330a:	3f ee       	ldi	r19, 0xEF	; 239
    330c:	b3 2e       	mov	r11, r19
    330e:	b2 22       	and	r11, r18
    3310:	2a e0       	ldi	r18, 0x0A	; 10
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	25 c0       	rjmp	.+74     	; 0x3360 <vfprintf+0x2ac>
    3316:	99 ef       	ldi	r25, 0xF9	; 249
    3318:	b9 2e       	mov	r11, r25
    331a:	b2 22       	and	r11, r18
    331c:	8f 36       	cpi	r24, 0x6F	; 111
    331e:	c1 f0       	breq	.+48     	; 0x3350 <vfprintf+0x29c>
    3320:	80 37       	cpi	r24, 0x70	; 112
    3322:	20 f4       	brcc	.+8      	; 0x332c <vfprintf+0x278>
    3324:	88 35       	cpi	r24, 0x58	; 88
    3326:	09 f0       	breq	.+2      	; 0x332a <vfprintf+0x276>
    3328:	b5 c0       	rjmp	.+362    	; 0x3494 <vfprintf+0x3e0>
    332a:	0d c0       	rjmp	.+26     	; 0x3346 <vfprintf+0x292>
    332c:	80 37       	cpi	r24, 0x70	; 112
    332e:	21 f0       	breq	.+8      	; 0x3338 <vfprintf+0x284>
    3330:	88 37       	cpi	r24, 0x78	; 120
    3332:	09 f0       	breq	.+2      	; 0x3336 <vfprintf+0x282>
    3334:	af c0       	rjmp	.+350    	; 0x3494 <vfprintf+0x3e0>
    3336:	02 c0       	rjmp	.+4      	; 0x333c <vfprintf+0x288>
    3338:	20 e1       	ldi	r18, 0x10	; 16
    333a:	b2 2a       	or	r11, r18
    333c:	b4 fe       	sbrs	r11, 4
    333e:	0b c0       	rjmp	.+22     	; 0x3356 <vfprintf+0x2a2>
    3340:	84 e0       	ldi	r24, 0x04	; 4
    3342:	b8 2a       	or	r11, r24
    3344:	08 c0       	rjmp	.+16     	; 0x3356 <vfprintf+0x2a2>
    3346:	b4 fe       	sbrs	r11, 4
    3348:	09 c0       	rjmp	.+18     	; 0x335c <vfprintf+0x2a8>
    334a:	e6 e0       	ldi	r30, 0x06	; 6
    334c:	be 2a       	or	r11, r30
    334e:	06 c0       	rjmp	.+12     	; 0x335c <vfprintf+0x2a8>
    3350:	28 e0       	ldi	r18, 0x08	; 8
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	05 c0       	rjmp	.+10     	; 0x3360 <vfprintf+0x2ac>
    3356:	20 e1       	ldi	r18, 0x10	; 16
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <vfprintf+0x2ac>
    335c:	20 e1       	ldi	r18, 0x10	; 16
    335e:	32 e0       	ldi	r19, 0x02	; 2
    3360:	b7 fe       	sbrs	r11, 7
    3362:	08 c0       	rjmp	.+16     	; 0x3374 <vfprintf+0x2c0>
    3364:	f8 01       	movw	r30, r16
    3366:	60 81       	ld	r22, Z
    3368:	71 81       	ldd	r23, Z+1	; 0x01
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	0c 5f       	subi	r16, 0xFC	; 252
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
    3372:	07 c0       	rjmp	.+14     	; 0x3382 <vfprintf+0x2ce>
    3374:	f8 01       	movw	r30, r16
    3376:	60 81       	ld	r22, Z
    3378:	71 81       	ldd	r23, Z+1	; 0x01
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 5f       	subi	r16, 0xFE	; 254
    3380:	1f 4f       	sbci	r17, 0xFF	; 255
    3382:	a2 01       	movw	r20, r4
    3384:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__ultoa_invert>
    3388:	78 2e       	mov	r7, r24
    338a:	74 18       	sub	r7, r4
    338c:	ff e7       	ldi	r31, 0x7F	; 127
    338e:	bf 22       	and	r11, r31
    3390:	b6 fe       	sbrs	r11, 6
    3392:	0b c0       	rjmp	.+22     	; 0x33aa <vfprintf+0x2f6>
    3394:	2e ef       	ldi	r18, 0xFE	; 254
    3396:	b2 22       	and	r11, r18
    3398:	7e 14       	cp	r7, r14
    339a:	38 f4       	brcc	.+14     	; 0x33aa <vfprintf+0x2f6>
    339c:	b4 fe       	sbrs	r11, 4
    339e:	07 c0       	rjmp	.+14     	; 0x33ae <vfprintf+0x2fa>
    33a0:	b2 fc       	sbrc	r11, 2
    33a2:	05 c0       	rjmp	.+10     	; 0x33ae <vfprintf+0x2fa>
    33a4:	8f ee       	ldi	r24, 0xEF	; 239
    33a6:	b8 22       	and	r11, r24
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <vfprintf+0x2fa>
    33aa:	a7 2c       	mov	r10, r7
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <vfprintf+0x2fc>
    33ae:	ae 2c       	mov	r10, r14
    33b0:	8b 2d       	mov	r24, r11
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	b4 fe       	sbrs	r11, 4
    33b6:	0d c0       	rjmp	.+26     	; 0x33d2 <vfprintf+0x31e>
    33b8:	fe 01       	movw	r30, r28
    33ba:	e7 0d       	add	r30, r7
    33bc:	f1 1d       	adc	r31, r1
    33be:	20 81       	ld	r18, Z
    33c0:	20 33       	cpi	r18, 0x30	; 48
    33c2:	19 f4       	brne	.+6      	; 0x33ca <vfprintf+0x316>
    33c4:	e9 ee       	ldi	r30, 0xE9	; 233
    33c6:	be 22       	and	r11, r30
    33c8:	09 c0       	rjmp	.+18     	; 0x33dc <vfprintf+0x328>
    33ca:	a3 94       	inc	r10
    33cc:	b2 fe       	sbrs	r11, 2
    33ce:	06 c0       	rjmp	.+12     	; 0x33dc <vfprintf+0x328>
    33d0:	04 c0       	rjmp	.+8      	; 0x33da <vfprintf+0x326>
    33d2:	86 78       	andi	r24, 0x86	; 134
    33d4:	90 70       	andi	r25, 0x00	; 0
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	09 f0       	breq	.+2      	; 0x33dc <vfprintf+0x328>
    33da:	a3 94       	inc	r10
    33dc:	8b 2c       	mov	r8, r11
    33de:	99 24       	eor	r9, r9
    33e0:	b3 fc       	sbrc	r11, 3
    33e2:	14 c0       	rjmp	.+40     	; 0x340c <vfprintf+0x358>
    33e4:	b0 fe       	sbrs	r11, 0
    33e6:	0f c0       	rjmp	.+30     	; 0x3406 <vfprintf+0x352>
    33e8:	af 14       	cp	r10, r15
    33ea:	28 f4       	brcc	.+10     	; 0x33f6 <vfprintf+0x342>
    33ec:	e7 2c       	mov	r14, r7
    33ee:	ef 0c       	add	r14, r15
    33f0:	ea 18       	sub	r14, r10
    33f2:	af 2c       	mov	r10, r15
    33f4:	08 c0       	rjmp	.+16     	; 0x3406 <vfprintf+0x352>
    33f6:	e7 2c       	mov	r14, r7
    33f8:	06 c0       	rjmp	.+12     	; 0x3406 <vfprintf+0x352>
    33fa:	80 e2       	ldi	r24, 0x20	; 32
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	b6 01       	movw	r22, r12
    3400:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    3404:	a3 94       	inc	r10
    3406:	af 14       	cp	r10, r15
    3408:	c0 f3       	brcs	.-16     	; 0x33fa <vfprintf+0x346>
    340a:	04 c0       	rjmp	.+8      	; 0x3414 <vfprintf+0x360>
    340c:	af 14       	cp	r10, r15
    340e:	10 f4       	brcc	.+4      	; 0x3414 <vfprintf+0x360>
    3410:	fa 18       	sub	r15, r10
    3412:	01 c0       	rjmp	.+2      	; 0x3416 <vfprintf+0x362>
    3414:	ff 24       	eor	r15, r15
    3416:	84 fe       	sbrs	r8, 4
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <vfprintf+0x384>
    341a:	80 e3       	ldi	r24, 0x30	; 48
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	b6 01       	movw	r22, r12
    3420:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    3424:	82 fe       	sbrs	r8, 2
    3426:	1f c0       	rjmp	.+62     	; 0x3466 <vfprintf+0x3b2>
    3428:	81 fe       	sbrs	r8, 1
    342a:	03 c0       	rjmp	.+6      	; 0x3432 <vfprintf+0x37e>
    342c:	88 e5       	ldi	r24, 0x58	; 88
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	10 c0       	rjmp	.+32     	; 0x3452 <vfprintf+0x39e>
    3432:	88 e7       	ldi	r24, 0x78	; 120
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	0d c0       	rjmp	.+26     	; 0x3452 <vfprintf+0x39e>
    3438:	c4 01       	movw	r24, r8
    343a:	86 78       	andi	r24, 0x86	; 134
    343c:	90 70       	andi	r25, 0x00	; 0
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	91 f0       	breq	.+36     	; 0x3466 <vfprintf+0x3b2>
    3442:	81 fc       	sbrc	r8, 1
    3444:	02 c0       	rjmp	.+4      	; 0x344a <vfprintf+0x396>
    3446:	80 e2       	ldi	r24, 0x20	; 32
    3448:	01 c0       	rjmp	.+2      	; 0x344c <vfprintf+0x398>
    344a:	8b e2       	ldi	r24, 0x2B	; 43
    344c:	b7 fc       	sbrc	r11, 7
    344e:	8d e2       	ldi	r24, 0x2D	; 45
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	b6 01       	movw	r22, r12
    3454:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    3458:	06 c0       	rjmp	.+12     	; 0x3466 <vfprintf+0x3b2>
    345a:	80 e3       	ldi	r24, 0x30	; 48
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	b6 01       	movw	r22, r12
    3460:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    3464:	ea 94       	dec	r14
    3466:	7e 14       	cp	r7, r14
    3468:	c0 f3       	brcs	.-16     	; 0x345a <vfprintf+0x3a6>
    346a:	7a 94       	dec	r7
    346c:	f2 01       	movw	r30, r4
    346e:	e7 0d       	add	r30, r7
    3470:	f1 1d       	adc	r31, r1
    3472:	80 81       	ld	r24, Z
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	b6 01       	movw	r22, r12
    3478:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    347c:	77 20       	and	r7, r7
    347e:	a9 f7       	brne	.-22     	; 0x346a <vfprintf+0x3b6>
    3480:	06 c0       	rjmp	.+12     	; 0x348e <vfprintf+0x3da>
    3482:	80 e2       	ldi	r24, 0x20	; 32
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	b6 01       	movw	r22, r12
    3488:	0e 94 80 1a 	call	0x3500	; 0x3500 <fputc>
    348c:	fa 94       	dec	r15
    348e:	ff 20       	and	r15, r15
    3490:	c1 f7       	brne	.-16     	; 0x3482 <vfprintf+0x3ce>
    3492:	37 ce       	rjmp	.-914    	; 0x3102 <vfprintf+0x4e>
    3494:	f6 01       	movw	r30, r12
    3496:	26 81       	ldd	r18, Z+6	; 0x06
    3498:	37 81       	ldd	r19, Z+7	; 0x07
    349a:	02 c0       	rjmp	.+4      	; 0x34a0 <vfprintf+0x3ec>
    349c:	2f ef       	ldi	r18, 0xFF	; 255
    349e:	3f ef       	ldi	r19, 0xFF	; 255
    34a0:	c9 01       	movw	r24, r18
    34a2:	2c 96       	adiw	r28, 0x0c	; 12
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	ff 90       	pop	r15
    34b8:	ef 90       	pop	r14
    34ba:	df 90       	pop	r13
    34bc:	cf 90       	pop	r12
    34be:	bf 90       	pop	r11
    34c0:	af 90       	pop	r10
    34c2:	9f 90       	pop	r9
    34c4:	8f 90       	pop	r8
    34c6:	7f 90       	pop	r7
    34c8:	6f 90       	pop	r6
    34ca:	5f 90       	pop	r5
    34cc:	4f 90       	pop	r4
    34ce:	3f 90       	pop	r3
    34d0:	2f 90       	pop	r2
    34d2:	08 95       	ret

000034d4 <strnlen_P>:
    34d4:	fc 01       	movw	r30, r24
    34d6:	05 90       	lpm	r0, Z+
    34d8:	61 50       	subi	r22, 0x01	; 1
    34da:	70 40       	sbci	r23, 0x00	; 0
    34dc:	01 10       	cpse	r0, r1
    34de:	d8 f7       	brcc	.-10     	; 0x34d6 <strnlen_P+0x2>
    34e0:	80 95       	com	r24
    34e2:	90 95       	com	r25
    34e4:	8e 0f       	add	r24, r30
    34e6:	9f 1f       	adc	r25, r31
    34e8:	08 95       	ret

000034ea <strnlen>:
    34ea:	fc 01       	movw	r30, r24
    34ec:	61 50       	subi	r22, 0x01	; 1
    34ee:	70 40       	sbci	r23, 0x00	; 0
    34f0:	01 90       	ld	r0, Z+
    34f2:	01 10       	cpse	r0, r1
    34f4:	d8 f7       	brcc	.-10     	; 0x34ec <strnlen+0x2>
    34f6:	80 95       	com	r24
    34f8:	90 95       	com	r25
    34fa:	8e 0f       	add	r24, r30
    34fc:	9f 1f       	adc	r25, r31
    34fe:	08 95       	ret

00003500 <fputc>:
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	8c 01       	movw	r16, r24
    350a:	eb 01       	movw	r28, r22
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	81 ff       	sbrs	r24, 1
    3510:	1b c0       	rjmp	.+54     	; 0x3548 <fputc+0x48>
    3512:	82 ff       	sbrs	r24, 2
    3514:	0d c0       	rjmp	.+26     	; 0x3530 <fputc+0x30>
    3516:	2e 81       	ldd	r18, Y+6	; 0x06
    3518:	3f 81       	ldd	r19, Y+7	; 0x07
    351a:	8c 81       	ldd	r24, Y+4	; 0x04
    351c:	9d 81       	ldd	r25, Y+5	; 0x05
    351e:	28 17       	cp	r18, r24
    3520:	39 07       	cpc	r19, r25
    3522:	64 f4       	brge	.+24     	; 0x353c <fputc+0x3c>
    3524:	e8 81       	ld	r30, Y
    3526:	f9 81       	ldd	r31, Y+1	; 0x01
    3528:	01 93       	st	Z+, r16
    352a:	f9 83       	std	Y+1, r31	; 0x01
    352c:	e8 83       	st	Y, r30
    352e:	06 c0       	rjmp	.+12     	; 0x353c <fputc+0x3c>
    3530:	e8 85       	ldd	r30, Y+8	; 0x08
    3532:	f9 85       	ldd	r31, Y+9	; 0x09
    3534:	80 2f       	mov	r24, r16
    3536:	19 95       	eicall
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	31 f4       	brne	.+12     	; 0x3548 <fputc+0x48>
    353c:	8e 81       	ldd	r24, Y+6	; 0x06
    353e:	9f 81       	ldd	r25, Y+7	; 0x07
    3540:	01 96       	adiw	r24, 0x01	; 1
    3542:	9f 83       	std	Y+7, r25	; 0x07
    3544:	8e 83       	std	Y+6, r24	; 0x06
    3546:	02 c0       	rjmp	.+4      	; 0x354c <fputc+0x4c>
    3548:	0f ef       	ldi	r16, 0xFF	; 255
    354a:	1f ef       	ldi	r17, 0xFF	; 255
    354c:	c8 01       	movw	r24, r16
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	08 95       	ret

00003558 <__ultoa_invert>:
    3558:	fa 01       	movw	r30, r20
    355a:	aa 27       	eor	r26, r26
    355c:	28 30       	cpi	r18, 0x08	; 8
    355e:	51 f1       	breq	.+84     	; 0x35b4 <__ultoa_invert+0x5c>
    3560:	20 31       	cpi	r18, 0x10	; 16
    3562:	81 f1       	breq	.+96     	; 0x35c4 <__ultoa_invert+0x6c>
    3564:	e8 94       	clt
    3566:	6f 93       	push	r22
    3568:	6e 7f       	andi	r22, 0xFE	; 254
    356a:	6e 5f       	subi	r22, 0xFE	; 254
    356c:	7f 4f       	sbci	r23, 0xFF	; 255
    356e:	8f 4f       	sbci	r24, 0xFF	; 255
    3570:	9f 4f       	sbci	r25, 0xFF	; 255
    3572:	af 4f       	sbci	r26, 0xFF	; 255
    3574:	b1 e0       	ldi	r27, 0x01	; 1
    3576:	3e d0       	rcall	.+124    	; 0x35f4 <__ultoa_invert+0x9c>
    3578:	b4 e0       	ldi	r27, 0x04	; 4
    357a:	3c d0       	rcall	.+120    	; 0x35f4 <__ultoa_invert+0x9c>
    357c:	67 0f       	add	r22, r23
    357e:	78 1f       	adc	r23, r24
    3580:	89 1f       	adc	r24, r25
    3582:	9a 1f       	adc	r25, r26
    3584:	a1 1d       	adc	r26, r1
    3586:	68 0f       	add	r22, r24
    3588:	79 1f       	adc	r23, r25
    358a:	8a 1f       	adc	r24, r26
    358c:	91 1d       	adc	r25, r1
    358e:	a1 1d       	adc	r26, r1
    3590:	6a 0f       	add	r22, r26
    3592:	71 1d       	adc	r23, r1
    3594:	81 1d       	adc	r24, r1
    3596:	91 1d       	adc	r25, r1
    3598:	a1 1d       	adc	r26, r1
    359a:	20 d0       	rcall	.+64     	; 0x35dc <__ultoa_invert+0x84>
    359c:	09 f4       	brne	.+2      	; 0x35a0 <__ultoa_invert+0x48>
    359e:	68 94       	set
    35a0:	3f 91       	pop	r19
    35a2:	2a e0       	ldi	r18, 0x0A	; 10
    35a4:	26 9f       	mul	r18, r22
    35a6:	11 24       	eor	r1, r1
    35a8:	30 19       	sub	r19, r0
    35aa:	30 5d       	subi	r19, 0xD0	; 208
    35ac:	31 93       	st	Z+, r19
    35ae:	de f6       	brtc	.-74     	; 0x3566 <__ultoa_invert+0xe>
    35b0:	cf 01       	movw	r24, r30
    35b2:	08 95       	ret
    35b4:	46 2f       	mov	r20, r22
    35b6:	47 70       	andi	r20, 0x07	; 7
    35b8:	40 5d       	subi	r20, 0xD0	; 208
    35ba:	41 93       	st	Z+, r20
    35bc:	b3 e0       	ldi	r27, 0x03	; 3
    35be:	0f d0       	rcall	.+30     	; 0x35de <__ultoa_invert+0x86>
    35c0:	c9 f7       	brne	.-14     	; 0x35b4 <__ultoa_invert+0x5c>
    35c2:	f6 cf       	rjmp	.-20     	; 0x35b0 <__ultoa_invert+0x58>
    35c4:	46 2f       	mov	r20, r22
    35c6:	4f 70       	andi	r20, 0x0F	; 15
    35c8:	40 5d       	subi	r20, 0xD0	; 208
    35ca:	4a 33       	cpi	r20, 0x3A	; 58
    35cc:	18 f0       	brcs	.+6      	; 0x35d4 <__ultoa_invert+0x7c>
    35ce:	49 5d       	subi	r20, 0xD9	; 217
    35d0:	31 fd       	sbrc	r19, 1
    35d2:	40 52       	subi	r20, 0x20	; 32
    35d4:	41 93       	st	Z+, r20
    35d6:	02 d0       	rcall	.+4      	; 0x35dc <__ultoa_invert+0x84>
    35d8:	a9 f7       	brne	.-22     	; 0x35c4 <__ultoa_invert+0x6c>
    35da:	ea cf       	rjmp	.-44     	; 0x35b0 <__ultoa_invert+0x58>
    35dc:	b4 e0       	ldi	r27, 0x04	; 4
    35de:	a6 95       	lsr	r26
    35e0:	97 95       	ror	r25
    35e2:	87 95       	ror	r24
    35e4:	77 95       	ror	r23
    35e6:	67 95       	ror	r22
    35e8:	ba 95       	dec	r27
    35ea:	c9 f7       	brne	.-14     	; 0x35de <__ultoa_invert+0x86>
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	61 05       	cpc	r22, r1
    35f0:	71 05       	cpc	r23, r1
    35f2:	08 95       	ret
    35f4:	9b 01       	movw	r18, r22
    35f6:	ac 01       	movw	r20, r24
    35f8:	0a 2e       	mov	r0, r26
    35fa:	06 94       	lsr	r0
    35fc:	57 95       	ror	r21
    35fe:	47 95       	ror	r20
    3600:	37 95       	ror	r19
    3602:	27 95       	ror	r18
    3604:	ba 95       	dec	r27
    3606:	c9 f7       	brne	.-14     	; 0x35fa <__ultoa_invert+0xa2>
    3608:	62 0f       	add	r22, r18
    360a:	73 1f       	adc	r23, r19
    360c:	84 1f       	adc	r24, r20
    360e:	95 1f       	adc	r25, r21
    3610:	a0 1d       	adc	r26, r0
    3612:	08 95       	ret

00003614 <_exit>:
    3614:	f8 94       	cli

00003616 <__stop_program>:
    3616:	ff cf       	rjmp	.-2      	; 0x3616 <__stop_program>
